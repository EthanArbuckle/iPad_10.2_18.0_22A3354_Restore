uint64_t SeriesExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesExposureEvent.linkData.modify())()
{
  type metadata accessor for SeriesExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesExposureEvent.eventData.modify())()
{
  type metadata accessor for SeriesExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesExposureEvent.timedData.modify())()
{
  type metadata accessor for SeriesExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for SeriesExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t SeriesExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A22A8, (uint64_t)&nominal type descriptor for SeriesExposureEvent.Model);
}

uint64_t SeriesExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesExposureEvent.Model.init(seriesData:exposureData:linkData:eventData:timedData:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v27[160];

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v9 = a1[2];
  v10 = *((_WORD *)a1 + 12);
  v11 = *((_BYTE *)a1 + 26);
  v12 = a1[4];
  v13 = a1[5];
  v23 = a2[1];
  v24 = *a2;
  v22 = a2[2];
  v14 = *((_QWORD *)a2 + 6);
  v15 = *((_QWORD *)a2 + 7);
  sub_406FC(a3, (uint64_t)v27);
  *(_QWORD *)a6 = v7;
  *(_BYTE *)(a6 + 8) = v8;
  *(_QWORD *)(a6 + 16) = v9;
  *(_WORD *)(a6 + 24) = v10;
  *(_BYTE *)(a6 + 26) = v11;
  *(_QWORD *)(a6 + 32) = v12;
  *(_QWORD *)(a6 + 40) = v13;
  *(_OWORD *)(a6 + 48) = v24;
  *(_OWORD *)(a6 + 64) = v23;
  *(_OWORD *)(a6 + 80) = v22;
  *(_QWORD *)(a6 + 96) = v14;
  *(_QWORD *)(a6 + 104) = v15;
  sub_406FC((uint64_t)v27, a6 + 112);
  v16 = type metadata accessor for SeriesExposureEvent.Model(0);
  v17 = a6 + *(int *)(v16 + 28);
  v18 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a4, v18);
  v19 = a6 + *(int *)(v16 + 32);
  v20 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a5, v20);
}

uint64_t sub_15C054()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_15C088 + 4 * byte_20DC60[*v0]))(0x6144736569726573, 0xEA00000000006174);
}

uint64_t sub_15C088()
{
  return 0x657275736F707865;
}

uint64_t sub_15C0A8()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_15C0C0()
{
  return 0x746144746E657665;
}

uint64_t sub_15C0EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_15E4FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_15C110(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15C438();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15C138(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15C438();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SeriesExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[152];
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  __int128 v39;
  char v40;
  _OWORD v41[5];
  uint64_t v42;

  v2 = v1;
  v4 = sub_71B4(&qword_2A2198);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v8 = a1[4];
  sub_7988(a1, v9);
  v10 = sub_15C438();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SeriesExposureEvent.Model.CodingKeys, &type metadata for SeriesExposureEvent.Model.CodingKeys, v10, v9, v8);
  v11 = *((_BYTE *)v2 + 8);
  v12 = v2[2];
  v13 = *((_WORD *)v2 + 12);
  v14 = *((_BYTE *)v2 + 26);
  v34 = *v2;
  v35 = v11;
  v36 = v12;
  v37 = v13;
  v38 = v14;
  v39 = *((_OWORD *)v2 + 2);
  v33[0] = 0;
  v15 = sub_10AD0();
  v16 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, v33, v4, &type metadata for SeriesData, v15);
  if (v16)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v17 = v5;
  v18 = *((_OWORD *)v2 + 4);
  v41[0] = *((_OWORD *)v2 + 3);
  v41[1] = v18;
  v19 = *((_OWORD *)v2 + 6);
  v41[2] = *((_OWORD *)v2 + 5);
  v41[3] = v19;
  v40 = 1;
  v20 = sub_40CF4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v41, &v40, v4, &type metadata for ExposureData, v20);
  sub_406FC((uint64_t)(v2 + 14), (uint64_t)&v34);
  sub_406FC((uint64_t)&v34, (uint64_t)v33);
  HIBYTE(v32) = 2;
  v21 = sub_1B7F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v33, (char *)&v32 + 7, v4, &type metadata for LinkData, v21);
  v23 = type metadata accessor for SeriesExposureEvent.Model(0);
  v24 = (uint64_t)v2 + *(int *)(v23 + 28);
  v33[0] = 3;
  v25 = v4;
  v26 = type metadata accessor for EventData(0);
  v27 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v42 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, v33, v25, v26, v27);
  v28 = (uint64_t)v2 + *(int *)(v23 + 32);
  v33[0] = 4;
  v29 = type metadata accessor for TimedData(0);
  v30 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v31 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v28, v33, v42, v29, v30);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v7, v31);
}

unint64_t sub_15C438()
{
  unint64_t result;

  result = qword_2A21A0;
  if (!qword_2A21A0)
  {
    result = swift_getWitnessTable(byte_20DE6C, &type metadata for SeriesExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A21A0);
  }
  return result;
}

void SeriesExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  _BYTE v49[159];
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v40 = a2;
  v42 = type metadata accessor for TimedData(0);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (uint64_t *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v5 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v45 = v5;
  __chkstk_darwin(v4);
  v43 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = sub_71B4(&qword_2A21A8);
  v7 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeriesExposureEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_15C438();
  v46 = v9;
  v16 = v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesExposureEvent.Model.CodingKeys, &type metadata for SeriesExposureEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(a1);
  }
  else
  {
    v55 = v7;
    v38 = a1;
    v17 = (uint64_t)v12;
    v49[0] = 0;
    v18 = sub_10EA0();
    v19 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for SeriesData, v49, v47, &type metadata for SeriesData, v18);
    v20 = BYTE8(v51);
    v21 = v52;
    v22 = WORD4(v52);
    v23 = BYTE10(v52);
    *(_QWORD *)v12 = v51;
    v12[8] = v20;
    *((_QWORD *)v12 + 2) = v21;
    *((_WORD *)v12 + 12) = v22;
    v12[26] = v23;
    *((_OWORD *)v12 + 2) = v53;
    v49[0] = 1;
    v24 = sub_411FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for ExposureData, v49, v19, &type metadata for ExposureData, v24);
    v25 = v52;
    *((_OWORD *)v12 + 3) = v51;
    *((_OWORD *)v12 + 4) = v25;
    v26 = v54;
    *((_OWORD *)v12 + 5) = v53;
    *((_OWORD *)v12 + 6) = v26;
    v50 = 2;
    v27 = sub_1C06C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for LinkData, &v50, v19, &type metadata for LinkData, v27);
    v37 = 0;
    sub_406FC((uint64_t)&v51, (uint64_t)v49);
    sub_406FC((uint64_t)v49, (uint64_t)(v12 + 112));
    v48 = 3;
    v28 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v30 = v43;
    v29 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v44, &v48, v19, v44, v28);
    v36 = v10;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v45 + 32))(v17 + *(int *)(v10 + 28), v30, v29);
    v48 = 4;
    v31 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v32 = v19;
    v33 = v41;
    v34 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v42, &v48, v32, v42, v31);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v46, v47);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v39 + 32))(v17 + *(int *)(v36 + 32), v33, v34);
    sub_15C940(v17, v40);
    sub_7DAC(v38);
    sub_15C984(v17);
  }
}

uint64_t sub_15C940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_15C984(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeriesExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_15C9C0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SeriesExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_15C9D4(_QWORD *a1)
{
  return SeriesExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_15C9E8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A80, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2168, (uint64_t)sub_15B9E0, a1);
}

uint64_t sub_15CA0C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A88, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2180, (uint64_t)sub_15BA20, a1);
}

uint64_t sub_15CA30@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for SeriesExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296310);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297A28);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for SeriesExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for SeriesExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for SeriesExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for SeriesExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for SeriesExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15D1F0);
}

uint64_t sub_15D1F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296310);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297A28);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A10);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SeriesExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15D2F0);
}

uint64_t sub_15D2F0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296310);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297A28);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A10);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_15D3EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_297AC0, (uint64_t (*)(void))sub_411FC, (uint64_t (*)(void))sub_40CF4, (uint64_t)&type metadata for ExposureData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)((char *)a2 + 25);
    v7 = a2[5];
    *(_QWORD *)(v4 + 32) = a2[4];
    *(_QWORD *)(v4 + 40) = v7;
    v8 = a2[7];
    swift_bridgeObjectRetain(v7);
    if (v8)
    {
      *(_QWORD *)(v4 + 48) = a2[6];
      *(_QWORD *)(v4 + 56) = v8;
      v9 = a2[9];
      *(_QWORD *)(v4 + 64) = a2[8];
      *(_QWORD *)(v4 + 72) = v9;
      v10 = a2[11];
      *(_QWORD *)(v4 + 80) = a2[10];
      *(_QWORD *)(v4 + 88) = v10;
      v11 = a2[13];
      *(_QWORD *)(v4 + 96) = a2[12];
      *(_QWORD *)(v4 + 104) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      v12 = a2[15];
      if (v12)
      {
LABEL_4:
        *(_QWORD *)(v4 + 112) = a2[14];
        *(_QWORD *)(v4 + 120) = v12;
        v13 = a2[17];
        *(_QWORD *)(v4 + 128) = a2[16];
        *(_QWORD *)(v4 + 136) = v13;
        v14 = a2[19];
        *(_QWORD *)(v4 + 144) = a2[18];
        *(_QWORD *)(v4 + 152) = v14;
        *(_BYTE *)(v4 + 160) = *((_BYTE *)a2 + 160);
        v15 = a2[22];
        *(_QWORD *)(v4 + 168) = a2[21];
        *(_QWORD *)(v4 + 176) = v15;
        v16 = a2[24];
        *(_QWORD *)(v4 + 184) = a2[23];
        *(_QWORD *)(v4 + 192) = v16;
        v38 = v6;
        v17 = a2[26];
        *(_QWORD *)(v4 + 200) = a2[25];
        *(_QWORD *)(v4 + 208) = v17;
        v18 = a2[28];
        *(_QWORD *)(v4 + 216) = a2[27];
        *(_QWORD *)(v4 + 224) = v18;
        v19 = a2[30];
        *(_QWORD *)(v4 + 232) = a2[29];
        *(_QWORD *)(v4 + 240) = v19;
        v20 = a2[32];
        *(_QWORD *)(v4 + 248) = a2[31];
        *(_QWORD *)(v4 + 256) = v20;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        v21 = v17;
        v6 = v38;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
LABEL_8:
        v29 = *(int *)(v6 + 28);
        v30 = v4 + v29;
        v31 = (uint64_t)a2 + v29;
        v32 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
        v33 = *(int *)(v6 + 32);
        v34 = v4 + v33;
        v35 = (uint64_t)a2 + v33;
        v36 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        return v4;
      }
    }
    else
    {
      v23 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 64) = v23;
      v24 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 96) = v24;
      v12 = a2[15];
      if (v12)
        goto LABEL_4;
    }
    v25 = *((_OWORD *)a2 + 14);
    *(_OWORD *)(v4 + 208) = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v4 + 224) = v25;
    *(_OWORD *)(v4 + 240) = *((_OWORD *)a2 + 15);
    *(_QWORD *)(v4 + 256) = a2[32];
    v26 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v4 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v4 + 160) = v26;
    v27 = *((_OWORD *)a2 + 12);
    *(_OWORD *)(v4 + 176) = *((_OWORD *)a2 + 11);
    *(_OWORD *)(v4 + 192) = v27;
    v28 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(v4 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v4 + 128) = v28;
    goto LABEL_8;
  }
  v22 = *a2;
  *(_QWORD *)v4 = *a2;
  v4 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v22);
  return v4;
}

uint64_t destroy for SeriesExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[5]);
  v4 = a1[7];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[11]);
    swift_bridgeObjectRelease(a1[13]);
  }
  v5 = a1[15];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
    swift_bridgeObjectRelease(a1[32]);
  }
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + *(int *)(a2 + 32);
  v9 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for SeriesExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  if (!v7)
  {
    v21 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v21;
    v22 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v22;
    v11 = *(_QWORD *)(a2 + 120);
    if (v11)
      goto LABEL_3;
LABEL_5:
    v23 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v23;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v24 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v24;
    v25 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v25;
    v26 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v26;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v11 = *(_QWORD *)(a2 + 120);
  if (!v11)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v14 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v15;
  v36 = a3;
  v16 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v16;
  v17 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v17;
  v18 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v18;
  v19 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v19;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  v20 = v16;
  a3 = v36;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
LABEL_6:
  v27 = *(int *)(a3 + 28);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = *(int *)(a3 + 32);
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  return a1;
}

uint64_t assignWithCopy for SeriesExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  _OWORD *v15;
  __int128 *v16;
  BAEventReporter *v17;
  uint64_t v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  uint64_t v27;
  BAEventReporter *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  _OWORD *v65;
  BAEventReporter *v66;
  uint64_t v67;
  uint64_t v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  uint64_t v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  uint64_t v85;
  BAEventReporter *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  BAEventReporter *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;
  uint64_t v103;
  BAEventReporter *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  BAEventReporter *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  int64_t v118;
  int64_t v119;
  id v120;
  uint64_t v121;
  BAEventReporter *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  int64_t v127;
  int64_t v128;
  id v129;
  uint64_t v130;
  BAEventReporter *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  int64_t v136;
  int64_t v137;
  id v138;
  uint64_t v139;
  BAEventReporter *v140;
  SEL v141;
  id v142;
  id v143;
  id v144;
  int64_t v145;
  int64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = (_OWORD *)(a1 + 48);
  v16 = (__int128 *)(a2 + 48);
  v17 = *(BAEventReporter **)(a1 + 56);
  v18 = *(_QWORD *)(a2 + 56);
  if (v17)
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v17, v20, v21, v22, v23, v24, v25, v26);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v27 = *(_QWORD *)(a2 + 72);
      v28 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v36 = *(_QWORD *)(a2 + 88);
      v37 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v45 = *(_QWORD *)(a2 + 104);
      v46 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      sub_4294C((_QWORD *)(a1 + 48));
      v58 = *(_OWORD *)(a2 + 96);
      v60 = *v16;
      v59 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v58;
      *v15 = v60;
      *(_OWORD *)(a1 + 64) = v59;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v54 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v54;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v55 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v55;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v56 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v56;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v57 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v57;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
  }
  else
  {
    v61 = *v16;
    v62 = *(_OWORD *)(a2 + 64);
    v63 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v63;
    *v15 = v61;
    *(_OWORD *)(a1 + 64) = v62;
  }
  v64 = (_OWORD *)(a1 + 112);
  v65 = (_OWORD *)(a2 + 112);
  v66 = *(BAEventReporter **)(a1 + 120);
  v67 = *(_QWORD *)(a2 + 120);
  if (v66)
  {
    if (v67)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v68 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 120) = v68;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease(v66, v69, v70, v71, v72, v73, v74, v75);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v76 = *(_QWORD *)(a2 + 136);
      v77 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v76;
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v85 = *(_QWORD *)(a2 + 152);
      v86 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v85;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v94 = *(_QWORD *)(a2 + 176);
      v95 = *(BAEventReporter **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v94;
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v103 = *(_QWORD *)(a2 + 192);
      v104 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v103;
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v112 = *(_QWORD *)(a2 + 208);
      v113 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v112;
      swift_bridgeObjectRetain(v112);
      swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v121 = *(_QWORD *)(a2 + 224);
      v122 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v121;
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v130 = *(_QWORD *)(a2 + 240);
      v131 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v130;
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      v139 = *(_QWORD *)(a2 + 256);
      v140 = *(BAEventReporter **)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v139;
      swift_bridgeObjectRetain(v139);
      swift_bridgeObjectRelease(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      sub_1E060((_QWORD *)(a1 + 112));
      v158 = *(_OWORD *)(a2 + 128);
      *v64 = *v65;
      *(_OWORD *)(a1 + 128) = v158;
      v159 = *(_OWORD *)(a2 + 192);
      v161 = *(_OWORD *)(a2 + 144);
      v160 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v159;
      *(_OWORD *)(a1 + 144) = v161;
      *(_OWORD *)(a1 + 160) = v160;
      v163 = *(_OWORD *)(a2 + 224);
      v162 = *(_OWORD *)(a2 + 240);
      v164 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v163;
      *(_OWORD *)(a1 + 240) = v162;
      *(_OWORD *)(a1 + 208) = v164;
    }
  }
  else if (v67)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v148 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v148;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v149 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v149;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v150 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v150;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v151 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v151;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v181 = a3;
    v152 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v152;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v153 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v153;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v154 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v154;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v155 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v155;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v156 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 256) = v156;
    swift_bridgeObjectRetain(v148);
    swift_bridgeObjectRetain(v149);
    swift_bridgeObjectRetain(v150);
    swift_bridgeObjectRetain(v151);
    v157 = v152;
    a3 = v181;
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v154);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
  }
  else
  {
    v165 = *(_OWORD *)(a2 + 128);
    *v64 = *v65;
    *(_OWORD *)(a1 + 128) = v165;
    v166 = *(_OWORD *)(a2 + 144);
    v167 = *(_OWORD *)(a2 + 160);
    v168 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v168;
    *(_OWORD *)(a1 + 144) = v166;
    *(_OWORD *)(a1 + 160) = v167;
    v169 = *(_OWORD *)(a2 + 208);
    v170 = *(_OWORD *)(a2 + 224);
    v171 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 224) = v170;
    *(_OWORD *)(a1 + 240) = v171;
    *(_OWORD *)(a1 + 208) = v169;
  }
  v172 = *(int *)(a3 + 28);
  v173 = a1 + v172;
  v174 = a2 + v172;
  v175 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 24))(v173, v174, v175);
  v176 = *(int *)(a3 + 32);
  v177 = a1 + v176;
  v178 = a2 + v176;
  v179 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 24))(v177, v178, v179);
  return a1;
}

uint64_t assignWithTake for SeriesExposureEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  int64_t v17;
  int64_t v18;
  void *v19;
  BAEventReporter *v20;
  uint64_t v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  __int128 v49;
  __int128 v50;
  BAEventReporter *v51;
  uint64_t v52;
  uint64_t v53;
  BAEventReporter *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  int64_t v59;
  int64_t v60;
  id v61;
  uint64_t v62;
  BAEventReporter *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  int64_t v68;
  int64_t v69;
  id v70;
  uint64_t v71;
  BAEventReporter *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  int64_t v77;
  int64_t v78;
  id v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v20 = *(BAEventReporter **)(a1 + 56);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 56);
    if (v21)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v21;
      swift_bridgeObjectRelease(v20, v13, v14, v15, v16, v17, v18, v19);
      v22 = *(_QWORD *)(a2 + 72);
      v23 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v22;
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      v31 = *(_QWORD *)(a2 + 88);
      v32 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v31;
      swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
      v40 = *(_QWORD *)(a2 + 104);
      v41 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v40;
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      goto LABEL_6;
    }
    sub_4294C((_QWORD *)(a1 + 48));
  }
  v49 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v49;
  v50 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v50;
LABEL_6:
  v51 = *(BAEventReporter **)(a1 + 120);
  if (!v51)
  {
LABEL_10:
    v125 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v125;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v126 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v126;
    v127 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v127;
    v128 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v128;
    goto LABEL_11;
  }
  v52 = *(_QWORD *)(a2 + 120);
  if (!v52)
  {
    sub_1E060((_QWORD *)(a1 + 112));
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v52;
  swift_bridgeObjectRelease(v51, v13, v14, v15, v16, v17, v18, v19);
  v53 = *(_QWORD *)(a2 + 136);
  v54 = *(BAEventReporter **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v53;
  swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
  v62 = *(_QWORD *)(a2 + 152);
  v63 = *(BAEventReporter **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v62;
  swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v71 = *(_QWORD *)(a2 + 176);
  v72 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v71;
  swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
  v80 = *(_QWORD *)(a2 + 192);
  v81 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v80;
  swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
  v89 = *(_QWORD *)(a2 + 208);
  v90 = *(BAEventReporter **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v89;
  swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
  v98 = *(_QWORD *)(a2 + 224);
  v99 = *(BAEventReporter **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v98;
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  v107 = *(_QWORD *)(a2 + 240);
  v108 = *(BAEventReporter **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v107;
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  v116 = *(_QWORD *)(a2 + 256);
  v117 = *(BAEventReporter **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v116;
  swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
LABEL_11:
  v129 = a3[7];
  v130 = a1 + v129;
  v131 = a2 + v129;
  v132 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 40))(v130, v131, v132);
  v133 = a3[8];
  v134 = a1 + v133;
  v135 = a2 + v133;
  v136 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 40))(v134, v135, v136);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15E160);
}

uint64_t sub_15E160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 28);
    }
    else
    {
      v11 = type metadata accessor for TimedData(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15E218);
}

uint64_t sub_15E218(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_15E2B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = "0";
  v5[1] = &unk_20DD78;
  v5[2] = &unk_20DD90;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeriesExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_15E3A4 + 4 * byte_20DC6A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_15E3D8 + 4 * byte_20DC65[v4]))();
}

uint64_t sub_15E3D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15E3E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15E3E8);
  return result;
}

uint64_t sub_15E3F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15E3FCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_15E400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15E408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesExposureEvent.Model.CodingKeys()
{
  return &type metadata for SeriesExposureEvent.Model.CodingKeys;
}

unint64_t sub_15E428()
{
  unint64_t result;

  result = qword_2A22F0;
  if (!qword_2A22F0)
  {
    result = swift_getWitnessTable(byte_20DE44, &type metadata for SeriesExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A22F0);
  }
  return result;
}

unint64_t sub_15E470()
{
  unint64_t result;

  result = qword_2A22F8;
  if (!qword_2A22F8)
  {
    result = swift_getWitnessTable("E<\a", &type metadata for SeriesExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A22F8);
  }
  return result;
}

unint64_t sub_15E4B8()
{
  unint64_t result;

  result = qword_2A2300;
  if (!qword_2A2300)
  {
    result = swift_getWitnessTable("-<\a", &type metadata for SeriesExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2300);
  }
  return result;
}

uint64_t sub_15E4FC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEC00000061746144)
  {
    v7 = 0xEC00000061746144;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::AutoNightThemeStatus_optional __swiftcall AutoNightThemeStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::AutoNightThemeStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268440, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t AutoNightThemeStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_15E7DC + 4 * byte_20DEC0[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_15E7DC()
{
  return 28271;
}

uint64_t sub_15E7E8()
{
  return 6710895;
}

uint64_t sub_15E7F8()
{
  return 0x746867696CLL;
}

uint64_t sub_15E80C()
{
  return 1802658148;
}

unint64_t sub_15E81C()
{
  return 0xD000000000000012;
}

unint64_t sub_15E83C()
{
  unint64_t result;

  result = qword_2A2308;
  if (!qword_2A2308)
  {
    result = swift_getWitnessTable("A<\a", &type metadata for AutoNightThemeStatus);
    atomic_store(result, (unint64_t *)&qword_2A2308);
  }
  return result;
}

void sub_15E880()
{
  char *v0;

  sub_19592C(*v0);
}

void sub_15E888(uint64_t a1)
{
  char *v1;

  sub_1EC99C(a1, *v1);
}

void sub_15E890(uint64_t a1)
{
  char *v1;

  sub_1D3B58(a1, *v1);
}

BookAnalytics::AutoNightThemeStatus_optional sub_15E898(Swift::String *a1)
{
  return AutoNightThemeStatus.init(rawValue:)(*a1);
}

uint64_t sub_15E8A4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_15E8D4 + 4 * byte_20DEC6[*v0]))();
}

void sub_15E8D4(_QWORD *a1@<X8>)
{
  *a1 = 28271;
  a1[1] = 0xE200000000000000;
}

void sub_15E8E4(_QWORD *a1@<X8>)
{
  *a1 = 6710895;
  a1[1] = 0xE300000000000000;
}

void sub_15E8F8(_QWORD *a1@<X8>)
{
  *a1 = 0x746867696CLL;
  a1[1] = 0xE500000000000000;
}

void sub_15E910(_QWORD *a1@<X8>)
{
  *a1 = 1802658148;
  a1[1] = 0xE400000000000000;
}

void sub_15E924(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x800000000021E240;
}

uint64_t sub_15E944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_15EAB8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_15E9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_15EAB8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for AutoNightThemeStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_15EA38 + 4 * byte_20DED1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_15EA6C + 4 * byte_20DECC[v4]))();
}

uint64_t sub_15EA6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15EA74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15EA7CLL);
  return result;
}

uint64_t sub_15EA88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15EA90);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_15EA94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15EA9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoNightThemeStatus()
{
  return &type metadata for AutoNightThemeStatus;
}

unint64_t sub_15EAB8()
{
  unint64_t result;

  result = qword_2A2310;
  if (!qword_2A2310)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AutoNightThemeStatus, &type metadata for AutoNightThemeStatus);
    atomic_store(result, (unint64_t *)&qword_2A2310);
  }
  return result;
}

uint64_t sub_15EAFC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A2318, &enum case for SessionGroup.default(_:));
}

uint64_t static SearchFallbackEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A90, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2318, a1);
}

uint64_t sub_15EB3C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A2330, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SearchFallbackEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A98, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2330, a1);
}

uint64_t SearchFallbackEvent.searchMethodData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29EDA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SearchFallbackEvent.searchMethodData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29EDA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t SearchFallbackEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchFallbackEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchFallbackEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A23B8, (uint64_t)&nominal type descriptor for SearchFallbackEvent);
}

uint64_t SearchFallbackEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchFallbackEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchFallbackEvent.eventData.modify())()
{
  type metadata accessor for SearchFallbackEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchFallbackEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for SearchFallbackEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t SearchFallbackEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchFallbackEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchFallbackEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2448, (uint64_t)&nominal type descriptor for SearchFallbackEvent.Model);
}

uint64_t SearchFallbackEvent.Model.init(searchMethodData:eventData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = &a3[*(int *)(type metadata accessor for SearchFallbackEvent.Model(0) + 20)];
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_15EDF4()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0xD000000000000010;
}

uint64_t sub_15EE38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_15FC14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_15EE5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15F010();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15EE84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15F010();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchFallbackEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_2A2348);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_15F010();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchFallbackEvent.Model.CodingKeys, &type metadata for SearchFallbackEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_B6BE0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for SearchMethodData, v12);
  if (!v2)
  {
    v13 = &v3[*(int *)(type metadata accessor for SearchFallbackEvent.Model(0) + 20)];
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_15F010()
{
  unint64_t result;

  result = qword_2A2350;
  if (!qword_2A2350)
  {
    result = swift_getWitnessTable("\r;\a", &type metadata for SearchFallbackEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2350);
  }
  return result;
}

uint64_t SearchFallbackEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_2A2358);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SearchFallbackEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_15F010();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchFallbackEvent.Model.CodingKeys, &type metadata for SearchFallbackEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = v8;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_B6B98();
    v19 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for SearchMethodData, &v33, v31, &type metadata for SearchMethodData, v18);
    v24 = v14;
    *v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_15F2A8(v22, v21);
  }
  return sub_7DAC(a1);
}

uint64_t sub_15F2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchFallbackEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_15F2EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SearchFallbackEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_15F300(_QWORD *a1)
{
  return SearchFallbackEvent.Model.encode(to:)(a1);
}

uint64_t sub_15F314@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A90, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2318, (uint64_t)sub_15EAFC, a1);
}

uint64_t sub_15F338@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A98, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2330, (uint64_t)sub_15EB3C, a1);
}

uint64_t sub_15F35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchFallbackEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_29EDA0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for SearchFallbackEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SearchFallbackEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for SearchFallbackEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for SearchFallbackEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SearchFallbackEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFallbackEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15F70C);
}

uint64_t sub_15F70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_29EDA0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchFallbackEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15F794);
}

uint64_t sub_15F794(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_29EDA0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_15F818(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_15F89C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_15F89C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29EE40)
  {
    v2 = sub_B6B98();
    v3 = sub_B6BE0();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for SearchMethodData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29EE40);
  }
}

uint64_t getEnumTagSinglePayload for SearchFallbackEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15F90C);
}

uint64_t sub_15F90C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 248)
  {
    v4 = *a1;
    if (v4 >= 8)
      return v4 - 7;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchFallbackEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15F98C);
}

_BYTE *sub_15F98C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 248)
  {
    *result = a2 + 7;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_15F9FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_20E0D0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchFallbackEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_15FABC + 4 * byte_20E005[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_15FAF0 + 4 * byte_20E000[v4]))();
}

uint64_t sub_15FAF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15FAF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15FB00);
  return result;
}

uint64_t sub_15FB0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15FB14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_15FB18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15FB20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchFallbackEvent.Model.CodingKeys()
{
  return &type metadata for SearchFallbackEvent.Model.CodingKeys;
}

unint64_t sub_15FB40()
{
  unint64_t result;

  result = qword_2A2480;
  if (!qword_2A2480)
  {
    result = swift_getWitnessTable("%;\a", &type metadata for SearchFallbackEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2480);
  }
  return result;
}

unint64_t sub_15FB88()
{
  unint64_t result;

  result = qword_2A2488;
  if (!qword_2A2488)
  {
    result = swift_getWitnessTable("m;\a", &type metadata for SearchFallbackEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2488);
  }
  return result;
}

unint64_t sub_15FBD0()
{
  unint64_t result;

  result = qword_2A2490;
  if (!qword_2A2490)
  {
    result = swift_getWitnessTable("U;\a", &type metadata for SearchFallbackEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2490);
  }
  return result;
}

uint64_t sub_15FC14(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000000002215F0;
    if (a2 == 0x80000000002215F0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002215F0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::AccountUserAction_optional __swiftcall AccountUserAction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::AccountUserAction_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2684F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t AccountUserAction.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E49676F6CLL;
  if (*v0 != 1)
    v1 = 0x74754F676F6CLL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_15FDB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_29518(*a1, *a2);
}

unint64_t sub_15FDC8()
{
  unint64_t result;

  result = qword_2A2498;
  if (!qword_2A2498)
  {
    result = swift_getWitnessTable("u;\a", &type metadata for AccountUserAction);
    atomic_store(result, (unint64_t *)&qword_2A2498);
  }
  return result;
}

Swift::Int sub_15FE0C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE500000000000000;
  v3 = 0x6E49676F6CLL;
  if (v1 != 1)
  {
    v3 = 0x74754F676F6CLL;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_15FEA4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE500000000000000;
  v3 = 0x6E49676F6CLL;
  if (*v1 != 1)
  {
    v3 = 0x74754F676F6CLL;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_15FF18(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE500000000000000;
  v4 = 0x6E49676F6CLL;
  if (v2 != 1)
  {
    v4 = 0x74754F676F6CLL;
    v3 = 0xE600000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::AccountUserAction_optional sub_15FFAC(Swift::String *a1)
{
  return AccountUserAction.init(rawValue:)(*a1);
}

void sub_15FFB8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x6E49676F6CLL;
  if (v2 != 1)
  {
    v5 = 0x74754F676F6CLL;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_160010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_160184();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_16006C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_160184();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for AccountUserAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_160104 + 4 * byte_20E205[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_160138 + 4 * byte_20E200[v4]))();
}

uint64_t sub_160138(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_160140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x160148);
  return result;
}

uint64_t sub_160154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x16015CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_160160(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_160168(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountUserAction()
{
  return &type metadata for AccountUserAction;
}

unint64_t sub_160184()
{
  unint64_t result;

  result = qword_2A24A0;
  if (!qword_2A24A0)
  {
    result = swift_getWitnessTable("E;\a", &type metadata for AccountUserAction);
    atomic_store(result, (unint64_t *)&qword_2A24A0);
  }
  return result;
}

uint64_t sub_1601C8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A24A8, &enum case for SessionGroup.default(_:));
}

uint64_t static RedownloadFailEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AA0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A24A8, a1);
}

uint64_t sub_160208(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A24C0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RedownloadFailEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AA8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A24C0, a1);
}

uint64_t RedownloadFailEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RedownloadFailEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A2560, (uint64_t)&nominal type descriptor for RedownloadFailEvent);
}

uint64_t RedownloadFailEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadFailEvent.contentStoreData.modify())()
{
  type metadata accessor for RedownloadFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadFailEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadFailEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadFailEvent.sectionData.modify())()
{
  type metadata accessor for RedownloadFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadFailEvent.redownloadFailData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 28);
  v4 = sub_71B4(&qword_2A24D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadFailEvent.redownloadFailData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 28);
  v4 = sub_71B4(&qword_2A24D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadFailEvent.redownloadFailData.modify())()
{
  type metadata accessor for RedownloadFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadFailEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadFailEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadFailEvent.eventData.modify())()
{
  type metadata accessor for RedownloadFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadFailEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadFailEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadFailEvent.timedData.modify())()
{
  type metadata accessor for RedownloadFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadFailEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RedownloadFailEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_2A24D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v2, v15);
}

void RedownloadFailEvent.Model.redownloadFailData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 280);
}

uint64_t RedownloadFailEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RedownloadFailEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2608, (uint64_t)&nominal type descriptor for RedownloadFailEvent.Model);
}

uint64_t RedownloadFailEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadFailEvent.Model(0) + 36);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadFailEvent.Model.init(contentData:contentStoreData:sectionData:redownloadFailData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  int v18;
  char v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  v12 = *(_OWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_WORD *)(a1 + 56);
  v16 = *(_DWORD *)(a1 + 60);
  v17 = *(_BYTE *)(a1 + 64);
  v18 = *(_DWORD *)(a1 + 68);
  v19 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a7 = *(_QWORD *)a1;
  *(_QWORD *)(a7 + 8) = v10;
  *(_BYTE *)(a7 + 16) = v11;
  *(_OWORD *)(a7 + 24) = v12;
  *(_QWORD *)(a7 + 40) = v13;
  *(_QWORD *)(a7 + 48) = v14;
  *(_WORD *)(a7 + 56) = v15;
  *(_DWORD *)(a7 + 60) = v16;
  *(_BYTE *)(a7 + 64) = v17;
  *(_DWORD *)(a7 + 68) = v18;
  *(_BYTE *)(a7 + 72) = v19;
  v20 = *(_DWORD *)(a1 + 73);
  v21 = *a2;
  v22 = a2[1];
  *(_OWORD *)(a7 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a7 + 96) = v21;
  v23 = a2[2];
  v24 = a2[3];
  *(_OWORD *)(a7 + 112) = v22;
  *(_OWORD *)(a7 + 128) = v23;
  *(_OWORD *)(a7 + 144) = v24;
  v25 = a3[1];
  *(_OWORD *)(a7 + 168) = *a3;
  *(_OWORD *)(a7 + 184) = v25;
  v26 = a3[3];
  *(_OWORD *)(a7 + 200) = a3[2];
  *(_OWORD *)(a7 + 216) = v26;
  v27 = a3[5];
  *(_OWORD *)(a7 + 232) = a3[4];
  v28 = *(_BYTE *)(a1 + 77);
  LODWORD(v13) = *((_DWORD *)a2 + 16);
  LOBYTE(v14) = *((_BYTE *)a2 + 68);
  LOBYTE(v15) = *a4;
  *(_DWORD *)(a7 + 73) = v20;
  *(_BYTE *)(a7 + 77) = v28;
  *(_BYTE *)(a7 + 164) = v14;
  *(_DWORD *)(a7 + 160) = v13;
  *(_OWORD *)(a7 + 248) = v27;
  *(_OWORD *)(a7 + 264) = a3[6];
  *(_BYTE *)(a7 + 280) = v15;
  v29 = type metadata accessor for RedownloadFailEvent.Model(0);
  v30 = a7 + *(int *)(v29 + 32);
  v31 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v30, a5, v31);
  v32 = a7 + *(int *)(v29 + 36);
  v33 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v32, a6, v33);
}

uint64_t sub_16095C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_160998 + 4 * byte_20E320[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_160998()
{
  return 0xD000000000000010;
}

uint64_t sub_1609B4()
{
  return 0x446E6F6974636573;
}

unint64_t sub_1609C8()
{
  return 0xD000000000000012;
}

uint64_t sub_1609E8()
{
  return 0x746144746E657665;
}

uint64_t sub_160A14()
{
  unsigned __int8 *v0;

  return sub_16095C(*v0);
}

uint64_t sub_160A1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1633B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_160A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_160DAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_160A68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_160DAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RedownloadFailEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A24E0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_160DAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RedownloadFailEvent.Model.CodingKeys, &type metadata for RedownloadFailEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v46 = *(_QWORD *)v4;
  *((_QWORD *)&v46 + 1) = v13;
  v47[0] = v14;
  *(_OWORD *)&v47[8] = v15;
  *(_QWORD *)&v47[24] = v16;
  *(_QWORD *)&v48 = v17;
  WORD4(v48) = v18;
  HIDWORD(v48) = v19;
  LOBYTE(v49) = v20;
  DWORD1(v49) = v21;
  BYTE8(v49) = v22;
  *(_DWORD *)((char *)&v49 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v49) = v23;
  v50 = *(_OWORD *)(v4 + 80);
  v52 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v52, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v46 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v47 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v47[16] = *(_OWORD *)(v4 + 128);
    v48 = v28;
    BYTE4(v49) = v26;
    LODWORD(v49) = v25;
    v52 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v46, &v52, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_OWORD *)(v4 + 184);
    v31 = *(_OWORD *)(v4 + 200);
    v46 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v47 = v30;
    v32 = *(_OWORD *)(v4 + 216);
    v33 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)&v47[16] = v31;
    v48 = v32;
    v34 = *(_OWORD *)(v4 + 248);
    v35 = *(_OWORD *)(v4 + 264);
    v49 = v33;
    v50 = v34;
    v51 = v35;
    v52 = 2;
    v36 = sub_1B768();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v46, &v52, v6, &type metadata for SectionData, v36);
    LOBYTE(v46) = *(_BYTE *)(v4 + 280);
    v52 = 3;
    v37 = sub_160DF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v52, v6, &type metadata for RedownloadFailData, v37);
    v38 = type metadata accessor for RedownloadFailEvent.Model(0);
    v39 = v4 + *(int *)(v38 + 32);
    LOBYTE(v46) = 4;
    v40 = type metadata accessor for EventData(0);
    v41 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v39, &v46, v6, v40, v41);
    v42 = v4 + *(int *)(v38 + 36);
    LOBYTE(v46) = 5;
    v43 = type metadata accessor for TimedData(0);
    v44 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v42, &v46, v6, v43, v44);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_160DAC()
{
  unint64_t result;

  result = qword_2A24E8;
  if (!qword_2A24E8)
  {
    result = swift_getWitnessTable(byte_20E554, &type metadata for RedownloadFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A24E8);
  }
  return result;
}

unint64_t sub_160DF0()
{
  unint64_t result;

  result = qword_2A24F0;
  if (!qword_2A24F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RedownloadFailData, &type metadata for RedownloadFailData);
    atomic_store(result, (unint64_t *)&qword_2A24F0);
  }
  return result;
}

void RedownloadFailEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v64;
  _BYTE v65[32];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;

  v55 = a2;
  v3 = type metadata accessor for TimedData(0);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  __chkstk_darwin(v3);
  v56 = (uint64_t *)((char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = type metadata accessor for EventData(0);
  v5 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v7 = (uint64_t *)((char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = sub_71B4(&qword_2A24F8);
  v8 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RedownloadFailEvent.Model(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v62 = a1;
  sub_7988(a1, v14);
  v16 = sub_160DAC();
  v61 = v10;
  v17 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RedownloadFailEvent.Model.CodingKeys, &type metadata for RedownloadFailEvent.Model.CodingKeys, v16, v14, v15);
  if (v17)
  {
    sub_7DAC(v62);
  }
  else
  {
    v53 = v7;
    v63 = v8;
    v18 = (uint64_t)v13;
    v20 = v58;
    v19 = v59;
    v54 = v5;
    v70 = 0;
    v21 = sub_1779C();
    v22 = v60;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for ContentData, &v70, v60, &type metadata for ContentData, v21);
    v23 = *((_QWORD *)&v64 + 1);
    v24 = v65[0];
    v25 = *(_OWORD *)&v65[8];
    v26 = *(_QWORD *)&v65[24];
    v27 = v66;
    v28 = WORD4(v66);
    v29 = HIDWORD(v66);
    v30 = v67;
    v31 = DWORD1(v67);
    v32 = BYTE8(v67);
    v33 = BYTE13(v67);
    *(_QWORD *)v18 = v64;
    *(_QWORD *)(v18 + 8) = v23;
    *(_BYTE *)(v18 + 16) = v24;
    *(_OWORD *)(v18 + 24) = v25;
    *(_QWORD *)(v18 + 40) = v26;
    *(_QWORD *)(v18 + 48) = v27;
    *(_WORD *)(v18 + 56) = v28;
    *(_DWORD *)(v18 + 60) = v29;
    *(_BYTE *)(v18 + 64) = v30;
    *(_DWORD *)(v18 + 68) = v31;
    *(_BYTE *)(v18 + 72) = v32;
    *(_DWORD *)(v18 + 73) = *(_DWORD *)((char *)&v67 + 9);
    *(_BYTE *)(v18 + 77) = v33;
    *(_OWORD *)(v18 + 80) = v68;
    v70 = 1;
    v34 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for ContentStoreData, &v70, v22, &type metadata for ContentStoreData, v34);
    v35 = v67;
    v36 = BYTE4(v67);
    v37 = *(_OWORD *)v65;
    *(_OWORD *)(v18 + 96) = v64;
    *(_OWORD *)(v18 + 112) = v37;
    v38 = v66;
    *(_OWORD *)(v18 + 128) = *(_OWORD *)&v65[16];
    *(_OWORD *)(v18 + 144) = v38;
    *(_BYTE *)(v18 + 164) = v36;
    *(_DWORD *)(v18 + 160) = v35;
    v70 = 2;
    v39 = sub_1BFE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for SectionData, &v70, v22, &type metadata for SectionData, v39);
    v40 = v63;
    v41 = *(_OWORD *)v65;
    *(_OWORD *)(v18 + 168) = v64;
    v42 = *(_OWORD *)&v65[16];
    v43 = v66;
    *(_OWORD *)(v18 + 184) = v41;
    *(_OWORD *)(v18 + 200) = v42;
    v44 = v67;
    v45 = v68;
    *(_OWORD *)(v18 + 216) = v43;
    *(_OWORD *)(v18 + 232) = v44;
    v46 = v69;
    *(_OWORD *)(v18 + 248) = v45;
    *(_OWORD *)(v18 + 264) = v46;
    v70 = 3;
    v47 = sub_16141C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for RedownloadFailData, &v70, v22, &type metadata for RedownloadFailData, v47);
    v52 = 0;
    *(_BYTE *)(v18 + 280) = v64;
    LOBYTE(v64) = 4;
    v48 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v49 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v53, v57, &v64, v22, v57, v48);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v54 + 32))(v18 + *(int *)(v11 + 32), v53, v49);
    LOBYTE(v64) = 5;
    v50 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v51 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v19, &v64, v22, v19, v50);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v61, v60);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v20 + 32))(v18 + *(int *)(v11 + 36), v51, v19);
    sub_161460(v18, v55);
    sub_7DAC(v62);
    sub_1614A4(v18);
  }
}

unint64_t sub_16141C()
{
  unint64_t result;

  result = qword_2A2500;
  if (!qword_2A2500)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RedownloadFailData, &type metadata for RedownloadFailData);
    atomic_store(result, (unint64_t *)&qword_2A2500);
  }
  return result;
}

uint64_t sub_161460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RedownloadFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1614A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RedownloadFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1614E0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RedownloadFailEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1614F4(_QWORD *a1)
{
  return RedownloadFailEvent.Model.encode(to:)(a1);
}

uint64_t sub_161508@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AA0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A24A8, (uint64_t)sub_1601C8, a1);
}

uint64_t sub_16152C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AA8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A24C0, (uint64_t)sub_160208, a1);
}

uint64_t sub_161550@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_2A24D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v4, v16);
}

uint64_t *initializeBufferWithCopyOfBuffer for RedownloadFailEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A00);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_2A24D8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for RedownloadFailEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_2A24D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for RedownloadFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A24D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t assignWithCopy for RedownloadFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A24D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for RedownloadFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A24D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for RedownloadFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A24D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedownloadFailEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_161E54);
}

uint64_t sub_161E54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_2A24D8);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v8 = sub_71B4(&qword_295D78);
            v12 = *(_QWORD *)(v8 - 8);
            v13 = a3[9];
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RedownloadFailEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_161F7C);
}

uint64_t sub_161F7C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_2A24D8);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v10 = sub_71B4(&qword_295D78);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[9];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1620A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_2A2570, (uint64_t (*)(void))sub_16141C, (uint64_t (*)(void))sub_160DF0, (uint64_t)&type metadata for RedownloadFailData);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_87D8(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RedownloadFailEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[17];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      v13 = a2[13];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v13;
      v14 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v12;
      v15 = a2[19];
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_QWORD *)(a1 + 152) = v15;
      *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
      *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v15);
      v16 = a2[23];
      if (v16)
      {
LABEL_4:
        *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
        *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
        *(_QWORD *)(a1 + 176) = a2[22];
        *(_QWORD *)(a1 + 184) = v16;
        v17 = a2[25];
        *(_QWORD *)(a1 + 192) = a2[24];
        *(_QWORD *)(a1 + 200) = v17;
        v18 = a2[27];
        *(_QWORD *)(a1 + 208) = a2[26];
        *(_QWORD *)(a1 + 216) = v18;
        v19 = a2[29];
        *(_QWORD *)(a1 + 224) = a2[28];
        *(_QWORD *)(a1 + 232) = v19;
        v20 = a2[31];
        *(_QWORD *)(a1 + 240) = a2[30];
        *(_QWORD *)(a1 + 248) = v20;
        *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
        *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
        v21 = a2[34];
        *(_QWORD *)(a1 + 264) = a2[33];
        *(_QWORD *)(a1 + 272) = v21;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
LABEL_8:
        *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 280);
        v28 = *(int *)(a3 + 32);
        v29 = a1 + v28;
        v30 = (uint64_t)a2 + v28;
        v31 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        v32 = *(int *)(a3 + 36);
        v33 = a1 + v32;
        v34 = (uint64_t)a2 + v32;
        v35 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
        return a1;
      }
    }
    else
    {
      v23 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v23;
      *(_QWORD *)(a1 + 157) = *(uint64_t *)((char *)a2 + 157);
      v24 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v24;
      v16 = a2[23];
      if (v16)
        goto LABEL_4;
    }
    v25 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v25;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    v26 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(a1 + 184) = v26;
    v27 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = v27;
    goto LABEL_8;
  }
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v22);
  return a1;
}

uint64_t destroy for RedownloadFailEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = a1[17];
  if (v4)
  {
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = a1[23];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[25]);
    swift_bridgeObjectRelease(a1[27]);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v7 = (char *)a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)a1 + *(int *)(a2 + 36);
  v10 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for RedownloadFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (!v11)
  {
    v21 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v22;
    v15 = *(_QWORD *)(a2 + 184);
    if (v15)
      goto LABEL_3;
LABEL_5:
    v23 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v23;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    v24 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v24;
    v25 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v25;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v15 = *(_QWORD *)(a2 + 184);
  if (!v15)
    goto LABEL_5;
LABEL_3:
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v15;
  v16 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v16;
  v17 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v17;
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v18;
  v19 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v19;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v20 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v20;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
LABEL_6:
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  v26 = *(int *)(a3 + 32);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  v30 = *(int *)(a3 + 36);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

uint64_t assignWithCopy for RedownloadFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  BAEventReporter *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  uint64_t v56;
  BAEventReporter *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  uint64_t v65;
  BAEventReporter *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  uint64_t v74;
  BAEventReporter *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  _OWORD *v96;
  BAEventReporter *v97;
  uint64_t v98;
  uint64_t v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  uint64_t v125;
  BAEventReporter *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  int64_t v131;
  int64_t v132;
  id v133;
  uint64_t v134;
  BAEventReporter *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  int64_t v140;
  int64_t v141;
  id v142;
  int v143;
  uint64_t v144;
  BAEventReporter *v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  int64_t v150;
  int64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v44 = (_OWORD *)(a1 + 96);
  v45 = (_OWORD *)(a2 + 96);
  v46 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v46)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v47 = *(_QWORD *)(a2 + 104);
      v48 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v56 = *(_QWORD *)(a2 + 120);
      v57 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v65 = *(_QWORD *)(a2 + 136);
      v66 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v74 = *(_QWORD *)(a2 + 152);
      v75 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      v83 = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_DWORD *)(a1 + 160) = v83;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 96));
      *v44 = *v45;
      v90 = *(_OWORD *)(a2 + 128);
      v89 = *(_OWORD *)(a2 + 144);
      v91 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
      *(_OWORD *)(a1 + 128) = v90;
      *(_OWORD *)(a1 + 144) = v89;
      *(_OWORD *)(a1 + 112) = v91;
    }
  }
  else if (v46)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v84 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v84;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v85 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v85;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v86 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v86;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v87 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v87;
    v88 = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v88;
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v87);
  }
  else
  {
    *v44 = *v45;
    v92 = *(_OWORD *)(a2 + 112);
    v93 = *(_OWORD *)(a2 + 128);
    v94 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_OWORD *)(a1 + 128) = v93;
    *(_OWORD *)(a1 + 144) = v94;
    *(_OWORD *)(a1 + 112) = v92;
  }
  v95 = (_OWORD *)(a1 + 168);
  v96 = (_OWORD *)(a2 + 168);
  v97 = *(BAEventReporter **)(a1 + 184);
  v98 = *(_QWORD *)(a2 + 184);
  if (v97)
  {
    if (v98)
    {
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v99 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 184) = v99;
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRelease(v97, v100, v101, v102, v103, v104, v105, v106);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v107 = *(_QWORD *)(a2 + 200);
      v108 = *(BAEventReporter **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v107;
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v116 = *(_QWORD *)(a2 + 216);
      v117 = *(BAEventReporter **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v116;
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v125 = *(_QWORD *)(a2 + 232);
      v126 = *(BAEventReporter **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v125;
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v134 = *(_QWORD *)(a2 + 248);
      v135 = *(BAEventReporter **)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
      v143 = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      *(_DWORD *)(a1 + 256) = v143;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v144 = *(_QWORD *)(a2 + 272);
      v145 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v144;
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRelease(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      sub_1DFF8((_QWORD *)(a1 + 168));
      v161 = *(_OWORD *)(a2 + 184);
      v160 = *(_OWORD *)(a2 + 200);
      *v95 = *v96;
      *(_OWORD *)(a1 + 184) = v161;
      *(_OWORD *)(a1 + 200) = v160;
      v162 = *(_OWORD *)(a2 + 264);
      v164 = *(_OWORD *)(a2 + 216);
      v163 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v162;
      *(_OWORD *)(a1 + 216) = v164;
      *(_OWORD *)(a1 + 232) = v163;
    }
  }
  else if (v98)
  {
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v153 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v153;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v154 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v154;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v155 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v155;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v156 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v156;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v157 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v157;
    v158 = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    *(_DWORD *)(a1 + 256) = v158;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v159 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v159;
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v154);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v159);
  }
  else
  {
    v165 = *v96;
    v166 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v166;
    *v95 = v165;
    v167 = *(_OWORD *)(a2 + 216);
    v168 = *(_OWORD *)(a2 + 232);
    v169 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v169;
    *(_OWORD *)(a1 + 216) = v167;
    *(_OWORD *)(a1 + 232) = v168;
  }
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  v170 = *(int *)(a3 + 32);
  v171 = a1 + v170;
  v172 = a2 + v170;
  v173 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 24))(v171, v172, v173);
  v174 = *(int *)(a3 + 36);
  v175 = a1 + v174;
  v176 = a2 + v174;
  v177 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v177 - 8) + 24))(v175, v176, v177);
  return a1;
}

uint64_t initializeWithTake for RedownloadFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v11 = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)(a1 + 200) = v11;
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = *(int *)(a3 + 36);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for RedownloadFailEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  uint64_t v47;
  BAEventReporter *v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  __int128 v76;
  __int128 v77;
  BAEventReporter *v78;
  uint64_t v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a2 + 136))
    {
      v47 = *(_QWORD *)(a2 + 104);
      v48 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v47;
      swift_bridgeObjectRelease(v48, v40, v41, v42, v43, v44, v45, v46);
      v49 = *(_QWORD *)(a2 + 120);
      v50 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v49;
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      v58 = *(_QWORD *)(a2 + 136);
      v59 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 152);
      v68 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      goto LABEL_6;
    }
    sub_59D40((_QWORD *)(a1 + 96));
  }
  v76 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v76;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v77 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v77;
LABEL_6:
  v78 = *(BAEventReporter **)(a1 + 184);
  if (!v78)
  {
LABEL_10:
    v125 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v125;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    v126 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v126;
    v127 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v127;
    goto LABEL_11;
  }
  v79 = *(_QWORD *)(a2 + 184);
  if (!v79)
  {
    sub_1DFF8((_QWORD *)(a1 + 168));
    goto LABEL_10;
  }
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v79;
  swift_bridgeObjectRelease(v78, v40, v41, v42, v43, v44, v45, v46);
  v80 = *(_QWORD *)(a2 + 200);
  v81 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v80;
  swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
  v89 = *(_QWORD *)(a2 + 216);
  v90 = *(BAEventReporter **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v89;
  swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
  v98 = *(_QWORD *)(a2 + 232);
  v99 = *(BAEventReporter **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v98;
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  v107 = *(_QWORD *)(a2 + 248);
  v108 = *(BAEventReporter **)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v107;
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v116 = *(_QWORD *)(a2 + 272);
  v117 = *(BAEventReporter **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v116;
  swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
LABEL_11:
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  v128 = a3[8];
  v129 = a1 + v128;
  v130 = a2 + v128;
  v131 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 40))(v129, v130, v131);
  v132 = a3[9];
  v133 = a1 + v132;
  v134 = a2 + v132;
  v135 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 40))(v133, v134, v135);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedownloadFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_163018);
}

uint64_t sub_163018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RedownloadFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1630C4);
}

uint64_t sub_1630C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_163160(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[1] = &unk_20E448;
  v5[2] = &unk_20E460;
  v5[3] = &unk_20E478;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RedownloadFailEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_163258 + 4 * byte_20E32B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_16328C + 4 * byte_20E326[v4]))();
}

uint64_t sub_16328C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_163294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16329CLL);
  return result;
}

uint64_t sub_1632A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1632B0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1632B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1632BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RedownloadFailEvent.Model.CodingKeys()
{
  return &type metadata for RedownloadFailEvent.Model.CodingKeys;
}

unint64_t sub_1632DC()
{
  unint64_t result;

  result = qword_2A2650;
  if (!qword_2A2650)
  {
    result = swift_getWitnessTable(byte_20E52C, &type metadata for RedownloadFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2650);
  }
  return result;
}

unint64_t sub_163324()
{
  unint64_t result;

  result = qword_2A2658;
  if (!qword_2A2658)
  {
    result = swift_getWitnessTable("-:\a", &type metadata for RedownloadFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2658);
  }
  return result;
}

unint64_t sub_16336C()
{
  unint64_t result;

  result = qword_2A2660;
  if (!qword_2A2660)
  {
    result = swift_getWitnessTable(byte_20E4C4, &type metadata for RedownloadFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2660);
  }
  return result;
}

uint64_t sub_1633B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v8 = 0xEB00000000617461;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000002223C0)
  {
    v9 = 0x80000000002223C0;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000002223C0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void __swiftcall LibraryItemTypeData.init(contentPrivateID:contentUserID:contentType:contentID:isSample:)(BookAnalytics::LibraryItemTypeData *__return_ptr retstr, Swift::String contentPrivateID, Swift::String contentUserID, BookAnalytics::ContentType contentType, Swift::String contentID, Swift::Bool isSample)
{
  BookAnalytics::ContentType v6;

  v6 = *(_BYTE *)contentType;
  retstr->contentPrivateID = contentPrivateID;
  retstr->contentUserID = contentUserID;
  retstr->contentType = v6;
  retstr->contentID = contentID;
  retstr->isSample = isSample;
}

uint64_t LibraryItemTypeData.isSample.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t LibraryItemTypeData.isSample.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t sub_163688()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1636BC + 4 * byte_20E5B0[*v0]))(0xD000000000000010, 0x800000000021EBA0);
}

uint64_t sub_1636BC()
{
  return 0x55746E65746E6F63;
}

uint64_t sub_1636E0()
{
  return 0x54746E65746E6F63;
}

uint64_t sub_163700()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_16371C()
{
  return 0x656C706D61537369;
}

uint64_t sub_163734@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1641E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_163758(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_163DFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_163780(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_163DFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibraryItemTypeData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = sub_71B4(&qword_2A2668);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v25 = v1[3];
  v26 = v9;
  v24 = *((unsigned __int8 *)v1 + 32);
  v10 = v1[5];
  v22 = v1[6];
  v23 = v10;
  v21 = *((unsigned __int8 *)v1 + 56);
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_163DFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibraryItemTypeData.CodingKeys, &type metadata for LibraryItemTypeData.CodingKeys, v13, v11, v12);
  v33 = 0;
  v14 = v27;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v33, v3);
  if (!v14)
  {
    v15 = v24;
    v17 = v22;
    v16 = v23;
    v32 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v25, &v32, v3);
    v31 = v15;
    v30 = 2;
    v18 = sub_FBF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v3, &type metadata for ContentType, v18);
    v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v29, v3);
    v28 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v28, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void LibraryItemTypeData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  unint64_t v18;
  int v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  BAEventReporter *v27;
  char v28;
  BAEventReporter *v29;
  BAEventReporter *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BAEventReporter *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BAEventReporter *v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;

  v5 = sub_71B4(&qword_2A2678);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_163DFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibraryItemTypeData.CodingKeys, &type metadata for LibraryItemTypeData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    BYTE2(v56) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v56 + 2, v5);
    v14 = v13;
    v51 = v12;
    BYTE1(v56) = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v56 + 1, v5);
    v52 = v16;
    v17 = v16;
    v49 = v15;
    v55 = 2;
    v18 = sub_FC34();
    swift_bridgeObjectRetain(v17);
    v50 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v56, &type metadata for ContentType, &v55, v5, &type metadata for ContentType, v18);
    v19 = v56;
    v54 = 3;
    v46 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
    v47 = v19;
    v53 = 4;
    v48 = v27;
    swift_bridgeObjectRetain(v27);
    LOBYTE(v17) = KeyedDecodingContainer.decode(_:forKey:)(&v53, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v28 = v17 & 1;
    v29 = v52;
    *(_QWORD *)a2 = v51;
    *(_QWORD *)(a2 + 8) = v14;
    v30 = v48;
    *(_QWORD *)(a2 + 16) = v49;
    *(_QWORD *)(a2 + 24) = v29;
    *(_BYTE *)(a2 + 32) = v47;
    *(_QWORD *)(a2 + 40) = v46;
    *(_QWORD *)(a2 + 48) = v30;
    *(_BYTE *)(a2 + 56) = v28;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(v29, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(v14, v20, v21, v22, v23, v24, v25, v26);
  }
}

void sub_163CAC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  LibraryItemTypeData.init(from:)(a1, a2);
}

uint64_t sub_163CC0(_QWORD *a1)
{
  return LibraryItemTypeData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics19LibraryItemTypeDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  char v19;
  char v20;
  int v21;
  int v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((_BYTE *)a1 + 32);
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v21 = *(unsigned __int8 *)(a2 + 56);
  v22 = *((unsigned __int8 *)a1 + 56);
  if (v4 == *(_QWORD *)a2 && v5 == v11
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v11, 0), result = 0, (v16 & 1) != 0))
  {
    if (v6 == v12 && v7 == v13
      || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0), result = 0, (v18 & 1) != 0))
    {
      sub_26C28(v8);
      if ((v19 & 1) != 0)
      {
        if (v9 == v14 && v10 == v15)
          return v22 ^ v21 ^ 1u;
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v14, v15, 0);
        result = 0;
        if ((v20 & 1) != 0)
          return v22 ^ v21 ^ 1u;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_163DFC()
{
  unint64_t result;

  result = qword_2A2670;
  if (!qword_2A2670)
  {
    result = swift_getWitnessTable(byte_20E768, &type metadata for LibraryItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2670);
  }
  return result;
}

unint64_t sub_163E44()
{
  unint64_t result;

  result = qword_2A2680;
  if (!qword_2A2680)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LibraryItemTypeData, &type metadata for LibraryItemTypeData);
    atomic_store(result, (unint64_t *)&qword_2A2680);
  }
  return result;
}

unint64_t sub_163E8C()
{
  unint64_t result;

  result = qword_2A2688;
  if (!qword_2A2688)
  {
    result = swift_getWitnessTable("q:\a", &type metadata for LibraryItemTypeData);
    atomic_store(result, (unint64_t *)&qword_2A2688);
  }
  return result;
}

uint64_t initializeWithCopy for LibraryItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for LibraryItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for LibraryItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for LibraryItemTypeData()
{
  return &type metadata for LibraryItemTypeData;
}

uint64_t storeEnumTagSinglePayload for LibraryItemTypeData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_164090 + 4 * byte_20E5BA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1640C4 + 4 * byte_20E5B5[v4]))();
}

uint64_t sub_1640C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1640CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1640D4);
  return result;
}

uint64_t sub_1640E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1640E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1640EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1640F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryItemTypeData.CodingKeys()
{
  return &type metadata for LibraryItemTypeData.CodingKeys;
}

unint64_t sub_164114()
{
  unint64_t result;

  result = qword_2A2690;
  if (!qword_2A2690)
  {
    result = swift_getWitnessTable("a9\a", &type metadata for LibraryItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2690);
  }
  return result;
}

unint64_t sub_16415C()
{
  unint64_t result;

  result = qword_2A2698;
  if (!qword_2A2698)
  {
    result = swift_getWitnessTable("!:\a", &type metadata for LibraryItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2698);
  }
  return result;
}

unint64_t sub_1641A4()
{
  unint64_t result;

  result = qword_2A26A0;
  if (!qword_2A26A0)
  {
    result = swift_getWitnessTable("\t:\a", &type metadata for LibraryItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A26A0);
  }
  return result;
}

uint64_t sub_1641E8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x800000000021EBA0;
    if (a2 == 0x800000000021EBA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EBA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x55746E65746E6F63 && a2 == 0xED00004449726573)
  {
    v6 = 0xED00004449726573;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55746E65746E6F63, 0xED00004449726573, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079)
  {
    v7 = 0xEB00000000657079;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E65746E6F63, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x49746E65746E6F63 && a2 == 0xE900000000000044)
  {
    v8 = 0xE900000000000044;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746E65746E6F63, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x656C706D61537369 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C706D61537369, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_164448(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A26A8, &enum case for SessionGroup.default(_:));
}

uint64_t static SeriesFilterEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AB0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A26A8, a1);
}

uint64_t sub_164488(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A26C0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SeriesFilterEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AB8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A26C0, a1);
}

uint64_t SeriesFilterEvent.formatFilterData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesFilterEvent(0) + 20);
  v4 = sub_71B4(&qword_2A26D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesFilterEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A2750, (uint64_t)&nominal type descriptor for SeriesFilterEvent);
}

uint64_t SeriesFilterEvent.formatFilterData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesFilterEvent(0) + 20);
  v4 = sub_71B4(&qword_2A26D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesFilterEvent.formatFilterData.modify())()
{
  type metadata accessor for SeriesFilterEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesFilterEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesFilterEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesFilterEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesFilterEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesFilterEvent.eventData.modify())()
{
  type metadata accessor for SeriesFilterEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesFilterEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for SeriesFilterEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_2A26D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

void SeriesFilterEvent.Model.formatFilterData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 48);
}

uint64_t SeriesFilterEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesFilterEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesFilterEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A27F0, (uint64_t)&nominal type descriptor for SeriesFilterEvent.Model);
}

uint64_t SeriesFilterEvent.Model.init(seriesData:formatFilterData:eventData:)@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_BYTE *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_WORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 26);
  v9 = *a2;
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_BYTE *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = v6;
  *(_WORD *)(a4 + 24) = v7;
  *(_BYTE *)(a4 + 26) = v8;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_WORD *)(a4 + 48) = v9;
  v10 = a4 + *(int *)(type metadata accessor for SeriesFilterEvent.Model(0) + 24);
  v11 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

uint64_t sub_1647FC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x6144736569726573;
}

uint64_t sub_164864@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_165CB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_164888(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_164AA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1648B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_164AA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SeriesFilterEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  __int128 v29;

  v3 = v1;
  v5 = sub_71B4(&qword_2A26E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_164AA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SeriesFilterEvent.Model.CodingKeys, &type metadata for SeriesFilterEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 8);
  v13 = v3[2];
  v14 = *((_WORD *)v3 + 12);
  v15 = *((_BYTE *)v3 + 26);
  v24 = *v3;
  v25 = v12;
  v26 = v13;
  v27 = v14;
  v28 = v15;
  v29 = *((_OWORD *)v3 + 2);
  v23 = 0;
  v16 = sub_10AD0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for SeriesData, v16);
  if (!v2)
  {
    LOWORD(v24) = *((_WORD *)v3 + 24);
    v23 = 1;
    v17 = sub_EF154();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for FormatFilterData, v17);
    v18 = (uint64_t)v3 + *(int *)(type metadata accessor for SeriesFilterEvent.Model(0) + 24);
    LOBYTE(v24) = 2;
    v19 = type metadata accessor for EventData(0);
    v20 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v24, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_164AA4()
{
  unint64_t result;

  result = qword_2A26E8;
  if (!qword_2A26E8)
  {
    result = swift_getWitnessTable(byte_20E98C, &type metadata for SeriesFilterEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A26E8);
  }
  return result;
}

void SeriesFilterEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  __int128 v42;
  char v43;

  v31 = a2;
  v3 = type metadata accessor for EventData(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_71B4(&qword_2A26F0);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SeriesFilterEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_164AA4();
  v35 = v8;
  v15 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesFilterEvent.Model.CodingKeys, &type metadata for SeriesFilterEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(a1);
  }
  else
  {
    v30 = v9;
    v16 = (uint64_t)v11;
    v36 = v5;
    v18 = v32;
    v17 = v33;
    v43 = 0;
    v19 = sub_10EA0();
    v20 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for SeriesData, &v43, v34, &type metadata for SeriesData, v19);
    v21 = v38;
    v22 = v39;
    v23 = v40;
    v24 = v41;
    *(_QWORD *)v16 = v37;
    *(_BYTE *)(v16 + 8) = v21;
    *(_QWORD *)(v16 + 16) = v22;
    *(_WORD *)(v16 + 24) = v23;
    *(_BYTE *)(v16 + 26) = v24;
    *(_OWORD *)(v16 + 32) = v42;
    v43 = 1;
    v25 = sub_EF10C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for FormatFilterData, &v43, v20, &type metadata for FormatFilterData, v25);
    *(_WORD *)(v16 + 48) = v37;
    LOBYTE(v37) = 2;
    v26 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v27 = v35;
    v28 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v17, &v37, v20, v17, v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32))(v16 + *(int *)(v30 + 24), v28, v17);
    sub_164DBC(v16, v31);
    sub_7DAC(a1);
    sub_164E00(v16);
  }
}

uint64_t sub_164DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesFilterEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_164E00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeriesFilterEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_164E3C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SeriesFilterEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_164E50(_QWORD *a1)
{
  return SeriesFilterEvent.Model.encode(to:)(a1);
}

uint64_t sub_164E64@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AB0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A26A8, (uint64_t)sub_164448, a1);
}

uint64_t sub_164E88@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AB8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A26C0, (uint64_t)sub_164488, a1);
}

uint64_t sub_164EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_2A26D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for SeriesFilterEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296310);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A26D8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for SeriesFilterEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_2A26D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SeriesFilterEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A26D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for SeriesFilterEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A26D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for SeriesFilterEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A26D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SeriesFilterEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A26D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesFilterEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1653D0);
}

uint64_t sub_1653D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296310);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A26D8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SeriesFilterEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_165480);
}

uint64_t sub_165480(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296310);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A26D8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_16552C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A2760, (uint64_t (*)(void))sub_EF10C, (uint64_t (*)(void))sub_EF154, (uint64_t)&type metadata for FormatFilterData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SeriesFilterEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)((char *)a2 + 25);
    v5 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    v9 = type metadata accessor for EventData(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for SeriesFilterEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for SeriesFilterEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v8 = type metadata accessor for EventData(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for SeriesFilterEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for SeriesFilterEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SeriesFilterEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesFilterEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_165990);
}

uint64_t sub_165990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesFilterEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_165A24);
}

uint64_t sub_165A24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_165A98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "0";
  v4[1] = &unk_20E8B0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeriesFilterEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_165B60 + 4 * byte_20E7C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_165B94 + 4 * byte_20E7C0[v4]))();
}

uint64_t sub_165B94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_165B9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x165BA4);
  return result;
}

uint64_t sub_165BB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x165BB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_165BBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_165BC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesFilterEvent.Model.CodingKeys()
{
  return &type metadata for SeriesFilterEvent.Model.CodingKeys;
}

unint64_t sub_165BE4()
{
  unint64_t result;

  result = qword_2A2830;
  if (!qword_2A2830)
  {
    result = swift_getWitnessTable(byte_20E964, &type metadata for SeriesFilterEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2830);
  }
  return result;
}

unint64_t sub_165C2C()
{
  unint64_t result;

  result = qword_2A2838;
  if (!qword_2A2838)
  {
    result = swift_getWitnessTable("M9\a", &type metadata for SeriesFilterEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2838);
  }
  return result;
}

unint64_t sub_165C74()
{
  unint64_t result;

  result = qword_2A2840;
  if (!qword_2A2840)
  {
    result = swift_getWitnessTable("59\a", &type metadata for SeriesFilterEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2840);
  }
  return result;
}

uint64_t sub_165CB8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000000002223E0;
    if (a2 == 0x80000000002223E0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002223E0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t dispatch thunk of LibraryAnalyticsDataProviding.seriesType(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_165E24(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A2848, &enum case for SessionGroup.default(_:));
}

uint64_t static FilterBarEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AC0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2848, a1);
}

uint64_t sub_165E64(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A2860, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static FilterBarEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AC8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2860, a1);
}

uint64_t sub_165EA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_165FFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_165ECC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_165FFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FilterBarEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_71B4(&qword_2A2878);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_165FFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FilterBarEvent.Model.CodingKeys, &type metadata for FilterBarEvent.Model.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for EventData(0);
  v12 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_165FFC()
{
  unint64_t result;

  result = qword_2A2880;
  if (!qword_2A2880)
  {
    result = swift_getWitnessTable("Y8\a", &type metadata for FilterBarEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2880);
  }
  return result;
}

uint64_t FilterBarEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for EventData(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_71B4(&qword_2A2888);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FilterBarEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_165FFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FilterBarEvent.Model.CodingKeys, &type metadata for FilterBarEvent.Model.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_166210((uint64_t)v11, v20);
  }
  return sub_7DAC(a1);
}

uint64_t type metadata accessor for FilterBarEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2978, (uint64_t)&nominal type descriptor for FilterBarEvent.Model);
}

uint64_t sub_166210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterBarEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_166254@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterBarEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_166268@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AC0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2848, (uint64_t)sub_165E24, a1);
}

uint64_t sub_16628C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AC8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2860, (uint64_t)sub_165E64, a1);
}

uint64_t getEnumTagSinglePayload for FilterBarEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1662BC);
}

uint64_t sub_1662BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FilterBarEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_166308);
}

uint64_t sub_166308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FilterBarEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A28E8, (uint64_t)&nominal type descriptor for FilterBarEvent);
}

uint64_t getEnumTagSinglePayload for FilterBarEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16636C);
}

uint64_t sub_16636C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FilterBarEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1663B4);
}

uint64_t sub_1663B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FilterBarEvent.Model.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_166434 + 4 * byte_20EA00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_166454 + 4 * byte_20EA05[v4]))();
}

_BYTE *sub_166434(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_166454(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_16645C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_166464(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_16646C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_166474(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FilterBarEvent.Model.CodingKeys()
{
  return &type metadata for FilterBarEvent.Model.CodingKeys;
}

unint64_t sub_166494()
{
  unint64_t result;

  result = qword_2A29B0;
  if (!qword_2A29B0)
  {
    result = swift_getWitnessTable("q8\a", &type metadata for FilterBarEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A29B0);
  }
  return result;
}

unint64_t sub_1664DC()
{
  unint64_t result;

  result = qword_2A29B8;
  if (!qword_2A29B8)
  {
    result = swift_getWitnessTable(byte_20EAC8, &type metadata for FilterBarEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A29B8);
  }
  return result;
}

unint64_t sub_166524()
{
  unint64_t result;

  result = qword_2A29C0;
  if (!qword_2A29C0)
  {
    result = swift_getWitnessTable(byte_20EAF0, &type metadata for FilterBarEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A29C0);
  }
  return result;
}

uint64_t sub_166568(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A29C8, &enum case for SessionGroup.default(_:));
}

uint64_t static UPPContentBrickExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AD0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A29C8, a1);
}

uint64_t sub_1665A8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A29E0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static UPPContentBrickExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AD8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A29E0, a1);
}

uint64_t UPPContentBrickExposureEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UPPContentBrickExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2A68, (uint64_t)&nominal type descriptor for UPPContentBrickExposureEvent);
}

uint64_t UPPContentBrickExposureEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UPPContentBrickExposureEvent.seriesData.modify())()
{
  type metadata accessor for UPPContentBrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UPPContentBrickExposureEvent.genreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UPPContentBrickExposureEvent.genreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UPPContentBrickExposureEvent.genreData.modify())()
{
  type metadata accessor for UPPContentBrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UPPContentBrickExposureEvent.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UPPContentBrickExposureEvent.uppParentContentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UPPContentBrickExposureEvent.uppParentContentData.modify())()
{
  type metadata accessor for UPPContentBrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UPPContentBrickExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UPPContentBrickExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UPPContentBrickExposureEvent.eventData.modify())()
{
  type metadata accessor for UPPContentBrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UPPContentBrickExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UPPContentBrickExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UPPContentBrickExposureEvent.timedData.modify())()
{
  type metadata accessor for UPPContentBrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UPPContentBrickExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for UPPContentBrickExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v2, v15);
}

uint64_t UPPContentBrickExposureEvent.Model.genreData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[18];
  v3 = v1[19];
  v4 = v1[20];
  v5 = v1[21];
  v6 = v1[22];
  v7 = v1[23];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_8B32C(v2, v3, v4, v5, v6, v7);
}

uint64_t UPPContentBrickExposureEvent.Model.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_QWORD *)(v1 + 208);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 224);
  v6 = *(_QWORD *)(v1 + 232);
  v7 = *(_BYTE *)(v1 + 240);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  return swift_bridgeObjectRetain(v6);
}

uint64_t UPPContentBrickExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UPPContentBrickExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2B08, (uint64_t)&nominal type descriptor for UPPContentBrickExposureEvent.Model);
}

uint64_t UPPContentBrickExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UPPContentBrickExposureEvent.Model(0) + 36);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UPPContentBrickExposureEvent.Model.init(contentData:seriesData:genreData:uppParentContentData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  int v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  v12 = *(_OWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_WORD *)(a1 + 56);
  v16 = *(_DWORD *)(a1 + 60);
  v17 = *(_BYTE *)(a1 + 64);
  v18 = *(_DWORD *)(a1 + 68);
  v19 = *(_BYTE *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 77);
  v21 = *a4;
  v22 = a4[1];
  v23 = *((_QWORD *)a4 + 4);
  v24 = *((_QWORD *)a4 + 5);
  v25 = *((_BYTE *)a4 + 48);
  *(_QWORD *)a7 = *(_QWORD *)a1;
  *(_QWORD *)(a7 + 8) = v10;
  *(_BYTE *)(a7 + 16) = v11;
  *(_OWORD *)(a7 + 24) = v12;
  *(_QWORD *)(a7 + 40) = v13;
  *(_QWORD *)(a7 + 48) = v14;
  *(_WORD *)(a7 + 56) = v15;
  *(_DWORD *)(a7 + 60) = v16;
  *(_BYTE *)(a7 + 64) = v17;
  *(_DWORD *)(a7 + 68) = v18;
  *(_BYTE *)(a7 + 72) = v19;
  *(_DWORD *)(a7 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a7 + 77) = v20;
  v26 = *a2;
  v27 = a2[1];
  *(_OWORD *)(a7 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a7 + 96) = v26;
  v28 = a2[2];
  *(_OWORD *)(a7 + 112) = v27;
  *(_OWORD *)(a7 + 128) = v28;
  v29 = a3[1];
  *(_OWORD *)(a7 + 144) = *a3;
  *(_OWORD *)(a7 + 160) = v29;
  *(_OWORD *)(a7 + 176) = a3[2];
  *(_OWORD *)(a7 + 192) = v21;
  *(_OWORD *)(a7 + 208) = v22;
  *(_QWORD *)(a7 + 224) = v23;
  *(_QWORD *)(a7 + 232) = v24;
  *(_BYTE *)(a7 + 240) = v25;
  v30 = type metadata accessor for UPPContentBrickExposureEvent.Model(0);
  v31 = a7 + *(int *)(v30 + 32);
  v32 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v31, a5, v32);
  v33 = a7 + *(int *)(v30 + 36);
  v34 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v33, a6, v34);
}

uint64_t sub_166D38()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_166D70 + 4 * byte_20EBD0[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_166D70()
{
  return 0x6144736569726573;
}

uint64_t sub_166D8C()
{
  return 0x74614465726E6567;
}

uint64_t sub_166DE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_169474(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_166E08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_167160();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_166E30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_167160();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UPPContentBrickExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char v43;
  __int128 v44;
  _BYTE v45[32];
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  int v50;
  char v51;
  int v52;
  char v53;
  __int128 v54;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A29F8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_167160();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UPPContentBrickExposureEvent.Model.CodingKeys, &type metadata for UPPContentBrickExposureEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v44 = *(_QWORD *)v4;
  *((_QWORD *)&v44 + 1) = v13;
  v45[0] = v14;
  *(_OWORD *)&v45[8] = v15;
  *(_QWORD *)&v45[24] = v16;
  v46 = v17;
  v47 = v18;
  v48 = v19;
  v49 = v20;
  v50 = v21;
  v51 = v22;
  v52 = *(_DWORD *)(v4 + 73);
  v53 = v23;
  v54 = *(_OWORD *)(v4 + 80);
  v43 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v44, &v43, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_OWORD *)(v4 + 112);
    v44 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v45 = v25;
    *(_OWORD *)&v45[16] = *(_OWORD *)(v4 + 128);
    v43 = 1;
    v26 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v6, &type metadata for SeriesData, v26);
    v27 = *(_OWORD *)(v4 + 160);
    v44 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)v45 = v27;
    *(_OWORD *)&v45[16] = *(_OWORD *)(v4 + 176);
    v43 = 2;
    v28 = sub_8B9C0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v6, &type metadata for GenreData, v28);
    v29 = *(_OWORD *)(v4 + 208);
    v30 = *(_QWORD *)(v4 + 224);
    v31 = *(_QWORD *)(v4 + 232);
    v32 = *(_BYTE *)(v4 + 240);
    v44 = *(_OWORD *)(v4 + 192);
    *(_OWORD *)v45 = v29;
    *(_QWORD *)&v45[16] = v30;
    *(_QWORD *)&v45[24] = v31;
    LOBYTE(v46) = v32;
    v43 = 3;
    v33 = sub_569E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v44, &v43, v6, &type metadata for UppParentContentData, v33);
    v34 = type metadata accessor for UPPContentBrickExposureEvent.Model(0);
    v35 = v4 + *(int *)(v34 + 32);
    LOBYTE(v44) = 4;
    v36 = type metadata accessor for EventData(0);
    v37 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v44, v6, v36, v37);
    v38 = v4 + *(int *)(v34 + 36);
    LOBYTE(v44) = 5;
    v39 = type metadata accessor for TimedData(0);
    v40 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v38, &v44, v6, v39, v40);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_167160()
{
  unint64_t result;

  result = qword_2A2A00;
  if (!qword_2A2A00)
  {
    result = swift_getWitnessTable("-7\a", &type metadata for UPPContentBrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2A00);
  }
  return result;
}

void UPPContentBrickExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  __int128 v61;
  _BYTE v62[32];
  uint64_t v63;
  __int16 v64;
  int v65;
  char v66;
  int v67;
  char v68;
  int v69;
  char v70;
  __int128 v71;
  char v72;

  v53 = a2;
  v54 = type metadata accessor for TimedData(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v55 = (uint64_t *)((char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = sub_71B4(&qword_2A2A08);
  v7 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UPPContentBrickExposureEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_167160();
  v58 = v9;
  v16 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UPPContentBrickExposureEvent.Model.CodingKeys, &type metadata for UPPContentBrickExposureEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(a1);
  }
  else
  {
    v50 = v6;
    v17 = v12;
    v60 = a1;
    v51 = v10;
    v72 = 0;
    v18 = sub_1779C();
    v19 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for ContentData, &v72, v59, &type metadata for ContentData, v18);
    v20 = *((_QWORD *)&v61 + 1);
    v21 = v62[0];
    v22 = *(_OWORD *)&v62[8];
    v23 = *(_QWORD *)&v62[24];
    v24 = v63;
    v25 = v64;
    v26 = v65;
    v27 = v66;
    v28 = v67;
    v29 = v68;
    v30 = v70;
    v31 = (uint64_t)v17;
    *(_QWORD *)v17 = v61;
    *((_QWORD *)v17 + 1) = v20;
    v17[16] = v21;
    *(_OWORD *)(v17 + 24) = v22;
    *((_QWORD *)v17 + 5) = v23;
    *((_QWORD *)v17 + 6) = v24;
    *((_WORD *)v17 + 28) = v25;
    *((_DWORD *)v17 + 15) = v26;
    v17[64] = v27;
    *((_DWORD *)v17 + 17) = v28;
    v17[72] = v29;
    *(_DWORD *)(v17 + 73) = v69;
    v17[77] = v30;
    *((_OWORD *)v17 + 5) = v71;
    v72 = 1;
    v32 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, &type metadata for SeriesData, &v72, v19, &type metadata for SeriesData, v32);
    v33 = *(_OWORD *)v62;
    *((_OWORD *)v17 + 6) = v61;
    *((_OWORD *)v17 + 7) = v33;
    *((_OWORD *)v17 + 8) = *(_OWORD *)&v62[16];
    v72 = 2;
    v34 = sub_8C03C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, &type metadata for GenreData, &v72, v19, &type metadata for GenreData, v34);
    v35 = v7;
    v36 = *(_OWORD *)v62;
    *(_OWORD *)(v31 + 144) = v61;
    *(_OWORD *)(v31 + 160) = v36;
    *(_OWORD *)(v31 + 176) = *(_OWORD *)&v62[16];
    v72 = 3;
    v37 = sub_574B0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for UppParentContentData, &v72, v19, &type metadata for UppParentContentData, v37);
    v49 = 0;
    v38 = *(_OWORD *)v62;
    v39 = *(_OWORD *)&v62[16];
    v40 = v63;
    *(_OWORD *)(v31 + 192) = v61;
    *(_OWORD *)(v31 + 208) = v38;
    *(_OWORD *)(v31 + 224) = v39;
    *(_BYTE *)(v31 + 240) = v40;
    LOBYTE(v61) = 4;
    v41 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v42 = v50;
    v43 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v50, v57, &v61, v19, v57, v41);
    v44 = v51;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v56 + 32))(v31 + *(int *)(v51 + 32), v42, v43);
    LOBYTE(v61) = 5;
    v45 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v46 = v55;
    v47 = v19;
    v48 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v54, &v61, v47, v54, v45);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v58, v59);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v52 + 32))(v31 + *(int *)(v44 + 36), v46, v48);
    sub_167764(v31, v53);
    sub_7DAC(v60);
    sub_1677A8(v31);
  }
}

uint64_t sub_167764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UPPContentBrickExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1677A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UPPContentBrickExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1677E4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  UPPContentBrickExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1677F8(_QWORD *a1)
{
  return UPPContentBrickExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_16780C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AD0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A29C8, (uint64_t)sub_166568, a1);
}

uint64_t sub_167830@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AD8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A29E0, (uint64_t)sub_1665A8, a1);
}

uint64_t sub_167854@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v4, v16);
}

uint64_t *initializeBufferWithCopyOfBuffer for UPPContentBrickExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29A200);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_2984E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for UPPContentBrickExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for UPPContentBrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t assignWithCopy for UPPContentBrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for UPPContentBrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for UPPContentBrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for UPPContentBrickExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_168158);
}

uint64_t sub_168158(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296310);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29A200);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_2984E8);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v8 = sub_71B4(&qword_295D78);
            v12 = *(_QWORD *)(v8 - 8);
            v13 = a3[9];
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for UPPContentBrickExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_168280);
}

uint64_t sub_168280(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296310);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29A200);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_2984E8);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v10 = sub_71B4(&qword_295D78);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[9];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1683A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_29A2E0, (uint64_t (*)(void))sub_8C03C, (uint64_t (*)(void))sub_8B9C0, (uint64_t)&type metadata for GenreData);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_2985E8, (uint64_t (*)(void))sub_574B0, (uint64_t (*)(void))sub_569E8, (uint64_t)&type metadata for UppParentContentData);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_87D8(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for UPPContentBrickExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[17];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if (v12 == 1)
    {
      v13 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v13;
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      v14 = a2[19];
      if (v14)
      {
LABEL_4:
        *(_QWORD *)(a1 + 144) = a2[18];
        *(_QWORD *)(a1 + 152) = v14;
        v15 = a2[21];
        *(_QWORD *)(a1 + 160) = a2[20];
        *(_QWORD *)(a1 + 168) = v15;
        v16 = a2[23];
        *(_QWORD *)(a1 + 176) = a2[22];
        *(_QWORD *)(a1 + 184) = v16;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
LABEL_8:
        v19 = a2[25];
        *(_QWORD *)(a1 + 192) = a2[24];
        *(_QWORD *)(a1 + 200) = v19;
        v20 = a2[27];
        *(_QWORD *)(a1 + 208) = a2[26];
        *(_QWORD *)(a1 + 216) = v20;
        v21 = a2[28];
        v22 = a2[29];
        *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
        v23 = *(int *)(a3 + 32);
        v24 = a1 + v23;
        v25 = (uint64_t)a2 + v23;
        *(_QWORD *)(a1 + 224) = v21;
        *(_QWORD *)(a1 + 232) = v22;
        v26 = type metadata accessor for EventData(0);
        v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v22);
        v27(v24, v25, v26);
        v28 = *(int *)(a3 + 36);
        v29 = a1 + v28;
        v30 = (uint64_t)a2 + v28;
        v31 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        return a1;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_WORD *)(a1 + 121) = *(_WORD *)((char *)a2 + 121);
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v12;
      swift_bridgeObjectRetain(v12);
      v14 = a2[19];
      if (v14)
        goto LABEL_4;
    }
    v18 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
    goto LABEL_8;
  }
  v17 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v17);
  return a1;
}

uint64_t destroy for UPPContentBrickExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = a1[17];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = a1[19];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[21]);
    swift_bridgeObjectRelease(a1[23]);
  }
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[29]);
  v6 = (char *)a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + *(int *)(a2 + 36);
  v9 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for UPPContentBrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (v11 != 1)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v11;
    swift_bridgeObjectRetain(v11);
    v13 = *(_QWORD *)(a2 + 152);
    if (v13)
      goto LABEL_3;
LABEL_5:
    v16 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v16;
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    goto LABEL_6;
  }
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 152);
  if (!v13)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v14;
  v15 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v15;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
LABEL_6:
  v17 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v17;
  v18 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v18;
  v19 = *(_QWORD *)(a2 + 224);
  v20 = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v21 = *(int *)(a3 + 32);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)(a1 + 224) = v19;
  *(_QWORD *)(a1 + 232) = v20;
  v24 = type metadata accessor for EventData(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  v25(v22, v23, v24);
  v26 = *(int *)(a3 + 36);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  return a1;
}

uint64_t assignWithCopy for UPPContentBrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  __int128 *v44;
  __int128 *v45;
  BAEventReporter *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  _OWORD *v61;
  _OWORD *v62;
  BAEventReporter *v63;
  uint64_t v64;
  uint64_t v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  int64_t v70;
  int64_t v71;
  id v72;
  uint64_t v73;
  BAEventReporter *v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  int64_t v79;
  int64_t v80;
  id v81;
  uint64_t v82;
  BAEventReporter *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  int64_t v88;
  int64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v44 = (__int128 *)(a1 + 96);
  v45 = (__int128 *)(a2 + 96);
  v46 = *(BAEventReporter **)(a1 + 136);
  v47 = *(_QWORD *)(a2 + 136);
  if (v46 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v47 == 1)
    {
      v48 = *v45;
      v49 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v49;
      *v44 = v48;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
      *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v52 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 136) = v52;
      swift_bridgeObjectRetain(v52);
    }
  }
  else if (v47 == 1)
  {
    sub_19008(a1 + 96);
    v51 = *(_OWORD *)(a2 + 112);
    v50 = *(_OWORD *)(a2 + 128);
    *v44 = *v45;
    *(_OWORD *)(a1 + 112) = v51;
    *(_OWORD *)(a1 + 128) = v50;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
    *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v53 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v53;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRelease(v46, v54, v55, v56, v57, v58, v59, v60);
  }
  v61 = (_OWORD *)(a1 + 144);
  v62 = (_OWORD *)(a2 + 144);
  v63 = *(BAEventReporter **)(a1 + 152);
  v64 = *(_QWORD *)(a2 + 152);
  if (v63)
  {
    if (v64)
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v65 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 152) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v63, v66, v67, v68, v69, v70, v71, v72);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v73 = *(_QWORD *)(a2 + 168);
      v74 = *(BAEventReporter **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v73;
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v82 = *(_QWORD *)(a2 + 184);
      v83 = *(BAEventReporter **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      sub_8DA38((_QWORD *)(a1 + 144));
      v95 = *(_OWORD *)(a2 + 160);
      v94 = *(_OWORD *)(a2 + 176);
      *v61 = *v62;
      *(_OWORD *)(a1 + 160) = v95;
      *(_OWORD *)(a1 + 176) = v94;
    }
  }
  else if (v64)
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v91 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v91;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v92 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 168) = v92;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v93 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v93;
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
  }
  else
  {
    v96 = *v62;
    v97 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v97;
    *v61 = v96;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v98 = *(_QWORD *)(a2 + 200);
  v99 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v107 = *(_QWORD *)(a2 + 216);
  v108 = *(BAEventReporter **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v116 = *(_QWORD *)(a2 + 232);
  v117 = *(BAEventReporter **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v116;
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v125 = *(int *)(a3 + 32);
  v126 = a1 + v125;
  v127 = a2 + v125;
  v128 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 24))(v126, v127, v128);
  v129 = *(int *)(a3 + 36);
  v130 = a1 + v129;
  v131 = a2 + v129;
  v132 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 24))(v130, v131, v132);
  return a1;
}

uint64_t initializeWithTake for UPPContentBrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v11;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v12 = *(_OWORD *)(a2 + 224);
  v13 = *(_OWORD *)(a2 + 192);
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 192) = v13;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = *(int *)(a3 + 36);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for UPPContentBrickExposureEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  BAEventReporter *v47;
  uint64_t v48;
  __int128 v49;
  BAEventReporter *v50;
  uint64_t v51;
  uint64_t v52;
  BAEventReporter *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  uint64_t v61;
  BAEventReporter *v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  __int128 v70;
  uint64_t v71;
  BAEventReporter *v72;
  uint64_t v73;
  BAEventReporter *v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  int64_t v79;
  int64_t v80;
  id v81;
  uint64_t v82;
  BAEventReporter *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  int64_t v88;
  int64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v47 = *(BAEventReporter **)(a1 + 136);
  if (v47 == (BAEventReporter *)((char *)&dword_0 + 1))
    goto LABEL_4;
  v48 = *(_QWORD *)(a2 + 136);
  if (v48 == 1)
  {
    sub_19008(a1 + 96);
LABEL_4:
    v49 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v49;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v48;
  swift_bridgeObjectRelease(v47, v40, v41, v42, v43, v44, v45, v46);
LABEL_6:
  v50 = *(BAEventReporter **)(a1 + 152);
  if (!v50)
  {
LABEL_10:
    v70 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v70;
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    goto LABEL_11;
  }
  v51 = *(_QWORD *)(a2 + 152);
  if (!v51)
  {
    sub_8DA38((_QWORD *)(a1 + 144));
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v51;
  swift_bridgeObjectRelease(v50, v40, v41, v42, v43, v44, v45, v46);
  v52 = *(_QWORD *)(a2 + 168);
  v53 = *(BAEventReporter **)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v52;
  swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
  v61 = *(_QWORD *)(a2 + 184);
  v62 = *(BAEventReporter **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v61;
  swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
LABEL_11:
  v71 = *(_QWORD *)(a2 + 200);
  v72 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v71;
  swift_bridgeObjectRelease(v72, v40, v41, v42, v43, v44, v45, v46);
  v73 = *(_QWORD *)(a2 + 216);
  v74 = *(BAEventReporter **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v73;
  swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
  v82 = *(_QWORD *)(a2 + 232);
  v83 = *(BAEventReporter **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v82;
  swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v91 = a3[8];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v94 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 40))(v92, v93, v94);
  v95 = a3[9];
  v96 = a1 + v95;
  v97 = a2 + v95;
  v98 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 40))(v96, v97, v98);
  return a1;
}

uint64_t getEnumTagSinglePayload for UPPContentBrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1690DC);
}

uint64_t sub_1690DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UPPContentBrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_169188);
}

uint64_t sub_169188(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_169224(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[1] = &unk_20ED00;
  v5[2] = &unk_20ED18;
  v5[3] = &unk_20ED30;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UPPContentBrickExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_16931C + 4 * byte_20EBDB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_169350 + 4 * byte_20EBD6[v4]))();
}

uint64_t sub_169350(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_169358(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x169360);
  return result;
}

uint64_t sub_16936C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x169374);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_169378(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_169380(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UPPContentBrickExposureEvent.Model.CodingKeys()
{
  return &type metadata for UPPContentBrickExposureEvent.Model.CodingKeys;
}

unint64_t sub_1693A0()
{
  unint64_t result;

  result = qword_2A2B50;
  if (!qword_2A2B50)
  {
    result = swift_getWitnessTable("E7\a", &type metadata for UPPContentBrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2B50);
  }
  return result;
}

unint64_t sub_1693E8()
{
  unint64_t result;

  result = qword_2A2B58;
  if (!qword_2A2B58)
  {
    result = swift_getWitnessTable(byte_20ED54, &type metadata for UPPContentBrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2B58);
  }
  return result;
}

unint64_t sub_169430()
{
  unint64_t result;

  result = qword_2A2B60;
  if (!qword_2A2B60)
  {
    result = swift_getWitnessTable("u7\a", &type metadata for UPPContentBrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2B60);
  }
  return result;
}

uint64_t sub_169474(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74614465726E6567 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614465726E6567, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000014)
  {
    v9 = 0x800000000021F260;
    if (a2 == 0x800000000021F260)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F260, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_16972C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A2B68, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingSettingsContextualViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AE0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2B68, a1);
}

uint64_t sub_16976C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A2B80, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingSettingsContextualViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AE8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2B80, a1);
}

uint64_t ReadingSettingsContextualViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingSettingsContextualViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingSettingsContextualViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2C08, (uint64_t)&nominal type descriptor for ReadingSettingsContextualViewEvent);
}

uint64_t ReadingSettingsContextualViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingSettingsContextualViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingSettingsContextualViewEvent.eventData.modify())()
{
  type metadata accessor for ReadingSettingsContextualViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingSettingsContextualViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for ReadingSettingsContextualViewEvent(0) + 20);
  v5 = enum case for EventProperty.required<A>(_:);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
}

uint64_t ReadingSettingsContextualViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingSettingsContextualViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingSettingsContextualViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2C98, (uint64_t)&nominal type descriptor for ReadingSettingsContextualViewEvent.Model);
}

uint64_t ReadingSettingsContextualViewEvent.Model.init(contentData:eventData:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  uint64_t v8;

  v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  v5 = a1[3];
  a3[2] = a1[2];
  a3[3] = v5;
  v6 = a1[5];
  a3[4] = a1[4];
  a3[5] = v6;
  v7 = (char *)a3 + *(int *)(type metadata accessor for ReadingSettingsContextualViewEvent.Model(0) + 20);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t sub_1699C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_169A10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_16AE98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_169A34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_169BF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_169A5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_169BF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingSettingsContextualViewEvent.Model.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  _OWORD v22[6];

  v3 = v1;
  v5 = sub_71B4(&qword_2A2B98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_169BF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys, &type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v22[0] = *v3;
  v22[1] = v12;
  v13 = v3[3];
  v22[2] = v3[2];
  v22[3] = v13;
  v14 = v3[5];
  v22[4] = v3[4];
  v22[5] = v14;
  v21 = 0;
  v15 = sub_17118();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for ContentData, v15);
  if (!v2)
  {
    v16 = (char *)v3 + *(int *)(type metadata accessor for ReadingSettingsContextualViewEvent.Model(0) + 20);
    LOBYTE(v22[0]) = 1;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v22, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_169BF8()
{
  unint64_t result;

  result = qword_2A2BA0;
  if (!qword_2A2BA0)
  {
    result = swift_getWitnessTable("}6\a", &type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2BA0);
  }
  return result;
}

uint64_t ReadingSettingsContextualViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _OWORD v33[6];
  char v34;

  v28 = a2;
  v3 = type metadata accessor for EventData(0);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_71B4(&qword_2A2BA8);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingSettingsContextualViewEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_169BF8();
  v15 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys, &type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_7DAC(a1);
  v27 = v9;
  v16 = v6;
  v32 = a1;
  v17 = v11;
  v18 = v29;
  v19 = v30;
  v34 = 0;
  v20 = sub_1779C();
  v21 = v31;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &type metadata for ContentData, &v34, v31, &type metadata for ContentData, v20);
  v22 = v33[1];
  *(_OWORD *)v17 = v33[0];
  *((_OWORD *)v17 + 1) = v22;
  v23 = v33[3];
  *((_OWORD *)v17 + 2) = v33[2];
  *((_OWORD *)v17 + 3) = v23;
  v24 = v33[5];
  *((_OWORD *)v17 + 4) = v33[4];
  *((_OWORD *)v17 + 5) = v24;
  LOBYTE(v33[0]) = 1;
  v25 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v19, v33, v21, v19, v25);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v21);
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v17[*(int *)(v27 + 20)], v5, v19);
  sub_169ECC((uint64_t)v17, v28);
  sub_7DAC(v32);
  return sub_169F10((uint64_t)v17);
}

uint64_t sub_169ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingSettingsContextualViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_169F10(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingSettingsContextualViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_169F4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReadingSettingsContextualViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_169F60(_QWORD *a1)
{
  return ReadingSettingsContextualViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_169F74@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AE0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2B68, (uint64_t)sub_16972C, a1);
}

uint64_t sub_169F98@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AE8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2B80, (uint64_t)sub_16976C, a1);
}

uint64_t sub_169FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingSettingsContextualViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for ReadingSettingsContextualViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for ReadingSettingsContextualViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for ReadingSettingsContextualViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for ReadingSettingsContextualViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ReadingSettingsContextualViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingSettingsContextualViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16A378);
}

uint64_t sub_16A378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingSettingsContextualViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16A400);
}

uint64_t sub_16A400(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_16A484(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_61AF8(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ReadingSettingsContextualViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      v8 = a2[4];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = v8;
      v9 = a2[6];
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v9;
      *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
      *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
      *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
      v10 = a2[11];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v10;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    v15 = *(int *)(a3 + 20);
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for ReadingSettingsContextualViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[11]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for ReadingSettingsContextualViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v9;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  v13 = *(int *)(a3 + 20);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t assignWithCopy for ReadingSettingsContextualViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  BAEventReporter *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  int v34;
  int v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(BAEventReporter **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v25 = *(_QWORD *)(a2 + 48);
      v26 = *(BAEventReporter **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
      v34 = *(_DWORD *)(a2 + 60);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_DWORD *)(a1 + 60) = v34;
      v35 = *(_DWORD *)(a2 + 68);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 68) = v35;
      *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
      *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
      *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
      *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v36 = *(_QWORD *)(a2 + 88);
      v37 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      sub_4E9F4((_QWORD *)a1);
      v51 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v51;
      v52 = *(_OWORD *)(a2 + 80);
      v54 = *(_OWORD *)(a2 + 32);
      v53 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v52;
      *(_OWORD *)(a1 + 32) = v54;
      *(_OWORD *)(a1 + 48) = v53;
    }
  }
  else if (v7)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v45 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v45;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v46 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v46;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v47 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v47;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
    v48 = *(_DWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_DWORD *)(a1 + 60) = v48;
    v49 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 68) = v49;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v50 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v50;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v50);
  }
  else
  {
    v55 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v55;
    v56 = *(_OWORD *)(a2 + 32);
    v57 = *(_OWORD *)(a2 + 48);
    v58 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v58;
    *(_OWORD *)(a1 + 32) = v56;
    *(_OWORD *)(a1 + 48) = v57;
  }
  v59 = *(int *)(a3 + 20);
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v60, v61, v62);
  return a1;
}

_OWORD *initializeWithTake for ReadingSettingsContextualViewEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[1];
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *a1 = *a2;
  a1[1] = v6;
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ReadingSettingsContextualViewEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    sub_4E9F4((_QWORD *)a1);
LABEL_5:
    v40 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v40;
    v41 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v41;
    v42 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v42;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v12;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
LABEL_6:
  v43 = a3[5];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingSettingsContextualViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16AB78);
}

uint64_t sub_16AB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingSettingsContextualViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16AC0C);
}

uint64_t sub_16AC0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_16AC80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingSettingsContextualViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_16AD40 + 4 * byte_20EE65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_16AD74 + 4 * byte_20EE60[v4]))();
}

uint64_t sub_16AD74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_16AD7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16AD84);
  return result;
}

uint64_t sub_16AD90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x16AD98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_16AD9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16ADA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingSettingsContextualViewEvent.Model.CodingKeys()
{
  return &type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys;
}

unint64_t sub_16ADC4()
{
  unint64_t result;

  result = qword_2A2CD0;
  if (!qword_2A2CD0)
  {
    result = swift_getWitnessTable(byte_20EFF4, &type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2CD0);
  }
  return result;
}

unint64_t sub_16AE0C()
{
  unint64_t result;

  result = qword_2A2CD8;
  if (!qword_2A2CD8)
  {
    result = swift_getWitnessTable(byte_20EF64, &type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2CD8);
  }
  return result;
}

unint64_t sub_16AE54()
{
  unint64_t result;

  result = qword_2A2CE0;
  if (!qword_2A2CE0)
  {
    result = swift_getWitnessTable(byte_20EF8C, &type metadata for ReadingSettingsContextualViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2CE0);
  }
  return result;
}

uint64_t sub_16AE98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_16AFAC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A2CE8, &enum case for SessionGroup.default(_:));
}

uint64_t static RemoveSuggestionCardEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AF0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2CE8, a1);
}

uint64_t sub_16AFEC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A2D00, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RemoveSuggestionCardEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295AF8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2D00, a1);
}

uint64_t RemoveSuggestionCardEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t RemoveSuggestionCardEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t RemoveSuggestionCardEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveSuggestionCardEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2D88, (uint64_t)&nominal type descriptor for RemoveSuggestionCardEvent);
}

uint64_t RemoveSuggestionCardEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveSuggestionCardEvent.contentData.modify())()
{
  type metadata accessor for RemoveSuggestionCardEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveSuggestionCardEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveSuggestionCardEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveSuggestionCardEvent.seriesData.modify())()
{
  type metadata accessor for RemoveSuggestionCardEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveSuggestionCardEvent.genreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 28);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveSuggestionCardEvent.genreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 28);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveSuggestionCardEvent.genreData.modify())()
{
  type metadata accessor for RemoveSuggestionCardEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveSuggestionCardEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveSuggestionCardEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveSuggestionCardEvent.eventData.modify())()
{
  type metadata accessor for RemoveSuggestionCardEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveSuggestionCardEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RemoveSuggestionCardEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v6, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t RemoveSuggestionCardEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = v1[9];
  v11 = v1[10];
  v12 = v1[11];
  v13 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t RemoveSuggestionCardEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[13];
  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[16];
  v6 = v1[17];
  v7 = v1[18];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t RemoveSuggestionCardEvent.Model.genreData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[19];
  v3 = v1[20];
  v4 = v1[21];
  v5 = v1[22];
  v6 = v1[23];
  v7 = v1[24];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_8B32C(v2, v3, v4, v5, v6, v7);
}

uint64_t RemoveSuggestionCardEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveSuggestionCardEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2E28, (uint64_t)&nominal type descriptor for RemoveSuggestionCardEvent.Model);
}

uint64_t RemoveSuggestionCardEvent.Model.init(suggestionData:contentData:seriesData:genreData:eventData:)@<X0>(_BYTE *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v7 = a2[1];
  *(_OWORD *)(a6 + 8) = *a2;
  *(_OWORD *)(a6 + 24) = v7;
  v8 = a2[3];
  *(_OWORD *)(a6 + 40) = a2[2];
  *(_OWORD *)(a6 + 56) = v8;
  v9 = a2[5];
  *(_OWORD *)(a6 + 72) = a2[4];
  *(_OWORD *)(a6 + 88) = v9;
  v10 = a3[1];
  *(_OWORD *)(a6 + 104) = *a3;
  *(_OWORD *)(a6 + 120) = v10;
  *(_OWORD *)(a6 + 136) = a3[2];
  v11 = a4[1];
  *(_OWORD *)(a6 + 152) = *a4;
  *(_BYTE *)a6 = *a1;
  *(_OWORD *)(a6 + 168) = v11;
  *(_OWORD *)(a6 + 184) = a4[2];
  v12 = a6 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent.Model(0) + 32);
  v13 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a5, v13);
}

uint64_t sub_16B660()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_16B69C + 4 * byte_20F070[*v0]))(0x6974736567677573, 0xEE00617461446E6FLL);
}

uint64_t sub_16B69C()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_16B6BC()
{
  return 0x6144736569726573;
}

uint64_t sub_16B6D8()
{
  return 0x74614465726E6567;
}

uint64_t sub_16B704@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_16D874(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_16B728(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_16B9D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_16B750(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_16B9D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RemoveSuggestionCardEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  v3 = v1;
  v5 = sub_71B4(&qword_2A2D18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_16B9D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoveSuggestionCardEvent.Model.CodingKeys, &type metadata for RemoveSuggestionCardEvent.Model.CodingKeys, v11, v9, v10);
  LOBYTE(v25) = *(_BYTE *)v3;
  v31 = 0;
  v12 = sub_2E76C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v31, v5, &type metadata for SuggestionData, v12);
  if (!v2)
  {
    v13 = *(_OWORD *)(v3 + 24);
    v25 = *(_OWORD *)(v3 + 8);
    v26 = v13;
    v14 = *(_OWORD *)(v3 + 56);
    v27 = *(_OWORD *)(v3 + 40);
    v28 = v14;
    v15 = *(_OWORD *)(v3 + 88);
    v29 = *(_OWORD *)(v3 + 72);
    v30 = v15;
    v31 = 1;
    v16 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v31, v5, &type metadata for ContentData, v16);
    v17 = *(_OWORD *)(v3 + 120);
    v25 = *(_OWORD *)(v3 + 104);
    v26 = v17;
    v27 = *(_OWORD *)(v3 + 136);
    v31 = 2;
    v18 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v31, v5, &type metadata for SeriesData, v18);
    v19 = *(_OWORD *)(v3 + 168);
    v25 = *(_OWORD *)(v3 + 152);
    v26 = v19;
    v27 = *(_OWORD *)(v3 + 184);
    v31 = 3;
    v20 = sub_8B9C0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v31, v5, &type metadata for GenreData, v20);
    v21 = v3 + *(int *)(type metadata accessor for RemoveSuggestionCardEvent.Model(0) + 32);
    LOBYTE(v25) = 4;
    v22 = type metadata accessor for EventData(0);
    v23 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v25, v5, v22, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_16B9D0()
{
  unint64_t result;

  result = qword_2A2D20;
  if (!qword_2A2D20)
  {
    result = swift_getWitnessTable("e5\a", &type metadata for RemoveSuggestionCardEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2D20);
  }
  return result;
}

uint64_t RemoveSuggestionCardEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v36 = a2;
  v35 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v5 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_71B4(&qword_2A2D28);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RemoveSuggestionCardEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v39 = a1;
  sub_7988(a1, v12);
  v14 = sub_16B9D0();
  v37 = v8;
  v15 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoveSuggestionCardEvent.Model.CodingKeys, &type metadata for RemoveSuggestionCardEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(v39);
  v33 = v9;
  v34 = v3;
  v40 = v5;
  v16 = (uint64_t)v11;
  v17 = v35;
  v18 = v36;
  v47 = 0;
  v19 = sub_2F2F4();
  v21 = v37;
  v20 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for SuggestionData, &v47, v38, &type metadata for SuggestionData, v19);
  *(_BYTE *)v16 = v41;
  v47 = 1;
  v22 = sub_1779C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, &type metadata for ContentData, &v47, v20, &type metadata for ContentData, v22);
  v23 = v42;
  *(_OWORD *)(v16 + 8) = v41;
  *(_OWORD *)(v16 + 24) = v23;
  v24 = v44;
  *(_OWORD *)(v16 + 40) = v43;
  *(_OWORD *)(v16 + 56) = v24;
  v25 = v46;
  *(_OWORD *)(v16 + 72) = v45;
  *(_OWORD *)(v16 + 88) = v25;
  v47 = 2;
  v26 = sub_10EA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, &type metadata for SeriesData, &v47, v20, &type metadata for SeriesData, v26);
  v27 = v42;
  *(_OWORD *)(v16 + 104) = v41;
  *(_OWORD *)(v16 + 120) = v27;
  *(_OWORD *)(v16 + 136) = v43;
  v47 = 3;
  v28 = sub_8C03C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, &type metadata for GenreData, &v47, v20, &type metadata for GenreData, v28);
  v29 = v42;
  *(_OWORD *)(v16 + 152) = v41;
  *(_OWORD *)(v16 + 168) = v29;
  *(_OWORD *)(v16 + 184) = v43;
  LOBYTE(v41) = 4;
  v30 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  v31 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v17, &v41, v20, v17, v30);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v20);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v34 + 32))(v16 + *(int *)(v33 + 32), v31, v17);
  sub_16BDF4(v16, v18);
  sub_7DAC(v39);
  return sub_16BE38(v16);
}

uint64_t sub_16BDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoveSuggestionCardEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_16BE38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RemoveSuggestionCardEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_16BE74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RemoveSuggestionCardEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_16BE88(_QWORD *a1)
{
  return RemoveSuggestionCardEvent.Model.encode(to:)(a1);
}

uint64_t sub_16BE9C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AF0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2CE8, (uint64_t)sub_16AFAC, a1);
}

uint64_t sub_16BEC0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295AF8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2D00, (uint64_t)sub_16AFEC, a1);
}

uint64_t sub_16BEE4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v7, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoveSuggestionCardEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296F78);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_29A200);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for RemoveSuggestionCardEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for RemoveSuggestionCardEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for RemoveSuggestionCardEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for RemoveSuggestionCardEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for RemoveSuggestionCardEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveSuggestionCardEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16C6A4);
}

uint64_t sub_16C6A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296F78);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296310);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_29A200);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RemoveSuggestionCardEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16C7A4);
}

uint64_t sub_16C7A4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296F78);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296310);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_29A200);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_16C8A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_29A2E0, (uint64_t (*)(void))sub_8C03C, (uint64_t (*)(void))sub_8B9C0, (uint64_t)&type metadata for GenreData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for RemoveSuggestionCardEvent.Model(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *(_BYTE *)a2;
    v7 = a1 + 8;
    v8 = a2[2];
    if (v8)
    {
      *((_QWORD *)v4 + 1) = a2[1];
      *((_QWORD *)v4 + 2) = v8;
      v4[24] = *((_BYTE *)a2 + 24);
      v9 = a2[5];
      *((_QWORD *)v4 + 4) = a2[4];
      *((_QWORD *)v4 + 5) = v9;
      v10 = a2[7];
      *((_QWORD *)v4 + 6) = a2[6];
      *((_QWORD *)v4 + 7) = v10;
      *((_WORD *)v4 + 32) = *((_WORD *)a2 + 32);
      v4[72] = *((_BYTE *)a2 + 72);
      *((_DWORD *)v4 + 17) = *((_DWORD *)a2 + 17);
      *((_DWORD *)v4 + 19) = *((_DWORD *)a2 + 19);
      v4[80] = *((_BYTE *)a2 + 80);
      *(_DWORD *)(v4 + 81) = *(_DWORD *)((char *)a2 + 81);
      v4[85] = *((_BYTE *)a2 + 85);
      v11 = a2[12];
      *((_QWORD *)v4 + 11) = a2[11];
      *((_QWORD *)v4 + 12) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v4 + 56) = v13;
      v14 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v4 + 88) = v14;
      v15 = *(_OWORD *)(a2 + 3);
      *v7 = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(v4 + 24) = v15;
    }
    v16 = a2[18];
    if (v16 == 1)
    {
      v17 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 120) = v17;
      *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 17);
      v18 = a2[20];
      if (v18)
      {
LABEL_8:
        *((_QWORD *)v4 + 19) = a2[19];
        *((_QWORD *)v4 + 20) = v18;
        v19 = a2[22];
        *((_QWORD *)v4 + 21) = a2[21];
        *((_QWORD *)v4 + 22) = v19;
        v20 = a2[24];
        *((_QWORD *)v4 + 23) = a2[23];
        *((_QWORD *)v4 + 24) = v20;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
LABEL_11:
        v22 = *(int *)(a3 + 32);
        v23 = &v4[v22];
        v24 = (uint64_t)a2 + v22;
        v25 = type metadata accessor for EventData(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
        return v4;
      }
    }
    else
    {
      *((_QWORD *)v4 + 13) = a2[13];
      v4[112] = *((_BYTE *)a2 + 112);
      *((_QWORD *)v4 + 15) = a2[15];
      v4[128] = *((_BYTE *)a2 + 128);
      *(_WORD *)(v4 + 129) = *(_WORD *)((char *)a2 + 129);
      *((_QWORD *)v4 + 17) = a2[17];
      *((_QWORD *)v4 + 18) = v16;
      swift_bridgeObjectRetain(v16);
      v18 = a2[20];
      if (v18)
        goto LABEL_8;
    }
    v21 = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(v4 + 168) = v21;
    *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 23);
    goto LABEL_11;
  }
  v12 = *a2;
  *(_QWORD *)v4 = *a2;
  v4 = (_BYTE *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain(v12);
  return v4;
}

uint64_t destroy for RemoveSuggestionCardEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v4 = a1[2];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[12]);
  }
  v5 = a1[18];
  if (v5 != 1)
    swift_bridgeObjectRelease(v5);
  v6 = a1[20];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
  }
  v7 = (char *)a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for RemoveSuggestionCardEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v8;
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v9;
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_DWORD *)(a1 + 81) = *(_DWORD *)(a2 + 81);
    *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
    v10 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    v6[2] = *(_OWORD *)(a2 + 40);
    v6[3] = v11;
    v12 = *(_OWORD *)(a2 + 88);
    v6[4] = *(_OWORD *)(a2 + 72);
    v6[5] = v12;
    v13 = *(_OWORD *)(a2 + 24);
    *v6 = *(_OWORD *)(a2 + 8);
    v6[1] = v13;
  }
  v14 = *(_QWORD *)(a2 + 144);
  if (v14 != 1)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v14;
    swift_bridgeObjectRetain(v14);
    v16 = *(_QWORD *)(a2 + 160);
    if (v16)
      goto LABEL_6;
LABEL_8:
    v19 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v19;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    goto LABEL_9;
  }
  v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v16 = *(_QWORD *)(a2 + 160);
  if (!v16)
    goto LABEL_8;
LABEL_6:
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  v17 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v17;
  v18 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v18;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
LABEL_9:
  v20 = *(int *)(a3 + 32);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  return a1;
}

uint64_t assignWithCopy for RemoveSuggestionCardEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  BAEventReporter *v8;
  uint64_t v9;
  uint64_t v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;
  uint64_t v18;
  BAEventReporter *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  uint64_t v27;
  BAEventReporter *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  int v36;
  int v37;
  uint64_t v38;
  BAEventReporter *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 *v61;
  __int128 *v62;
  BAEventReporter *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  int64_t v75;
  int64_t v76;
  id v77;
  _OWORD *v78;
  _OWORD *v79;
  BAEventReporter *v80;
  uint64_t v81;
  uint64_t v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  int64_t v87;
  int64_t v88;
  id v89;
  uint64_t v90;
  BAEventReporter *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  int64_t v96;
  int64_t v97;
  id v98;
  uint64_t v99;
  BAEventReporter *v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  int64_t v105;
  int64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v8 = *(BAEventReporter **)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 16) = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v8, v11, v12, v13, v14, v15, v16, v17);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v18 = *(_QWORD *)(a2 + 40);
      v19 = *(BAEventReporter **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v27 = *(_QWORD *)(a2 + 56);
      v28 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
      v36 = *(_DWORD *)(a2 + 68);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 68) = v36;
      v37 = *(_DWORD *)(a2 + 76);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_DWORD *)(a1 + 76) = v37;
      *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
      *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
      *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
      *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
      *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v38 = *(_QWORD *)(a2 + 96);
      v39 = *(BAEventReporter **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v38;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 8));
      v53 = v7[1];
      *v6 = *v7;
      v6[1] = v53;
      v54 = v7[5];
      v56 = v7[2];
      v55 = v7[3];
      v6[4] = v7[4];
      v6[5] = v54;
      v6[2] = v56;
      v6[3] = v55;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v47 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v47;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v48 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v48;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v49 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v49;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
    v50 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 68) = v50;
    v51 = *(_DWORD *)(a2 + 76);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_DWORD *)(a1 + 76) = v51;
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
    *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
    *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
    *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v52 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v52;
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v52);
  }
  else
  {
    v57 = *(_OWORD *)(a2 + 24);
    *v6 = *v7;
    *(_OWORD *)(a1 + 24) = v57;
    v58 = *(_OWORD *)(a2 + 40);
    v59 = *(_OWORD *)(a2 + 56);
    v60 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v60;
    *(_OWORD *)(a1 + 40) = v58;
    *(_OWORD *)(a1 + 56) = v59;
  }
  v61 = (__int128 *)(a1 + 104);
  v62 = (__int128 *)(a2 + 104);
  v63 = *(BAEventReporter **)(a1 + 144);
  v64 = *(_QWORD *)(a2 + 144);
  if (v63 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v64 == 1)
    {
      v65 = *v62;
      v66 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v66;
      *v61 = v65;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v69 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 144) = v69;
      swift_bridgeObjectRetain(v69);
    }
  }
  else if (v64 == 1)
  {
    sub_19008(a1 + 104);
    v68 = *(_OWORD *)(a2 + 120);
    v67 = *(_OWORD *)(a2 + 136);
    *v61 = *v62;
    *(_OWORD *)(a1 + 120) = v68;
    *(_OWORD *)(a1 + 136) = v67;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v70 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v70;
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRelease(v63, v71, v72, v73, v74, v75, v76, v77);
  }
  v78 = (_OWORD *)(a1 + 152);
  v79 = (_OWORD *)(a2 + 152);
  v80 = *(BAEventReporter **)(a1 + 160);
  v81 = *(_QWORD *)(a2 + 160);
  if (v80)
  {
    if (v81)
    {
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v82 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v80, v83, v84, v85, v86, v87, v88, v89);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v90 = *(_QWORD *)(a2 + 176);
      v91 = *(BAEventReporter **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v90;
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v99 = *(_QWORD *)(a2 + 192);
      v100 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v99;
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      sub_8DA38((_QWORD *)(a1 + 152));
      v112 = *(_OWORD *)(a2 + 168);
      v111 = *(_OWORD *)(a2 + 184);
      *v78 = *v79;
      *(_OWORD *)(a1 + 168) = v112;
      *(_OWORD *)(a1 + 184) = v111;
    }
  }
  else if (v81)
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v108 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v108;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v109 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v109;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v110 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v110;
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v110);
  }
  else
  {
    v113 = *v79;
    v114 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v114;
    *v78 = v113;
  }
  v115 = *(int *)(a3 + 32);
  v116 = a1 + v115;
  v117 = a2 + v115;
  v118 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 24))(v116, v117, v118);
  return a1;
}

uint64_t initializeWithTake for RemoveSuggestionCardEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for RemoveSuggestionCardEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  _OWORD *v12;
  BAEventReporter *v13;
  uint64_t v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  BAEventReporter *v45;
  uint64_t v46;
  __int128 v47;
  BAEventReporter *v48;
  uint64_t v49;
  uint64_t v50;
  BAEventReporter *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  int64_t v56;
  int64_t v57;
  id v58;
  uint64_t v59;
  BAEventReporter *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  int64_t v65;
  int64_t v66;
  id v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v11 = a1 + 8;
  v12 = (_OWORD *)(a2 + 8);
  v13 = *(BAEventReporter **)(a1 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 16);
    if (v14)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v14;
      swift_bridgeObjectRelease(v13, (SEL)a2, a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v15 = *(_QWORD *)(a2 + 40);
      v16 = *(BAEventReporter **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v15;
      swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
      v24 = *(_QWORD *)(a2 + 56);
      v25 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v24;
      swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_DWORD *)(a1 + 81) = *(_DWORD *)(a2 + 81);
      *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
      v33 = *(_QWORD *)(a2 + 96);
      v34 = *(BAEventReporter **)(a1 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v33;
      swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
      goto LABEL_6;
    }
    sub_4E9F4((_QWORD *)v11);
  }
  v42 = v12[3];
  *(_OWORD *)(v11 + 32) = v12[2];
  *(_OWORD *)(v11 + 48) = v42;
  v43 = v12[5];
  *(_OWORD *)(v11 + 64) = v12[4];
  *(_OWORD *)(v11 + 80) = v43;
  v44 = v12[1];
  *(_OWORD *)v11 = *v12;
  *(_OWORD *)(v11 + 16) = v44;
LABEL_6:
  v45 = *(BAEventReporter **)(a1 + 144);
  if (v45 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
LABEL_9:
    v47 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v47;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    goto LABEL_11;
  }
  v46 = *(_QWORD *)(a2 + 144);
  if (v46 == 1)
  {
    sub_19008(a1 + 104);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v46;
  swift_bridgeObjectRelease(v45, (SEL)a2, a3, a4, a5, a6, a7, a8);
LABEL_11:
  v48 = *(BAEventReporter **)(a1 + 160);
  if (!v48)
  {
LABEL_15:
    v68 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v68;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    goto LABEL_16;
  }
  v49 = *(_QWORD *)(a2 + 160);
  if (!v49)
  {
    sub_8DA38((_QWORD *)(a1 + 152));
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v49;
  swift_bridgeObjectRelease(v48, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v50 = *(_QWORD *)(a2 + 176);
  v51 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v50;
  swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  v59 = *(_QWORD *)(a2 + 192);
  v60 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v59;
  swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
LABEL_16:
  v69 = a3[8];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 40))(v70, v71, v72);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveSuggestionCardEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16D538);
}

uint64_t sub_16D538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for RemoveSuggestionCardEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16D5CC);
}

uint64_t sub_16D5CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_16D640(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_20F170;
  v4[1] = &unk_20F188;
  v4[2] = &unk_20F1A0;
  v4[3] = &unk_20F1B8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RemoveSuggestionCardEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_16D71C + 4 * byte_20F07A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_16D750 + 4 * byte_20F075[v4]))();
}

uint64_t sub_16D750(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_16D758(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16D760);
  return result;
}

uint64_t sub_16D76C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x16D774);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_16D778(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16D780(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoveSuggestionCardEvent.Model.CodingKeys()
{
  return &type metadata for RemoveSuggestionCardEvent.Model.CodingKeys;
}

unint64_t sub_16D7A0()
{
  unint64_t result;

  result = qword_2A2E70;
  if (!qword_2A2E70)
  {
    result = swift_getWitnessTable("}5\a", &type metadata for RemoveSuggestionCardEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2E70);
  }
  return result;
}

unint64_t sub_16D7E8()
{
  unint64_t result;

  result = qword_2A2E78;
  if (!qword_2A2E78)
  {
    result = swift_getWitnessTable(byte_20F1DC, &type metadata for RemoveSuggestionCardEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2E78);
  }
  return result;
}

unint64_t sub_16D830()
{
  unint64_t result;

  result = qword_2A2E80;
  if (!qword_2A2E80)
  {
    result = swift_getWitnessTable(byte_20F204, &type metadata for RemoveSuggestionCardEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2E80);
  }
  return result;
}

uint64_t sub_16D874(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v5 = 0xEE00617461446E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x74614465726E6567 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614465726E6567, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void ContentData.init(from:with:)(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  BAEventReporter *v48;
  BAEventReporter *v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BAEventReporter *v75;
  BAEventReporter *v76;
  uint64_t v77;
  uint64_t v78;
  BAEventReporter *v79;
  BAEventReporter *v80;
  char *v81;
  uint64_t Strong;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  int64_t v87;
  int64_t v88;
  void *v89;
  void *v90;
  NSString v91;
  id v92;
  const char *v93;
  BAEventReporter *v94;
  id v95;
  id v96;
  id v97;
  int64_t v98;
  int64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  BAEventReporter *v103;
  BAEventReporter *v104;
  uint64_t v105;
  const char *v106;
  void *v107;
  void *v108;
  void *v109;
  int64_t v110;
  int64_t v111;
  void *v112;
  void *v113;
  NSString v114;
  id v115;
  const char *v116;
  BAEventReporter *v117;
  id v118;
  id v119;
  id v120;
  int64_t v121;
  int64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  unsigned __int8 v128;
  int v129;
  const char *v130;
  void *v131;
  void *v132;
  void *v133;
  int64_t v134;
  int64_t v135;
  void *v136;
  uint64_t v137;
  BAEventReporter *v138;
  unsigned __int8 v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  BAEventReporter *v146;
  id v147;
  uint64_t v148;
  BAEventReporter *v149;
  char v150;
  char v151;
  uint64_t *v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  int64_t v157;
  int64_t v158;
  id v159;
  SEL v160;
  id v161;
  id v162;
  id v163;
  int64_t v164;
  int64_t v165;
  id v166;
  SEL v167;
  id v168;
  id v169;
  id v170;
  int64_t v171;
  int64_t v172;
  id v173;
  SEL v174;
  id v175;
  id v176;
  id v177;
  int64_t v178;
  int64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  char *v188;
  uint64_t *v189;
  char *v190;
  __int128 v191;
  uint64_t v192;
  uint64_t AssociatedConformanceWitness;
  _QWORD v194[3];
  uint64_t v195;
  uint64_t v196;

  v189 = a3;
  v190 = a2;
  v4 = sub_71B4(&qword_2A2E88);
  __chkstk_darwin(v4);
  v188 = (char *)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_71B4(&qword_2A2E90);
  __chkstk_darwin(v6);
  v8 = (char *)&v181 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_71B4(&qword_2A2E98);
  __chkstk_darwin(v9);
  v11 = (char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BookInfo(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v181 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BooksFeatureFlag(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v181 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for BooksFeatureFlag.unifiedProductPage(_:), v16);
  v20 = sub_16E474();
  v21 = sub_16E4BC();
  v186 = RawRepresentable<>.isEnabled.getter(v16, v20, v21);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_89258((uint64_t)a1, (uint64_t)v194);
  v22 = sub_71B4(&qword_2A2EB8);
  v23 = swift_dynamicCast(v11, v194, v22, v12, 6);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if ((v23 & 1) != 0)
  {
    v24(v11, 0, 1, v12);
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    v26 = BookInfo.isIBA.getter(v25);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((v26 & 1) != 0)
      v27 = 5;
    else
      v27 = 1;
    goto LABEL_9;
  }
  v24(v11, 1, 1, v12);
  sub_88F50((uint64_t)v11, &qword_2A2E98);
  sub_89258((uint64_t)a1, (uint64_t)v194);
  v28 = type metadata accessor for AudiobookInfo(0);
  v29 = swift_dynamicCast(v8, v194, v22, v28, 6);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  if ((v29 & 1) != 0)
  {
    v30(v8, 0, 1, v28);
    sub_88F50((uint64_t)v8, &qword_2A2E90);
    v27 = 2;
LABEL_9:
    v184 = v27;
    goto LABEL_10;
  }
  v30(v8, 1, 1, v28);
  sub_88F50((uint64_t)v8, &qword_2A2E90);
  sub_89258((uint64_t)a1, (uint64_t)v194);
  v31 = type metadata accessor for PDFInfo(0);
  v32 = (uint64_t)v188;
  v33 = swift_dynamicCast(v188, v194, v22, v31, 6);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  if ((v33 & 1) != 0)
  {
    v34(v32, 0, 1, v31);
    sub_88F50(v32, &qword_2A2E88);
    v27 = 3;
    goto LABEL_9;
  }
  v34(v32, 1, 1, v31);
  sub_88F50(v32, &qword_2A2E88);
  v184 = 0;
LABEL_10:
  v35 = a1[3];
  v36 = a1[4];
  sub_7988(a1, v35);
  v37 = *(_QWORD *)(v36 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v37, v35, &protocol requirements base descriptor for ContentInfo, &associated type descriptor for ContentInfo.LibraryType);
  v39 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (char *)&v181 - v41;
  ContentInfo.libraryData.getter(v35, v37);
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
    v44 = 3;
  }
  else
  {
    v192 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v36, v35, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
    v45 = sub_16E508(&v191);
    (*(void (**)(_QWORD *, char *, uint64_t))(v43 + 32))(v45, v42, AssociatedTypeWitness);
    sub_8929C(&v191, (uint64_t)v194);
    v47 = v195;
    v46 = v196;
    sub_7988(v194, v195);
    dispatch thunk of LibraryContentInfo.storeID.getter(v47, *(_QWORD *)(v46 + 8));
    v49 = v48;
    swift_bridgeObjectRelease(v48, (SEL)v48, v50, v51, v52, v53, v54, v55);
    if (v49)
      v44 = 1;
    else
      v44 = 2;
    sub_7DAC(v194);
  }
  v56 = v190;
  v57 = a1[3];
  v58 = a1[4];
  sub_7988(a1, v57);
  v59 = (void *)ContentInfo.storeData.getter(v57, *(_QWORD *)(v58 + 8));
  if (v59)
  {
    v60 = v59;
    if (objc_msgSend(v59, "isSG"))
    {

      v61 = 1;
    }
    else
    {
      v62 = dispatch thunk of MAsset.isAudiobook.getter();

      if ((v62 & 1) != 0)
        v61 = 2;
      else
        v61 = 3;
    }
  }
  else
  {
    v61 = 3;
  }
  v183 = v61;
  v63 = a1[3];
  v64 = a1[4];
  sub_7988(a1, v63);
  v65 = ContentInfo.storeData.getter(v63, *(_QWORD *)(v64 + 8));
  if (v65 && (v66 = (void *)v65, v67 = (void *)MAsset.seriesResource.getter(), v66, v67))
  {
    v68 = MSeries.isOrdered.getter();

    if ((v68 & 1) != 0)
      v69 = 1;
    else
      v69 = 2;
  }
  else
  {
    v70 = a1[3];
    v71 = a1[4];
    sub_7988(a1, v70);
    v69 = ((int)(AssetInfo.isPartOfSeries.getter(v70, v71) << 31) >> 31) & 3;
  }
  v185 = v69;
  v72 = a1[3];
  v73 = a1[4];
  sub_7988(a1, v72);
  v74 = ContentInfo.id.getter(v72, *(_QWORD *)(v73 + 8));
  v76 = v75;
  v77 = a1[3];
  v78 = a1[4];
  sub_7988(a1, v77);
  ContentInfo.id.getter(v77, *(_QWORD *)(v78 + 8));
  v80 = v79;
  v81 = &v56[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
  swift_beginAccess(&v56[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate], v194, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v81);
  v187 = v74;
  if (Strong
    && (v90 = (void *)Strong,
        v91 = String._bridgeToObjectiveC()(),
        v92 = objc_msgSend(v90, "contentPrivateIDForContentID:", v91),
        v91,
        swift_unknownObjectRelease(v90),
        v92))
  {
    v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92, v83);
    v94 = (BAEventReporter *)v93;
    swift_bridgeObjectRelease(v80, v93, v95, v96, v97, v98, v99, v100);

  }
  else
  {
    swift_bridgeObjectRelease(v80, v83, v84, v85, v86, v87, v88, v89);
    v182 = 0;
    v94 = (BAEventReporter *)0xE000000000000000;
  }
  v101 = a1[3];
  v102 = a1[4];
  sub_7988(a1, v101);
  ContentInfo.id.getter(v101, *(_QWORD *)(v102 + 8));
  v104 = v103;
  v105 = swift_unknownObjectWeakLoadStrong(v81);
  LODWORD(v188) = v44;
  if (v105
    && (v113 = (void *)v105,
        v114 = String._bridgeToObjectiveC()(),
        v115 = objc_msgSend(v113, "contentUserIDForContentID:", v114),
        v114,
        swift_unknownObjectRelease(v113),
        v115))
  {
    v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115, v106);
    v117 = (BAEventReporter *)v116;
    swift_bridgeObjectRelease(v104, v116, v118, v119, v120, v121, v122, v123);

  }
  else
  {
    swift_bridgeObjectRelease(v104, v106, v107, v108, v109, v110, v111, v112);
    v181 = 0;
    v117 = (BAEventReporter *)0xE000000000000000;
  }
  v124 = a1[3];
  v125 = a1[4];
  sub_7988(a1, v124);
  v126 = (void *)ContentInfo.storeData.getter(v124, *(_QWORD *)(v125 + 8));
  if (v126
    && (v127 = v126,
        v128 = objc_msgSend(v126, "hasSupplementalContent"),
        v127,
        (v128 & 1) != 0))
  {
    v129 = 1;
    if ((v186 & 1) == 0)
    {
LABEL_40:

      v137 = 0;
      v138 = 0;
      v139 = 2;
      goto LABEL_51;
    }
  }
  else
  {
    v129 = 0;
    if ((v186 & 1) == 0)
      goto LABEL_40;
  }
  v140 = a1[3];
  v141 = a1[4];
  sub_7988(a1, v140);
  v142 = (void *)ContentInfo.storeData.getter(v140, *(_QWORD *)(v141 + 8));
  if (v142)
  {
    v143 = v142;
    v139 = objc_msgSend(v142, "supportsUnifiedProductPage");

  }
  else
  {
    v139 = 0;
  }
  v144 = a1[3];
  v145 = a1[4];
  sub_7988(a1, v144);
  v146 = (BAEventReporter *)ContentInfo.storeData.getter(v144, *(_QWORD *)(v145 + 8));
  v138 = v146;
  if (v146)
  {
    v147 = -[BAEventReporter editionKind](v146, "editionKind");

    if (v147)
    {
      v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147, v148);
      v138 = v149;

    }
    else
    {

      v137 = 0;
      v138 = 0;
    }
  }
  else
  {

    v137 = 0;
  }
LABEL_51:
  v151 = v183;
  v150 = v184;
  swift_bridgeObjectRelease(0, v130, v131, v132, v133, v134, v135, v136);
  v152 = v189;
  *v189 = v187;
  v152[1] = (uint64_t)v76;
  *((_BYTE *)v152 + 16) = v150;
  v152[3] = v182;
  v152[4] = (uint64_t)v94;
  v152[5] = v181;
  v152[6] = (uint64_t)v117;
  *((_BYTE *)v152 + 56) = (_BYTE)v188;
  *((_BYTE *)v152 + 57) = 0;
  *((_DWORD *)v152 + 15) = 0;
  *((_BYTE *)v152 + 64) = 1;
  *((_DWORD *)v152 + 17) = v129;
  *((_BYTE *)v152 + 72) = 0;
  *((_BYTE *)v152 + 73) = v185;
  *((_BYTE *)v152 + 74) = v151;
  *((_BYTE *)v152 + 75) = 3;
  *((_BYTE *)v152 + 76) = v139;
  *((_BYTE *)v152 + 77) = 2;
  v152[10] = v137;
  v152[11] = (uint64_t)v138;
  swift_bridgeObjectRetain(v138);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRetain(v117);
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v138, v153, v154, v155, v156, v157, v158, v159);
  swift_bridgeObjectRelease(v117, v160, v161, v162, v163, v164, v165, v166);
  swift_bridgeObjectRelease(v94, v167, v168, v169, v170, v171, v172, v173);
  swift_bridgeObjectRelease(v76, v174, v175, v176, v177, v178, v179, v180);
}

unint64_t sub_16E474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2A2EA0;
  if (!qword_2A2EA0)
  {
    v1 = type metadata accessor for BooksFeatureFlag(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for BooksFeatureFlag, v1);
    atomic_store(result, (unint64_t *)&qword_2A2EA0);
  }
  return result;
}

unint64_t sub_16E4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2A2EA8;
  if (!qword_2A2EA8)
  {
    v1 = sub_679EC(&qword_2A2EB0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for StaticFeatureFlagsKey<A>, v1);
    atomic_store(result, (unint64_t *)&qword_2A2EA8);
  }
  return result;
}

_QWORD *sub_16E508(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

BookAnalytics::EditActionResult_optional __swiftcall EditActionResult.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::EditActionResult_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268558, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t EditActionResult.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73736563637573;
  if (*v0 != 1)
    v1 = 0x6C65636E6163;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_16E5F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_29C1C(*a1, *a2);
}

unint64_t sub_16E604()
{
  unint64_t result;

  result = qword_2A2EC0;
  if (!qword_2A2EC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EditActionResult, &type metadata for EditActionResult);
    atomic_store(result, (unint64_t *)&qword_2A2EC0);
  }
  return result;
}

Swift::Int sub_16E648()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE700000000000000;
  v3 = 0x73736563637573;
  if (v1 != 1)
  {
    v3 = 0x6C65636E6163;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_16E6E4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x73736563637573;
  if (*v1 != 1)
  {
    v3 = 0x6C65636E6163;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_16E75C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE700000000000000;
  v4 = 0x73736563637573;
  if (v2 != 1)
  {
    v4 = 0x6C65636E6163;
    v3 = 0xE600000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::EditActionResult_optional sub_16E7F4(Swift::String *a1)
{
  return EditActionResult.init(rawValue:)(*a1);
}

void sub_16E800(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x73736563637573;
  if (v2 != 1)
  {
    v5 = 0x6C65636E6163;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_16E85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_16E9D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_16E8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_16E9D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for EditActionResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_16E950 + 4 * byte_20F2F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_16E984 + 4 * byte_20F2F0[v4]))();
}

uint64_t sub_16E984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_16E98C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16E994);
  return result;
}

uint64_t sub_16E9A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x16E9A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_16E9AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16E9B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditActionResult()
{
  return &type metadata for EditActionResult;
}

unint64_t sub_16E9D0()
{
  unint64_t result;

  result = qword_2A2EC8;
  if (!qword_2A2EC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EditActionResult, &type metadata for EditActionResult);
    atomic_store(result, (unint64_t *)&qword_2A2EC8);
  }
  return result;
}

uint64_t sub_16EA14(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A2ED0, &enum case for SessionGroup.default(_:));
}

uint64_t static AddToCollectionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B00, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2ED0, a1);
}

uint64_t sub_16EA54(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A2EE8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AddToCollectionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B08, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2EE8, a1);
}

uint64_t AddToCollectionEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AddToCollectionEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2F70, (uint64_t)&nominal type descriptor for AddToCollectionEvent);
}

uint64_t AddToCollectionEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AddToCollectionEvent.contentData.modify())()
{
  type metadata accessor for AddToCollectionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AddToCollectionEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AddToCollectionEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AddToCollectionEvent.seriesData.modify())()
{
  type metadata accessor for AddToCollectionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AddToCollectionEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 28);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AddToCollectionEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 28);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AddToCollectionEvent.suggestionData.modify())()
{
  type metadata accessor for AddToCollectionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AddToCollectionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AddToCollectionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AddToCollectionEvent.eventData.modify())()
{
  type metadata accessor for AddToCollectionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AddToCollectionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for AddToCollectionEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v8, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t RemoveFromCollectionEvent.Model.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 80);
  v8 = *(_WORD *)(v1 + 88);
  v9 = *(_DWORD *)(v1 + 92);
  v10 = *(_BYTE *)(v1 + 96);
  v11 = *(_DWORD *)(v1 + 100);
  v12 = *(_BYTE *)(v1 + 104);
  v13 = *(_BYTE *)(v1 + 109);
  v15 = *(_QWORD *)(v1 + 112);
  v14 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 60) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 68) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(v1 + 105);
  *(_BYTE *)(a1 + 77) = v13;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

void AddToCollectionEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 176);
}

uint64_t AddToCollectionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AddToCollectionEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AddToCollectionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A3010, (uint64_t)&nominal type descriptor for AddToCollectionEvent.Model);
}

uint64_t AddToCollectionEvent.Model.init(collectionData:contentData:seriesData:suggestionData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_BYTE *)a2 + 16);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = a2[5];
  v13 = a2[6];
  v14 = *((_WORD *)a2 + 28);
  v15 = *((_DWORD *)a2 + 15);
  v16 = *((_BYTE *)a2 + 64);
  v17 = *((_DWORD *)a2 + 17);
  v18 = *((_BYTE *)a2 + 72);
  v19 = *((_BYTE *)a2 + 77);
  v20 = *a4;
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_QWORD *)(a6 + 8) = v7;
  *(_OWORD *)(a6 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a6 + 32) = v8;
  *(_QWORD *)(a6 + 40) = v9;
  *(_BYTE *)(a6 + 48) = v10;
  *(_OWORD *)(a6 + 56) = v11;
  *(_QWORD *)(a6 + 72) = v12;
  *(_QWORD *)(a6 + 80) = v13;
  *(_WORD *)(a6 + 88) = v14;
  *(_DWORD *)(a6 + 92) = v15;
  *(_BYTE *)(a6 + 96) = v16;
  *(_DWORD *)(a6 + 100) = v17;
  *(_BYTE *)(a6 + 104) = v18;
  *(_DWORD *)(a6 + 105) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a6 + 109) = v19;
  v21 = *a3;
  v22 = a3[1];
  *(_OWORD *)(a6 + 112) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a6 + 128) = v21;
  v23 = a3[2];
  *(_OWORD *)(a6 + 144) = v22;
  *(_OWORD *)(a6 + 160) = v23;
  *(_BYTE *)(a6 + 176) = v20;
  v24 = a6 + *(int *)(type metadata accessor for AddToCollectionEvent.Model(0) + 32);
  v25 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a5, v25);
}

uint64_t sub_16F098()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_16F0D4 + 4 * byte_20F410[*v0]))(0x697463656C6C6F63, 0xEE00617461446E6FLL);
}

uint64_t sub_16F0D4()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_16F0F4()
{
  return 0x6144736569726573;
}

uint64_t sub_16F110()
{
  return 0x6974736567677573;
}

uint64_t sub_16F124()
{
  return 0x746144746E657665;
}

uint64_t sub_16F140@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_171020(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_16F164(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_16F440();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_16F18C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_16F440();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AddToCollectionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  _BYTE v34[32];
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  int v41;
  char v42;
  __int128 v43;
  char v44;

  v3 = v1;
  v5 = sub_71B4(&qword_2A2F00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_16F440();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AddToCollectionEvent.Model.CodingKeys, &type metadata for AddToCollectionEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)&v33 = *(_QWORD *)v3;
  *((_QWORD *)&v33 + 1) = v12;
  *(_OWORD *)v34 = *(_OWORD *)(v3 + 16);
  v44 = 0;
  v13 = sub_327A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v44, v5, &type metadata for CollectionData, v13);
  if (!v2)
  {
    v14 = *(_QWORD *)(v3 + 40);
    v15 = *(_BYTE *)(v3 + 48);
    v16 = *(_OWORD *)(v3 + 56);
    v17 = *(_QWORD *)(v3 + 72);
    v18 = *(_QWORD *)(v3 + 80);
    v19 = *(_WORD *)(v3 + 88);
    v20 = *(_DWORD *)(v3 + 92);
    v21 = *(_BYTE *)(v3 + 96);
    v22 = *(_DWORD *)(v3 + 100);
    v23 = *(_BYTE *)(v3 + 104);
    v24 = *(unsigned __int8 *)(v3 + 109);
    *(_QWORD *)&v33 = *(_QWORD *)(v3 + 32);
    *((_QWORD *)&v33 + 1) = v14;
    v34[0] = v15;
    *(_OWORD *)&v34[8] = v16;
    *(_QWORD *)&v34[24] = v17;
    v35 = v18;
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = *(_DWORD *)(v3 + 105);
    v42 = v24;
    v43 = *(_OWORD *)(v3 + 112);
    v44 = 1;
    v25 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v44, v5, &type metadata for ContentData, v25);
    v26 = *(_OWORD *)(v3 + 144);
    v33 = *(_OWORD *)(v3 + 128);
    *(_OWORD *)v34 = v26;
    *(_OWORD *)&v34[16] = *(_OWORD *)(v3 + 160);
    v44 = 2;
    v27 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v44, v5, &type metadata for SeriesData, v27);
    LOBYTE(v33) = *(_BYTE *)(v3 + 176);
    v44 = 3;
    v28 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v44, v5, &type metadata for SuggestionData, v28);
    v29 = v3 + *(int *)(type metadata accessor for AddToCollectionEvent.Model(0) + 32);
    LOBYTE(v33) = 4;
    v30 = type metadata accessor for EventData(0);
    v31 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v33, v5, v30, v31);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_16F440()
{
  unint64_t result;

  result = qword_2A2F08;
  if (!qword_2A2F08)
  {
    result = swift_getWitnessTable("-4\a", &type metadata for AddToCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2F08);
  }
  return result;
}

void AddToCollectionEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  char v31;
  int v32;
  char v33;
  char v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  _BYTE v51[32];
  uint64_t v52;
  __int16 v53;
  int v54;
  char v55;
  int v56;
  char v57;
  int v58;
  char v59;
  __int128 v60;
  char v61;

  v45 = a2;
  v44 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v5 = (uint64_t *)((char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = sub_71B4(&qword_2A2F10);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AddToCollectionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v48 = a1;
  sub_7988(a1, v12);
  v14 = sub_16F440();
  v46 = v8;
  v15 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AddToCollectionEvent.Model.CodingKeys, &type metadata for AddToCollectionEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v48);
  }
  else
  {
    v41 = v9;
    v49 = v6;
    v42 = v3;
    v43 = v5;
    v17 = v44;
    v16 = v45;
    v61 = 0;
    v18 = sub_32A60();
    v19 = v46;
    v20 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, &type metadata for CollectionData, &v61, v47, &type metadata for CollectionData, v18);
    v21 = *((_QWORD *)&v50 + 1);
    v22 = (uint64_t)v11;
    *(_QWORD *)v11 = v50;
    *((_QWORD *)v11 + 1) = v21;
    *((_OWORD *)v11 + 1) = *(_OWORD *)v51;
    v61 = 1;
    v23 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, &type metadata for ContentData, &v61, v20, &type metadata for ContentData, v23);
    v24 = *((_QWORD *)&v50 + 1);
    v25 = v51[0];
    v26 = *(_OWORD *)&v51[8];
    v27 = *(_QWORD *)&v51[24];
    v28 = v52;
    v29 = v53;
    v30 = v54;
    v31 = v55;
    v32 = v56;
    v33 = v57;
    v34 = v59;
    *((_QWORD *)v11 + 4) = v50;
    *((_QWORD *)v11 + 5) = v24;
    v11[48] = v25;
    *(_OWORD *)(v11 + 56) = v26;
    *((_QWORD *)v11 + 9) = v27;
    *((_QWORD *)v11 + 10) = v28;
    *((_WORD *)v11 + 44) = v29;
    *((_DWORD *)v11 + 23) = v30;
    v11[96] = v31;
    *((_DWORD *)v11 + 25) = v32;
    v11[104] = v33;
    *(_DWORD *)(v11 + 105) = v58;
    v11[109] = v34;
    *((_OWORD *)v11 + 7) = v60;
    v61 = 2;
    v35 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, &type metadata for SeriesData, &v61, v20, &type metadata for SeriesData, v35);
    v36 = *(_OWORD *)v51;
    *((_OWORD *)v11 + 8) = v50;
    *((_OWORD *)v11 + 9) = v36;
    *((_OWORD *)v11 + 10) = *(_OWORD *)&v51[16];
    v61 = 3;
    v37 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, &type metadata for SuggestionData, &v61, v20, &type metadata for SuggestionData, v37);
    v11[176] = v50;
    LOBYTE(v50) = 4;
    v38 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v39 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v17, &v50, v20, v17, v38);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v19, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v42 + 32))(v22 + *(int *)(v41 + 32), v39, v17);
    sub_16F8C4(v22, v16);
    sub_7DAC(v48);
    sub_16F908(v22);
  }
}

uint64_t sub_16F8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AddToCollectionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_16F908(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AddToCollectionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_16F944(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AddToCollectionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_16F958(_QWORD *a1)
{
  return AddToCollectionEvent.Model.encode(to:)(a1);
}

uint64_t sub_16F96C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B00, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2ED0, (uint64_t)sub_16EA14, a1);
}

uint64_t sub_16F990@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B08, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2EE8, (uint64_t)sub_16EA54, a1);
}

uint64_t sub_16F9B4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v9, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for AddToCollectionEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_2971B8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for AddToCollectionEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for AddToCollectionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for AddToCollectionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for AddToCollectionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for AddToCollectionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for AddToCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_170174);
}

uint64_t sub_170174(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_2971B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296310);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296F78);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AddToCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_170274);
}

uint64_t sub_170274(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_2971B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296310);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296F78);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_170370(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_297250, (uint64_t (*)(void))sub_32A60, (uint64_t (*)(void))sub_327A8, (uint64_t)&type metadata for CollectionData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AddToCollectionEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v10 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v10;
    v11 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v11;
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    *(_DWORD *)(a1 + 92) = *((_DWORD *)a2 + 23);
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_DWORD *)(a1 + 105) = *(_DWORD *)((char *)a2 + 105);
    *(_BYTE *)(a1 + 109) = *((_BYTE *)a2 + 109);
    v12 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v12;
    v13 = a2[21];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v13 == 1)
    {
      v14 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v14;
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    }
    else
    {
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)((char *)a2 + 153);
      *(_QWORD *)(a1 + 160) = a2[20];
      *(_QWORD *)(a1 + 168) = v13;
      swift_bridgeObjectRetain(v13);
    }
    *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
    v16 = *(int *)(a3 + 32);
    v17 = a1 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for AddToCollectionEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = a1[21];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AddToCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v12 == 1)
  {
    v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v12;
    swift_bridgeObjectRetain(v12);
  }
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for AddToCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  uint64_t v42;
  BAEventReporter *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  int v51;
  int v52;
  uint64_t v53;
  BAEventReporter *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  int64_t v59;
  int64_t v60;
  id v61;
  __int128 *v62;
  __int128 *v63;
  BAEventReporter *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v24 = *(_QWORD *)(a2 + 40);
  v25 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(BAEventReporter **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v51 = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = v51;
  v52 = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = v52;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v53 = *(_QWORD *)(a2 + 120);
  v54 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
  v62 = (__int128 *)(a1 + 128);
  v63 = (__int128 *)(a2 + 128);
  v64 = *(BAEventReporter **)(a1 + 168);
  v65 = *(_QWORD *)(a2 + 168);
  if (v64 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v65 == 1)
    {
      v66 = *v63;
      v67 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v67;
      *v62 = v66;
    }
    else
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v70 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 168) = v70;
      swift_bridgeObjectRetain(v70);
    }
  }
  else if (v65 == 1)
  {
    sub_19008(a1 + 128);
    v69 = *(_OWORD *)(a2 + 144);
    v68 = *(_OWORD *)(a2 + 160);
    *v62 = *v63;
    *(_OWORD *)(a1 + 144) = v69;
    *(_OWORD *)(a1 + 160) = v68;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v71 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 168) = v71;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRelease(v64, v72, v73, v74, v75, v76, v77, v78);
  }
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v79 = *(int *)(a3 + 32);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 24))(v80, v81, v82);
  return a1;
}

uint64_t initializeWithTake for AddToCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 128) = v8;
  v10 = *(int *)(a3 + 32);
  v11 = a2 + v10;
  v12 = a1 + v10;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, v11, v13);
  return a1;
}

uint64_t assignWithTake for AddToCollectionEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  const char *v58;
  void *v59;
  void *v60;
  void *v61;
  int64_t v62;
  int64_t v63;
  void *v64;
  BAEventReporter *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(BAEventReporter **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  v49 = *(_QWORD *)(a2 + 120);
  v50 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v49;
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  v65 = *(BAEventReporter **)(a1 + 168);
  if (v65 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v66 = *(_QWORD *)(a2 + 168);
    if (v66 != 1)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v66;
      swift_bridgeObjectRelease(v65, v58, v59, v60, v61, v62, v63, v64);
      goto LABEL_6;
    }
    sub_19008(a1 + 128);
  }
  v67 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v67;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_6:
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v68 = a3[8];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40))(v69, v70, v71);
  return a1;
}

uint64_t getEnumTagSinglePayload for AddToCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_170CF0);
}

uint64_t sub_170CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AddToCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_170D78);
}

uint64_t sub_170D78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_170DEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = " ";
  v4[1] = &unk_20F528;
  v4[2] = &unk_20F540;
  v4[3] = &unk_20F558;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AddToCollectionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_170EC8 + 4 * byte_20F41A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_170EFC + 4 * byte_20F415[v4]))();
}

uint64_t sub_170EFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_170F04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x170F0CLL);
  return result;
}

uint64_t sub_170F18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x170F20);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_170F24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_170F2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddToCollectionEvent.Model.CodingKeys()
{
  return &type metadata for AddToCollectionEvent.Model.CodingKeys;
}

unint64_t sub_170F4C()
{
  unint64_t result;

  result = qword_2A3058;
  if (!qword_2A3058)
  {
    result = swift_getWitnessTable("E4\a", &type metadata for AddToCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3058);
  }
  return result;
}

unint64_t sub_170F94()
{
  unint64_t result;

  result = qword_2A3060;
  if (!qword_2A3060)
  {
    result = swift_getWitnessTable(byte_20F57C, &type metadata for AddToCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3060);
  }
  return result;
}

unint64_t sub_170FDC()
{
  unint64_t result;

  result = qword_2A3068;
  if (!qword_2A3068)
  {
    result = swift_getWitnessTable("u4\a", &type metadata for AddToCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3068);
  }
  return result;
}

uint64_t sub_171020(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x697463656C6C6F63 && a2 == 0xEE00617461446E6FLL)
  {
    v5 = 0xEE00617461446E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v9 = 0xEE00617461446E6FLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_1712B0(char a1)
{
  if (!a1)
    return 0xD000000000000018;
  if (a1 == 1)
    return 0xD00000000000001ALL;
  return 0xD000000000000016;
}

unint64_t sub_17130C()
{
  char *v0;

  return sub_1712B0(*v0);
}

uint64_t sub_171314@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1719F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_171338(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17176C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_171360(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17176C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchSuggestionSelectionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v3 = sub_71B4(&qword_2A3070);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v18 = *((_DWORD *)v1 + 4);
  HIDWORD(v16) = *((unsigned __int8 *)v1 + 20);
  v10 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v10);
  v11 = sub_17176C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionSelectionData.CodingKeys, &type metadata for SearchSuggestionSelectionData.CodingKeys, v11, v10, v9);
  v22 = 0;
  v12 = v17;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v22, v3);
  if (!v12)
  {
    v13 = BYTE4(v16);
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v21, v3);
    v20 = v13;
    v19 = 2;
    v14 = sub_1717B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v3, &type metadata for SelectedSuggestionType, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void SearchSuggestionSelectionData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;

  v5 = sub_71B4(&qword_2A3088);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_17176C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionSelectionData.CodingKeys, &type metadata for SearchSuggestionSelectionData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    BYTE2(v27) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v27 + 2, v5);
    v14 = v13;
    BYTE1(v27) = 1;
    swift_bridgeObjectRetain(v13);
    v25 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v27 + 1, v5);
    v26 = 2;
    v15 = sub_1717F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for SelectedSuggestionType, &v26, v5, &type metadata for SelectedSuggestionType, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v23 = v27;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v25;
    *(_BYTE *)(a2 + 20) = v23;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
  }
}

void sub_1716C4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchSuggestionSelectionData.init(from:)(a1, a2);
}

uint64_t sub_1716D8(_QWORD *a1)
{
  return SearchSuggestionSelectionData.encode(to:)(a1);
}

void _s13BookAnalytics29SearchSuggestionSelectionDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v7 = *((_BYTE *)a1 + 20);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = v4 == *(_QWORD *)a2 && v5 == v8;
  if ((v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v8, 0) & 1) != 0) && v6 == v9)
    sub_26E08(v7);
}

unint64_t sub_17176C()
{
  unint64_t result;

  result = qword_2A3078;
  if (!qword_2A3078)
  {
    result = swift_getWitnessTable("\r4\a", &type metadata for SearchSuggestionSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3078);
  }
  return result;
}

unint64_t sub_1717B0()
{
  unint64_t result;

  result = qword_2A3080;
  if (!qword_2A3080)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectedSuggestionType, &type metadata for SelectedSuggestionType);
    atomic_store(result, (unint64_t *)&qword_2A3080);
  }
  return result;
}

unint64_t sub_1717F4()
{
  unint64_t result;

  result = qword_2A3090;
  if (!qword_2A3090)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectedSuggestionType, &type metadata for SelectedSuggestionType);
    atomic_store(result, (unint64_t *)&qword_2A3090);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchSuggestionSelectionData()
{
  return &type metadata for SearchSuggestionSelectionData;
}

uint64_t storeEnumTagSinglePayload for SearchSuggestionSelectionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_17189C + 4 * byte_20F695[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1718D0 + 4 * byte_20F690[v4]))();
}

uint64_t sub_1718D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1718D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1718E0);
  return result;
}

uint64_t sub_1718EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1718F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1718F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_171900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchSuggestionSelectionData.CodingKeys()
{
  return &type metadata for SearchSuggestionSelectionData.CodingKeys;
}

unint64_t sub_171920()
{
  unint64_t result;

  result = qword_2A3098;
  if (!qword_2A3098)
  {
    result = swift_getWitnessTable(byte_20F81C, &type metadata for SearchSuggestionSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3098);
  }
  return result;
}

unint64_t sub_171968()
{
  unint64_t result;

  result = qword_2A30A0;
  if (!qword_2A30A0)
  {
    result = swift_getWitnessTable("}4\a", &type metadata for SearchSuggestionSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A30A0);
  }
  return result;
}

unint64_t sub_1719B0()
{
  unint64_t result;

  result = qword_2A30A8;
  if (!qword_2A30A8)
  {
    result = swift_getWitnessTable("e4\a", &type metadata for SearchSuggestionSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A30A8);
  }
  return result;
}

uint64_t sub_1719F4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000018 && a2 == 0x8000000000222400)
  {
    v4 = 0x8000000000222400;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000000222400, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000000222420)
  {
    v6 = 0x8000000000222420;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000000222420, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000000222440)
  {
    swift_bridgeObjectRelease(0x8000000000222440);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000000222440, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void __swiftcall DeviceData.init(deviceModel:devicePlatform:osInstallVariant:osVersion:osBundleVersion:)(BookAnalytics::DeviceData *__return_ptr retstr, Swift::String deviceModel, Swift::String devicePlatform, BookAnalytics::OsInstallVariant osInstallVariant, Swift::String osVersion, Swift::String osBundleVersion)
{
  BookAnalytics::OsInstallVariant v6;

  v6 = *(_BYTE *)osInstallVariant;
  retstr->deviceModel = deviceModel;
  retstr->devicePlatform = devicePlatform;
  retstr->osInstallVariant = v6;
  retstr->osVersion = osVersion;
  retstr->osBundleVersion = osBundleVersion;
}

uint64_t sub_171B5C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_171B94 + 4 * byte_20F894[*v0]))(0x6F4D656369766564, 0xEB000000006C6564);
}

uint64_t sub_171B94()
{
  return 0x6C50656369766564;
}

unint64_t sub_171BB8()
{
  return 0xD000000000000010;
}

uint64_t sub_171BD4()
{
  return 0x6F6973726556736FLL;
}

uint64_t sub_171BF0()
{
  return 0x656C646E7542736FLL;
}

uint64_t sub_171C14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1728BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_171C38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1723E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_171C60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1723E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DeviceData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v4 = sub_71B4(&qword_2A30B0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v30 = v1[3];
  v31 = v10;
  v29 = *((unsigned __int8 *)v1 + 32);
  v11 = v1[5];
  v27 = v1[6];
  v28 = v11;
  v12 = v1[7];
  v25 = v1[8];
  v26 = v12;
  v14 = a1[3];
  v13 = a1[4];
  v15 = a1;
  v17 = v16;
  sub_7988(v15, v14);
  v18 = sub_1723E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceData.CodingKeys, &type metadata for DeviceData.CodingKeys, v18, v14, v13);
  v37 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v9, &v37, v17);
  if (!v2)
  {
    v19 = v29;
    v20 = v27;
    v21 = v28;
    v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v31, v30, &v36, v17);
    v35 = v19;
    v34 = 2;
    v22 = sub_17242C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v17, &type metadata for OsInstallVariant, v22);
    v33 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v20, &v33, v17);
    v32 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v25, &v32, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v17);
}

void DeviceData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  unint64_t v18;
  int v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  BAEventReporter *v27;
  uint64_t v28;
  BAEventReporter *v29;
  BAEventReporter *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  BAEventReporter *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  int64_t v38;
  int64_t v39;
  id v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  BAEventReporter *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  BAEventReporter *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BAEventReporter *v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81;

  v5 = sub_71B4(&qword_2A30C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1723E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceData.CodingKeys, &type metadata for DeviceData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    BYTE2(v81) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v81 + 2, v5);
    v14 = v13;
    v76 = v12;
    BYTE1(v81) = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v81 + 1, v5);
    v77 = v16;
    v17 = v16;
    v74 = v15;
    v80 = 2;
    v18 = sub_172470();
    swift_bridgeObjectRetain(v17);
    v75 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v81, &type metadata for OsInstallVariant, &v80, v5, &type metadata for OsInstallVariant, v18);
    v19 = v81;
    v79 = 3;
    v71 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v5);
    v72 = v19;
    v78 = 4;
    v73 = v27;
    swift_bridgeObjectRetain(v27);
    v28 = KeyedDecodingContainer.decode(_:forKey:)(&v78, v5);
    v30 = v29;
    v31 = *(void (**)(char *, uint64_t))(v6 + 8);
    v32 = v28;
    v31(v8, v5);
    swift_bridgeObjectRetain(v14);
    v33 = v77;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v14, v34, v35, v36, v37, v38, v39, v40);
    swift_bridgeObjectRelease(v33, v41, v42, v43, v44, v45, v46, v47);
    *(_QWORD *)a2 = v76;
    *(_QWORD *)(a2 + 8) = v14;
    v48 = v73;
    *(_QWORD *)(a2 + 16) = v74;
    *(_QWORD *)(a2 + 24) = v33;
    *(_BYTE *)(a2 + 32) = v72;
    *(_QWORD *)(a2 + 40) = v71;
    *(_QWORD *)(a2 + 48) = v48;
    *(_QWORD *)(a2 + 56) = v32;
    *(_QWORD *)(a2 + 64) = v30;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v30, v49, v50, v51, v52, v53, v54, v55);
    swift_bridgeObjectRelease(v48, v56, v57, v58, v59, v60, v61, v62);
    swift_bridgeObjectRelease(v33, v63, v64, v65, v66, v67, v68, v69);
    swift_bridgeObjectRelease(v14, v20, v21, v22, v23, v24, v25, v26);
  }
}

void sub_1721C8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DeviceData.init(from:)(a1, a2);
}

uint64_t sub_1721DC(_QWORD *a1)
{
  return DeviceData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics10DeviceDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = a1[5];
  v10 = a1[6];
  v30 = a1[8];
  v31 = a1[7];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(unsigned __int8 *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 56);
  if (v4 == *(_QWORD *)a2 && v5 == v11
    || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v11, 0), result = 0, (v17 & 1) != 0))
  {
    if (v6 == v12 && v7 == v13
      || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0), result = 0, (v19 & 1) != 0))
    {
      v20 = 0x6C616E7265746E69;
      if (v8 == 1)
        v21 = 0x6C616E7265746E69;
      else
        v21 = 0x6C616E7265747865;
      if (v8)
        v22 = v21;
      else
        v22 = 0x6E776F6E6B6E75;
      if (v8)
        v23 = 0xE800000000000000;
      else
        v23 = 0xE700000000000000;
      if (v14 != 1)
        v20 = 0x6C616E7265747865;
      if (v14)
        v24 = v20;
      else
        v24 = 0x6E776F6E6B6E75;
      if (v14)
        v25 = 0xE800000000000000;
      else
        v25 = 0xE700000000000000;
      if (v22 == v24 && v23 == v25)
      {
        swift_bridgeObjectRelease_n(v23, 2);
      }
      else
      {
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v24, v25, 0);
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(v25);
        result = 0;
        if ((v26 & 1) == 0)
          return result;
      }
      if (v9 == v15 && v10 == v16
        || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v15, v16, 0), result = 0, (v27 & 1) != 0))
      {
        if (v31 == v29 && v30 == v28)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v31, v30, v29, v28, 0);
      }
    }
  }
  return result;
}

unint64_t sub_1723E8()
{
  unint64_t result;

  result = qword_2A30B8;
  if (!qword_2A30B8)
  {
    result = swift_getWitnessTable("\t4\a", &type metadata for DeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A30B8);
  }
  return result;
}

unint64_t sub_17242C()
{
  unint64_t result;

  result = qword_2A30C0;
  if (!qword_2A30C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OsInstallVariant, &type metadata for OsInstallVariant);
    atomic_store(result, (unint64_t *)&qword_2A30C0);
  }
  return result;
}

unint64_t sub_172470()
{
  unint64_t result;

  result = qword_2A30D0;
  if (!qword_2A30D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OsInstallVariant, &type metadata for OsInstallVariant);
    atomic_store(result, (unint64_t *)&qword_2A30D0);
  }
  return result;
}

unint64_t sub_1724B8()
{
  unint64_t result;

  result = qword_2A30D8;
  if (!qword_2A30D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeviceData, &type metadata for DeviceData);
    atomic_store(result, (unint64_t *)&qword_2A30D8);
  }
  return result;
}

unint64_t sub_172500()
{
  unint64_t result;

  result = qword_2A30E0;
  if (!qword_2A30E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeviceData, &type metadata for DeviceData);
    atomic_store(result, (unint64_t *)&qword_2A30E0);
  }
  return result;
}

uint64_t destroy for DeviceData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for DeviceData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for DeviceData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for DeviceData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

ValueMetadata *type metadata accessor for DeviceData()
{
  return &type metadata for DeviceData;
}

uint64_t storeEnumTagSinglePayload for DeviceData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_172764 + 4 * byte_20F89E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_172798 + 4 * byte_20F899[v4]))();
}

uint64_t sub_172798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1727A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1727A8);
  return result;
}

uint64_t sub_1727B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1727BCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1727C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1727C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceData.CodingKeys()
{
  return &type metadata for DeviceData.CodingKeys;
}

unint64_t sub_1727E8()
{
  unint64_t result;

  result = qword_2A30E8;
  if (!qword_2A30E8)
  {
    result = swift_getWitnessTable(byte_20FA18, &type metadata for DeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A30E8);
  }
  return result;
}

unint64_t sub_172830()
{
  unint64_t result;

  result = qword_2A30F0;
  if (!qword_2A30F0)
  {
    result = swift_getWitnessTable("y4\a", &type metadata for DeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A30F0);
  }
  return result;
}

unint64_t sub_172878()
{
  unint64_t result;

  result = qword_2A30F8;
  if (!qword_2A30F8)
  {
    result = swift_getWitnessTable("a4\a", &type metadata for DeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A30F8);
  }
  return result;
}

uint64_t sub_1728BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6F4D656369766564 && a2 == 0xEB000000006C6564)
  {
    v5 = 0xEB000000006C6564;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4D656369766564, 0xEB000000006C6564, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C50656369766564 && a2 == 0xEE006D726F667461)
  {
    v7 = 0xEE006D726F667461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C50656369766564, 0xEE006D726F667461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x8000000000222460;
    if (a2 == 0x8000000000222460)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222460, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL)
  {
    v9 = 0xE90000000000006ELL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6973726556736FLL, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x656C646E7542736FLL && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease(0xEF6E6F6973726556);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C646E7542736FLL, 0xEF6E6F6973726556, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t static UserEmbeddingData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_66B54(*a1, *a2);
}

uint64_t sub_172B48()
{
  return 0x7365727574616566;
}

uint64_t sub_172B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7365727574616566 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7365727574616566, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_172BF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_172D64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_172C1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_172D64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserEmbeddingData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_2A3100);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_172D64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserEmbeddingData.CodingKeys, &type metadata for UserEmbeddingData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_2A3110);
  v12 = sub_172EE8(&qword_2A3118, (uint64_t (*)(void))sub_F4E3C, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_172D64()
{
  unint64_t result;

  result = qword_2A3108;
  if (!qword_2A3108)
  {
    result = swift_getWitnessTable(byte_20FC38, &type metadata for UserEmbeddingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3108);
  }
  return result;
}

uint64_t UserEmbeddingData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A3120);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_172D64();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserEmbeddingData.CodingKeys, &type metadata for UserEmbeddingData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_2A3110);
    v13 = sub_172EE8(&qword_2A3128, (uint64_t (*)(void))sub_F4DF4, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_172EE8(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_2A3110);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_172F58@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return UserEmbeddingData.init(from:)(a1, a2);
}

uint64_t sub_172F6C(_QWORD *a1)
{
  return UserEmbeddingData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for UserEmbeddingData()
{
  return &type metadata for UserEmbeddingData;
}

uint64_t storeEnumTagSinglePayload for UserEmbeddingData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_172FD0 + 4 * byte_20FA90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_172FF0 + 4 * byte_20FA95[v4]))();
}

_BYTE *sub_172FD0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_172FF0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_172FF8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_173000(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_173008(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_173010(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UserEmbeddingData.CodingKeys()
{
  return &type metadata for UserEmbeddingData.CodingKeys;
}

unint64_t sub_173030()
{
  unint64_t result;

  result = qword_2A3130;
  if (!qword_2A3130)
  {
    result = swift_getWitnessTable("Q3\a", &type metadata for UserEmbeddingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3130);
  }
  return result;
}

unint64_t sub_173078()
{
  unint64_t result;

  result = qword_2A3138;
  if (!qword_2A3138)
  {
    result = swift_getWitnessTable(byte_20FB80, &type metadata for UserEmbeddingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3138);
  }
  return result;
}

unint64_t sub_1730C0()
{
  unint64_t result;

  result = qword_2A3140;
  if (!qword_2A3140)
  {
    result = swift_getWitnessTable(byte_20FBA8, &type metadata for UserEmbeddingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3140);
  }
  return result;
}

uint64_t sub_173104()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x646F43726F727265;
}

uint64_t sub_173148@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1736B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17316C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1734B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_173194(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1734B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ErrorData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_2A3148);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1734B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ErrorData.CodingKeys, &type metadata for ErrorData.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

void ErrorData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;

  v5 = sub_71B4(&qword_2A3158);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1734B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ErrorData.CodingKeys, &type metadata for ErrorData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v36 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
    v14 = v13;
    v35 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v17 = v16;
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19 = v15;
    v18(v8, v5);
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    a2[2] = v19;
    a2[3] = (uint64_t)v17;
    swift_bridgeObjectRetain(v17);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v17, v20, v21, v22, v23, v24, v25, v26);
    swift_bridgeObjectRelease(v14, v27, v28, v29, v30, v31, v32, v33);
  }
}

void sub_173490(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ErrorData.init(from:)(a1, a2);
}

uint64_t sub_1734A4(_QWORD *a1)
{
  return ErrorData.encode(to:)(a1);
}

unint64_t sub_1734B8()
{
  unint64_t result;

  result = qword_2A3150;
  if (!qword_2A3150)
  {
    result = swift_getWitnessTable(byte_20FE24, &type metadata for ErrorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3150);
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrorData()
{
  return &type metadata for ErrorData;
}

uint64_t storeEnumTagSinglePayload for ErrorData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_173560 + 4 * byte_20FC8D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_173594 + 4 * byte_20FC88[v4]))();
}

uint64_t sub_173594(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17359C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1735A4);
  return result;
}

uint64_t sub_1735B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1735B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1735BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1735C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ErrorData.CodingKeys()
{
  return &type metadata for ErrorData.CodingKeys;
}

unint64_t sub_1735E4()
{
  unint64_t result;

  result = qword_2A3160;
  if (!qword_2A3160)
  {
    result = swift_getWitnessTable("M3\a", &type metadata for ErrorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3160);
  }
  return result;
}

unint64_t sub_17362C()
{
  unint64_t result;

  result = qword_2A3168;
  if (!qword_2A3168)
  {
    result = swift_getWitnessTable("\r4\a", &type metadata for ErrorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3168);
  }
  return result;
}

unint64_t sub_173674()
{
  unint64_t result;

  result = qword_2A3170;
  if (!qword_2A3170)
  {
    result = swift_getWitnessTable(byte_20FD94, &type metadata for ErrorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3170);
  }
  return result;
}

uint64_t sub_1736B8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F43726F727265, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000000220800)
  {
    swift_bridgeObjectRelease(0x8000000000220800);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220800, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t OnDevicePersonalizationPropertyData.genrePreferenceAvailable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t OnDevicePersonalizationPropertyData.genrePreferenceAvailable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = result;
  return result;
}

uint64_t (*OnDevicePersonalizationPropertyData.genrePreferenceAvailable.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t OnDevicePersonalizationPropertyData.isReordered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t OnDevicePersonalizationPropertyData.isReordered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 19) = result;
  return result;
}

uint64_t (*OnDevicePersonalizationPropertyData.isReordered.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

BookAnalytics::OnDevicePersonalizationPropertyData __swiftcall OnDevicePersonalizationPropertyData.init(isEligible:lockedIn:isLocked:onDevicePersonalizationUserStatus:genrePreferenceAvailable:isReordered:lockedInCount:)(Swift::Bool isEligible, Swift::Double lockedIn, Swift::Bool isLocked, BookAnalytics::OnDevicePersonalizationUserStatus onDevicePersonalizationUserStatus, Swift::Bool_optional genrePreferenceAvailable, Swift::Bool_optional isReordered, Swift::Int32_optional lockedInCount)
{
  uint64_t v7;
  char v8;
  BookAnalytics::OnDevicePersonalizationPropertyData result;

  v8 = *(_BYTE *)onDevicePersonalizationUserStatus;
  *(_BYTE *)v7 = isEligible;
  *(Swift::Double *)(v7 + 8) = lockedIn;
  *(_BYTE *)(v7 + 16) = isLocked;
  *(_BYTE *)(v7 + 17) = v8;
  *(Swift::Bool_optional *)(v7 + 18) = genrePreferenceAvailable;
  *(Swift::Bool_optional *)(v7 + 19) = isReordered;
  *(_DWORD *)(v7 + 20) = lockedInCount.value;
  *(_BYTE *)(v7 + 24) = lockedInCount.is_nil;
  result.lockedIn = lockedIn;
  result.lockedInCount.is_nil = onDevicePersonalizationUserStatus;
  result.isLocked = isLocked;
  result.isEligible = isEligible;
  return result;
}

uint64_t sub_173820(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_173858 + 4 * byte_20FE80[a1]))(0x626967696C457369, 0xEA0000000000656CLL);
}

uint64_t sub_173858()
{
  return 0x6E4964656B636F6CLL;
}

uint64_t sub_1738F8()
{
  unsigned __int8 *v0;

  return sub_173820(*v0);
}

uint64_t sub_173900@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_174284(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_173924(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_173F60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17394C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_173F60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t OnDevicePersonalizationPropertyData.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v4 = sub_71B4(&qword_2A3178);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)v1;
  v9 = v1[1];
  v10 = *((unsigned __int8 *)v1 + 16);
  v28 = *((unsigned __int8 *)v1 + 17);
  v29 = v10;
  v11 = *((unsigned __int8 *)v1 + 18);
  v26 = *((unsigned __int8 *)v1 + 19);
  v27 = v11;
  v25 = *((unsigned int *)v1 + 5);
  v12 = *((_BYTE *)v1 + 24);
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1;
  v17 = v16;
  sub_7988(v15, v13);
  v18 = sub_173F60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OnDevicePersonalizationPropertyData.CodingKeys, &type metadata for OnDevicePersonalizationPropertyData.CodingKeys, v18, v13, v14);
  v38 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v38, v17);
  if (!v2)
  {
    v20 = v28;
    v19 = v29;
    v21 = v27;
    v37 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v17, v9);
    v36 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v36, v17);
    v35 = v20;
    v34 = 3;
    v22 = sub_173FA4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v17, &type metadata for OnDevicePersonalizationUserStatus, v22);
    v33 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, &v33, v17);
    v32 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, &v32, v17);
    v31 = 6;
    v30 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25 | ((unint64_t)v12 << 32), &v31, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v17);
}

uint64_t OnDevicePersonalizationPropertyData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  double v13;
  char v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v5 = sub_71B4(&qword_2A3190);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_173F60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OnDevicePersonalizationPropertyData.CodingKeys, &type metadata for OnDevicePersonalizationPropertyData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE3(v26) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v26 + 3, v5);
    BYTE2(v26) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v26 + 2, v5);
    BYTE1(v26) = 2;
    v14 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v26 + 1, v5);
    v25 = 3;
    v15 = sub_173FE8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v26, &type metadata for OnDevicePersonalizationUserStatus, &v25, v5, &type metadata for OnDevicePersonalizationUserStatus, v15);
    v21 = v26;
    v24 = 4;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
    v23 = 5;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v23, v5);
    v22 = 6;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v22, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v12 & 1;
    *(double *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v14 & 1;
    *(_BYTE *)(a2 + 17) = v21;
    *(_BYTE *)(a2 + 18) = v20;
    *(_BYTE *)(a2 + 19) = v19;
    *(_DWORD *)(a2 + 20) = v17;
    *(_BYTE *)(a2 + 24) = BYTE4(v17) & 1;
  }
  return sub_7DAC(a1);
}

uint64_t sub_173E20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OnDevicePersonalizationPropertyData.init(from:)(a1, a2);
}

uint64_t sub_173E34(_QWORD *a1)
{
  return OnDevicePersonalizationPropertyData.encode(to:)(a1);
}

BOOL _s13BookAnalytics35OnDevicePersonalizationPropertyDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 result;
  int v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;

  result = 0;
  if (*a1 == *a2 && *((double *)a1 + 1) == *((double *)a2 + 1) && ((a1[16] ^ a2[16]) & 1) == 0)
  {
    v4 = a1[18];
    v5 = a1[19];
    v6 = *((_DWORD *)a1 + 5);
    v7 = a1[24];
    v8 = a2[18];
    v9 = a2[19];
    v10 = *((_DWORD *)a2 + 5);
    v11 = a2[24];
    sub_26ABC(a1[17]);
    if ((v12 & 1) == 0)
      return 0;
    if (v4 == 2)
    {
      if (v8 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v8 == 2 || ((((v4 & 1) == 0) ^ v8) & 1) == 0)
        return result;
    }
    if (v5 == 2)
    {
      if (v9 != 2)
        return 0;
      goto LABEL_15;
    }
    result = 0;
    if (v9 != 2 && ((((v5 & 1) == 0) ^ v9) & 1) != 0)
    {
LABEL_15:
      if ((v7 & 1) == 0)
      {
        if (v6 == v10)
          v13 = v11;
        else
          v13 = 1;
        return (v13 & 1) == 0;
      }
      return (v11 & 1) != 0;
    }
  }
  return result;
}

unint64_t sub_173F60()
{
  unint64_t result;

  result = qword_2A3180;
  if (!qword_2A3180)
  {
    result = swift_getWitnessTable("i3\a", &type metadata for OnDevicePersonalizationPropertyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3180);
  }
  return result;
}

unint64_t sub_173FA4()
{
  unint64_t result;

  result = qword_2A3188;
  if (!qword_2A3188)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OnDevicePersonalizationUserStatus, &type metadata for OnDevicePersonalizationUserStatus);
    atomic_store(result, (unint64_t *)&qword_2A3188);
  }
  return result;
}

unint64_t sub_173FE8()
{
  unint64_t result;

  result = qword_2A3198;
  if (!qword_2A3198)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OnDevicePersonalizationUserStatus, &type metadata for OnDevicePersonalizationUserStatus);
    atomic_store(result, (unint64_t *)&qword_2A3198);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OnDevicePersonalizationPropertyData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[25])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDevicePersonalizationPropertyData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnDevicePersonalizationPropertyData()
{
  return &type metadata for OnDevicePersonalizationPropertyData;
}

uint64_t storeEnumTagSinglePayload for OnDevicePersonalizationPropertyData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_17412C + 4 * byte_20FE8C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_174160 + 4 * byte_20FE87[v4]))();
}

uint64_t sub_174160(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_174168(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x174170);
  return result;
}

uint64_t sub_17417C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x174184);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_174188(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_174190(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnDevicePersonalizationPropertyData.CodingKeys()
{
  return &type metadata for OnDevicePersonalizationPropertyData.CodingKeys;
}

unint64_t sub_1741B0()
{
  unint64_t result;

  result = qword_2A31A0;
  if (!qword_2A31A0)
  {
    result = swift_getWitnessTable(byte_210030, &type metadata for OnDevicePersonalizationPropertyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A31A0);
  }
  return result;
}

unint64_t sub_1741F8()
{
  unint64_t result;

  result = qword_2A31A8;
  if (!qword_2A31A8)
  {
    result = swift_getWitnessTable(byte_20FFA0, &type metadata for OnDevicePersonalizationPropertyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A31A8);
  }
  return result;
}

unint64_t sub_174240()
{
  unint64_t result;

  result = qword_2A31B0;
  if (!qword_2A31B0)
  {
    result = swift_getWitnessTable(byte_20FFC8, &type metadata for OnDevicePersonalizationPropertyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A31B0);
  }
  return result;
}

uint64_t sub_174284(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x626967696C457369 && a2 == 0xEA0000000000656CLL)
  {
    v5 = 0xEA0000000000656CLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x626967696C457369, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E4964656B636F6CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E4964656B636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x64656B636F4C7369 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656B636F4C7369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x8000000000222480)
  {
    v9 = 0x8000000000222480;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000000222480, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000018)
  {
    v10 = 0x80000000002224B0;
    if (a2 == 0x80000000002224B0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000002224B0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x6564726F65527369 && a2 == 0xEB00000000646572)
  {
    v11 = 0xEB00000000646572;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6564726F65527369, 0xEB00000000646572, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x6E4964656B636F6CLL && a2 == 0xED0000746E756F43)
  {
    swift_bridgeObjectRelease(0xED0000746E756F43);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E4964656B636F6CLL, 0xED0000746E756F43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void __swiftcall ThemesData.init(previousThemeName:themeName:isCustomized:)(BookAnalytics::ThemesData *__return_ptr retstr, Swift::String_optional previousThemeName, Swift::String themeName, Swift::Bool_optional isCustomized)
{
  retstr->previousThemeName = previousThemeName;
  retstr->themeName = themeName;
  retstr->isCustomized = isCustomized;
}

unint64_t sub_1745A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6D614E656D656874;
  if (*v0 != 1)
    v1 = 0x6D6F747375437369;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_174614@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_174E94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_174638(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_174B04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_174660(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_174B04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ThemesData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char v22;
  char v23;

  v3 = sub_71B4(&qword_2A31B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v17 = v1[3];
  v18 = v9;
  v20 = *((unsigned __int8 *)v1 + 32);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_174B04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ThemesData.CodingKeys, &type metadata for ThemesData.CodingKeys, v12, v10, v11);
  v23 = 0;
  v13 = v19;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v7, &v23, v3);
  if (!v13)
  {
    v14 = v20;
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v17, &v22, v3);
    v21 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, &v21, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void ThemesData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  uint64_t v29;
  BAEventReporter *v30;
  BAEventReporter *v31;
  char v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;

  v5 = sub_71B4(&qword_2A31C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_174B04();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ThemesData.CodingKeys, &type metadata for ThemesData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v44 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
    v28 = v27;
    v41 = v12;
    v43 = 1;
    swift_bridgeObjectRetain(v27);
    v29 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5);
    v31 = v30;
    v40 = v29;
    v42 = 2;
    swift_bridgeObjectRetain(v30);
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v41;
    *(_QWORD *)(a2 + 8) = v28;
    *(_QWORD *)(a2 + 16) = v40;
    *(_QWORD *)(a2 + 24) = v31;
    *(_BYTE *)(a2 + 32) = v32;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v31, v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(v28, v20, v21, v22, v23, v24, v25, v26);
  }
}

void sub_1749F8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ThemesData.init(from:)(a1, a2);
}

uint64_t sub_174A0C(_QWORD *a1)
{
  return ThemesData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics10ThemesDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t result;
  char v16;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *((unsigned __int8 *)a1 + 32);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(unsigned __int8 *)(a2 + 32);
  if (!v3)
  {
    if (!v7)
      goto LABEL_10;
    return 0;
  }
  if (!v7)
    return 0;
  v11 = *a1;
  v12 = v11 == *(_QWORD *)a2 && v3 == v7;
  if (v12
    || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v3, *(_QWORD *)a2, v7, 0), result = 0, (v13 & 1) != 0))
  {
LABEL_10:
    if (v4 != v8 || v5 != v9)
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v8, v9, 0);
      result = 0;
      if ((v16 & 1) == 0)
        return result;
    }
    if (v6 == 2)
    {
      if (v10 != 2)
        return 0;
    }
    else if (v10 == 2 || ((((v6 & 1) == 0) ^ v10) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_174B04()
{
  unint64_t result;

  result = qword_2A31C0;
  if (!qword_2A31C0)
  {
    result = swift_getWitnessTable("i3\a", &type metadata for ThemesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A31C0);
  }
  return result;
}

uint64_t initializeWithCopy for ThemesData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ThemesData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ThemesData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemesData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ThemesData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ThemesData()
{
  return &type metadata for ThemesData;
}

uint64_t storeEnumTagSinglePayload for ThemesData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_174D3C + 4 * byte_2100AD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_174D70 + 4 * byte_2100A8[v4]))();
}

uint64_t sub_174D70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_174D78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x174D80);
  return result;
}

uint64_t sub_174D8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x174D94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_174D98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_174DA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemesData.CodingKeys()
{
  return &type metadata for ThemesData.CodingKeys;
}

unint64_t sub_174DC0()
{
  unint64_t result;

  result = qword_2A31D0;
  if (!qword_2A31D0)
  {
    result = swift_getWitnessTable(byte_210220, &type metadata for ThemesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A31D0);
  }
  return result;
}

unint64_t sub_174E08()
{
  unint64_t result;

  result = qword_2A31D8;
  if (!qword_2A31D8)
  {
    result = swift_getWitnessTable(byte_210190, &type metadata for ThemesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A31D8);
  }
  return result;
}

unint64_t sub_174E50()
{
  unint64_t result;

  result = qword_2A31E0;
  if (!qword_2A31E0)
  {
    result = swift_getWitnessTable(byte_2101B8, &type metadata for ThemesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A31E0);
  }
  return result;
}

uint64_t sub_174E94(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000000002224D0;
    if (a2 == 0x80000000002224D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000002224D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6D614E656D656874 && a2 == 0xE900000000000065)
  {
    v6 = 0xE900000000000065;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E656D656874, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6D6F747375437369 && a2 == 0xEC00000064657A69)
  {
    swift_bridgeObjectRelease(0xEC00000064657A69);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D6F747375437369, 0xEC00000064657A69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_175008(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A31E8, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingFontSizeChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B10, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A31E8, a1);
}

uint64_t sub_175048(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A3200, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingFontSizeChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B18, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3200, a1);
}

uint64_t ReadingFontSizeChangeEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingFontSizeChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A32A0, (uint64_t)&nominal type descriptor for ReadingFontSizeChangeEvent);
}

uint64_t ReadingFontSizeChangeEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingFontSizeChangeEvent.contentData.modify())()
{
  type metadata accessor for ReadingFontSizeChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingFontSizeChangeEvent.fontSizeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A3218);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingFontSizeChangeEvent.fontSizeData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A3218);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingFontSizeChangeEvent.fontSizeData.modify())()
{
  type metadata accessor for ReadingFontSizeChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingFontSizeChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingFontSizeChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingFontSizeChangeEvent.eventData.modify())()
{
  type metadata accessor for ReadingFontSizeChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingFontSizeChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ReadingFontSizeChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_2A3218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

float ReadingFontSizeChangeEvent.Model.fontSizeData.getter@<S0>(float *a1@<X8>)
{
  uint64_t v1;
  float result;

  result = *(float *)(v1 + 112);
  *a1 = result;
  return result;
}

uint64_t ReadingFontSizeChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingFontSizeChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A3340, (uint64_t)&nominal type descriptor for ReadingFontSizeChangeEvent.Model);
}

uint64_t ReadingFontSizeChangeEvent.Model.init(readingSessionData:contentData:fontSizeData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 12);
  v11 = *((_BYTE *)a1 + 13);
  v12 = *((_BYTE *)a1 + 14);
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v18 = a2[5];
  v17 = a2[6];
  v19 = *((_WORD *)a2 + 28);
  v20 = *((_DWORD *)a2 + 15);
  v21 = *((_BYTE *)a2 + 64);
  v22 = *((_DWORD *)a2 + 17);
  v23 = *((_BYTE *)a2 + 72);
  v24 = *((_BYTE *)a2 + 77);
  v25 = *a3;
  *(_DWORD *)a5 = v7;
  *(_BYTE *)(a5 + 4) = v8;
  *(_DWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 12) = v10;
  *(_BYTE *)(a5 + 13) = v11;
  *(_BYTE *)(a5 + 14) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v17;
  *(_WORD *)(a5 + 72) = v19;
  *(_DWORD *)(a5 + 76) = v20;
  *(_BYTE *)(a5 + 80) = v21;
  *(_DWORD *)(a5 + 84) = v22;
  *(_BYTE *)(a5 + 88) = v23;
  *(_DWORD *)(a5 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a5 + 93) = v24;
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a2 + 5);
  *(_DWORD *)(a5 + 112) = v25;
  v26 = a5 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_175510()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_175544 + 4 * byte_2102A0[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_175544()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_175564()
{
  return 0x657A6953746E6F66;
}

uint64_t sub_175584()
{
  return 0x746144746E657665;
}

uint64_t sub_1755A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_176F90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1755C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_175878();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1755EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_175878();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingFontSizeChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;
  char v50;

  v3 = v1;
  v5 = sub_71B4(&qword_2A3220);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_175878();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys, &type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v36) = *(_DWORD *)v3;
  BYTE4(v36) = v12;
  LODWORD(v37) = v13;
  BYTE4(v37) = v14;
  BYTE5(v37) = v15;
  BYTE6(v37) = v16;
  v50 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    v36 = *(_QWORD *)(v3 + 16);
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = v22;
    v42 = v23;
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v47 = *(_DWORD *)(v3 + 89);
    v48 = v28;
    v49 = *(_OWORD *)(v3 + 96);
    v50 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ContentData, v29);
    LODWORD(v36) = *(_DWORD *)(v3 + 112);
    v50 = 2;
    v30 = sub_1758BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for FontSizeData, v30);
    v31 = v3 + *(int *)(type metadata accessor for ReadingFontSizeChangeEvent.Model(0) + 28);
    LOBYTE(v36) = 3;
    v32 = type metadata accessor for EventData(0);
    v33 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v36, v5, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_175878()
{
  unint64_t result;

  result = qword_2A3228;
  if (!qword_2A3228)
  {
    result = swift_getWitnessTable(byte_21048C, &type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3228);
  }
  return result;
}

unint64_t sub_1758BC()
{
  unint64_t result;

  result = qword_2A3230;
  if (!qword_2A3230)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FontSizeData, &type metadata for FontSizeData);
    atomic_store(result, (unint64_t *)&qword_2A3230);
  }
  return result;
}

void ReadingFontSizeChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_2A3238);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingFontSizeChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_175878();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys, &type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v47 = v9;
    v16 = v6;
    v17 = v11;
    v18 = v5;
    v53 = v3;
    v19 = v49;
    v70 = 0;
    v20 = sub_71AEC();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ReadingSessionData, &v70, v51, &type metadata for ReadingSessionData, v20);
    v23 = BYTE4(v54);
    v24 = v55;
    v25 = BYTE4(v55);
    v26 = BYTE5(v55);
    v27 = BYTE6(v55);
    v28 = (uint64_t)v17;
    *(_DWORD *)v17 = v54;
    v17[4] = v23;
    *((_DWORD *)v17 + 2) = v24;
    v17[12] = v25;
    v17[13] = v26;
    v17[14] = v27;
    v70 = 1;
    v29 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v70, v22, &type metadata for ContentData, v29);
    v30 = v55;
    v31 = v56;
    v32 = v57;
    v33 = v58;
    v35 = v59;
    v34 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v63;
    v39 = v64;
    v40 = v65;
    v41 = v67;
    v43 = v68;
    v42 = v69;
    *(_QWORD *)(v28 + 16) = v54;
    *(_QWORD *)(v28 + 24) = v30;
    *(_BYTE *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v32;
    *(_QWORD *)(v28 + 48) = v33;
    *(_QWORD *)(v28 + 56) = v35;
    *(_QWORD *)(v28 + 64) = v34;
    v46[0] = v34;
    v46[1] = v42;
    *(_WORD *)(v28 + 72) = v36;
    *(_DWORD *)(v28 + 76) = v37;
    *(_BYTE *)(v28 + 80) = v38;
    *(_DWORD *)(v28 + 84) = v39;
    *(_BYTE *)(v28 + 88) = v40;
    *(_DWORD *)(v28 + 89) = v66;
    *(_BYTE *)(v28 + 93) = v41;
    *(_QWORD *)(v28 + 96) = v43;
    *(_QWORD *)(v28 + 104) = v42;
    v70 = 2;
    v44 = sub_175CAC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for FontSizeData, &v70, v22, &type metadata for FontSizeData, v44);
    *(_DWORD *)(v28 + 112) = v54;
    LOBYTE(v54) = 3;
    v45 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, &v54, v22, v19, v45);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v53 + 32))(v28 + *(int *)(v47 + 28), v18, v19);
    sub_175CF0(v28, v48);
    sub_7DAC(v52);
    sub_175D34(v28);
  }
}

unint64_t sub_175CAC()
{
  unint64_t result;

  result = qword_2A3240;
  if (!qword_2A3240)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FontSizeData, &type metadata for FontSizeData);
    atomic_store(result, (unint64_t *)&qword_2A3240);
  }
  return result;
}

uint64_t sub_175CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingFontSizeChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_175D34(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingFontSizeChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_175D70(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingFontSizeChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_175D84(_QWORD *a1)
{
  return ReadingFontSizeChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_175D98@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B10, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A31E8, (uint64_t)sub_175008, a1);
}

uint64_t sub_175DBC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B18, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3200, (uint64_t)sub_175048, a1);
}

uint64_t sub_175DE0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_2A3218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingFontSizeChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A3218);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ReadingFontSizeChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A3218);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ReadingFontSizeChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A3218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ReadingFontSizeChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A3218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ReadingFontSizeChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A3218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReadingFontSizeChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A3218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingFontSizeChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_176448);
}

uint64_t sub_176448(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A3218);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingFontSizeChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_176520);
}

uint64_t sub_176520(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A3218);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1765F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2A32B0, (uint64_t (*)(void))sub_175CAC, (uint64_t (*)(void))sub_1758BC, (uint64_t)&type metadata for FontSizeData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadingFontSizeChangeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 7) = *(uint64_t *)((char *)a2 + 7);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v6;
    v7 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v7;
    *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)a2 + 89);
    *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
    v8 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v8;
    v9 = *(int *)(a3 + 28);
    v10 = (uint64_t)a2 + v9;
    v11 = a1 + v9;
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    v12 = type metadata accessor for EventData(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t initializeWithCopy for ReadingFontSizeChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = a2 + v8;
  v10 = a1 + v8;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v11 = type metadata accessor for EventData(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v10, v9, v11);
  return a1;
}

uint64_t assignWithCopy for ReadingFontSizeChangeEvent.Model(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v14 = a2[19];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v14;
  v15 = a2[21];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_DWORD *)(a1 + 84) = v15;
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v16 = *((_QWORD *)a2 + 13);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_DWORD *)(a1 + 112) = a2[28];
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = (uint64_t)a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

uint64_t initializeWithTake for ReadingFontSizeChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

uint64_t assignWithTake for ReadingFontSizeChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingFontSizeChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_176C64);
}

uint64_t sub_176C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingFontSizeChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_176CEC);
}

uint64_t sub_176CEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_176D60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_210398;
  v4[1] = &unk_2103B0;
  v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingFontSizeChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_176E38 + 4 * byte_2102A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_176E6C + 4 * byte_2102A4[v4]))();
}

uint64_t sub_176E6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_176E74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x176E7CLL);
  return result;
}

uint64_t sub_176E88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x176E90);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_176E94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_176E9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingFontSizeChangeEvent.Model.CodingKeys()
{
  return &type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys;
}

unint64_t sub_176EBC()
{
  unint64_t result;

  result = qword_2A3380;
  if (!qword_2A3380)
  {
    result = swift_getWitnessTable(byte_210464, &type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3380);
  }
  return result;
}

unint64_t sub_176F04()
{
  unint64_t result;

  result = qword_2A3388;
  if (!qword_2A3388)
  {
    result = swift_getWitnessTable(byte_2103D4, &type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3388);
  }
  return result;
}

unint64_t sub_176F4C()
{
  unint64_t result;

  result = qword_2A3390;
  if (!qword_2A3390)
  {
    result = swift_getWitnessTable(byte_2103FC, &type metadata for ReadingFontSizeChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3390);
  }
  return result;
}

uint64_t sub_176F90(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x657A6953746E6F66 && a2 == 0xEC00000061746144)
  {
    v7 = 0xEC00000061746144;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953746E6F66, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_177180(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A3398, &enum case for SessionGroup.default(_:));
}

uint64_t static ShareEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B20, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3398, a1);
}

uint64_t sub_1771C0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A33B0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ShareEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B28, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A33B0, a1);
}

uint64_t ShareEvent.shareContextData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareEvent(0) + 20);
  v4 = sub_71B4(&qword_2A33C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShareEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A3440, (uint64_t)&nominal type descriptor for ShareEvent);
}

uint64_t ShareEvent.shareContextData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareEvent(0) + 20);
  v4 = sub_71B4(&qword_2A33C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ShareEvent.shareContextData.modify())()
{
  type metadata accessor for ShareEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ShareEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ShareEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ShareEvent.eventData.modify())()
{
  type metadata accessor for ShareEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ShareEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ShareEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2A33C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
}

uint64_t ShareEvent.Model.shareContextData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 104);
  *a1 = *(_QWORD *)(v1 + 96);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t ShareEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShareEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A34E0, (uint64_t)&nominal type descriptor for ShareEvent.Model);
}

uint64_t ShareEvent.Model.init(contentData:shareContextData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  v16 = *a2;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 96) = v16;
  v17 = a4 + *(int *)(type metadata accessor for ShareEvent.Model(0) + 24);
  v18 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a3, v18);
}

uint64_t sub_177574()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_1775E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_178CBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_177604(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_177850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17762C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_177850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShareEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  __int128 v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;
  char v41;
  int v42;
  char v43;
  __int128 v44;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A33D0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_177850();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareEvent.Model.CodingKeys, &type metadata for ShareEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v32 = *(_QWORD *)v4;
  *((_QWORD *)&v32 + 1) = v13;
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v40 = v21;
  v41 = v22;
  v42 = *(_DWORD *)(v4 + 73);
  v43 = v23;
  v44 = *(_OWORD *)(v4 + 80);
  v31 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v31, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v32 = *(_OWORD *)(v4 + 96);
    v31 = 1;
    v25 = sub_10C6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v32, &v31, v6, &type metadata for ShareContextData, v25);
    v26 = v4 + *(int *)(type metadata accessor for ShareEvent.Model(0) + 24);
    LOBYTE(v32) = 2;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v32, v6, v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_177850()
{
  unint64_t result;

  result = qword_2A33D8;
  if (!qword_2A33D8)
  {
    result = swift_getWitnessTable(byte_2106AC, &type metadata for ShareEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A33D8);
  }
  return result;
}

void ShareEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  __int128 v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  int v50;
  char v51;
  int v52;
  char v53;
  __int128 v54;
  char v55;

  v36 = a2;
  v37 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v5 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_71B4(&qword_2A33E0);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ShareEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v40 = a1;
  sub_7988(a1, v12);
  v14 = sub_177850();
  v38 = v8;
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShareEvent.Model.CodingKeys, &type metadata for ShareEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v40);
  }
  else
  {
    v35 = v9;
    v41 = v5;
    v16 = v37;
    v55 = 0;
    v17 = sub_1779C();
    v19 = v38;
    v18 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for ContentData, &v55, v39, &type metadata for ContentData, v17);
    v20 = *((_QWORD *)&v42 + 1);
    v21 = v43;
    v22 = v44;
    v23 = v45;
    v24 = v46;
    v25 = v47;
    v26 = v48;
    v27 = v49;
    v28 = v50;
    v29 = v51;
    v30 = v53;
    *(_QWORD *)v11 = v42;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = v52;
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v54;
    v55 = 1;
    v31 = sub_10C69C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v42, &type metadata for ShareContextData, &v55, v18, &type metadata for ShareContextData, v31);
    *((_OWORD *)v11 + 6) = v42;
    LOBYTE(v42) = 2;
    v32 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v33 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v16, &v42, v18, v16, v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v35 + 24)], v33, v16);
    sub_177BE0((uint64_t)v11, v36);
    sub_7DAC(v40);
    sub_177C24((uint64_t)v11);
  }
}

uint64_t sub_177BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_177C24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShareEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_177C60(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ShareEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_177C74(_QWORD *a1)
{
  return ShareEvent.Model.encode(to:)(a1);
}

uint64_t sub_177C88@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B20, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3398, (uint64_t)sub_177180, a1);
}

uint64_t sub_177CAC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B28, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A33B0, (uint64_t)sub_1771C0, a1);
}

uint64_t sub_177CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_2A33C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for ShareEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A33C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ShareEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_2A33C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ShareEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A33C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ShareEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A33C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ShareEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A33C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ShareEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A33C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_178208);
}

uint64_t sub_178208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A33C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ShareEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1782B8);
}

uint64_t sub_1782B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A33C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_178364(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A3450, (uint64_t (*)(void))sub_10C69C, (uint64_t (*)(void))sub_10C6E4, (uint64_t)&type metadata for ShareContextData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ShareEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v16);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    v10 = a2[13];
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t)a2 + v11;
    v13 = a1 + v11;
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v10;
    v14 = type metadata accessor for EventData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15(v13, v12, v14);
  }
  return v3;
}

uint64_t destroy for ShareEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ShareEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(int *)(a3 + 24);
  v11 = a2 + v10;
  v12 = a1 + v10;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14(v12, v11, v13);
  return a1;
}

uint64_t assignWithCopy for ShareEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *initializeWithTake for ShareEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  a1[6] = a2[6];
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ShareEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1789A0);
}

uint64_t sub_1789A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShareEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_178A28);
}

uint64_t sub_178A28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_178A9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_2105D0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ShareEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_178B64 + 4 * byte_2104E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_178B98 + 4 * byte_2104E0[v4]))();
}

uint64_t sub_178B98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_178BA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x178BA8);
  return result;
}

uint64_t sub_178BB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x178BBCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_178BC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_178BC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareEvent.Model.CodingKeys()
{
  return &type metadata for ShareEvent.Model.CodingKeys;
}

unint64_t sub_178BE8()
{
  unint64_t result;

  result = qword_2A3520;
  if (!qword_2A3520)
  {
    result = swift_getWitnessTable(byte_210684, &type metadata for ShareEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3520);
  }
  return result;
}

unint64_t sub_178C30()
{
  unint64_t result;

  result = qword_2A3528;
  if (!qword_2A3528)
  {
    result = swift_getWitnessTable("%2\a", &type metadata for ShareEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3528);
  }
  return result;
}

unint64_t sub_178C78()
{
  unint64_t result;

  result = qword_2A3530;
  if (!qword_2A3530)
  {
    result = swift_getWitnessTable("\r2\a", &type metadata for ShareEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3530);
  }
  return result;
}

uint64_t sub_178CBC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000000002224F0;
    if (a2 == 0x80000000002224F0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002224F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_178E2C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A3538, &enum case for SessionGroup.default(_:));
}

uint64_t static PurchaseAttemptEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B30, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3538, a1);
}

uint64_t sub_178E6C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A3550, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PurchaseAttemptEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B38, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3550, a1);
}

uint64_t PurchaseAttemptEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PurchaseAttemptEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A35D8, (uint64_t)&nominal type descriptor for PurchaseAttemptEvent);
}

uint64_t PurchaseAttemptEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.contentData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.contentStoreData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.contentExposureData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.prevAltContentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 32);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.prevAltContentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 32);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.prevAltContentExposureData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.purchaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 36);
  v4 = sub_71B4(&qword_2984E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.purchaseData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 36);
  v4 = sub_71B4(&qword_2984E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.purchaseData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 40);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 40);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.upSellData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.seriesData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 48);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 48);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.suggestionData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 52);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.uppParentContentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 52);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.uppParentContentData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 56);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseAttemptEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent(0) + 56);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseAttemptEvent.eventData.modify())()
{
  type metadata accessor for PurchaseAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseAttemptEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PurchaseAttemptEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v6, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v2, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
  v24 = a1 + v4[14];
  v25 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v6, v25);
}

uint64_t PurchaseAttemptEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseAttemptEvent.Model(0) + 56);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PurchaseAttemptEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A3690, (uint64_t)&nominal type descriptor for PurchaseAttemptEvent.Model);
}

uint64_t PurchaseAttemptEvent.Model.init(altContentTypeExposureData:contentData:contentStoreData:contentExposureData:prevAltContentExposureData:purchaseData:upSellData:seriesData:suggestionData:uppParentContentData:eventData:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10, uint64_t a11, uint64_t a12)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = *((_BYTE *)a1 + 56);
  *(_QWORD *)(a9 + 48) = *((_QWORD *)a1 + 6);
  *(_BYTE *)(a9 + 56) = v15;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a9 + 64) = *(_QWORD *)a2;
  *(_QWORD *)(a9 + 72) = v16;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a9 + 104) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a9 + 112) = v17;
  v18 = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a9 + 120) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a9 + 124) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a9 + 132) = *(_DWORD *)(a2 + 68);
  v19 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)a9 = v12;
  *(_OWORD *)(a9 + 16) = v13;
  *(_OWORD *)(a9 + 32) = v14;
  *(_OWORD *)(a9 + 88) = v18;
  *(_BYTE *)(a9 + 136) = v19;
  *(_DWORD *)(a9 + 137) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a9 + 141) = *(_BYTE *)(a2 + 77);
  v20 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a9 + 228) = *((_BYTE *)a3 + 68);
  v21 = *a3;
  v22 = a3[1];
  v23 = a3[2];
  v24 = a3[3];
  *(_DWORD *)(a9 + 224) = *((_DWORD *)a3 + 16);
  *(_WORD *)(a9 + 348) = *((_WORD *)a4 + 58);
  v25 = *a4;
  v26 = a4[1];
  v27 = a4[2];
  v28 = a4[3];
  v29 = a4[4];
  v30 = a4[5];
  v31 = a4[6];
  LOWORD(v17) = *a5;
  *(_DWORD *)(a9 + 344) = *((_DWORD *)a4 + 28);
  *(_WORD *)(a9 + 350) = v17;
  v32 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a9 + 352) = *(_QWORD *)a6;
  *(_QWORD *)(a9 + 360) = v32;
  *(_BYTE *)(a9 + 368) = *(_BYTE *)(a6 + 16);
  *(_BYTE *)(a9 + 369) = *(_BYTE *)(a6 + 17);
  v33 = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a9 + 376) = *(_QWORD *)(a6 + 24);
  *(_QWORD *)(a9 + 384) = v33;
  v34 = *a7;
  *(_QWORD *)(a9 + 408) = *((_QWORD *)a7 + 2);
  *(_OWORD *)(a9 + 264) = v27;
  *(_OWORD *)(a9 + 280) = v28;
  *(_OWORD *)(a9 + 296) = v29;
  *(_OWORD *)(a9 + 312) = v30;
  *(_OWORD *)(a9 + 328) = v31;
  *(_OWORD *)(a9 + 392) = v34;
  v35 = *(_OWORD *)(a11 + 16);
  v36 = *(_OWORD *)(a11 + 32);
  *(_OWORD *)(a9 + 472) = *(_OWORD *)a11;
  *(_OWORD *)(a9 + 488) = v35;
  *(_OWORD *)(a9 + 504) = v36;
  v37 = *a8;
  v38 = a8[1];
  v39 = a8[2];
  *(_BYTE *)(a9 + 464) = *a10;
  *(_BYTE *)(a9 + 520) = *(_BYTE *)(a11 + 48);
  *(_OWORD *)(a9 + 144) = v20;
  *(_OWORD *)(a9 + 160) = v21;
  *(_OWORD *)(a9 + 176) = v22;
  *(_OWORD *)(a9 + 192) = v23;
  *(_OWORD *)(a9 + 208) = v24;
  *(_OWORD *)(a9 + 232) = v25;
  *(_OWORD *)(a9 + 248) = v26;
  *(_OWORD *)(a9 + 416) = v37;
  *(_OWORD *)(a9 + 432) = v38;
  *(_OWORD *)(a9 + 448) = v39;
  v40 = a9 + *(int *)(type metadata accessor for PurchaseAttemptEvent.Model(0) + 56);
  v41 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v40, a12, v41);
}

uint64_t sub_179A54(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_179A8C + 4 * byte_210700[a1]))(0xD00000000000001ALL, 0x800000000021F1E0);
}

uint64_t sub_179A8C()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_179AAC(uint64_t a1)
{
  return a1 - 10;
}

uint64_t sub_179B3C()
{
  return 0x746144746E657665;
}

uint64_t sub_179B58()
{
  return 0x6974736567677573;
}

uint64_t sub_179B7C()
{
  unsigned __int8 *v0;

  return sub_179A54(*v0);
}

uint64_t sub_179B84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17A068();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_179BAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17A068();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PurchaseAttemptEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  int v33;
  __int16 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v58;
  _BYTE v59[32];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int16 v65;
  char v66;

  v3 = v1;
  v5 = sub_71B4(&qword_2A3568);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v59[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_17A068();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PurchaseAttemptEvent.Model.CodingKeys, &type metadata for PurchaseAttemptEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 6);
  v13 = *((_BYTE *)v3 + 56);
  v14 = v3[1];
  v58 = *v3;
  *(_OWORD *)v59 = v14;
  *(_OWORD *)&v59[16] = v3[2];
  *(_QWORD *)&v60 = v12;
  BYTE8(v60) = v13;
  v66 = 0;
  v15 = sub_568D8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for AltContentTypeExposureData, v15);
  if (!v2)
  {
    v16 = *((_QWORD *)v3 + 9);
    v17 = *((_BYTE *)v3 + 80);
    v18 = *(__int128 *)((char *)v3 + 88);
    v19 = *((_QWORD *)v3 + 13);
    v20 = *((_QWORD *)v3 + 14);
    v21 = *((_WORD *)v3 + 60);
    v22 = *((_DWORD *)v3 + 31);
    v23 = *((_BYTE *)v3 + 128);
    v24 = *((_DWORD *)v3 + 33);
    v25 = *((_BYTE *)v3 + 136);
    v26 = *((unsigned __int8 *)v3 + 141);
    *(_QWORD *)&v58 = *((_QWORD *)v3 + 8);
    *((_QWORD *)&v58 + 1) = v16;
    v59[0] = v17;
    *(_OWORD *)&v59[8] = v18;
    *(_QWORD *)&v59[24] = v19;
    *(_QWORD *)&v60 = v20;
    WORD4(v60) = v21;
    HIDWORD(v60) = v22;
    LOBYTE(v61) = v23;
    DWORD1(v61) = v24;
    BYTE8(v61) = v25;
    *(_DWORD *)((char *)&v61 + 9) = *(_DWORD *)((char *)v3 + 137);
    BYTE13(v61) = v26;
    v62 = v3[9];
    v66 = 1;
    v27 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v58, &v66, v5, &type metadata for ContentData, v27);
    v28 = *((_DWORD *)v3 + 56);
    v29 = *((_BYTE *)v3 + 228);
    v30 = v3[11];
    v58 = v3[10];
    *(_OWORD *)v59 = v30;
    v31 = v3[13];
    *(_OWORD *)&v59[16] = v3[12];
    v60 = v31;
    BYTE4(v61) = v29;
    LODWORD(v61) = v28;
    v66 = 2;
    v32 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for ContentStoreData, v32);
    v33 = *((_DWORD *)v3 + 86);
    v34 = *((_WORD *)v3 + 174);
    v35 = *(__int128 *)((char *)v3 + 248);
    v58 = *(__int128 *)((char *)v3 + 232);
    *(_OWORD *)v59 = v35;
    v36 = *(__int128 *)((char *)v3 + 280);
    *(_OWORD *)&v59[16] = *(__int128 *)((char *)v3 + 264);
    v60 = v36;
    v37 = *(__int128 *)((char *)v3 + 312);
    v61 = *(__int128 *)((char *)v3 + 296);
    v62 = v37;
    v63 = *(__int128 *)((char *)v3 + 328);
    v65 = v34;
    v64 = v33;
    v66 = 3;
    v38 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for ContentExposureData, v38);
    LOWORD(v58) = *((_WORD *)v3 + 175);
    v66 = 4;
    v39 = sub_569A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for PrevAltContentExposureData, v39);
    v40 = *((_QWORD *)v3 + 45);
    v41 = *((_BYTE *)v3 + 368);
    v42 = *((_BYTE *)v3 + 369);
    v43 = *((_QWORD *)v3 + 47);
    v44 = *((_QWORD *)v3 + 48);
    *(_QWORD *)&v58 = *((_QWORD *)v3 + 44);
    *((_QWORD *)&v58 + 1) = v40;
    v59[0] = v41;
    v59[1] = v42;
    *(_QWORD *)&v59[8] = v43;
    *(_QWORD *)&v59[16] = v44;
    v66 = 5;
    v45 = sub_34104();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v58, &v66, v5, &type metadata for PurchaseData, v45);
    v46 = *((_QWORD *)v3 + 51);
    v58 = *(__int128 *)((char *)v3 + 392);
    *(_QWORD *)v59 = v46;
    v66 = 6;
    v47 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for UpSellData, v47);
    v48 = v3[27];
    v58 = v3[26];
    *(_OWORD *)v59 = v48;
    *(_OWORD *)&v59[16] = v3[28];
    v66 = 7;
    v49 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for SeriesData, v49);
    LOBYTE(v58) = *((_BYTE *)v3 + 464);
    v66 = 8;
    v50 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for SuggestionData, v50);
    v51 = *((_BYTE *)v3 + 520);
    v52 = *(__int128 *)((char *)v3 + 488);
    v58 = *(__int128 *)((char *)v3 + 472);
    *(_OWORD *)v59 = v52;
    *(_OWORD *)&v59[16] = *(__int128 *)((char *)v3 + 504);
    LOBYTE(v60) = v51;
    v66 = 9;
    v53 = sub_569E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for UppParentContentData, v53);
    v54 = (uint64_t)v3 + *(int *)(type metadata accessor for PurchaseAttemptEvent.Model(0) + 56);
    LOBYTE(v58) = 10;
    v55 = type metadata accessor for EventData(0);
    v56 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v54, &v58, v5, v55, v56);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_17A068()
{
  unint64_t result;

  result = qword_2A3570;
  if (!qword_2A3570)
  {
    result = swift_getWitnessTable(byte_210A04, &type metadata for PurchaseAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3570);
  }
  return result;
}

void PurchaseAttemptEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  int64_t v25;
  int64_t v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  BAEventReporter *v40;
  int v41;
  BAEventReporter *v42;
  BAEventReporter *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  BAEventReporter *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  int64_t v56;
  int64_t v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  BAEventReporter *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  char v85;
  int v86;
  char v87;
  char v88;
  unint64_t v89;
  int v90;
  char v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  int v95;
  __int16 v96;
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  __int128 v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  char v115;
  __int128 v116;
  _OWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  _OWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  __int128 v130;
  _BYTE v131[32];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  __int16 v137;
  int v138;
  char v139;

  v122 = a2;
  v124 = type metadata accessor for EventData(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v5 = (uint64_t *)((char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126 = sub_71B4(&qword_2A3578);
  v6 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v8 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PurchaseAttemptEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = v11 + 264;
  v128 = a1;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_17A068();
  v125 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PurchaseAttemptEvent.Model.CodingKeys, &type metadata for PurchaseAttemptEvent.Model.CodingKeys, v14, v12, v13);
  if (v2)
  {
    v129 = v2;
    v20 = 0;
    sub_7DAC(v128);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v121 = v5;
    v15 = v6;
    v16 = v123;
    v17 = v124;
    v139 = 0;
    v18 = sub_573A0();
    v19 = v126;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for AltContentTypeExposureData, &v139, v126, &type metadata for AltContentTypeExposureData, v18);
    v74 = v132;
    v75 = BYTE8(v132);
    v76 = *(_OWORD *)v131;
    *(_OWORD *)v11 = v130;
    *((_OWORD *)v11 + 1) = v76;
    *((_OWORD *)v11 + 2) = *(_OWORD *)&v131[16];
    *((_QWORD *)v11 + 6) = v74;
    v11[56] = v75;
    v139 = 1;
    v77 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v130, &type metadata for ContentData, &v139, v19, &type metadata for ContentData, v77);
    v78 = *((_QWORD *)&v130 + 1);
    v79 = v131[0];
    v80 = *(_OWORD *)&v131[8];
    v81 = *(_QWORD *)&v131[24];
    v82 = v132;
    v83 = WORD4(v132);
    v84 = HIDWORD(v132);
    v85 = v133;
    v86 = DWORD1(v133);
    v87 = BYTE8(v133);
    v88 = BYTE13(v133);
    *((_QWORD *)v11 + 8) = v130;
    *((_QWORD *)v11 + 9) = v78;
    v11[80] = v79;
    *(_OWORD *)(v11 + 88) = v80;
    *((_QWORD *)v11 + 13) = v81;
    *((_QWORD *)v11 + 14) = v82;
    *((_WORD *)v11 + 60) = v83;
    *((_DWORD *)v11 + 31) = v84;
    v11[128] = v85;
    *((_DWORD *)v11 + 33) = v86;
    v11[136] = v87;
    *(_DWORD *)(v11 + 137) = *(_DWORD *)((char *)&v133 + 9);
    v11[141] = v88;
    *((_OWORD *)v11 + 9) = v134;
    v139 = 2;
    v89 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for ContentStoreData, &v139, v19, &type metadata for ContentStoreData, v89);
    v90 = v133;
    v91 = BYTE4(v133);
    v92 = *(_OWORD *)v131;
    *((_OWORD *)v11 + 10) = v130;
    *((_OWORD *)v11 + 11) = v92;
    v93 = v132;
    *((_OWORD *)v11 + 12) = *(_OWORD *)&v131[16];
    *((_OWORD *)v11 + 13) = v93;
    v11[228] = v91;
    *((_DWORD *)v11 + 56) = v90;
    v139 = 3;
    v94 = sub_57428();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for ContentExposureData, &v139, v19, &type metadata for ContentExposureData, v94);
    v95 = v136;
    v96 = v137;
    v97 = *(_OWORD *)v131;
    *(_OWORD *)(v11 + 232) = v130;
    *(_OWORD *)(v11 + 248) = v97;
    v98 = v132;
    v99 = v127;
    *v127 = *(_OWORD *)&v131[16];
    v99[1] = v98;
    v100 = v134;
    v99[2] = v133;
    v99[3] = v100;
    v99[4] = v135;
    *((_WORD *)v99 + 42) = v96;
    *((_DWORD *)v99 + 20) = v95;
    v139 = 4;
    v101 = sub_5746C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for PrevAltContentExposureData, &v139, v19, &type metadata for PrevAltContentExposureData, v101);
    *((_WORD *)v11 + 175) = v130;
    v139 = 5;
    v102 = sub_340BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v130, &type metadata for PurchaseData, &v139, v19, &type metadata for PurchaseData, v102);
    v103 = *((_QWORD *)&v130 + 1);
    v104 = v131[0];
    v105 = v131[1];
    v106 = *(_QWORD *)&v131[8];
    v107 = *(_QWORD *)&v131[16];
    *((_QWORD *)v11 + 44) = v130;
    *((_QWORD *)v11 + 45) = v103;
    v11[368] = v104;
    v11[369] = v105;
    *((_QWORD *)v11 + 47) = v106;
    *((_QWORD *)v11 + 48) = v107;
    v139 = 6;
    v108 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for UpSellData, &v139, v19, &type metadata for UpSellData, v108);
    v109 = *(_QWORD *)v131;
    v127[8] = v130;
    *((_QWORD *)v11 + 51) = v109;
    v139 = 7;
    v110 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for SeriesData, &v139, v19, &type metadata for SeriesData, v110);
    v138 = 1;
    v111 = *(_OWORD *)v131;
    *((_OWORD *)v11 + 26) = v130;
    *((_OWORD *)v11 + 27) = v111;
    *((_OWORD *)v11 + 28) = *(_OWORD *)&v131[16];
    v139 = 8;
    v112 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for SuggestionData, &v139, v19, &type metadata for SuggestionData, v112);
    v11[464] = v130;
    v139 = 9;
    v114 = sub_574B0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v130, &type metadata for UppParentContentData, &v139, v19, &type metadata for UppParentContentData, v114);
    v129 = 0;
    v115 = v132;
    v116 = *(_OWORD *)v131;
    v117 = v127;
    v127[13] = v130;
    v117[14] = v116;
    v117[15] = *(_OWORD *)&v131[16];
    v11[520] = v115;
    LOBYTE(v130) = 10;
    v118 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v119 = v129;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v121, v17, &v130, v126, v17, v118);
    v129 = v119;
    if (!v119)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v125, v126);
      (*(void (**)(char *, _QWORD *, uint64_t))(v16 + 32))(&v11[*(int *)(v9 + 56)], v121, v17);
      sub_17A8E8((uint64_t)v11, v122);
      sub_7DAC(v128);
      sub_17A92C((uint64_t)v11);
      return;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v125, v126);
    v113 = v138;
    sub_7DAC(v128);
    v20 = 1;
    sub_57364(*(_QWORD *)v11, *((_QWORD *)v11 + 1), *((_QWORD *)v11 + 2), *((_QWORD *)v11 + 3), *((_QWORD *)v11 + 4), *((_QWORD *)v11 + 5), *((_QWORD *)v11 + 6));
    LODWORD(v128) = 1;
    v40 = (BAEventReporter *)*((_QWORD *)v11 + 9);
    v41 = v113;
    v42 = (BAEventReporter *)*((_QWORD *)v11 + 12);
    v43 = (BAEventReporter *)*((_QWORD *)v11 + 19);
    swift_bridgeObjectRelease(*((BAEventReporter **)v11 + 14), v44, v45, v46, v47, v48, v49, v50);
    v51 = v42;
    v30 = v41;
    swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
    swift_bridgeObjectRelease(v40, v59, v60, v61, v62, v63, v64, v65);
    v66 = v43;
    v29 = 1;
    v31 = 1;
    v28 = 1;
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    if ((v128 & 1) != 0)
    {
      sub_57314(*((_QWORD *)v11 + 20), *((_QWORD *)v11 + 21), *((_QWORD *)v11 + 22), *((_QWORD *)v11 + 23), *((_QWORD *)v11 + 24), *((_QWORD *)v11 + 25), *((_QWORD *)v11 + 26), *((_QWORD *)v11 + 27));
      goto LABEL_12;
    }
  }
  if (!v28)
  {
    if (!v20)
      goto LABEL_13;
LABEL_6:
    v32 = (BAEventReporter *)*((_QWORD *)v11 + 45);
    swift_bridgeObjectRelease(*((BAEventReporter **)v11 + 48), v21, v22, v23, v24, v25, v26, v27);
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    if ((v31 & 1) != 0)
      goto LABEL_14;
LABEL_7:
    if (!v30)
      goto LABEL_15;
    goto LABEL_8;
  }
LABEL_12:
  sub_572A4(*((_QWORD *)v11 + 29), *((_QWORD *)v11 + 30), *((_QWORD *)v11 + 31), *((_QWORD *)v11 + 32), *((_QWORD *)v11 + 33), *((_QWORD *)v11 + 34), *((_QWORD *)v11 + 35), *((_QWORD *)v11 + 36), *((_QWORD *)v11 + 37), *((_QWORD *)v11 + 38), *((_QWORD *)v11 + 39), *((_QWORD *)v11 + 40), *((_QWORD *)v11 + 41), *((_QWORD *)v11 + 42));
  if ((v20 & 1) != 0)
    goto LABEL_6;
LABEL_13:
  if (!v31)
    goto LABEL_7;
LABEL_14:
  swift_bridgeObjectRelease(*((BAEventReporter **)v11 + 51), v21, v22, v23, v24, v25, v26, v27);
  if ((v30 & 1) == 0)
  {
LABEL_15:
    if (!v29)
      return;
    goto LABEL_16;
  }
LABEL_8:
  sub_17788(*((_QWORD *)v11 + 52), *((_QWORD *)v11 + 53), *((_QWORD *)v11 + 54), *((_QWORD *)v11 + 55), *((_QWORD *)v11 + 56), *((_QWORD *)v11 + 57));
  if ((v29 & 1) == 0)
    return;
LABEL_16:
  sub_57268(*((_QWORD *)v11 + 59), *((_QWORD *)v11 + 60), *((_QWORD *)v11 + 61), *((_QWORD *)v11 + 62), *((_QWORD *)v11 + 63), *((_QWORD *)v11 + 64));
}

uint64_t sub_17A8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PurchaseAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_17A92C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PurchaseAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_17A968(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PurchaseAttemptEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_17A97C(_QWORD *a1)
{
  return PurchaseAttemptEvent.Model.encode(to:)(a1);
}

uint64_t sub_17A990@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B30, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3538, (uint64_t)sub_178E2C, a1);
}

uint64_t sub_17A9B4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B38, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3550, (uint64_t)sub_178E6C, a1);
}

uint64_t getEnumTagSinglePayload for PurchaseAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17A9E4);
}

uint64_t sub_17A9E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_71B4(&qword_2984C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984C8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_2984D0);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_2984D8);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_2984E0);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296F68);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296310);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_296F78);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_2984E8);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v8 = sub_71B4(&qword_295D70);
                      v12 = *(_QWORD *)(v8 - 8);
                      v13 = a3[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PurchaseAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17ABD4);
}

uint64_t sub_17ABD4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_71B4(&qword_2984C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984C8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_2984D0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_2984D8);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_2984E0);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296F68);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296310);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_296F78);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_2984E8);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v10 = sub_71B4(&qword_295D70);
                      v14 = *(_QWORD *)(v10 - 8);
                      v15 = a4[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for PurchaseAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17ADCC);
}

uint64_t sub_17ADCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 56), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PurchaseAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17AE54);
}

uint64_t sub_17AE54(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }
  return result;
}

uint64_t sub_17AEC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = "9";
  v4[1] = &unk_210868;
  v4[2] = &unk_210880;
  v4[3] = &unk_210898;
  v4[4] = &unk_2108B0;
  v4[5] = &unk_2108C8;
  v4[6] = &unk_2108E0;
  v4[7] = &unk_2108F8;
  v4[8] = &unk_210910;
  v4[9] = &unk_210928;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PurchaseAttemptEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_17AFE0 + 4 * byte_210710[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_17B014 + 4 * byte_21070B[v4]))();
}

uint64_t sub_17B014(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17B01C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17B024);
  return result;
}

uint64_t sub_17B030(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17B038);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_17B03C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17B044(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseAttemptEvent.Model.CodingKeys()
{
  return &type metadata for PurchaseAttemptEvent.Model.CodingKeys;
}

unint64_t sub_17B064()
{
  unint64_t result;

  result = qword_2A36F0;
  if (!qword_2A36F0)
  {
    result = swift_getWitnessTable(byte_2109DC, &type metadata for PurchaseAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A36F0);
  }
  return result;
}

unint64_t sub_17B0AC()
{
  unint64_t result;

  result = qword_2A36F8;
  if (!qword_2A36F8)
  {
    result = swift_getWitnessTable("-0\a", &type metadata for PurchaseAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A36F8);
  }
  return result;
}

unint64_t sub_17B0F4()
{
  unint64_t result;

  result = qword_2A3700;
  if (!qword_2A3700)
  {
    result = swift_getWitnessTable(byte_210974, &type metadata for PurchaseAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3700);
  }
  return result;
}

BookAnalytics::PurchaseFailureReason_optional __swiftcall PurchaseFailureReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::PurchaseFailureReason_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2685C0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PurchaseFailureReason.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726F727265;
  if (*v0 != 1)
    v1 = 0x64656C65636E6163;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_17B1E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_285DC(*a1, *a2);
}

unint64_t sub_17B1F8()
{
  unint64_t result;

  result = qword_2A3708;
  if (!qword_2A3708)
  {
    result = swift_getWitnessTable("-0\a", &type metadata for PurchaseFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A3708);
  }
  return result;
}

Swift::Int sub_17B23C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE500000000000000;
  v3 = 0x726F727265;
  if (v1 != 1)
  {
    v3 = 0x64656C65636E6163;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_17B2D8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE500000000000000;
  v3 = 0x726F727265;
  if (*v1 != 1)
  {
    v3 = 0x64656C65636E6163;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_17B350(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE500000000000000;
  v4 = 0x726F727265;
  if (v2 != 1)
  {
    v4 = 0x64656C65636E6163;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::PurchaseFailureReason_optional sub_17B3E8(Swift::String *a1)
{
  return PurchaseFailureReason.init(rawValue:)(*a1);
}

void sub_17B3F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x726F727265;
  if (v2 != 1)
  {
    v5 = 0x64656C65636E6163;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_17B450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17B5C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_17B4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17B5C4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for PurchaseFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_17B544 + 4 * byte_210A65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_17B578 + 4 * byte_210A60[v4]))();
}

uint64_t sub_17B578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17B580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17B588);
  return result;
}

uint64_t sub_17B594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17B59CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_17B5A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17B5A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseFailureReason()
{
  return &type metadata for PurchaseFailureReason;
}

unint64_t sub_17B5C4()
{
  unint64_t result;

  result = qword_2A3710;
  if (!qword_2A3710)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PurchaseFailureReason, &type metadata for PurchaseFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A3710);
  }
  return result;
}

BookAnalytics::ContentAcquisitionType_optional __swiftcall ContentAcquisitionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ContentAcquisitionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268628, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ContentAcquisitionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x756F4265726F7473;
  if (*v0 != 1)
    v1 = 0x65726F74536E6F6ELL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_17B6D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2B8B4(*a1, *a2);
}

unint64_t sub_17B6E0()
{
  unint64_t result;

  result = qword_2A3718;
  if (!qword_2A3718)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentAcquisitionType, &type metadata for ContentAcquisitionType);
    atomic_store(result, (unint64_t *)&qword_2A3718);
  }
  return result;
}

Swift::Int sub_17B724()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEB00000000746867;
  v3 = 0x756F4265726F7473;
  if (v1 != 1)
  {
    v3 = 0x65726F74536E6F6ELL;
    v2 = 0xEE00746867756F42;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_17B7D8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB00000000746867;
  v3 = 0x756F4265726F7473;
  if (*v1 != 1)
  {
    v3 = 0x65726F74536E6F6ELL;
    v2 = 0xEE00746867756F42;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_17B868(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEB00000000746867;
  v4 = 0x756F4265726F7473;
  if (v2 != 1)
  {
    v4 = 0x65726F74536E6F6ELL;
    v3 = 0xEE00746867756F42;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::ContentAcquisitionType_optional sub_17B918(Swift::String *a1)
{
  return ContentAcquisitionType.init(rawValue:)(*a1);
}

void sub_17B924(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEB00000000746867;
  v5 = 0x756F4265726F7473;
  if (v2 != 1)
  {
    v5 = 0x65726F74536E6F6ELL;
    v4 = 0xEE00746867756F42;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_17B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17BB0C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_17B9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17BB0C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ContentAcquisitionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_17BA8C + 4 * byte_210B95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_17BAC0 + 4 * byte_210B90[v4]))();
}

uint64_t sub_17BAC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17BAC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17BAD0);
  return result;
}

uint64_t sub_17BADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17BAE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_17BAE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17BAF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentAcquisitionType()
{
  return &type metadata for ContentAcquisitionType;
}

unint64_t sub_17BB0C()
{
  unint64_t result;

  result = qword_2A3720;
  if (!qword_2A3720)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentAcquisitionType, &type metadata for ContentAcquisitionType);
    atomic_store(result, (unint64_t *)&qword_2A3720);
  }
  return result;
}

uint64_t sub_17BB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_88F50(a1, &qword_29AAB0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_283C50, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_2A3898, v16);
}

uint64_t sub_17BC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_88F50(a1, &qword_29AAB0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_283CF0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_71B4(&qword_2A38E8);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_2A38E0, v16);
}

uint64_t sub_17BDF0()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SessionActor.ActorType()
{
  return objc_opt_self(_TtCV13BookAnalyticsP33_9394F35FFB3B8B0F77164FE42CACDAF712SessionActor9ActorType);
}

uint64_t sub_17BE2C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_17BE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for SessionActor.ActorType();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize();
  qword_2A3728 = v1;
  return result;
}

BAEventReporter *sub_17BE74()
{
  BAEventReporter *v0;
  BAEventReporter *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t isa;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v0[1].super.isa = (Class)sub_17C1AC();
  *(_QWORD *)v0[1].dataProviders = v2;
  v0[2].super.isa = (Class)&_swiftEmptyDictionarySingleton;
  if (qword_2955F8 != -1)
    swift_once(&qword_2955F8, sub_5C714);
  v3 = type metadata accessor for Logger(0);
  sub_705C(v3, (uint64_t)qword_298788);
  v4 = swift_retain(v0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v34 = v8;
    *(_DWORD *)v7 = 136315138;
    isa = (uint64_t)v1[1].super.isa;
    v10 = *(BAEventReporter **)v1[1].dataProviders;
    swift_bridgeObjectRetain(v10);
    v33 = sub_EB014(isa, (unint64_t)v10, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v7 + 4, v7 + 12);
    swift_release(v1, v11, v12, v13, v14, v15, v16, v17);
    swift_bridgeObjectRelease(v10, v18, v19, v20, v21, v22, v23, v24);
    _os_log_impl(&dword_0, v5, v6, "file path: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release(v1, v25, v26, v27, v28, v29, v30, v31);
  }
  sub_17C034();
  return v1;
}

void sub_17C034()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  unsigned int v4;
  NSString v5;
  unsigned int v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (void *)objc_opt_self(NSFileManager);
  swift_bridgeObjectRetain(v1);
  v11 = objc_msgSend(v2, "defaultManager");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v11, "fileExistsAtPath:", v3);

  if (v4)
  {
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v1);
    v12 = 0;
    v6 = objc_msgSend(v11, "removeItemAtPath:error:", v5, &v12);

    v7 = v12;
    if (v6)
    {
      v8 = v12;

    }
    else
    {
      v9 = v12;
      v10 = _convertNSErrorToError(_:)(v7);

      swift_willThrow();
      swift_errorRelease(v10);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v1);

  }
}

uint64_t sub_17C1AC()
{
  NSArray *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  id v6;
  NSString v7;
  unsigned __int8 v8;
  NSString v9;
  uint64_t result;

  v0 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v0, &type metadata for String);

  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 16 * v2 + 24);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v1);
    v4._object = (void *)0x80000000002225D0;
    v4._countAndFlagsBits = 0xD000000000000016;
    countAndFlagsBits = String.append(pathComponent:)(v4)._countAndFlagsBits;
    swift_bridgeObjectRelease(v3);
    v6 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "fileExistsAtPath:", v7);

    if ((v8 & 1) == 0)
    {
      v9 = String._bridgeToObjectiveC()();
      objc_msgSend(v6, "createFileAtPath:contents:attributes:", v9, 0, 0);

    }
    return countAndFlagsBits;
  }
  else
  {
    result = swift_bridgeObjectRelease(v1);
    __break(1u);
  }
  return result;
}

uint64_t sub_17C2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  if (qword_295B40 != -1)
    swift_once(&qword_295B40, sub_17BE38);
  return swift_task_switch(sub_17C358, qword_2A3728, 0);
}

uint64_t sub_17C358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BAEventReporter *v3;
  BAEventReporter *v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = Session.identifier.getter();
  v4 = v3;
  v5 = Session.sessionData.getter();
  swift_beginAccess(v1 + 32, v0 + 16, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 32));
  v23 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0x8000000000000000;
  sub_1CF600(v5, v2, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
  v7 = *(BAEventReporter **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v23;
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(v4, v15, v16, v17, v18, v19, v20, v21);
  swift_endAccess(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_17C418()
{
  uint64_t v0;
  void *v1;
  Class isa;
  id v3;
  id v4;
  BAEventReporter *v5;
  const char *v6;
  const char *v7;
  BAEventReporter *v8;
  NSString v9;
  void *v10;
  id v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  BAEventReporter *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  id v38;
  NSString v39;
  NSString v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  int64_t v51;
  void *v52;
  BOOL v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  int64_t v58;
  void *v59;
  BOOL v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  Class v64;
  void *v65;
  void *v66;
  int64_t v67;
  void *v68;
  BOOL v69;
  void *v70;
  unsigned int v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  int64_t v76;
  void *v77;
  BOOL v78;
  void *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  BAEventReporter *v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  int64_t v94;
  int64_t v95;
  id v96;
  void *v97;
  void *v98;
  int64_t v99;
  void *v100;
  BOOL v101;
  void *v102;
  void *v103;
  void *v104;
  int64_t v105;
  void *v106;
  BOOL v107;
  void *v108;
  void *v109;
  void *v110;
  int64_t v111;
  void *v112;
  BOOL v113;
  void *v114;
  _QWORD v115[3];
  _BYTE v116[8];
  uint64_t v117;
  _QWORD v118[3];
  _BYTE v119[16];
  id v120;

  v1 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v120 = 0;
  v3 = objc_msgSend(v1, "dataWithJSONObject:options:error:", isa, 8, &v120);

  v4 = v120;
  if (!v3)
  {
    v20 = v4;
    v21 = _convertNSErrorToError(_:)(v4);

    swift_willThrow();
    if (qword_2955F8 != -1)
      swift_once(&qword_2955F8, sub_5C714);
    v22 = type metadata accessor for Logger(0);
    sub_705C(v22, (uint64_t)qword_298788);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (void *)swift_slowAlloc(32, -1);
      v120 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_getErrorValue(v21, v119, v118);
      v28 = Error.localizedDescription.getter(v118[1], v118[2]);
      v30 = (BAEventReporter *)v29;
      v117 = sub_EB014(v28, v29, (uint64_t *)&v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl(&dword_0, v24, v25, "error serializing json data: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease(v21);
      return;
    }
    swift_errorRelease(v21);
    swift_errorRelease(v21);
    v80 = v21;
LABEL_21:
    swift_errorRelease(v80);

    return;
  }
  v5 = (BAEventReporter *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;

  v8 = *(BAEventReporter **)(v0 + 24);
  swift_bridgeObjectRetain(v8);
  sub_17D9F0((uint64_t)v5, (unint64_t)v7);
  v9 = String._bridgeToObjectiveC()();
  v10 = (void *)objc_opt_self(NSFileHandle);
  v11 = objc_msgSend(v10, "fileHandleForWritingAtPath:", v9);

  if (v11)
  {
    swift_bridgeObjectRelease(v8, v12, v13, v14, v15, v16, v17, v18);
    v19 = v11;
LABEL_10:
    v55 = v11;
    NSFileHandle.seekToEnd()();
    if (v62)
    {
      v63 = v62;
      sub_17D9AC(v5, v7, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      v64 = Data._bridgeToObjectiveC()().super.isa;
      sub_17D9AC(v5, v7, v65, v66, v67, v68, v69, v70);
      objc_msgSend(v19, "writeData:", v64);

      v120 = 0;
      v71 = objc_msgSend(v19, "closeAndReturnError:", &v120);
      v72 = v120;
      if (v71)
      {
        v73 = v120;

        sub_17D9AC(v5, v7, v74, v75, v76, v77, v78, v79);
        return;
      }
      v81 = v120;
      v63 = _convertNSErrorToError(_:)(v72);

      swift_willThrow();
    }
    if (qword_2955F8 != -1)
      swift_once(&qword_2955F8, sub_5C714);
    v82 = type metadata accessor for Logger(0);
    sub_705C(v82, (uint64_t)qword_298788);
    swift_errorRetain(v63);
    v83 = swift_errorRetain(v63);
    v24 = Logger.logObject.getter(v83);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = (void *)swift_slowAlloc(32, -1);
      v120 = v86;
      *(_DWORD *)v85 = 136315138;
      swift_getErrorValue(v63, v116, v115);
      v87 = Error.localizedDescription.getter(v115[1], v115[2]);
      v89 = (BAEventReporter *)v88;
      v117 = sub_EB014(v87, v88, (uint64_t *)&v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v85 + 4, v85 + 12);
      swift_bridgeObjectRelease(v89, v90, v91, v92, v93, v94, v95, v96);
      swift_errorRelease(v63);
      swift_errorRelease(v63);
      _os_log_impl(&dword_0, v24, v84, "error while writing to disk: %s", v85, 0xCu);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);
      sub_17D9AC(v5, v7, v97, v98, v99, v100, v101, v102);

      swift_errorRelease(v63);
      return;
    }

    sub_17D9AC(v5, v7, v103, v104, v105, v106, v107, v108);
    swift_errorRelease(v63);
    swift_errorRelease(v63);
    v80 = v63;
    goto LABEL_21;
  }
  v38 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v38, "createFileAtPath:contents:attributes:", v39, 0, 0);

  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8, v41, v42, v43, v44, v45, v46, v47);
  v48 = objc_msgSend(v10, "fileHandleForWritingAtPath:", v40);

  if (v48)
  {
    v19 = v48;
    goto LABEL_10;
  }
  sub_17D9AC(v5, v7, v49, v50, v51, v52, v53, v54);
  sub_17D9AC(v5, v7, v109, v110, v111, v112, v113, v114);
}

void sub_17CA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  v32 = a3;
  v5 = type metadata accessor for ProcessEvent(0, a2, a3);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = sub_71B4(&qword_29AAB0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  v14 = qword_295B40;
  v15 = v3;
  swift_retain(v3);
  if (v14 != -1)
    swift_once(&qword_295B40, sub_17BE38);
  v16 = qword_2A3728;
  v17 = sub_17D5F0();
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (char *)swift_allocObject(&unk_283CC8, v20 + 8, v18 | 7);
  *((_QWORD *)v21 + 2) = v16;
  *((_QWORD *)v21 + 3) = v17;
  v22 = v32;
  *((_QWORD *)v21 + 4) = v31;
  *((_QWORD *)v21 + 5) = v22;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v21[v19], v9, v5);
  *(_QWORD *)&v21[v20] = v15;
  swift_retain(v16);
  v23 = (BAEventReporter *)sub_17BB50((uint64_t)v12, (uint64_t)&unk_2A38B8, (uint64_t)v21);
  swift_release(v23, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t sub_17CBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[89] = a7;
  v7[88] = a6;
  v7[87] = a5;
  v7[86] = a4;
  if (qword_295B40 != -1)
    swift_once(&qword_295B40, sub_17BE38);
  return swift_task_switch(sub_17CC8C, qword_2A3728, 0);
}

uint64_t sub_17CC8C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  BAEventReporter *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  int64_t v10;
  int64_t v11;
  void *v12;
  void *v13;
  Class isa;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int64_t v24;
  void *v25;
  BAEventReporter *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  int64_t v31;
  void *v32;
  BOOL v33;
  void *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BAEventReporter *v38;
  const char *v39;
  void *v40;
  void *v41;
  void *v42;
  int64_t v43;
  int64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BAEventReporter *v50;
  uint64_t v51;
  unint64_t v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  int64_t v57;
  int64_t v58;
  void *v59;
  BAEventReporter *v60;
  uint64_t v61;
  BAEventReporter *v62;
  BAEventReporter *v63;
  unint64_t v64;
  const char *v65;
  void *v66;
  void *v67;
  void *v68;
  int64_t v69;
  int64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t inited;
  const char *v74;
  void *v75;
  void *v76;
  void *v77;
  int64_t v78;
  int64_t v79;
  void *v80;
  const char *v81;
  void *v82;
  void *v83;
  void *v84;
  int64_t v85;
  int64_t v86;
  void *v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  int64_t v92;
  int64_t v93;
  id v94;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;

  v1 = type metadata accessor for ProcessEvent(0, *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 712));
  v2 = (void *)ProcessEvent.json.getter();
  v3 = (BAEventReporter *)dispatch thunk of JSON.toData(options:)(8);
  v5 = v4;

  v13 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 664) = 0;
  v15 = objc_msgSend(v13, "JSONObjectWithData:options:error:", isa, 0, v0 + 664);

  v16 = *(void **)(v0 + 664);
  if (v15)
  {
    v17 = v16;
    _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 480), v15);
    swift_unknownObjectRelease(v15);
    v18 = sub_71B4(&qword_2A38D0);
    if (swift_dynamicCast(v0 + 680, v0 + 480, (char *)&type metadata for Any + 8, v18, 6))
      v26 = *(BAEventReporter **)(v0 + 680);
    else
      v26 = (BAEventReporter *)sub_3A344((BAEventReporter *)_swiftEmptyArrayStorage, v19, v20, v21, v22, (int64_t)v23, v24, v25);
    sub_17D9AC(v3, v5, v20, v21, (int64_t)v22, v23, v24, v25);
  }
  else
  {
    v27 = v16;
    v28 = _convertNSErrorToError(_:)(v16);

    swift_willThrow();
    sub_17D9AC(v3, v5, v29, v30, v31, v32, v33, v34);
    v26 = (BAEventReporter *)sub_3A344((BAEventReporter *)_swiftEmptyArrayStorage, v6, v7, v8, v9, v10, v11, v12);
    swift_errorRelease(v28);
  }
  *(_QWORD *)(v0 + 600) = 0x746144746E657665;
  *(_QWORD *)(v0 + 608) = 0xE900000000000061;
  AnyHashable.init<A>(_:)(v0 + 600, &type metadata for String, &protocol witness table for String);
  if (v26[1].super.isa && (v35 = sub_DFE0(v0 + 336), (v36 & 1) != 0))
  {
    sub_3A870(*(_QWORD *)v26[3].dataProviders + 32 * v35, v0 + 416);
  }
  else
  {
    *(_OWORD *)(v0 + 416) = 0u;
    *(_OWORD *)(v0 + 432) = 0u;
  }
  sub_E1F0(v0 + 336);
  if (!*(_QWORD *)(v0 + 440))
  {
    v47 = v0 + 416;
LABEL_24:
    sub_88F50(v47, &qword_2983D0);
    goto LABEL_25;
  }
  v37 = sub_71B4(&qword_2A38D0);
  if ((swift_dynamicCast(v0 + 672, v0 + 416, (char *)&type metadata for Any + 8, v37, 6) & 1) == 0)
  {
LABEL_25:
    v60 = (BAEventReporter *)&_swiftEmptyDictionarySingleton;
    goto LABEL_26;
  }
  v38 = *(BAEventReporter **)(v0 + 672);
  *(_QWORD *)(v0 + 616) = 0x496E6F6973736573;
  *(_QWORD *)(v0 + 624) = 0xE900000000000044;
  AnyHashable.init<A>(_:)(v0 + 616, &type metadata for String, &protocol witness table for String);
  if (v38[1].super.isa && (v46 = sub_DFE0(v0 + 376), (v39 & 1) != 0))
  {
    sub_3A870(*(_QWORD *)v38[3].dataProviders + 32 * v46, v0 + 448);
  }
  else
  {
    *(_OWORD *)(v0 + 448) = 0u;
    *(_OWORD *)(v0 + 464) = 0u;
  }
  swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
  sub_E1F0(v0 + 376);
  if (!*(_QWORD *)(v0 + 472))
  {
    v47 = v0 + 448;
    goto LABEL_24;
  }
  if ((swift_dynamicCast(v0 + 632, v0 + 448, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_25;
  v48 = *(_QWORD *)(v0 + 696);
  v49 = *(_QWORD *)(v0 + 632);
  v50 = *(BAEventReporter **)(v0 + 640);
  swift_beginAccess(v48 + 32, v0 + 512, 32, 0);
  v51 = *(_QWORD *)(v48 + 32);
  if (*(_QWORD *)(v51 + 16))
  {
    swift_bridgeObjectRetain(v50);
    v52 = sub_DF7C(v49, (uint64_t)v50);
    if ((v53 & 1) != 0)
    {
      v60 = *(BAEventReporter **)(*(_QWORD *)(v51 + 56) + 8 * v52);
      swift_endAccess(v0 + 512);
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRelease_n(v50, 2);
      goto LABEL_26;
    }
    swift_bridgeObjectRelease(v50, v53, v54, v55, v56, v57, v58, v59);
  }
  swift_endAccess(v0 + 512);
  swift_bridgeObjectRelease(v50, v96, v97, v98, v99, v100, v101, v102);
  v60 = (BAEventReporter *)sub_3A210((uint64_t)_swiftEmptyArrayStorage);
LABEL_26:
  v61 = ProcessEvent.name.getter(v1);
  v63 = v62;
  *(_QWORD *)(v0 + 584) = v61;
  *(_QWORD *)(v0 + 592) = v62;
  v64 = sub_130F60();
  if ((Collection.isNotEmpty.getter(&type metadata for String, v64) & 1) != 0)
  {
    v72 = sub_71B4(&qword_2A38C0);
    inited = swift_initStackObject(v72, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_210CC0;
    *(_QWORD *)(v0 + 568) = 1701667182;
    *(_QWORD *)(v0 + 576) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v0 + 568, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v61;
    *(_QWORD *)(inited + 80) = v63;
    *(_QWORD *)(v0 + 536) = 1701869940;
    *(_QWORD *)(v0 + 544) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v0 + 536, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = 0x746E657665;
    *(_QWORD *)(inited + 152) = 0xE500000000000000;
    *(_QWORD *)(v0 + 648) = 0x446E6F6973736573;
    *(_QWORD *)(v0 + 656) = 0xEB00000000617461;
    AnyHashable.init<A>(_:)(v0 + 648, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 240) = sub_71B4(&qword_2A38C8);
    *(_QWORD *)(inited + 216) = v60;
    *(_QWORD *)(v0 + 552) = 1635017060;
    *(_QWORD *)(v0 + 560) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v0 + 552, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 312) = sub_71B4(&qword_2A38D0);
    *(_QWORD *)(inited + 288) = v26;
    v63 = (BAEventReporter *)sub_3A344((BAEventReporter *)inited, v74, v75, v76, v77, v78, v79, v80);
    sub_17C418();
  }
  else
  {
    swift_bridgeObjectRelease(v26, v65, v66, v67, v68, v69, v70, v71);
    swift_bridgeObjectRelease(v60, v88, v89, v90, v91, v92, v93, v94);
  }
  swift_bridgeObjectRelease(v63, v81, v82, v83, v84, v85, v86, v87);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17D244()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DebugEventProcessor()
{
  return objc_opt_self(_TtC13BookAnalytics19DebugEventProcessor);
}

uint64_t sub_17D294(uint64_t a1)
{
  _QWORD *v1;

  return EventProcessorType.didEnterGroup(_:)(a1, *v1);
}

uint64_t sub_17D29C(uint64_t a1)
{
  _QWORD *v1;

  return EventProcessorType.didLeaveGroup(_:)(a1, *v1);
}

void sub_17D2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_17D2CC(a1, a2, a3, (uint64_t)&unk_283CA0, (uint64_t)&unk_2A38A8);
}

void sub_17D2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_17D2CC(a1, a2, a3, (uint64_t)&unk_283C78, (uint64_t)&unk_2A38A0);
}

void sub_17D2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  BAEventReporter *v21;
  SEL v22;
  id v23;
  id v24;
  int64_t v25;
  id v26;
  BOOL v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a5;
  v8 = type metadata accessor for Session(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_71B4(&qword_29AAB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v15 = qword_295B40;
  swift_retain(v5);
  if (v15 != -1)
    swift_once(&qword_295B40, sub_17BE38);
  v16 = qword_2A3728;
  v17 = sub_17D5F0();
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = (char *)swift_allocObject(a4, v19 + v10, v18 | 7);
  *((_QWORD *)v20 + 2) = v16;
  *((_QWORD *)v20 + 3) = v17;
  *((_QWORD *)v20 + 4) = v5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v19], (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  swift_retain(v16);
  v21 = (BAEventReporter *)sub_17BB50((uint64_t)v13, v30, (uint64_t)v20);
  swift_release(v21, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_17D458(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return EventProcessorType.didUpdateSession(_:submitEventQueues:)(a1, a2, *v2);
}

void sub_17D460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  uint64_t v25;

  v3 = type metadata accessor for Session(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_71B4(&qword_29AAB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v11 = qword_295B40;
  swift_retain(v1);
  if (v11 != -1)
    swift_once(&qword_295B40, sub_17BE38);
  v12 = qword_2A3728;
  v13 = sub_17D5F0();
  v14 = *(unsigned __int8 *)(v4 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (char *)swift_allocObject(&unk_283C28, v15 + v5, v14 | 7);
  *((_QWORD *)v16 + 2) = v12;
  *((_QWORD *)v16 + 3) = v13;
  *((_QWORD *)v16 + 4) = v1;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v16[v15], v6, v3);
  swift_retain(v12);
  v17 = (BAEventReporter *)sub_17BB50((uint64_t)v9, (uint64_t)&unk_2A3888, (uint64_t)v16);
  swift_release(v17, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_17D5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  return EventProcessorType.resumeBackgroundProcessing(forIdentifier:completion:)(a1, a2, a3, a4, *v4);
}

unint64_t sub_17D5F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2A3880;
  if (!qword_2A3880)
  {
    v1 = type metadata accessor for SessionActor.ActorType();
    result = swift_getWitnessTable(byte_210D74, v1);
    atomic_store(result, (unint64_t *)&qword_2A3880);
  }
  return result;
}

uint64_t sub_17D63C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Session(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_2A387C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_9DAA0;
  return sub_17C2F4(a1, v5, v6, v7, v8);
}

uint64_t sub_17D6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_2A3894);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_9DAA0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2A3890 + dword_2A3890))(a1, v4);
}

uint64_t sub_17D744(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Session(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_2A387C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_88CD4;
  return sub_17C2F4(a1, v5, v6, v7, v8);
}

uint64_t sub_17D7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  int64_t v10;
  id v11;
  BOOL v12;
  id v13;

  v1 = type metadata accessor for Session(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(BAEventReporter **)(v0 + 32), v7, v8, v9, v10, v11, v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_17D858()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  SEL v7;
  id v8;
  id v9;
  int64_t v10;
  id v11;
  BOOL v12;
  id v13;

  v1 = type metadata accessor for ProcessEvent(0, *((_QWORD *)v0 + 4), *((_QWORD *)v0 + 5));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(BAEventReporter **)&v0[v6], v7, v8, v9, v10, v11, v12, v13);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_17D8EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(_QWORD *)(type metadata accessor for ProcessEvent(0, v4, v5) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v1[2];
  v9 = v1[3];
  v10 = (uint64_t)v1 + v7;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_2A38B4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_9DAA0;
  return sub_17CBF0(a1, v8, v9, v10, v11, v4, v5);
}

void sub_17D9AC(BAEventReporter *a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  if ((unint64_t)a2 >> 62 != 1)
  {
    if ((unint64_t)a2 >> 62 != 2)
      return;
    swift_release(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  swift_release((BAEventReporter *)((unint64_t)a2 & 0x3FFFFFFFFFFFFFFFLL), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_17D9F0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_17DA34(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_17DA9C;
  return v5(v2 + 32);
}

uint64_t sub_17DA9C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_17DAEC(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

uint64_t sub_17DB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_2A38DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_88CD4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2A38D8 + dword_2A38D8))(a1, v4);
}

void __swiftcall SeriesData.init(seriesID:seriesContentType:seriesCount:seriesUserStatus:seriesType:seriesUserSubStatus:seriesCountStr:)(BookAnalytics::SeriesData *__return_ptr retstr, Swift::Int64 seriesID, BookAnalytics::ContentType seriesContentType, Swift::Int64 seriesCount, BookAnalytics::SeriesUserStatus_optional seriesUserStatus, BookAnalytics::SeriesType_optional seriesType, BookAnalytics::SeriesUserSubStatus_optional seriesUserSubStatus, Swift::String_optional seriesCountStr)
{
  BookAnalytics::ContentType v8;
  BookAnalytics::SeriesUserStatus v9;
  BookAnalytics::SeriesType v10;
  BookAnalytics::SeriesUserSubStatus v11;

  v8 = *(_BYTE *)seriesContentType;
  v9 = *(_BYTE *)seriesUserStatus.value;
  v10 = *(_BYTE *)seriesType.value;
  v11 = *(_BYTE *)seriesUserSubStatus.value;
  retstr->seriesID = seriesID;
  retstr->seriesContentType = v8;
  retstr->seriesCount = seriesCount;
  retstr->seriesUserStatus.value = v9;
  retstr->seriesType.value = v10;
  retstr->seriesUserSubStatus.value = v11;
  retstr->seriesCountStr = seriesCountStr;
}

uint64_t sub_17DBB8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_17DBEC + 4 * byte_210D9C[a1]))(0x4449736569726573, 0xE800000000000000);
}

unint64_t sub_17DBEC()
{
  return 0xD000000000000011;
}

uint64_t sub_17DC90()
{
  unsigned __int8 *v0;

  return sub_17DBB8(*v0);
}

uint64_t sub_17DC98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_17E8CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17DCBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17E3DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17DCE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17E3DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SeriesData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v4 = sub_71B4(&qword_2A38F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v31 = *((unsigned __int8 *)v1 + 8);
  v30 = v1[2];
  v9 = *((unsigned __int8 *)v1 + 24);
  v28 = *((unsigned __int8 *)v1 + 25);
  v29 = v9;
  v27 = *((unsigned __int8 *)v1 + 26);
  v10 = v1[4];
  v25 = v1[5];
  v26 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_17E3DC();
  v14 = v12;
  v15 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SeriesData.CodingKeys, &type metadata for SeriesData.CodingKeys, v13, v11, v14);
  v42 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v42, v4);
  if (!v2)
  {
    v16 = v30;
    v17 = v28;
    v18 = v29;
    v19 = v27;
    v41 = v31;
    v40 = 1;
    v20 = sub_FBF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v40, v15, &type metadata for ContentType, v20);
    v39 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v39, v15);
    v38 = v18;
    v37 = 3;
    v21 = sub_17E420();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v38, &v37, v15, &type metadata for SeriesUserStatus, v21);
    v36 = v17;
    v35 = 4;
    v22 = sub_FC848();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, &v35, v15, &type metadata for SeriesType, v22);
    v34 = v19;
    v33 = 5;
    v23 = sub_17E464();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v33, v15, &type metadata for SeriesUserSubStatus, v23);
    v32 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v25, &v32, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
}

void SeriesData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  BAEventReporter *v21;
  BAEventReporter *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  int64_t v36;
  int64_t v37;
  void *v38;
  BAEventReporter *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v5 = sub_71B4(&qword_2A3910);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_17E3DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesData.CodingKeys, &type metadata for SeriesData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v39 = 0;
  }
  else
  {
    BYTE6(v49) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v49 + 6, v5);
    BYTE4(v49) = 1;
    v13 = sub_FC34();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v49 + 5), &type metadata for ContentType, (char *)&v49 + 4, v5, &type metadata for ContentType, v13);
    v14 = BYTE5(v49);
    BYTE3(v49) = 2;
    v43 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v49 + 3, v5);
    v44 = v14;
    BYTE1(v49) = 3;
    v15 = sub_17E4A8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)((uint64_t *)((char *)&v49 + 2), &type metadata for SeriesUserStatus, (char *)&v49 + 1, v5, &type metadata for SeriesUserStatus, v15);
    v16 = BYTE2(v49);
    v48 = 4;
    v17 = sub_FC99C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v49, &type metadata for SeriesType, &v48, v5, &type metadata for SeriesType, v17);
    v42 = v16;
    v18 = v49;
    v46 = 5;
    v19 = sub_17E4EC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v47, &type metadata for SeriesUserSubStatus, &v46, v5, &type metadata for SeriesUserSubStatus, v19);
    v41 = v18;
    LOBYTE(v18) = v47;
    v45 = 6;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
    v22 = v21;
    v23 = *(void (**)(char *, uint64_t))(v6 + 8);
    v24 = v20;
    v23(v8, v5);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease(0, v25, v26, v27, v28, v29, v30, v31);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v44;
    *(_QWORD *)(a2 + 16) = v43;
    *(_BYTE *)(a2 + 24) = v42;
    *(_BYTE *)(a2 + 25) = v41;
    *(_BYTE *)(a2 + 26) = v18;
    *(_QWORD *)(a2 + 32) = v24;
    *(_QWORD *)(a2 + 40) = v22;
    sub_7DAC(a1);
    v39 = v22;
  }
  swift_bridgeObjectRelease(v39, v32, v33, v34, v35, v36, v37, v38);
}

void sub_17E254(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SeriesData.init(from:)(a1, a2);
}

uint64_t sub_17E268(_QWORD *a1)
{
  return SeriesData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics10SeriesDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = *(unsigned __int8 *)(a1 + 26);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 25);
  v8 = *(unsigned __int8 *)(a2 + 26);
  v9 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a1 + 16);
  sub_26C28(*(_BYTE *)(a1 + 8));
  v13 = v12;
  result = 0;
  if ((v13 & 1) != 0 && v11 == v10)
  {
    if (v2 == 4)
    {
      if (v6 != 4)
        return 0;
    }
    else
    {
      if (v6 == 4)
        return 0;
      sub_2BEA0(v2);
      if ((v15 & 1) == 0)
        return 0;
    }
    if (v3 == 4)
    {
      if (v7 != 4)
        return 0;
    }
    else
    {
      if (v7 == 4)
        return 0;
      sub_2B9F4(v3);
      if ((v16 & 1) == 0)
        return 0;
    }
    if (v4 == 7)
    {
      if (v8 != 7)
        return 0;
    }
    else
    {
      if (v8 == 7)
        return 0;
      sub_2BC68(v4);
      if ((v17 & 1) == 0)
        return 0;
    }
    if (v5)
    {
      if (!v9
        || (v19 != v18 || v5 != v9) && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v5, v18, v9, 0) & 1) == 0)
      {
        return 0;
      }
    }
    else if (v9)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_17E3DC()
{
  unint64_t result;

  result = qword_2A38F8;
  if (!qword_2A38F8)
  {
    result = swift_getWitnessTable(byte_210F54, &type metadata for SeriesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A38F8);
  }
  return result;
}

unint64_t sub_17E420()
{
  unint64_t result;

  result = qword_2A3900;
  if (!qword_2A3900)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SeriesUserStatus, &type metadata for SeriesUserStatus);
    atomic_store(result, (unint64_t *)&qword_2A3900);
  }
  return result;
}

unint64_t sub_17E464()
{
  unint64_t result;

  result = qword_2A3908;
  if (!qword_2A3908)
  {
    result = swift_getWitnessTable("\r~\a", &type metadata for SeriesUserSubStatus);
    atomic_store(result, (unint64_t *)&qword_2A3908);
  }
  return result;
}

unint64_t sub_17E4A8()
{
  unint64_t result;

  result = qword_2A3918;
  if (!qword_2A3918)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SeriesUserStatus, &type metadata for SeriesUserStatus);
    atomic_store(result, (unint64_t *)&qword_2A3918);
  }
  return result;
}

unint64_t sub_17E4EC()
{
  unint64_t result;

  result = qword_2A3920;
  if (!qword_2A3920)
  {
    result = swift_getWitnessTable("%~\a", &type metadata for SeriesUserSubStatus);
    atomic_store(result, (unint64_t *)&qword_2A3920);
  }
  return result;
}

uint64_t destroy for SeriesData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for SeriesData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SeriesData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SeriesData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesData()
{
  return &type metadata for SeriesData;
}

uint64_t storeEnumTagSinglePayload for SeriesData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_17E774 + 4 * byte_210DA8[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_17E7A8 + 4 * byte_210DA3[v4]))();
}

uint64_t sub_17E7A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E7B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17E7B8);
  return result;
}

uint64_t sub_17E7C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17E7CCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_17E7D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E7D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesData.CodingKeys()
{
  return &type metadata for SeriesData.CodingKeys;
}

unint64_t sub_17E7F8()
{
  unint64_t result;

  result = qword_2A3928;
  if (!qword_2A3928)
  {
    result = swift_getWitnessTable(byte_210F2C, &type metadata for SeriesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3928);
  }
  return result;
}

unint64_t sub_17E840()
{
  unint64_t result;

  result = qword_2A3930;
  if (!qword_2A3930)
  {
    result = swift_getWitnessTable("E0\a", &type metadata for SeriesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3930);
  }
  return result;
}

unint64_t sub_17E888()
{
  unint64_t result;

  result = qword_2A3938;
  if (!qword_2A3938)
  {
    result = swift_getWitnessTable("-0\a", &type metadata for SeriesData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3938);
  }
  return result;
}

uint64_t sub_17E8CC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x4449736569726573 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449736569726573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x80000000002225F0;
    if (a2 == 0x80000000002225F0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000002225F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6F43736569726573 && a2 == 0xEB00000000746E75)
  {
    v8 = 0xEB00000000746E75;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43736569726573, 0xEB00000000746E75, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000000222610;
    if (a2 == 0x8000000000222610)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222610, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x7954736569726573 && a2 == 0xEA00000000006570)
  {
    v10 = 0xEA00000000006570;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954736569726573, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000000222630)
  {
    v11 = 0x8000000000222630;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000222630, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x6F43736569726573 && a2 == 0xEE00727453746E75)
  {
    swift_bridgeObjectRelease(0xEE00727453746E75);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43736569726573, 0xEE00727453746E75, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

BookAnalytics::DeviceOrientation_optional __swiftcall DeviceOrientation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DeviceOrientation_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268690, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DeviceOrientation.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7469617274726F70;
  if (*v0 != 1)
    v1 = 0x70616373646E616CLL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_17EC84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_28E18(*a1, *a2);
}

unint64_t sub_17EC94()
{
  unint64_t result;

  result = qword_2A3940;
  if (!qword_2A3940)
  {
    result = swift_getWitnessTable("50\a", &type metadata for DeviceOrientation);
    atomic_store(result, (unint64_t *)&qword_2A3940);
  }
  return result;
}

Swift::Int sub_17ECD8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x7469617274726F70;
  if (v1 != 1)
  {
    v3 = 0x70616373646E616CLL;
    v2 = 0xE900000000000065;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_17ED7C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x7469617274726F70;
  if (*v1 != 1)
  {
    v3 = 0x70616373646E616CLL;
    v2 = 0xE900000000000065;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_17EDFC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x7469617274726F70;
  if (v2 != 1)
  {
    v4 = 0x70616373646E616CLL;
    v3 = 0xE900000000000065;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::DeviceOrientation_optional sub_17EE9C(Swift::String *a1)
{
  return DeviceOrientation.init(rawValue:)(*a1);
}

void sub_17EEA8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x7469617274726F70;
  if (v2 != 1)
  {
    v5 = 0x70616373646E616CLL;
    v4 = 0xE900000000000065;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_17EF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17F080();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_17EF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17F080();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for DeviceOrientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_17F000 + 4 * byte_210FB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_17F034 + 4 * byte_210FB0[v4]))();
}

uint64_t sub_17F034(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17F03C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17F044);
  return result;
}

uint64_t sub_17F050(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17F058);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_17F05C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17F064(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceOrientation()
{
  return &type metadata for DeviceOrientation;
}

unint64_t sub_17F080()
{
  unint64_t result;

  result = qword_2A3948;
  if (!qword_2A3948)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeviceOrientation, &type metadata for DeviceOrientation);
    atomic_store(result, (unint64_t *)&qword_2A3948);
  }
  return result;
}

uint64_t sub_17F0C4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A3950, &enum case for SessionGroup.default(_:));
}

uint64_t static PageTurnSettingEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B48, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3950, a1);
}

uint64_t sub_17F104(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A3968, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PageTurnSettingEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B50, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3968, a1);
}

uint64_t PageTurnSettingEvent.pageTurnFeatureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A3980);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PageTurnSettingEvent.pageTurnFeatureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A3980);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t PageTurnSettingEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageTurnSettingEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PageTurnSettingEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A3A08, (uint64_t)&nominal type descriptor for PageTurnSettingEvent);
}

uint64_t PageTurnSettingEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageTurnSettingEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PageTurnSettingEvent.eventData.modify())()
{
  type metadata accessor for PageTurnSettingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PageTurnSettingEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A3980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for PageTurnSettingEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t PageTurnSettingEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageTurnSettingEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PageTurnSettingEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A3AA0, (uint64_t)&nominal type descriptor for PageTurnSettingEvent.Model);
}

uint64_t PageTurnSettingEvent.Model.init(pageTurnFeatureData:eventData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = &a3[*(int *)(type metadata accessor for PageTurnSettingEvent.Model(0) + 20)];
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_17F3BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0xD000000000000013;
}

uint64_t sub_17F400@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_180264(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17F424(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17F5D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17F44C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17F5D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageTurnSettingEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_2A3988);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_17F5D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageTurnSettingEvent.Model.CodingKeys, &type metadata for PageTurnSettingEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_17F61C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for PageTurnFeatureData, v12);
  if (!v2)
  {
    v13 = &v3[*(int *)(type metadata accessor for PageTurnSettingEvent.Model(0) + 20)];
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_17F5D8()
{
  unint64_t result;

  result = qword_2A3990;
  if (!qword_2A3990)
  {
    result = swift_getWitnessTable(byte_21127C, &type metadata for PageTurnSettingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3990);
  }
  return result;
}

unint64_t sub_17F61C()
{
  unint64_t result;

  result = qword_2A3998;
  if (!qword_2A3998)
  {
    result = swift_getWitnessTable("}\x1B\a", &type metadata for PageTurnFeatureData);
    atomic_store(result, (unint64_t *)&qword_2A3998);
  }
  return result;
}

uint64_t PageTurnSettingEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_2A39A0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageTurnSettingEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_17F5D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageTurnSettingEvent.Model.CodingKeys, &type metadata for PageTurnSettingEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = v8;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_17F8B4();
    v19 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for PageTurnFeatureData, &v33, v31, &type metadata for PageTurnFeatureData, v18);
    v24 = v14;
    *v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_17F8F8(v22, v21);
  }
  return sub_7DAC(a1);
}

unint64_t sub_17F8B4()
{
  unint64_t result;

  result = qword_2A39A8;
  if (!qword_2A39A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PageTurnFeatureData, &type metadata for PageTurnFeatureData);
    atomic_store(result, (unint64_t *)&qword_2A39A8);
  }
  return result;
}

uint64_t sub_17F8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageTurnSettingEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_17F93C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PageTurnSettingEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_17F950(_QWORD *a1)
{
  return PageTurnSettingEvent.Model.encode(to:)(a1);
}

uint64_t sub_17F964@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B48, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3950, (uint64_t)sub_17F0C4, a1);
}

uint64_t sub_17F988@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B50, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3968, (uint64_t)sub_17F104, a1);
}

uint64_t sub_17F9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A3980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for PageTurnSettingEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_2A3980);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for PageTurnSettingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_2A3980);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for PageTurnSettingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A3980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for PageTurnSettingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A3980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PageTurnSettingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A3980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for PageTurnSettingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A3980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageTurnSettingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17FD5C);
}

uint64_t sub_17FD5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_2A3980);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PageTurnSettingEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17FDE4);
}

uint64_t sub_17FDE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_2A3980);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_17FE68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_17FEEC(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_17FEEC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2A3A18)
  {
    v2 = sub_17F8B4();
    v3 = sub_17F61C();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for PageTurnFeatureData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2A3A18);
  }
}

uint64_t getEnumTagSinglePayload for PageTurnSettingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17FF5C);
}

uint64_t sub_17FF5C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PageTurnSettingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17FFDC);
}

_BYTE *sub_17FFDC(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_18004C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_2111A0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PageTurnSettingEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18010C + 4 * byte_2110D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_180140 + 4 * byte_2110D0[v4]))();
}

uint64_t sub_180140(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_180148(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x180150);
  return result;
}

uint64_t sub_18015C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x180164);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_180168(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_180170(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageTurnSettingEvent.Model.CodingKeys()
{
  return &type metadata for PageTurnSettingEvent.Model.CodingKeys;
}

unint64_t sub_180190()
{
  unint64_t result;

  result = qword_2A3AD8;
  if (!qword_2A3AD8)
  {
    result = swift_getWitnessTable("-/\a", &type metadata for PageTurnSettingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3AD8);
  }
  return result;
}

unint64_t sub_1801D8()
{
  unint64_t result;

  result = qword_2A3AE0;
  if (!qword_2A3AE0)
  {
    result = swift_getWitnessTable("u/\a", &type metadata for PageTurnSettingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3AE0);
  }
  return result;
}

unint64_t sub_180220()
{
  unint64_t result;

  result = qword_2A3AE8;
  if (!qword_2A3AE8)
  {
    result = swift_getWitnessTable("]/\a", &type metadata for PageTurnSettingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3AE8);
  }
  return result;
}

uint64_t sub_180264(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x8000000000222650;
    if (a2 == 0x8000000000222650)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000222650, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_18035C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E69646465626D65;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_18039C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_180A0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1803C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18057C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1803E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18057C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserEmbedding.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = sub_71B4(&qword_2A3AF0);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v16 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_18057C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserEmbedding.CodingKeys, &type metadata for UserEmbedding.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v20, v4);
  if (!v2)
  {
    v18 = v16;
    v19 = 1;
    v12 = sub_71B4(&qword_29E060);
    v13 = sub_F4D90(&qword_29E068, (uint64_t)&protocol witness table for Float, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

unint64_t sub_18057C()
{
  unint64_t result;

  result = qword_2A3AF8;
  if (!qword_2A3AF8)
  {
    result = swift_getWitnessTable("\r/\a", &type metadata for UserEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3AF8);
  }
  return result;
}

void UserEmbedding.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  BAEventReporter *v33;
  char v34;
  char v35;

  v5 = sub_71B4(&qword_2A3B00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_18057C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserEmbedding.CodingKeys, &type metadata for UserEmbedding.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v35 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v14 = v13;
    v15 = sub_71B4(&qword_29E060);
    v34 = 1;
    v16 = sub_F4D90(&qword_29E078, (uint64_t)&protocol witness table for Float, (const char *)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, v15, &v34, v5, v15, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v33;
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    a2[2] = (uint64_t)v17;
    swift_bridgeObjectRetain(v17);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(v14, v25, v26, v27, v28, v29, v30, v31);
  }
}

unint64_t sub_1807A4()
{
  unint64_t result;

  result = qword_2A3B08;
  if (!qword_2A3B08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UserEmbedding, &type metadata for UserEmbedding);
    atomic_store(result, (unint64_t *)&qword_2A3B08);
  }
  return result;
}

unint64_t sub_1807EC()
{
  unint64_t result;

  result = qword_2A3B10;
  if (!qword_2A3B10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UserEmbedding, &type metadata for UserEmbedding);
    atomic_store(result, (unint64_t *)&qword_2A3B10);
  }
  return result;
}

void sub_180830(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  UserEmbedding.init(from:)(a1, a2);
}

uint64_t sub_180844(_QWORD *a1)
{
  return UserEmbedding.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for UserEmbedding()
{
  return &type metadata for UserEmbedding;
}

uint64_t storeEnumTagSinglePayload for UserEmbedding.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1808B4 + 4 * byte_2112D1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1808E8 + 4 * byte_2112CC[v4]))();
}

uint64_t sub_1808E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1808F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1808F8);
  return result;
}

uint64_t sub_180904(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18090CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_180910(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_180918(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserEmbedding.CodingKeys()
{
  return &type metadata for UserEmbedding.CodingKeys;
}

unint64_t sub_180938()
{
  unint64_t result;

  result = qword_2A3B18;
  if (!qword_2A3B18)
  {
    result = swift_getWitnessTable(byte_211444, &type metadata for UserEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B18);
  }
  return result;
}

unint64_t sub_180980()
{
  unint64_t result;

  result = qword_2A3B20;
  if (!qword_2A3B20)
  {
    result = swift_getWitnessTable("}/\a", &type metadata for UserEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B20);
  }
  return result;
}

unint64_t sub_1809C8()
{
  unint64_t result;

  result = qword_2A3B28;
  if (!qword_2A3B28)
  {
    result = swift_getWitnessTable("e/\a", &type metadata for UserEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B28);
  }
  return result;
}

uint64_t sub_180A0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E69646465626D65 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease(0xE900000000000067);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E69646465626D65, 0xE900000000000067, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t static DragDropData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_66EC0(*a1, *a2);
}

uint64_t sub_180B14()
{
  return 0x706F724467617264;
}

uint64_t sub_180B38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x706F724467617264 && a2 == 0xEF7972616D6D7553)
  {
    result = swift_bridgeObjectRelease(0xEF7972616D6D7553);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x706F724467617264, 0xEF7972616D6D7553, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_180BF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_180D60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_180C18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_180D60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DragDropData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_2A3B30);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_180D60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DragDropData.CodingKeys, &type metadata for DragDropData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_2A3B40);
  v12 = sub_180F28(&qword_2A3B48, (uint64_t (*)(void))sub_180DA4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_180D60()
{
  unint64_t result;

  result = qword_2A3B38;
  if (!qword_2A3B38)
  {
    result = swift_getWitnessTable(byte_211658, &type metadata for DragDropData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B38);
  }
  return result;
}

unint64_t sub_180DA4()
{
  unint64_t result;

  result = qword_2A3B50;
  if (!qword_2A3B50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DragDropItemData, &type metadata for DragDropItemData);
    atomic_store(result, (unint64_t *)&qword_2A3B50);
  }
  return result;
}

uint64_t DragDropData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A3B58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_180D60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DragDropData.CodingKeys, &type metadata for DragDropData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_2A3B40);
    v13 = sub_180F28(&qword_2A3B60, (uint64_t (*)(void))sub_180F90, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_180F28(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_2A3B40);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_180F90()
{
  unint64_t result;

  result = qword_2A3B68;
  if (!qword_2A3B68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DragDropItemData, &type metadata for DragDropItemData);
    atomic_store(result, (unint64_t *)&qword_2A3B68);
  }
  return result;
}

uint64_t sub_180FDC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return DragDropData.init(from:)(a1, a2);
}

uint64_t sub_180FF0(_QWORD *a1)
{
  return DragDropData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for DragDropData()
{
  return &type metadata for DragDropData;
}

uint64_t storeEnumTagSinglePayload for DragDropData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181054 + 4 * byte_2114BC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181074 + 4 * byte_2114C1[v4]))();
}

_BYTE *sub_181054(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181074(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18107C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181084(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18108C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181094(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DragDropData.CodingKeys()
{
  return &type metadata for DragDropData.CodingKeys;
}

unint64_t sub_1810B4()
{
  unint64_t result;

  result = qword_2A3B70;
  if (!qword_2A3B70)
  {
    result = swift_getWitnessTable("a.\a", &type metadata for DragDropData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B70);
  }
  return result;
}

unint64_t sub_1810FC()
{
  unint64_t result;

  result = qword_2A3B78;
  if (!qword_2A3B78)
  {
    result = swift_getWitnessTable("!/\a", &type metadata for DragDropData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B78);
  }
  return result;
}

unint64_t sub_181144()
{
  unint64_t result;

  result = qword_2A3B80;
  if (!qword_2A3B80)
  {
    result = swift_getWitnessTable("\t/\a", &type metadata for DragDropData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B80);
  }
  return result;
}

void __swiftcall BrickData.init(name:positionInSection:brickID:)(BookAnalytics::BrickData *__return_ptr retstr, Swift::String name, Swift::Int32 positionInSection, Swift::String brickID)
{
  retstr->name = name;
  retstr->positionInSection = positionInSection;
  retstr->brickID = brickID;
}

uint64_t sub_18119C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0x44496B63697262;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_1811F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_181988(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_181218(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_181684();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_181240(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_181684();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BrickData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  char v23;
  char v24;

  v3 = sub_71B4(&qword_2A3B88);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v21 = *((_DWORD *)v1 + 4);
  v9 = v1[3];
  v18 = v1[4];
  v19 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_181684();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BrickData.CodingKeys, &type metadata for BrickData.CodingKeys, v12, v10, v11);
  v24 = 0;
  v13 = v20;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v7, &v24, v3);
  if (!v13)
  {
    v15 = v18;
    v14 = v19;
    v23 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v23, v3);
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void BrickData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  char v38;

  v5 = sub_71B4(&qword_2A3B98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_181684();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BrickData.CodingKeys, &type metadata for BrickData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v38 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
    v14 = v13;
    v37 = 1;
    swift_bridgeObjectRetain(v13);
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
    v36 = 2;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26 = v15;
    v25(v8, v5);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v35;
    *(_QWORD *)(a2 + 24) = v26;
    *(_QWORD *)(a2 + 32) = v24;
    swift_bridgeObjectRetain(v24);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v24, v27, v28, v29, v30, v31, v32, v33);
    swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
  }
}

void sub_18159C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  BrickData.init(from:)(a1, a2);
}

uint64_t sub_1815B0(_QWORD *a1)
{
  return BrickData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics9BrickDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v7 = a1[3];
  v8 = a1[4];
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  if (v4 == *(_QWORD *)a2 && v5 == v9)
  {
    if (v6 != v10)
      return 0;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v9, 0);
    result = 0;
    if ((v14 & 1) == 0 || v6 != v10)
      return result;
  }
  if (v7 == v11 && v8 == v12)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0);
}

unint64_t sub_181684()
{
  unint64_t result;

  result = qword_2A3B90;
  if (!qword_2A3B90)
  {
    result = swift_getWitnessTable(byte_211848, &type metadata for BrickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3B90);
  }
  return result;
}

uint64_t initializeWithCopy for BrickData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for BrickData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for BrickData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for BrickData()
{
  return &type metadata for BrickData;
}

uint64_t storeEnumTagSinglePayload for BrickData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181830 + 4 * byte_2116AD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181864 + 4 * byte_2116A8[v4]))();
}

uint64_t sub_181864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18186C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181874);
  return result;
}

uint64_t sub_181880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181888);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18188C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrickData.CodingKeys()
{
  return &type metadata for BrickData.CodingKeys;
}

unint64_t sub_1818B4()
{
  unint64_t result;

  result = qword_2A3BA0;
  if (!qword_2A3BA0)
  {
    result = swift_getWitnessTable("a.\a", &type metadata for BrickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3BA0);
  }
  return result;
}

unint64_t sub_1818FC()
{
  unint64_t result;

  result = qword_2A3BA8;
  if (!qword_2A3BA8)
  {
    result = swift_getWitnessTable("!/\a", &type metadata for BrickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3BA8);
  }
  return result;
}

unint64_t sub_181944()
{
  unint64_t result;

  result = qword_2A3BB0;
  if (!qword_2A3BB0)
  {
    result = swift_getWitnessTable("\t/\a", &type metadata for BrickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3BB0);
  }
  return result;
}

uint64_t sub_181988(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x800000000021ECA0;
    if (a2 == 0x800000000021ECA0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021ECA0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x44496B63697262 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496B63697262, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::OnDevicePersonalizationUserStatus_optional __swiftcall OnDevicePersonalizationUserStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::OnDevicePersonalizationUserStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2686F8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t OnDevicePersonalizationUserStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B54 + 4 * byte_2118A0[*v0]))(0x6967696C45746F6ELL, 0xEB00000000656C62);
}

uint64_t sub_181B54()
{
  return 0x656C626967696C65;
}

uint64_t sub_181B6C()
{
  return 0x736B6F6F62;
}

uint64_t sub_181B80()
{
  return 0x6F6F626F69647561;
}

void sub_181B9C(char *a1)
{
  sub_26ABC(*a1);
}

unint64_t sub_181BAC()
{
  unint64_t result;

  result = qword_2A3BB8;
  if (!qword_2A3BB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OnDevicePersonalizationUserStatus, &type metadata for OnDevicePersonalizationUserStatus);
    atomic_store(result, (unint64_t *)&qword_2A3BB8);
  }
  return result;
}

void sub_181BF0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_181C44()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C626967696C65, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_181CB4()
{
  __asm { BR              X10 }
}

uint64_t sub_181CF8(uint64_t a1)
{
  String.hash(into:)(a1, 0x656C626967696C65, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_181D54(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_181DA4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C626967696C65, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

BookAnalytics::OnDevicePersonalizationUserStatus_optional sub_181E14(Swift::String *a1)
{
  return OnDevicePersonalizationUserStatus.init(rawValue:)(*a1);
}

uint64_t sub_181E20()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E58 + 4 * byte_2118B0[*v0]))();
}

void sub_181E58(_QWORD *a1@<X8>)
{
  *a1 = 0x656C626967696C65;
  a1[1] = 0xE800000000000000;
}

void sub_181E74(_QWORD *a1@<X8>)
{
  *a1 = 0x736B6F6F62;
  a1[1] = 0xE500000000000000;
}

void sub_181E8C(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6F626F69647561;
  a1[1] = 0xEA0000000000736BLL;
}

uint64_t sub_181EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_182020();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_181F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_182020();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for OnDevicePersonalizationUserStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181FA0 + 4 * byte_2118B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181FD4 + 4 * byte_2118B4[v4]))();
}

uint64_t sub_181FD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181FDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181FE4);
  return result;
}

uint64_t sub_181FF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181FF8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181FFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182004(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnDevicePersonalizationUserStatus()
{
  return &type metadata for OnDevicePersonalizationUserStatus;
}

unint64_t sub_182020()
{
  unint64_t result;

  result = qword_2A3BC0;
  if (!qword_2A3BC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OnDevicePersonalizationUserStatus, &type metadata for OnDevicePersonalizationUserStatus);
    atomic_store(result, (unint64_t *)&qword_2A3BC0);
  }
  return result;
}

uint64_t sub_182064(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A3BC8, &enum case for SessionGroup.default(_:));
}

uint64_t static RedownloadCompleteEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B58, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3BC8, a1);
}

uint64_t sub_1820A4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A3BE0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RedownloadCompleteEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B60, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3BE0, a1);
}

uint64_t RedownloadCompleteEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RedownloadCompleteEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A3C68, (uint64_t)&nominal type descriptor for RedownloadCompleteEvent);
}

uint64_t RedownloadCompleteEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadCompleteEvent.contentStoreData.modify())()
{
  type metadata accessor for RedownloadCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadCompleteEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadCompleteEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadCompleteEvent.sectionData.modify())()
{
  type metadata accessor for RedownloadCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadCompleteEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadCompleteEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadCompleteEvent.eventData.modify())()
{
  type metadata accessor for RedownloadCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadCompleteEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadCompleteEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadCompleteEvent.timedData.modify())()
{
  type metadata accessor for RedownloadCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadCompleteEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RedownloadCompleteEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t RedownloadCompleteEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RedownloadCompleteEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A3D08, (uint64_t)&nominal type descriptor for RedownloadCompleteEvent.Model);
}

uint64_t RedownloadCompleteEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadCompleteEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadCompleteEvent.Model.init(contentData:contentStoreData:sectionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  char v16;
  int v17;
  char v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  v11 = *(_OWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_WORD *)(a1 + 56);
  v15 = *(_DWORD *)(a1 + 60);
  v16 = *(_BYTE *)(a1 + 64);
  v17 = *(_DWORD *)(a1 + 68);
  v18 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_QWORD *)(a6 + 8) = v9;
  *(_BYTE *)(a6 + 16) = v10;
  *(_OWORD *)(a6 + 24) = v11;
  *(_QWORD *)(a6 + 40) = v12;
  *(_QWORD *)(a6 + 48) = v13;
  *(_WORD *)(a6 + 56) = v14;
  *(_DWORD *)(a6 + 60) = v15;
  *(_BYTE *)(a6 + 64) = v16;
  *(_DWORD *)(a6 + 68) = v17;
  *(_BYTE *)(a6 + 72) = v18;
  v19 = *(_DWORD *)(a1 + 73);
  v20 = *a2;
  v21 = a2[1];
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a6 + 96) = v20;
  v22 = a2[2];
  v23 = a2[3];
  *(_OWORD *)(a6 + 112) = v21;
  *(_OWORD *)(a6 + 128) = v22;
  *(_OWORD *)(a6 + 144) = v23;
  v24 = a3[1];
  *(_OWORD *)(a6 + 168) = *a3;
  *(_OWORD *)(a6 + 184) = v24;
  v25 = a3[3];
  *(_OWORD *)(a6 + 200) = a3[2];
  *(_OWORD *)(a6 + 216) = v25;
  v26 = a3[5];
  *(_OWORD *)(a6 + 232) = a3[4];
  v27 = *(_BYTE *)(a1 + 77);
  LODWORD(v12) = *((_DWORD *)a2 + 16);
  LOBYTE(v13) = *((_BYTE *)a2 + 68);
  *(_DWORD *)(a6 + 73) = v19;
  *(_BYTE *)(a6 + 77) = v27;
  *(_BYTE *)(a6 + 164) = v13;
  *(_DWORD *)(a6 + 160) = v12;
  *(_OWORD *)(a6 + 248) = v26;
  *(_OWORD *)(a6 + 264) = a3[6];
  v28 = type metadata accessor for RedownloadCompleteEvent.Model(0);
  v29 = a6 + *(int *)(v28 + 28);
  v30 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a4, v30);
  v31 = a6 + *(int *)(v28 + 32);
  v32 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v31, a5, v32);
}

uint64_t sub_1826F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182730 + 4 * byte_211A00[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_182730()
{
  return 0xD000000000000010;
}

uint64_t sub_18274C()
{
  return 0x446E6F6974636573;
}

uint64_t sub_182760()
{
  return 0x746144746E657665;
}

uint64_t sub_18278C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_184E1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1827B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_182ADC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1827D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_182ADC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RedownloadCompleteEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  _BYTE v46[32];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A3BF8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v46[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_182ADC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RedownloadCompleteEvent.Model.CodingKeys, &type metadata for RedownloadCompleteEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v45 = *(_QWORD *)v4;
  *((_QWORD *)&v45 + 1) = v13;
  v46[0] = v14;
  *(_OWORD *)&v46[8] = v15;
  *(_QWORD *)&v46[24] = v16;
  *(_QWORD *)&v47 = v17;
  WORD4(v47) = v18;
  HIDWORD(v47) = v19;
  LOBYTE(v48) = v20;
  DWORD1(v48) = v21;
  BYTE8(v48) = v22;
  *(_DWORD *)((char *)&v48 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v48) = v23;
  v49 = *(_OWORD *)(v4 + 80);
  v51 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v51, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v45 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v46 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v46[16] = *(_OWORD *)(v4 + 128);
    v47 = v28;
    BYTE4(v48) = v26;
    LODWORD(v48) = v25;
    v51 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, &v51, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_OWORD *)(v4 + 184);
    v31 = *(_OWORD *)(v4 + 200);
    v45 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v46 = v30;
    v32 = *(_OWORD *)(v4 + 216);
    v33 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)&v46[16] = v31;
    v47 = v32;
    v34 = *(_OWORD *)(v4 + 248);
    v35 = *(_OWORD *)(v4 + 264);
    v48 = v33;
    v49 = v34;
    v50 = v35;
    v51 = 2;
    v36 = sub_1B768();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, &v51, v6, &type metadata for SectionData, v36);
    v37 = type metadata accessor for RedownloadCompleteEvent.Model(0);
    v38 = v4 + *(int *)(v37 + 28);
    LOBYTE(v45) = 3;
    v39 = type metadata accessor for EventData(0);
    v40 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v38, &v45, v6, v39, v40);
    v41 = v4 + *(int *)(v37 + 32);
    LOBYTE(v45) = 4;
    v42 = type metadata accessor for TimedData(0);
    v43 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v41, &v45, v6, v42, v43);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_182ADC()
{
  unint64_t result;

  result = qword_2A3C00;
  if (!qword_2A3C00)
  {
    result = swift_getWitnessTable("U-\a", &type metadata for RedownloadCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3C00);
  }
  return result;
}

void RedownloadCompleteEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD v50[2];
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  _BYTE v62[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;

  v52 = a2;
  v57 = type metadata accessor for TimedData(0);
  v53 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v54 = (_QWORD *)((char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = sub_71B4(&qword_2A3C08);
  v7 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RedownloadCompleteEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_182ADC();
  v59 = v9;
  v16 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RedownloadCompleteEvent.Model.CodingKeys, &type metadata for RedownloadCompleteEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(a1);
  }
  else
  {
    v51 = v6;
    v17 = v7;
    v18 = v12;
    v60 = v10;
    v19 = v56;
    v20 = v57;
    v67 = 0;
    v21 = sub_1779C();
    v22 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for ContentData, &v67, v58, &type metadata for ContentData, v21);
    v23 = *((_QWORD *)&v61 + 1);
    v24 = v62[0];
    v25 = *(_OWORD *)&v62[8];
    v26 = *(_QWORD *)&v62[24];
    v27 = v63;
    v28 = WORD4(v63);
    v29 = HIDWORD(v63);
    v30 = v64;
    v31 = DWORD1(v64);
    v32 = BYTE8(v64);
    v33 = BYTE13(v64);
    *(_QWORD *)v18 = v61;
    *((_QWORD *)v18 + 1) = v23;
    v18[16] = v24;
    *(_OWORD *)(v18 + 24) = v25;
    *((_QWORD *)v18 + 5) = v26;
    *((_QWORD *)v18 + 6) = v27;
    *((_WORD *)v18 + 28) = v28;
    *((_DWORD *)v18 + 15) = v29;
    v18[64] = v30;
    *((_DWORD *)v18 + 17) = v31;
    v18[72] = v32;
    *(_DWORD *)(v18 + 73) = *(_DWORD *)((char *)&v64 + 9);
    v18[77] = v33;
    *((_OWORD *)v18 + 5) = v65;
    v67 = 1;
    v34 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, &type metadata for ContentStoreData, &v67, v22, &type metadata for ContentStoreData, v34);
    v35 = v64;
    v36 = BYTE4(v64);
    v37 = *(_OWORD *)v62;
    *((_OWORD *)v18 + 6) = v61;
    *((_OWORD *)v18 + 7) = v37;
    v38 = v63;
    *((_OWORD *)v18 + 8) = *(_OWORD *)&v62[16];
    *((_OWORD *)v18 + 9) = v38;
    v18[164] = v36;
    *((_DWORD *)v18 + 40) = v35;
    v67 = 2;
    v39 = sub_1BFE4();
    v50[1] = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, &type metadata for SectionData, &v67, v22, &type metadata for SectionData, v39);
    v40 = *(_OWORD *)v62;
    *(_OWORD *)(v18 + 168) = v61;
    v41 = *(_OWORD *)&v62[16];
    v42 = v63;
    *(_OWORD *)(v18 + 184) = v40;
    *(_OWORD *)(v18 + 200) = v41;
    v43 = v64;
    v44 = v65;
    *(_OWORD *)(v18 + 216) = v42;
    *(_OWORD *)(v18 + 232) = v43;
    v45 = v66;
    *(_OWORD *)(v18 + 248) = v44;
    *(_OWORD *)(v18 + 264) = v45;
    LOBYTE(v61) = 3;
    v46 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v50[0] = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v19, &v61, v22, v19, v46);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v55 + 32))(v50[0] + *(int *)(v60 + 28), v51, v19);
    LOBYTE(v61) = 4;
    v47 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v48 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v20, &v61, v22, v20, v47);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v59, v58);
    v49 = v50[0];
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v53 + 32))(v50[0] + *(int *)(v60 + 32), v48, v20);
    sub_1830CC(v49, v52);
    sub_7DAC(a1);
    sub_183110(v49);
  }
}

uint64_t sub_1830CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RedownloadCompleteEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_183110(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RedownloadCompleteEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_18314C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RedownloadCompleteEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_183160(_QWORD *a1)
{
  return RedownloadCompleteEvent.Model.encode(to:)(a1);
}

uint64_t sub_183174@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B58, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3BC8, (uint64_t)sub_182064, a1);
}

uint64_t sub_183198@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B60, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3BE0, (uint64_t)sub_1820A4, a1);
}

uint64_t sub_1831BC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for RedownloadCompleteEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A00);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for RedownloadCompleteEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for RedownloadCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for RedownloadCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for RedownloadCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for RedownloadCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedownloadCompleteEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18397C);
}

uint64_t sub_18397C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RedownloadCompleteEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_183A7C);
}

uint64_t sub_183A7C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_183B78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RedownloadCompleteEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[17];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      v13 = a2[13];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v13;
      v14 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v12;
      v15 = a2[19];
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_QWORD *)(a1 + 152) = v15;
      *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
      *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v15);
      v16 = a2[23];
      if (v16)
      {
LABEL_4:
        *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
        *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
        *(_QWORD *)(a1 + 176) = a2[22];
        *(_QWORD *)(a1 + 184) = v16;
        v17 = a2[25];
        *(_QWORD *)(a1 + 192) = a2[24];
        *(_QWORD *)(a1 + 200) = v17;
        v18 = a2[27];
        *(_QWORD *)(a1 + 208) = a2[26];
        *(_QWORD *)(a1 + 216) = v18;
        v19 = a2[29];
        *(_QWORD *)(a1 + 224) = a2[28];
        *(_QWORD *)(a1 + 232) = v19;
        v20 = a2[31];
        *(_QWORD *)(a1 + 240) = a2[30];
        *(_QWORD *)(a1 + 248) = v20;
        *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
        *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
        v21 = a2[34];
        *(_QWORD *)(a1 + 264) = a2[33];
        *(_QWORD *)(a1 + 272) = v21;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
LABEL_8:
        v28 = *(int *)(a3 + 28);
        v29 = a1 + v28;
        v30 = (uint64_t)a2 + v28;
        v31 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        v32 = *(int *)(a3 + 32);
        v33 = a1 + v32;
        v34 = (uint64_t)a2 + v32;
        v35 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
        return a1;
      }
    }
    else
    {
      v23 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v23;
      *(_QWORD *)(a1 + 157) = *(uint64_t *)((char *)a2 + 157);
      v24 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v24;
      v16 = a2[23];
      if (v16)
        goto LABEL_4;
    }
    v25 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v25;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    v26 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(a1 + 184) = v26;
    v27 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = v27;
    goto LABEL_8;
  }
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v22);
  return a1;
}

uint64_t destroy for RedownloadCompleteEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = a1[17];
  if (v4)
  {
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = a1[23];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[25]);
    swift_bridgeObjectRelease(a1[27]);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v7 = (char *)a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)a1 + *(int *)(a2 + 32);
  v10 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for RedownloadCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (!v11)
  {
    v21 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v22;
    v15 = *(_QWORD *)(a2 + 184);
    if (v15)
      goto LABEL_3;
LABEL_5:
    v23 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v23;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    v24 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v24;
    v25 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v25;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v15 = *(_QWORD *)(a2 + 184);
  if (!v15)
    goto LABEL_5;
LABEL_3:
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v15;
  v16 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v16;
  v17 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v17;
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v18;
  v19 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v19;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v20 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v20;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
LABEL_6:
  v26 = *(int *)(a3 + 28);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  v30 = *(int *)(a3 + 32);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

uint64_t assignWithCopy for RedownloadCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  BAEventReporter *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  uint64_t v56;
  BAEventReporter *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  uint64_t v65;
  BAEventReporter *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  uint64_t v74;
  BAEventReporter *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  _OWORD *v96;
  BAEventReporter *v97;
  uint64_t v98;
  uint64_t v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  uint64_t v125;
  BAEventReporter *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  int64_t v131;
  int64_t v132;
  id v133;
  uint64_t v134;
  BAEventReporter *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  int64_t v140;
  int64_t v141;
  id v142;
  int v143;
  uint64_t v144;
  BAEventReporter *v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  int64_t v150;
  int64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v44 = (_OWORD *)(a1 + 96);
  v45 = (_OWORD *)(a2 + 96);
  v46 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v46)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v47 = *(_QWORD *)(a2 + 104);
      v48 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v56 = *(_QWORD *)(a2 + 120);
      v57 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v65 = *(_QWORD *)(a2 + 136);
      v66 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v74 = *(_QWORD *)(a2 + 152);
      v75 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      v83 = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_DWORD *)(a1 + 160) = v83;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 96));
      *v44 = *v45;
      v90 = *(_OWORD *)(a2 + 128);
      v89 = *(_OWORD *)(a2 + 144);
      v91 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
      *(_OWORD *)(a1 + 128) = v90;
      *(_OWORD *)(a1 + 144) = v89;
      *(_OWORD *)(a1 + 112) = v91;
    }
  }
  else if (v46)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v84 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v84;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v85 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v85;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v86 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v86;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v87 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v87;
    v88 = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v88;
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v87);
  }
  else
  {
    *v44 = *v45;
    v92 = *(_OWORD *)(a2 + 112);
    v93 = *(_OWORD *)(a2 + 128);
    v94 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_OWORD *)(a1 + 128) = v93;
    *(_OWORD *)(a1 + 144) = v94;
    *(_OWORD *)(a1 + 112) = v92;
  }
  v95 = (_OWORD *)(a1 + 168);
  v96 = (_OWORD *)(a2 + 168);
  v97 = *(BAEventReporter **)(a1 + 184);
  v98 = *(_QWORD *)(a2 + 184);
  if (v97)
  {
    if (v98)
    {
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v99 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 184) = v99;
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRelease(v97, v100, v101, v102, v103, v104, v105, v106);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v107 = *(_QWORD *)(a2 + 200);
      v108 = *(BAEventReporter **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v107;
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v116 = *(_QWORD *)(a2 + 216);
      v117 = *(BAEventReporter **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v116;
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v125 = *(_QWORD *)(a2 + 232);
      v126 = *(BAEventReporter **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v125;
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v134 = *(_QWORD *)(a2 + 248);
      v135 = *(BAEventReporter **)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
      v143 = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      *(_DWORD *)(a1 + 256) = v143;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v144 = *(_QWORD *)(a2 + 272);
      v145 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v144;
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRelease(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      sub_1DFF8((_QWORD *)(a1 + 168));
      v161 = *(_OWORD *)(a2 + 184);
      v160 = *(_OWORD *)(a2 + 200);
      *v95 = *v96;
      *(_OWORD *)(a1 + 184) = v161;
      *(_OWORD *)(a1 + 200) = v160;
      v162 = *(_OWORD *)(a2 + 264);
      v164 = *(_OWORD *)(a2 + 216);
      v163 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v162;
      *(_OWORD *)(a1 + 216) = v164;
      *(_OWORD *)(a1 + 232) = v163;
    }
  }
  else if (v98)
  {
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v153 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v153;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v154 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v154;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v155 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v155;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v156 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v156;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v157 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v157;
    v158 = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    *(_DWORD *)(a1 + 256) = v158;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v159 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v159;
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v154);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v159);
  }
  else
  {
    v165 = *v96;
    v166 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v166;
    *v95 = v165;
    v167 = *(_OWORD *)(a2 + 216);
    v168 = *(_OWORD *)(a2 + 232);
    v169 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v169;
    *(_OWORD *)(a1 + 216) = v167;
    *(_OWORD *)(a1 + 232) = v168;
  }
  v170 = *(int *)(a3 + 28);
  v171 = a1 + v170;
  v172 = a2 + v170;
  v173 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 24))(v171, v172, v173);
  v174 = *(int *)(a3 + 32);
  v175 = a1 + v174;
  v176 = a2 + v174;
  v177 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v177 - 8) + 24))(v175, v176, v177);
  return a1;
}

uint64_t initializeWithTake for RedownloadCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = *(int *)(a3 + 32);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for RedownloadCompleteEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  BAEventReporter *v49;
  uint64_t v50;
  BAEventReporter *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  int64_t v56;
  int64_t v57;
  id v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  __int128 v76;
  __int128 v77;
  BAEventReporter *v78;
  uint64_t v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  if (*(_QWORD *)(a1 + 136))
  {
    v47 = *(_QWORD *)(a2 + 136);
    if (v47)
    {
      v48 = *(_QWORD *)(a2 + 104);
      v49 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v48;
      swift_bridgeObjectRelease(v49, v40, v41, v42, v43, v44, v45, v46);
      v50 = *(_QWORD *)(a2 + 120);
      v51 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v50;
      swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
      v59 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v47;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 152);
      v68 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      goto LABEL_6;
    }
    sub_59D40((_QWORD *)(a1 + 96));
  }
  v76 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v76;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v77 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v77;
LABEL_6:
  v78 = *(BAEventReporter **)(a1 + 184);
  if (!v78)
  {
LABEL_10:
    v125 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v125;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    v126 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v126;
    v127 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v127;
    goto LABEL_11;
  }
  v79 = *(_QWORD *)(a2 + 184);
  if (!v79)
  {
    sub_1DFF8((_QWORD *)(a1 + 168));
    goto LABEL_10;
  }
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v79;
  swift_bridgeObjectRelease(v78, v40, v41, v42, v43, v44, v45, v46);
  v80 = *(_QWORD *)(a2 + 200);
  v81 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v80;
  swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
  v89 = *(_QWORD *)(a2 + 216);
  v90 = *(BAEventReporter **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v89;
  swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
  v98 = *(_QWORD *)(a2 + 232);
  v99 = *(BAEventReporter **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v98;
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  v107 = *(_QWORD *)(a2 + 248);
  v108 = *(BAEventReporter **)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v107;
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v116 = *(_QWORD *)(a2 + 272);
  v117 = *(BAEventReporter **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v116;
  swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
LABEL_11:
  v128 = a3[7];
  v129 = a1 + v128;
  v130 = a2 + v128;
  v131 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 40))(v129, v130, v131);
  v132 = a3[8];
  v133 = a1 + v132;
  v134 = a2 + v132;
  v135 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 40))(v133, v134, v135);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedownloadCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_184A8C);
}

uint64_t sub_184A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RedownloadCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_184B38);
}

uint64_t sub_184B38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_184BD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[1] = &unk_211B18;
  v5[2] = &unk_211B30;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RedownloadCompleteEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_184CC4 + 4 * byte_211A0A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_184CF8 + 4 * byte_211A05[v4]))();
}

uint64_t sub_184CF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_184D00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x184D08);
  return result;
}

uint64_t sub_184D14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x184D1CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_184D20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_184D28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RedownloadCompleteEvent.Model.CodingKeys()
{
  return &type metadata for RedownloadCompleteEvent.Model.CodingKeys;
}

unint64_t sub_184D48()
{
  unint64_t result;

  result = qword_2A3D50;
  if (!qword_2A3D50)
  {
    result = swift_getWitnessTable("m-\a", &type metadata for RedownloadCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3D50);
  }
  return result;
}

unint64_t sub_184D90()
{
  unint64_t result;

  result = qword_2A3D58;
  if (!qword_2A3D58)
  {
    result = swift_getWitnessTable(byte_211B54, &type metadata for RedownloadCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3D58);
  }
  return result;
}

unint64_t sub_184DD8()
{
  unint64_t result;

  result = qword_2A3D60;
  if (!qword_2A3D60)
  {
    result = swift_getWitnessTable(byte_211B7C, &type metadata for RedownloadCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3D60);
  }
  return result;
}

uint64_t sub_184E1C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v8 = 0xEB00000000617461;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_18506C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A3D68, &enum case for SessionGroup.default(_:));
}

uint64_t static NotificationEngagementEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B68, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3D68, a1);
}

uint64_t sub_1850AC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A3D80, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static NotificationEngagementEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B70, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3D80, a1);
}

uint64_t NotificationEngagementEvent.notificationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29CF30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t NotificationEngagementEvent.notificationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29CF30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t NotificationEngagementEvent.notificationEngagementData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationEngagementEvent(0) + 20);
  v4 = sub_71B4(&qword_2A3D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for NotificationEngagementEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A3E10, (uint64_t)&nominal type descriptor for NotificationEngagementEvent);
}

uint64_t NotificationEngagementEvent.notificationEngagementData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationEngagementEvent(0) + 20);
  v4 = sub_71B4(&qword_2A3D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NotificationEngagementEvent.notificationEngagementData.modify())()
{
  type metadata accessor for NotificationEngagementEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t NotificationEngagementEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationEngagementEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NotificationEngagementEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationEngagementEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NotificationEngagementEvent.eventData.modify())()
{
  type metadata accessor for NotificationEngagementEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t NotificationEngagementEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for NotificationEngagementEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_2A3D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t NotificationEngagementEvent.Model.notificationData.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)v1 + 2);
  v3 = *((_WORD *)v1 + 12);
  v4 = *((_BYTE *)v1 + 26);
  v5 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 7);
  v6 = *((_QWORD *)v1 + 8);
  v8 = *((_QWORD *)v1 + 11);
  v9 = *v1;
  *(_OWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 26) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v10 = *(__int128 *)((char *)v1 + 40);
  *(_OWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v6;
  v11 = *(__int128 *)((char *)v1 + 72);
  *(_OWORD *)(a1 + 72) = v11;
  v12 = v9;
  v13 = v10;
  v14 = v11;
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v7);
  return swift_bridgeObjectRetain(v14);
}

uint64_t NotificationEngagementEvent.Model.notificationEngagementData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(_BYTE *)(v1 + 128);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 96);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v4);
  return swift_bridgeObjectRetain(v3);
}

uint64_t NotificationEngagementEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationEngagementEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for NotificationEngagementEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A3EB0, (uint64_t)&nominal type descriptor for NotificationEngagementEvent.Model);
}

uint64_t NotificationEngagementEvent.Model.init(notificationData:notificationEngagementData:eventData:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_WORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 26);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *a2;
  v12 = *(_OWORD *)(a2 + 8);
  v13 = *((_QWORD *)a2 + 3);
  v14 = a2[32];
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = v6;
  *(_WORD *)(a4 + 24) = v7;
  *(_BYTE *)(a4 + 26) = v8;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a4 + 48) = v9;
  *(_QWORD *)(a4 + 56) = v10;
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v15;
  *(_BYTE *)(a4 + 96) = v11;
  *(_OWORD *)(a4 + 104) = v12;
  *(_QWORD *)(a4 + 120) = v13;
  *(_BYTE *)(a4 + 128) = v14;
  v16 = a4 + *(int *)(type metadata accessor for NotificationEngagementEvent.Model(0) + 24);
  v17 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
}

unint64_t sub_185590()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001ALL;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1855F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_186D44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_185618(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_185854();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_185640(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_185854();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NotificationEngagementEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  _BYTE v29[24];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v3 = v1;
  v5 = sub_71B4(&qword_2A3DA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_185854();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationEngagementEvent.Model.CodingKeys, &type metadata for NotificationEngagementEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_WORD *)(v3 + 24);
  v14 = *(_BYTE *)(v3 + 26);
  v15 = *(_QWORD *)(v3 + 48);
  v16 = *(_QWORD *)(v3 + 56);
  *(_OWORD *)v29 = *(_OWORD *)v3;
  *(_QWORD *)&v29[16] = v12;
  LOWORD(v30) = v13;
  BYTE2(v30) = v14;
  v31 = *(_OWORD *)(v3 + 32);
  v32 = v15;
  v33 = v16;
  v17 = *(_OWORD *)(v3 + 80);
  v34 = *(_OWORD *)(v3 + 64);
  v35 = v17;
  v28 = 0;
  v18 = sub_787D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v5, &type metadata for NotificationData, v18);
  if (!v2)
  {
    v19 = *(_OWORD *)(v3 + 104);
    v20 = *(_QWORD *)(v3 + 120);
    v21 = *(_BYTE *)(v3 + 128);
    v29[0] = *(_BYTE *)(v3 + 96);
    *(_OWORD *)&v29[8] = v19;
    v30 = v20;
    LOBYTE(v31) = v21;
    v28 = 1;
    v22 = sub_7CA98();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v5, &type metadata for NotificationEngagementData, v22);
    v23 = v3 + *(int *)(type metadata accessor for NotificationEngagementEvent.Model(0) + 24);
    v29[0] = 2;
    v24 = type metadata accessor for EventData(0);
    v25 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, v29, v5, v24, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_185854()
{
  unint64_t result;

  result = qword_2A3DA8;
  if (!qword_2A3DA8)
  {
    result = swift_getWitnessTable(byte_211E3C, &type metadata for NotificationEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3DA8);
  }
  return result;
}

void NotificationEngagementEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _BYTE v42[24];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  char v49;

  v36 = a2;
  v37 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v5 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_71B4(&qword_2A3DB0);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NotificationEngagementEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v40 = a1;
  sub_7988(a1, v12);
  v14 = sub_185854();
  v38 = v8;
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationEngagementEvent.Model.CodingKeys, &type metadata for NotificationEngagementEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v40);
  }
  else
  {
    v35 = v9;
    v16 = v11;
    v41 = v5;
    v17 = v37;
    v49 = 0;
    v18 = sub_78790();
    v20 = v38;
    v19 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, &type metadata for NotificationData, &v49, v39, &type metadata for NotificationData, v18);
    v21 = *(_QWORD *)&v42[16];
    v22 = v43;
    v23 = BYTE2(v43);
    v24 = v45;
    v25 = v46;
    v26 = (uint64_t)v16;
    *(_OWORD *)v16 = *(_OWORD *)v42;
    *((_QWORD *)v16 + 2) = v21;
    *((_WORD *)v16 + 12) = v22;
    v16[26] = v23;
    *((_OWORD *)v16 + 2) = v44;
    *((_QWORD *)v16 + 6) = v24;
    *((_QWORD *)v16 + 7) = v25;
    v27 = v48;
    *((_OWORD *)v16 + 4) = v47;
    *((_OWORD *)v16 + 5) = v27;
    v49 = 1;
    v28 = sub_7CA50();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, &type metadata for NotificationEngagementData, &v49, v19, &type metadata for NotificationEngagementData, v28);
    v29 = *(_OWORD *)&v42[8];
    v30 = v43;
    v31 = v44;
    v16[96] = v42[0];
    *(_OWORD *)(v16 + 104) = v29;
    *((_QWORD *)v16 + 15) = v30;
    v16[128] = v31;
    v42[0] = 2;
    v32 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v33 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v17, v42, v19, v17, v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v19);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v26 + *(int *)(v35 + 24), v33, v17);
    sub_185BF8(v26, v36);
    sub_7DAC(v40);
    sub_185C3C(v26);
  }
}

uint64_t sub_185BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotificationEngagementEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_185C3C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NotificationEngagementEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_185C78(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  NotificationEngagementEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_185C8C(_QWORD *a1)
{
  return NotificationEngagementEvent.Model.encode(to:)(a1);
}

uint64_t sub_185CA0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B68, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3D68, (uint64_t)sub_18506C, a1);
}

uint64_t sub_185CC4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B70, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3D80, (uint64_t)sub_1850AC, a1);
}

uint64_t sub_185CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_2A3D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for NotificationEngagementEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_29CF30);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A3D98);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for NotificationEngagementEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_2A3D98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for NotificationEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for NotificationEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for NotificationEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for NotificationEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18620C);
}

uint64_t sub_18620C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_29CF30);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A3D98);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for NotificationEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1862BC);
}

uint64_t sub_1862BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_29CF30);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A3D98);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_186368(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&unk_29CFB8, (uint64_t (*)(void))sub_78790, (uint64_t (*)(void))sub_787D8, (uint64_t)&type metadata for NotificationData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A3E20, (uint64_t (*)(void))sub_7CA50, (uint64_t (*)(void))sub_7CA98, (uint64_t)&type metadata for NotificationEngagementData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NotificationEngagementEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)((char *)a2 + 25);
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v9 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v9;
    v10 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v10;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v11 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v11;
    v12 = a2[15];
    *(_QWORD *)(a1 + 120) = v12;
    v13 = *(int *)(a3 + 24);
    v17 = a1 + v13;
    v18 = (uint64_t)a2 + v13;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v14 = type metadata accessor for EventData(0);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    v16(v17, v18, v14);
  }
  return v5;
}

uint64_t destroy for NotificationEngagementEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for NotificationEngagementEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)((char *)a2 + 25);
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v9;
  v10 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  v11 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v11;
  v12 = a2[15];
  *(_QWORD *)(a1 + 120) = v12;
  v13 = *(int *)(a3 + 24);
  v17 = a1 + v13;
  v18 = (uint64_t)a2 + v13;
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  v14 = type metadata accessor for EventData(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v16(v17, v18, v14);
  return a1;
}

uint64_t *assignWithCopy for NotificationEngagementEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  a1[1] = a2[1];
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a1 + 26) = *((_BYTE *)a2 + 26);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[8] = a2[8];
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[10] = a2[10];
  v16 = a2[11];
  v17 = a1[11];
  a1[11] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  a1[13] = a2[13];
  v18 = a2[14];
  v19 = a1[14];
  a1[14] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a1[15];
  v21 = a2[15];
  a1[15] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v20);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  v22 = *(int *)(a3 + 24);
  v23 = (uint64_t)a1 + v22;
  v24 = (uint64_t)a2 + v22;
  v25 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

uint64_t initializeWithTake for NotificationEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = a2 + v8;
  v10 = a1 + v8;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, v9, v11);
  return a1;
}

uint64_t *assignWithTake for NotificationEngagementEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a2[2];
  v8 = a1[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_bridgeObjectRelease(v8);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *(_WORD *)((char *)a1 + 25) = *(_WORD *)((char *)a2 + 25);
  v9 = a2[5];
  v10 = a1[5];
  a1[4] = a2[4];
  a1[5] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = a2[7];
  v12 = a1[7];
  a1[6] = a2[6];
  a1[7] = v11;
  swift_bridgeObjectRelease(v12);
  v13 = a2[9];
  v14 = a1[9];
  a1[8] = a2[8];
  a1[9] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[11];
  v16 = a1[11];
  a1[10] = a2[10];
  a1[11] = v15;
  swift_bridgeObjectRelease(v16);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  v17 = a2[14];
  v18 = a1[14];
  a1[13] = a2[13];
  a1[14] = v17;
  swift_bridgeObjectRelease(v18);
  v19 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v19);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  v20 = *(int *)(a3 + 24);
  v21 = (uint64_t)a1 + v20;
  v22 = (uint64_t)a2 + v20;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_186A28);
}

uint64_t sub_186A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NotificationEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_186AB0);
}

uint64_t sub_186AB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_186B24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_211D60;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotificationEngagementEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186BEC + 4 * byte_211C65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186C20 + 4 * byte_211C60[v4]))();
}

uint64_t sub_186C20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186C30);
  return result;
}

uint64_t sub_186C3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186C44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186C48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationEngagementEvent.Model.CodingKeys()
{
  return &type metadata for NotificationEngagementEvent.Model.CodingKeys;
}

unint64_t sub_186C70()
{
  unint64_t result;

  result = qword_2A3EF0;
  if (!qword_2A3EF0)
  {
    result = swift_getWitnessTable(byte_211E14, &type metadata for NotificationEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3EF0);
  }
  return result;
}

unint64_t sub_186CB8()
{
  unint64_t result;

  result = qword_2A3EF8;
  if (!qword_2A3EF8)
  {
    result = swift_getWitnessTable(byte_211D84, &type metadata for NotificationEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3EF8);
  }
  return result;
}

unint64_t sub_186D00()
{
  unint64_t result;

  result = qword_2A3F00;
  if (!qword_2A3F00)
  {
    result = swift_getWitnessTable(byte_211DAC, &type metadata for NotificationEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3F00);
  }
  return result;
}

uint64_t sub_186D44(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000000220E40;
    if (a2 == 0x8000000000220E40)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220E40, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000000222670)
  {
    v6 = 0x8000000000222670;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000000222670, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_186E9C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A3F08, &enum case for SessionGroup.default(_:));
}

uint64_t static RemoveReviewAndRatingEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B78, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3F08, a1);
}

uint64_t sub_186EDC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A3F20, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RemoveReviewAndRatingEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B80, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3F20, a1);
}

uint64_t RemoveReviewAndRatingEvent.reviewTypeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent(0) + 20);
  v4 = sub_71B4(&qword_2A3F38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveReviewAndRatingEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A3FC0, (uint64_t)&nominal type descriptor for RemoveReviewAndRatingEvent);
}

uint64_t RemoveReviewAndRatingEvent.reviewTypeData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent(0) + 20);
  v4 = sub_71B4(&qword_2A3F38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveReviewAndRatingEvent.reviewTypeData.modify())()
{
  type metadata accessor for RemoveReviewAndRatingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveReviewAndRatingEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveReviewAndRatingEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveReviewAndRatingEvent.upSellData.modify())()
{
  type metadata accessor for RemoveReviewAndRatingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveReviewAndRatingEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveReviewAndRatingEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveReviewAndRatingEvent.eventData.modify())()
{
  type metadata accessor for RemoveReviewAndRatingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveReviewAndRatingEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RemoveReviewAndRatingEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2A3F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t RemoveReviewAndRatingEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveReviewAndRatingEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4060, (uint64_t)&nominal type descriptor for RemoveReviewAndRatingEvent.Model);
}

uint64_t RemoveReviewAndRatingEvent.Model.init(contentData:reviewTypeData:upSellData:eventData:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  char v13;
  int v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_WORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 60);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_DWORD *)(a1 + 68);
  v15 = *(_BYTE *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 77);
  v17 = *a2;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v6;
  *(_BYTE *)(a5 + 16) = v7;
  *(_OWORD *)(a5 + 24) = v8;
  *(_QWORD *)(a5 + 40) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  *(_WORD *)(a5 + 56) = v11;
  *(_DWORD *)(a5 + 60) = v12;
  *(_BYTE *)(a5 + 64) = v13;
  *(_DWORD *)(a5 + 68) = v14;
  *(_BYTE *)(a5 + 72) = v15;
  *(_DWORD *)(a5 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a5 + 77) = v16;
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_BYTE *)(a5 + 96) = v17;
  *(_OWORD *)(a5 + 104) = *(_OWORD *)a3;
  *(_QWORD *)(a5 + 120) = v18;
  v19 = a5 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent.Model(0) + 28);
  v20 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a4, v20);
}

uint64_t sub_187384()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1873BC + 4 * byte_211E90[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_1873BC()
{
  return 0x7954776569766572;
}

uint64_t sub_1873E0()
{
  return 0x61446C6C65537075;
}

uint64_t sub_1873FC()
{
  return 0x746144746E657665;
}

uint64_t sub_187418@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_188E54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18743C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1876D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_187464(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1876D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RemoveReviewAndRatingEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  char v41;
  int v42;
  char v43;
  int v44;
  char v45;
  __int128 v46;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A3F40);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1876D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys, &type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v34 = *(_QWORD *)v4;
  *((_QWORD *)&v34 + 1) = v13;
  LOBYTE(v35) = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v41 = v20;
  v42 = v21;
  v43 = v22;
  v44 = *(_DWORD *)(v4 + 73);
  v45 = v23;
  v46 = *(_OWORD *)(v4 + 80);
  v33 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    LOBYTE(v34) = *(_BYTE *)(v4 + 96);
    v33 = 1;
    v25 = sub_187714();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v6, &type metadata for ReviewTypeData, v25);
    v26 = *(_QWORD *)(v4 + 120);
    v34 = *(_OWORD *)(v4 + 104);
    v35 = v26;
    v33 = 2;
    v27 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v33, v6, &type metadata for UpSellData, v27);
    v28 = v4 + *(int *)(type metadata accessor for RemoveReviewAndRatingEvent.Model(0) + 28);
    LOBYTE(v34) = 3;
    v29 = type metadata accessor for EventData(0);
    v30 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v34, v6, v29, v30);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1876D0()
{
  unint64_t result;

  result = qword_2A3F48;
  if (!qword_2A3F48)
  {
    result = swift_getWitnessTable(byte_212094, &type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A3F48);
  }
  return result;
}

unint64_t sub_187714()
{
  unint64_t result;

  result = qword_2A3F50;
  if (!qword_2A3F50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReviewTypeData, &type metadata for ReviewTypeData);
    atomic_store(result, (unint64_t *)&qword_2A3F50);
  }
  return result;
}

void RemoveReviewAndRatingEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  char v50;
  int v51;
  char v52;
  int v53;
  char v54;
  __int128 v55;
  char v56;

  v37 = a2;
  v38 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_71B4(&qword_2A3F58);
  v6 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RemoveReviewAndRatingEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v41 = a1;
  sub_7988(a1, v12);
  v14 = sub_1876D0();
  v39 = v8;
  v15 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys, &type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v41);
  }
  else
  {
    v36 = v9;
    v42 = v3;
    v16 = v38;
    v56 = 0;
    v17 = sub_1779C();
    v18 = v39;
    v19 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for ContentData, &v56, v40, &type metadata for ContentData, v17);
    v20 = *((_QWORD *)&v43 + 1);
    v21 = v44;
    v22 = v45;
    v23 = v46;
    v24 = v47;
    v25 = v48;
    v26 = v49;
    v27 = v50;
    v28 = v51;
    v29 = v52;
    v30 = v54;
    *(_QWORD *)v11 = v43;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = v53;
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v55;
    v56 = 1;
    v31 = sub_187AF0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for ReviewTypeData, &v56, v19, &type metadata for ReviewTypeData, v31);
    v11[96] = v43;
    v56 = 2;
    v32 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for UpSellData, &v56, v19, &type metadata for UpSellData, v32);
    v33 = v44;
    *(_OWORD *)(v11 + 104) = v43;
    *((_QWORD *)v11 + 15) = v33;
    LOBYTE(v43) = 3;
    v34 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v43, v19, v16, v34);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v40);
    (*(void (**)(char *, _QWORD *, uint64_t))(v42 + 32))(&v11[*(int *)(v36 + 28)], v5, v16);
    sub_187B34((uint64_t)v11, v37);
    sub_7DAC(v41);
    sub_187B78((uint64_t)v11);
  }
}

unint64_t sub_187AF0()
{
  unint64_t result;

  result = qword_2A3F60;
  if (!qword_2A3F60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReviewTypeData, &type metadata for ReviewTypeData);
    atomic_store(result, (unint64_t *)&qword_2A3F60);
  }
  return result;
}

uint64_t sub_187B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoveReviewAndRatingEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187B78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RemoveReviewAndRatingEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_187BB4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RemoveReviewAndRatingEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_187BC8(_QWORD *a1)
{
  return RemoveReviewAndRatingEvent.Model.encode(to:)(a1);
}

uint64_t sub_187BDC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B78, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A3F08, (uint64_t)sub_186E9C, a1);
}

uint64_t sub_187C00@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B80, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A3F20, (uint64_t)sub_186EDC, a1);
}

uint64_t sub_187C24@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2A3F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoveReviewAndRatingEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A3F38);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for RemoveReviewAndRatingEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2A3F38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for RemoveReviewAndRatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for RemoveReviewAndRatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for RemoveReviewAndRatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for RemoveReviewAndRatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A3F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveReviewAndRatingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1882A0);
}

uint64_t sub_1882A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A3F38);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296F68);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RemoveReviewAndRatingEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_188378);
}

uint64_t sub_188378(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A3F38);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296F68);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_18844C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A3FD0, (uint64_t (*)(void))sub_187AF0, (uint64_t (*)(void))sub_187714, (uint64_t)&type metadata for ReviewTypeData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for RemoveReviewAndRatingEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v16);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_BYTE *)(a1 + 105) = *((_BYTE *)a2 + 105);
    v10 = a2[15];
    v11 = *(int *)(a3 + 28);
    v12 = (uint64_t)a2 + v11;
    v13 = a1 + v11;
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v10;
    v14 = type metadata accessor for EventData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15(v13, v12, v14);
  }
  return v3;
}

uint64_t destroy for RemoveReviewAndRatingEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for RemoveReviewAndRatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  v9 = *(_QWORD *)(a2 + 120);
  v10 = *(int *)(a3 + 28);
  v11 = a2 + v10;
  v12 = a1 + v10;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14(v12, v11, v13);
  return a1;
}

uint64_t assignWithCopy for RemoveReviewAndRatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

uint64_t initializeWithTake for RemoveReviewAndRatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for RemoveReviewAndRatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveReviewAndRatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_188B2C);
}

uint64_t sub_188B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RemoveReviewAndRatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_188BB4);
}

uint64_t sub_188BB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_188C28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_211FA0;
  v4[2] = &unk_211FB8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RemoveReviewAndRatingEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_188CFC + 4 * byte_211E99[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_188D30 + 4 * byte_211E94[v4]))();
}

uint64_t sub_188D30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_188D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x188D40);
  return result;
}

uint64_t sub_188D4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x188D54);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_188D58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_188D60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoveReviewAndRatingEvent.Model.CodingKeys()
{
  return &type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys;
}

unint64_t sub_188D80()
{
  unint64_t result;

  result = qword_2A40A0;
  if (!qword_2A40A0)
  {
    result = swift_getWitnessTable(byte_21206C, &type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A40A0);
  }
  return result;
}

unint64_t sub_188DC8()
{
  unint64_t result;

  result = qword_2A40A8;
  if (!qword_2A40A8)
  {
    result = swift_getWitnessTable(byte_211FDC, &type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A40A8);
  }
  return result;
}

unint64_t sub_188E10()
{
  unint64_t result;

  result = qword_2A40B0;
  if (!qword_2A40B0)
  {
    result = swift_getWitnessTable(byte_212004, &type metadata for RemoveReviewAndRatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A40B0);
  }
  return result;
}

uint64_t sub_188E54(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7954776569766572 && a2 == 0xEE00617461446570)
  {
    v7 = 0xEE00617461446570;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954776569766572, 0xEE00617461446570, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::ReviewType_optional __swiftcall ReviewType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ReviewType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268778, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ReviewType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1890E8 + 4 * byte_2120E4[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1890E8()
{
  return 0x676E69746172;
}

uint64_t sub_1890FC()
{
  return 0x776569766572;
}

uint64_t sub_189110()
{
  return 0x6E41776569766572;
}

void sub_189134(char *a1)
{
  sub_2A280(*a1);
}

unint64_t sub_189144()
{
  unint64_t result;

  result = qword_2A40B8;
  if (!qword_2A40B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReviewType, &type metadata for ReviewType);
    atomic_store(result, (unint64_t *)&qword_2A40B8);
  }
  return result;
}

void sub_189188()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1891D4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x676E69746172, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_189248()
{
  __asm { BR              X10 }
}

uint64_t sub_189284(uint64_t a1)
{
  String.hash(into:)(a1, 0x676E69746172, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1892E4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_18932C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x676E69746172, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

BookAnalytics::ReviewType_optional sub_1893A0(Swift::String *a1)
{
  return ReviewType.init(rawValue:)(*a1);
}

uint64_t sub_1893AC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1893DC + 4 * byte_2120F4[*v0]))();
}

void sub_1893DC(_QWORD *a1@<X8>)
{
  *a1 = 0x676E69746172;
  a1[1] = 0xE600000000000000;
}

void sub_1893F4(_QWORD *a1@<X8>)
{
  *a1 = 0x776569766572;
  a1[1] = 0xE600000000000000;
}

void sub_18940C(_QWORD *a1@<X8>)
{
  *a1 = 0x6E41776569766572;
  a1[1] = 0xEF676E6974615264;
}

uint64_t sub_189434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1895A8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_189490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1895A8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ReviewType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_189528 + 4 * byte_2120FD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18955C + 4 * byte_2120F8[v4]))();
}

uint64_t sub_18955C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_189564(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18956CLL);
  return result;
}

uint64_t sub_189578(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x189580);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_189584(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18958C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReviewType()
{
  return &type metadata for ReviewType;
}

unint64_t sub_1895A8()
{
  unint64_t result;

  result = qword_2A40C0;
  if (!qword_2A40C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReviewType, &type metadata for ReviewType);
    atomic_store(result, (unint64_t *)&qword_2A40C0);
  }
  return result;
}

uint64_t sub_1895EC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A40C8, &enum case for SessionGroup.default(_:));
}

uint64_t static YearInReviewExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B88, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A40C8, a1);
}

uint64_t sub_18962C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A40E0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static YearInReviewExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B90, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A40E0, a1);
}

uint64_t YearInReviewExposureEvent.yIRSourceData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A40F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t YearInReviewExposureEvent.yIRSourceData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A40F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t YearInReviewExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for YearInReviewExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A4170, (uint64_t)&nominal type descriptor for YearInReviewExposureEvent);
}

uint64_t YearInReviewExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*YearInReviewExposureEvent.eventData.modify())()
{
  type metadata accessor for YearInReviewExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YearInReviewExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t YearInReviewExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*YearInReviewExposureEvent.timedData.modify())()
{
  type metadata accessor for YearInReviewExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YearInReviewExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A40F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for YearInReviewExposureEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t YearInReviewExposureEvent.Model.yIRSourceData.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v2 = v1[9];
  v3 = v1[7];
  v24 = v1[8];
  v25 = v2;
  v4 = v1[9];
  v26 = v1[10];
  v5 = v1[5];
  v7 = v1[3];
  v20 = v1[4];
  v6 = v20;
  v21 = v5;
  v8 = v1[5];
  v9 = v1[7];
  v22 = v1[6];
  v10 = v22;
  v23 = v9;
  v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  v12 = v1[3];
  v14 = *v1;
  v13 = v1[1];
  v18 = v1[2];
  v15 = v18;
  v19 = v12;
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v1[10];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  v27 = *((_BYTE *)v1 + 176);
  *(_BYTE *)(a1 + 176) = *((_BYTE *)v1 + 176);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v7;
  return sub_14D03C((uint64_t)v17);
}

uint64_t YearInReviewExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewExposureEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for YearInReviewExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4210, (uint64_t)&nominal type descriptor for YearInReviewExposureEvent.Model);
}

uint64_t YearInReviewExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewExposureEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t YearInReviewExposureEvent.Model.init(yIRSourceData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a4 + 144) = v7;
  *(_OWORD *)(a4 + 160) = *(_OWORD *)(a1 + 160);
  *(_BYTE *)(a4 + 176) = *(_BYTE *)(a1 + 176);
  v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v8;
  v9 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a4 + 112) = v9;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v10;
  v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v11;
  v12 = type metadata accessor for YearInReviewExposureEvent.Model(0);
  v13 = a4 + *(int *)(v12 + 20);
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a2, v14);
  v15 = a4 + *(int *)(v12 + 24);
  v16 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a3, v16);
}

uint64_t sub_189B24()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0x6372756F53524979;
}

uint64_t sub_189B94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18B524(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_189BB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_189E2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_189BE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_189E2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t YearInReviewExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  _OWORD v28[11];
  char v29;

  v3 = v1;
  v5 = sub_71B4(&qword_2A4100);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_189E2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for YearInReviewExposureEvent.Model.CodingKeys, &type metadata for YearInReviewExposureEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 144);
  v28[8] = *(_OWORD *)(v3 + 128);
  v28[9] = v12;
  v28[10] = *(_OWORD *)(v3 + 160);
  v29 = *(_BYTE *)(v3 + 176);
  v13 = *(_OWORD *)(v3 + 80);
  v28[4] = *(_OWORD *)(v3 + 64);
  v28[5] = v13;
  v14 = *(_OWORD *)(v3 + 112);
  v28[6] = *(_OWORD *)(v3 + 96);
  v28[7] = v14;
  v15 = *(_OWORD *)(v3 + 16);
  v28[0] = *(_OWORD *)v3;
  v28[1] = v15;
  v16 = *(_OWORD *)(v3 + 48);
  v28[2] = *(_OWORD *)(v3 + 32);
  v28[3] = v16;
  v27 = 0;
  v17 = sub_14D0BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v27, v5, &type metadata for YIRSourceData, v17);
  if (!v2)
  {
    v18 = type metadata accessor for YearInReviewExposureEvent.Model(0);
    v19 = v3 + *(int *)(v18 + 20);
    LOBYTE(v28[0]) = 1;
    v20 = type metadata accessor for EventData(0);
    v21 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, v28, v5, v20, v21);
    v22 = v3 + *(int *)(v18 + 24);
    LOBYTE(v28[0]) = 2;
    v23 = type metadata accessor for TimedData(0);
    v24 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v28, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_189E2C()
{
  unint64_t result;

  result = qword_2A4108;
  if (!qword_2A4108)
  {
    result = swift_getWitnessTable(byte_2123DC, &type metadata for YearInReviewExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4108);
  }
  return result;
}

uint64_t YearInReviewExposureEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE v41[183];
  char v42;
  _OWORD v43[11];
  char v44;
  uint64_t v45;

  v33 = a2;
  v36 = type metadata accessor for TimedData(0);
  v32 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v34 = (_QWORD **)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for EventData(0);
  v37 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v5 = (_QWORD **)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_71B4(&qword_2A4110);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for YearInReviewExposureEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  v40 = a1;
  sub_7988(a1, v13);
  v14 = sub_189E2C();
  v38 = v8;
  v15 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for YearInReviewExposureEvent.Model.CodingKeys, &type metadata for YearInReviewExposureEvent.Model.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_7DAC(v40);
  v31 = v5;
  v45 = v6;
  v16 = (uint64_t)v11;
  v18 = v36;
  v17 = v37;
  v19 = v35;
  v42 = 0;
  v20 = sub_14D074();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, &type metadata for YIRSourceData, &v42, v39, &type metadata for YIRSourceData, v20);
  v21 = v43[9];
  *(_OWORD *)(v16 + 128) = v43[8];
  *(_OWORD *)(v16 + 144) = v21;
  *(_OWORD *)(v16 + 160) = v43[10];
  *(_BYTE *)(v16 + 176) = v44;
  v22 = v43[5];
  *(_OWORD *)(v16 + 64) = v43[4];
  *(_OWORD *)(v16 + 80) = v22;
  v23 = v43[7];
  *(_OWORD *)(v16 + 96) = v43[6];
  *(_OWORD *)(v16 + 112) = v23;
  v24 = v43[1];
  *(_OWORD *)v16 = v43[0];
  *(_OWORD *)(v16 + 16) = v24;
  v25 = v43[3];
  *(_OWORD *)(v16 + 32) = v43[2];
  *(_OWORD *)(v16 + 48) = v25;
  v41[0] = 1;
  v26 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v27 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v19, v41, v39, v19, v26);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v16 + *(int *)(v9 + 20), v27, v19);
  v41[0] = 2;
  v28 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v29 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v18, v41, v39, v18, v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v39);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v32 + 32))(v16 + *(int *)(v9 + 24), v29, v18);
  sub_18A23C(v16, v33);
  sub_7DAC(v40);
  return sub_18A280(v16);
}

uint64_t sub_18A23C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for YearInReviewExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18A280(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for YearInReviewExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18A2BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return YearInReviewExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_18A2D0(_QWORD *a1)
{
  return YearInReviewExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_18A2E4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B88, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A40C8, (uint64_t)sub_1895EC, a1);
}

uint64_t sub_18A308@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B90, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A40E0, (uint64_t)sub_18962C, a1);
}

uint64_t sub_18A32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A40F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for YearInReviewExposureEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_2A40F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for YearInReviewExposureEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_2A40F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for YearInReviewExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A40F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for YearInReviewExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A40F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for YearInReviewExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A40F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for YearInReviewExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A40F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for YearInReviewExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18A850);
}

uint64_t sub_18A850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_2A40F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for YearInReviewExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18A900);
}

uint64_t sub_18A900(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_2A40F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_18A9AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_18AA4C(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_18AA4C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2A4180)
  {
    v2 = sub_14D074();
    v3 = sub_14D0BC();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for YIRSourceData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2A4180);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v7 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v7;
    v8 = a2[11];
    v9 = a2[12];
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    *(_QWORD *)(a1 + 136) = a2[17];
    v10 = a2[19];
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    *(_QWORD *)(a1 + 152) = v10;
    v11 = a2[21];
    *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
    *(_QWORD *)(a1 + 168) = v11;
    v12 = *(int *)(a3 + 20);
    v13 = a1 + v12;
    v14 = (uint64_t)a2 + v12;
    *(_QWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 96) = v9;
    v15 = type metadata accessor for EventData(0);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v16(v13, v14, v15);
    v17 = *(int *)(a3 + 24);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return v4;
}

uint64_t destroy for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v10;
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  v14 = type metadata accessor for EventData(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v15(v12, v13, v14);
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t assignWithCopy for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v14;
  v15 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v15;
  v16 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v16;
  v17 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v17;
  v18 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v18;
  v19 = *(int *)(a3 + 20);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v10 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v10;
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18B19C);
}

uint64_t sub_18B19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = type metadata accessor for TimedData(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for YearInReviewExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18B254);
}

uint64_t sub_18B254(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 80) = a2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_18B2F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_212300;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for YearInReviewExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18B3CC + 4 * byte_212225[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18B400 + 4 * byte_212220[v4]))();
}

uint64_t sub_18B400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18B410);
  return result;
}

uint64_t sub_18B41C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18B424);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18B428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for YearInReviewExposureEvent.Model.CodingKeys()
{
  return &type metadata for YearInReviewExposureEvent.Model.CodingKeys;
}

unint64_t sub_18B450()
{
  unint64_t result;

  result = qword_2A4250;
  if (!qword_2A4250)
  {
    result = swift_getWitnessTable(byte_2123B4, &type metadata for YearInReviewExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4250);
  }
  return result;
}

unint64_t sub_18B498()
{
  unint64_t result;

  result = qword_2A4258;
  if (!qword_2A4258)
  {
    result = swift_getWitnessTable("\r+\a", &type metadata for YearInReviewExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4258);
  }
  return result;
}

unint64_t sub_18B4E0()
{
  unint64_t result;

  result = qword_2A4260;
  if (!qword_2A4260)
  {
    result = swift_getWitnessTable(byte_21234C, &type metadata for YearInReviewExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4260);
  }
  return result;
}

uint64_t sub_18B524(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6372756F53524979 && a2 == 0xED00006174614465)
  {
    v5 = 0xED00006174614465;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6372756F53524979, 0xED00006174614465, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v7 = 0xE900000000000061;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_18B6B8()
{
  _BYTE *v0;

  if (*v0)
    return 0x54746E756F636361;
  else
    return 0xD000000000000011;
}

uint64_t sub_18B700@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18C00C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18B724(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18BC40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18B74C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18BC40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AccountData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = sub_71B4(&qword_2A4268);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v16 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_18BC40();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccountData.CodingKeys, &type metadata for AccountData.CodingKeys, v11, v9, v10);
  v20 = v8;
  v19 = 0;
  v12 = sub_18BC84();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v4, &type metadata for AccountUserAction, v12);
  if (!v2)
  {
    v18 = v16;
    v17 = 1;
    v13 = sub_18BCC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, &type metadata for AccountType, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AccountData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = sub_71B4(&qword_2A4288);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_18BC40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccountData.CodingKeys, &type metadata for AccountData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v19) = 0;
    v12 = sub_18BD0C();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v19 + 2), &type metadata for AccountUserAction, (char *)&v19 + 1, v5, &type metadata for AccountUserAction, v12);
    v13 = BYTE2(v19);
    v18 = 1;
    v14 = sub_18BD50();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for AccountType, &v18, v5, &type metadata for AccountType, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v19;
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_18BA3C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AccountData.init(from:)(a1, a2);
}

uint64_t sub_18BA50(_QWORD *a1)
{
  return AccountData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics11AccountDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = 0x6E776F6E6B6E75;
  v3 = *a1;
  v4 = a1[1];
  v5 = a2[1];
  v6 = 0xE500000000000000;
  v7 = 0x6E49676F6CLL;
  if (v3 != 1)
  {
    v7 = 0x74754F676F6CLL;
    v6 = 0xE600000000000000;
  }
  if (*a1)
    v8 = v7;
  else
    v8 = 0x6E776F6E6B6E75;
  if (v3)
    v9 = v6;
  else
    v9 = 0xE700000000000000;
  v10 = 0xE500000000000000;
  v11 = 0x6E49676F6CLL;
  if (*a2 != 1)
  {
    v11 = 0x74754F676F6CLL;
    v10 = 0xE600000000000000;
  }
  if (*a2)
    v12 = v11;
  else
    v12 = 0x6E776F6E6B6E75;
  if (*a2)
    v13 = v10;
  else
    v13 = 0xE700000000000000;
  if (v8 == v12 && v9 == v13)
  {
    swift_bridgeObjectRelease_n(v9, 2);
    goto LABEL_21;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v12, v13, 0);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  v15 = 0;
  if ((v14 & 1) != 0)
  {
LABEL_21:
    v16 = 0x64756F6C4369;
    if (v4 != 1)
      v16 = 0x73656E755469;
    if (v4)
      v17 = v16;
    else
      v17 = 0x6E776F6E6B6E75;
    if (v4)
      v18 = 0xE600000000000000;
    else
      v18 = 0xE700000000000000;
    if (v5)
    {
      v19 = 0xE600000000000000;
      if (v5 == 1)
      {
        v2 = 0x64756F6C4369;
        if (v17 != 0x64756F6C4369)
          goto LABEL_38;
      }
      else
      {
        v2 = 0x73656E755469;
        if (v17 != 0x73656E755469)
          goto LABEL_38;
      }
    }
    else
    {
      v19 = 0xE700000000000000;
      if (v17 != 0x6E776F6E6B6E75)
        goto LABEL_38;
    }
    if (v18 == v19)
    {
      v15 = 1;
      v19 = v18;
LABEL_39:
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v19);
      return v15 & 1;
    }
LABEL_38:
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v2, v19, 0);
    goto LABEL_39;
  }
  return v15 & 1;
}

unint64_t sub_18BC40()
{
  unint64_t result;

  result = qword_2A4270;
  if (!qword_2A4270)
  {
    result = swift_getWitnessTable(byte_2125D4, &type metadata for AccountData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4270);
  }
  return result;
}

unint64_t sub_18BC84()
{
  unint64_t result;

  result = qword_2A4278;
  if (!qword_2A4278)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AccountUserAction, &type metadata for AccountUserAction);
    atomic_store(result, (unint64_t *)&qword_2A4278);
  }
  return result;
}

unint64_t sub_18BCC8()
{
  unint64_t result;

  result = qword_2A4280;
  if (!qword_2A4280)
  {
    result = swift_getWitnessTable("m{\a", &type metadata for AccountType);
    atomic_store(result, (unint64_t *)&qword_2A4280);
  }
  return result;
}

unint64_t sub_18BD0C()
{
  unint64_t result;

  result = qword_2A4290;
  if (!qword_2A4290)
  {
    result = swift_getWitnessTable("-;\a", &type metadata for AccountUserAction);
    atomic_store(result, (unint64_t *)&qword_2A4290);
  }
  return result;
}

unint64_t sub_18BD50()
{
  unint64_t result;

  result = qword_2A4298;
  if (!qword_2A4298)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AccountType, &type metadata for AccountType);
    atomic_store(result, (unint64_t *)&qword_2A4298);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccountData(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18BDE8 + 4 * byte_212431[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_18BE1C + 4 * byte_21242C[v4]))();
}

uint64_t sub_18BE1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_18BE24(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x18BE2CLL);
  return result;
}

uint64_t sub_18BE38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x18BE40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18BE44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18BE4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountData()
{
  return &type metadata for AccountData;
}

uint64_t storeEnumTagSinglePayload for AccountData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18BEB4 + 4 * byte_21243B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18BEE8 + 4 * byte_212436[v4]))();
}

uint64_t sub_18BEE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18BEF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18BEF8);
  return result;
}

uint64_t sub_18BF04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18BF0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18BF10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18BF18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountData.CodingKeys()
{
  return &type metadata for AccountData.CodingKeys;
}

unint64_t sub_18BF38()
{
  unint64_t result;

  result = qword_2A42A0;
  if (!qword_2A42A0)
  {
    result = swift_getWitnessTable("M*\a", &type metadata for AccountData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A42A0);
  }
  return result;
}

unint64_t sub_18BF80()
{
  unint64_t result;

  result = qword_2A42A8;
  if (!qword_2A42A8)
  {
    result = swift_getWitnessTable("\r+\a", &type metadata for AccountData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A42A8);
  }
  return result;
}

unint64_t sub_18BFC8()
{
  unint64_t result;

  result = qword_2A42B0;
  if (!qword_2A42B0)
  {
    result = swift_getWitnessTable(byte_212544, &type metadata for AccountData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A42B0);
  }
  return result;
}

uint64_t sub_18C00C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000000222690;
    if (a2 == 0x8000000000222690)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222690, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x54746E756F636361 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease(0xEB00000000657079);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54746E756F636361, 0xEB00000000657079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::DialogActionType_optional __swiftcall DialogActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DialogActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2687F8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 15;
  if (v5 < 0xF)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DialogActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18C198 + 4 * byte_212630[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_18C198()
{
  return 0x6F4E657461647075;
}

uint64_t sub_18C1B4()
{
  return 0x614C657461647075;
}

uint64_t sub_18C1D4()
{
  return 27503;
}

unint64_t sub_18C1E0()
{
  return 0xD000000000000013;
}

uint64_t sub_18C2EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_29D2C(*a1, *a2);
}

unint64_t sub_18C2FC()
{
  unint64_t result;

  result = qword_2A42B8;
  if (!qword_2A42B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DialogActionType, &type metadata for DialogActionType);
    atomic_store(result, (unint64_t *)&qword_2A42B8);
  }
  return result;
}

Swift::Int sub_18C340()
{
  uint64_t v0;
  BAEventReporter *v1;
  BAEventReporter *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  int64_t v7;
  int64_t v8;
  id v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  v0 = DialogActionType.rawValue.getter();
  v2 = v1;
  String.hash(into:)(v11, v0, v1);
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
  return Hasher._finalize()();
}

void sub_18C3A4(uint64_t a1)
{
  uint64_t v2;
  BAEventReporter *v3;
  BAEventReporter *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  int64_t v9;
  int64_t v10;
  id v11;

  v2 = DialogActionType.rawValue.getter();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
}

Swift::Int sub_18C3F4(uint64_t a1)
{
  uint64_t v1;
  BAEventReporter *v2;
  BAEventReporter *v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  int64_t v8;
  int64_t v9;
  id v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, a1);
  v1 = DialogActionType.rawValue.getter();
  v3 = v2;
  String.hash(into:)(v12, v1, v2);
  swift_bridgeObjectRelease(v3, v4, v5, v6, v7, v8, v9, v10);
  return Hasher._finalize()();
}

BookAnalytics::DialogActionType_optional sub_18C454(Swift::String *a1)
{
  return DialogActionType.init(rawValue:)(*a1);
}

uint64_t sub_18C460@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DialogActionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18C484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_18C688();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_18C4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_18C688();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for DialogActionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DialogActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_18C608 + 4 * byte_212644[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_18C63C + 4 * byte_21263F[v4]))();
}

uint64_t sub_18C63C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C644(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18C64CLL);
  return result;
}

uint64_t sub_18C658(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18C660);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_18C664(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18C66C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogActionType()
{
  return &type metadata for DialogActionType;
}

unint64_t sub_18C688()
{
  unint64_t result;

  result = qword_2A42C0;
  if (!qword_2A42C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DialogActionType, &type metadata for DialogActionType);
    atomic_store(result, (unint64_t *)&qword_2A42C0);
  }
  return result;
}

unint64_t sub_18C6CC()
{
  return 0xD000000000000017;
}

uint64_t sub_18C6E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18CCB4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_18C710(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18C9A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18C738(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18C9A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RedownloadFailData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A42C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_18C9A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RedownloadFailData.CodingKeys, &type metadata for RedownloadFailData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_18C9E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for RedownloadFailureReason, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t RedownloadFailData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A42E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_18C9A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RedownloadFailData.CodingKeys, &type metadata for RedownloadFailData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_18CA28();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for RedownloadFailureReason, v13, v5, &type metadata for RedownloadFailureReason, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_18C978@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return RedownloadFailData.init(from:)(a1, a2);
}

uint64_t sub_18C98C(_QWORD *a1)
{
  return RedownloadFailData.encode(to:)(a1);
}

unint64_t sub_18C9A0()
{
  unint64_t result;

  result = qword_2A42D0;
  if (!qword_2A42D0)
  {
    result = swift_getWitnessTable(")*\a", &type metadata for RedownloadFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A42D0);
  }
  return result;
}

unint64_t sub_18C9E4()
{
  unint64_t result;

  result = qword_2A42D8;
  if (!qword_2A42D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RedownloadFailureReason, &type metadata for RedownloadFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A42D8);
  }
  return result;
}

unint64_t sub_18CA28()
{
  unint64_t result;

  result = qword_2A42E8;
  if (!qword_2A42E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RedownloadFailureReason, &type metadata for RedownloadFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A42E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RedownloadFailData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18CAC0 + 4 * byte_212795[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18CAF4 + 4 * byte_212790[v4]))();
}

uint64_t sub_18CAF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18CAFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18CB04);
  return result;
}

uint64_t sub_18CB10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18CB18);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18CB1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18CB24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RedownloadFailData()
{
  return &type metadata for RedownloadFailData;
}

uint64_t storeEnumTagSinglePayload for RedownloadFailData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18CB80 + 4 * byte_21279A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18CBA0 + 4 * byte_21279F[v4]))();
}

_BYTE *sub_18CB80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18CBA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18CBA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18CBB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18CBB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18CBC0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RedownloadFailData.CodingKeys()
{
  return &type metadata for RedownloadFailData.CodingKeys;
}

unint64_t sub_18CBE0()
{
  unint64_t result;

  result = qword_2A42F0;
  if (!qword_2A42F0)
  {
    result = swift_getWitnessTable(byte_212910, &type metadata for RedownloadFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A42F0);
  }
  return result;
}

unint64_t sub_18CC28()
{
  unint64_t result;

  result = qword_2A42F8;
  if (!qword_2A42F8)
  {
    result = swift_getWitnessTable(byte_212880, &type metadata for RedownloadFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A42F8);
  }
  return result;
}

unint64_t sub_18CC70()
{
  unint64_t result;

  result = qword_2A4300;
  if (!qword_2A4300)
  {
    result = swift_getWitnessTable(byte_2128A8, &type metadata for RedownloadFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4300);
  }
  return result;
}

uint64_t sub_18CCB4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000017 && a2 == 0x80000000002226B0)
  {
    swift_bridgeObjectRelease(0x80000000002226B0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000000002226B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

BOOL static SessionEndReasonData.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 4)
  {
    if (v3 == 4)
      return 0;
    sub_286EC(v2);
    return (v4 & 1) != 0;
  }
  return v3 == 4;
}

uint64_t sub_18CD84()
{
  return 0x6F73616552646E65;
}

uint64_t sub_18CDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6F73616552646E65 && a2 == 0xED0000657079546ELL)
  {
    result = swift_bridgeObjectRelease(0xED0000657079546ELL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F73616552646E65, 0xED0000657079546ELL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_18CE60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18CFAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18CE88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18CFAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SessionEndReasonData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A4308);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_18CFAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SessionEndReasonData.CodingKeys, &type metadata for SessionEndReasonData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_18CFF0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v15, v12, v3, &type metadata for EndReasonType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_18CFAC()
{
  unint64_t result;

  result = qword_2A4310;
  if (!qword_2A4310)
  {
    result = swift_getWitnessTable(byte_212B38, &type metadata for SessionEndReasonData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4310);
  }
  return result;
}

unint64_t sub_18CFF0()
{
  unint64_t result;

  result = qword_2A4318;
  if (!qword_2A4318)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EndReasonType, &type metadata for EndReasonType);
    atomic_store(result, (unint64_t *)&qword_2A4318);
  }
  return result;
}

uint64_t SessionEndReasonData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A4320);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_18CFAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SessionEndReasonData.CodingKeys, &type metadata for SessionEndReasonData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_18D150();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v16, &type metadata for EndReasonType, v13, v5, &type metadata for EndReasonType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_18D150()
{
  unint64_t result;

  result = qword_2A4328;
  if (!qword_2A4328)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EndReasonType, &type metadata for EndReasonType);
    atomic_store(result, (unint64_t *)&qword_2A4328);
  }
  return result;
}

uint64_t sub_18D19C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SessionEndReasonData.init(from:)(a1, a2);
}

uint64_t sub_18D1B0(_QWORD *a1)
{
  return SessionEndReasonData.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for SessionEndReasonData(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  if (*a1 <= 4u)
    v6 = 4;
  else
    v6 = *a1;
  v7 = v6 - 5;
  if (*a1 < 4u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionEndReasonData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_18D2B0 + 4 * byte_212995[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18D2E4 + 4 * byte_212990[v4]))();
}

uint64_t sub_18D2E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D2EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D2F4);
  return result;
}

uint64_t sub_18D300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D308);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_18D30C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D314(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionEndReasonData()
{
  return &type metadata for SessionEndReasonData;
}

uint64_t storeEnumTagSinglePayload for SessionEndReasonData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18D370 + 4 * byte_21299A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18D390 + 4 * byte_21299F[v4]))();
}

_BYTE *sub_18D370(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18D390(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D398(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D3A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D3A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D3B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SessionEndReasonData.CodingKeys()
{
  return &type metadata for SessionEndReasonData.CodingKeys;
}

unint64_t sub_18D3D0()
{
  unint64_t result;

  result = qword_2A4330;
  if (!qword_2A4330)
  {
    result = swift_getWitnessTable(byte_212B10, &type metadata for SessionEndReasonData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4330);
  }
  return result;
}

unint64_t sub_18D418()
{
  unint64_t result;

  result = qword_2A4338;
  if (!qword_2A4338)
  {
    result = swift_getWitnessTable(byte_212A80, &type metadata for SessionEndReasonData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4338);
  }
  return result;
}

unint64_t sub_18D460()
{
  unint64_t result;

  result = qword_2A4340;
  if (!qword_2A4340)
  {
    result = swift_getWitnessTable("i*\a", &type metadata for SessionEndReasonData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4340);
  }
  return result;
}

uint64_t sub_18D4A4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A4348, &enum case for SessionGroup.default(_:));
}

uint64_t static AnnotationActionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295B98, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4348, a1);
}

uint64_t sub_18D4E4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A4360, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AnnotationActionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BA0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4360, a1);
}

uint64_t AnnotationActionEvent.viewData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationActionEvent(0) + 20);
  v4 = sub_71B4(&qword_297848);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AnnotationActionEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A43E8, (uint64_t)&nominal type descriptor for AnnotationActionEvent);
}

uint64_t AnnotationActionEvent.viewData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationActionEvent(0) + 20);
  v4 = sub_71B4(&qword_297848);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AnnotationActionEvent.viewData.modify())()
{
  type metadata accessor for AnnotationActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AnnotationActionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationActionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AnnotationActionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationActionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AnnotationActionEvent.eventData.modify())()
{
  type metadata accessor for AnnotationActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AnnotationActionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for AnnotationActionEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t AnnotationActionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationActionEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AnnotationActionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4480, (uint64_t)&nominal type descriptor for AnnotationActionEvent.Model);
}

uint64_t AnnotationActionEvent.Model.init(contentData:viewData:eventData:)@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  v16 = *a2;
  v17 = *((_BYTE *)a2 + 2);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_WORD *)(a4 + 96) = v16;
  *(_BYTE *)(a4 + 98) = v17;
  v18 = a4 + *(int *)(type metadata accessor for AnnotationActionEvent.Model(0) + 24);
  v19 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
}

uint64_t sub_18D884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18DAD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18D8AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18DAD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AnnotationActionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  _QWORD v33[2];
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  char v40;
  int v41;
  char v42;
  int v43;
  char v44;
  __int128 v45;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A4378);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_18DAD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnnotationActionEvent.Model.CodingKeys, &type metadata for AnnotationActionEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v33[0] = *(_QWORD *)v4;
  v33[1] = v13;
  v34 = v14;
  v35 = v15;
  v36 = v16;
  v37 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = *(_DWORD *)(v4 + 73);
  v44 = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v32 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v32, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_BYTE *)(v4 + 98);
    LOWORD(v33[0]) = *(_WORD *)(v4 + 96);
    BYTE2(v33[0]) = v25;
    v32 = 1;
    v26 = sub_EF88();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v32, v6, &type metadata for ViewData, v26);
    v27 = v4 + *(int *)(type metadata accessor for AnnotationActionEvent.Model(0) + 24);
    LOBYTE(v33[0]) = 2;
    v28 = type metadata accessor for EventData(0);
    v29 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v27, v33, v6, v28, v29);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_18DAD8()
{
  unint64_t result;

  result = qword_2A4380;
  if (!qword_2A4380)
  {
    result = swift_getWitnessTable("E)\a", &type metadata for AnnotationActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4380);
  }
  return result;
}

void AnnotationActionEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  int v50;
  char v51;
  int v52;
  char v53;
  __int128 v54;
  char v55;

  v36 = a2;
  v37 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_71B4(&qword_2A4388);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AnnotationActionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v40 = a1;
  sub_7988(a1, v12);
  v14 = sub_18DAD8();
  v38 = v8;
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AnnotationActionEvent.Model.CodingKeys, &type metadata for AnnotationActionEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v40);
  }
  else
  {
    v41 = v9;
    v16 = v6;
    v17 = v5;
    v18 = v37;
    v55 = 0;
    v19 = sub_1779C();
    v21 = v38;
    v20 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, &type metadata for ContentData, &v55, v39, &type metadata for ContentData, v19);
    v22 = v42[1];
    v23 = v43;
    v24 = v44;
    v25 = v45;
    v26 = v46;
    v27 = v47;
    v28 = v48;
    v29 = v49;
    v30 = v50;
    v31 = v51;
    v32 = v53;
    *(_QWORD *)v11 = v42[0];
    *((_QWORD *)v11 + 1) = v22;
    v11[16] = v23;
    *(_OWORD *)(v11 + 24) = v24;
    *((_QWORD *)v11 + 5) = v25;
    *((_QWORD *)v11 + 6) = v26;
    *((_WORD *)v11 + 28) = v27;
    *((_DWORD *)v11 + 15) = v28;
    v11[64] = v29;
    *((_DWORD *)v11 + 17) = v30;
    v11[72] = v31;
    *(_DWORD *)(v11 + 73) = v52;
    v11[77] = v32;
    *((_OWORD *)v11 + 5) = v54;
    v55 = 1;
    v33 = sub_EF40();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, &type metadata for ViewData, &v55, v20, &type metadata for ViewData, v33);
    v34 = BYTE2(v42[0]);
    *((_WORD *)v11 + 48) = v42[0];
    v11[98] = v34;
    LOBYTE(v42[0]) = 2;
    v35 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v42, v20, v18, v35);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v41 + 24)], v17, v18);
    sub_18DE48((uint64_t)v11, v36);
    sub_7DAC(v40);
    sub_18DE8C((uint64_t)v11);
  }
}

uint64_t sub_18DE48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnnotationActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18DE8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnnotationActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_18DEC8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AnnotationActionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_18DEDC(_QWORD *a1)
{
  return AnnotationActionEvent.Model.encode(to:)(a1);
}

uint64_t sub_18DEF0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295B98, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4348, (uint64_t)sub_18D4A4, a1);
}

uint64_t sub_18DF14@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BA0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4360, (uint64_t)sub_18D4E4, a1);
}

uint64_t getEnumTagSinglePayload for AnnotationActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18DF44);
}

uint64_t sub_18DF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297848);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AnnotationActionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18DFF4);
}

uint64_t sub_18DFF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297848);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for AnnotationActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18E0AC);
}

uint64_t sub_18E0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AnnotationActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18E134);
}

uint64_t sub_18E134(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_18E1A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_212C88;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnnotationActionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18E270 + 4 * byte_212B95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18E2A4 + 4 * byte_212B90[v4]))();
}

uint64_t sub_18E2A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18E2AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18E2B4);
  return result;
}

uint64_t sub_18E2C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18E2C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18E2CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18E2D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationActionEvent.Model.CodingKeys()
{
  return &type metadata for AnnotationActionEvent.Model.CodingKeys;
}

unint64_t sub_18E2F4()
{
  unint64_t result;

  result = qword_2A44C0;
  if (!qword_2A44C0)
  {
    result = swift_getWitnessTable("])\a", &type metadata for AnnotationActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A44C0);
  }
  return result;
}

unint64_t sub_18E33C()
{
  unint64_t result;

  result = qword_2A44C8;
  if (!qword_2A44C8)
  {
    result = swift_getWitnessTable(byte_212CAC, &type metadata for AnnotationActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A44C8);
  }
  return result;
}

unint64_t sub_18E384()
{
  unint64_t result;

  result = qword_2A44D0;
  if (!qword_2A44D0)
  {
    result = swift_getWitnessTable(byte_212CD4, &type metadata for AnnotationActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A44D0);
  }
  return result;
}

BookAnalytics::ListeningActionSourceType_optional __swiftcall ListeningActionSourceType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ListeningActionSourceType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268980, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ListeningActionSourceType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18E450 + 4 * byte_212DC0[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_18E450()
{
  return 0x7070416E69;
}

unint64_t sub_18E464()
{
  return 0xD000000000000014;
}

uint64_t sub_18E480()
{
  return 0x79616C50726163;
}

uint64_t sub_18E494()
{
  return 0x6979616C50776F6ELL;
}

uint64_t sub_18E4B0()
{
  return 0x746F6F5465756C62;
}

uint64_t sub_18E4CC()
{
  return 6452085;
}

uint64_t sub_18E4DC()
{
  return 0x6863746177;
}

void sub_18E4F0(char *a1)
{
  sub_27B0C(*a1);
}

unint64_t sub_18E500()
{
  unint64_t result;

  result = qword_2A44D8;
  if (!qword_2A44D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ListeningActionSourceType, &type metadata for ListeningActionSourceType);
    atomic_store(result, (unint64_t *)&qword_2A44D8);
  }
  return result;
}

void sub_18E544()
{
  char *v0;

  sub_1D3D3C(0, *v0);
}

void sub_18E550(uint64_t a1)
{
  char *v1;

  sub_1EC7B4(a1, *v1);
}

void sub_18E558(uint64_t a1)
{
  char *v1;

  sub_1D3D3C(a1, *v1);
}

BookAnalytics::ListeningActionSourceType_optional sub_18E560(Swift::String *a1)
{
  return ListeningActionSourceType.init(rawValue:)(*a1);
}

uint64_t sub_18E56C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ListeningActionSourceType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18E590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_18E704();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_18E5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_18E704();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ListeningActionSourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_18E684 + 4 * byte_212DCD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_18E6B8 + 4 * byte_212DC8[v4]))();
}

uint64_t sub_18E6B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18E6C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18E6C8);
  return result;
}

uint64_t sub_18E6D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18E6DCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_18E6E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18E6E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListeningActionSourceType()
{
  return &type metadata for ListeningActionSourceType;
}

unint64_t sub_18E704()
{
  unint64_t result;

  result = qword_2A44E0;
  if (!qword_2A44E0)
  {
    result = swift_getWitnessTable("m)\a", &type metadata for ListeningActionSourceType);
    atomic_store(result, (unint64_t *)&qword_2A44E0);
  }
  return result;
}

uint64_t sub_18E748(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A44E8, &enum case for SessionGroup.default(_:));
}

uint64_t static ReportAnIssueEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BA8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A44E8, a1);
}

uint64_t sub_18E788(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A4500, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReportAnIssueEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BB0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4500, a1);
}

uint64_t ReportAnIssueEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReportAnIssueEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4588, (uint64_t)&nominal type descriptor for ReportAnIssueEvent);
}

uint64_t ReportAnIssueEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReportAnIssueEvent.eventData.modify())()
{
  type metadata accessor for ReportAnIssueEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReportAnIssueEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for ReportAnIssueEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t ReportAnIssueEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReportAnIssueEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4618, (uint64_t)&nominal type descriptor for ReportAnIssueEvent.Model);
}

uint64_t ReportAnIssueEvent.Model.init(contentData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  char v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_WORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 60);
  v11 = *(_BYTE *)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 68);
  v13 = *(_BYTE *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 77);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  *(_WORD *)(a3 + 56) = v9;
  *(_DWORD *)(a3 + 60) = v10;
  *(_BYTE *)(a3 + 64) = v11;
  *(_DWORD *)(a3 + 68) = v12;
  *(_BYTE *)(a3 + 72) = v13;
  *(_DWORD *)(a3 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a3 + 77) = v14;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 80);
  v15 = a3 + *(int *)(type metadata accessor for ReportAnIssueEvent.Model(0) + 20);
  v16 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a2, v16);
}

uint64_t sub_18EA20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18EC2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18EA48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_18EC2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReportAnIssueEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  int v41;
  char v42;
  __int128 v43;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A4518);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_18EC2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReportAnIssueEvent.Model.CodingKeys, &type metadata for ReportAnIssueEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v31[0] = *(_QWORD *)v4;
  v31[1] = v13;
  v32 = v14;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = v19;
  v38 = v20;
  v39 = v21;
  v40 = v22;
  v41 = *(_DWORD *)(v4 + 73);
  v42 = v23;
  v43 = *(_OWORD *)(v4 + 80);
  v30 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v30, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = v4 + *(int *)(type metadata accessor for ReportAnIssueEvent.Model(0) + 20);
    LOBYTE(v31[0]) = 1;
    v26 = type metadata accessor for EventData(0);
    v27 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, v31, v6, v26, v27);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_18EC2C()
{
  unint64_t result;

  result = qword_2A4520;
  if (!qword_2A4520)
  {
    result = swift_getWitnessTable("U(\a", &type metadata for ReportAnIssueEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4520);
  }
  return result;
}

void ReportAnIssueEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  char v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;
  char v50;

  v32 = a2;
  v33 = type metadata accessor for EventData(0);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = sub_71B4(&qword_2A4528);
  v5 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ReportAnIssueEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_18EC2C();
  v34 = v7;
  v14 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReportAnIssueEvent.Model.CodingKeys, &type metadata for ReportAnIssueEvent.Model.CodingKeys, v13, v12, v11);
  if (v14)
  {
    sub_7DAC(a1);
  }
  else
  {
    v36 = v8;
    v15 = v33;
    v50 = 0;
    v16 = sub_1779C();
    v17 = v34;
    v18 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, &type metadata for ContentData, &v50, v35, &type metadata for ContentData, v16);
    v19 = v37[1];
    v20 = v38;
    v21 = v39;
    v22 = v40;
    v23 = v41;
    v24 = v42;
    v25 = v43;
    v26 = v44;
    v27 = v45;
    v28 = v46;
    v29 = v48;
    *(_QWORD *)v10 = v37[0];
    *((_QWORD *)v10 + 1) = v19;
    v10[16] = v20;
    *(_OWORD *)(v10 + 24) = v21;
    *((_QWORD *)v10 + 5) = v22;
    *((_QWORD *)v10 + 6) = v23;
    *((_WORD *)v10 + 28) = v24;
    *((_DWORD *)v10 + 15) = v25;
    v10[64] = v26;
    *((_DWORD *)v10 + 17) = v27;
    v10[72] = v28;
    *(_DWORD *)(v10 + 73) = v47;
    v10[77] = v29;
    *((_OWORD *)v10 + 5) = v49;
    LOBYTE(v37[0]) = 1;
    v30 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v15, v37, v18, v15, v30);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v31 + 32))(&v10[*(int *)(v36 + 20)], v4, v15);
    sub_18EF3C((uint64_t)v10, v32);
    sub_7DAC(a1);
    sub_18EF80((uint64_t)v10);
  }
}

uint64_t sub_18EF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReportAnIssueEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18EF80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReportAnIssueEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_18EFBC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReportAnIssueEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_18EFD0(_QWORD *a1)
{
  return ReportAnIssueEvent.Model.encode(to:)(a1);
}

uint64_t sub_18EFE4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BA8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A44E8, (uint64_t)sub_18E748, a1);
}

uint64_t sub_18F008@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BB0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4500, (uint64_t)sub_18E788, a1);
}

uint64_t sub_18F02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t getEnumTagSinglePayload for ReportAnIssueEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18F0B8);
}

uint64_t sub_18F0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18F140);
}

uint64_t sub_18F140(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

_QWORD *initializeBufferWithCopyOfBuffer for ReportAnIssueEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t)a2 + v10;
    v12 = a1 + v10;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v12, v11, v13);
  }
  return v3;
}

uint64_t destroy for ReportAnIssueEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ReportAnIssueEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(int *)(a3 + 20);
  v10 = a2 + v9;
  v11 = a1 + v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v11, v10, v12);
  return a1;
}

uint64_t assignWithCopy for ReportAnIssueEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(a3 + 20);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for ReportAnIssueEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 20);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReportAnIssueEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18F654);
}

uint64_t sub_18F654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18F6DC);
}

uint64_t sub_18F6DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_18F750(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18F810 + 4 * byte_212F15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18F844 + 4 * byte_212F10[v4]))();
}

uint64_t sub_18F844(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18F84C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18F854);
  return result;
}

uint64_t sub_18F860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18F868);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18F86C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18F874(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReportAnIssueEvent.Model.CodingKeys()
{
  return &type metadata for ReportAnIssueEvent.Model.CodingKeys;
}

unint64_t sub_18F894()
{
  unint64_t result;

  result = qword_2A4650;
  if (!qword_2A4650)
  {
    result = swift_getWitnessTable("m(\a", &type metadata for ReportAnIssueEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4650);
  }
  return result;
}

unint64_t sub_18F8DC()
{
  unint64_t result;

  result = qword_2A4658;
  if (!qword_2A4658)
  {
    result = swift_getWitnessTable(byte_213004, &type metadata for ReportAnIssueEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4658);
  }
  return result;
}

unint64_t sub_18F924()
{
  unint64_t result;

  result = qword_2A4660;
  if (!qword_2A4660)
  {
    result = swift_getWitnessTable(byte_21302C, &type metadata for ReportAnIssueEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4660);
  }
  return result;
}

uint64_t sub_18F968(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A4668, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingBrightnessChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BB8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4668, a1);
}

uint64_t sub_18F9A8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A4680, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingBrightnessChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BC0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4680, a1);
}

uint64_t ReadingBrightnessChangeEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingBrightnessChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A4710, (uint64_t)&nominal type descriptor for ReadingBrightnessChangeEvent);
}

uint64_t ReadingBrightnessChangeEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingBrightnessChangeEvent.contentData.modify())()
{
  type metadata accessor for ReadingBrightnessChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingBrightnessChangeEvent.brightnessData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A4698);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingBrightnessChangeEvent.brightnessData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A4698);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingBrightnessChangeEvent.brightnessData.modify())()
{
  type metadata accessor for ReadingBrightnessChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingBrightnessChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingBrightnessChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingBrightnessChangeEvent.eventData.modify())()
{
  type metadata accessor for ReadingBrightnessChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingBrightnessChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ReadingBrightnessChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_2A4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

void ReadingBrightnessChangeEvent.Model.brightnessData.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 112);
}

uint64_t ReadingBrightnessChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingBrightnessChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A47B0, (uint64_t)&nominal type descriptor for ReadingBrightnessChangeEvent.Model);
}

uint64_t ReadingBrightnessChangeEvent.Model.init(readingSessionData:contentData:brightnessData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 12);
  v11 = *((_BYTE *)a1 + 13);
  v12 = *((_BYTE *)a1 + 14);
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v18 = a2[5];
  v17 = a2[6];
  v19 = *((_WORD *)a2 + 28);
  v20 = *((_DWORD *)a2 + 15);
  v21 = *((_BYTE *)a2 + 64);
  v22 = *((_DWORD *)a2 + 17);
  v23 = *((_BYTE *)a2 + 72);
  v24 = *((_BYTE *)a2 + 77);
  v25 = *a3;
  *(_DWORD *)a5 = v7;
  *(_BYTE *)(a5 + 4) = v8;
  *(_DWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 12) = v10;
  *(_BYTE *)(a5 + 13) = v11;
  *(_BYTE *)(a5 + 14) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v17;
  *(_WORD *)(a5 + 72) = v19;
  *(_DWORD *)(a5 + 76) = v20;
  *(_BYTE *)(a5 + 80) = v21;
  *(_DWORD *)(a5 + 84) = v22;
  *(_BYTE *)(a5 + 88) = v23;
  *(_DWORD *)(a5 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a5 + 93) = v24;
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a2 + 5);
  *(_DWORD *)(a5 + 112) = v25;
  v26 = a5 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_18FE70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_18FEA4 + 4 * byte_213110[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_18FEA4()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_18FEC4()
{
  return 0x656E746867697262;
}

uint64_t sub_18FEE8()
{
  return 0x746144746E657665;
}

uint64_t sub_18FF04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1915AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18FF28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1901DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18FF50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1901DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingBrightnessChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;
  char v50;

  v3 = v1;
  v5 = sub_71B4(&qword_2A46A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1901DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys, &type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v36) = *(_DWORD *)v3;
  BYTE4(v36) = v12;
  LODWORD(v37) = v13;
  BYTE4(v37) = v14;
  BYTE5(v37) = v15;
  BYTE6(v37) = v16;
  v50 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    v36 = *(_QWORD *)(v3 + 16);
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = v22;
    v42 = v23;
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v47 = *(_DWORD *)(v3 + 89);
    v48 = v28;
    v49 = *(_OWORD *)(v3 + 96);
    v50 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ContentData, v29);
    LODWORD(v36) = *(_DWORD *)(v3 + 112);
    v50 = 2;
    v30 = sub_F7AFC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for BrightnessData, v30);
    v31 = v3 + *(int *)(type metadata accessor for ReadingBrightnessChangeEvent.Model(0) + 28);
    LOBYTE(v36) = 3;
    v32 = type metadata accessor for EventData(0);
    v33 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v36, v5, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1901DC()
{
  unint64_t result;

  result = qword_2A46A8;
  if (!qword_2A46A8)
  {
    result = swift_getWitnessTable("u'\a", &type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A46A8);
  }
  return result;
}

void ReadingBrightnessChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_2A46B0);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingBrightnessChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_1901DC();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys, &type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v47 = v9;
    v16 = v6;
    v17 = v11;
    v18 = v5;
    v53 = v3;
    v19 = v49;
    v70 = 0;
    v20 = sub_71AEC();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ReadingSessionData, &v70, v51, &type metadata for ReadingSessionData, v20);
    v23 = BYTE4(v54);
    v24 = v55;
    v25 = BYTE4(v55);
    v26 = BYTE5(v55);
    v27 = BYTE6(v55);
    v28 = (uint64_t)v17;
    *(_DWORD *)v17 = v54;
    v17[4] = v23;
    *((_DWORD *)v17 + 2) = v24;
    v17[12] = v25;
    v17[13] = v26;
    v17[14] = v27;
    v70 = 1;
    v29 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v70, v22, &type metadata for ContentData, v29);
    v30 = v55;
    v31 = v56;
    v32 = v57;
    v33 = v58;
    v35 = v59;
    v34 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v63;
    v39 = v64;
    v40 = v65;
    v41 = v67;
    v43 = v68;
    v42 = v69;
    *(_QWORD *)(v28 + 16) = v54;
    *(_QWORD *)(v28 + 24) = v30;
    *(_BYTE *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v32;
    *(_QWORD *)(v28 + 48) = v33;
    *(_QWORD *)(v28 + 56) = v35;
    *(_QWORD *)(v28 + 64) = v34;
    v46[0] = v34;
    v46[1] = v42;
    *(_WORD *)(v28 + 72) = v36;
    *(_DWORD *)(v28 + 76) = v37;
    *(_BYTE *)(v28 + 80) = v38;
    *(_DWORD *)(v28 + 84) = v39;
    *(_BYTE *)(v28 + 88) = v40;
    *(_DWORD *)(v28 + 89) = v66;
    *(_BYTE *)(v28 + 93) = v41;
    *(_QWORD *)(v28 + 96) = v43;
    *(_QWORD *)(v28 + 104) = v42;
    v70 = 2;
    v44 = sub_F7AB4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for BrightnessData, &v70, v22, &type metadata for BrightnessData, v44);
    *(_DWORD *)(v28 + 112) = v54;
    LOBYTE(v54) = 3;
    v45 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, &v54, v22, v19, v45);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v53 + 32))(v28 + *(int *)(v47 + 28), v18, v19);
    sub_1905CC(v28, v48);
    sub_7DAC(v52);
    sub_190610(v28);
  }
}

uint64_t sub_1905CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingBrightnessChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_190610(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingBrightnessChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_19064C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingBrightnessChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_190660(_QWORD *a1)
{
  return ReadingBrightnessChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_190674@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BB8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4668, (uint64_t)sub_18F968, a1);
}

uint64_t sub_190698@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BC0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4680, (uint64_t)sub_18F9A8, a1);
}

uint64_t sub_1906BC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_2A4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingBrightnessChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A4698);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ReadingBrightnessChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A4698);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ReadingBrightnessChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ReadingBrightnessChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ReadingBrightnessChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReadingBrightnessChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingBrightnessChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_190D24);
}

uint64_t sub_190D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A4698);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingBrightnessChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_190DFC);
}

uint64_t sub_190DFC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A4698);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_190ED0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2A4720, (uint64_t (*)(void))sub_F7AB4, (uint64_t (*)(void))sub_F7AFC, (uint64_t)&type metadata for BrightnessData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t assignWithCopy for ReadingBrightnessChangeEvent.Model(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v14 = a2[19];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v14;
  v15 = a2[21];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_DWORD *)(a1 + 84) = v15;
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v16 = *((_QWORD *)a2 + 13);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_DWORD *)(a1 + 112) = a2[28];
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = (uint64_t)a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for ReadingBrightnessChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingBrightnessChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_191280);
}

uint64_t sub_191280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingBrightnessChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_191308);
}

uint64_t sub_191308(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_19137C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_213208;
  v4[1] = &unk_213220;
  v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingBrightnessChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_191454 + 4 * byte_213119[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_191488 + 4 * byte_213114[v4]))();
}

uint64_t sub_191488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_191490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x191498);
  return result;
}

uint64_t sub_1914A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1914ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1914B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1914B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingBrightnessChangeEvent.Model.CodingKeys()
{
  return &type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys;
}

unint64_t sub_1914D8()
{
  unint64_t result;

  result = qword_2A47F0;
  if (!qword_2A47F0)
  {
    result = swift_getWitnessTable(byte_2132D4, &type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A47F0);
  }
  return result;
}

unint64_t sub_191520()
{
  unint64_t result;

  result = qword_2A47F8;
  if (!qword_2A47F8)
  {
    result = swift_getWitnessTable(byte_213244, &type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A47F8);
  }
  return result;
}

unint64_t sub_191568()
{
  unint64_t result;

  result = qword_2A4800;
  if (!qword_2A4800)
  {
    result = swift_getWitnessTable(byte_21326C, &type metadata for ReadingBrightnessChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4800);
  }
  return result;
}

uint64_t sub_1915AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x656E746867697262 && a2 == 0xEE00617461447373)
  {
    v7 = 0xEE00617461447373;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E746867697262, 0xEE00617461447373, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1917A8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A4808, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingScrollViewSettingChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BC8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4808, a1);
}

uint64_t sub_1917E8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A4820, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingScrollViewSettingChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BD0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4820, a1);
}

uint64_t ReadingScrollViewSettingChangeEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingScrollViewSettingChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A48B0, (uint64_t)&nominal type descriptor for ReadingScrollViewSettingChangeEvent);
}

uint64_t ReadingScrollViewSettingChangeEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingScrollViewSettingChangeEvent.contentData.modify())()
{
  type metadata accessor for ReadingScrollViewSettingChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingScrollViewSettingChangeEvent.scrollViewSettingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A4838);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingScrollViewSettingChangeEvent.scrollViewSettingData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A4838);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingScrollViewSettingChangeEvent.scrollViewSettingData.modify())()
{
  type metadata accessor for ReadingScrollViewSettingChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingScrollViewSettingChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingScrollViewSettingChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingScrollViewSettingChangeEvent.eventData.modify())()
{
  type metadata accessor for ReadingScrollViewSettingChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingScrollViewSettingChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ReadingScrollViewSettingChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_2A4838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

uint64_t ReadingScrollViewSettingChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingScrollViewSettingChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4950, (uint64_t)&nominal type descriptor for ReadingScrollViewSettingChangeEvent.Model);
}

uint64_t ReadingScrollViewSettingChangeEvent.Model.init(readingSessionData:contentData:scrollViewSettingData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 12);
  v11 = *((_BYTE *)a1 + 13);
  v12 = *((_BYTE *)a1 + 14);
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v18 = a2[5];
  v17 = a2[6];
  v19 = *((_WORD *)a2 + 28);
  v20 = *((_DWORD *)a2 + 15);
  v21 = *((_BYTE *)a2 + 64);
  v22 = *((_DWORD *)a2 + 17);
  v23 = *((_BYTE *)a2 + 72);
  v24 = *((_BYTE *)a2 + 77);
  v25 = *a3;
  *(_DWORD *)a5 = v7;
  *(_BYTE *)(a5 + 4) = v8;
  *(_DWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 12) = v10;
  *(_BYTE *)(a5 + 13) = v11;
  *(_BYTE *)(a5 + 14) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v17;
  *(_WORD *)(a5 + 72) = v19;
  *(_DWORD *)(a5 + 76) = v20;
  *(_BYTE *)(a5 + 80) = v21;
  *(_DWORD *)(a5 + 84) = v22;
  *(_BYTE *)(a5 + 88) = v23;
  *(_DWORD *)(a5 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a5 + 93) = v24;
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a2 + 5);
  *(_BYTE *)(a5 + 112) = v25;
  v26 = a5 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_191CA4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_191CD8 + 4 * byte_213350[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_191CD8()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_191CF8(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_191D10()
{
  return 0x746144746E657665;
}

uint64_t sub_191D2C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_193148(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_191D50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_192004();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_191D78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_192004();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingScrollViewSettingChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;
  char v50;

  v3 = v1;
  v5 = sub_71B4(&qword_2A4840);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_192004();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys, &type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v36) = *(_DWORD *)v3;
  BYTE4(v36) = v12;
  LODWORD(v37) = v13;
  BYTE4(v37) = v14;
  BYTE5(v37) = v15;
  BYTE6(v37) = v16;
  v50 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    v36 = *(_QWORD *)(v3 + 16);
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = v22;
    v42 = v23;
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v47 = *(_DWORD *)(v3 + 89);
    v48 = v28;
    v49 = *(_OWORD *)(v3 + 96);
    v50 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ContentData, v29);
    LOBYTE(v36) = *(_BYTE *)(v3 + 112);
    v50 = 2;
    v30 = sub_CB9B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ScrollViewSettingData, v30);
    v31 = v3 + *(int *)(type metadata accessor for ReadingScrollViewSettingChangeEvent.Model(0) + 28);
    LOBYTE(v36) = 3;
    v32 = type metadata accessor for EventData(0);
    v33 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v36, v5, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_192004()
{
  unint64_t result;

  result = qword_2A4848;
  if (!qword_2A4848)
  {
    result = swift_getWitnessTable("u&\a", &type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4848);
  }
  return result;
}

void ReadingScrollViewSettingChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_2A4850);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingScrollViewSettingChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_192004();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys, &type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v47 = v9;
    v16 = v6;
    v17 = v11;
    v18 = v5;
    v53 = v3;
    v19 = v49;
    v70 = 0;
    v20 = sub_71AEC();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ReadingSessionData, &v70, v51, &type metadata for ReadingSessionData, v20);
    v23 = BYTE4(v54);
    v24 = v55;
    v25 = BYTE4(v55);
    v26 = BYTE5(v55);
    v27 = BYTE6(v55);
    v28 = (uint64_t)v17;
    *(_DWORD *)v17 = v54;
    v17[4] = v23;
    *((_DWORD *)v17 + 2) = v24;
    v17[12] = v25;
    v17[13] = v26;
    v17[14] = v27;
    v70 = 1;
    v29 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v70, v22, &type metadata for ContentData, v29);
    v30 = v55;
    v31 = v56;
    v32 = v57;
    v33 = v58;
    v35 = v59;
    v34 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v63;
    v39 = v64;
    v40 = v65;
    v41 = v67;
    v43 = v68;
    v42 = v69;
    *(_QWORD *)(v28 + 16) = v54;
    *(_QWORD *)(v28 + 24) = v30;
    *(_BYTE *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v32;
    *(_QWORD *)(v28 + 48) = v33;
    *(_QWORD *)(v28 + 56) = v35;
    *(_QWORD *)(v28 + 64) = v34;
    v46[0] = v34;
    v46[1] = v42;
    *(_WORD *)(v28 + 72) = v36;
    *(_DWORD *)(v28 + 76) = v37;
    *(_BYTE *)(v28 + 80) = v38;
    *(_DWORD *)(v28 + 84) = v39;
    *(_BYTE *)(v28 + 88) = v40;
    *(_DWORD *)(v28 + 89) = v66;
    *(_BYTE *)(v28 + 93) = v41;
    *(_QWORD *)(v28 + 96) = v43;
    *(_QWORD *)(v28 + 104) = v42;
    v70 = 2;
    v44 = sub_CB970();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ScrollViewSettingData, &v70, v22, &type metadata for ScrollViewSettingData, v44);
    *(_BYTE *)(v28 + 112) = v54;
    LOBYTE(v54) = 3;
    v45 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, &v54, v22, v19, v45);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v53 + 32))(v28 + *(int *)(v47 + 28), v18, v19);
    sub_1923F4(v28, v48);
    sub_7DAC(v52);
    sub_192438(v28);
  }
}

uint64_t sub_1923F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingScrollViewSettingChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_192438(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingScrollViewSettingChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_192474(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingScrollViewSettingChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_192488(_QWORD *a1)
{
  return ReadingScrollViewSettingChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_19249C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BC8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4808, (uint64_t)sub_1917A8, a1);
}

uint64_t sub_1924C0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BD0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4820, (uint64_t)sub_1917E8, a1);
}

uint64_t sub_1924E4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_2A4838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingScrollViewSettingChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A4838);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ReadingScrollViewSettingChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A4838);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ReadingScrollViewSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ReadingScrollViewSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ReadingScrollViewSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReadingScrollViewSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingScrollViewSettingChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_192B4C);
}

uint64_t sub_192B4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A4838);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingScrollViewSettingChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_192C24);
}

uint64_t sub_192C24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A4838);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_192CF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2A48C0, (uint64_t (*)(void))sub_CB970, (uint64_t (*)(void))sub_CB9B8, (uint64_t)&type metadata for ScrollViewSettingData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for ReadingScrollViewSettingChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_192E20);
}

uint64_t sub_192E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingScrollViewSettingChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_192EA8);
}

uint64_t sub_192EA8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_192F1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_213450;
  v4[1] = &unk_213468;
  v4[2] = &unk_213480;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingScrollViewSettingChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_192FF0 + 4 * byte_213359[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_193024 + 4 * byte_213354[v4]))();
}

uint64_t sub_193024(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19302C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x193034);
  return result;
}

uint64_t sub_193040(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x193048);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_19304C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_193054(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingScrollViewSettingChangeEvent.Model.CodingKeys()
{
  return &type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys;
}

unint64_t sub_193074()
{
  unint64_t result;

  result = qword_2A4990;
  if (!qword_2A4990)
  {
    result = swift_getWitnessTable(byte_213534, &type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4990);
  }
  return result;
}

unint64_t sub_1930BC()
{
  unint64_t result;

  result = qword_2A4998;
  if (!qword_2A4998)
  {
    result = swift_getWitnessTable(byte_2134A4, &type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4998);
  }
  return result;
}

unint64_t sub_193104()
{
  unint64_t result;

  result = qword_2A49A0;
  if (!qword_2A49A0)
  {
    result = swift_getWitnessTable(byte_2134CC, &type metadata for ReadingScrollViewSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A49A0);
  }
  return result;
}

uint64_t sub_193148(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000000002226D0)
  {
    v7 = 0x80000000002226D0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000002226D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_19331C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A49A8, &enum case for SessionGroup.default(_:));
}

uint64_t static SearchSuggestionsReturnedEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BD8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A49A8, a1);
}

uint64_t sub_19335C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A49C0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SearchSuggestionsReturnedEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BE0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A49C0, a1);
}

uint64_t SearchSuggestionsReturnedEvent.searchSuggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchSuggestionsReturnedEvent(0) + 20);
  v4 = sub_71B4(&qword_29E8E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchSuggestionsReturnedEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4A48, (uint64_t)&nominal type descriptor for SearchSuggestionsReturnedEvent);
}

uint64_t SearchSuggestionsReturnedEvent.searchSuggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchSuggestionsReturnedEvent(0) + 20);
  v4 = sub_71B4(&qword_29E8E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchSuggestionsReturnedEvent.searchSuggestionData.modify())()
{
  type metadata accessor for SearchSuggestionsReturnedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchSuggestionsReturnedEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchSuggestionsReturnedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchSuggestionsReturnedEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchSuggestionsReturnedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchSuggestionsReturnedEvent.eventData.modify())()
{
  type metadata accessor for SearchSuggestionsReturnedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchSuggestionsReturnedEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for SearchSuggestionsReturnedEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t SearchSuggestionsReturnedEvent.Model.searchSuggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t SearchSuggestionsReturnedEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchSuggestionsReturnedEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchSuggestionsReturnedEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4AE0, (uint64_t)&nominal type descriptor for SearchSuggestionsReturnedEvent.Model);
}

uint64_t SearchSuggestionsReturnedEvent.Model.init(searchData:searchSuggestionData:eventData:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 1);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = v6;
  *(_QWORD *)(a4 + 24) = v7;
  *(_DWORD *)(a4 + 32) = v8;
  *(_QWORD *)(a4 + 40) = v9;
  v10 = a4 + *(int *)(type metadata accessor for SearchSuggestionsReturnedEvent.Model(0) + 24);
  v11 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

uint64_t sub_1936C0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000014;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x6144686372616573;
}

uint64_t sub_193728@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_194B68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19374C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_193950();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_193774(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_193950();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchSuggestionsReturnedEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v1;
  v5 = sub_71B4(&qword_2A49D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_193950();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys, &type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v23 = *v3;
  v24 = v12;
  v25 = v13;
  v22 = 0;
  v14 = sub_8B8F4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for SearchData, v14);
  if (!v2)
  {
    v15 = *((_QWORD *)v3 + 5);
    LODWORD(v23) = *((_DWORD *)v3 + 8);
    *((_QWORD *)&v23 + 1) = v15;
    v22 = 1;
    v16 = sub_1035C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for SearchSuggestionData, v16);
    v17 = (uint64_t)v3 + *(int *)(type metadata accessor for SearchSuggestionsReturnedEvent.Model(0) + 24);
    LOBYTE(v23) = 2;
    v18 = type metadata accessor for EventData(0);
    v19 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v23, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_193950()
{
  unint64_t result;

  result = qword_2A49E0;
  if (!qword_2A49E0)
  {
    result = swift_getWitnessTable(byte_21378C, &type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A49E0);
  }
  return result;
}

void SearchSuggestionsReturnedEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v31 = a2;
  v32 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_71B4(&qword_2A49E8);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SearchSuggestionsReturnedEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v35 = a1;
  sub_7988(a1, v12);
  v14 = sub_193950();
  v33 = v8;
  v15 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys, &type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v35);
  }
  else
  {
    v30 = v9;
    v36 = v5;
    v16 = v11;
    v17 = v3;
    v18 = v32;
    v40 = 0;
    v19 = sub_8BF70();
    v21 = v33;
    v20 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for SearchData, &v40, v34, &type metadata for SearchData, v19);
    v22 = v38;
    v23 = v39;
    v24 = (uint64_t)v16;
    *(_OWORD *)v16 = v37;
    *((_QWORD *)v16 + 2) = v22;
    *((_QWORD *)v16 + 3) = v23;
    v40 = 1;
    v25 = sub_103908();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for SearchSuggestionData, &v40, v20, &type metadata for SearchSuggestionData, v25);
    v26 = *((_QWORD *)&v37 + 1);
    *((_DWORD *)v16 + 8) = v37;
    *((_QWORD *)v16 + 5) = v26;
    LOBYTE(v37) = 2;
    v27 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v28 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v18, &v37, v20, v18, v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v24 + *(int *)(v30 + 24), v28, v18);
    sub_193C78(v24, v31);
    sub_7DAC(v35);
    sub_193CBC(v24);
  }
}

uint64_t sub_193C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchSuggestionsReturnedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_193CBC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchSuggestionsReturnedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_193CF8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchSuggestionsReturnedEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_193D0C(_QWORD *a1)
{
  return SearchSuggestionsReturnedEvent.Model.encode(to:)(a1);
}

uint64_t sub_193D20@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BD8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A49A8, (uint64_t)sub_19331C, a1);
}

uint64_t sub_193D44@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BE0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A49C0, (uint64_t)sub_19335C, a1);
}

uint64_t sub_193D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchSuggestionsReturnedEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_29A1E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29E8E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for SearchSuggestionsReturnedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SearchSuggestionsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for SearchSuggestionsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for SearchSuggestionsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SearchSuggestionsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchSuggestionsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19428C);
}

uint64_t sub_19428C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_29A1E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29E8E8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchSuggestionsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19433C);
}

uint64_t sub_19433C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_29A1E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29E8E8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1943E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_29A2C8, (uint64_t (*)(void))sub_8BF70, (uint64_t (*)(void))sub_8B8F4, (uint64_t)&type metadata for SearchData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_29E988, (uint64_t (*)(void))sub_103908, (uint64_t (*)(void))sub_1035C4, (uint64_t)&type metadata for SearchSuggestionData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchSuggestionsReturnedEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    v7 = a2[5];
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 40) = v7;
    v11 = type metadata accessor for EventData(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for SearchSuggestionsReturnedEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for SearchSuggestionsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 40) = v6;
  v10 = type metadata accessor for EventData(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for SearchSuggestionsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for SearchSuggestionsReturnedEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SearchSuggestionsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchSuggestionsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19484C);
}

uint64_t sub_19484C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchSuggestionsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1948D4);
}

uint64_t sub_1948D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_194948(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = " ";
  v4[1] = &unk_2136B0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchSuggestionsReturnedEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_194A10 + 4 * byte_2135B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_194A44 + 4 * byte_2135B0[v4]))();
}

uint64_t sub_194A44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_194A4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x194A54);
  return result;
}

uint64_t sub_194A60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x194A68);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_194A6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_194A74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchSuggestionsReturnedEvent.Model.CodingKeys()
{
  return &type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys;
}

unint64_t sub_194A94()
{
  unint64_t result;

  result = qword_2A4B20;
  if (!qword_2A4B20)
  {
    result = swift_getWitnessTable(byte_213764, &type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4B20);
  }
  return result;
}

unint64_t sub_194ADC()
{
  unint64_t result;

  result = qword_2A4B28;
  if (!qword_2A4B28)
  {
    result = swift_getWitnessTable(byte_2136D4, &type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4B28);
  }
  return result;
}

unint64_t sub_194B24()
{
  unint64_t result;

  result = qword_2A4B30;
  if (!qword_2A4B30)
  {
    result = swift_getWitnessTable(byte_2136FC, &type metadata for SearchSuggestionsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4B30);
  }
  return result;
}

uint64_t sub_194B68(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6144686372616573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144686372616573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x80000000002215A0;
    if (a2 == 0x80000000002215A0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000002215A0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::TargetType_optional __swiftcall TargetType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::TargetType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268A60, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t TargetType.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0xD00000000000001ALL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_194D84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_277BC(*a1, *a2);
}

unint64_t sub_194D94()
{
  unint64_t result;

  result = qword_2A4B38;
  if (!qword_2A4B38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TargetType, &type metadata for TargetType);
    atomic_store(result, (unint64_t *)&qword_2A4B38);
  }
  return result;
}

Swift::Int sub_194DD8()
{
  char *v0;

  return sub_195A00(*v0);
}

uint64_t sub_194DE0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x800000000021E3F0;
  v3 = 0xD000000000000012;
  if (*v1 != 1)
  {
    v3 = 0xD00000000000001ALL;
    v2 = 0x800000000021E410;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_194E60(uint64_t a1)
{
  char *v1;

  return sub_1D2D4C(a1, *v1);
}

BookAnalytics::TargetType_optional sub_194E68(Swift::String *a1)
{
  return TargetType.init(rawValue:)(*a1);
}

void sub_194E74(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x800000000021E3F0;
  v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    v5 = 0xD00000000000001ALL;
    v4 = 0x800000000021E410;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_194ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_19504C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_194F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_19504C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for TargetType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_194FCC + 4 * byte_2137E1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_195000 + 4 * byte_2137DC[v4]))();
}

uint64_t sub_195000(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_195008(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x195010);
  return result;
}

uint64_t sub_19501C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x195024);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_195028(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_195030(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TargetType()
{
  return &type metadata for TargetType;
}

unint64_t sub_19504C()
{
  unint64_t result;

  result = qword_2A4B40;
  if (!qword_2A4B40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TargetType, &type metadata for TargetType);
    atomic_store(result, (unint64_t *)&qword_2A4B40);
  }
  return result;
}

void sub_195090(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1950E0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6553656369766564, 0xEE0073676E697474);
  swift_bridgeObjectRelease(0xEE0073676E697474);
  return Hasher._finalize()();
}

void sub_19515C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1951AC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C61626F6C67, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_19525C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1952B4()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x6552736569726573, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_19535C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1953AC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65536E497478656ELL, 0xEC00000073656972);
  swift_bridgeObjectRelease(0xEC00000073656972);
  return Hasher._finalize()();
}

void sub_195458(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1954A8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F6F527265707573, 0xE90000000000006DLL);
  swift_bridgeObjectRelease(0xE90000000000006DLL);
  return Hasher._finalize()();
}

void sub_195568(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1955B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x696C43656C746974, 0xEA00000000006B63);
  swift_bridgeObjectRelease(0xEA00000000006B63);
  return Hasher._finalize()();
}

Swift::Int sub_195654(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000014;
  else
    v2 = 0xD000000000000011;
  if ((a1 & 1) != 0)
    v3 = 0x800000000021E0C0;
  else
    v3 = 0x800000000021E0A0;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1956D8(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_195728()
{
  uint64_t v1;

  String.hash(into:)(&v1, 6647407, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1957A4(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    v2 = 0xD000000000000010;
    if (a1 == 1)
      v3 = 0x800000000021E180;
    else
      v3 = 0x800000000021E1A0;
  }
  else
  {
    v3 = 0xEC000000656C6261;
    v2 = 0x6863616552746F6ELL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_195854(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1958A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x756F72676B636162, 0xEC0000006465646ELL);
  swift_bridgeObjectRelease(0xEC0000006465646ELL);
  return Hasher._finalize()();
}

void sub_19592C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_19597C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 28271, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_195A00(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000012;
    else
      v2 = 0xD00000000000001ALL;
    if (a1 == 1)
      v3 = 0x800000000021E3F0;
    else
      v3 = 0x800000000021E410;
  }
  else
  {
    v3 = 0xE700000000000000;
    v2 = 0x6E776F6E6B6E75;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_195AA4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_195AF4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x75426C65636E6163, 0xEF7061546E6F7474);
  swift_bridgeObjectRelease(0xEF7061546E6F7474);
  return Hasher._finalize()();
}

BookAnalytics::SearchEndMethod_optional __swiftcall SearchEndMethod.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SearchEndMethod_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268AC8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SearchEndMethod.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_195C00 + 4 * byte_21392D[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_195C00()
{
  return 0x75426C65636E6163;
}

unint64_t sub_195C24()
{
  return 0xD000000000000012;
}

uint64_t sub_195C40()
{
  return 0x656E6F646E616261;
}

unint64_t sub_195C60()
{
  unint64_t result;

  result = qword_2A4B48;
  if (!qword_2A4B48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchEndMethod, &type metadata for SearchEndMethod);
    atomic_store(result, (unint64_t *)&qword_2A4B48);
  }
  return result;
}

void sub_195CA4()
{
  char *v0;

  sub_195AA4(*v0);
}

void sub_195CAC()
{
  __asm { BR              X10 }
}

uint64_t sub_195CE8(uint64_t a1)
{
  String.hash(into:)(a1, 0x75426C65636E6163, 0xEF7061546E6F7474);
  return swift_bridgeObjectRelease(0xEF7061546E6F7474);
}

void sub_195D58(uint64_t a1)
{
  char *v1;

  sub_1D3858(a1, *v1);
}

BookAnalytics::SearchEndMethod_optional sub_195D60(Swift::String *a1)
{
  return SearchEndMethod.init(rawValue:)(*a1);
}

uint64_t sub_195D6C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_195D9C + 4 * byte_213935[*v0]))();
}

void sub_195D9C(_QWORD *a1@<X8>)
{
  *a1 = 0x75426C65636E6163;
  a1[1] = 0xEF7061546E6F7474;
}

void sub_195DC4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x800000000021E440;
}

void sub_195DE4(_QWORD *a1@<X8>)
{
  *a1 = 0x656E6F646E616261;
  a1[1] = 0xE900000000000064;
}

uint64_t sub_195E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_195F78();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_195E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_195F78();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SearchEndMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_195EF8 + 4 * byte_21393E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_195F2C + 4 * byte_213939[v4]))();
}

uint64_t sub_195F2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_195F34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x195F3CLL);
  return result;
}

uint64_t sub_195F48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x195F50);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_195F54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_195F5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchEndMethod()
{
  return &type metadata for SearchEndMethod;
}

unint64_t sub_195F78()
{
  unint64_t result;

  result = qword_2A4B50;
  if (!qword_2A4B50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchEndMethod, &type metadata for SearchEndMethod);
    atomic_store(result, (unint64_t *)&qword_2A4B50);
  }
  return result;
}

BookAnalytics::FilterType_optional __swiftcall FilterType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::FilterType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268B48, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t FilterType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19604C + 4 * byte_213A5C[*v0]))(0x7265536E496C6C61, 0xEB00000000736569);
}

uint64_t sub_19604C()
{
  return 0x6573616863727570;
}

uint64_t sub_196068()
{
  return 0x646165726E75;
}

uint64_t sub_19607C()
{
  return 0x6E776F6E6B6E75;
}

void sub_196094(char *a1)
{
  sub_29AB0(*a1);
}

unint64_t sub_1960A4()
{
  unint64_t result;

  result = qword_2A4B58;
  if (!qword_2A4B58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FilterType, &type metadata for FilterType);
    atomic_store(result, (unint64_t *)&qword_2A4B58);
  }
  return result;
}

void sub_1960E8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_19613C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6573616863727570, 0xE900000000000064);
  swift_bridgeObjectRelease(0xE900000000000064);
  return Hasher._finalize()();
}

void sub_1961AC()
{
  __asm { BR              X10 }
}

uint64_t sub_1961F0(uint64_t a1)
{
  String.hash(into:)(a1, 0x6573616863727570, 0xE900000000000064);
  return swift_bridgeObjectRelease(0xE900000000000064);
}

void sub_19624C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_19629C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6573616863727570, 0xE900000000000064);
  swift_bridgeObjectRelease(0xE900000000000064);
  return Hasher._finalize()();
}

BookAnalytics::FilterType_optional sub_19630C(Swift::String *a1)
{
  return FilterType.init(rawValue:)(*a1);
}

uint64_t sub_196318()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_196350 + 4 * byte_213A6C[*v0]))();
}

void sub_196350(_QWORD *a1@<X8>)
{
  *a1 = 0x6573616863727570;
  a1[1] = 0xE900000000000064;
}

void sub_196370(_QWORD *a1@<X8>)
{
  *a1 = 0x646165726E75;
  a1[1] = 0xE600000000000000;
}

void sub_196388(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1963A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_196518();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_196400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_196518();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for FilterType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_196498 + 4 * byte_213A75[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1964CC + 4 * byte_213A70[v4]))();
}

uint64_t sub_1964CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1964D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1964DCLL);
  return result;
}

uint64_t sub_1964E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1964F0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1964F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1964FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterType()
{
  return &type metadata for FilterType;
}

unint64_t sub_196518()
{
  unint64_t result;

  result = qword_2A4B60;
  if (!qword_2A4B60)
  {
    result = swift_getWitnessTable("]%\a", &type metadata for FilterType);
    atomic_store(result, (unint64_t *)&qword_2A4B60);
  }
  return result;
}

uint64_t static WantListRemovalData.== infix(_:_:)(uint64_t *a1, _QWORD **a2)
{
  return sub_666B4(*a1, *a2);
}

uint64_t sub_196568()
{
  return 0x536C61766F6D6572;
}

uint64_t sub_19658C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x536C61766F6D6572 && a2 == 0xEE007972616D6D75)
  {
    result = swift_bridgeObjectRelease(0xEE007972616D6D75);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x536C61766F6D6572, 0xEE007972616D6D75, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_196644(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1967B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19666C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1967B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WantListRemovalData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_2A4B68);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1967B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WantListRemovalData.CodingKeys, &type metadata for WantListRemovalData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_2A4B78);
  v12 = sub_196938(&qword_2A4B80, (uint64_t (*)(void))sub_FCC4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1967B4()
{
  unint64_t result;

  result = qword_2A4B70;
  if (!qword_2A4B70)
  {
    result = swift_getWitnessTable(byte_213D38, &type metadata for WantListRemovalData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4B70);
  }
  return result;
}

uint64_t WantListRemovalData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A4B88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1967B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WantListRemovalData.CodingKeys, &type metadata for WantListRemovalData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_2A4B78);
    v13 = sub_196938(&qword_2A4B90, (uint64_t (*)(void))sub_FC7C, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_196938(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_2A4B78);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1969A4()
{
  unint64_t result;

  result = qword_2A4B98;
  if (!qword_2A4B98)
  {
    result = swift_getWitnessTable("m%\a", &type metadata for WantListRemovalData);
    atomic_store(result, (unint64_t *)&qword_2A4B98);
  }
  return result;
}

unint64_t sub_1969EC()
{
  unint64_t result;

  result = qword_2A4BA0;
  if (!qword_2A4BA0)
  {
    result = swift_getWitnessTable("U%\a", &type metadata for WantListRemovalData);
    atomic_store(result, (unint64_t *)&qword_2A4BA0);
  }
  return result;
}

uint64_t sub_196A30@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return WantListRemovalData.init(from:)(a1, a2);
}

uint64_t sub_196A44(_QWORD *a1)
{
  return WantListRemovalData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for WantListRemovalData()
{
  return &type metadata for WantListRemovalData;
}

uint64_t storeEnumTagSinglePayload for WantListRemovalData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_196AA8 + 4 * byte_213B90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_196AC8 + 4 * byte_213B95[v4]))();
}

_BYTE *sub_196AA8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_196AC8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_196AD0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_196AD8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_196AE0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_196AE8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WantListRemovalData.CodingKeys()
{
  return &type metadata for WantListRemovalData.CodingKeys;
}

unint64_t sub_196B08()
{
  unint64_t result;

  result = qword_2A4BA8;
  if (!qword_2A4BA8)
  {
    result = swift_getWitnessTable("Q$\a", &type metadata for WantListRemovalData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4BA8);
  }
  return result;
}

unint64_t sub_196B50()
{
  unint64_t result;

  result = qword_2A4BB0;
  if (!qword_2A4BB0)
  {
    result = swift_getWitnessTable(byte_213C80, &type metadata for WantListRemovalData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4BB0);
  }
  return result;
}

unint64_t sub_196B98()
{
  unint64_t result;

  result = qword_2A4BB8;
  if (!qword_2A4BB8)
  {
    result = swift_getWitnessTable(byte_213CA8, &type metadata for WantListRemovalData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4BB8);
  }
  return result;
}

uint64_t static LibraryData.== infix(_:_:)(uint64_t *a1, _QWORD **a2)
{
  return sub_673DC(*a1, *a2);
}

uint64_t sub_196BE8()
{
  return 0x537972617262696CLL;
}

uint64_t sub_196C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x537972617262696CLL && a2 == 0xEE007972616D6D75)
  {
    result = swift_bridgeObjectRelease(0xEE007972616D6D75);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x537972617262696CLL, 0xEE007972616D6D75, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_196CC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_196E34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_196CEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_196E34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibraryData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_2A4BC0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_196E34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibraryData.CodingKeys, &type metadata for LibraryData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_2A4BD0);
  v12 = sub_196FB8(&qword_2A4BD8, (uint64_t (*)(void))sub_163E8C, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_196E34()
{
  unint64_t result;

  result = qword_2A4BC8;
  if (!qword_2A4BC8)
  {
    result = swift_getWitnessTable("E$\a", &type metadata for LibraryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4BC8);
  }
  return result;
}

uint64_t LibraryData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A4BE0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_196E34();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibraryData.CodingKeys, &type metadata for LibraryData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_2A4BD0);
    v13 = sub_196FB8(&qword_2A4BE8, (uint64_t (*)(void))sub_163E44, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_196FB8(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_2A4BD0);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_197028@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return LibraryData.init(from:)(a1, a2);
}

uint64_t sub_19703C(_QWORD *a1)
{
  return LibraryData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for LibraryData()
{
  return &type metadata for LibraryData;
}

uint64_t storeEnumTagSinglePayload for LibraryData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1970A0 + 4 * byte_213D88[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1970C0 + 4 * byte_213D8D[v4]))();
}

_BYTE *sub_1970A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1970C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1970C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1970D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1970D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1970E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LibraryData.CodingKeys()
{
  return &type metadata for LibraryData.CodingKeys;
}

unint64_t sub_197100()
{
  unint64_t result;

  result = qword_2A4BF0;
  if (!qword_2A4BF0)
  {
    result = swift_getWitnessTable(byte_213EFC, &type metadata for LibraryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4BF0);
  }
  return result;
}

unint64_t sub_197148()
{
  unint64_t result;

  result = qword_2A4BF8;
  if (!qword_2A4BF8)
  {
    result = swift_getWitnessTable(byte_213E6C, &type metadata for LibraryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4BF8);
  }
  return result;
}

unint64_t sub_197190()
{
  unint64_t result;

  result = qword_2A4C00;
  if (!qword_2A4C00)
  {
    result = swift_getWitnessTable(byte_213E94, &type metadata for LibraryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4C00);
  }
  return result;
}

uint64_t sub_1971D4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A4C08, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingBackgroundColorChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BE8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4C08, a1);
}

uint64_t sub_197214(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A4C20, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingBackgroundColorChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BF0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4C20, a1);
}

uint64_t ReadingBackgroundColorChangeEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingBackgroundColorChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A4CC0, (uint64_t)&nominal type descriptor for ReadingBackgroundColorChangeEvent);
}

uint64_t ReadingBackgroundColorChangeEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingBackgroundColorChangeEvent.contentData.modify())()
{
  type metadata accessor for ReadingBackgroundColorChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingBackgroundColorChangeEvent.backgroundColorData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A4C38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingBackgroundColorChangeEvent.backgroundColorData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A4C38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingBackgroundColorChangeEvent.backgroundColorData.modify())()
{
  type metadata accessor for ReadingBackgroundColorChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingBackgroundColorChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingBackgroundColorChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingBackgroundColorChangeEvent.eventData.modify())()
{
  type metadata accessor for ReadingBackgroundColorChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingBackgroundColorChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ReadingBackgroundColorChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_2A4C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

uint64_t ReadingBackgroundColorChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingBackgroundColorChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4D60, (uint64_t)&nominal type descriptor for ReadingBackgroundColorChangeEvent.Model);
}

uint64_t ReadingBackgroundColorChangeEvent.Model.init(readingSessionData:contentData:backgroundColorData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 12);
  v11 = *((_BYTE *)a1 + 13);
  v12 = *((_BYTE *)a1 + 14);
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v18 = a2[5];
  v17 = a2[6];
  v19 = *((_WORD *)a2 + 28);
  v20 = *((_DWORD *)a2 + 15);
  v21 = *((_BYTE *)a2 + 64);
  v22 = *((_DWORD *)a2 + 17);
  v23 = *((_BYTE *)a2 + 72);
  v24 = *((_BYTE *)a2 + 77);
  v25 = *a3;
  *(_DWORD *)a5 = v7;
  *(_BYTE *)(a5 + 4) = v8;
  *(_DWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 12) = v10;
  *(_BYTE *)(a5 + 13) = v11;
  *(_BYTE *)(a5 + 14) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v17;
  *(_WORD *)(a5 + 72) = v19;
  *(_DWORD *)(a5 + 76) = v20;
  *(_BYTE *)(a5 + 80) = v21;
  *(_DWORD *)(a5 + 84) = v22;
  *(_BYTE *)(a5 + 88) = v23;
  *(_DWORD *)(a5 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a5 + 93) = v24;
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a2 + 5);
  *(_BYTE *)(a5 + 112) = v25;
  v26 = a5 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_1976D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_197704 + 4 * byte_213F80[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_197704()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_197724(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_19773C()
{
  return 0x746144746E657665;
}

uint64_t sub_197758@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_198BFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19777C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_197A30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1977A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_197A30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingBackgroundColorChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;
  char v50;

  v3 = v1;
  v5 = sub_71B4(&qword_2A4C40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_197A30();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys, &type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v36) = *(_DWORD *)v3;
  BYTE4(v36) = v12;
  LODWORD(v37) = v13;
  BYTE4(v37) = v14;
  BYTE5(v37) = v15;
  BYTE6(v37) = v16;
  v50 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    v36 = *(_QWORD *)(v3 + 16);
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = v22;
    v42 = v23;
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v47 = *(_DWORD *)(v3 + 89);
    v48 = v28;
    v49 = *(_OWORD *)(v3 + 96);
    v50 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ContentData, v29);
    LOBYTE(v36) = *(_BYTE *)(v3 + 112);
    v50 = 2;
    v30 = sub_197A74();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for BackgroundColorData, v30);
    v31 = v3 + *(int *)(type metadata accessor for ReadingBackgroundColorChangeEvent.Model(0) + 28);
    LOBYTE(v36) = 3;
    v32 = type metadata accessor for EventData(0);
    v33 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v36, v5, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_197A30()
{
  unint64_t result;

  result = qword_2A4C48;
  if (!qword_2A4C48)
  {
    result = swift_getWitnessTable("E#\a", &type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4C48);
  }
  return result;
}

unint64_t sub_197A74()
{
  unint64_t result;

  result = qword_2A4C50;
  if (!qword_2A4C50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BackgroundColorData, &type metadata for BackgroundColorData);
    atomic_store(result, (unint64_t *)&qword_2A4C50);
  }
  return result;
}

void ReadingBackgroundColorChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_2A4C58);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingBackgroundColorChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_197A30();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys, &type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v47 = v9;
    v16 = v6;
    v17 = v11;
    v18 = v5;
    v53 = v3;
    v19 = v49;
    v70 = 0;
    v20 = sub_71AEC();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ReadingSessionData, &v70, v51, &type metadata for ReadingSessionData, v20);
    v23 = BYTE4(v54);
    v24 = v55;
    v25 = BYTE4(v55);
    v26 = BYTE5(v55);
    v27 = BYTE6(v55);
    v28 = (uint64_t)v17;
    *(_DWORD *)v17 = v54;
    v17[4] = v23;
    *((_DWORD *)v17 + 2) = v24;
    v17[12] = v25;
    v17[13] = v26;
    v17[14] = v27;
    v70 = 1;
    v29 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v70, v22, &type metadata for ContentData, v29);
    v30 = v55;
    v31 = v56;
    v32 = v57;
    v33 = v58;
    v35 = v59;
    v34 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v63;
    v39 = v64;
    v40 = v65;
    v41 = v67;
    v43 = v68;
    v42 = v69;
    *(_QWORD *)(v28 + 16) = v54;
    *(_QWORD *)(v28 + 24) = v30;
    *(_BYTE *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v32;
    *(_QWORD *)(v28 + 48) = v33;
    *(_QWORD *)(v28 + 56) = v35;
    *(_QWORD *)(v28 + 64) = v34;
    v46[0] = v34;
    v46[1] = v42;
    *(_WORD *)(v28 + 72) = v36;
    *(_DWORD *)(v28 + 76) = v37;
    *(_BYTE *)(v28 + 80) = v38;
    *(_DWORD *)(v28 + 84) = v39;
    *(_BYTE *)(v28 + 88) = v40;
    *(_DWORD *)(v28 + 89) = v66;
    *(_BYTE *)(v28 + 93) = v41;
    *(_QWORD *)(v28 + 96) = v43;
    *(_QWORD *)(v28 + 104) = v42;
    v70 = 2;
    v44 = sub_197E64();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for BackgroundColorData, &v70, v22, &type metadata for BackgroundColorData, v44);
    *(_BYTE *)(v28 + 112) = v54;
    LOBYTE(v54) = 3;
    v45 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, &v54, v22, v19, v45);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v53 + 32))(v28 + *(int *)(v47 + 28), v18, v19);
    sub_197EA8(v28, v48);
    sub_7DAC(v52);
    sub_197EEC(v28);
  }
}

unint64_t sub_197E64()
{
  unint64_t result;

  result = qword_2A4C60;
  if (!qword_2A4C60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BackgroundColorData, &type metadata for BackgroundColorData);
    atomic_store(result, (unint64_t *)&qword_2A4C60);
  }
  return result;
}

uint64_t sub_197EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingBackgroundColorChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_197EEC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingBackgroundColorChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_197F28(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingBackgroundColorChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_197F3C(_QWORD *a1)
{
  return ReadingBackgroundColorChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_197F50@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BE8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4C08, (uint64_t)sub_1971D4, a1);
}

uint64_t sub_197F74@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BF0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4C20, (uint64_t)sub_197214, a1);
}

uint64_t sub_197F98@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_2A4C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingBackgroundColorChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A4C38);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ReadingBackgroundColorChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A4C38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ReadingBackgroundColorChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ReadingBackgroundColorChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ReadingBackgroundColorChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReadingBackgroundColorChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A4C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingBackgroundColorChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_198600);
}

uint64_t sub_198600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A4C38);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingBackgroundColorChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1986D8);
}

uint64_t sub_1986D8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A4C38);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1987AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2A4CD0, (uint64_t (*)(void))sub_197E64, (uint64_t (*)(void))sub_197A74, (uint64_t)&type metadata for BackgroundColorData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for ReadingBackgroundColorChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1988D4);
}

uint64_t sub_1988D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingBackgroundColorChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19895C);
}

uint64_t sub_19895C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1989D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_214078;
  v4[1] = &unk_214090;
  v4[2] = &unk_2140A8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingBackgroundColorChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_198AA4 + 4 * byte_213F89[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_198AD8 + 4 * byte_213F84[v4]))();
}

uint64_t sub_198AD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_198AE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x198AE8);
  return result;
}

uint64_t sub_198AF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x198AFCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_198B00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_198B08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingBackgroundColorChangeEvent.Model.CodingKeys()
{
  return &type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys;
}

unint64_t sub_198B28()
{
  unint64_t result;

  result = qword_2A4DA0;
  if (!qword_2A4DA0)
  {
    result = swift_getWitnessTable("]#\a", &type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4DA0);
  }
  return result;
}

unint64_t sub_198B70()
{
  unint64_t result;

  result = qword_2A4DA8;
  if (!qword_2A4DA8)
  {
    result = swift_getWitnessTable(byte_2140CC, &type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4DA8);
  }
  return result;
}

unint64_t sub_198BB8()
{
  unint64_t result;

  result = qword_2A4DB0;
  if (!qword_2A4DB0)
  {
    result = swift_getWitnessTable(byte_2140F4, &type metadata for ReadingBackgroundColorChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4DB0);
  }
  return result;
}

uint64_t sub_198BFC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000000002226F0)
  {
    v7 = 0x80000000002226F0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000002226F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::WelcomeScreenData __swiftcall WelcomeScreenData.init(welcomeScreenType:welcomeScreenPosition:)(BookAnalytics::WelcomeScreenData welcomeScreenType, Swift::Int32 welcomeScreenPosition)
{
  uint64_t v2;

  *(_BYTE *)v2 = *(_BYTE *)welcomeScreenType.welcomeScreenType;
  *(_DWORD *)(v2 + 4) = welcomeScreenPosition;
  return welcomeScreenType;
}

void static WelcomeScreenData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_198E40@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_198EA8 + 4 * byte_2141E5[a1]))(0x656D6F636C6577);
}

BOOL sub_198EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  _BOOL8 result;

  if (a1 == 0x656D6F636C6577 && v1 == v2)
  {
    swift_bridgeObjectRelease_n(v1, 2);
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656D6F636C6577, v2, 0);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v2);
    result = 0;
    if ((v5 & 1) == 0)
      return result;
  }
  return v3 == v4;
}

unint64_t sub_198F70()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0xD000000000000011;
}

uint64_t sub_198FB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_199634(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_198FD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_199158();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_198FFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_199158();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WelcomeScreenData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_71B4(&qword_2A4DB8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = *((_DWORD *)v1 + 1);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_199158();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WelcomeScreenData.CodingKeys, &type metadata for WelcomeScreenData.CodingKeys, v11, v9, v10);
  v18 = v8;
  v17 = 0;
  v12 = sub_19919C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, &type metadata for WelcomeScreenType, v12);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_199158()
{
  unint64_t result;

  result = qword_2A4DC0;
  if (!qword_2A4DC0)
  {
    result = swift_getWitnessTable(byte_214398, &type metadata for WelcomeScreenData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4DC0);
  }
  return result;
}

unint64_t sub_19919C()
{
  unint64_t result;

  result = qword_2A4DC8;
  if (!qword_2A4DC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WelcomeScreenType, &type metadata for WelcomeScreenType);
    atomic_store(result, (unint64_t *)&qword_2A4DC8);
  }
  return result;
}

uint64_t WelcomeScreenData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v5 = sub_71B4(&qword_2A4DD0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_199158();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WelcomeScreenData.CodingKeys, &type metadata for WelcomeScreenData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v18 = 0;
    v12 = sub_199344();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for WelcomeScreenType, &v18, v5, &type metadata for WelcomeScreenType, v12);
    v13 = v19;
    v17 = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v13;
    *(_DWORD *)(a2 + 4) = v14;
  }
  return sub_7DAC(a1);
}

unint64_t sub_199344()
{
  unint64_t result;

  result = qword_2A4DD8;
  if (!qword_2A4DD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WelcomeScreenType, &type metadata for WelcomeScreenType);
    atomic_store(result, (unint64_t *)&qword_2A4DD8);
  }
  return result;
}

uint64_t sub_199390(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a2 + 4);
  sub_2915C(*(_BYTE *)a1);
  return v4 & (v2 == v3);
}

uint64_t sub_1993C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WelcomeScreenData.init(from:)(a1, a2);
}

uint64_t sub_1993DC(_QWORD *a1)
{
  return WelcomeScreenData.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for WelcomeScreenData(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WelcomeScreenData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[8])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WelcomeScreenData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for WelcomeScreenData()
{
  return &type metadata for WelcomeScreenData;
}

uint64_t storeEnumTagSinglePayload for WelcomeScreenData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1994DC + 4 * byte_2141EF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_199510 + 4 * byte_2141EA[v4]))();
}

uint64_t sub_199510(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_199518(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x199520);
  return result;
}

uint64_t sub_19952C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x199534);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_199538(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_199540(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WelcomeScreenData.CodingKeys()
{
  return &type metadata for WelcomeScreenData.CodingKeys;
}

unint64_t sub_199560()
{
  unint64_t result;

  result = qword_2A4DE0;
  if (!qword_2A4DE0)
  {
    result = swift_getWitnessTable(byte_214370, &type metadata for WelcomeScreenData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4DE0);
  }
  return result;
}

unint64_t sub_1995A8()
{
  unint64_t result;

  result = qword_2A4DE8;
  if (!qword_2A4DE8)
  {
    result = swift_getWitnessTable(byte_2142E0, &type metadata for WelcomeScreenData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4DE8);
  }
  return result;
}

unint64_t sub_1995F0()
{
  unint64_t result;

  result = qword_2A4DF0;
  if (!qword_2A4DF0)
  {
    result = swift_getWitnessTable("q#\a", &type metadata for WelcomeScreenData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4DF0);
  }
  return result;
}

uint64_t sub_199634(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000000222710;
    if (a2 == 0x8000000000222710)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222710, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000000222730)
  {
    swift_bridgeObjectRelease(0x8000000000222730);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000000222730, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::StartMethod_optional __swiftcall StartMethod.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::StartMethod_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268BC8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t StartMethod.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1997A4 + 4 * byte_2143E8[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1997A4()
{
  return 0x6C616E7265747865;
}

uint64_t sub_1997C4()
{
  return 0x65726353656D6F68;
}

uint64_t sub_1997E8()
{
  return 0x756F546563726F66;
}

unint64_t sub_199804()
{
  return 0xD000000000000017;
}

unint64_t sub_199824()
{
  return 0xD000000000000014;
}

uint64_t sub_199840()
{
  return 0x6163696669746F6ELL;
}

uint64_t sub_199860()
{
  return 0x746567646977;
}

void sub_199874(char *a1)
{
  sub_2AC54(*a1);
}

unint64_t sub_199884()
{
  unint64_t result;

  result = qword_2A4DF8;
  if (!qword_2A4DF8)
  {
    result = swift_getWitnessTable("}#\a", &type metadata for StartMethod);
    atomic_store(result, (unint64_t *)&qword_2A4DF8);
  }
  return result;
}

void sub_1998C8()
{
  char *v0;

  sub_1D31F4(0, *v0);
}

void sub_1998D4(uint64_t a1)
{
  char *v1;

  sub_1ED11C(a1, *v1);
}

void sub_1998DC(uint64_t a1)
{
  char *v1;

  sub_1D31F4(a1, *v1);
}

BookAnalytics::StartMethod_optional sub_1998E4(Swift::String *a1)
{
  return StartMethod.init(rawValue:)(*a1);
}

uint64_t sub_1998F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = StartMethod.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_199914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_199A88();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_199970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_199A88();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for StartMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_199A08 + 4 * byte_2143F5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_199A3C + 4 * byte_2143F0[v4]))();
}

uint64_t sub_199A3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_199A44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x199A4CLL);
  return result;
}

uint64_t sub_199A58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x199A60);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_199A64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_199A6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StartMethod()
{
  return &type metadata for StartMethod;
}

unint64_t sub_199A88()
{
  unint64_t result;

  result = qword_2A4E00;
  if (!qword_2A4E00)
  {
    result = swift_getWitnessTable("M#\a", &type metadata for StartMethod);
    atomic_store(result, (unint64_t *)&qword_2A4E00);
  }
  return result;
}

uint64_t sub_199ACC()
{
  return 0x65506E6F69746361;
}

uint64_t sub_199AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65506E6F69746361 && a2 == 0xEF64656D726F6672)
  {
    result = swift_bridgeObjectRelease(0xEF64656D726F6672);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65506E6F69746361, 0xEF64656D726F6672, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_199BA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_199CE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_199BD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_199CE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ActionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_71B4(&qword_2A4E08);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_199CE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActionData.CodingKeys, &type metadata for ActionData.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_199CE4()
{
  unint64_t result;

  result = qword_2A4E10;
  if (!qword_2A4E10)
  {
    result = swift_getWitnessTable(byte_2146B8, &type metadata for ActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E10);
  }
  return result;
}

uint64_t ActionData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A4E18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_199CE4();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActionData.CodingKeys, &type metadata for ActionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_199E4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ActionData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for ActionData()
{
  return &type metadata for ActionData;
}

uint64_t storeEnumTagSinglePayload for ActionData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_199EB0 + 4 * byte_214520[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_199ED0 + 4 * byte_214525[v4]))();
}

_BYTE *sub_199EB0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_199ED0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_199ED8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_199EE0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_199EE8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_199EF0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ActionData.CodingKeys()
{
  return &type metadata for ActionData.CodingKeys;
}

unint64_t sub_199F10()
{
  unint64_t result;

  result = qword_2A4E20;
  if (!qword_2A4E20)
  {
    result = swift_getWitnessTable(byte_214690, &type metadata for ActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E20);
  }
  return result;
}

unint64_t sub_199F58()
{
  unint64_t result;

  result = qword_2A4E28;
  if (!qword_2A4E28)
  {
    result = swift_getWitnessTable("Y#\a", &type metadata for ActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E28);
  }
  return result;
}

unint64_t sub_199FA0()
{
  unint64_t result;

  result = qword_2A4E30;
  if (!qword_2A4E30)
  {
    result = swift_getWitnessTable("A#\a", &type metadata for ActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E30);
  }
  return result;
}

uint64_t sub_199FE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19A014 + 4 * byte_214708[*v0]))(0x44496D6F6F72, 0xE600000000000000);
}

unint64_t sub_19A014()
{
  return 0xD000000000000011;
}

uint64_t sub_19A030()
{
  return 0x657079546D6F6F72;
}

uint64_t sub_19A048()
{
  return 0x656D614E6D6F6F72;
}

uint64_t sub_19A060@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19A8D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19A084(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19A648();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19A0AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19A648();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RoomData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v3 = sub_71B4(&qword_2A4E38);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v23 = v1[3];
  v24 = v9;
  v22 = *((unsigned __int8 *)v1 + 32);
  v10 = v1[5];
  v20 = v1[6];
  v21 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_19A648();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RoomData.CodingKeys, &type metadata for RoomData.CodingKeys, v13, v11, v12);
  v30 = 0;
  v14 = v25;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v30, v3);
  if (!v14)
  {
    v15 = v22;
    v17 = v20;
    v16 = v21;
    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v23, &v29, v3);
    v28 = v15;
    v27 = 2;
    v18 = sub_19A68C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v3, &type metadata for RoomType, v18);
    v26 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v26, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void RoomData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  unint64_t v18;
  uint64_t v19;
  BAEventReporter *v20;
  BAEventReporter *v21;
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  BAEventReporter *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  int64_t v49;
  int64_t v50;
  void *v51;
  BAEventReporter *v52;
  uint64_t v53;
  uint64_t v54;
  BAEventReporter *v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;

  v5 = sub_71B4(&qword_2A4E50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_19A648();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RoomData.CodingKeys, &type metadata for RoomData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v52 = 0;
  }
  else
  {
    BYTE2(v59) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v59 + 2, v5);
    v14 = v13;
    v56 = v12;
    BYTE1(v59) = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v59 + 1, v5);
    v17 = v16;
    v54 = v15;
    v58 = 2;
    v18 = sub_19A6D0();
    swift_bridgeObjectRetain(v17);
    v55 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v59, &type metadata for RoomType, &v58, v5, &type metadata for RoomType, v18);
    HIDWORD(v53) = v59;
    v57 = 3;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v57, v5);
    v21 = v20;
    v22 = v19;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(0, v23, v24, v25, v26, v27, v28, v29);
    v30 = v55;
    *(_QWORD *)a2 = v56;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v54;
    *(_QWORD *)(a2 + 24) = v30;
    *(_BYTE *)(a2 + 32) = BYTE4(v53);
    *(_QWORD *)(a2 + 40) = v22;
    *(_QWORD *)(a2 + 48) = v21;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v21, v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(v30, v38, v39, v40, v41, v42, v43, v44);
    v52 = v14;
  }
  swift_bridgeObjectRelease(v52, v45, v46, v47, v48, v49, v50, v51);
}

void sub_19A510(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RoomData.init(from:)(a1, a2);
}

uint64_t sub_19A524(_QWORD *a1)
{
  return RoomData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics8RoomDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  char v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((_BYTE *)a1 + 32);
  v10 = a1[5];
  v9 = a1[6];
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v15 = a2[5];
  v14 = a2[6];
  if (v4 == *a2 && v5 == v11
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v11, 0), result = 0, (v16 & 1) != 0))
  {
    if (v6 == v12 && v7 == v13
      || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0), result = 0, (v18 & 1) != 0))
    {
      sub_25BEC(v8);
      if ((v19 & 1) != 0)
      {
        if (v9)
        {
          if (v14
            && (v10 == v15 && v9 == v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, v15, v14, 0) & 1) != 0))
          {
            return 1;
          }
        }
        else if (!v14)
        {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_19A648()
{
  unint64_t result;

  result = qword_2A4E40;
  if (!qword_2A4E40)
  {
    result = swift_getWitnessTable(byte_2148B0, &type metadata for RoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E40);
  }
  return result;
}

unint64_t sub_19A68C()
{
  unint64_t result;

  result = qword_2A4E48;
  if (!qword_2A4E48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RoomType, &type metadata for RoomType);
    atomic_store(result, (unint64_t *)&qword_2A4E48);
  }
  return result;
}

unint64_t sub_19A6D0()
{
  unint64_t result;

  result = qword_2A4E58;
  if (!qword_2A4E58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RoomType, &type metadata for RoomType);
    atomic_store(result, (unint64_t *)&qword_2A4E58);
  }
  return result;
}

ValueMetadata *type metadata accessor for RoomData()
{
  return &type metadata for RoomData;
}

uint64_t storeEnumTagSinglePayload for RoomData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_19A778 + 4 * byte_214711[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_19A7AC + 4 * byte_21470C[v4]))();
}

uint64_t sub_19A7AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A7B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19A7BCLL);
  return result;
}

uint64_t sub_19A7C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19A7D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_19A7D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A7DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoomData.CodingKeys()
{
  return &type metadata for RoomData.CodingKeys;
}

unint64_t sub_19A7FC()
{
  unint64_t result;

  result = qword_2A4E60;
  if (!qword_2A4E60)
  {
    result = swift_getWitnessTable(byte_214888, &type metadata for RoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E60);
  }
  return result;
}

unint64_t sub_19A844()
{
  unint64_t result;

  result = qword_2A4E68;
  if (!qword_2A4E68)
  {
    result = swift_getWitnessTable("Q#\a", &type metadata for RoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E68);
  }
  return result;
}

unint64_t sub_19A88C()
{
  unint64_t result;

  result = qword_2A4E70;
  if (!qword_2A4E70)
  {
    result = swift_getWitnessTable("9#\a", &type metadata for RoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4E70);
  }
  return result;
}

uint64_t sub_19A8D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x44496D6F6F72 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496D6F6F72, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000000222750;
    if (a2 == 0x8000000000222750)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222750, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x657079546D6F6F72 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657079546D6F6F72, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x656D614E6D6F6F72 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E6D6F6F72, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_19AA78(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A4E78, &enum case for SessionGroup.default(_:));
}

uint64_t static DialogExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295BF8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4E78, a1);
}

uint64_t sub_19AAB8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A4E90, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static DialogExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C00, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4E90, a1);
}

uint64_t DialogExposureEvent.dialogData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C508);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DialogExposureEvent.dialogData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C508);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t DialogExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DialogExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4F18, (uint64_t)&nominal type descriptor for DialogExposureEvent);
}

uint64_t DialogExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DialogExposureEvent.linkData.modify())()
{
  type metadata accessor for DialogExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DialogExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DialogExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DialogExposureEvent.eventData.modify())()
{
  type metadata accessor for DialogExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DialogExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DialogExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DialogExposureEvent.timedData.modify())()
{
  type metadata accessor for DialogExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DialogExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for DialogExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

_QWORD *DialogExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  uint64_t v12;

  v2 = *(_OWORD *)(v1 + 120);
  v11[6] = *(_OWORD *)(v1 + 104);
  v11[7] = v2;
  v11[8] = *(_OWORD *)(v1 + 136);
  v12 = *(_QWORD *)(v1 + 152);
  v3 = *(_OWORD *)(v1 + 56);
  v11[2] = *(_OWORD *)(v1 + 40);
  v11[3] = v3;
  v4 = *(_OWORD *)(v1 + 88);
  v11[4] = *(_OWORD *)(v1 + 72);
  v11[5] = v4;
  v5 = *(_OWORD *)(v1 + 24);
  v11[0] = *(_OWORD *)(v1 + 8);
  v11[1] = v5;
  v6 = *(_OWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 152);
  v7 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v9;
  return sub_2DC18(v11);
}

uint64_t DialogExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DialogExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A4FB0, (uint64_t)&nominal type descriptor for DialogExposureEvent.Model);
}

uint64_t DialogExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogExposureEvent.Model(0) + 28);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DialogExposureEvent.Model.init(dialogData:linkData:eventData:timedData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a5 + 104) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a5 + 120) = v8;
  *(_OWORD *)(a5 + 136) = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a5 + 40) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a5 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a5 + 72) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a5 + 88) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a5 + 8) = *(_OWORD *)a2;
  *(_BYTE *)a5 = *a1;
  *(_QWORD *)(a5 + 152) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a5 + 24) = v11;
  v12 = type metadata accessor for DialogExposureEvent.Model(0);
  v13 = a5 + *(int *)(v12 + 24);
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a3, v14);
  v15 = a5 + *(int *)(v12 + 28);
  v16 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a4, v16);
}

uint64_t sub_19B0BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19B0F0 + 4 * byte_214900[*v0]))(0x6144676F6C616964, 0xEA00000000006174);
}

uint64_t sub_19B0F0()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_19B108()
{
  return 0x746144746E657665;
}

uint64_t sub_19B134@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19CE30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19B158(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B3F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19B180(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19B3F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DialogExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  _OWORD v28[9];
  uint64_t v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_71B4(&qword_2A4EA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_19B3F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DialogExposureEvent.Model.CodingKeys, &type metadata for DialogExposureEvent.Model.CodingKeys, v11, v9, v10);
  v31 = *v3;
  v30 = 0;
  v12 = sub_4A388();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for DialogData, v12);
  if (!v2)
  {
    v13 = *(_OWORD *)(v3 + 120);
    v28[6] = *(_OWORD *)(v3 + 104);
    v28[7] = v13;
    v28[8] = *(_OWORD *)(v3 + 136);
    v29 = *((_QWORD *)v3 + 19);
    v14 = *(_OWORD *)(v3 + 56);
    v28[2] = *(_OWORD *)(v3 + 40);
    v28[3] = v14;
    v15 = *(_OWORD *)(v3 + 88);
    v28[4] = *(_OWORD *)(v3 + 72);
    v28[5] = v15;
    v16 = *(_OWORD *)(v3 + 24);
    v28[0] = *(_OWORD *)(v3 + 8);
    v28[1] = v16;
    v27 = 1;
    v17 = sub_1B7F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v27, v5, &type metadata for LinkData, v17);
    v18 = type metadata accessor for DialogExposureEvent.Model(0);
    v19 = &v3[*(int *)(v18 + 24)];
    LOBYTE(v28[0]) = 2;
    v20 = type metadata accessor for EventData(0);
    v21 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, v28, v5, v20, v21);
    v22 = &v3[*(int *)(v18 + 28)];
    LOBYTE(v28[0]) = 3;
    v23 = type metadata accessor for TimedData(0);
    v24 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v28, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_19B3F4()
{
  unint64_t result;

  result = qword_2A4EB0;
  if (!qword_2A4EB0)
  {
    result = swift_getWitnessTable("\r\"\a", &type metadata for DialogExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4EB0);
  }
  return result;
}

uint64_t DialogExposureEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  _OWORD v44[9];
  uint64_t v45;
  _QWORD *v46;

  v34 = a2;
  v36 = type metadata accessor for TimedData(0);
  v35 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v37 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_71B4(&qword_2A4EB8);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DialogExposureEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v41 = a1;
  sub_7988(a1, v13);
  v15 = sub_19B3F4();
  v40 = v9;
  v16 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DialogExposureEvent.Model.CodingKeys, &type metadata for DialogExposureEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(v41);
  v46 = v6;
  v17 = v7;
  v18 = v38;
  v43 = 0;
  v19 = sub_4A340();
  v20 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v44, &type metadata for DialogData, &v43, v39, &type metadata for DialogData, v19);
  v21 = (uint64_t)v12;
  *v12 = v44[0];
  v43 = 1;
  v22 = sub_1C06C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v44, &type metadata for LinkData, &v43, v20, &type metadata for LinkData, v22);
  v23 = v44[7];
  *(_OWORD *)(v12 + 104) = v44[6];
  *(_OWORD *)(v12 + 120) = v23;
  *(_OWORD *)(v12 + 136) = v44[8];
  v24 = v44[3];
  *(_OWORD *)(v12 + 40) = v44[2];
  *(_OWORD *)(v12 + 56) = v24;
  v25 = v44[5];
  *(_OWORD *)(v12 + 72) = v44[4];
  *(_OWORD *)(v12 + 88) = v25;
  v26 = v44[1];
  *(_OWORD *)(v12 + 8) = v44[0];
  *((_QWORD *)v12 + 19) = v45;
  *(_OWORD *)(v12 + 24) = v26;
  v42 = 2;
  v27 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v28 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v46, v18, &v42, v20, v18, v27);
  v33 = v10;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v21 + *(int *)(v10 + 24), v28, v18);
  v42 = 3;
  v29 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v30 = v37;
  v31 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v36, &v42, v39, v36, v29);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v40, v39);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v35 + 32))(v21 + *(int *)(v33 + 28), v30, v31);
  sub_19B928(v21, v34);
  sub_7DAC(v41);
  return sub_19B96C(v21);
}

uint64_t sub_19B928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DialogExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19B96C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DialogExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19B9A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DialogExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_19B9BC(_QWORD *a1)
{
  return DialogExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_19B9D0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295BF8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A4E78, (uint64_t)sub_19AA78, a1);
}

uint64_t sub_19B9F4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C00, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A4E90, (uint64_t)sub_19AAB8, a1);
}

uint64_t sub_19BA18@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for DialogExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_29C508);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for DialogExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for DialogExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for DialogExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for DialogExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for DialogExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19C080);
}

uint64_t sub_19C080(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C508);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A10);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D78);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for DialogExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19C158);
}

uint64_t sub_19C158(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_29C508);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A10);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D78);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_19C22C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_29C5A8, (uint64_t (*)(void))sub_4A340, (uint64_t (*)(void))sub_4A388, (uint64_t)&type metadata for DialogData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_87D8(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for DialogExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v24 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v24;
    v23 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v23;
    v22 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v22;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v7 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v7;
    v8 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v8;
    v9 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v9;
    v10 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v10;
    v11 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v11;
    v12 = a2[19];
    v13 = *(int *)(a3 + 24);
    v25 = (uint64_t)a2 + v13;
    v26 = a1 + v13;
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v12;
    v14 = type metadata accessor for EventData(0);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    v21(v26, v25, v14);
    v15 = *(int *)(a3 + 28);
    v16 = (char *)v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v4;
}

uint64_t destroy for DialogExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for DialogExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v21;
  v20 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v20;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = *(_QWORD *)(a2 + 152);
  v12 = *(int *)(a3 + 24);
  v22 = a2 + v12;
  v23 = a1 + v12;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v13 = type metadata accessor for EventData(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v19(v23, v22, v13);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for DialogExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = *(int *)(a3 + 24);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = *(int *)(a3 + 28);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  return a1;
}

uint64_t initializeWithTake for DialogExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for DialogExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(int *)(a3 + 24);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = *(int *)(a3 + 28);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19CAAC);
}

uint64_t sub_19CAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DialogExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19CB58);
}

uint64_t sub_19CB58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_19CBF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = &unk_2149F0;
  v5[1] = &unk_214A08;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DialogExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_19CCD8 + 4 * byte_214909[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_19CD0C + 4 * byte_214904[v4]))();
}

uint64_t sub_19CD0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19CD1CLL);
  return result;
}

uint64_t sub_19CD28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19CD30);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_19CD34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19CD3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogExposureEvent.Model.CodingKeys()
{
  return &type metadata for DialogExposureEvent.Model.CodingKeys;
}

unint64_t sub_19CD5C()
{
  unint64_t result;

  result = qword_2A4FF0;
  if (!qword_2A4FF0)
  {
    result = swift_getWitnessTable("%\"\a", &type metadata for DialogExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4FF0);
  }
  return result;
}

unint64_t sub_19CDA4()
{
  unint64_t result;

  result = qword_2A4FF8;
  if (!qword_2A4FF8)
  {
    result = swift_getWitnessTable("m\"\a", &type metadata for DialogExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A4FF8);
  }
  return result;
}

unint64_t sub_19CDEC()
{
  unint64_t result;

  result = qword_2A5000;
  if (!qword_2A5000)
  {
    result = swift_getWitnessTable("U\"\a", &type metadata for DialogExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5000);
  }
  return result;
}

uint64_t sub_19CE30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6144676F6C616964 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144676F6C616964, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void static BackgroundColorData.== infix(_:_:)(char *a1)
{
  sub_28AA8(*a1);
}

uint64_t sub_19D018()
{
  return 0x756F72676B636162;
}

uint64_t sub_19D03C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL)
  {
    result = swift_bridgeObjectRelease(0xEF726F6C6F43646ELL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEF726F6C6F43646ELL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_19D0F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19D240();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19D11C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19D240();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BackgroundColorData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A5008);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_19D240();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BackgroundColorData.CodingKeys, &type metadata for BackgroundColorData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1330DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for BackgroundColor, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_19D240()
{
  unint64_t result;

  result = qword_2A5010;
  if (!qword_2A5010)
  {
    result = swift_getWitnessTable(byte_214CE8, &type metadata for BackgroundColorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5010);
  }
  return result;
}

uint64_t BackgroundColorData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A5018);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_19D240();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BackgroundColorData.CodingKeys, &type metadata for BackgroundColorData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_133120();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for BackgroundColor, v13, v5, &type metadata for BackgroundColor, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_19D3A8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return BackgroundColorData.init(from:)(a1, a2);
}

uint64_t sub_19D3BC(_QWORD *a1)
{
  return BackgroundColorData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for BackgroundColorData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_19D41C + 4 * byte_214B45[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_19D450 + 4 * byte_214B40[v4]))();
}

uint64_t sub_19D450(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19D458(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19D460);
  return result;
}

uint64_t sub_19D46C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19D474);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_19D478(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19D480(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundColorData()
{
  return &type metadata for BackgroundColorData;
}

uint64_t storeEnumTagSinglePayload for BackgroundColorData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19D4DC + 4 * byte_214B4A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19D4FC + 4 * byte_214B4F[v4]))();
}

_BYTE *sub_19D4DC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19D4FC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19D504(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19D50C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19D514(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19D51C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundColorData.CodingKeys()
{
  return &type metadata for BackgroundColorData.CodingKeys;
}

unint64_t sub_19D53C()
{
  unint64_t result;

  result = qword_2A5020;
  if (!qword_2A5020)
  {
    result = swift_getWitnessTable(byte_214CC0, &type metadata for BackgroundColorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5020);
  }
  return result;
}

unint64_t sub_19D584()
{
  unint64_t result;

  result = qword_2A5028;
  if (!qword_2A5028)
  {
    result = swift_getWitnessTable("a\"\a", &type metadata for BackgroundColorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5028);
  }
  return result;
}

unint64_t sub_19D5CC()
{
  unint64_t result;

  result = qword_2A5030;
  if (!qword_2A5030)
  {
    result = swift_getWitnessTable("I\"\a", &type metadata for BackgroundColorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5030);
  }
  return result;
}

void __swiftcall WantListRemovalItemData.init(from:)(BookAnalytics::WantListRemovalItemData *__return_ptr retstr, BookAnalytics::ContentData *from)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  void *v6;
  BookAnalytics::ContentType contentType;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  countAndFlagsBits = from->contentPrivateID._countAndFlagsBits;
  object = from->contentPrivateID._object;
  v5 = from->contentUserID._countAndFlagsBits;
  v6 = from->contentUserID._object;
  contentType = from->contentType;
  v8 = from->contentID._countAndFlagsBits;
  v9 = from->contentID._object;
  v10 = from->contentKind.value._object;
  v11 = swift_bridgeObjectRetain(object);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v10);
  retstr->contentPrivateID._countAndFlagsBits = countAndFlagsBits;
  retstr->contentPrivateID._object = object;
  retstr->contentUserID._countAndFlagsBits = v5;
  retstr->contentUserID._object = v6;
  retstr->contentType = contentType;
  retstr->contentID._countAndFlagsBits = v8;
  retstr->contentID._object = v9;
}

BookAnalytics::RemovalType_optional __swiftcall RemovalType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::RemovalType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268CA8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t RemovalType.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0x6F4465766F6D6572;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_19D748(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_280DC(*a1, *a2);
}

unint64_t sub_19D758()
{
  unint64_t result;

  result = qword_2A5038;
  if (!qword_2A5038)
  {
    result = swift_getWitnessTable("]\"\a", &type metadata for RemovalType);
    atomic_store(result, (unint64_t *)&qword_2A5038);
  }
  return result;
}

Swift::Int sub_19D79C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x800000000021E4F0;
  v3 = 0xD000000000000012;
  if (v1 != 1)
  {
    v3 = 0x6F4465766F6D6572;
    v2 = 0xEE0064616F6C6E77;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_19D84C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x800000000021E4F0;
  v3 = 0xD000000000000012;
  if (*v1 != 1)
  {
    v3 = 0x6F4465766F6D6572;
    v2 = 0xEE0064616F6C6E77;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_19D8D8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x800000000021E4F0;
  v4 = 0xD000000000000012;
  if (v2 != 1)
  {
    v4 = 0x6F4465766F6D6572;
    v3 = 0xEE0064616F6C6E77;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::RemovalType_optional sub_19D984(Swift::String *a1)
{
  return RemovalType.init(rawValue:)(*a1);
}

void sub_19D990(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x800000000021E4F0;
  v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    v5 = 0x6F4465766F6D6572;
    v4 = 0xEE0064616F6C6E77;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_19DA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_19DB74();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_19DA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_19DB74();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for RemovalType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19DAF4 + 4 * byte_214D3D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19DB28 + 4 * byte_214D38[v4]))();
}

uint64_t sub_19DB28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19DB30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19DB38);
  return result;
}

uint64_t sub_19DB44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19DB4CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19DB50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19DB58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemovalType()
{
  return &type metadata for RemovalType;
}

unint64_t sub_19DB74()
{
  unint64_t result;

  result = qword_2A5040;
  if (!qword_2A5040)
  {
    result = swift_getWitnessTable("-\"\a", &type metadata for RemovalType);
    atomic_store(result, (unint64_t *)&qword_2A5040);
  }
  return result;
}

uint64_t sub_19DBB8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A5048, &enum case for SessionGroup.default(_:));
}

uint64_t static AppReviewPromptRequestEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C08, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5048, a1);
}

uint64_t sub_19DBF8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A5060, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AppReviewPromptRequestEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C10, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5060, a1);
}

uint64_t AppReviewPromptRequestEvent.locationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C2F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AppReviewPromptRequestEvent.locationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C2F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AppReviewPromptRequestEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppReviewPromptRequestEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AppReviewPromptRequestEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A50E8, (uint64_t)&nominal type descriptor for AppReviewPromptRequestEvent);
}

uint64_t AppReviewPromptRequestEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppReviewPromptRequestEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppReviewPromptRequestEvent.eventData.modify())()
{
  type metadata accessor for AppReviewPromptRequestEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppReviewPromptRequestEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for AppReviewPromptRequestEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t AppReviewPromptRequestEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppReviewPromptRequestEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AppReviewPromptRequestEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5178, (uint64_t)&nominal type descriptor for AppReviewPromptRequestEvent.Model);
}

uint64_t AppReviewPromptRequestEvent.Model.init(locationData:eventData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = &a3[*(int *)(type metadata accessor for AppReviewPromptRequestEvent.Model(0) + 20)];
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_19DEB0()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x6E6F697461636F6CLL;
}

uint64_t sub_19DEF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19ECD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19DF1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19E0D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19DF44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19E0D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppReviewPromptRequestEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_2A5078);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_19E0D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppReviewPromptRequestEvent.Model.CodingKeys, &type metadata for AppReviewPromptRequestEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_C00C4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for LocationData, v12);
  if (!v2)
  {
    v13 = &v3[*(int *)(type metadata accessor for AppReviewPromptRequestEvent.Model(0) + 20)];
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_19E0D0()
{
  unint64_t result;

  result = qword_2A5080;
  if (!qword_2A5080)
  {
    result = swift_getWitnessTable("-!\a", &type metadata for AppReviewPromptRequestEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5080);
  }
  return result;
}

uint64_t AppReviewPromptRequestEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_2A5088);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AppReviewPromptRequestEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_19E0D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppReviewPromptRequestEvent.Model.CodingKeys, &type metadata for AppReviewPromptRequestEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = v8;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_C09B0();
    v19 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for LocationData, &v33, v31, &type metadata for LocationData, v18);
    v24 = v14;
    *v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_19E368(v22, v21);
  }
  return sub_7DAC(a1);
}

uint64_t sub_19E368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppReviewPromptRequestEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E3AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AppReviewPromptRequestEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_19E3C0(_QWORD *a1)
{
  return AppReviewPromptRequestEvent.Model.encode(to:)(a1);
}

uint64_t sub_19E3D4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C08, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5048, (uint64_t)sub_19DBB8, a1);
}

uint64_t sub_19E3F8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C10, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5060, (uint64_t)sub_19DBF8, a1);
}

uint64_t sub_19E41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for AppReviewPromptRequestEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_29C2F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for AppReviewPromptRequestEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AppReviewPromptRequestEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for AppReviewPromptRequestEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AppReviewPromptRequestEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AppReviewPromptRequestEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppReviewPromptRequestEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19E7CC);
}

uint64_t sub_19E7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_29C2F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AppReviewPromptRequestEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19E854);
}

uint64_t sub_19E854(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_29C2F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_19E8D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_19E95C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_19E95C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29C3C0)
  {
    v2 = sub_C09B0();
    v3 = sub_C00C4();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for LocationData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29C3C0);
  }
}

uint64_t getEnumTagSinglePayload for AppReviewPromptRequestEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19E9CC);
}

uint64_t sub_19E9CC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 224)
  {
    v4 = *a1;
    if (v4 >= 0x20)
      return v4 - 31;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AppReviewPromptRequestEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19EA4C);
}

_BYTE *sub_19EA4C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 224)
  {
    *result = a2 + 31;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_19EABC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_214F38;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppReviewPromptRequestEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19EB7C + 4 * byte_214E65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19EBB0 + 4 * byte_214E60[v4]))();
}

uint64_t sub_19EBB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19EBB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19EBC0);
  return result;
}

uint64_t sub_19EBCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19EBD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19EBD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19EBE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppReviewPromptRequestEvent.Model.CodingKeys()
{
  return &type metadata for AppReviewPromptRequestEvent.Model.CodingKeys;
}

unint64_t sub_19EC00()
{
  unint64_t result;

  result = qword_2A51B0;
  if (!qword_2A51B0)
  {
    result = swift_getWitnessTable("E!\a", &type metadata for AppReviewPromptRequestEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A51B0);
  }
  return result;
}

unint64_t sub_19EC48()
{
  unint64_t result;

  result = qword_2A51B8;
  if (!qword_2A51B8)
  {
    result = swift_getWitnessTable(byte_214F5C, &type metadata for AppReviewPromptRequestEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A51B8);
  }
  return result;
}

unint64_t sub_19EC90()
{
  unint64_t result;

  result = qword_2A51C0;
  if (!qword_2A51C0)
  {
    result = swift_getWitnessTable("u!\a", &type metadata for AppReviewPromptRequestEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A51C0);
  }
  return result;
}

uint64_t sub_19ECD4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000061746144)
  {
    v5 = 0xEC00000061746144;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void __swiftcall PurchaseFailData.init(purchaseFailureReason:errorCode:errorDescription:errorDomain:)(BookAnalytics::PurchaseFailData *__return_ptr retstr, BookAnalytics::PurchaseFailureReason purchaseFailureReason, Swift::Int32_optional errorCode, Swift::String_optional errorDescription, Swift::String_optional errorDomain)
{
  retstr->purchaseFailureReason = *(_BYTE *)purchaseFailureReason;
  retstr->errorCode.value = errorCode.value;
  retstr->errorCode.is_nil = errorCode.is_nil;
  retstr->errorDescription = errorDescription;
  retstr->errorDomain = errorDomain;
}

uint64_t sub_19EE0C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_19EE48 + 4 * byte_215070[*v0]))(0xD000000000000015, 0x80000000002207E0);
}

uint64_t sub_19EE48()
{
  return 0x646F43726F727265;
}

unint64_t sub_19EE64()
{
  return 0xD000000000000010;
}

uint64_t sub_19EE80()
{
  return 0x6D6F44726F727265;
}

uint64_t sub_19EEA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19F9E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19EEC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19F540();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19EEEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19F540();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PurchaseFailData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  _BYTE v27[2];
  char v28;
  char v29;
  char v30;

  v4 = sub_71B4(&qword_2A51C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v25 = *((unsigned int *)v1 + 1);
  v24 = v1[8];
  v9 = *((_QWORD *)v1 + 2);
  v22 = *((_QWORD *)v1 + 3);
  v23 = v9;
  v10 = *((_QWORD *)v1 + 4);
  v20 = *((_QWORD *)v1 + 5);
  v21 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_19F540();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PurchaseFailData.CodingKeys, &type metadata for PurchaseFailData.CodingKeys, v13, v11, v12);
  v30 = v8;
  v29 = 0;
  v14 = sub_19F584();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v4, &type metadata for PurchaseFailureReason, v14);
  if (!v2)
  {
    v16 = v22;
    v15 = v23;
    v18 = v20;
    v17 = v21;
    v28 = 1;
    v27[1] = v24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25 | ((unint64_t)v24 << 32), &v28, v4);
    v27[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v27, v4);
    v26 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v26, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void PurchaseFailData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  uint64_t v25;
  BAEventReporter *v26;
  BAEventReporter *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  const char *v37;
  void *v38;
  void *v39;
  void *v40;
  int64_t v41;
  int64_t v42;
  void *v43;
  BAEventReporter *v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;

  v5 = sub_71B4(&qword_2A51E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_19F540();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PurchaseFailData.CodingKeys, &type metadata for PurchaseFailData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v24 = 0;
    sub_7DAC(a1);
    v44 = 0;
  }
  else
  {
    v50 = 0;
    v12 = sub_19F5C8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for PurchaseFailureReason, &v50, v5, &type metadata for PurchaseFailureReason, v12);
    v13 = v51;
    v49 = 1;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v5);
    v46 = v13;
    v48 = 2;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    v24 = v23;
    v45 = v15;
    v47 = 3;
    swift_bridgeObjectRetain(v23);
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
    v27 = v26;
    v28 = *(void (**)(char *, uint64_t))(v6 + 8);
    v29 = v25;
    v28(v8, v5);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(0, v30, v31, v32, v33, v34, v35, v36);
    *(_BYTE *)a2 = v46;
    *(_DWORD *)(a2 + 4) = v14;
    *(_BYTE *)(a2 + 8) = BYTE4(v14) & 1;
    *(_QWORD *)(a2 + 16) = v45;
    *(_QWORD *)(a2 + 24) = v24;
    *(_QWORD *)(a2 + 32) = v29;
    *(_QWORD *)(a2 + 40) = v27;
    sub_7DAC(a1);
    v44 = v27;
  }
  swift_bridgeObjectRelease(v44, v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(v24, v16, v17, v18, v19, v20, v21, v22);
}

void sub_19F30C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PurchaseFailData.init(from:)(a1, a2);
}

uint64_t sub_19F320(_QWORD *a1)
{
  return PurchaseFailData.encode(to:)(a1);
}

BOOL _s13BookAnalytics16PurchaseFailDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _BOOL8 result;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 1);
  v4 = a1[8];
  v5 = *((_QWORD *)a1 + 4);
  v24 = *((_QWORD *)a1 + 2);
  v25 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 5);
  v7 = *(_DWORD *)(a2 + 4);
  v8 = *(unsigned __int8 *)(a2 + 8);
  v23 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = 0xE500000000000000;
  v11 = 0x726F727265;
  if (v2 != 1)
  {
    v11 = 0x64656C65636E6163;
    v10 = 0xE800000000000000;
  }
  if (*a1)
    v12 = v11;
  else
    v12 = 0x6E776F6E6B6E75;
  if (v2)
    v13 = v10;
  else
    v13 = 0xE700000000000000;
  v14 = 0xE500000000000000;
  v15 = 0x726F727265;
  if (*(_BYTE *)a2 != 1)
  {
    v15 = 0x64656C65636E6163;
    v14 = 0xE800000000000000;
  }
  if (*(_BYTE *)a2)
    v16 = v15;
  else
    v16 = 0x6E776F6E6B6E75;
  if (*(_BYTE *)a2)
    v17 = v14;
  else
    v17 = 0xE700000000000000;
  v22 = *(_QWORD *)(a2 + 32);
  if (v12 == v16 && v13 == v17)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v16, v17, 0);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v17);
    result = 0;
    if ((v18 & 1) == 0)
      return result;
  }
  if ((v4 & 1) != 0)
  {
    if (!v8)
      return 0;
  }
  else
  {
    if (v3 == v7)
      v20 = v8;
    else
      v20 = 1;
    if ((v20 & 1) != 0)
      return 0;
  }
  if (!v25)
  {
    if (v26)
      return 0;
    goto LABEL_35;
  }
  if (!v26)
    return 0;
  if (v24 == v23 && v25 == v26
    || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v23, v26, 0), result = 0, (v21 & 1) != 0))
  {
LABEL_35:
    if (v6)
      return v9
          && (v5 == v22 && v6 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v22, v9, 0) & 1) != 0);
    return !v9;
  }
  return result;
}

unint64_t sub_19F540()
{
  unint64_t result;

  result = qword_2A51D0;
  if (!qword_2A51D0)
  {
    result = swift_getWitnessTable("\r!\a", &type metadata for PurchaseFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A51D0);
  }
  return result;
}

unint64_t sub_19F584()
{
  unint64_t result;

  result = qword_2A51D8;
  if (!qword_2A51D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PurchaseFailureReason, &type metadata for PurchaseFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A51D8);
  }
  return result;
}

unint64_t sub_19F5C8()
{
  unint64_t result;

  result = qword_2A51E8;
  if (!qword_2A51E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PurchaseFailureReason, &type metadata for PurchaseFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A51E8);
  }
  return result;
}

uint64_t destroy for PurchaseFailData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for PurchaseFailData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for PurchaseFailData(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for PurchaseFailData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurchaseFailData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PurchaseFailData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PurchaseFailData()
{
  return &type metadata for PurchaseFailData;
}

uint64_t storeEnumTagSinglePayload for PurchaseFailData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_19F888 + 4 * byte_215079[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_19F8BC + 4 * byte_215074[v4]))();
}

uint64_t sub_19F8BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19F8C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19F8CCLL);
  return result;
}

uint64_t sub_19F8D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19F8E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_19F8E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19F8EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseFailData.CodingKeys()
{
  return &type metadata for PurchaseFailData.CodingKeys;
}

unint64_t sub_19F90C()
{
  unint64_t result;

  result = qword_2A51F0;
  if (!qword_2A51F0)
  {
    result = swift_getWitnessTable(byte_2151FC, &type metadata for PurchaseFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A51F0);
  }
  return result;
}

unint64_t sub_19F954()
{
  unint64_t result;

  result = qword_2A51F8;
  if (!qword_2A51F8)
  {
    result = swift_getWitnessTable("}!\a", &type metadata for PurchaseFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A51F8);
  }
  return result;
}

unint64_t sub_19F99C()
{
  unint64_t result;

  result = qword_2A5200;
  if (!qword_2A5200)
  {
    result = swift_getWitnessTable("e!\a", &type metadata for PurchaseFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5200);
  }
  return result;
}

uint64_t sub_19F9E0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000015)
  {
    v4 = 0x80000000002207E0;
    if (a2 == 0x80000000002207E0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000002207E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    v6 = 0xE900000000000065;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F43726F727265, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000000220800;
    if (a2 == 0x8000000000220800)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220800, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961)
  {
    swift_bridgeObjectRelease(0xEB000000006E6961);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D6F44726F727265, 0xEB000000006E6961, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_19FBB4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A5208, &enum case for SessionGroup.default(_:));
}

uint64_t static PlayAttemptEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C18, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5208, a1);
}

uint64_t sub_19FBF4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A5220, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PlayAttemptEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C20, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5220, a1);
}

uint64_t PlayAttemptEvent.listeningSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PlayAttemptEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A52A8, (uint64_t)&nominal type descriptor for PlayAttemptEvent);
}

uint64_t PlayAttemptEvent.listeningSessionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.listeningSessionData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.listeningActionSourceData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.listeningActionSourceData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.listeningActionSourceData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.bitRateData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.bitRateData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.bitRateData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.errorData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 32);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.errorData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 32);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.errorData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.upSellData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.doNotDisturbData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 40);
  v4 = sub_71B4(&qword_297DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.doNotDisturbData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 40);
  v4 = sub_71B4(&qword_297DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.doNotDisturbData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.seriesData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.eventData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.userEmbeddingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 52);
  v4 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayAttemptEvent.userEmbeddingData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent(0) + 52);
  v4 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayAttemptEvent.userEmbeddingData.modify())()
{
  type metadata accessor for PlayAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayAttemptEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PlayAttemptEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v2, v12);
  v13 = a1 + v4[9];
  v14 = enum case for EventProperty.optional<A>(_:);
  v15 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v14, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v14, v23);
}

uint64_t PlayAttemptEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayAttemptEvent.Model(0) + 48);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PlayAttemptEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5358, (uint64_t)&nominal type descriptor for PlayAttemptEvent.Model);
}

uint64_t PlayAttemptEvent.Model.userEmbeddingData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PlayAttemptEvent.Model(0) + 52));
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t PlayAttemptEvent.Model.init(contentData:listeningSessionData:listeningActionSourceData:bitRateData:errorData:upSellData:doNotDisturbData:seriesData:eventData:userEmbeddingData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, _WORD *a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;

  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a9 = *(_QWORD *)a1;
  *(_QWORD *)(a9 + 8) = v12;
  *(_BYTE *)(a9 + 16) = *(_BYTE *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a9 + 48) = v13;
  v14 = *(_OWORD *)(a1 + 24);
  *(_WORD *)(a9 + 56) = *(_WORD *)(a1 + 56);
  *(_DWORD *)(a9 + 60) = *(_DWORD *)(a1 + 60);
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(a1 + 64);
  *(_DWORD *)(a9 + 68) = *(_DWORD *)(a1 + 68);
  v15 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a9 + 24) = v14;
  *(_BYTE *)(a9 + 72) = v15;
  *(_DWORD *)(a9 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a9 + 77) = *(_BYTE *)(a1 + 77);
  v16 = *(_OWORD *)(a1 + 80);
  *(_DWORD *)(a9 + 96) = *(_DWORD *)a2;
  *(_BYTE *)(a9 + 100) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a9 + 104) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a9 + 108) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a9 + 136) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a9 + 137) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a9 + 140) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a9 + 144) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a9 + 145) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a9 + 148) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a9 + 152) = *(_BYTE *)(a2 + 56);
  v17 = *(_DWORD *)(a2 + 16);
  v18 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a9 + 153) = *(_BYTE *)(a2 + 57);
  *(_WORD *)(a9 + 154) = *a3;
  *(_DWORD *)(a9 + 156) = *(_DWORD *)a4;
  *(_BYTE *)(a9 + 160) = *(_BYTE *)(a4 + 4);
  v19 = a8[1];
  v20 = a8[2];
  *(_OWORD *)(a9 + 232) = *a8;
  *(_OWORD *)(a9 + 264) = v20;
  v21 = *a5;
  *(_DWORD *)(a9 + 164) = *(_DWORD *)(a4 + 8);
  v22 = *((_QWORD *)a5 + 3);
  *(_QWORD *)(a9 + 184) = *((_QWORD *)a5 + 2);
  *(_QWORD *)(a9 + 192) = v22;
  *(_OWORD *)(a9 + 80) = v16;
  *(_DWORD *)(a9 + 112) = v17;
  *(_OWORD *)(a9 + 120) = v18;
  v23 = *a6;
  LOWORD(v22) = *a7;
  *(_QWORD *)(a9 + 216) = *((_QWORD *)a6 + 2);
  *(_WORD *)(a9 + 224) = v22;
  v24 = *a11;
  *(_OWORD *)(a9 + 168) = v21;
  *(_OWORD *)(a9 + 200) = v23;
  *(_OWORD *)(a9 + 248) = v19;
  v25 = type metadata accessor for PlayAttemptEvent.Model(0);
  v26 = a9 + *(int *)(v25 + 48);
  v27 = type metadata accessor for EventData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a10, v27);
  *(_QWORD *)(a9 + *(int *)(v25 + 52)) = v24;
  return result;
}

uint64_t sub_1A0730(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A076C + 4 * byte_215280[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_1A076C()
{
  return 0xD000000000000014;
}

uint64_t sub_1A0848()
{
  unsigned __int8 *v0;

  return sub_1A0730(*v0);
}

uint64_t sub_1A0850@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A38DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A0874(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A0D1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A089C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A0D1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PlayAttemptEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  int v31;
  char v32;
  char v33;
  int v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v57;
  char v58;
  __int128 v59;
  _BYTE v60[32];
  uint64_t v61;
  __int16 v62;
  int v63;
  char v64;
  int v65;
  char v66;
  int v67;
  char v68;
  __int128 v69;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A5238);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1A0D1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PlayAttemptEvent.Model.CodingKeys, &type metadata for PlayAttemptEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v59 = *(_QWORD *)v4;
  *((_QWORD *)&v59 + 1) = v13;
  v60[0] = v14;
  *(_OWORD *)&v60[8] = v15;
  *(_QWORD *)&v60[24] = v16;
  v61 = v17;
  v62 = v18;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = *(_DWORD *)(v4 + 73);
  v68 = v23;
  v69 = *(_OWORD *)(v4 + 80);
  v58 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v59, &v58, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_BYTE *)(v4 + 100);
    v26 = *(_DWORD *)(v4 + 104);
    v27 = *(_BYTE *)(v4 + 108);
    v28 = *(_DWORD *)(v4 + 112);
    v29 = *(_BYTE *)(v4 + 136);
    v30 = *(_BYTE *)(v4 + 137);
    v31 = *(_DWORD *)(v4 + 140);
    v32 = *(_BYTE *)(v4 + 144);
    v33 = *(_BYTE *)(v4 + 145);
    v34 = *(_DWORD *)(v4 + 148);
    v35 = *(_BYTE *)(v4 + 152);
    v36 = *(_BYTE *)(v4 + 153);
    LODWORD(v59) = *(_DWORD *)(v4 + 96);
    BYTE4(v59) = v25;
    DWORD2(v59) = v26;
    BYTE12(v59) = v27;
    *(_DWORD *)v60 = v28;
    *(_OWORD *)&v60[8] = *(_OWORD *)(v4 + 120);
    v60[24] = v29;
    v60[25] = v30;
    *(_DWORD *)&v60[28] = v31;
    LOBYTE(v61) = v32;
    BYTE1(v61) = v33;
    HIDWORD(v61) = v34;
    LOBYTE(v62) = v35;
    HIBYTE(v62) = v36;
    v58 = 1;
    v37 = sub_46970();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v59, &v58, v6, &type metadata for ListeningSessionData, v37);
    LOWORD(v59) = *(_WORD *)(v4 + 154);
    v58 = 2;
    v38 = sub_171A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v59, &v58, v6, &type metadata for ListeningActionSourceData, v38);
    v39 = *(_BYTE *)(v4 + 160);
    v40 = *(_DWORD *)(v4 + 164);
    LODWORD(v59) = *(_DWORD *)(v4 + 156);
    BYTE4(v59) = v39;
    DWORD2(v59) = v40;
    v58 = 3;
    v41 = sub_171E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v59, &v58, v6, &type metadata for BitRateData, v41);
    v42 = *(_QWORD *)(v4 + 184);
    v43 = *(_QWORD *)(v4 + 192);
    v59 = *(_OWORD *)(v4 + 168);
    *(_QWORD *)v60 = v42;
    *(_QWORD *)&v60[8] = v43;
    v58 = 4;
    v44 = sub_17228();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v59, &v58, v6, &type metadata for ErrorData, v44);
    v45 = *(_QWORD *)(v4 + 216);
    v59 = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v60 = v45;
    v58 = 5;
    v46 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v59, &v58, v6, &type metadata for UpSellData, v46);
    LOWORD(v59) = *(_WORD *)(v4 + 224);
    v58 = 6;
    v47 = sub_469B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v59, &v58, v6, &type metadata for DoNotDisturbData, v47);
    v48 = *(_OWORD *)(v4 + 248);
    v49 = *(_OWORD *)(v4 + 264);
    v59 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)v60 = v48;
    *(_OWORD *)&v60[16] = v49;
    v58 = 7;
    v50 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v59, &v58, v6, &type metadata for SeriesData, v50);
    v51 = type metadata accessor for PlayAttemptEvent.Model(0);
    v52 = v4 + *(int *)(v51 + 48);
    LOBYTE(v59) = 8;
    v53 = type metadata accessor for EventData(0);
    v54 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v52, &v59, v6, v53, v54);
    *(_QWORD *)&v59 = *(_QWORD *)(v4 + *(int *)(v51 + 52));
    v58 = 9;
    v55 = sub_469F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v59, &v58, v6, &type metadata for UserEmbeddingData, v55);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A0D1C()
{
  unint64_t result;

  result = qword_2A5240;
  if (!qword_2A5240)
  {
    result = swift_getWitnessTable(asc_215554, &type metadata for PlayAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5240);
  }
  return result;
}

void PlayAttemptEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  char v24;
  int v25;
  char v26;
  char v27;
  unint64_t v28;
  char v29;
  int v30;
  char v31;
  int v32;
  char v33;
  char v34;
  int v35;
  char v36;
  char v37;
  int v38;
  char v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  _BYTE v64[32];
  uint64_t v65;
  __int16 v66;
  int v67;
  char v68;
  int v69;
  char v70;
  int v71;
  char v72;
  __int128 v73;
  char v74;

  v60 = type metadata accessor for EventData(0);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v6 = (uint64_t *)((char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = sub_71B4(&qword_2A5248);
  v7 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for PlayAttemptEvent.Model(0);
  __chkstk_darwin(v59);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v62 = a1;
  sub_7988(a1, v12);
  v14 = sub_1A0D1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PlayAttemptEvent.Model.CodingKeys, &type metadata for PlayAttemptEvent.Model.CodingKeys, v14, v12, v13);
  if (v2)
  {
    v61 = v2;
    sub_7DAC(v62);
  }
  else
  {
    v56 = a2;
    v74 = 0;
    v15 = sub_1779C();
    v16 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for ContentData, &v74, v57, &type metadata for ContentData, v15);
    v17 = *((_QWORD *)&v63 + 1);
    v18 = v64[0];
    v19 = *(_OWORD *)&v64[8];
    v20 = *(_QWORD *)&v64[24];
    v21 = v65;
    v22 = v66;
    v23 = v67;
    v24 = v68;
    v25 = v69;
    v26 = v70;
    v27 = v72;
    *(_QWORD *)v11 = v63;
    *((_QWORD *)v11 + 1) = v17;
    v11[16] = v18;
    *(_OWORD *)(v11 + 24) = v19;
    *((_QWORD *)v11 + 5) = v20;
    *((_QWORD *)v11 + 6) = v21;
    *((_WORD *)v11 + 28) = v22;
    *((_DWORD *)v11 + 15) = v23;
    v11[64] = v24;
    *((_DWORD *)v11 + 17) = v25;
    v11[72] = v26;
    *(_DWORD *)(v11 + 73) = v71;
    v11[77] = v27;
    *((_OWORD *)v11 + 5) = v73;
    v74 = 1;
    v28 = sub_4724C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for ListeningSessionData, &v74, v16, &type metadata for ListeningSessionData, v28);
    v29 = BYTE4(v63);
    v30 = DWORD2(v63);
    v31 = BYTE12(v63);
    v32 = *(_DWORD *)v64;
    v33 = v64[24];
    v34 = v64[25];
    v35 = *(_DWORD *)&v64[28];
    v36 = v65;
    v37 = BYTE1(v65);
    v38 = HIDWORD(v65);
    v39 = v66;
    v40 = HIBYTE(v66);
    *((_DWORD *)v11 + 24) = v63;
    v11[100] = v29;
    *((_DWORD *)v11 + 26) = v30;
    v11[108] = v31;
    *((_DWORD *)v11 + 28) = v32;
    *(_OWORD *)(v11 + 120) = *(_OWORD *)&v64[8];
    v11[136] = v33;
    v11[137] = v34;
    *((_DWORD *)v11 + 35) = v35;
    v11[144] = v36;
    v11[145] = v37;
    *((_DWORD *)v11 + 37) = v38;
    v11[152] = v39;
    v11[153] = v40;
    v74 = 2;
    v41 = sub_17824();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for ListeningActionSourceData, &v74, v16, &type metadata for ListeningActionSourceData, v41);
    *((_WORD *)v11 + 77) = v63;
    v74 = 3;
    v42 = sub_17868();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for BitRateData, &v74, v16, &type metadata for BitRateData, v42);
    v43 = BYTE4(v63);
    v44 = DWORD2(v63);
    *((_DWORD *)v11 + 39) = v63;
    v11[160] = v43;
    *((_DWORD *)v11 + 41) = v44;
    v74 = 4;
    v45 = sub_178AC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for ErrorData, &v74, v16, &type metadata for ErrorData, v45);
    v46 = *(_OWORD *)v64;
    *(_OWORD *)(v11 + 168) = v63;
    *(_OWORD *)(v11 + 184) = v46;
    v74 = 5;
    v47 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for UpSellData, &v74, v16, &type metadata for UpSellData, v47);
    v48 = *(_QWORD *)v64;
    *(_OWORD *)(v11 + 200) = v63;
    *((_QWORD *)v11 + 27) = v48;
    v74 = 6;
    v49 = sub_47290();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for DoNotDisturbData, &v74, v16, &type metadata for DoNotDisturbData, v49);
    *((_WORD *)v11 + 112) = v63;
    v74 = 7;
    v50 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for SeriesData, &v74, v16, &type metadata for SeriesData, v50);
    v51 = *(_OWORD *)v64;
    *(_OWORD *)(v11 + 232) = v63;
    v52 = *(_OWORD *)&v64[16];
    *(_OWORD *)(v11 + 248) = v51;
    *(_OWORD *)(v11 + 264) = v52;
    LOBYTE(v63) = 8;
    v53 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v60, &v63, v16, v60, v53);
    (*(void (**)(char *, _QWORD *, uint64_t))(v58 + 32))(&v11[*(int *)(v59 + 48)], v6, v60);
    v74 = 9;
    v54 = sub_472D4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for UserEmbeddingData, &v74, v16, &type metadata for UserEmbeddingData, v54);
    v61 = 0;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v57);
    *(_QWORD *)&v11[*(int *)(v59 + 52)] = v63;
    sub_1A1468((uint64_t)v11, v56);
    sub_7DAC(v62);
    sub_1A14AC((uint64_t)v11);
  }
}

uint64_t sub_1A1468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlayAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A14AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlayAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A14E8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PlayAttemptEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1A14FC(_QWORD *a1)
{
  return PlayAttemptEvent.Model.encode(to:)(a1);
}

uint64_t sub_1A1510@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C18, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5208, (uint64_t)sub_19FBB4, a1);
}

uint64_t sub_1A1534@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C20, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5220, (uint64_t)sub_19FBF4, a1);
}

uint64_t sub_1A1558@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v4, v13);
  v14 = a2 + a1[9];
  v15 = enum case for EventProperty.optional<A>(_:);
  v16 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v4, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v15, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v15, v24);
}

uint64_t *initializeBufferWithCopyOfBuffer for PlayAttemptEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v44 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v44 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v44);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297DE8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296770);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296778);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296780);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_297DF0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_297DF8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  }
  return a1;
}

uint64_t destroy for PlayAttemptEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

uint64_t initializeWithCopy for PlayAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  return a1;
}

uint64_t assignWithCopy for PlayAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  return a1;
}

uint64_t initializeWithTake for PlayAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  return a1;
}

uint64_t assignWithTake for PlayAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A236C);
}

uint64_t sub_1A236C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297DE8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296770);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296778);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296780);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296F68);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_297DF0);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296310);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_295D70);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v8 = sub_71B4(&qword_297DF8);
                    v12 = *(_QWORD *)(v8 - 8);
                    v13 = a3[13];
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PlayAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A2534);
}

uint64_t sub_1A2534(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297DE8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296770);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296778);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296780);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296F68);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_297DF0);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296310);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_295D70);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v10 = sub_71B4(&qword_297DF8);
                    v14 = *(_QWORD *)(v10 - 8);
                    v15 = a4[13];
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A26F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[10];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v22[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_297EB0, (uint64_t (*)(void))sub_4724C, (uint64_t (*)(void))sub_46970, (uint64_t)&type metadata for ListeningSessionData);
    if (v5 <= 0x3F)
    {
      v22[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296868, (uint64_t (*)(void))sub_17824, (uint64_t (*)(void))sub_171A0, (uint64_t)&type metadata for ListeningActionSourceData);
      if (v7 <= 0x3F)
      {
        v22[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_296870, (uint64_t (*)(void))sub_17868, (uint64_t (*)(void))sub_171E4, (uint64_t)&type metadata for BitRateData);
        if (v9 <= 0x3F)
        {
          v22[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, (unint64_t *)&unk_296878, (uint64_t (*)(void))sub_178AC, (uint64_t (*)(void))sub_17228, (uint64_t)&type metadata for ErrorData);
          if (v11 <= 0x3F)
          {
            v22[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
            if (v13 <= 0x3F)
            {
              v22[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, &qword_297EB8, (uint64_t (*)(void))sub_47290, (uint64_t (*)(void))sub_469B4, (uint64_t)&type metadata for DoNotDisturbData);
              if (v15 <= 0x3F)
              {
                v22[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                if (v17 <= 0x3F)
                {
                  v22[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_8734(319);
                  if (v19 <= 0x3F)
                  {
                    v22[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_B9C8(319, (unint64_t *)&unk_297EC0, (uint64_t (*)(void))sub_472D4, (uint64_t (*)(void))sub_469F8, (uint64_t)&type metadata for UserEmbeddingData);
                    if (v21 <= 0x3F)
                    {
                      v22[9] = *(_QWORD *)(v20 - 8) + 64;
                      swift_initStructMetadata(a1, 256, 10, v22, a1 + 16);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PlayAttemptEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v26 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v26;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v9 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v9;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v10 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v10;
    *(_BYTE *)(a1 + 100) = *((_BYTE *)a2 + 100);
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    v11 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v11;
    *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
    *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
    *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
    v12 = *((_DWORD *)a2 + 37);
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    *(_DWORD *)(a1 + 148) = v12;
    *(_BYTE *)(a1 + 153) = *((_BYTE *)a2 + 153);
    *(_WORD *)(a1 + 154) = *((_WORD *)a2 + 77);
    *(_DWORD *)(a1 + 164) = *((_DWORD *)a2 + 41);
    *(_QWORD *)(a1 + 156) = *(uint64_t *)((char *)a2 + 156);
    v13 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v13;
    v14 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v14;
    *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
    *(_BYTE *)(a1 + 201) = *((_BYTE *)a2 + 201);
    v15 = a2[27];
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_QWORD *)(a1 + 216) = v15;
    *(_WORD *)(a1 + 224) = *((_WORD *)a2 + 112);
    v16 = a2[34];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    if (v16 == 1)
    {
      v17 = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(a1 + 248) = v17;
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    }
    else
    {
      *(_QWORD *)(a1 + 232) = a2[29];
      *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
      *(_QWORD *)(a1 + 248) = a2[31];
      *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)((char *)a2 + 257);
      *(_QWORD *)(a1 + 264) = a2[33];
      *(_QWORD *)(a1 + 272) = v16;
      swift_bridgeObjectRetain(v16);
    }
    v19 = *(int *)(a3 + 48);
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = *(int *)(a3 + 52);
    v24 = *(uint64_t *)((char *)a2 + v23);
    *(_QWORD *)(a1 + v23) = v24;
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t destroy for PlayAttemptEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[27]);
  v4 = a1[34];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 48);
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 52)));
}

uint64_t initializeWithCopy for PlayAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v8;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v11 = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = v11;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  v12 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v13;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v14;
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  v15 = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v16;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  }
  else
  {
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v15;
    swift_bridgeObjectRetain(v15);
  }
  v17 = *(int *)(a3 + 48);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = *(int *)(a3 + 52);
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t assignWithCopy for PlayAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  int v44;
  int v45;
  uint64_t v46;
  BAEventReporter *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  int64_t v52;
  int64_t v53;
  id v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  uint64_t v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  __int128 *v85;
  __int128 *v86;
  BAEventReporter *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  int64_t v99;
  int64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BAEventReporter *v107;
  uint64_t v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v44 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v44;
  v45 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v45;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v46 = *(_QWORD *)(a2 + 128);
  v47 = *(BAEventReporter **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v55 = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_DWORD *)(a1 + 140) = v55;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  v56 = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = v56;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  v57 = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = v57;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v58 = *(_QWORD *)(a2 + 176);
  v59 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v67 = *(_QWORD *)(a2 + 192);
  v68 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v76 = *(_QWORD *)(a2 + 216);
  v77 = *(BAEventReporter **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  v85 = (__int128 *)(a1 + 232);
  v86 = (__int128 *)(a2 + 232);
  v87 = *(BAEventReporter **)(a1 + 272);
  v88 = *(_QWORD *)(a2 + 272);
  if (v87 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v88 == 1)
    {
      v89 = *v86;
      v90 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v90;
      *v85 = v89;
    }
    else
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
      *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v93 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 272) = v93;
      swift_bridgeObjectRetain(v93);
    }
  }
  else if (v88 == 1)
  {
    sub_19008(a1 + 232);
    v92 = *(_OWORD *)(a2 + 248);
    v91 = *(_OWORD *)(a2 + 264);
    *v85 = *v86;
    *(_OWORD *)(a1 + 248) = v92;
    *(_OWORD *)(a1 + 264) = v91;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v94 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v94;
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRelease(v87, v95, v96, v97, v98, v99, v100, v101);
  }
  v102 = *(int *)(a3 + 48);
  v103 = a1 + v102;
  v104 = a2 + v102;
  v105 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 24))(v103, v104, v105);
  v106 = *(int *)(a3 + 52);
  v107 = *(BAEventReporter **)(a1 + v106);
  v108 = *(_QWORD *)(a2 + v106);
  *(_QWORD *)(a1 + v106) = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v107, v109, v110, v111, v112, v113, v114, v115);
  return a1;
}

uint64_t initializeWithTake for PlayAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  v9 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v10;
  *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  v11 = *(_OWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v12;
  v13 = *(int *)(a3 + 48);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)(a1 + 232) = v11;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  return a1;
}

uint64_t assignWithTake for PlayAttemptEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  const char *v76;
  void *v77;
  void *v78;
  void *v79;
  int64_t v80;
  int64_t v81;
  void *v82;
  BAEventReporter *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BAEventReporter *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  int64_t v96;
  int64_t v97;
  id v98;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v40 = *(_QWORD *)(a2 + 128);
  v41 = *(BAEventReporter **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  v49 = *(_QWORD *)(a2 + 176);
  v50 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v49;
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  v58 = *(_QWORD *)(a2 + 192);
  v59 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v58;
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  v67 = *(_QWORD *)(a2 + 216);
  v68 = *(BAEventReporter **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v67;
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  v83 = *(BAEventReporter **)(a1 + 272);
  if (v83 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v84 = *(_QWORD *)(a2 + 272);
    if (v84 != 1)
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v84;
      swift_bridgeObjectRelease(v83, v76, v77, v78, v79, v80, v81, v82);
      goto LABEL_6;
    }
    sub_19008(a1 + 232);
  }
  v85 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v85;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
LABEL_6:
  v86 = a3[12];
  v87 = a1 + v86;
  v88 = a2 + v86;
  v89 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 40))(v87, v88, v89);
  v90 = a3[13];
  v91 = *(BAEventReporter **)(a1 + v90);
  *(_QWORD *)(a1 + v90) = *(_QWORD *)(a2 + v90);
  swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A357C);
}

uint64_t sub_1A357C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PlayAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A3604);
}

uint64_t sub_1A3604(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A3678(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[1] = &unk_2153D0;
  v4[2] = &unk_2153E8;
  v4[3] = &unk_215400;
  v4[4] = &unk_215418;
  v4[5] = &unk_215430;
  v4[6] = &unk_215448;
  v4[7] = &unk_215460;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    v4[9] = &unk_215478;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlayAttemptEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1A3784 + 4 * byte_21528F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1A37B8 + 4 * byte_21528A[v4]))();
}

uint64_t sub_1A37B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A37C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A37C8);
  return result;
}

uint64_t sub_1A37D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A37DCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1A37E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A37E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayAttemptEvent.Model.CodingKeys()
{
  return &type metadata for PlayAttemptEvent.Model.CodingKeys;
}

unint64_t sub_1A3808()
{
  unint64_t result;

  result = qword_2A53B0;
  if (!qword_2A53B0)
  {
    result = swift_getWitnessTable(aU_14, &type metadata for PlayAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A53B0);
  }
  return result;
}

unint64_t sub_1A3850()
{
  unint64_t result;

  result = qword_2A53B8;
  if (!qword_2A53B8)
  {
    result = swift_getWitnessTable(byte_21549C, &type metadata for PlayAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A53B8);
  }
  return result;
}

unint64_t sub_1A3898()
{
  unint64_t result;

  result = qword_2A53C0;
  if (!qword_2A53C0)
  {
    result = swift_getWitnessTable(byte_2154C4, &type metadata for PlayAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A53C0);
  }
  return result;
}

uint64_t sub_1A38DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x800000000021F050;
    if (a2 == 0x800000000021F050)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F050, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000000021EC40)
  {
    v8 = 0x800000000021EC40;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000021EC40, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x4465746152746962 && a2 == 0xEB00000000617461)
  {
    v9 = 0xEB00000000617461;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4465746152746962, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144726F727265 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144726F727265, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x800000000021F070;
    if (a2 == 0x800000000021F070)
      goto LABEL_42;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F070, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v13 = 0xEA00000000006174;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v14 = 0xE900000000000061;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F090)
  {
    swift_bridgeObjectRelease(0x800000000021F090);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F090, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

unint64_t sub_1A3D10()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000018;
  else
    return 0xD000000000000012;
}

uint64_t sub_1A3D50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A4288(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A4088();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A3D9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A4088();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DailyGoalsReachedData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_71B4(&qword_2A53C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = *((_QWORD *)v1 + 1);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1A4088();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DailyGoalsReachedData.CodingKeys, &type metadata for DailyGoalsReachedData.CodingKeys, v11, v9, v10);
  v18 = v8;
  v17 = 0;
  v12 = sub_22D88();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, &type metadata for DefaultReadingGoal, v12);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DailyGoalsReachedData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v5 = sub_71B4(&qword_2A53D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1A4088();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DailyGoalsReachedData.CodingKeys, &type metadata for DailyGoalsReachedData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v18 = 0;
    v12 = sub_22E10();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for DefaultReadingGoal, &v18, v5, &type metadata for DefaultReadingGoal, v12);
    v13 = v19;
    v17 = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v14;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1A4060@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DailyGoalsReachedData.init(from:)(a1, a2);
}

uint64_t sub_1A4074(_QWORD *a1)
{
  return DailyGoalsReachedData.encode(to:)(a1);
}

unint64_t sub_1A4088()
{
  unint64_t result;

  result = qword_2A53D0;
  if (!qword_2A53D0)
  {
    result = swift_getWitnessTable(byte_21575C, &type metadata for DailyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A53D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DailyGoalsReachedData()
{
  return &type metadata for DailyGoalsReachedData;
}

uint64_t storeEnumTagSinglePayload for DailyGoalsReachedData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A4130 + 4 * byte_2155B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A4164 + 4 * byte_2155B0[v4]))();
}

uint64_t sub_1A4164(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A416C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A4174);
  return result;
}

uint64_t sub_1A4180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A4188);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A418C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A4194(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DailyGoalsReachedData.CodingKeys()
{
  return &type metadata for DailyGoalsReachedData.CodingKeys;
}

unint64_t sub_1A41B4()
{
  unint64_t result;

  result = qword_2A53E0;
  if (!qword_2A53E0)
  {
    result = swift_getWitnessTable(byte_215734, &type metadata for DailyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A53E0);
  }
  return result;
}

unint64_t sub_1A41FC()
{
  unint64_t result;

  result = qword_2A53E8;
  if (!qword_2A53E8)
  {
    result = swift_getWitnessTable(byte_2156A4, &type metadata for DailyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A53E8);
  }
  return result;
}

unint64_t sub_1A4244()
{
  unint64_t result;

  result = qword_2A53F0;
  if (!qword_2A53F0)
  {
    result = swift_getWitnessTable(aU_15, &type metadata for DailyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A53F0);
  }
  return result;
}

uint64_t sub_1A4288(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021ECE0;
    if (a2 == 0x800000000021ECE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021ECE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x800000000021ED20)
  {
    swift_bridgeObjectRelease(0x800000000021ED20);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000000021ED20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A4370(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A53F8, &enum case for SessionGroup.default(_:));
}

uint64_t static WidgetEngagementEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C28, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A53F8, a1);
}

uint64_t sub_1A43B0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A5410, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static WidgetEngagementEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C30, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5410, a1);
}

uint64_t WidgetEngagementEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetEngagementEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WidgetEngagementEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5498, (uint64_t)&nominal type descriptor for WidgetEngagementEvent);
}

uint64_t WidgetEngagementEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetEngagementEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WidgetEngagementEvent.contentData.modify())()
{
  type metadata accessor for WidgetEngagementEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WidgetEngagementEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetEngagementEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WidgetEngagementEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetEngagementEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WidgetEngagementEvent.eventData.modify())()
{
  type metadata accessor for WidgetEngagementEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WidgetEngagementEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for WidgetEngagementEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
}

uint64_t WidgetEngagementEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetEngagementEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WidgetEngagementEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5530, (uint64_t)&nominal type descriptor for WidgetEngagementEvent.Model);
}

uint64_t WidgetEngagementEvent.Model.init(widgetData:contentData:eventData:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a4 = *(_OWORD *)a1;
  v5 = a2[1];
  *(_OWORD *)(a4 + 40) = *a2;
  *(_OWORD *)(a4 + 56) = v5;
  v6 = a2[3];
  *(_OWORD *)(a4 + 72) = a2[2];
  *(_OWORD *)(a4 + 88) = v6;
  v7 = a2[5];
  *(_OWORD *)(a4 + 104) = a2[4];
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a4 + 24) = v8;
  *(_BYTE *)(a4 + 32) = v9;
  *(_BYTE *)(a4 + 33) = v10;
  *(_OWORD *)(a4 + 120) = v7;
  v11 = a4 + *(int *)(type metadata accessor for WidgetEngagementEvent.Model(0) + 24);
  v12 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a3, v12);
}

uint64_t sub_1A4738()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x44746E65746E6F63;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x6144746567646977;
}

uint64_t sub_1A47A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A6018(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A47C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A49F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A47F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A49F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WidgetEngagementEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  v3 = v1;
  v5 = sub_71B4(&qword_2A5428);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1A49F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetEngagementEvent.Model.CodingKeys, &type metadata for WidgetEngagementEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v14 = *((_BYTE *)v3 + 32);
  v15 = *((_BYTE *)v3 + 33);
  v25 = *v3;
  *(_QWORD *)&v26 = v12;
  *((_QWORD *)&v26 + 1) = v13;
  LOBYTE(v27) = v14;
  BYTE1(v27) = v15;
  v31 = 0;
  v16 = sub_147688();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v31, v5, &type metadata for WidgetData, v16);
  if (!v2)
  {
    v17 = *(__int128 *)((char *)v3 + 56);
    v25 = *(__int128 *)((char *)v3 + 40);
    v26 = v17;
    v18 = *(__int128 *)((char *)v3 + 88);
    v27 = *(__int128 *)((char *)v3 + 72);
    v28 = v18;
    v19 = *(__int128 *)((char *)v3 + 120);
    v29 = *(__int128 *)((char *)v3 + 104);
    v30 = v19;
    v31 = 1;
    v20 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v31, v5, &type metadata for ContentData, v20);
    v21 = (uint64_t)v3 + *(int *)(type metadata accessor for WidgetEngagementEvent.Model(0) + 24);
    LOBYTE(v25) = 2;
    v22 = type metadata accessor for EventData(0);
    v23 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v25, v5, v22, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1A49F0()
{
  unint64_t result;

  result = qword_2A5430;
  if (!qword_2A5430)
  {
    result = swift_getWitnessTable(aU_16, &type metadata for WidgetEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5430);
  }
  return result;
}

void WidgetEngagementEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v33 = a2;
  v34 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_71B4(&qword_2A5438);
  v6 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetEngagementEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v37 = a1;
  sub_7988(a1, v12);
  v14 = sub_1A49F0();
  v35 = v8;
  v15 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetEngagementEvent.Model.CodingKeys, &type metadata for WidgetEngagementEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v37);
  }
  else
  {
    v32 = v9;
    v16 = v11;
    v38 = v5;
    v17 = v34;
    v45 = 0;
    v18 = sub_147640();
    v20 = v35;
    v19 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for WidgetData, &v45, v36, &type metadata for WidgetData, v18);
    v21 = v40;
    v22 = v41;
    v23 = BYTE1(v41);
    v24 = (uint64_t)v16;
    *(_OWORD *)v16 = v39;
    *((_OWORD *)v16 + 1) = v21;
    v16[32] = v22;
    v16[33] = v23;
    v45 = 1;
    v25 = sub_1779C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, &type metadata for ContentData, &v45, v19, &type metadata for ContentData, v25);
    v26 = v40;
    *(_OWORD *)(v16 + 40) = v39;
    *(_OWORD *)(v16 + 56) = v26;
    v27 = v42;
    *(_OWORD *)(v16 + 72) = v41;
    *(_OWORD *)(v16 + 88) = v27;
    v28 = v44;
    *(_OWORD *)(v16 + 104) = v43;
    *(_OWORD *)(v16 + 120) = v28;
    LOBYTE(v39) = 2;
    v29 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v30 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v17, &v39, v19, v17, v29);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v19);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v24 + *(int *)(v32 + 24), v30, v17);
    sub_1A4D5C(v24, v33);
    sub_7DAC(v37);
    sub_1A4DA0(v24);
  }
}

uint64_t sub_1A4D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetEngagementEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A4DA0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetEngagementEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A4DDC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  WidgetEngagementEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1A4DF0(_QWORD *a1)
{
  return WidgetEngagementEvent.Model.encode(to:)(a1);
}

uint64_t sub_1A4E04@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C28, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A53F8, (uint64_t)sub_1A4370, a1);
}

uint64_t sub_1A4E28@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C30, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5410, (uint64_t)sub_1A43B0, a1);
}

uint64_t sub_1A4E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for WidgetEngagementEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_2A1A58);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for WidgetEngagementEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for WidgetEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for WidgetEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for WidgetEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for WidgetEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A5384);
}

uint64_t sub_1A5384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_2A1A58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WidgetEngagementEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A5434);
}

uint64_t sub_1A5434(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_2A1A58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A54E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_2A1AE0, (uint64_t (*)(void))sub_147640, (uint64_t (*)(void))sub_147688, (uint64_t)&type metadata for WidgetData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetEngagementEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v13);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    v9 = a2[6];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v9;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      v10 = a2[9];
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v10;
      v11 = a2[11];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v11;
      *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
      *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_DWORD *)(a1 + 113) = *(_DWORD *)((char *)a2 + 113);
      *(_BYTE *)(a1 + 117) = *((_BYTE *)a2 + 117);
      v12 = a2[16];
      *(_QWORD *)(a1 + 120) = a2[15];
      *(_QWORD *)(a1 + 128) = v12;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = v14;
      v15 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = v15;
      v16 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v16;
    }
    v17 = *(int *)(a3 + 24);
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t initializeWithCopy for WidgetEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v9;
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v10;
    *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_DWORD *)(a1 + 113) = *(_DWORD *)(a2 + 113);
    *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
    v11 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v11;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v12;
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v13;
    v14 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v14;
  }
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for WidgetEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  _OWORD *v24;
  _OWORD *v25;
  BAEventReporter *v26;
  uint64_t v27;
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  int v54;
  int v55;
  uint64_t v56;
  BAEventReporter *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v24 = (_OWORD *)(a1 + 40);
  v25 = (_OWORD *)(a2 + 40);
  v26 = *(BAEventReporter **)(a1 + 48);
  v27 = *(_QWORD *)(a2 + 48);
  if (v26)
  {
    if (v27)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v28 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v26, v29, v30, v31, v32, v33, v34, v35);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v36 = *(_QWORD *)(a2 + 72);
      v37 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v45 = *(_QWORD *)(a2 + 88);
      v46 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
      v54 = *(_DWORD *)(a2 + 100);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_DWORD *)(a1 + 100) = v54;
      v55 = *(_DWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_DWORD *)(a1 + 108) = v55;
      *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
      *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
      *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
      *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
      *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v56 = *(_QWORD *)(a2 + 128);
      v57 = *(BAEventReporter **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 40));
      v71 = *(_OWORD *)(a2 + 56);
      *v24 = *v25;
      *(_OWORD *)(a1 + 56) = v71;
      v72 = *(_OWORD *)(a2 + 120);
      v74 = *(_OWORD *)(a2 + 72);
      v73 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v72;
      *(_OWORD *)(a1 + 72) = v74;
      *(_OWORD *)(a1 + 88) = v73;
    }
  }
  else if (v27)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v65 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v65;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v66 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v66;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v67 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v67;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
    v68 = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 100) = v68;
    v69 = *(_DWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_DWORD *)(a1 + 108) = v69;
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
    *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
    *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
    *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v70 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v70;
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v70);
  }
  else
  {
    v75 = *(_OWORD *)(a2 + 56);
    *v24 = *v25;
    *(_OWORD *)(a1 + 56) = v75;
    v76 = *(_OWORD *)(a2 + 72);
    v77 = *(_OWORD *)(a2 + 88);
    v78 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v78;
    *(_OWORD *)(a1 + 72) = v76;
    *(_OWORD *)(a1 + 88) = v77;
  }
  v79 = *(int *)(a3 + 24);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 24))(v80, v81, v82);
  return a1;
}

uint64_t initializeWithTake for WidgetEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WidgetEngagementEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  int64_t v26;
  int64_t v27;
  void *v28;
  BAEventReporter *v29;
  uint64_t v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v29 = *(BAEventReporter **)(a1 + 48);
  if (!v29)
    goto LABEL_5;
  v30 = *(_QWORD *)(a2 + 48);
  if (!v30)
  {
    sub_4E9F4((_QWORD *)(a1 + 40));
LABEL_5:
    v58 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v58;
    v59 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v59;
    v60 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v60;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v30;
  swift_bridgeObjectRelease(v29, v22, v23, v24, v25, v26, v27, v28);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v31 = *(_QWORD *)(a2 + 72);
  v32 = *(BAEventReporter **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 88);
  v41 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 113) = *(_DWORD *)(a2 + 113);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  v49 = *(_QWORD *)(a2 + 128);
  v50 = *(BAEventReporter **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v49;
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
LABEL_6:
  v61 = a3[6];
  v62 = a1 + v61;
  v63 = a2 + v61;
  v64 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 40))(v62, v63, v64);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A5CFC);
}

uint64_t sub_1A5CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetEngagementEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A5D84);
}

uint64_t sub_1A5D84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A5DF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\"";
  v4[1] = &unk_2158A8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WidgetEngagementEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A5EC0 + 4 * byte_2157B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A5EF4 + 4 * byte_2157B0[v4]))();
}

uint64_t sub_1A5EF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5EFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5F04);
  return result;
}

uint64_t sub_1A5F10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5F18);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A5F1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5F24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetEngagementEvent.Model.CodingKeys()
{
  return &type metadata for WidgetEngagementEvent.Model.CodingKeys;
}

unint64_t sub_1A5F44()
{
  unint64_t result;

  result = qword_2A5570;
  if (!qword_2A5570)
  {
    result = swift_getWitnessTable(aM_11, &type metadata for WidgetEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5570);
  }
  return result;
}

unint64_t sub_1A5F8C()
{
  unint64_t result;

  result = qword_2A5578;
  if (!qword_2A5578)
  {
    result = swift_getWitnessTable(byte_2158CC, &type metadata for WidgetEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5578);
  }
  return result;
}

unint64_t sub_1A5FD4()
{
  unint64_t result;

  result = qword_2A5580;
  if (!qword_2A5580)
  {
    result = swift_getWitnessTable(byte_2158F4, &type metadata for WidgetEngagementEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5580);
  }
  return result;
}

uint64_t sub_1A6018(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6144746567646977 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144746567646977, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A619C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A5588, &enum case for SessionGroup.default(_:));
}

uint64_t static BrickExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C38, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5588, a1);
}

uint64_t sub_1A61DC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A55A0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static BrickExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C40, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A55A0, a1);
}

uint64_t BrickExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for BrickExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5628, (uint64_t)&nominal type descriptor for BrickExposureEvent);
}

uint64_t BrickExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.linkData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.brickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_29C2F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.brickData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_29C2F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.brickData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.pageData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.mediaData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.mediaData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.upSellData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.suggestionData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.eventData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrickExposureEvent.timedData.modify())()
{
  type metadata accessor for BrickExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrickExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for BrickExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = enum case for EventProperty.optional<A>(_:);
  v13 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v11, v12, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v12, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v12, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v2, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
}

uint64_t BrickExposureEvent.Model.brickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 272);
  v3 = *(_DWORD *)(v1 + 280);
  v4 = *(_QWORD *)(v1 + 288);
  v5 = *(_QWORD *)(v1 + 296);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v5);
}

uint64_t BrickExposureEvent.Model.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 304);
  v3 = *(_OWORD *)(v1 + 312);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t BrickExposureEvent.Model.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(v1 + 336);
  v3 = *(_QWORD *)(v1 + 344);
  v4 = *(_QWORD *)(v1 + 352);
  v5 = *(_QWORD *)(v1 + 360);
  v6 = *(_DWORD *)(v1 + 368);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  return sub_35E04(v2, v3, v4, v5);
}

uint64_t BrickExposureEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 392);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 376);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

void BrickExposureEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 400);
}

uint64_t BrickExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent.Model(0) + 44);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for BrickExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A56D8, (uint64_t)&nominal type descriptor for BrickExposureEvent.Model);
}

uint64_t BrickExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrickExposureEvent.Model(0) + 48);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrickExposureEvent.Model.init(sectionData:linkData:brickData:pageData:mediaData:upSellData:suggestionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v12 = *(_DWORD *)(a1 + 4);
  v13 = *(_OWORD *)(a1 + 8);
  v14 = *(_OWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_DWORD *)(a1 + 88);
  v18 = *(_BYTE *)(a1 + 92);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *a3;
  v22 = a3[1];
  v23 = *((_DWORD *)a3 + 4);
  v25 = a3[3];
  v24 = a3[4];
  v26 = *(_QWORD *)(a4 + 16);
  v27 = *(_QWORD *)(a4 + 24);
  v28 = *(_DWORD *)(a5 + 32);
  v29 = *(_QWORD *)(a6 + 16);
  v30 = *a7;
  *(_BYTE *)a9 = *(_BYTE *)a1;
  *(_DWORD *)(a9 + 4) = v12;
  *(_OWORD *)(a9 + 8) = v13;
  *(_OWORD *)(a9 + 24) = v14;
  *(_QWORD *)(a9 + 40) = v15;
  *(_QWORD *)(a9 + 48) = v16;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a9 + 72) = *(_OWORD *)(a1 + 72);
  *(_DWORD *)(a9 + 88) = v17;
  *(_BYTE *)(a9 + 92) = v18;
  *(_QWORD *)(a9 + 96) = v19;
  *(_QWORD *)(a9 + 104) = v20;
  v31 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a9 + 112) = *(_OWORD *)a2;
  *(_OWORD *)(a9 + 128) = v31;
  v32 = *(_OWORD *)(a2 + 32);
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a9 + 176) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a9 + 192) = v34;
  *(_OWORD *)(a9 + 144) = v32;
  *(_OWORD *)(a9 + 160) = v33;
  v35 = *(_OWORD *)(a2 + 96);
  v36 = *(_OWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a9 + 224) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a9 + 240) = v36;
  *(_OWORD *)(a9 + 208) = v35;
  *(_QWORD *)(a9 + 256) = v37;
  *(_QWORD *)(a9 + 264) = v21;
  *(_QWORD *)(a9 + 272) = v22;
  *(_DWORD *)(a9 + 280) = v23;
  *(_QWORD *)(a9 + 288) = v25;
  *(_QWORD *)(a9 + 296) = v24;
  *(_OWORD *)(a9 + 304) = *(_OWORD *)a4;
  *(_QWORD *)(a9 + 320) = v26;
  *(_QWORD *)(a9 + 328) = v27;
  v38 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 336) = *(_OWORD *)a5;
  *(_OWORD *)(a9 + 352) = v38;
  *(_DWORD *)(a9 + 368) = v28;
  *(_OWORD *)(a9 + 376) = *(_OWORD *)a6;
  *(_QWORD *)(a9 + 392) = v29;
  *(_BYTE *)(a9 + 400) = v30;
  v39 = type metadata accessor for BrickExposureEvent.Model(0);
  v40 = a9 + *(int *)(v39 + 44);
  v41 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v40, a8, v41);
  v42 = a9 + *(int *)(v39 + 48);
  v43 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v42, a10, v43);
}

uint64_t sub_1A6CC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A6D00 + 4 * byte_2159E0[a1]))(0x446E6F6974636573, 0xEB00000000617461);
}

uint64_t sub_1A6D00()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_1A6D38()
{
  return 0x746144616964656DLL;
}

uint64_t sub_1A6D48()
{
  return 0x61446C6C65537075;
}

uint64_t sub_1A6D64()
{
  return 0x6974736567677573;
}

uint64_t sub_1A6D88()
{
  return 0x746144746E657665;
}

uint64_t sub_1A6DB4()
{
  unsigned __int8 *v0;

  return sub_1A6CC4(*v0);
}

uint64_t sub_1A6DBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AA098(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A6DE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A7268();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A6E08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A7268();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BrickExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  char v66[4];
  int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v2 = v1;
  v4 = sub_71B4(&qword_2A55B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1A7268();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BrickExposureEvent.Model.CodingKeys, &type metadata for BrickExposureEvent.Model.CodingKeys, v10, v8, v9);
  v11 = *((_DWORD *)v2 + 1);
  v12 = *(_OWORD *)(v2 + 8);
  v13 = *(_OWORD *)(v2 + 24);
  v14 = *((_QWORD *)v2 + 5);
  v15 = *((_QWORD *)v2 + 6);
  v16 = *((_DWORD *)v2 + 22);
  v17 = v2[92];
  v18 = *((_QWORD *)v2 + 12);
  v19 = *((_QWORD *)v2 + 13);
  v66[0] = *v2;
  v67 = v11;
  v68 = v12;
  v69 = v13;
  v70 = v14;
  v71 = v15;
  v72 = *(_OWORD *)(v2 + 56);
  v73 = *(_OWORD *)(v2 + 72);
  v74 = v16;
  v75 = v17;
  v76 = v18;
  v77 = v19;
  v65 = 0;
  v20 = sub_1B768();
  v21 = v78;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v66, &v65, v4, &type metadata for SectionData, v20);
  if (v21)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22 = *((_OWORD *)v2 + 14);
  v61 = *((_OWORD *)v2 + 13);
  v62 = v22;
  v63 = *((_OWORD *)v2 + 15);
  v64 = *((_QWORD *)v2 + 32);
  v23 = *((_OWORD *)v2 + 10);
  v57 = *((_OWORD *)v2 + 9);
  v58 = v23;
  v24 = *((_OWORD *)v2 + 12);
  v59 = *((_OWORD *)v2 + 11);
  v60 = v24;
  v25 = *((_OWORD *)v2 + 8);
  v55 = *((_OWORD *)v2 + 7);
  v56 = v25;
  v54 = 1;
  v26 = sub_1B7F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v55, &v54, v4, &type metadata for LinkData, v26);
  v27 = *((_QWORD *)v2 + 34);
  v28 = *((_DWORD *)v2 + 70);
  v29 = *((_QWORD *)v2 + 36);
  v30 = *((_QWORD *)v2 + 37);
  *(_QWORD *)&v55 = *((_QWORD *)v2 + 33);
  *((_QWORD *)&v55 + 1) = v27;
  LODWORD(v56) = v28;
  *((_QWORD *)&v56 + 1) = v29;
  *(_QWORD *)&v57 = v30;
  v54 = 2;
  v31 = sub_C0080();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v55, &v54, v4, &type metadata for BrickData, v31);
  v32 = v5;
  v33 = *((_QWORD *)v2 + 40);
  v34 = *((_QWORD *)v2 + 41);
  v55 = *((_OWORD *)v2 + 19);
  *(_QWORD *)&v56 = v33;
  *((_QWORD *)&v56 + 1) = v34;
  v54 = 3;
  v35 = sub_1B7AC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v55, &v54, v4, &type metadata for PageData, v35);
  v36 = *((_DWORD *)v2 + 92);
  v37 = *((_OWORD *)v2 + 22);
  v55 = *((_OWORD *)v2 + 21);
  v56 = v37;
  LODWORD(v57) = v36;
  v54 = 4;
  v38 = sub_19F90();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v55, &v54, v4, &type metadata for MediaData, v38);
  v39 = *((_QWORD *)v2 + 49);
  v55 = *(_OWORD *)(v2 + 376);
  *(_QWORD *)&v56 = v39;
  v54 = 5;
  v40 = sub_2E6E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v55, &v54, v4, &type metadata for UpSellData, v40);
  LOBYTE(v55) = v2[400];
  v54 = 6;
  v41 = sub_2E76C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v55, &v54, v4, &type metadata for SuggestionData, v41);
  v42 = type metadata accessor for BrickExposureEvent.Model(0);
  v43 = &v2[*(int *)(v42 + 44)];
  LOBYTE(v55) = 7;
  v44 = type metadata accessor for EventData(0);
  v45 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v46 = v43;
  v78 = v4;
  v47 = v7;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v46, &v55, v4, v44, v45);
  v48 = &v2[*(int *)(v42 + 48)];
  LOBYTE(v55) = 8;
  v49 = type metadata accessor for TimedData(0);
  v50 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v51 = v78;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v48, &v55, v78, v49, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v47, v51);
}

unint64_t sub_1A7268()
{
  unint64_t result;

  result = qword_2A55C0;
  if (!qword_2A55C0)
  {
    result = swift_getWitnessTable(byte_215C7C, &type metadata for BrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A55C0);
  }
  return result;
}

void BrickExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  int v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _BYTE *v62;
  char v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  _BYTE v68[48];
  _BYTE v69[48];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;

  v55 = a2;
  v56 = type metadata accessor for TimedData(0);
  v3 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v5 = (_QWORD **)((char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for EventData(0);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v7 = (_QWORD **)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = sub_71B4(&qword_2A55C8);
  v8 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for BrickExposureEvent.Model(0);
  __chkstk_darwin(v59);
  v62 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  v61 = a1;
  sub_7988(a1, v13);
  v14 = sub_1A7268();
  v15 = v74;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BrickExposureEvent.Model.CodingKeys, &type metadata for BrickExposureEvent.Model.CodingKeys, v14, v13, v12);
  if (v15)
  {
    sub_7DAC(v61);
  }
  else
  {
    v74 = v7;
    v16 = v8;
    v54 = v5;
    v17 = v56;
    LOBYTE(v64) = 0;
    v18 = sub_1BFE4();
    v19 = v57;
    v20 = v10;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v68, &type metadata for SectionData, &v64, v57, &type metadata for SectionData, v18);
    v21 = *(_DWORD *)&v68[4];
    v22 = *(_OWORD *)&v68[8];
    v23 = *(_OWORD *)&v68[24];
    v24 = *(_QWORD *)&v68[40];
    v25 = *(_QWORD *)v69;
    v26 = *(_DWORD *)&v69[40];
    v27 = v69[44];
    v28 = v70;
    v29 = (uint64_t)v62;
    *v62 = v68[0];
    *(_DWORD *)(v29 + 4) = v21;
    *(_OWORD *)(v29 + 8) = v22;
    *(_OWORD *)(v29 + 24) = v23;
    *(_QWORD *)(v29 + 40) = v24;
    *(_QWORD *)(v29 + 48) = v25;
    *(_OWORD *)(v29 + 56) = *(_OWORD *)&v69[8];
    *(_OWORD *)(v29 + 72) = *(_OWORD *)&v69[24];
    *(_DWORD *)(v29 + 88) = v26;
    *(_BYTE *)(v29 + 92) = v27;
    *(_OWORD *)(v29 + 96) = v28;
    v67 = 1;
    v30 = sub_1C06C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v68, &type metadata for LinkData, &v67, v19, &type metadata for LinkData, v30);
    v31 = v71;
    v32 = v72;
    v33 = *(_OWORD *)&v69[32];
    *(_OWORD *)(v29 + 208) = v70;
    *(_OWORD *)(v29 + 224) = v31;
    *(_OWORD *)(v29 + 240) = v32;
    *(_QWORD *)(v29 + 256) = v73;
    v34 = *(_OWORD *)v69;
    *(_OWORD *)(v29 + 144) = *(_OWORD *)&v68[32];
    *(_OWORD *)(v29 + 160) = v34;
    *(_OWORD *)(v29 + 176) = *(_OWORD *)&v69[16];
    *(_OWORD *)(v29 + 192) = v33;
    v35 = *(_OWORD *)&v68[16];
    *(_OWORD *)(v29 + 112) = *(_OWORD *)v68;
    *(_OWORD *)(v29 + 128) = v35;
    v63 = 2;
    v36 = sub_C096C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for BrickData, &v63, v19, &type metadata for BrickData, v36);
    v37 = *((_QWORD *)&v64 + 1);
    v38 = v65;
    v39 = *((_QWORD *)&v65 + 1);
    v40 = v66;
    *(_QWORD *)(v29 + 264) = v64;
    *(_QWORD *)(v29 + 272) = v37;
    *(_DWORD *)(v29 + 280) = v38;
    *(_QWORD *)(v29 + 288) = v39;
    *(_QWORD *)(v29 + 296) = v40;
    v63 = 3;
    v41 = sub_1C028();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for PageData, &v63, v19, &type metadata for PageData, v41);
    v42 = v16;
    v43 = v65;
    *(_OWORD *)(v29 + 304) = v64;
    *(_OWORD *)(v29 + 320) = v43;
    v63 = 4;
    v44 = sub_19F48();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for MediaData, &v63, v19, &type metadata for MediaData, v44);
    v45 = v66;
    v46 = v65;
    *(_OWORD *)(v29 + 336) = v64;
    *(_OWORD *)(v29 + 352) = v46;
    *(_DWORD *)(v29 + 368) = v45;
    v63 = 5;
    v47 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for UpSellData, &v63, v19, &type metadata for UpSellData, v47);
    v48 = v65;
    *(_OWORD *)(v29 + 376) = v64;
    *(_QWORD *)(v29 + 392) = v48;
    v63 = 6;
    v49 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for SuggestionData, &v63, v19, &type metadata for SuggestionData, v49);
    *(_BYTE *)(v29 + 400) = v64;
    LOBYTE(v64) = 7;
    v50 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v51 = v74;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v74, v60, &v64, v19, v60, v50);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v58 + 32))(v29 + *(int *)(v59 + 44), v51, v60);
    LOBYTE(v64) = 8;
    v52 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v53 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v17, &v64, v19, v17, v52);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v57);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v29 + *(int *)(v59 + 48), v53, v17);
    sub_1A7B74(v29, v55);
    sub_7DAC(v61);
    sub_1A7BB8(v29);
  }
}

uint64_t sub_1A7B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrickExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A7BB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrickExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A7BF4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  BrickExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1A7C08(_QWORD *a1)
{
  return BrickExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_1A7C1C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C38, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5588, (uint64_t)sub_1A619C, a1);
}

uint64_t sub_1A7C40@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C40, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A55A0, (uint64_t)sub_1A61DC, a1);
}

uint64_t sub_1A7C64@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = enum case for EventProperty.optional<A>(_:);
  v14 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v13, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v13, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v4, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrickExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v40);
  }
  else
  {
    v7 = sub_71B4(&qword_296A00);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29C2F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_2969F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  }
  return a1;
}

uint64_t destroy for BrickExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
}

uint64_t initializeWithCopy for BrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  return a1;
}

uint64_t assignWithCopy for BrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  return a1;
}

uint64_t initializeWithTake for BrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  return a1;
}

uint64_t assignWithTake for BrickExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrickExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A8934);
}

uint64_t sub_1A8934(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_71B4(&qword_296A00);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A10);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29C2F0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296A08);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_2969F0);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296F68);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296F78);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_295D70);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v8 = sub_71B4(&qword_295D78);
                  v12 = *(_QWORD *)(v8 - 8);
                  v13 = a3[12];
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for BrickExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A8AD4);
}

uint64_t sub_1A8AD4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = sub_71B4(&qword_296A00);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A10);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29C2F0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296A08);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_2969F0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296F68);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296F78);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_295D70);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v10 = sub_71B4(&qword_295D78);
                  v14 = *(_QWORD *)(v10 - 8);
                  v15 = a4[12];
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A8C70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[9];

  sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
  if (v3 <= 0x3F)
  {
    v20[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
    if (v5 <= 0x3F)
    {
      v20[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_29C3B8, (uint64_t (*)(void))sub_C096C, (uint64_t (*)(void))sub_C0080, (uint64_t)&type metadata for BrickData);
      if (v7 <= 0x3F)
      {
        v20[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
        if (v9 <= 0x3F)
        {
          v20[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_296AE8, (uint64_t (*)(void))sub_19F48, (uint64_t (*)(void))sub_19F90, (uint64_t)&type metadata for MediaData);
          if (v11 <= 0x3F)
          {
            v20[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
            if (v13 <= 0x3F)
            {
              v20[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
              if (v15 <= 0x3F)
              {
                v20[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_8734(319);
                if (v17 <= 0x3F)
                {
                  v20[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_87D8(319);
                  if (v19 <= 0x3F)
                  {
                    v20[8] = *(_QWORD *)(v18 - 8) + 64;
                    swift_initStructMetadata(a1, 256, 9, v20, a1 + 16);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for BrickExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    v6 = a2[2];
    *(_QWORD *)(v4 + 8) = a2[1];
    *(_QWORD *)(v4 + 16) = v6;
    v39 = a2[4];
    *(_QWORD *)(v4 + 24) = a2[3];
    *(_QWORD *)(v4 + 32) = v39;
    v38 = a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v38;
    v37 = a2[8];
    *(_QWORD *)(v4 + 56) = a2[7];
    *(_QWORD *)(v4 + 64) = v37;
    v36 = a2[10];
    *(_QWORD *)(v4 + 72) = a2[9];
    *(_QWORD *)(v4 + 80) = v36;
    *(_DWORD *)(v4 + 88) = *((_DWORD *)a2 + 22);
    *(_BYTE *)(v4 + 92) = *((_BYTE *)a2 + 92);
    v35 = a2[13];
    *(_QWORD *)(v4 + 96) = a2[12];
    *(_QWORD *)(v4 + 104) = v35;
    v34 = a2[15];
    *(_QWORD *)(v4 + 112) = a2[14];
    *(_QWORD *)(v4 + 120) = v34;
    v33 = a2[17];
    *(_QWORD *)(v4 + 128) = a2[16];
    *(_QWORD *)(v4 + 136) = v33;
    v32 = a2[19];
    *(_QWORD *)(v4 + 144) = a2[18];
    *(_QWORD *)(v4 + 152) = v32;
    *(_BYTE *)(v4 + 160) = *((_BYTE *)a2 + 160);
    v7 = a2[22];
    *(_QWORD *)(v4 + 168) = a2[21];
    *(_QWORD *)(v4 + 176) = v7;
    v8 = a2[24];
    *(_QWORD *)(v4 + 184) = a2[23];
    *(_QWORD *)(v4 + 192) = v8;
    v9 = a2[26];
    *(_QWORD *)(v4 + 200) = a2[25];
    *(_QWORD *)(v4 + 208) = v9;
    v31 = a2[28];
    *(_QWORD *)(v4 + 216) = a2[27];
    *(_QWORD *)(v4 + 224) = v31;
    v30 = a2[30];
    *(_QWORD *)(v4 + 232) = a2[29];
    *(_QWORD *)(v4 + 240) = v30;
    v10 = a2[32];
    *(_QWORD *)(v4 + 248) = a2[31];
    *(_QWORD *)(v4 + 256) = v10;
    v11 = a2[34];
    *(_QWORD *)(v4 + 264) = a2[33];
    *(_QWORD *)(v4 + 272) = v11;
    *(_DWORD *)(v4 + 280) = *((_DWORD *)a2 + 70);
    v12 = a2[37];
    *(_QWORD *)(v4 + 288) = a2[36];
    *(_QWORD *)(v4 + 296) = v12;
    v13 = a2[39];
    *(_QWORD *)(v4 + 304) = a2[38];
    *(_QWORD *)(v4 + 312) = v13;
    v14 = a2[41];
    *(_QWORD *)(v4 + 320) = a2[40];
    *(_QWORD *)(v4 + 328) = v14;
    v29 = a2[43];
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    if (v29)
    {
      *(_QWORD *)(v4 + 336) = a2[42];
      *(_QWORD *)(v4 + 344) = v29;
      v15 = a2[45];
      *(_QWORD *)(v4 + 352) = a2[44];
      *(_QWORD *)(v4 + 360) = v15;
      *(_DWORD *)(v4 + 368) = *((_DWORD *)a2 + 92);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 22);
      *(_OWORD *)(v4 + 336) = *((_OWORD *)a2 + 21);
      *(_OWORD *)(v4 + 352) = v17;
      *(_DWORD *)(v4 + 368) = *((_DWORD *)a2 + 92);
    }
    *(_WORD *)(v4 + 376) = *((_WORD *)a2 + 188);
    v18 = a2[49];
    *(_QWORD *)(v4 + 384) = a2[48];
    *(_QWORD *)(v4 + 392) = v18;
    *(_BYTE *)(v4 + 400) = *((_BYTE *)a2 + 400);
    v19 = *(int *)(a3 + 44);
    v20 = v4 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for EventData(0);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_bridgeObjectRetain(v18);
    v23(v20, v21, v22);
    v24 = *(int *)(a3 + 48);
    v25 = v4 + v24;
    v26 = (uint64_t)a2 + v24;
    v27 = type metadata accessor for TimedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return v4;
}

uint64_t destroy for BrickExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[32]);
  swift_bridgeObjectRelease(a1[34]);
  swift_bridgeObjectRelease(a1[37]);
  swift_bridgeObjectRelease(a1[39]);
  swift_bridgeObjectRelease(a1[41]);
  v4 = a1[43];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[45]);
  }
  swift_bridgeObjectRelease(a1[49]);
  v5 = (char *)a1 + *(int *)(a2 + 44);
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(a2 + 48);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for BrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v37 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v37;
  v36 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v36;
  v35 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v35;
  v34 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v34;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v33 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v33;
  v32 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v32;
  v31 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v31;
  v30 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v30;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v6;
  v7 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v7;
  v8 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v8;
  v29 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v29;
  v28 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v28;
  v9 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v9;
  v10 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v10;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  v11 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v11;
  v12 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v12;
  v13 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v13;
  v27 = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  if (v27)
  {
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v27;
    v14 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = v14;
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v15;
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  }
  *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
  v16 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v16;
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  v17 = *(int *)(a3 + 44);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain(v16);
  v21(v18, v19, v20);
  v22 = *(int *)(a3 + 48);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  return a1;
}

uint64_t assignWithCopy for BrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  uint64_t v42;
  BAEventReporter *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  int v51;
  uint64_t v52;
  BAEventReporter *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  uint64_t v61;
  BAEventReporter *v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  uint64_t v70;
  BAEventReporter *v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  uint64_t v79;
  BAEventReporter *v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  int64_t v85;
  int64_t v86;
  id v87;
  uint64_t v88;
  BAEventReporter *v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  int64_t v94;
  int64_t v95;
  id v96;
  uint64_t v97;
  BAEventReporter *v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  int64_t v103;
  int64_t v104;
  id v105;
  uint64_t v106;
  BAEventReporter *v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  int64_t v112;
  int64_t v113;
  id v114;
  uint64_t v115;
  BAEventReporter *v116;
  SEL v117;
  id v118;
  id v119;
  id v120;
  int64_t v121;
  int64_t v122;
  id v123;
  uint64_t v124;
  BAEventReporter *v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  int64_t v130;
  int64_t v131;
  id v132;
  uint64_t v133;
  BAEventReporter *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  int64_t v139;
  int64_t v140;
  id v141;
  uint64_t v142;
  BAEventReporter *v143;
  SEL v144;
  id v145;
  id v146;
  id v147;
  int64_t v148;
  int64_t v149;
  id v150;
  uint64_t v151;
  BAEventReporter *v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  int64_t v157;
  int64_t v158;
  id v159;
  uint64_t v160;
  BAEventReporter *v161;
  SEL v162;
  id v163;
  id v164;
  id v165;
  int64_t v166;
  int64_t v167;
  id v168;
  uint64_t v169;
  BAEventReporter *v170;
  SEL v171;
  id v172;
  id v173;
  id v174;
  int64_t v175;
  int64_t v176;
  id v177;
  _OWORD *v178;
  _OWORD *v179;
  BAEventReporter *v180;
  uint64_t v181;
  uint64_t v182;
  SEL v183;
  id v184;
  id v185;
  id v186;
  int64_t v187;
  int64_t v188;
  id v189;
  uint64_t v190;
  BAEventReporter *v191;
  SEL v192;
  id v193;
  id v194;
  id v195;
  int64_t v196;
  int64_t v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  BAEventReporter *v206;
  SEL v207;
  id v208;
  id v209;
  id v210;
  int64_t v211;
  int64_t v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(BAEventReporter **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  v51 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v51;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v52 = *(_QWORD *)(a2 + 104);
  v53 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v61 = *(_QWORD *)(a2 + 120);
  v62 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v70 = *(_QWORD *)(a2 + 136);
  v71 = *(BAEventReporter **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v79 = *(_QWORD *)(a2 + 152);
  v80 = *(BAEventReporter **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v88 = *(_QWORD *)(a2 + 176);
  v89 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease(v89, v90, v91, v92, v93, v94, v95, v96);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v97 = *(_QWORD *)(a2 + 192);
  v98 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98, v99, v100, v101, v102, v103, v104, v105);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v106 = *(_QWORD *)(a2 + 208);
  v107 = *(BAEventReporter **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v106;
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRelease(v107, v108, v109, v110, v111, v112, v113, v114);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v115 = *(_QWORD *)(a2 + 224);
  v116 = *(BAEventReporter **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v115;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRelease(v116, v117, v118, v119, v120, v121, v122, v123);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v124 = *(_QWORD *)(a2 + 240);
  v125 = *(BAEventReporter **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125, v126, v127, v128, v129, v130, v131, v132);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v133 = *(_QWORD *)(a2 + 256);
  v134 = *(BAEventReporter **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v142 = *(_QWORD *)(a2 + 272);
  v143 = *(BAEventReporter **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v142;
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRelease(v143, v144, v145, v146, v147, v148, v149, v150);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v151 = *(_QWORD *)(a2 + 296);
  v152 = *(BAEventReporter **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v151;
  swift_bridgeObjectRetain(v151);
  swift_bridgeObjectRelease(v152, v153, v154, v155, v156, v157, v158, v159);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v160 = *(_QWORD *)(a2 + 312);
  v161 = *(BAEventReporter **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v160;
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRelease(v161, v162, v163, v164, v165, v166, v167, v168);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v169 = *(_QWORD *)(a2 + 328);
  v170 = *(BAEventReporter **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v169;
  swift_bridgeObjectRetain(v169);
  swift_bridgeObjectRelease(v170, v171, v172, v173, v174, v175, v176, v177);
  v178 = (_OWORD *)(a1 + 336);
  v179 = (_OWORD *)(a2 + 336);
  v180 = *(BAEventReporter **)(a1 + 344);
  v181 = *(_QWORD *)(a2 + 344);
  if (v180)
  {
    if (v181)
    {
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      v182 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 344) = v182;
      swift_bridgeObjectRetain(v182);
      swift_bridgeObjectRelease(v180, v183, v184, v185, v186, v187, v188, v189);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      v190 = *(_QWORD *)(a2 + 360);
      v191 = *(BAEventReporter **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = v190;
      swift_bridgeObjectRetain(v190);
      swift_bridgeObjectRelease(v191, v192, v193, v194, v195, v196, v197, v198);
      *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    }
    else
    {
      sub_39158(a1 + 336);
      v201 = *(_DWORD *)(a2 + 368);
      v202 = *(_OWORD *)(a2 + 352);
      *v178 = *v179;
      *(_OWORD *)(a1 + 352) = v202;
      *(_DWORD *)(a1 + 368) = v201;
    }
  }
  else if (v181)
  {
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    v199 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 344) = v199;
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    v200 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 360) = v200;
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    swift_bridgeObjectRetain(v199);
    swift_bridgeObjectRetain(v200);
  }
  else
  {
    v203 = *v179;
    v204 = *(_OWORD *)(a2 + 352);
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    *v178 = v203;
    *(_OWORD *)(a1 + 352) = v204;
  }
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_BYTE *)(a1 + 377) = *(_BYTE *)(a2 + 377);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v205 = *(_QWORD *)(a2 + 392);
  v206 = *(BAEventReporter **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v205;
  swift_bridgeObjectRetain(v205);
  swift_bridgeObjectRelease(v206, v207, v208, v209, v210, v211, v212, v213);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  v214 = *(int *)(a3 + 44);
  v215 = a1 + v214;
  v216 = a2 + v214;
  v217 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v217 - 8) + 24))(v215, v216, v217);
  v218 = *(int *)(a3 + 48);
  v219 = a1 + v218;
  v220 = a2 + v218;
  v221 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v221 - 8) + 24))(v219, v220, v221);
  return a1;
}

uint64_t initializeWithTake for BrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = *(_OWORD *)(a2 + 192);
  v14 = *(_OWORD *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 224);
  v16 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v14;
  v17 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v17;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v18 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v18;
  v19 = *(_OWORD *)(a2 + 336);
  v20 = *(_OWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  v21 = *(_OWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = v21;
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  v22 = *(int *)(a3 + 44);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_OWORD *)(a1 + 336) = v19;
  *(_OWORD *)(a1 + 352) = v20;
  v25 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  v26 = *(int *)(a3 + 48);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  return a1;
}

uint64_t assignWithTake for BrickExposureEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  uint64_t v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  uint64_t v85;
  BAEventReporter *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  BAEventReporter *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;
  uint64_t v103;
  BAEventReporter *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  BAEventReporter *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  int64_t v118;
  int64_t v119;
  id v120;
  uint64_t v121;
  BAEventReporter *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  int64_t v127;
  int64_t v128;
  id v129;
  uint64_t v130;
  BAEventReporter *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  int64_t v136;
  int64_t v137;
  id v138;
  uint64_t v139;
  BAEventReporter *v140;
  SEL v141;
  id v142;
  id v143;
  id v144;
  int64_t v145;
  int64_t v146;
  id v147;
  uint64_t v148;
  BAEventReporter *v149;
  SEL v150;
  id v151;
  id v152;
  id v153;
  int64_t v154;
  int64_t v155;
  id v156;
  uint64_t v157;
  BAEventReporter *v158;
  SEL v159;
  id v160;
  id v161;
  id v162;
  int64_t v163;
  int64_t v164;
  id v165;
  uint64_t v166;
  BAEventReporter *v167;
  SEL v168;
  id v169;
  id v170;
  id v171;
  int64_t v172;
  int64_t v173;
  id v174;
  const char *v175;
  void *v176;
  void *v177;
  void *v178;
  int64_t v179;
  int64_t v180;
  void *v181;
  BAEventReporter *v182;
  uint64_t v183;
  uint64_t v184;
  BAEventReporter *v185;
  SEL v186;
  id v187;
  id v188;
  id v189;
  int64_t v190;
  int64_t v191;
  id v192;
  __int128 v193;
  uint64_t v194;
  BAEventReporter *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(BAEventReporter **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v49 = *(_QWORD *)(a2 + 104);
  v50 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v49;
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  v58 = *(_QWORD *)(a2 + 120);
  v59 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v58;
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  v67 = *(_QWORD *)(a2 + 136);
  v68 = *(BAEventReporter **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v67;
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  v76 = *(_QWORD *)(a2 + 152);
  v77 = *(BAEventReporter **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v76;
  swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v85 = *(_QWORD *)(a2 + 176);
  v86 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v85;
  swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
  v94 = *(_QWORD *)(a2 + 192);
  v95 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v94;
  swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
  v103 = *(_QWORD *)(a2 + 208);
  v104 = *(BAEventReporter **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v103;
  swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
  v112 = *(_QWORD *)(a2 + 224);
  v113 = *(BAEventReporter **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v112;
  swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
  v121 = *(_QWORD *)(a2 + 240);
  v122 = *(BAEventReporter **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v121;
  swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
  v130 = *(_QWORD *)(a2 + 256);
  v131 = *(BAEventReporter **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v130;
  swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
  v139 = *(_QWORD *)(a2 + 272);
  v140 = *(BAEventReporter **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v139;
  swift_bridgeObjectRelease(v140, v141, v142, v143, v144, v145, v146, v147);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  v148 = *(_QWORD *)(a2 + 296);
  v149 = *(BAEventReporter **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v148;
  swift_bridgeObjectRelease(v149, v150, v151, v152, v153, v154, v155, v156);
  v157 = *(_QWORD *)(a2 + 312);
  v158 = *(BAEventReporter **)(a1 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v157;
  swift_bridgeObjectRelease(v158, v159, v160, v161, v162, v163, v164, v165);
  v166 = *(_QWORD *)(a2 + 328);
  v167 = *(BAEventReporter **)(a1 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v166;
  swift_bridgeObjectRelease(v167, v168, v169, v170, v171, v172, v173, v174);
  v182 = *(BAEventReporter **)(a1 + 344);
  if (!v182)
    goto LABEL_5;
  v183 = *(_QWORD *)(a2 + 344);
  if (!v183)
  {
    sub_39158(a1 + 336);
LABEL_5:
    v193 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v193;
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v183;
  swift_bridgeObjectRelease(v182, v175, v176, v177, v178, v179, v180, v181);
  v184 = *(_QWORD *)(a2 + 360);
  v185 = *(BAEventReporter **)(a1 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v184;
  swift_bridgeObjectRelease(v185, v186, v187, v188, v189, v190, v191, v192);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
LABEL_6:
  *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
  v194 = *(_QWORD *)(a2 + 392);
  v195 = *(BAEventReporter **)(a1 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v194;
  swift_bridgeObjectRelease(v195, v175, v176, v177, v178, v179, v180, v181);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  v196 = a3[11];
  v197 = a1 + v196;
  v198 = a2 + v196;
  v199 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v199 - 8) + 40))(v197, v198, v199);
  v200 = a3[12];
  v201 = a1 + v200;
  v202 = a2 + v200;
  v203 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v203 - 8) + 40))(v201, v202, v203);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A9CE0);
}

uint64_t sub_1A9CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 44);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BrickExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A9D8C);
}

uint64_t sub_1A9D8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1A9E28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  v5[0] = "p";
  v5[1] = &unk_215B28;
  v5[2] = &unk_215B40;
  v5[3] = &unk_215B58;
  v5[4] = &unk_215B70;
  v5[5] = &unk_215B88;
  v5[6] = &unk_215BA0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[7] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[8] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrickExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1A9F40 + 4 * byte_2159EE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1A9F74 + 4 * byte_2159E9[v4]))();
}

uint64_t sub_1A9F74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9F84);
  return result;
}

uint64_t sub_1A9F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9F98);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1A9F9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9FA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrickExposureEvent.Model.CodingKeys()
{
  return &type metadata for BrickExposureEvent.Model.CodingKeys;
}

unint64_t sub_1A9FC4()
{
  unint64_t result;

  result = qword_2A5730;
  if (!qword_2A5730)
  {
    result = swift_getWitnessTable(byte_215C54, &type metadata for BrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5730);
  }
  return result;
}

unint64_t sub_1AA00C()
{
  unint64_t result;

  result = qword_2A5738;
  if (!qword_2A5738)
  {
    result = swift_getWitnessTable(byte_215BC4, &type metadata for BrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5738);
  }
  return result;
}

unint64_t sub_1AA054()
{
  unint64_t result;

  result = qword_2A5740;
  if (!qword_2A5740)
  {
    result = swift_getWitnessTable(byte_215BEC, &type metadata for BrickExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5740);
  }
  return result;
}

uint64_t sub_1AA098(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7461446B63697262 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446B63697262, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746144616964656DLL && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144616964656DLL, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v12 = 0xEE00617461446E6FLL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v13 = 0xE900000000000061;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_1AA4AC()
{
  return 0x65707954626174;
}

uint64_t sub_1AA4C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65707954626174 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65707954626174, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1AA558(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1AA6A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1AA580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1AA6A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A5748);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1AA6A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TabData.CodingKeys, &type metadata for TabData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1AA6E8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for TabType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1AA6A4()
{
  unint64_t result;

  result = qword_2A5750;
  if (!qword_2A5750)
  {
    result = swift_getWitnessTable(byte_215E6C, &type metadata for TabData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5750);
  }
  return result;
}

unint64_t sub_1AA6E8()
{
  unint64_t result;

  result = qword_2A5758;
  if (!qword_2A5758)
  {
    result = swift_getWitnessTable("iO\a", &type metadata for TabType);
    atomic_store(result, (unint64_t *)&qword_2A5758);
  }
  return result;
}

uint64_t TabData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A5760);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1AA6A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TabData.CodingKeys, &type metadata for TabData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1AA848();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for TabType, v13, v5, &type metadata for TabType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_1AA848()
{
  unint64_t result;

  result = qword_2A5768;
  if (!qword_2A5768)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TabType, &type metadata for TabType);
    atomic_store(result, (unint64_t *)&qword_2A5768);
  }
  return result;
}

unint64_t sub_1AA890()
{
  unint64_t result;

  result = qword_2A5770;
  if (!qword_2A5770)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TabData, &type metadata for TabData);
    atomic_store(result, (unint64_t *)&qword_2A5770);
  }
  return result;
}

unint64_t sub_1AA8D8()
{
  unint64_t result;

  result = qword_2A5778;
  if (!qword_2A5778)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TabData, &type metadata for TabData);
    atomic_store(result, (unint64_t *)&qword_2A5778);
  }
  return result;
}

uint64_t sub_1AA91C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return TabData.init(from:)(a1, a2);
}

uint64_t sub_1AA930(_QWORD *a1)
{
  return TabData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for TabData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1AA990 + 4 * byte_215CD1[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1AA9C4 + 4 * byte_215CCC[v4]))();
}

uint64_t sub_1AA9C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AA9CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AA9D4);
  return result;
}

uint64_t sub_1AA9E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AA9E8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1AA9EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AA9F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabData()
{
  return &type metadata for TabData;
}

uint64_t storeEnumTagSinglePayload for TabData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AAA50 + 4 * byte_215CD6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AAA70 + 4 * byte_215CDB[v4]))();
}

_BYTE *sub_1AAA50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AAA70(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AAA78(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AAA80(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AAA88(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AAA90(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TabData.CodingKeys()
{
  return &type metadata for TabData.CodingKeys;
}

unint64_t sub_1AAAB0()
{
  unint64_t result;

  result = qword_2A5780;
  if (!qword_2A5780)
  {
    result = swift_getWitnessTable(aE_15, &type metadata for TabData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5780);
  }
  return result;
}

unint64_t sub_1AAAF8()
{
  unint64_t result;

  result = qword_2A5788;
  if (!qword_2A5788)
  {
    result = swift_getWitnessTable(asc_215DB4, &type metadata for TabData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5788);
  }
  return result;
}

unint64_t sub_1AAB40()
{
  unint64_t result;

  result = qword_2A5790;
  if (!qword_2A5790)
  {
    result = swift_getWitnessTable(asc_215DDC, &type metadata for TabData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5790);
  }
  return result;
}

BookAnalytics::SortType_optional __swiftcall SortType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SortType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268D10, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SortType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AAC0C + 4 * byte_215EBC[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1AAC0C()
{
  return 0x746E65636572;
}

uint64_t sub_1AAC20()
{
  return 0x656C746974;
}

uint64_t sub_1AAC34()
{
  return 0x726F68747561;
}

uint64_t sub_1AAC48()
{
  return 0x6C61756E616DLL;
}

unint64_t sub_1AAC60()
{
  unint64_t result;

  result = qword_2A5798;
  if (!qword_2A5798)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortType, &type metadata for SortType);
    atomic_store(result, (unint64_t *)&qword_2A5798);
  }
  return result;
}

void sub_1AACA4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1AACF0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E65636572, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1AAD68()
{
  __asm { BR              X10 }
}

uint64_t sub_1AADA4(uint64_t a1)
{
  String.hash(into:)(a1, 0x746E65636572, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1AAE08(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1AAE50()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E65636572, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

BookAnalytics::SortType_optional sub_1AAEC8(Swift::String *a1)
{
  return SortType.init(rawValue:)(*a1);
}

uint64_t sub_1AAED4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1AAF04 + 4 * byte_215ED0[*v0]))();
}

void sub_1AAF04(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65636572;
  a1[1] = 0xE600000000000000;
}

void sub_1AAF1C(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974;
  a1[1] = 0xE500000000000000;
}

void sub_1AAF34(_QWORD *a1@<X8>)
{
  *a1 = 0x726F68747561;
  a1[1] = 0xE600000000000000;
}

void sub_1AAF4C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C61756E616DLL;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1AAF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1AB0D8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1AAFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1AB0D8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SortType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1AB058 + 4 * byte_215EDA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1AB08C + 4 * byte_215ED5[v4]))();
}

uint64_t sub_1AB08C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AB094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AB09CLL);
  return result;
}

uint64_t sub_1AB0A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AB0B0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1AB0B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AB0BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SortType()
{
  return &type metadata for SortType;
}

unint64_t sub_1AB0D8()
{
  unint64_t result;

  result = qword_2A57A0;
  if (!qword_2A57A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortType, &type metadata for SortType);
    atomic_store(result, (unint64_t *)&qword_2A57A0);
  }
  return result;
}

uint64_t sub_1AB11C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A57A8, &enum case for SessionGroup.default(_:));
}

uint64_t static LibraryViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C48, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A57A8, a1);
}

uint64_t sub_1AB15C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A57C0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static LibraryViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C50, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A57C0, a1);
}

uint64_t LibraryViewEvent.libraryData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_298BA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t LibraryViewEvent.libraryData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_298BA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t LibraryViewEvent.libraryDisplayData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 20);
  v4 = sub_71B4(&qword_2A57D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for LibraryViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A5858, (uint64_t)&nominal type descriptor for LibraryViewEvent);
}

uint64_t LibraryViewEvent.libraryDisplayData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 20);
  v4 = sub_71B4(&qword_2A57D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LibraryViewEvent.libraryDisplayData.modify())()
{
  type metadata accessor for LibraryViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LibraryViewEvent.librarySortData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 24);
  v4 = sub_71B4(&qword_2A57E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LibraryViewEvent.librarySortData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 24);
  v4 = sub_71B4(&qword_2A57E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LibraryViewEvent.librarySortData.modify())()
{
  type metadata accessor for LibraryViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LibraryViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LibraryViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LibraryViewEvent.eventData.modify())()
{
  type metadata accessor for LibraryViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LibraryViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LibraryViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LibraryViewEvent.timedData.modify())()
{
  type metadata accessor for LibraryViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LibraryViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for LibraryViewEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2A57D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_2A57E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t LibraryViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for LibraryViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5908, (uint64_t)&nominal type descriptor for LibraryViewEvent.Model);
}

uint64_t LibraryViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryViewEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LibraryViewEvent.Model.init(libraryData:libraryDisplayData:librarySortData:eventData:timedData:)@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *a2;
  v10 = *a3;
  *(_QWORD *)a6 = *a1;
  *(_BYTE *)(a6 + 8) = v9;
  *(_BYTE *)(a6 + 9) = v10;
  v11 = type metadata accessor for LibraryViewEvent.Model(0);
  v12 = a6 + *(int *)(v11 + 28);
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a4, v13);
  v14 = a6 + *(int *)(v11 + 32);
  v15 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a5, v15);
}

uint64_t sub_1AB790()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AB7C8 + 4 * byte_216000[*v0]))(0x447972617262696CLL, 0xEB00000000617461);
}

unint64_t sub_1AB7C8()
{
  return 0xD000000000000012;
}

uint64_t sub_1AB7E4()
{
  return 0x537972617262696CLL;
}

uint64_t sub_1AB808()
{
  return 0x746144746E657665;
}

uint64_t sub_1AB834@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AD290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AB858(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1ABAF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1AB880(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1ABAF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibraryViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v5 = sub_71B4(&qword_2A57E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1ABAF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibraryViewEvent.Model.CodingKeys, &type metadata for LibraryViewEvent.Model.CodingKeys, v11, v9, v10);
  v24 = *v3;
  HIBYTE(v23) = 0;
  v12 = sub_630D4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, (char *)&v23 + 7, v5, &type metadata for LibraryData, v12);
  if (!v2)
  {
    BYTE6(v23) = *((_BYTE *)v3 + 8);
    BYTE5(v23) = 1;
    v13 = sub_6E0BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)((char *)&v23 + 6, (char *)&v23 + 5, v5, &type metadata for LibraryDisplayData, v13);
    BYTE4(v23) = *((_BYTE *)v3 + 9);
    BYTE3(v23) = 2;
    v14 = sub_EE2D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)((char *)&v23 + 4, (char *)&v23 + 3, v5, &type metadata for LibrarySortData, v14);
    v15 = type metadata accessor for LibraryViewEvent.Model(0);
    v16 = (uint64_t)v3 + *(int *)(v15 + 28);
    BYTE2(v23) = 3;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, (char *)&v23 + 2, v5, v17, v18);
    v19 = (uint64_t)v3 + *(int *)(v15 + 32);
    BYTE1(v23) = 4;
    v20 = type metadata accessor for TimedData(0);
    v21 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, (char *)&v23 + 1, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1ABAF8()
{
  unint64_t result;

  result = qword_2A57F0;
  if (!qword_2A57F0)
  {
    result = swift_getWitnessTable(byte_2161EC, &type metadata for LibraryViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A57F0);
  }
  return result;
}

void LibraryViewEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v29 = a2;
  v32 = type metadata accessor for TimedData(0);
  v28 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v30 = (uint64_t *)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_71B4(&qword_2A57F8);
  v7 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LibraryViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v35 = a1;
  sub_7988(a1, v13);
  v15 = sub_1ABAF8();
  v34 = v9;
  v16 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibraryViewEvent.Model.CodingKeys, &type metadata for LibraryViewEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(v35);
  }
  else
  {
    v36 = v6;
    v17 = v7;
    v19 = v31;
    v18 = v32;
    BYTE3(v40) = 0;
    v20 = sub_635B4();
    v21 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for LibraryData, (char *)&v40 + 3, v33, &type metadata for LibraryData, v20);
    *(_QWORD *)v12 = v41;
    BYTE1(v40) = 1;
    v22 = sub_6E074();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v40 + 2), &type metadata for LibraryDisplayData, (char *)&v40 + 1, v21, &type metadata for LibraryDisplayData, v22);
    v12[8] = BYTE2(v40);
    v39 = 2;
    v23 = sub_EE290();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v40, &type metadata for LibrarySortData, &v39, v21, &type metadata for LibrarySortData, v23);
    v12[9] = v40;
    v38 = 3;
    v24 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v19, &v38, v21, v19, v24);
    (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 32))(&v12[*(int *)(v10 + 28)], v36, v19);
    v37 = 4;
    v25 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v26 = v21;
    v27 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v18, &v37, v26, v18, v25);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v34, v33);
    (*(void (**)(char *, _QWORD *, uint64_t))(v28 + 32))(&v12[*(int *)(v10 + 32)], v27, v18);
    sub_1ABF08((uint64_t)v12, v29);
    sub_7DAC(v35);
    sub_1ABF4C((uint64_t)v12);
  }
}

uint64_t sub_1ABF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LibraryViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ABF4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LibraryViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1ABF88(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  LibraryViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1ABF9C(_QWORD *a1)
{
  return LibraryViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_1ABFB0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C48, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A57A8, (uint64_t)sub_1AB11C, a1);
}

uint64_t sub_1ABFD4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C50, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A57C0, (uint64_t)sub_1AB15C, a1);
}

uint64_t sub_1ABFF8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2A57D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_2A57E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for LibraryViewEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_298BA0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A57D8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A57E0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for LibraryViewEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2A57D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A57E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for LibraryViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A57D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A57E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for LibraryViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A57D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A57E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for LibraryViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A57D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A57E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for LibraryViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A57D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A57E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1AC7B8);
}

uint64_t sub_1AC7B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_298BA0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A57D8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A57E0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for LibraryViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1AC8B8);
}

uint64_t sub_1AC8B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_298BA0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A57D8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A57E0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1AC9B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, &qword_298C50, (uint64_t (*)(void))sub_635B4, (uint64_t (*)(void))sub_630D4, (uint64_t)&type metadata for LibraryData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2A5868, (uint64_t (*)(void))sub_6E074, (uint64_t (*)(void))sub_6E0BC, (uint64_t)&type metadata for LibraryDisplayData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2A5870, (uint64_t (*)(void))sub_EE290, (uint64_t (*)(void))sub_EE2D8, (uint64_t)&type metadata for LibrarySortData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for LibraryViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v8 = *(int *)(a3 + 28);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for EventData(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 32);
    v14 = v7 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = type metadata accessor for TimedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v7;
}

uint64_t destroy for LibraryViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for LibraryViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for EventData(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *assignWithCopy for LibraryViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  v8 = *(int *)(a3 + 28);
  v9 = (uint64_t)a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 32);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for LibraryViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for LibraryViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
  v7 = *(int *)(a3 + 28);
  v8 = (uint64_t)a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = (uint64_t)a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1ACEFC);
}

uint64_t sub_1ACEFC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LibraryViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1ACFA8);
}

char *sub_1ACFA8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1AD044(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = &unk_2160F8;
  v5[2] = &unk_216110;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LibraryViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1AD138 + 4 * byte_21600A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1AD16C + 4 * byte_216005[v4]))();
}

uint64_t sub_1AD16C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AD17CLL);
  return result;
}

uint64_t sub_1AD188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AD190);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1AD194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AD19C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryViewEvent.Model.CodingKeys()
{
  return &type metadata for LibraryViewEvent.Model.CodingKeys;
}

unint64_t sub_1AD1BC()
{
  unint64_t result;

  result = qword_2A5950;
  if (!qword_2A5950)
  {
    result = swift_getWitnessTable(byte_2161C4, &type metadata for LibraryViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5950);
  }
  return result;
}

unint64_t sub_1AD204()
{
  unint64_t result;

  result = qword_2A5958;
  if (!qword_2A5958)
  {
    result = swift_getWitnessTable(byte_216134, &type metadata for LibraryViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5958);
  }
  return result;
}

unint64_t sub_1AD24C()
{
  unint64_t result;

  result = qword_2A5960;
  if (!qword_2A5960)
  {
    result = swift_getWitnessTable(byte_21615C, &type metadata for LibraryViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5960);
  }
  return result;
}

uint64_t sub_1AD290(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x447972617262696CLL && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x447972617262696CLL, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x8000000000222770;
    if (a2 == 0x8000000000222770)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000222770, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x537972617262696CLL && a2 == 0xEF6174614474726FLL)
  {
    v8 = 0xEF6174614474726FLL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x537972617262696CLL, 0xEF6174614474726FLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t SearchSelectionData.selectedResultPosition.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t SearchSelectionData.selectedResultPosition.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

void __swiftcall SearchSelectionData.init(selectedResultString:selectionType:selectedResultSection:selectedResultPosition:resultsReturnedCount:)(BookAnalytics::SearchSelectionData *__return_ptr retstr, Swift::String selectedResultString, BookAnalytics::SelectionType selectionType, BookAnalytics::SelectedResultSection selectedResultSection, Swift::Int32 selectedResultPosition, Swift::String resultsReturnedCount)
{
  BookAnalytics::SelectionType v6;
  BookAnalytics::SelectedResultSection v7;

  v6 = *(_BYTE *)selectionType;
  v7 = *(_BYTE *)selectedResultSection;
  retstr->selectedResultString = selectedResultString;
  retstr->selectionType = v6;
  retstr->selectedResultSection = v7;
  retstr->selectedResultPosition = selectedResultPosition;
  retstr->resultsReturnedCount = resultsReturnedCount;
}

uint64_t sub_1AD52C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1AD564 + 4 * byte_216240[a1]))(0xD000000000000014, 0x8000000000222790);
}

uint64_t sub_1AD564()
{
  return 0x6F697463656C6573;
}

uint64_t sub_1AD588(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1AD5BC()
{
  unsigned __int8 *v0;

  return sub_1AD52C(*v0);
}

uint64_t sub_1AD5C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE0B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AD5E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1ADC84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1AD610(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1ADC84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchSelectionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v3 = sub_71B4(&qword_2A5968);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = *((unsigned __int8 *)v1 + 16);
  v26 = *((unsigned __int8 *)v1 + 17);
  v27 = v9;
  v25 = *((_DWORD *)v1 + 5);
  v10 = v1[3];
  v23 = v1[4];
  v24 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_1ADC84();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchSelectionData.CodingKeys, &type metadata for SearchSelectionData.CodingKeys, v13, v11, v12);
  v35 = 0;
  v14 = v28;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v7, &v35, v3);
  if (!v14)
  {
    v15 = v25;
    v16 = v26;
    v18 = v23;
    v17 = v24;
    v34 = v27;
    v33 = 1;
    v19 = sub_1ADCC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v3, &type metadata for SelectionType, v19);
    v32 = v16;
    v31 = 2;
    v20 = sub_1ADD0C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v31, v3, &type metadata for SelectedResultSection, v20);
    v30 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v30, v3);
    v29 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v29, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void SearchSelectionData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  BAEventReporter *v25;
  BAEventReporter *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  int v37;
  int v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;

  v5 = sub_71B4(&qword_2A5988);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1ADC84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchSelectionData.CodingKeys, &type metadata for SearchSelectionData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    BYTE3(v42) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v42 + 3, v5);
    v14 = v13;
    BYTE1(v42) = 1;
    v15 = sub_1ADD50();
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v42 + 2), &type metadata for SelectionType, (char *)&v42 + 1, v5, &type metadata for SelectionType, v15);
    v38 = BYTE2(v42);
    v41 = 2;
    v16 = sub_1ADD94();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for SelectedResultSection, &v41, v5, &type metadata for SelectedResultSection, v16);
    v37 = v42;
    v40 = 3;
    HIDWORD(v36) = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
    v39 = 4;
    v17 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v5);
    v26 = v25;
    v27 = *(void (**)(char *, uint64_t))(v6 + 8);
    v28 = v17;
    v27(v8, v5);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 16) = v38;
    *(_BYTE *)(a2 + 17) = v37;
    *(_DWORD *)(a2 + 20) = HIDWORD(v36);
    *(_QWORD *)(a2 + 24) = v28;
    *(_QWORD *)(a2 + 32) = v26;
    swift_bridgeObjectRetain(v26);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v26, v29, v30, v31, v32, v33, v34, v35);
    swift_bridgeObjectRelease(v14, v18, v19, v20, v21, v22, v23, v24);
  }
}

void sub_1ADA98(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchSelectionData.init(from:)(a1, a2);
}

uint64_t sub_1ADAAC(_QWORD *a1)
{
  return SearchSelectionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics19SearchSelectionDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BAEventReporter *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BAEventReporter *v24;
  char v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  char v40;
  char v41;
  uint64_t v42;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = *((_BYTE *)a1 + 17);
  v8 = *((_DWORD *)a1 + 5);
  v9 = a1[3];
  v42 = a1[4];
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 20);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  if (v4 == *(_QWORD *)a2 && v5 == v10
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v10, 0), result = 0, (v15 & 1) != 0))
  {
    v17 = 0xE400000000000000;
    v18 = 1802465122;
    if (v6 != 1)
    {
      v18 = 0x6F6F626F69647561;
      v17 = 0xE90000000000006BLL;
    }
    if (v6)
      v19 = v18;
    else
      v19 = 0x6E776F6E6B6E75;
    if (v6)
      v20 = (BAEventReporter *)v17;
    else
      v20 = (BAEventReporter *)0xE700000000000000;
    v21 = 0xE400000000000000;
    v22 = 1802465122;
    if (v11 != 1)
    {
      v22 = 0x6F6F626F69647561;
      v21 = 0xE90000000000006BLL;
    }
    if (v11)
      v23 = v22;
    else
      v23 = 0x6E776F6E6B6E75;
    if (v11)
      v24 = (BAEventReporter *)v21;
    else
      v24 = (BAEventReporter *)0xE700000000000000;
    if (v19 == v23 && v20 == v24)
    {
      swift_bridgeObjectRelease_n(v20, 2);
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v23, v24, 0);
      swift_bridgeObjectRelease(v20, v26, v27, v28, v29, v30, v31, v32);
      swift_bridgeObjectRelease(v24, v33, v34, v35, v36, v37, v38, v39);
      result = 0;
      if ((v25 & 1) == 0)
        return result;
    }
    sub_28440(v7);
    v41 = v40;
    result = 0;
    if ((v41 & 1) != 0 && v8 == v12)
    {
      if (v9 == v13 && v42 == v14)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v9, v42, v13, v14, 0);
    }
  }
  return result;
}

unint64_t sub_1ADC84()
{
  unint64_t result;

  result = qword_2A5970;
  if (!qword_2A5970)
  {
    result = swift_getWitnessTable(byte_2163F8, &type metadata for SearchSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5970);
  }
  return result;
}

unint64_t sub_1ADCC8()
{
  unint64_t result;

  result = qword_2A5978;
  if (!qword_2A5978)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectionType, &type metadata for SelectionType);
    atomic_store(result, (unint64_t *)&qword_2A5978);
  }
  return result;
}

unint64_t sub_1ADD0C()
{
  unint64_t result;

  result = qword_2A5980;
  if (!qword_2A5980)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectedResultSection, &type metadata for SelectedResultSection);
    atomic_store(result, (unint64_t *)&qword_2A5980);
  }
  return result;
}

unint64_t sub_1ADD50()
{
  unint64_t result;

  result = qword_2A5990;
  if (!qword_2A5990)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectionType, &type metadata for SelectionType);
    atomic_store(result, (unint64_t *)&qword_2A5990);
  }
  return result;
}

unint64_t sub_1ADD94()
{
  unint64_t result;

  result = qword_2A5998;
  if (!qword_2A5998)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectedResultSection, &type metadata for SelectedResultSection);
    atomic_store(result, (unint64_t *)&qword_2A5998);
  }
  return result;
}

uint64_t initializeWithCopy for SearchSelectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SearchSelectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for SearchSelectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for SearchSelectionData()
{
  return &type metadata for SearchSelectionData;
}

uint64_t storeEnumTagSinglePayload for SearchSelectionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1ADF60 + 4 * byte_21624A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1ADF94 + 4 * byte_216245[v4]))();
}

uint64_t sub_1ADF94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ADF9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ADFA4);
  return result;
}

uint64_t sub_1ADFB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ADFB8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1ADFBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ADFC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchSelectionData.CodingKeys()
{
  return &type metadata for SearchSelectionData.CodingKeys;
}

unint64_t sub_1ADFE4()
{
  unint64_t result;

  result = qword_2A59A0;
  if (!qword_2A59A0)
  {
    result = swift_getWitnessTable("9\x1B\a", &type metadata for SearchSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A59A0);
  }
  return result;
}

unint64_t sub_1AE02C()
{
  unint64_t result;

  result = qword_2A59A8;
  if (!qword_2A59A8)
  {
    result = swift_getWitnessTable(byte_216340, &type metadata for SearchSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A59A8);
  }
  return result;
}

unint64_t sub_1AE074()
{
  unint64_t result;

  result = qword_2A59B0;
  if (!qword_2A59B0)
  {
    result = swift_getWitnessTable(byte_216368, &type metadata for SearchSelectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A59B0);
  }
  return result;
}

uint64_t sub_1AE0B8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x8000000000222790;
    if (a2 == 0x8000000000222790)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000222790, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6F697463656C6573 && a2 == 0xED0000657079546ELL)
  {
    v6 = 0xED0000657079546ELL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697463656C6573, 0xED0000657079546ELL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000000002227B0)
  {
    v7 = 0x80000000002227B0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000002227B0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000000002227D0)
  {
    v8 = 0x80000000002227D0;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000000002227D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000002227F0)
  {
    swift_bridgeObjectRelease(0x80000000002227F0);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000002227F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1AE2D8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A59B8, &enum case for SessionGroup.default(_:));
}

uint64_t static ClearSearchHistoryEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C58, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A59B8, a1);
}

uint64_t sub_1AE318(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A59D0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ClearSearchHistoryEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C60, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A59D0, a1);
}

uint64_t ClearSearchHistoryEvent.clearedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A59E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ClearSearchHistoryEvent.clearedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A59E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ClearSearchHistoryEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClearSearchHistoryEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ClearSearchHistoryEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A5A70, (uint64_t)&nominal type descriptor for ClearSearchHistoryEvent);
}

uint64_t ClearSearchHistoryEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClearSearchHistoryEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClearSearchHistoryEvent.eventData.modify())()
{
  type metadata accessor for ClearSearchHistoryEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClearSearchHistoryEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_2A59E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for ClearSearchHistoryEvent(0) + 20);
  v5 = enum case for EventProperty.required<A>(_:);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
}

uint64_t ClearSearchHistoryEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClearSearchHistoryEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ClearSearchHistoryEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5B08, (uint64_t)&nominal type descriptor for ClearSearchHistoryEvent.Model);
}

uint64_t ClearSearchHistoryEvent.Model.init(clearedData:eventData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = &a3[*(int *)(type metadata accessor for ClearSearchHistoryEvent.Model(0) + 20)];
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_1AE5DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x4464657261656C63;
}

uint64_t sub_1AE624@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF4A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE648(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1AE7FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1AE670(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1AE7FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClearSearchHistoryEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_2A59F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1AE7FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ClearSearchHistoryEvent.Model.CodingKeys, &type metadata for ClearSearchHistoryEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_1AE840();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v20, &v19, v5, &type metadata for ClearedData, v12);
  if (!v2)
  {
    v13 = &v3[*(int *)(type metadata accessor for ClearSearchHistoryEvent.Model(0) + 20)];
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1AE7FC()
{
  unint64_t result;

  result = qword_2A59F8;
  if (!qword_2A59F8)
  {
    result = swift_getWitnessTable(byte_2165FC, &type metadata for ClearSearchHistoryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A59F8);
  }
  return result;
}

unint64_t sub_1AE840()
{
  unint64_t result;

  result = qword_2A5A00;
  if (!qword_2A5A00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ClearedData, &type metadata for ClearedData);
    atomic_store(result, (unint64_t *)&qword_2A5A00);
  }
  return result;
}

uint64_t ClearSearchHistoryEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_2A5A08);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClearSearchHistoryEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_1AE7FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClearSearchHistoryEvent.Model.CodingKeys, &type metadata for ClearSearchHistoryEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = v8;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_1AEAD8();
    v19 = v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v34, &type metadata for ClearedData, &v33, v31, &type metadata for ClearedData, v18);
    v24 = v14;
    *v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_1AEB1C(v22, v21);
  }
  return sub_7DAC(a1);
}

unint64_t sub_1AEAD8()
{
  unint64_t result;

  result = qword_2A5A10;
  if (!qword_2A5A10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ClearedData, &type metadata for ClearedData);
    atomic_store(result, (unint64_t *)&qword_2A5A10);
  }
  return result;
}

uint64_t sub_1AEB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClearSearchHistoryEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AEB60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ClearSearchHistoryEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1AEB74(_QWORD *a1)
{
  return ClearSearchHistoryEvent.Model.encode(to:)(a1);
}

uint64_t sub_1AEB88@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C58, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A59B8, (uint64_t)sub_1AE2D8, a1);
}

uint64_t sub_1AEBAC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C60, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A59D0, (uint64_t)sub_1AE318, a1);
}

uint64_t sub_1AEBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_2A59E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

uint64_t *initializeBufferWithCopyOfBuffer for ClearSearchHistoryEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_2A59E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for ClearSearchHistoryEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_2A59E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for ClearSearchHistoryEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A59E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for ClearSearchHistoryEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A59E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for ClearSearchHistoryEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A59E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ClearSearchHistoryEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A59E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClearSearchHistoryEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1AEF8C);
}

uint64_t sub_1AEF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_2A59E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ClearSearchHistoryEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1AF014);
}

uint64_t sub_1AF014(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_2A59E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1AF098(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1AF11C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_1AF11C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2A5A80)
  {
    v2 = sub_1AEAD8();
    v3 = sub_1AE840();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for ClearedData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2A5A80);
  }
}

uint64_t getEnumTagSinglePayload for ClearSearchHistoryEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1AF18C);
}

uint64_t sub_1AF18C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 253)
  {
    if (*a1 <= 2u)
      v4 = 2;
    else
      v4 = *a1;
    v5 = v4 - 2;
    if (*a1 >= 2u)
      return v5;
    else
      return 0;
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ClearSearchHistoryEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1AF218);
}

_BYTE *sub_1AF218(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1AF288(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_216520;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClearSearchHistoryEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AF348 + 4 * byte_216455[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AF37C + 4 * byte_216450[v4]))();
}

uint64_t sub_1AF37C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AF38CLL);
  return result;
}

uint64_t sub_1AF398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AF3A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AF3A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF3AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClearSearchHistoryEvent.Model.CodingKeys()
{
  return &type metadata for ClearSearchHistoryEvent.Model.CodingKeys;
}

unint64_t sub_1AF3CC()
{
  unint64_t result;

  result = qword_2A5B40;
  if (!qword_2A5B40)
  {
    result = swift_getWitnessTable(byte_2165D4, &type metadata for ClearSearchHistoryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5B40);
  }
  return result;
}

unint64_t sub_1AF414()
{
  unint64_t result;

  result = qword_2A5B48;
  if (!qword_2A5B48)
  {
    result = swift_getWitnessTable("E\x1B\a", &type metadata for ClearSearchHistoryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5B48);
  }
  return result;
}

unint64_t sub_1AF45C()
{
  unint64_t result;

  result = qword_2A5B50;
  if (!qword_2A5B50)
  {
    result = swift_getWitnessTable("-\x1B\a", &type metadata for ClearSearchHistoryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5B50);
  }
  return result;
}

uint64_t sub_1AF4A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x4464657261656C63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4464657261656C63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AF5B8()
{
  return 0x6E72755465676170;
}

uint64_t sub_1AF5D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E72755465676170 && a2 == 0xEC00000065707954)
  {
    result = swift_bridgeObjectRelease(0xEC00000065707954);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E72755465676170, 0xEC00000065707954, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1AF684(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1AF9F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1AF6AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1AF9F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageTurnFeatureData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A5B58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1AF9F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageTurnFeatureData.CodingKeys, &type metadata for PageTurnFeatureData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1AFA38();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for PageTurnType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PageTurnFeatureData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A5B70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1AF9F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageTurnFeatureData.CodingKeys, &type metadata for PageTurnFeatureData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1AFA7C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for PageTurnType, v13, v5, &type metadata for PageTurnType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1AF8EC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return PageTurnFeatureData.init(from:)(a1, a2);
}

uint64_t sub_1AF900(_QWORD *a1)
{
  return PageTurnFeatureData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics19PageTurnFeatureDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = 1819440483;
  if (v2 != 1)
    v3 = 1701736302;
  if (*a1)
    v4 = v3;
  else
    v4 = 0x6564696C73;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = 1819440483;
  if (*a2 != 1)
    v6 = 1701736302;
  if (*a2)
    v7 = v6;
  else
    v7 = 0x6564696C73;
  if (*a2)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  if (v4 == v7 && v5 == v8)
  {
    v9 = 1;
    v8 = v5;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

unint64_t sub_1AF9F4()
{
  unint64_t result;

  result = qword_2A5B60;
  if (!qword_2A5B60)
  {
    result = swift_getWitnessTable(byte_2167F8, &type metadata for PageTurnFeatureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5B60);
  }
  return result;
}

unint64_t sub_1AFA38()
{
  unint64_t result;

  result = qword_2A5B68;
  if (!qword_2A5B68)
  {
    result = swift_getWitnessTable("a[\a", &type metadata for PageTurnType);
    atomic_store(result, (unint64_t *)&qword_2A5B68);
  }
  return result;
}

unint64_t sub_1AFA7C()
{
  unint64_t result;

  result = qword_2A5B78;
  if (!qword_2A5B78)
  {
    result = swift_getWitnessTable("y[\a", &type metadata for PageTurnType);
    atomic_store(result, (unint64_t *)&qword_2A5B78);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PageTurnFeatureData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AFB14 + 4 * byte_216655[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AFB48 + 4 * byte_216650[v4]))();
}

uint64_t sub_1AFB48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AFB50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AFB58);
  return result;
}

uint64_t sub_1AFB64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AFB6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AFB70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AFB78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageTurnFeatureData()
{
  return &type metadata for PageTurnFeatureData;
}

uint64_t storeEnumTagSinglePayload for PageTurnFeatureData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AFBD4 + 4 * byte_21665A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AFBF4 + 4 * byte_21665F[v4]))();
}

_BYTE *sub_1AFBD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AFBF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AFBFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AFC04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AFC0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AFC14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PageTurnFeatureData.CodingKeys()
{
  return &type metadata for PageTurnFeatureData.CodingKeys;
}

unint64_t sub_1AFC34()
{
  unint64_t result;

  result = qword_2A5B80;
  if (!qword_2A5B80)
  {
    result = swift_getWitnessTable(byte_2167D0, &type metadata for PageTurnFeatureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5B80);
  }
  return result;
}

unint64_t sub_1AFC7C()
{
  unint64_t result;

  result = qword_2A5B88;
  if (!qword_2A5B88)
  {
    result = swift_getWitnessTable("A\x1B\a", &type metadata for PageTurnFeatureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5B88);
  }
  return result;
}

unint64_t sub_1AFCC4()
{
  unint64_t result;

  result = qword_2A5B90;
  if (!qword_2A5B90)
  {
    result = swift_getWitnessTable(")\x1B\a", &type metadata for PageTurnFeatureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5B90);
  }
  return result;
}

uint64_t sub_1AFD08(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A5B98, &enum case for SessionGroup.default(_:));
}

uint64_t static RedownloadAttemptEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C68, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5B98, a1);
}

uint64_t sub_1AFD48(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A5BB0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RedownloadAttemptEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C70, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5BB0, a1);
}

uint64_t RedownloadAttemptEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RedownloadAttemptEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5C38, (uint64_t)&nominal type descriptor for RedownloadAttemptEvent);
}

uint64_t RedownloadAttemptEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadAttemptEvent.contentStoreData.modify())()
{
  type metadata accessor for RedownloadAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadAttemptEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadAttemptEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadAttemptEvent.sectionData.modify())()
{
  type metadata accessor for RedownloadAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadAttemptEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RedownloadAttemptEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RedownloadAttemptEvent.eventData.modify())()
{
  type metadata accessor for RedownloadAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RedownloadAttemptEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RedownloadAttemptEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t RedownloadAttemptEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RedownloadAttemptEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RedownloadAttemptEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5CD0, (uint64_t)&nominal type descriptor for RedownloadAttemptEvent.Model);
}

uint64_t RedownloadAttemptEvent.Model.init(contentData:contentStoreData:sectionData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v7;
  *(_BYTE *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 24) = v9;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v11;
  *(_WORD *)(a5 + 56) = v12;
  *(_DWORD *)(a5 + 60) = v13;
  *(_BYTE *)(a5 + 64) = v14;
  *(_DWORD *)(a5 + 68) = v15;
  *(_BYTE *)(a5 + 72) = v16;
  v17 = *(_DWORD *)(a1 + 73);
  v18 = *a2;
  v19 = a2[1];
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 96) = v18;
  v20 = a2[2];
  v21 = a2[3];
  *(_OWORD *)(a5 + 112) = v19;
  *(_OWORD *)(a5 + 128) = v20;
  *(_OWORD *)(a5 + 144) = v21;
  v22 = a3[1];
  *(_OWORD *)(a5 + 168) = *a3;
  *(_OWORD *)(a5 + 184) = v22;
  v23 = a3[3];
  *(_OWORD *)(a5 + 200) = a3[2];
  *(_OWORD *)(a5 + 216) = v23;
  v24 = a3[5];
  *(_OWORD *)(a5 + 232) = a3[4];
  v25 = *(_BYTE *)(a1 + 77);
  LODWORD(v10) = *((_DWORD *)a2 + 16);
  LOBYTE(v11) = *((_BYTE *)a2 + 68);
  *(_DWORD *)(a5 + 73) = v17;
  *(_BYTE *)(a5 + 77) = v25;
  *(_BYTE *)(a5 + 164) = v11;
  *(_DWORD *)(a5 + 160) = v10;
  *(_OWORD *)(a5 + 248) = v24;
  *(_OWORD *)(a5 + 264) = a3[6];
  v26 = a5 + *(int *)(type metadata accessor for RedownloadAttemptEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_1B0228()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B0260 + 4 * byte_216850[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_1B0260()
{
  return 0xD000000000000010;
}

uint64_t sub_1B027C()
{
  return 0x446E6F6974636573;
}

uint64_t sub_1B0290()
{
  return 0x746144746E657665;
}

uint64_t sub_1B02AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B056C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B02D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B056C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RedownloadAttemptEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A5BC8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1B056C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RedownloadAttemptEvent.Model.CodingKeys, &type metadata for RedownloadAttemptEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v41 = *(_QWORD *)v4;
  *((_QWORD *)&v41 + 1) = v13;
  v42[0] = v14;
  *(_OWORD *)&v42[8] = v15;
  *(_QWORD *)&v42[24] = v16;
  *(_QWORD *)&v43 = v17;
  WORD4(v43) = v18;
  HIDWORD(v43) = v19;
  LOBYTE(v44) = v20;
  DWORD1(v44) = v21;
  BYTE8(v44) = v22;
  *(_DWORD *)((char *)&v44 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v44) = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v47 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v41 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v42 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 128);
    v43 = v28;
    BYTE4(v44) = v26;
    LODWORD(v44) = v25;
    v47 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_OWORD *)(v4 + 184);
    v31 = *(_OWORD *)(v4 + 200);
    v41 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v42 = v30;
    v32 = *(_OWORD *)(v4 + 216);
    v33 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)&v42[16] = v31;
    v43 = v32;
    v34 = *(_OWORD *)(v4 + 248);
    v35 = *(_OWORD *)(v4 + 264);
    v44 = v33;
    v45 = v34;
    v46 = v35;
    v47 = 2;
    v36 = sub_1B768();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for SectionData, v36);
    v37 = v4 + *(int *)(type metadata accessor for RedownloadAttemptEvent.Model(0) + 28);
    LOBYTE(v41) = 3;
    v38 = type metadata accessor for EventData(0);
    v39 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v37, &v41, v6, v38, v39);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1B056C()
{
  unint64_t result;

  result = qword_2A5BD0;
  if (!qword_2A5BD0)
  {
    result = swift_getWitnessTable(byte_216A4C, &type metadata for RedownloadAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5BD0);
  }
  return result;
}

void RedownloadAttemptEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_2A5BD8);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RedownloadAttemptEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_1B056C();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RedownloadAttemptEvent.Model.CodingKeys, &type metadata for RedownloadAttemptEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v53 = v9;
    v16 = v6;
    v17 = v5;
    v18 = v3;
    v19 = v49;
    v60 = 0;
    v20 = sub_1779C();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v60, v51, &type metadata for ContentData, v20);
    v23 = *((_QWORD *)&v54 + 1);
    v24 = v55[0];
    v25 = *(_OWORD *)&v55[8];
    v26 = *(_QWORD *)&v55[24];
    v27 = v56;
    v28 = WORD4(v56);
    v29 = HIDWORD(v56);
    v30 = v57;
    v31 = DWORD1(v57);
    v32 = BYTE8(v57);
    v33 = BYTE13(v57);
    *(_QWORD *)v11 = v54;
    *((_QWORD *)v11 + 1) = v23;
    v11[16] = v24;
    *(_OWORD *)(v11 + 24) = v25;
    *((_QWORD *)v11 + 5) = v26;
    *((_QWORD *)v11 + 6) = v27;
    *((_WORD *)v11 + 28) = v28;
    *((_DWORD *)v11 + 15) = v29;
    v11[64] = v30;
    *((_DWORD *)v11 + 17) = v31;
    v11[72] = v32;
    *(_DWORD *)(v11 + 73) = *(_DWORD *)((char *)&v57 + 9);
    v11[77] = v33;
    *((_OWORD *)v11 + 5) = v58;
    v60 = 1;
    v34 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, &type metadata for ContentStoreData, &v60, v22, &type metadata for ContentStoreData, v34);
    v35 = v57;
    v36 = BYTE4(v57);
    v37 = *(_OWORD *)v55;
    *((_OWORD *)v11 + 6) = v54;
    *((_OWORD *)v11 + 7) = v37;
    v38 = v56;
    *((_OWORD *)v11 + 8) = *(_OWORD *)&v55[16];
    *((_OWORD *)v11 + 9) = v38;
    v11[164] = v36;
    *((_DWORD *)v11 + 40) = v35;
    v60 = 2;
    v39 = sub_1BFE4();
    v47[1] = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, &type metadata for SectionData, &v60, v22, &type metadata for SectionData, v39);
    v40 = *(_OWORD *)v55;
    *(_OWORD *)(v11 + 168) = v54;
    v41 = *(_OWORD *)&v55[16];
    v42 = v56;
    *(_OWORD *)(v11 + 184) = v40;
    *(_OWORD *)(v11 + 200) = v41;
    v43 = v57;
    v44 = v58;
    *(_OWORD *)(v11 + 216) = v42;
    *(_OWORD *)(v11 + 232) = v43;
    v45 = v59;
    *(_OWORD *)(v11 + 248) = v44;
    *(_OWORD *)(v11 + 264) = v45;
    LOBYTE(v54) = 3;
    v46 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v19, &v54, v22, v19, v46);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v51);
    (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v11[*(int *)(v53 + 28)], v17, v19);
    sub_1B09F8((uint64_t)v11, v48);
    sub_7DAC(v52);
    sub_1B0A3C((uint64_t)v11);
  }
}

uint64_t sub_1B09F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RedownloadAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0A3C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RedownloadAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B0A78(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RedownloadAttemptEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1B0A8C(_QWORD *a1)
{
  return RedownloadAttemptEvent.Model.encode(to:)(a1);
}

uint64_t sub_1B0AA0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C68, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5B98, (uint64_t)sub_1AFD08, a1);
}

uint64_t sub_1B0AC4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C70, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5BB0, (uint64_t)sub_1AFD48, a1);
}

uint64_t getEnumTagSinglePayload for RedownloadAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B0AF4);
}

uint64_t sub_1B0AF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RedownloadAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B0BCC);
}

uint64_t sub_1B0BCC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for RedownloadAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B0CAC);
}

uint64_t sub_1B0CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RedownloadAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B0D34);
}

uint64_t sub_1B0D34(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1B0DA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_216958;
  v4[2] = &unk_216970;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RedownloadAttemptEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0E7C + 4 * byte_216859[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0EB0 + 4 * byte_216854[v4]))();
}

uint64_t sub_1B0EB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0EB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0EC0);
  return result;
}

uint64_t sub_1B0ECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0ED4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0ED8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0EE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RedownloadAttemptEvent.Model.CodingKeys()
{
  return &type metadata for RedownloadAttemptEvent.Model.CodingKeys;
}

unint64_t sub_1B0F00()
{
  unint64_t result;

  result = qword_2A5D10;
  if (!qword_2A5D10)
  {
    result = swift_getWitnessTable(byte_216A24, &type metadata for RedownloadAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5D10);
  }
  return result;
}

unint64_t sub_1B0F48()
{
  unint64_t result;

  result = qword_2A5D18;
  if (!qword_2A5D18)
  {
    result = swift_getWitnessTable(asc_216994, &type metadata for RedownloadAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5D18);
  }
  return result;
}

unint64_t sub_1B0F90()
{
  unint64_t result;

  result = qword_2A5D20;
  if (!qword_2A5D20)
  {
    result = swift_getWitnessTable(asc_2169BC, &type metadata for RedownloadAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5D20);
  }
  return result;
}

uint64_t sub_1B0FD4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A5D28, &enum case for SessionGroup.default(_:));
}

uint64_t static AuthorExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C78, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5D28, a1);
}

uint64_t sub_1B1014(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A5D40, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AuthorExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C80, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5D40, a1);
}

uint64_t AuthorExposureEvent.authorData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A5D58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AuthorExposureEvent.authorData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A5D58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AuthorExposureEvent.exposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AuthorExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A5DD0, (uint64_t)&nominal type descriptor for AuthorExposureEvent);
}

uint64_t AuthorExposureEvent.exposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AuthorExposureEvent.exposureData.modify())()
{
  type metadata accessor for AuthorExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AuthorExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AuthorExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AuthorExposureEvent.linkData.modify())()
{
  type metadata accessor for AuthorExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AuthorExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AuthorExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AuthorExposureEvent.eventData.modify())()
{
  type metadata accessor for AuthorExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AuthorExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AuthorExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AuthorExposureEvent.timedData.modify())()
{
  type metadata accessor for AuthorExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AuthorExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A5D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for AuthorExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t AuthorExposureEvent.Model.authorData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t AuthorExposureEvent.Model.exposureData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  return sub_40660(v2, v3, v4, v5, v6, v7, v8, v9);
}

_QWORD *AuthorExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[19];

  sub_406FC(v1 + 80, (uint64_t)v4);
  sub_406FC((uint64_t)v4, a1);
  return sub_41240(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AF4C);
}

uint64_t AuthorExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AuthorExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5E78, (uint64_t)&nominal type descriptor for AuthorExposureEvent.Model);
}

uint64_t AuthorExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AuthorExposureEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AuthorExposureEvent.Model.init(authorData:exposureData:linkData:eventData:timedData:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[152];

  v9 = *a1;
  v10 = a1[1];
  v20 = a2[1];
  v21 = *a2;
  v19 = a2[2];
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_QWORD *)a2 + 7);
  sub_406FC(a3, (uint64_t)v22);
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = v10;
  *(_OWORD *)(a6 + 16) = v21;
  *(_OWORD *)(a6 + 32) = v20;
  *(_OWORD *)(a6 + 48) = v19;
  *(_QWORD *)(a6 + 64) = v11;
  *(_QWORD *)(a6 + 72) = v12;
  sub_406FC((uint64_t)v22, a6 + 80);
  v13 = type metadata accessor for AuthorExposureEvent.Model(0);
  v14 = a6 + *(int *)(v13 + 28);
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a4, v15);
  v16 = a6 + *(int *)(v13 + 32);
  v17 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a5, v17);
}

uint64_t sub_1B1710()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1744 + 4 * byte_216AA0[*v0]))(0x6144726F68747561, 0xEA00000000006174);
}

uint64_t sub_1B1744()
{
  return 0x657275736F707865;
}

uint64_t sub_1B1764()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_1B177C()
{
  return 0x746144746E657665;
}

uint64_t sub_1B17A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B3B84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B17CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B1ACC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B17F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B1ACC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AuthorExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[152];
  _QWORD v31[19];
  char v32;
  _OWORD v33[5];
  uint64_t v34;

  v3 = v1;
  v5 = sub_71B4(&qword_2A5D60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1B1ACC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AuthorExposureEvent.Model.CodingKeys, &type metadata for AuthorExposureEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 8);
  v31[0] = *(_QWORD *)v3;
  v31[1] = v12;
  v30[0] = 0;
  v13 = sub_5505C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v31, v30, v5, &type metadata for AuthorData, v13);
  if (v2)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v6;
  v15 = *(_OWORD *)(v3 + 32);
  v33[0] = *(_OWORD *)(v3 + 16);
  v33[1] = v15;
  v16 = *(_OWORD *)(v3 + 64);
  v33[2] = *(_OWORD *)(v3 + 48);
  v33[3] = v16;
  v32 = 1;
  v17 = sub_40CF4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v33, &v32, v5, &type metadata for ExposureData, v17);
  sub_406FC(v3 + 80, (uint64_t)v31);
  sub_406FC((uint64_t)v31, (uint64_t)v30);
  HIBYTE(v29) = 2;
  v18 = sub_1B7F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v30, (char *)&v29 + 7, v5, &type metadata for LinkData, v18);
  v20 = type metadata accessor for AuthorExposureEvent.Model(0);
  v21 = v3 + *(int *)(v20 + 28);
  v30[0] = 3;
  v22 = v5;
  v23 = type metadata accessor for EventData(0);
  v24 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v34 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, v30, v22, v23, v24);
  v25 = v3 + *(int *)(v20 + 32);
  v30[0] = 4;
  v26 = type metadata accessor for TimedData(0);
  v27 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v28 = v34;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25, v30, v34, v26, v27);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v8, v28);
}

unint64_t sub_1B1ACC()
{
  unint64_t result;

  result = qword_2A5D68;
  if (!qword_2A5D68)
  {
    result = swift_getWitnessTable(byte_216CAC, &type metadata for AuthorExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5D68);
  }
  return result;
}

void AuthorExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  _BYTE v46[159];
  char v47;
  _OWORD v48[11];
  uint64_t v49;

  v37 = a2;
  v39 = type metadata accessor for TimedData(0);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (uint64_t *)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v5 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  v42 = v5;
  __chkstk_darwin(v4);
  v40 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_71B4(&qword_2A5D70);
  v7 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AuthorExposureEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_1B1ACC();
  v43 = v9;
  v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AuthorExposureEvent.Model.CodingKeys, &type metadata for AuthorExposureEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(a1);
  }
  else
  {
    v49 = v7;
    v35 = a1;
    v17 = (uint64_t)v12;
    v46[0] = 0;
    v18 = sub_55014();
    v19 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v48, &type metadata for AuthorData, v46, v44, &type metadata for AuthorData, v18);
    v20 = *((_QWORD *)&v48[0] + 1);
    *(_QWORD *)v12 = *(_QWORD *)&v48[0];
    *((_QWORD *)v12 + 1) = v20;
    v46[0] = 1;
    v21 = sub_411FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, &type metadata for ExposureData, v46, v19, &type metadata for ExposureData, v21);
    v22 = v48[1];
    *((_OWORD *)v12 + 1) = v48[0];
    *((_OWORD *)v12 + 2) = v22;
    v23 = v48[3];
    *((_OWORD *)v12 + 3) = v48[2];
    *((_OWORD *)v12 + 4) = v23;
    v47 = 2;
    v24 = sub_1C06C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, &type metadata for LinkData, &v47, v19, &type metadata for LinkData, v24);
    v34 = 0;
    sub_406FC((uint64_t)v48, (uint64_t)v46);
    sub_406FC((uint64_t)v46, (uint64_t)(v12 + 80));
    v45 = 3;
    v25 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v27 = v40;
    v26 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v41, &v45, v19, v41, v25);
    v33 = v10;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v42 + 32))(v17 + *(int *)(v10 + 28), v27, v26);
    v45 = 4;
    v28 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v29 = v19;
    v30 = v38;
    v31 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v39, &v45, v29, v39, v28);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v43, v44);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v36 + 32))(v17 + *(int *)(v33 + 32), v30, v31);
    sub_1B1FAC(v17, v37);
    sub_7DAC(v35);
    sub_1B1FF0(v17);
  }
}

uint64_t sub_1B1FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AuthorExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1FF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AuthorExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B202C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AuthorExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1B2040(_QWORD *a1)
{
  return AuthorExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_1B2054@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C78, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5D28, (uint64_t)sub_1B0FD4, a1);
}

uint64_t sub_1B2078@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C80, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5D40, (uint64_t)sub_1B1014, a1);
}

uint64_t sub_1B209C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A5D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for AuthorExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_2A5D58);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297A28);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for AuthorExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_2A5D58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for AuthorExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2A5D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for AuthorExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2A5D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for AuthorExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2A5D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for AuthorExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2A5D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthorExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B285C);
}

uint64_t sub_1B285C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_2A5D58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297A28);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A10);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AuthorExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B295C);
}

uint64_t sub_1B295C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_2A5D58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297A28);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A10);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1B2A58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&unk_2A5DE0, (uint64_t (*)(void))sub_55014, (uint64_t (*)(void))sub_5505C, (uint64_t)&type metadata for AuthorData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_297AC0, (uint64_t (*)(void))sub_411FC, (uint64_t (*)(void))sub_40CF4, (uint64_t)&type metadata for ExposureData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AuthorExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    swift_bridgeObjectRetain(v7);
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v8;
      v9 = a2[5];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v9;
      v10 = a2[7];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v10;
      v11 = a2[9];
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      v12 = a2[11];
      if (v12)
      {
LABEL_4:
        *(_QWORD *)(a1 + 80) = a2[10];
        *(_QWORD *)(a1 + 88) = v12;
        v13 = a2[13];
        *(_QWORD *)(a1 + 96) = a2[12];
        *(_QWORD *)(a1 + 104) = v13;
        v14 = a2[15];
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v14;
        *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
        v15 = a2[18];
        *(_QWORD *)(a1 + 136) = a2[17];
        *(_QWORD *)(a1 + 144) = v15;
        v16 = a2[20];
        *(_QWORD *)(a1 + 152) = a2[19];
        *(_QWORD *)(a1 + 160) = v16;
        v38 = v6;
        v17 = a2[22];
        *(_QWORD *)(a1 + 168) = a2[21];
        *(_QWORD *)(a1 + 176) = v17;
        v18 = a2[24];
        *(_QWORD *)(a1 + 184) = a2[23];
        *(_QWORD *)(a1 + 192) = v18;
        v19 = a2[26];
        *(_QWORD *)(a1 + 200) = a2[25];
        *(_QWORD *)(a1 + 208) = v19;
        v20 = a2[28];
        *(_QWORD *)(a1 + 216) = a2[27];
        *(_QWORD *)(a1 + 224) = v20;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        v21 = v17;
        v6 = v38;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
LABEL_8:
        v29 = *(int *)(v6 + 28);
        v30 = a1 + v29;
        v31 = (uint64_t)a2 + v29;
        v32 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
        v33 = *(int *)(v6 + 32);
        v34 = a1 + v33;
        v35 = (uint64_t)a2 + v33;
        v36 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        return a1;
      }
    }
    else
    {
      v23 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v23;
      v24 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = v24;
      v12 = a2[11];
      if (v12)
        goto LABEL_4;
    }
    v25 = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
    *(_QWORD *)(a1 + 224) = a2[28];
    v26 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v26;
    v27 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v27;
    v28 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v28;
    goto LABEL_8;
  }
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v22);
  return a1;
}

uint64_t destroy for AuthorExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[3];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
  }
  v5 = a1[11];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[13]);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[20]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
  }
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + *(int *)(a2 + 32);
  v9 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for AuthorExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v6);
  if (!v7)
  {
    v21 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v21;
    v22 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v22;
    v11 = *(_QWORD *)(a2 + 88);
    if (v11)
      goto LABEL_3;
LABEL_5:
    v23 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v24 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v24;
    v25 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v25;
    v26 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v26;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v11 = *(_QWORD *)(a2 + 88);
  if (!v11)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v14;
  v15 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v15;
  v36 = a3;
  v16 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v16;
  v17 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v17;
  v18 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v18;
  v19 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v19;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  v20 = v16;
  a3 = v36;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
LABEL_6:
  v27 = *(int *)(a3 + 28);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = *(int *)(a3 + 32);
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  return a1;
}

uint64_t assignWithCopy for AuthorExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  _OWORD *v15;
  __int128 *v16;
  BAEventReporter *v17;
  uint64_t v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  uint64_t v27;
  BAEventReporter *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  _OWORD *v65;
  BAEventReporter *v66;
  uint64_t v67;
  uint64_t v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  uint64_t v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  uint64_t v85;
  BAEventReporter *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  BAEventReporter *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;
  uint64_t v103;
  BAEventReporter *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  BAEventReporter *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  int64_t v118;
  int64_t v119;
  id v120;
  uint64_t v121;
  BAEventReporter *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  int64_t v127;
  int64_t v128;
  id v129;
  uint64_t v130;
  BAEventReporter *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  int64_t v136;
  int64_t v137;
  id v138;
  uint64_t v139;
  BAEventReporter *v140;
  SEL v141;
  id v142;
  id v143;
  id v144;
  int64_t v145;
  int64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = (_OWORD *)(a1 + 16);
  v16 = (__int128 *)(a2 + 16);
  v17 = *(BAEventReporter **)(a1 + 24);
  v18 = *(_QWORD *)(a2 + 24);
  if (v17)
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v17, v20, v21, v22, v23, v24, v25, v26);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      v28 = *(BAEventReporter **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v36 = *(_QWORD *)(a2 + 56);
      v37 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v45 = *(_QWORD *)(a2 + 72);
      v46 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      sub_4294C((_QWORD *)(a1 + 16));
      v58 = *(_OWORD *)(a2 + 64);
      v60 = *v16;
      v59 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v58;
      *v15 = v60;
      *(_OWORD *)(a1 + 32) = v59;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v54 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v54;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v55 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v55;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v56 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v56;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v57 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v57;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
  }
  else
  {
    v61 = *v16;
    v62 = *(_OWORD *)(a2 + 32);
    v63 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v63;
    *v15 = v61;
    *(_OWORD *)(a1 + 32) = v62;
  }
  v64 = (_OWORD *)(a1 + 80);
  v65 = (_OWORD *)(a2 + 80);
  v66 = *(BAEventReporter **)(a1 + 88);
  v67 = *(_QWORD *)(a2 + 88);
  if (v66)
  {
    if (v67)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v68 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v68;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease(v66, v69, v70, v71, v72, v73, v74, v75);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v76 = *(_QWORD *)(a2 + 104);
      v77 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v76;
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v85 = *(_QWORD *)(a2 + 120);
      v86 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v85;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v94 = *(_QWORD *)(a2 + 144);
      v95 = *(BAEventReporter **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v94;
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v103 = *(_QWORD *)(a2 + 160);
      v104 = *(BAEventReporter **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v103;
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v112 = *(_QWORD *)(a2 + 176);
      v113 = *(BAEventReporter **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v112;
      swift_bridgeObjectRetain(v112);
      swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v121 = *(_QWORD *)(a2 + 192);
      v122 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v121;
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v130 = *(_QWORD *)(a2 + 208);
      v131 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v130;
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v139 = *(_QWORD *)(a2 + 224);
      v140 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v139;
      swift_bridgeObjectRetain(v139);
      swift_bridgeObjectRelease(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      sub_1E060((_QWORD *)(a1 + 80));
      v158 = *(_OWORD *)(a2 + 96);
      *v64 = *v65;
      *(_OWORD *)(a1 + 96) = v158;
      v159 = *(_OWORD *)(a2 + 160);
      v161 = *(_OWORD *)(a2 + 112);
      v160 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v159;
      *(_OWORD *)(a1 + 112) = v161;
      *(_OWORD *)(a1 + 128) = v160;
      v163 = *(_OWORD *)(a2 + 192);
      v162 = *(_OWORD *)(a2 + 208);
      v164 = *(_OWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 192) = v163;
      *(_OWORD *)(a1 + 208) = v162;
      *(_OWORD *)(a1 + 176) = v164;
    }
  }
  else if (v67)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v148 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v148;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v149 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v149;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v150 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v150;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v151 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v151;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v181 = a3;
    v152 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v152;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v153 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v153;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v154 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v154;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v155 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v155;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v156 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v156;
    swift_bridgeObjectRetain(v148);
    swift_bridgeObjectRetain(v149);
    swift_bridgeObjectRetain(v150);
    swift_bridgeObjectRetain(v151);
    v157 = v152;
    a3 = v181;
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v154);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
  }
  else
  {
    v165 = *(_OWORD *)(a2 + 96);
    *v64 = *v65;
    *(_OWORD *)(a1 + 96) = v165;
    v166 = *(_OWORD *)(a2 + 112);
    v167 = *(_OWORD *)(a2 + 128);
    v168 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v168;
    *(_OWORD *)(a1 + 112) = v166;
    *(_OWORD *)(a1 + 128) = v167;
    v169 = *(_OWORD *)(a2 + 176);
    v170 = *(_OWORD *)(a2 + 192);
    v171 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 192) = v170;
    *(_OWORD *)(a1 + 208) = v171;
    *(_OWORD *)(a1 + 176) = v169;
  }
  v172 = *(int *)(a3 + 28);
  v173 = a1 + v172;
  v174 = a2 + v172;
  v175 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 24))(v173, v174, v175);
  v176 = *(int *)(a3 + 32);
  v177 = a1 + v176;
  v178 = a2 + v176;
  v179 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 24))(v177, v178, v179);
  return a1;
}

uint64_t initializeWithTake for AuthorExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  v12 = *(_OWORD *)(a2 + 112);
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = *(int *)(a3 + 32);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for AuthorExposureEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  int64_t v17;
  int64_t v18;
  void *v19;
  BAEventReporter *v20;
  uint64_t v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  __int128 v49;
  __int128 v50;
  BAEventReporter *v51;
  uint64_t v52;
  uint64_t v53;
  BAEventReporter *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  int64_t v59;
  int64_t v60;
  id v61;
  uint64_t v62;
  BAEventReporter *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  int64_t v68;
  int64_t v69;
  id v70;
  uint64_t v71;
  BAEventReporter *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  int64_t v77;
  int64_t v78;
  id v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v20 = *(BAEventReporter **)(a1 + 24);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 24);
    if (v21)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v21;
      swift_bridgeObjectRelease(v20, v13, v14, v15, v16, v17, v18, v19);
      v22 = *(_QWORD *)(a2 + 40);
      v23 = *(BAEventReporter **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v22;
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      v31 = *(_QWORD *)(a2 + 56);
      v32 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v31;
      swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
      v40 = *(_QWORD *)(a2 + 72);
      v41 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v40;
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      goto LABEL_6;
    }
    sub_4294C((_QWORD *)(a1 + 16));
  }
  v49 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v49;
  v50 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v50;
LABEL_6:
  v51 = *(BAEventReporter **)(a1 + 88);
  if (!v51)
  {
LABEL_10:
    v125 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v125;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v126 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v126;
    v127 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v127;
    v128 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v128;
    goto LABEL_11;
  }
  v52 = *(_QWORD *)(a2 + 88);
  if (!v52)
  {
    sub_1E060((_QWORD *)(a1 + 80));
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v52;
  swift_bridgeObjectRelease(v51, v13, v14, v15, v16, v17, v18, v19);
  v53 = *(_QWORD *)(a2 + 104);
  v54 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v53;
  swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
  v62 = *(_QWORD *)(a2 + 120);
  v63 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v62;
  swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v71 = *(_QWORD *)(a2 + 144);
  v72 = *(BAEventReporter **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v71;
  swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
  v80 = *(_QWORD *)(a2 + 160);
  v81 = *(BAEventReporter **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v80;
  swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
  v89 = *(_QWORD *)(a2 + 176);
  v90 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v89;
  swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
  v98 = *(_QWORD *)(a2 + 192);
  v99 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v98;
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  v107 = *(_QWORD *)(a2 + 208);
  v108 = *(BAEventReporter **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v107;
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  v116 = *(_QWORD *)(a2 + 224);
  v117 = *(BAEventReporter **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v116;
  swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
LABEL_11:
  v129 = a3[7];
  v130 = a1 + v129;
  v131 = a2 + v129;
  v132 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 40))(v130, v131, v132);
  v133 = a3[8];
  v134 = a1 + v133;
  v135 = a2 + v133;
  v136 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 40))(v134, v135, v136);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthorExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B37F4);
}

uint64_t sub_1B37F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AuthorExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B38A0);
}

uint64_t sub_1B38A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1B393C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = &unk_216BA0;
  v5[1] = &unk_216BB8;
  v5[2] = &unk_216BD0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AuthorExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B3A2C + 4 * byte_216AAA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B3A60 + 4 * byte_216AA5[v4]))();
}

uint64_t sub_1B3A60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B3A68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B3A70);
  return result;
}

uint64_t sub_1B3A7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B3A84);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B3A88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B3A90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthorExposureEvent.Model.CodingKeys()
{
  return &type metadata for AuthorExposureEvent.Model.CodingKeys;
}

unint64_t sub_1B3AB0()
{
  unint64_t result;

  result = qword_2A5EC0;
  if (!qword_2A5EC0)
  {
    result = swift_getWitnessTable(byte_216C84, &type metadata for AuthorExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5EC0);
  }
  return result;
}

unint64_t sub_1B3AF8()
{
  unint64_t result;

  result = qword_2A5EC8;
  if (!qword_2A5EC8)
  {
    result = swift_getWitnessTable(asc_216BF4, &type metadata for AuthorExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5EC8);
  }
  return result;
}

unint64_t sub_1B3B40()
{
  unint64_t result;

  result = qword_2A5ED0;
  if (!qword_2A5ED0)
  {
    result = swift_getWitnessTable(asc_216C1C, &type metadata for AuthorExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5ED0);
  }
  return result;
}

uint64_t sub_1B3B84(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6144726F68747561 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144726F68747561, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEC00000061746144)
  {
    v7 = 0xEC00000061746144;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1B3DDC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A5ED8, &enum case for SessionGroup.default(_:));
}

uint64_t static GoalStateEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C88, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5ED8, a1);
}

uint64_t sub_1B3E1C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A5EF0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static GoalStateEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C90, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5EF0, a1);
}

uint64_t GoalStateEvent.readingGoalsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296F58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GoalStateEvent.readingGoalsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296F58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t GoalStateEvent.booksGoalsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalStateEvent(0) + 20);
  v4 = sub_71B4(&qword_296F60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GoalStateEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A5F78, (uint64_t)&nominal type descriptor for GoalStateEvent);
}

uint64_t GoalStateEvent.booksGoalsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalStateEvent(0) + 20);
  v4 = sub_71B4(&qword_296F60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GoalStateEvent.booksGoalsData.modify())()
{
  type metadata accessor for GoalStateEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GoalStateEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalStateEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GoalStateEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalStateEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GoalStateEvent.eventData.modify())()
{
  type metadata accessor for GoalStateEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GoalStateEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for GoalStateEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = enum case for EventProperty.required<A>(_:);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
}

__n128 GoalStateEvent.Model.readingGoalsData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_BYTE *)(v1 + 72);
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 32);
  v6 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v2;
  *(_BYTE *)(a1 + 72) = v3;
  return result;
}

__n128 GoalStateEvent.Model.booksGoalsData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 112);
  result = *(__n128 *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t GoalStateEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalStateEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GoalStateEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6010, (uint64_t)&nominal type descriptor for GoalStateEvent.Model);
}

uint64_t GoalStateEvent.Model.init(readingGoalsData:booksGoalsData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v9;
  v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v10;
  *(_QWORD *)(a4 + 64) = v6;
  *(_BYTE *)(a4 + 72) = v7;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 80) = *(_OWORD *)a2;
  *(_OWORD *)(a4 + 96) = v11;
  *(_BYTE *)(a4 + 112) = v8;
  v12 = a4 + *(int *)(type metadata accessor for GoalStateEvent.Model(0) + 24);
  v13 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a3, v13);
}

unint64_t sub_1B4238()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x616F47736B6F6F62;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1B42A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B55A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B42CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B44E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B42F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B44E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GoalStateEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  char v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  v3 = v1;
  v5 = sub_71B4(&qword_2A5F08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1B44E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GoalStateEvent.Model.CodingKeys, &type metadata for GoalStateEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 8);
  v13 = *((_BYTE *)v3 + 72);
  v14 = v3[1];
  v26 = *v3;
  v27 = v14;
  v15 = v3[3];
  v28 = v3[2];
  v29 = v15;
  v30 = v12;
  v31 = v13;
  v25 = 0;
  v16 = sub_22EE4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for ReadingGoalsData, v16);
  if (!v2)
  {
    v17 = *((_BYTE *)v3 + 112);
    v18 = v3[6];
    v26 = v3[5];
    v27 = v18;
    LOBYTE(v28) = v17;
    v25 = 1;
    v19 = sub_2E6A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for BooksGoalsData, v19);
    v20 = (uint64_t)v3 + *(int *)(type metadata accessor for GoalStateEvent.Model(0) + 24);
    LOBYTE(v26) = 2;
    v21 = type metadata accessor for EventData(0);
    v22 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v26, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1B44E0()
{
  unint64_t result;

  result = qword_2A5F10;
  if (!qword_2A5F10)
  {
    result = swift_getWitnessTable(byte_216ECC, &type metadata for GoalStateEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A5F10);
  }
  return result;
}

uint64_t GoalStateEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  char v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  char v48;

  v38 = a2;
  v3 = type metadata accessor for EventData(0);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_71B4(&qword_2A5F18);
  v6 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GoalStateEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_1B44E0();
  v39 = v8;
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GoalStateEvent.Model.CodingKeys, &type metadata for GoalStateEvent.Model.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v35 = v9;
    v16 = v11;
    v17 = v6;
    v41 = v5;
    v18 = v37;
    v19 = v38;
    v48 = 0;
    v20 = sub_22E9C();
    v21 = v39;
    v22 = v40;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v42, &type metadata for ReadingGoalsData, &v48, v40, &type metadata for ReadingGoalsData, v20);
    v23 = v46;
    v24 = v47;
    v25 = v43;
    v26 = (uint64_t)v16;
    *(_OWORD *)v16 = v42;
    *((_OWORD *)v16 + 1) = v25;
    v27 = v45;
    *((_OWORD *)v16 + 2) = v44;
    *((_OWORD *)v16 + 3) = v27;
    *((_QWORD *)v16 + 8) = v23;
    v16[72] = v24;
    v48 = 1;
    v28 = sub_2F228();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v42, &type metadata for BooksGoalsData, &v48, v22, &type metadata for BooksGoalsData, v28);
    v30 = v44;
    v31 = v43;
    *((_OWORD *)v16 + 5) = v42;
    *((_OWORD *)v16 + 6) = v31;
    v16[112] = v30;
    LOBYTE(v42) = 2;
    v32 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v33 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v18, &v42, v22, v18, v32);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v36 + 32))(v26 + *(int *)(v35 + 24), v33, v18);
    sub_1B47C0(v26, v19);
  }
  return sub_7DAC(a1);
}

uint64_t sub_1B47C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GoalStateEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4804@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GoalStateEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1B4818(_QWORD *a1)
{
  return GoalStateEvent.Model.encode(to:)(a1);
}

uint64_t sub_1B482C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C88, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A5ED8, (uint64_t)sub_1B3DDC, a1);
}

uint64_t sub_1B4850@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C90, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A5EF0, (uint64_t)sub_1B3E1C, a1);
}

uint64_t sub_1B4874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = enum case for EventProperty.required<A>(_:);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for GoalStateEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296F58);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296F60);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for GoalStateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for GoalStateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for GoalStateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for GoalStateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for GoalStateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalStateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B4DA4);
}

uint64_t sub_1B4DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296F58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296F60);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GoalStateEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B4E54);
}

uint64_t sub_1B4E54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296F58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296F60);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1B4F00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, &qword_297040, (uint64_t (*)(void))sub_22E9C, (uint64_t (*)(void))sub_22EE4, (uint64_t)&type metadata for ReadingGoalsData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_297048, (uint64_t (*)(void))sub_2F228, (uint64_t (*)(void))sub_2E6A0, (uint64_t)&type metadata for BooksGoalsData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for GoalStateEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v7;
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v11 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, v9, v11);
  }
  return v3;
}

uint64_t initializeWithCopy for GoalStateEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for GoalStateEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for GoalStateEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

uint64_t assignWithTake for GoalStateEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v9, v8, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalStateEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B528C);
}

uint64_t sub_1B528C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 252)
  {
    if (*a1 <= 3u)
      v4 = 3;
    else
      v4 = *a1;
    v5 = v4 - 3;
    if (*a1 >= 3u)
      return v5;
    else
      return 0;
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for GoalStateEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B5318);
}

_BYTE *sub_1B5318(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 252)
  {
    *result = a2 + 3;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1B5388(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "I";
  v4[1] = L"!";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GoalStateEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B5450 + 4 * byte_216D05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B5484 + 4 * byte_216D00[v4]))();
}

uint64_t sub_1B5484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B548C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B5494);
  return result;
}

uint64_t sub_1B54A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B54A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B54AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B54B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GoalStateEvent.Model.CodingKeys()
{
  return &type metadata for GoalStateEvent.Model.CodingKeys;
}

unint64_t sub_1B54D4()
{
  unint64_t result;

  result = qword_2A6050;
  if (!qword_2A6050)
  {
    result = swift_getWitnessTable(a5_2, &type metadata for GoalStateEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6050);
  }
  return result;
}

unint64_t sub_1B551C()
{
  unint64_t result;

  result = qword_2A6058;
  if (!qword_2A6058)
  {
    result = swift_getWitnessTable(asc_216E14, &type metadata for GoalStateEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6058);
  }
  return result;
}

unint64_t sub_1B5564()
{
  unint64_t result;

  result = qword_2A6060;
  if (!qword_2A6060)
  {
    result = swift_getWitnessTable(aE_16, &type metadata for GoalStateEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6060);
  }
  return result;
}

uint64_t sub_1B55A8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x800000000021EE50;
    if (a2 == 0x800000000021EE50)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EE50, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x616F47736B6F6F62 && a2 == 0xEE0061746144736CLL)
  {
    v6 = 0xEE0061746144736CLL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616F47736B6F6F62, 0xEE0061746144736CLL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

float ReadingNowItemTypeData.completionRate.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 36);
}

void ReadingNowItemTypeData.completionRate.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 36) = a1;
}

uint64_t (*ReadingNowItemTypeData.completionRate.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void __swiftcall ReadingNowItemTypeData.init(contentPrivateID:contentUserID:contentType:completionRate:contentID:)(BookAnalytics::ReadingNowItemTypeData *__return_ptr retstr, Swift::String contentPrivateID, Swift::String contentUserID, BookAnalytics::ContentType contentType, Swift::Float completionRate, Swift::String contentID)
{
  BookAnalytics::ContentType v6;

  v6 = *(_BYTE *)contentType;
  retstr->contentPrivateID = contentPrivateID;
  retstr->contentUserID = contentUserID;
  retstr->contentType = v6;
  retstr->completionRate = completionRate;
  retstr->contentID = contentID;
}

uint64_t sub_1B5768()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B579C + 4 * byte_216F20[*v0]))(0xD000000000000010, 0x800000000021EBA0);
}

uint64_t sub_1B579C()
{
  return 0x55746E65746E6F63;
}

uint64_t sub_1B57C0()
{
  return 0x54746E65746E6F63;
}

uint64_t sub_1B57E0()
{
  return 0x6974656C706D6F63;
}

uint64_t sub_1B5804()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_1B5820@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B6280(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B5844(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B5E94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B586C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B5E94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingNowItemTypeData.encode(to:)(_QWORD *a1)
{
  float *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = sub_71B4(&qword_2A6068);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v1;
  v8 = *((_QWORD *)v1 + 1);
  v9 = *((_QWORD *)v1 + 2);
  v25 = *((_QWORD *)v1 + 3);
  v26 = v9;
  v24 = *((unsigned __int8 *)v1 + 32);
  v10 = v1[9];
  v11 = *((_QWORD *)v1 + 5);
  v22 = *((_QWORD *)v1 + 6);
  v23 = v11;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_1B5E94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingNowItemTypeData.CodingKeys, &type metadata for ReadingNowItemTypeData.CodingKeys, v14, v12, v13);
  v33 = 0;
  v15 = v27;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v33, v3);
  if (!v15)
  {
    v16 = v24;
    v18 = v22;
    v17 = v23;
    v32 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v25, &v32, v3);
    v31 = v16;
    v30 = 2;
    v19 = sub_FBF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v3, &type metadata for ContentType, v19);
    v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v3, v10);
    v28 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v28, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void ReadingNowItemTypeData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  BAEventReporter *v28;
  BAEventReporter *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  BAEventReporter *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  BAEventReporter *v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v5 = sub_71B4(&qword_2A6078);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1B5E94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingNowItemTypeData.CodingKeys, &type metadata for ReadingNowItemTypeData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    BYTE2(v62) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v62 + 2, v5);
    v14 = v13;
    v58 = v12;
    BYTE1(v62) = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v62 + 1, v5);
    v17 = v16;
    v56 = v15;
    v61 = 2;
    v18 = sub_FC34();
    swift_bridgeObjectRetain(v17);
    v57 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v62, &type metadata for ContentType, &v61, v5, &type metadata for ContentType, v18);
    v55 = v62;
    v60 = 3;
    v19 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v5);
    v59 = 4;
    v20 = KeyedDecodingContainer.decode(_:forKey:)(&v59, v5);
    v29 = v28;
    v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v31 = v20;
    v30(v8, v5);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v14, v32, v33, v34, v35, v36, v37, v38);
    v39 = v57;
    *(_QWORD *)a2 = v58;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v56;
    *(_QWORD *)(a2 + 24) = v39;
    *(_BYTE *)(a2 + 32) = v55;
    *(float *)(a2 + 36) = v19;
    *(_QWORD *)(a2 + 40) = v31;
    *(_QWORD *)(a2 + 48) = v29;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v29, v40, v41, v42, v43, v44, v45, v46);
    swift_bridgeObjectRelease(v39, v47, v48, v49, v50, v51, v52, v53);
    swift_bridgeObjectRelease(v14, v21, v22, v23, v24, v25, v26, v27);
  }
}

void sub_1B5D38(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingNowItemTypeData.init(from:)(a1, a2);
}

uint64_t sub_1B5D4C(_QWORD *a1)
{
  return ReadingNowItemTypeData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics22ReadingNowItemTypeDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  char v21;
  char v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((_BYTE *)a1 + 32);
  v9 = *((float *)a1 + 9);
  v10 = a1[5];
  v11 = a1[6];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(float *)(a2 + 36);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  if (v4 == *(_QWORD *)a2 && v5 == v12
    || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v12, 0), result = 0, (v18 & 1) != 0))
  {
    if (v6 == v13 && v7 == v14
      || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v13, v14, 0), result = 0, (v20 & 1) != 0))
    {
      sub_26C28(v8);
      v22 = v21;
      result = 0;
      if ((v22 & 1) != 0 && v9 == v15)
      {
        if (v10 == v16 && v11 == v17)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v16, v17, 0);
      }
    }
  }
  return result;
}

unint64_t sub_1B5E94()
{
  unint64_t result;

  result = qword_2A6070;
  if (!qword_2A6070)
  {
    result = swift_getWitnessTable(byte_2170DC, &type metadata for ReadingNowItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6070);
  }
  return result;
}

unint64_t sub_1B5EDC()
{
  unint64_t result;

  result = qword_2A6080;
  if (!qword_2A6080)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReadingNowItemTypeData, &type metadata for ReadingNowItemTypeData);
    atomic_store(result, (unint64_t *)&qword_2A6080);
  }
  return result;
}

unint64_t sub_1B5F24()
{
  unint64_t result;

  result = qword_2A6088;
  if (!qword_2A6088)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReadingNowItemTypeData, &type metadata for ReadingNowItemTypeData);
    atomic_store(result, (unint64_t *)&qword_2A6088);
  }
  return result;
}

uint64_t initializeWithCopy for ReadingNowItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ReadingNowItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for ReadingNowItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

ValueMetadata *type metadata accessor for ReadingNowItemTypeData()
{
  return &type metadata for ReadingNowItemTypeData;
}

uint64_t storeEnumTagSinglePayload for ReadingNowItemTypeData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B6128 + 4 * byte_216F2A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B615C + 4 * byte_216F25[v4]))();
}

uint64_t sub_1B615C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B6164(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B616CLL);
  return result;
}

uint64_t sub_1B6178(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B6180);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B6184(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B618C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingNowItemTypeData.CodingKeys()
{
  return &type metadata for ReadingNowItemTypeData.CodingKeys;
}

unint64_t sub_1B61AC()
{
  unint64_t result;

  result = qword_2A6090;
  if (!qword_2A6090)
  {
    result = swift_getWitnessTable(byte_2170B4, &type metadata for ReadingNowItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6090);
  }
  return result;
}

unint64_t sub_1B61F4()
{
  unint64_t result;

  result = qword_2A6098;
  if (!qword_2A6098)
  {
    result = swift_getWitnessTable(aU_17, &type metadata for ReadingNowItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6098);
  }
  return result;
}

unint64_t sub_1B623C()
{
  unint64_t result;

  result = qword_2A60A0;
  if (!qword_2A60A0)
  {
    result = swift_getWitnessTable(asc_21704C, &type metadata for ReadingNowItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A60A0);
  }
  return result;
}

uint64_t sub_1B6280(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x800000000021EBA0;
    if (a2 == 0x800000000021EBA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EBA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x55746E65746E6F63 && a2 == 0xED00004449726573)
  {
    v6 = 0xED00004449726573;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55746E65746E6F63, 0xED00004449726573, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079)
  {
    v7 = 0xEB00000000657079;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E65746E6F63, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x6974656C706D6F63 && a2 == 0xEE00657461526E6FLL)
  {
    v8 = 0xEE00657461526E6FLL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974656C706D6F63, 0xEE00657461526E6FLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x49746E65746E6F63 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease(0xE900000000000044);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E65746E6F63, 0xE900000000000044, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::EditActionType_optional __swiftcall EditActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::EditActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268DA8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t EditActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B658C + 4 * byte_21712C[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1B658C()
{
  return 0x6572616873;
}

uint64_t sub_1B65A0()
{
  return 0x6C6F436F54646461;
}

uint64_t sub_1B65C4()
{
  return 0x65766F6D6572;
}

void sub_1B65D8(char *a1)
{
  sub_29EBC(*a1);
}

unint64_t sub_1B65E8()
{
  unint64_t result;

  result = qword_2A60A8;
  if (!qword_2A60A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EditActionType, &type metadata for EditActionType);
    atomic_store(result, (unint64_t *)&qword_2A60A8);
  }
  return result;
}

void sub_1B662C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1B6678()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6572616873, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_1B66EC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B6728(uint64_t a1)
{
  String.hash(into:)(a1, 0x6572616873, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_1B6788(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1B67D0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6572616873, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

BookAnalytics::EditActionType_optional sub_1B6844(Swift::String *a1)
{
  return EditActionType.init(rawValue:)(*a1);
}

uint64_t sub_1B6850()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B6880 + 4 * byte_21713C[*v0]))();
}

void sub_1B6880(_QWORD *a1@<X8>)
{
  *a1 = 0x6572616873;
  a1[1] = 0xE500000000000000;
}

void sub_1B6898(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6F436F54646461;
  a1[1] = 0xEF6E6F697463656CLL;
}

void sub_1B68C0(_QWORD *a1@<X8>)
{
  *a1 = 0x65766F6D6572;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1B68D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1B6A4C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1B6934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1B6A4C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for EditActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B69CC + 4 * byte_217145[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B6A00 + 4 * byte_217140[v4]))();
}

uint64_t sub_1B6A00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B6A08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B6A10);
  return result;
}

uint64_t sub_1B6A1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B6A24);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B6A28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B6A30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditActionType()
{
  return &type metadata for EditActionType;
}

unint64_t sub_1B6A4C()
{
  unint64_t result;

  result = qword_2A60B0;
  if (!qword_2A60B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EditActionType, &type metadata for EditActionType);
    atomic_store(result, (unint64_t *)&qword_2A60B0);
  }
  return result;
}

BookAnalytics::WelcomeActionType_optional __swiftcall WelcomeActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::WelcomeActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268E28, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t WelcomeActionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1885956979;
  if (*v0 != 1)
    v1 = 0x65756E69746E6F63;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_1B6B3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_292CC(*a1, *a2);
}

unint64_t sub_1B6B4C()
{
  unint64_t result;

  result = qword_2A60B8;
  if (!qword_2A60B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WelcomeActionType, &type metadata for WelcomeActionType);
    atomic_store(result, (unint64_t *)&qword_2A60B8);
  }
  return result;
}

Swift::Int sub_1B6B90()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE400000000000000;
  v3 = 1885956979;
  if (v1 != 1)
  {
    v3 = 0x65756E69746E6F63;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1B6C28(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE400000000000000;
  v3 = 1885956979;
  if (*v1 != 1)
  {
    v3 = 0x65756E69746E6F63;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1B6C9C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE400000000000000;
  v4 = 1885956979;
  if (v2 != 1)
  {
    v4 = 0x65756E69746E6F63;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::WelcomeActionType_optional sub_1B6D30(Swift::String *a1)
{
  return WelcomeActionType.init(rawValue:)(*a1);
}

void sub_1B6D3C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE400000000000000;
  v5 = 1885956979;
  if (v2 != 1)
  {
    v5 = 0x65756E69746E6F63;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1B6F08();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1B6DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1B6F08();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for WelcomeActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B6E88 + 4 * byte_217275[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B6EBC + 4 * byte_217270[v4]))();
}

uint64_t sub_1B6EBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B6EC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B6ECCLL);
  return result;
}

uint64_t sub_1B6ED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B6EE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B6EE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B6EEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WelcomeActionType()
{
  return &type metadata for WelcomeActionType;
}

unint64_t sub_1B6F08()
{
  unint64_t result;

  result = qword_2A60C0;
  if (!qword_2A60C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WelcomeActionType, &type metadata for WelcomeActionType);
    atomic_store(result, (unint64_t *)&qword_2A60C0);
  }
  return result;
}

uint64_t sub_1B6F50()
{
  return 0x72756F5377656976;
}

uint64_t sub_1B6F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x72756F5377656976 && a2 == 0xEA00000000006563)
  {
    result = swift_bridgeObjectRelease(0xEA00000000006563);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72756F5377656976, 0xEA00000000006563, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1B700C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B7398();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B7034(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B7398();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ViewSourceData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A60C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1B7398();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewSourceData.CodingKeys, &type metadata for ViewSourceData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1B73DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for ViewSource, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ViewSourceData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A60E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1B7398();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewSourceData.CodingKeys, &type metadata for ViewSourceData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1B7420();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for ViewSource, v13, v5, &type metadata for ViewSource, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1B7274@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ViewSourceData.init(from:)(a1, a2);
}

uint64_t sub_1B7288(_QWORD *a1)
{
  return ViewSourceData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics14ViewSourceDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x654D6E6F69746361;
  v4 = 0xEA0000000000756ELL;
  if (v2 != 1)
  {
    v3 = 6516596;
    v4 = 0xE300000000000000;
  }
  if (*a1)
    v5 = v3;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v4;
  else
    v6 = 0xE700000000000000;
  v7 = 0x654D6E6F69746361;
  v8 = 0xEA0000000000756ELL;
  if (*a2 != 1)
  {
    v7 = 6516596;
    v8 = 0xE300000000000000;
  }
  if (*a2)
    v9 = v7;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v8;
  else
    v10 = 0xE700000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_1B7398()
{
  unint64_t result;

  result = qword_2A60D0;
  if (!qword_2A60D0)
  {
    result = swift_getWitnessTable(byte_217534, &type metadata for ViewSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A60D0);
  }
  return result;
}

unint64_t sub_1B73DC()
{
  unint64_t result;

  result = qword_2A60D8;
  if (!qword_2A60D8)
  {
    result = swift_getWitnessTable("Ƀ\a", &type metadata for ViewSource);
    atomic_store(result, (unint64_t *)&qword_2A60D8);
  }
  return result;
}

unint64_t sub_1B7420()
{
  unint64_t result;

  result = qword_2A60E8;
  if (!qword_2A60E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewSource, &type metadata for ViewSource);
    atomic_store(result, (unint64_t *)&qword_2A60E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ViewSourceData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B74B8 + 4 * byte_217395[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B74EC + 4 * byte_217390[v4]))();
}

uint64_t sub_1B74EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B74F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B74FCLL);
  return result;
}

uint64_t sub_1B7508(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B7510);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B7514(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B751C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewSourceData()
{
  return &type metadata for ViewSourceData;
}

uint64_t storeEnumTagSinglePayload for ViewSourceData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B7578 + 4 * byte_21739A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B7598 + 4 * byte_21739F[v4]))();
}

_BYTE *sub_1B7578(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B7598(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B75A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B75A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B75B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B75B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ViewSourceData.CodingKeys()
{
  return &type metadata for ViewSourceData.CodingKeys;
}

unint64_t sub_1B75D8()
{
  unint64_t result;

  result = qword_2A60F0;
  if (!qword_2A60F0)
  {
    result = swift_getWitnessTable(aU_18, &type metadata for ViewSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A60F0);
  }
  return result;
}

unint64_t sub_1B7620()
{
  unint64_t result;

  result = qword_2A60F8;
  if (!qword_2A60F8)
  {
    result = swift_getWitnessTable(byte_21747C, &type metadata for ViewSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A60F8);
  }
  return result;
}

unint64_t sub_1B7668()
{
  unint64_t result;

  result = qword_2A6100;
  if (!qword_2A6100)
  {
    result = swift_getWitnessTable(byte_2174A4, &type metadata for ViewSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6100);
  }
  return result;
}

BOOL static ReadingGoalsDurationData.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1B76C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x7261655976657270;
  else
    return 0xD000000000000011;
}

uint64_t sub_1B7710@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B7C5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B7734(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B78A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B775C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B78A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingGoalYearlyData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_71B4(&qword_2A6108);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1B78A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingGoalYearlyData.CodingKeys, &type metadata for ReadingGoalYearlyData.CodingKeys, v11, v9, v10);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v16, v4);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v15, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1B78A4()
{
  unint64_t result;

  result = qword_2A6110;
  if (!qword_2A6110)
  {
    result = swift_getWitnessTable(byte_21773C, &type metadata for ReadingGoalYearlyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6110);
  }
  return result;
}

uint64_t ReadingGoalYearlyData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_71B4(&qword_2A6118);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1B78A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingGoalYearlyData.CodingKeys, &type metadata for ReadingGoalYearlyData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1B7A38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReadingGoalYearlyData.init(from:)(a1, a2);
}

uint64_t sub_1B7A4C(_QWORD *a1)
{
  return ReadingGoalYearlyData.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for ReadingGoalsDurationData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReadingGoalsDurationData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReadingGoalYearlyData()
{
  return &type metadata for ReadingGoalYearlyData;
}

uint64_t storeEnumTagSinglePayload for ReadingGoalYearlyData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B7B04 + 4 * byte_217595[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B7B38 + 4 * byte_217590[v4]))();
}

uint64_t sub_1B7B38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B7B40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B7B48);
  return result;
}

uint64_t sub_1B7B54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B7B5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B7B60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B7B68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingGoalYearlyData.CodingKeys()
{
  return &type metadata for ReadingGoalYearlyData.CodingKeys;
}

unint64_t sub_1B7B88()
{
  unint64_t result;

  result = qword_2A6120;
  if (!qword_2A6120)
  {
    result = swift_getWitnessTable(a5_3, &type metadata for ReadingGoalYearlyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6120);
  }
  return result;
}

unint64_t sub_1B7BD0()
{
  unint64_t result;

  result = qword_2A6128;
  if (!qword_2A6128)
  {
    result = swift_getWitnessTable(byte_217684, &type metadata for ReadingGoalYearlyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6128);
  }
  return result;
}

unint64_t sub_1B7C18()
{
  unint64_t result;

  result = qword_2A6130;
  if (!qword_2A6130)
  {
    result = swift_getWitnessTable(byte_2176AC, &type metadata for ReadingGoalYearlyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6130);
  }
  return result;
}

uint64_t sub_1B7C5C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000000222810;
    if (a2 == 0x8000000000222810)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222810, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x7261655976657270 && a2 == 0xEE006C616F47796CLL)
  {
    swift_bridgeObjectRelease(0xEE006C616F47796CLL);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7261655976657270, 0xEE006C616F47796CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B7D6C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A6138, &enum case for SessionGroup.default(_:));
}

uint64_t static ResetPrivateIDsEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295C98, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6138, a1);
}

uint64_t sub_1B7DAC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A6150, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ResetPrivateIDsEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CA0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6150, a1);
}

uint64_t sub_1B7DEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B7F44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B7E14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B7F44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ResetPrivateIDsEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_71B4(&qword_2A6168);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1B7F44();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ResetPrivateIDsEvent.Model.CodingKeys, &type metadata for ResetPrivateIDsEvent.Model.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for EventData(0);
  v12 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1B7F44()
{
  unint64_t result;

  result = qword_2A6170;
  if (!qword_2A6170)
  {
    result = swift_getWitnessTable(byte_217920, &type metadata for ResetPrivateIDsEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6170);
  }
  return result;
}

uint64_t ResetPrivateIDsEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for EventData(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_71B4(&qword_2A6178);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ResetPrivateIDsEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_1B7F44();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ResetPrivateIDsEvent.Model.CodingKeys, &type metadata for ResetPrivateIDsEvent.Model.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_1B8158((uint64_t)v11, v20);
  }
  return sub_7DAC(a1);
}

uint64_t type metadata accessor for ResetPrivateIDsEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6268, (uint64_t)&nominal type descriptor for ResetPrivateIDsEvent.Model);
}

uint64_t sub_1B8158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResetPrivateIDsEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B819C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ResetPrivateIDsEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1B81B0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295C98, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6138, (uint64_t)sub_1B7D6C, a1);
}

uint64_t sub_1B81D4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CA0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6150, (uint64_t)sub_1B7DAC, a1);
}

uint64_t getEnumTagSinglePayload for ResetPrivateIDsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B8204);
}

uint64_t sub_1B8204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResetPrivateIDsEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B8250);
}

uint64_t sub_1B8250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResetPrivateIDsEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A61D8, (uint64_t)&nominal type descriptor for ResetPrivateIDsEvent);
}

uint64_t getEnumTagSinglePayload for ResetPrivateIDsEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B82B4);
}

uint64_t sub_1B82B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResetPrivateIDsEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B82FC);
}

uint64_t sub_1B82FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResetPrivateIDsEvent.Model.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B837C + 4 * byte_217790[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B839C + 4 * byte_217795[v4]))();
}

_BYTE *sub_1B837C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B839C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B83A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B83AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B83B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B83BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ResetPrivateIDsEvent.Model.CodingKeys()
{
  return &type metadata for ResetPrivateIDsEvent.Model.CodingKeys;
}

unint64_t sub_1B83DC()
{
  unint64_t result;

  result = qword_2A62A0;
  if (!qword_2A62A0)
  {
    result = swift_getWitnessTable(byte_2178F8, &type metadata for ResetPrivateIDsEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A62A0);
  }
  return result;
}

unint64_t sub_1B8424()
{
  unint64_t result;

  result = qword_2A62A8;
  if (!qword_2A62A8)
  {
    result = swift_getWitnessTable(aA_11, &type metadata for ResetPrivateIDsEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A62A8);
  }
  return result;
}

unint64_t sub_1B846C()
{
  unint64_t result;

  result = qword_2A62B0;
  if (!qword_2A62B0)
  {
    result = swift_getWitnessTable(aI_6, &type metadata for ResetPrivateIDsEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A62B0);
  }
  return result;
}

uint64_t sub_1B84B0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A62B8, &enum case for SessionGroup.default(_:));
}

uint64_t static RemoveFromWantListEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CA8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A62B8, a1);
}

uint64_t sub_1B84F0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A62D0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RemoveFromWantListEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CB0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A62D0, a1);
}

uint64_t RemoveFromWantListEvent.wantListRemovalData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A62E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t RemoveFromWantListEvent.wantListRemovalData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A62E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t RemoveFromWantListEvent.wantListRemovalTypeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromWantListEvent(0) + 20);
  v4 = sub_71B4(&qword_2A62F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveFromWantListEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A6368, (uint64_t)&nominal type descriptor for RemoveFromWantListEvent);
}

uint64_t RemoveFromWantListEvent.wantListRemovalTypeData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromWantListEvent(0) + 20);
  v4 = sub_71B4(&qword_2A62F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveFromWantListEvent.wantListRemovalTypeData.modify())()
{
  type metadata accessor for RemoveFromWantListEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveFromWantListEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromWantListEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveFromWantListEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromWantListEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveFromWantListEvent.seriesData.modify())()
{
  type metadata accessor for RemoveFromWantListEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveFromWantListEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromWantListEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveFromWantListEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromWantListEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveFromWantListEvent.eventData.modify())()
{
  type metadata accessor for RemoveFromWantListEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveFromWantListEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A62E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RemoveFromWantListEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2A62F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t RemoveFromWantListEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t RemoveFromWantListEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromWantListEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveFromWantListEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6410, (uint64_t)&nominal type descriptor for RemoveFromWantListEvent.Model);
}

uint64_t RemoveFromWantListEvent.Model.init(wantListRemovalData:wantListRemovalTypeData:seriesData:eventData:)@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  *(_QWORD *)a5 = *a1;
  *(_BYTE *)(a5 + 8) = v6;
  v7 = a3[1];
  *(_OWORD *)(a5 + 16) = *a3;
  *(_OWORD *)(a5 + 32) = v7;
  *(_OWORD *)(a5 + 48) = a3[2];
  v8 = a5 + *(int *)(type metadata accessor for RemoveFromWantListEvent.Model(0) + 28);
  v9 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a4, v9);
}

uint64_t sub_1B89D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B8A08 + 4 * byte_217970[*v0]))(0xD000000000000013, 0x8000000000222830);
}

uint64_t sub_1B8A08(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_1B8A20()
{
  return 0x6144736569726573;
}

uint64_t sub_1B8A3C()
{
  return 0x746144746E657665;
}

uint64_t sub_1B8A58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA268(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8A7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B8CB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B8AA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B8CB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RemoveFromWantListEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[3];
  char v21;

  v3 = v1;
  v5 = sub_71B4(&qword_2A62F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1B8CB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoveFromWantListEvent.Model.CodingKeys, &type metadata for RemoveFromWantListEvent.Model.CodingKeys, v11, v9, v10);
  *(_QWORD *)&v20[0] = *(_QWORD *)v3;
  v21 = 0;
  v12 = sub_1969EC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v5, &type metadata for WantListRemovalData, v12);
  if (!v2)
  {
    LOBYTE(v20[0]) = *(_BYTE *)(v3 + 8);
    v21 = 1;
    v13 = sub_350DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v5, &type metadata for WantListRemovalTypeData, v13);
    v14 = *(_OWORD *)(v3 + 32);
    v20[0] = *(_OWORD *)(v3 + 16);
    v20[1] = v14;
    v20[2] = *(_OWORD *)(v3 + 48);
    v21 = 2;
    v15 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v21, v5, &type metadata for SeriesData, v15);
    v16 = v3 + *(int *)(type metadata accessor for RemoveFromWantListEvent.Model(0) + 28);
    LOBYTE(v20[0]) = 3;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v20, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1B8CB8()
{
  unint64_t result;

  result = qword_2A6300;
  if (!qword_2A6300)
  {
    result = swift_getWitnessTable(asc_217B54, &type metadata for RemoveFromWantListEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6300);
  }
  return result;
}

void RemoveFromWantListEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _OWORD v35[3];
  char v36;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_71B4(&qword_2A6308);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RemoveFromWantListEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v33 = a1;
  sub_7988(a1, v12);
  v14 = sub_1B8CB8();
  v31 = v8;
  v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoveFromWantListEvent.Model.CodingKeys, &type metadata for RemoveFromWantListEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v33);
  }
  else
  {
    v27 = v9;
    v28 = v3;
    v34 = v5;
    v16 = (uint64_t)v11;
    v18 = v29;
    v17 = v30;
    v36 = 0;
    v19 = sub_1969A4();
    v21 = v31;
    v20 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &type metadata for WantListRemovalData, &v36, v32, &type metadata for WantListRemovalData, v19);
    *(_QWORD *)v16 = *(_QWORD *)&v35[0];
    v36 = 1;
    v22 = sub_35094();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &type metadata for WantListRemovalTypeData, &v36, v20, &type metadata for WantListRemovalTypeData, v22);
    *(_BYTE *)(v16 + 8) = v35[0];
    v36 = 2;
    v23 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &type metadata for SeriesData, &v36, v20, &type metadata for SeriesData, v23);
    v24 = v35[1];
    *(_OWORD *)(v16 + 16) = v35[0];
    *(_OWORD *)(v16 + 32) = v24;
    *(_OWORD *)(v16 + 48) = v35[2];
    LOBYTE(v35[0]) = 3;
    v25 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v26 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v18, v35, v20, v18, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v28 + 32))(v16 + *(int *)(v27 + 28), v26, v18);
    sub_1B9010(v16, v17);
    sub_7DAC(v33);
    sub_1B9054(v16);
  }
}

uint64_t sub_1B9010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoveFromWantListEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9054(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RemoveFromWantListEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B9090(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RemoveFromWantListEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1B90A4(_QWORD *a1)
{
  return RemoveFromWantListEvent.Model.encode(to:)(a1);
}

uint64_t sub_1B90B8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CA8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A62B8, (uint64_t)sub_1B84B0, a1);
}

uint64_t sub_1B90DC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CB0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A62D0, (uint64_t)sub_1B84F0, a1);
}

uint64_t sub_1B9100@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A62E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2A62F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoveFromWantListEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2A62E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A62F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for RemoveFromWantListEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2A62E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2A62F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for RemoveFromWantListEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A62E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A62F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for RemoveFromWantListEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A62E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A62F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for RemoveFromWantListEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A62E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A62F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for RemoveFromWantListEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A62E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A62F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveFromWantListEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B977C);
}

uint64_t sub_1B977C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A62E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A62F0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296310);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RemoveFromWantListEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B9854);
}

uint64_t sub_1B9854(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2A62E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A62F0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296310);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1B9928(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2A6378, (uint64_t (*)(void))sub_1969A4, (uint64_t (*)(void))sub_1969EC, (uint64_t)&type metadata for WantListRemovalData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A6380, (uint64_t (*)(void))sub_35094, (uint64_t (*)(void))sub_350DC, (uint64_t)&type metadata for WantListRemovalTypeData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RemoveFromWantListEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = a2[7];
    swift_bridgeObjectRetain(v5);
    if (v8 == 1)
    {
      v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_WORD *)(a1 + 41) = *(_WORD *)((char *)a2 + 41);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain(v8);
    }
    v10 = *(int *)(a3 + 28);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for RemoveFromWantListEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[7];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for RemoveFromWantListEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v7 = a2[7];
  swift_bridgeObjectRetain(v6);
  if (v7 == 1)
  {
    v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_WORD *)(a1 + 41) = *(_WORD *)((char *)a2 + 41);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain(v7);
  }
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

uint64_t assignWithCopy for RemoveFromWantListEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  __int128 *v15;
  __int128 *v16;
  BAEventReporter *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *a2;
  v7 = *(BAEventReporter **)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v15 = (__int128 *)(a1 + 16);
  v16 = (__int128 *)(a2 + 2);
  v17 = *(BAEventReporter **)(a1 + 56);
  v18 = a2[7];
  if (v17 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v18 == 1)
    {
      v19 = *v16;
      v20 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v20;
      *v15 = v19;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
      *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
      *(_QWORD *)(a1 + 48) = a2[6];
      v23 = a2[7];
      *(_QWORD *)(a1 + 56) = v23;
      swift_bridgeObjectRetain(v23);
    }
  }
  else if (v18 == 1)
  {
    sub_19008(a1 + 16);
    v22 = *((_OWORD *)a2 + 2);
    v21 = *((_OWORD *)a2 + 3);
    *v15 = *v16;
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a1 + 48) = v21;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
    *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
    *(_QWORD *)(a1 + 48) = a2[6];
    v24 = a2[7];
    *(_QWORD *)(a1 + 56) = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v17, v25, v26, v27, v28, v29, v30, v31);
  }
  v32 = *(int *)(a3 + 28);
  v33 = a1 + v32;
  v34 = (uint64_t)a2 + v32;
  v35 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  return a1;
}

uint64_t initializeWithTake for RemoveFromWantListEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RemoveFromWantListEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  BAEventReporter *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v11 = *(BAEventReporter **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v19 = *(BAEventReporter **)(a1 + 56);
  if (v19 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v20 = *(_QWORD *)(a2 + 56);
    if (v20 != 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v20;
      swift_bridgeObjectRelease(v19, v12, v13, v14, v15, v16, v17, v18);
      goto LABEL_6;
    }
    sub_19008(a1 + 16);
  }
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v21;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_6:
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveFromWantListEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B9F3C);
}

uint64_t sub_1B9F3C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RemoveFromWantListEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B9FC4);
}

char *sub_1B9FC4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BA038(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_217A60;
  v4[2] = &unk_217A78;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RemoveFromWantListEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA110 + 4 * byte_217979[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA144 + 4 * byte_217974[v4]))();
}

uint64_t sub_1BA144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA14C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA154);
  return result;
}

uint64_t sub_1BA160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA168);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA16C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoveFromWantListEvent.Model.CodingKeys()
{
  return &type metadata for RemoveFromWantListEvent.Model.CodingKeys;
}

unint64_t sub_1BA194()
{
  unint64_t result;

  result = qword_2A6450;
  if (!qword_2A6450)
  {
    result = swift_getWitnessTable(aE_17, &type metadata for RemoveFromWantListEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6450);
  }
  return result;
}

unint64_t sub_1BA1DC()
{
  unint64_t result;

  result = qword_2A6458;
  if (!qword_2A6458)
  {
    result = swift_getWitnessTable(byte_217A9C, &type metadata for RemoveFromWantListEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6458);
  }
  return result;
}

unint64_t sub_1BA224()
{
  unint64_t result;

  result = qword_2A6460;
  if (!qword_2A6460)
  {
    result = swift_getWitnessTable(aU_19, &type metadata for RemoveFromWantListEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6460);
  }
  return result;
}

uint64_t sub_1BA268(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x8000000000222830;
    if (a2 == 0x8000000000222830)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000222830, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000000222850)
  {
    v6 = 0x8000000000222850;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000000222850, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1BA430(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A6468, &enum case for SessionGroup.default(_:));
}

uint64_t static RemoveFromCollectionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CB8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6468, a1);
}

uint64_t sub_1BA470(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A6480, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RemoveFromCollectionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CC0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6480, a1);
}

uint64_t RemoveFromCollectionEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromCollectionEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveFromCollectionEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6508, (uint64_t)&nominal type descriptor for RemoveFromCollectionEvent);
}

uint64_t RemoveFromCollectionEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromCollectionEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveFromCollectionEvent.contentData.modify())()
{
  type metadata accessor for RemoveFromCollectionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveFromCollectionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromCollectionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RemoveFromCollectionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromCollectionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoveFromCollectionEvent.eventData.modify())()
{
  type metadata accessor for RemoveFromCollectionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoveFromCollectionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for RemoveFromCollectionEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t RemoveFromCollectionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoveFromCollectionEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoveFromCollectionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A65A0, (uint64_t)&nominal type descriptor for RemoveFromCollectionEvent.Model);
}

uint64_t RemoveFromCollectionEvent.Model.init(collectionData:contentData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  v7 = a2[1];
  v8 = *((_BYTE *)a2 + 16);
  v9 = *(_OWORD *)(a2 + 3);
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_WORD *)a2 + 28);
  v13 = *((_DWORD *)a2 + 15);
  v14 = *((_BYTE *)a2 + 64);
  v15 = *((_DWORD *)a2 + 17);
  v16 = *((_BYTE *)a2 + 72);
  v17 = *((_BYTE *)a2 + 77);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a4 + 32) = v6;
  *(_QWORD *)(a4 + 40) = v7;
  *(_BYTE *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 56) = v9;
  *(_QWORD *)(a4 + 72) = v10;
  *(_QWORD *)(a4 + 80) = v11;
  *(_WORD *)(a4 + 88) = v12;
  *(_DWORD *)(a4 + 92) = v13;
  *(_BYTE *)(a4 + 96) = v14;
  *(_DWORD *)(a4 + 100) = v15;
  *(_BYTE *)(a4 + 104) = v16;
  *(_DWORD *)(a4 + 105) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a4 + 109) = v17;
  *(_OWORD *)(a4 + 112) = *((_OWORD *)a2 + 5);
  v18 = a4 + *(int *)(type metadata accessor for RemoveFromCollectionEvent.Model(0) + 24);
  v19 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
}

uint64_t sub_1BA810()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x44746E65746E6F63;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x697463656C6C6F63;
}

uint64_t sub_1BA884@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BBFCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA8A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BAAFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BA8D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BAAFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RemoveFromCollectionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  int v41;
  char v42;
  __int128 v43;
  char v44;

  v3 = v1;
  v5 = sub_71B4(&qword_2A6498);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1BAAFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoveFromCollectionEvent.Model.CodingKeys, &type metadata for RemoveFromCollectionEvent.Model.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v31 = *v3;
  v32 = v12;
  *(_OWORD *)v33 = *((_OWORD *)v3 + 1);
  v44 = 0;
  v13 = sub_327A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v44, v5, &type metadata for CollectionData, v13);
  if (!v2)
  {
    v14 = v3[5];
    v15 = *((_BYTE *)v3 + 48);
    v16 = *(_OWORD *)(v3 + 7);
    v17 = v3[9];
    v18 = v3[10];
    v19 = *((_WORD *)v3 + 44);
    v20 = *((_DWORD *)v3 + 23);
    v21 = *((_BYTE *)v3 + 96);
    v22 = *((_DWORD *)v3 + 25);
    v23 = *((_BYTE *)v3 + 104);
    v24 = *((unsigned __int8 *)v3 + 109);
    v31 = v3[4];
    v32 = v14;
    v33[0] = v15;
    *(_OWORD *)&v33[8] = v16;
    v34 = v17;
    v35 = v18;
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = *(_DWORD *)((char *)v3 + 105);
    v42 = v24;
    v43 = *((_OWORD *)v3 + 7);
    v44 = 1;
    v25 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v44, v5, &type metadata for ContentData, v25);
    v26 = (uint64_t)v3 + *(int *)(type metadata accessor for RemoveFromCollectionEvent.Model(0) + 24);
    LOBYTE(v31) = 2;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v31, v5, v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1BAAFC()
{
  unint64_t result;

  result = qword_2A64A0;
  if (!qword_2A64A0)
  {
    result = swift_getWitnessTable(asc_217D84, &type metadata for RemoveFromCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A64A0);
  }
  return result;
}

void RemoveFromCollectionEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  char v31;
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  char v52;
  int v53;
  char v54;
  int v55;
  char v56;
  __int128 v57;
  char v58;

  v39 = a2;
  v40 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v5 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = sub_71B4(&qword_2A64A8);
  v6 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RemoveFromCollectionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v43 = a1;
  sub_7988(a1, v12);
  v14 = sub_1BAAFC();
  v41 = v8;
  v15 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoveFromCollectionEvent.Model.CodingKeys, &type metadata for RemoveFromCollectionEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v43);
  }
  else
  {
    v38 = v9;
    v16 = v11;
    v44 = v5;
    v17 = v40;
    v58 = 0;
    v18 = sub_32A60();
    v20 = v41;
    v19 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v45, &type metadata for CollectionData, &v58, v42, &type metadata for CollectionData, v18);
    v21 = v46;
    v22 = (uint64_t)v16;
    *(_QWORD *)v16 = v45;
    *((_QWORD *)v16 + 1) = v21;
    *((_OWORD *)v16 + 1) = *(_OWORD *)v47;
    v58 = 1;
    v23 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v45, &type metadata for ContentData, &v58, v19, &type metadata for ContentData, v23);
    v24 = v46;
    v25 = v47[0];
    v26 = *(_OWORD *)&v47[8];
    v27 = v48;
    v28 = v49;
    v29 = v50;
    v30 = v51;
    v31 = v52;
    v32 = v53;
    v33 = v54;
    v34 = v56;
    *((_QWORD *)v16 + 4) = v45;
    *((_QWORD *)v16 + 5) = v24;
    v16[48] = v25;
    *(_OWORD *)(v16 + 56) = v26;
    *((_QWORD *)v16 + 9) = v27;
    *((_QWORD *)v16 + 10) = v28;
    *((_WORD *)v16 + 44) = v29;
    *((_DWORD *)v16 + 23) = v30;
    v16[96] = v31;
    *((_DWORD *)v16 + 25) = v32;
    v16[104] = v33;
    *(_DWORD *)(v16 + 105) = v55;
    v16[109] = v34;
    *((_OWORD *)v16 + 7) = v57;
    LOBYTE(v45) = 2;
    v35 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v36 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v44, v17, &v45, v19, v17, v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v19);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v22 + *(int *)(v38 + 24), v36, v17);
    sub_1BAE94(v22, v39);
    sub_7DAC(v43);
    sub_1BAED8(v22);
  }
}

uint64_t sub_1BAE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoveFromCollectionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BAED8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RemoveFromCollectionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BAF14(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  RemoveFromCollectionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1BAF28(_QWORD *a1)
{
  return RemoveFromCollectionEvent.Model.encode(to:)(a1);
}

uint64_t sub_1BAF3C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CB8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6468, (uint64_t)sub_1BA430, a1);
}

uint64_t sub_1BAF60@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CC0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6480, (uint64_t)sub_1BA470, a1);
}

uint64_t sub_1BAF84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoveFromCollectionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_2971B8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for RemoveFromCollectionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for RemoveFromCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for RemoveFromCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for RemoveFromCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for RemoveFromCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveFromCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1BB4A8);
}

uint64_t sub_1BB4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_2971B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RemoveFromCollectionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1BB558);
}

uint64_t sub_1BB558(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_2971B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1BB604(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_297250, (uint64_t (*)(void))sub_32A60, (uint64_t (*)(void))sub_327A8, (uint64_t)&type metadata for CollectionData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for RemoveFromCollectionEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v8 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v8;
    v9 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v9;
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    *(_DWORD *)(a1 + 92) = *((_DWORD *)a2 + 23);
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_DWORD *)(a1 + 105) = *(_DWORD *)((char *)a2 + 105);
    *(_BYTE *)(a1 + 109) = *((_BYTE *)a2 + 109);
    v10 = a2[15];
    v11 = *(int *)(a3 + 24);
    v17 = (uint64_t)a2 + v11;
    v12 = a1 + v11;
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v10;
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14(v12, v17, v13);
  }
  return v3;
}

uint64_t destroy for RemoveFromCollectionEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for RemoveFromCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  v9 = *(_QWORD *)(a2 + 120);
  v10 = *(int *)(a3 + 24);
  v15 = a2 + v10;
  v11 = a1 + v10;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v11, v15, v12);
  return a1;
}

uint64_t assignWithCopy for RemoveFromCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v16 = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = v16;
  v17 = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = v17;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

_OWORD *initializeWithTake for RemoveFromCollectionEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[3];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  a1[2] = a2[2];
  a1[3] = v7;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for RemoveFromCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveFromCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1BBCB0);
}

uint64_t sub_1BBCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RemoveFromCollectionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1BBD38);
}

uint64_t sub_1BBD38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BBDAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = " ";
  v4[1] = &unk_217CA8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RemoveFromCollectionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BBE74 + 4 * byte_217BB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BBEA8 + 4 * byte_217BB0[v4]))();
}

uint64_t sub_1BBEA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BBEB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BBEB8);
  return result;
}

uint64_t sub_1BBEC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BBECCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BBED0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BBED8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoveFromCollectionEvent.Model.CodingKeys()
{
  return &type metadata for RemoveFromCollectionEvent.Model.CodingKeys;
}

unint64_t sub_1BBEF8()
{
  unint64_t result;

  result = qword_2A65E0;
  if (!qword_2A65E0)
  {
    result = swift_getWitnessTable(aU_20, &type metadata for RemoveFromCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A65E0);
  }
  return result;
}

unint64_t sub_1BBF40()
{
  unint64_t result;

  result = qword_2A65E8;
  if (!qword_2A65E8)
  {
    result = swift_getWitnessTable(byte_217CCC, &type metadata for RemoveFromCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A65E8);
  }
  return result;
}

unint64_t sub_1BBF88()
{
  unint64_t result;

  result = qword_2A65F0;
  if (!qword_2A65F0)
  {
    result = swift_getWitnessTable(byte_217CF4, &type metadata for RemoveFromCollectionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A65F0);
  }
  return result;
}

uint64_t sub_1BBFCC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x697463656C6C6F63 && a2 == 0xEE00617461446E6FLL)
  {
    v5 = 0xEE00617461446E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::ListeningRoutedTo_optional __swiftcall ListeningRoutedTo.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ListeningRoutedTo_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268E90, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ListeningRoutedTo.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BC1F0 + 4 * byte_217DE0[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1BC1F0()
{
  return 0x656369766564;
}

uint64_t sub_1BC204()
{
  return 0x79616C50726163;
}

uint64_t sub_1BC218()
{
  return 0x6F69647541726163;
}

uint64_t sub_1BC230()
{
  return 0x6E6F687064616568;
}

uint64_t sub_1BC24C()
{
  return 0x73646F50726961;
}

uint64_t sub_1BC260()
{
  return 0x646F50656D6F68;
}

uint64_t sub_1BC274()
{
  return 0x5654656C707061;
}

void sub_1BC288(char *a1)
{
  sub_27D34(*a1);
}

unint64_t sub_1BC298()
{
  unint64_t result;

  result = qword_2A65F8;
  if (!qword_2A65F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ListeningRoutedTo, &type metadata for ListeningRoutedTo);
    atomic_store(result, (unint64_t *)&qword_2A65F8);
  }
  return result;
}

void sub_1BC2DC()
{
  char *v0;

  sub_1D3928(0, *v0);
}

void sub_1BC2E8(uint64_t a1)
{
  char *v1;

  sub_1ECB50(a1, *v1);
}

void sub_1BC2F0(uint64_t a1)
{
  char *v1;

  sub_1D3928(a1, *v1);
}

BookAnalytics::ListeningRoutedTo_optional sub_1BC2F8(Swift::String *a1)
{
  return ListeningRoutedTo.init(rawValue:)(*a1);
}

uint64_t sub_1BC304()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BC334 + 4 * byte_217DE8[*v0]))();
}

void sub_1BC334(_QWORD *a1@<X8>)
{
  *a1 = 0x656369766564;
  a1[1] = 0xE600000000000000;
}

void sub_1BC34C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x79616C50726163;
  a1[1] = v1;
}

void sub_1BC364(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69647541726163;
  a1[1] = 0xE800000000000000;
}

void sub_1BC380(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F687064616568;
  a1[1] = 0xEA00000000007365;
}

void sub_1BC3A0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x73646F50726961;
  a1[1] = v1;
}

void sub_1BC3B8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x646F50656D6F68;
  a1[1] = v1;
}

void sub_1BC3D0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x5654656C707061;
  a1[1] = v1;
}

uint64_t sub_1BC3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1BC55C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1BC444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1BC55C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ListeningRoutedTo(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1BC4DC + 4 * byte_217DF5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1BC510 + 4 * byte_217DF0[v4]))();
}

uint64_t sub_1BC510(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC518(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC520);
  return result;
}

uint64_t sub_1BC52C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC534);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1BC538(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC540(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListeningRoutedTo()
{
  return &type metadata for ListeningRoutedTo;
}

unint64_t sub_1BC55C()
{
  unint64_t result;

  result = qword_2A6600;
  if (!qword_2A6600)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ListeningRoutedTo, &type metadata for ListeningRoutedTo);
    atomic_store(result, (unint64_t *)&qword_2A6600);
  }
  return result;
}

uint64_t sub_1BC5A4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65726E6547627573;
  if (*v0 != 1)
    v1 = 0x54746E65746E6F63;
  if (*v0)
    return v1;
  else
    return 0x644965726E6567;
}

uint64_t sub_1BC60C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCD44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BC630(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BCB44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BC658(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BCB44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenreData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = sub_71B4(&qword_2A6608);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v21 = v1[3];
  v22 = v9;
  v10 = v1[4];
  v19 = v1[5];
  v20 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_1BCB44();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GenreData.CodingKeys, &type metadata for GenreData.CodingKeys, v13, v11, v12);
  v26 = 0;
  v14 = v23;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v26, v3);
  if (!v14)
  {
    v16 = v19;
    v15 = v20;
    v25 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v21, &v25, v3);
    v24 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v24, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void GenreData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  BAEventReporter *v20;
  BAEventReporter *v21;
  uint64_t v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  uint64_t v25;
  BAEventReporter *v26;
  BAEventReporter *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  const char *v51;
  void *v52;
  void *v53;
  void *v54;
  int64_t v55;
  int64_t v56;
  void *v57;
  BAEventReporter *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;

  v5 = sub_71B4(&qword_2A6618);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1BCB44();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GenreData.CodingKeys, &type metadata for GenreData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v13, v14, v15, v16, v17, v18, v19);
    v58 = 0;
  }
  else
  {
    v63 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v63, v5);
    v21 = v20;
    v60 = v12;
    v62 = 1;
    swift_bridgeObjectRetain(v20);
    v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v5);
    v24 = v23;
    v59 = v22;
    v61 = 2;
    swift_bridgeObjectRetain(v23);
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v5);
    v27 = v26;
    v28 = *(void (**)(char *, uint64_t))(v6 + 8);
    v29 = v25;
    v28(v8, v5);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(0, v30, v31, v32, v33, v34, v35, v36);
    *a2 = v60;
    a2[1] = (uint64_t)v21;
    a2[2] = v59;
    a2[3] = (uint64_t)v24;
    a2[4] = v29;
    a2[5] = (uint64_t)v27;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v27, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(v24, v44, v45, v46, v47, v48, v49, v50);
    v58 = v21;
  }
  swift_bridgeObjectRelease(v58, v51, v52, v53, v54, v55, v56, v57);
}

void sub_1BCA1C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  GenreData.init(from:)(a1, a2);
}

uint64_t sub_1BCA30(_QWORD *a1)
{
  return GenreData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics9GenreDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v14 = a2[4];
  v13 = a2[5];
  if (v4 == *a2 && v5 == v10
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v10, 0), result = 0, (v15 & 1) != 0))
  {
    if (v8)
    {
      if (!v11)
        return 0;
      if (v6 != v12 || v8 != v11)
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v12, v11, 0);
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
    }
    else if (v11)
    {
      return 0;
    }
    if (v9)
    {
      if (v13
        && (v7 == v14 && v9 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v14, v13, 0) & 1) != 0))
      {
        return 1;
      }
    }
    else if (!v13)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_1BCB44()
{
  unint64_t result;

  result = qword_2A6610;
  if (!qword_2A6610)
  {
    result = swift_getWitnessTable(byte_2180C4, &type metadata for GenreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6610);
  }
  return result;
}

ValueMetadata *type metadata accessor for GenreData()
{
  return &type metadata for GenreData;
}

uint64_t storeEnumTagSinglePayload for GenreData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BCBEC + 4 * byte_217F29[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BCC20 + 4 * byte_217F24[v4]))();
}

uint64_t sub_1BCC20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCC28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCC30);
  return result;
}

uint64_t sub_1BCC3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCC44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BCC48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCC50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenreData.CodingKeys()
{
  return &type metadata for GenreData.CodingKeys;
}

unint64_t sub_1BCC70()
{
  unint64_t result;

  result = qword_2A6620;
  if (!qword_2A6620)
  {
    result = swift_getWitnessTable(byte_21809C, &type metadata for GenreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6620);
  }
  return result;
}

unint64_t sub_1BCCB8()
{
  unint64_t result;

  result = qword_2A6628;
  if (!qword_2A6628)
  {
    result = swift_getWitnessTable(byte_21800C, &type metadata for GenreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6628);
  }
  return result;
}

unint64_t sub_1BCD00()
{
  unint64_t result;

  result = qword_2A6630;
  if (!qword_2A6630)
  {
    result = swift_getWitnessTable(aM_12, &type metadata for GenreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6630);
  }
  return result;
}

uint64_t sub_1BCD44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x644965726E6567 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644965726E6567, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65726E6547627573 && a2 == 0xEA00000000006449)
  {
    v7 = 0xEA00000000006449;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726E6547627573, 0xEA00000000006449, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease(0xEB00000000657079);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54746E65746E6F63, 0xEB00000000657079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t static AmpTreatmentData.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  return sub_66274(*a1, *a2);
}

uint64_t sub_1BCEC8()
{
  return 0x6E656D7461657274;
}

uint64_t sub_1BCEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E656D7461657274 && a2 == 0xEC00000073444974)
  {
    result = swift_bridgeObjectRelease(0xEC00000073444974);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D7461657274, 0xEC00000073444974, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1BCF94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BD104();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BCFBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BD104();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AmpTreatmentData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_2A6638);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1BD104();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AmpTreatmentData.CodingKeys, &type metadata for AmpTreatmentData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_299618);
  v12 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1BD104()
{
  unint64_t result;

  result = qword_2A6640;
  if (!qword_2A6640)
  {
    result = swift_getWitnessTable(byte_2182C4, &type metadata for AmpTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6640);
  }
  return result;
}

uint64_t AmpTreatmentData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A6648);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1BD104();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AmpTreatmentData.CodingKeys, &type metadata for AmpTreatmentData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_299618);
    v13 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1BD290@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AmpTreatmentData.init(from:)(a1, a2);
}

uint64_t sub_1BD2A4(_QWORD *a1)
{
  return AmpTreatmentData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AmpTreatmentData()
{
  return &type metadata for AmpTreatmentData;
}

uint64_t storeEnumTagSinglePayload for AmpTreatmentData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BD308 + 4 * byte_218120[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BD328 + 4 * byte_218125[v4]))();
}

_BYTE *sub_1BD308(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BD328(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BD330(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BD338(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BD340(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BD348(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AmpTreatmentData.CodingKeys()
{
  return &type metadata for AmpTreatmentData.CodingKeys;
}

unint64_t sub_1BD368()
{
  unint64_t result;

  result = qword_2A6650;
  if (!qword_2A6650)
  {
    result = swift_getWitnessTable(aU_21, &type metadata for AmpTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6650);
  }
  return result;
}

unint64_t sub_1BD3B0()
{
  unint64_t result;

  result = qword_2A6658;
  if (!qword_2A6658)
  {
    result = swift_getWitnessTable(byte_21820C, &type metadata for AmpTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6658);
  }
  return result;
}

unint64_t sub_1BD3F8()
{
  unint64_t result;

  result = qword_2A6660;
  if (!qword_2A6660)
  {
    result = swift_getWitnessTable(byte_218234, &type metadata for AmpTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6660);
  }
  return result;
}

void EventReporter.emitViewSupplementalContent(using:for:sourceIsAction:with:)(void *a1, uint64_t a2, uint64_t a3, char a4, id a5)
{
  void *v5;
  char v10;
  unsigned int v11;
  id v12;
  BOOL v13;
  uint64_t v14;
  BAEventReporter *v15;
  id v16;
  id v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  int64_t v22;
  id v23;
  BOOL v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  int64_t v29;
  id v30;
  BOOL v31;
  id v32;

  if ((a4 & 1) != 0)
    v10 = 1;
  else
    v10 = 2;
  if (a5)
  {
    v11 = objc_msgSend(a5, "intValue");
    v12 = a1;
    if (!a1)
    {
LABEL_8:
      v12 = sub_CB320();
      if (!v12)
        return;
    }
  }
  else
  {
    v11 = 0;
    v12 = a1;
    if (!a1)
      goto LABEL_8;
  }
  v13 = a5 == 0;
  v14 = swift_allocObject(&unk_2897B0, 54, 7);
  *(_QWORD *)(v14 + 16) = v5;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = v12;
  *(_DWORD *)(v14 + 48) = v11;
  *(_BYTE *)(v14 + 52) = v13;
  *(_BYTE *)(v14 + 53) = v10;
  v15 = (BAEventReporter *)swift_allocObject(&unk_2897D8, 32, 7);
  v15[1].super.isa = (Class)sub_1BE5D8;
  *(_QWORD *)v15[1].dataProviders = v14;
  v16 = a1;
  v17 = v5;
  swift_bridgeObjectRetain(a3);
  v18 = v12;
  swift_retain(v14);
  Tracker.transaction(block:)(sub_53E94, v15);

  swift_release((BAEventReporter *)v14, v19, v20, v21, v22, v23, v24, v25);
  swift_release(v15, v26, v27, v28, v29, v30, v31, v32);
}

void EventReporter.emitViewSupplementalContent(using:for:from:with:)(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  void *v5;
  char v10;
  id v11;
  uint64_t v12;
  BAEventReporter *v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;

  v10 = *a4;
  v11 = a1;
  if (a1 || (v11 = sub_CB320()) != 0)
  {
    v12 = swift_allocObject(&unk_289800, 54, 7);
    *(_QWORD *)(v12 + 16) = v5;
    *(_QWORD *)(v12 + 24) = a2;
    *(_QWORD *)(v12 + 32) = a3;
    *(_QWORD *)(v12 + 40) = v11;
    *(_DWORD *)(v12 + 48) = a5;
    *(_BYTE *)(v12 + 52) = BYTE4(a5) & 1;
    *(_BYTE *)(v12 + 53) = v10;
    v13 = (BAEventReporter *)swift_allocObject(&unk_289828, 32, 7);
    v13[1].super.isa = (Class)sub_1BE5D8;
    *(_QWORD *)v13[1].dataProviders = v12;
    v14 = a1;
    v15 = v5;
    swift_bridgeObjectRetain(a3);
    v16 = v11;
    swift_retain(v12);
    Tracker.transaction(block:)(sub_54CC0, v13);

    swift_release((BAEventReporter *)v12, v17, v18, v19, v20, v21, v22, v23);
    swift_release(v13, v24, v25, v26, v27, v28, v29, v30);
  }
}

uint64_t sub_1BD738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  __int128 v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  unint64_t v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  int64_t v65;
  int64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  BAEventReporter *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  int v77;
  char v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  BAEventReporter *v84;
  uint64_t v85;
  char v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  __int128 v91;
  __int128 v92;
  BAEventReporter *v93;
  uint64_t v94;
  BAEventReporter *v95;
  __int16 v96;
  int v97;
  char v98;
  int v99;
  char v100;
  int v101;
  char v102;
  uint64_t v103;
  BAEventReporter *v104;

  v90 = 2;
  v89 = 1;
  sub_863D0(a3, a4, &v88);
  v87 = 0;
  sub_CAB80(a3, a4, &v90, &v89, a5, a6 | ((HIDWORD(a6) & 1) << 32), &v88, &v87, (uint64_t)&v91);
  v12 = v91;
  v83 = v92;
  v13 = v93;
  v71 = v93;
  v14 = v95;
  v81 = v94;
  v82 = *((_QWORD *)&v92 + 1);
  v79 = v97;
  v80 = v96;
  v77 = v99;
  v78 = v98;
  v76 = v100;
  v86 = v102;
  v84 = v104;
  v85 = v103;
  v15 = type metadata accessor for DataEventTrait(0);
  v75 = v101;
  LOBYTE(v91) = a7;
  v16 = sub_71B4(&qword_299FD0);
  v17 = *(_QWORD *)(v15 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 32) & ~v18;
  v73 = v19 + *(_QWORD *)(v17 + 72);
  v74 = v16;
  v72 = v18 | 7;
  v20 = swift_allocObject(v16, v73, v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_1F5FF0;
  v21 = enum case for DataEventTrait.onlyOnce(_:);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104);
  v22(v20 + v19, enum case for DataEventTrait.onlyOnce(_:), v15);
  v23 = sub_1BE75C();
  AccessTracker.push<A>(data:traits:file:line:)(&v91, v20, 0xD00000000000006ALL, 0x80000000002228A0, 35, &type metadata for ViewSourceData, v23);
  swift_bridgeObjectRelease((BAEventReporter *)v20, v24, v25, v26, v27, v28, v29, v30);
  v91 = v12;
  LOBYTE(v92) = v83;
  *((_QWORD *)&v92 + 1) = v82;
  v93 = v13;
  v94 = v81;
  v95 = v14;
  v96 = v80;
  v97 = v79;
  v98 = v78;
  v99 = v77;
  v100 = v76;
  v101 = v75;
  v102 = v86;
  v103 = v85;
  v104 = v84;
  v31 = swift_allocObject(v74, v73, v72);
  *(_OWORD *)(v31 + 16) = xmmword_1F5FF0;
  v22(v31 + v19, v21, v15);
  v32 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v91, v31, 0xD00000000000006ALL, 0x80000000002228A0, 36, &type metadata for ContentData, v32);
  swift_bridgeObjectRelease(v14, v33, v34, v35, v36, v37, v38, v39);
  swift_bridgeObjectRelease(v71, v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease(*((BAEventReporter **)&v12 + 1), v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease((BAEventReporter *)v31, v54, v55, v56, v57, v58, v59, v60);
  swift_bridgeObjectRelease(v84, v61, v62, v63, v64, v65, v66, v67);
  v68 = type metadata accessor for ViewSupplementalContentEvent(0);
  v69 = sub_7E10(&qword_2A6690, type metadata accessor for ViewSupplementalContentEvent, (uint64_t)&protocol conformance descriptor for ViewSupplementalContentEvent);
  v91 = 0u;
  v92 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v68, 0, &v91, 0, 0, v68, v69);
  return sub_54960((uint64_t)&v91);
}

void EventReporter.emitCloseSupplementalContentPDFPicker(using:for:with:)(void *a1, uint64_t a2, objc_class *a3, objc_class *a4)
{
  objc_class *v4;
  id v9;
  BAEventReporter *v10;
  BAEventReporter *v11;
  objc_class *v12;
  id v13;
  objc_class *v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;

  v9 = a1;
  if (a1 || (v9 = sub_CB320()) != 0)
  {
    v10 = (BAEventReporter *)swift_allocObject(&unk_289850, 56, 7);
    v10[1].super.isa = v4;
    *(_QWORD *)v10[1].dataProviders = a2;
    v10[2].super.isa = a3;
    *(_QWORD *)v10[2].dataProviders = v9;
    v10[3].super.isa = a4;
    v11 = (BAEventReporter *)swift_allocObject(&unk_289878, 32, 7);
    v11[1].super.isa = (Class)sub_1BE644;
    *(_QWORD *)v11[1].dataProviders = v10;
    v12 = a4;
    swift_retain(v10);
    v13 = a1;
    v14 = v4;
    swift_bridgeObjectRetain(a3);
    v15 = v9;
    Tracker.transaction(block:)(sub_54CC0, v11);

    swift_release(v10, v16, v17, v18, v19, v20, v21, v22);
    swift_release(v11, v23, v24, v25, v26, v27, v28, v29);
  }
}

uint64_t sub_1BDB4C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  int64_t v68;
  int64_t v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  int64_t v75;
  int64_t v76;
  id v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  BAEventReporter *v88;
  BAEventReporter *v89;
  BAEventReporter *v90;
  int v91;
  char v92;
  int v93;
  char v94;
  int v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  BAEventReporter *v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  BAEventReporter *v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117[9];

  v117[0] = 3;
  v116 = 1;
  if (a6)
    v10 = objc_msgSend(a6, "intValue");
  else
    v10 = 0;
  v115 = 4;
  v114 = 0;
  LOBYTE(v104) = a6 == 0;
  sub_CAB80(a3, a4, v117, &v116, a5, v10 | ((unint64_t)(a6 == 0) << 32), &v115, &v114, (uint64_t)&v104);
  v100 = v104;
  v99 = v105;
  v88 = (BAEventReporter *)v106;
  v89 = (BAEventReporter *)*((_QWORD *)&v104 + 1);
  v97 = v107;
  v98 = *((_QWORD *)&v105 + 1);
  v90 = (BAEventReporter *)v108;
  v95 = DWORD1(v109);
  v96 = v109;
  v93 = HIDWORD(v109);
  v94 = BYTE8(v109);
  v92 = v110;
  v103 = BYTE5(v110);
  v101 = v111;
  v102 = *((_QWORD *)&v110 + 1);
  v11 = type metadata accessor for DataEventTrait(0);
  v91 = *(_DWORD *)((char *)&v110 + 1);
  LOBYTE(v104) = 0;
  DWORD1(v104) = 0;
  *((_QWORD *)&v104 + 1) = 0;
  v105 = 0xE000000000000000;
  v106 = 0xE000000000000000;
  v107 = 0;
  v108 = 0xE000000000000000;
  v109 = 0u;
  v110 = 0u;
  LODWORD(v111) = 0;
  BYTE4(v111) = 1;
  v112 = 0;
  v113 = 0xE000000000000000;
  v12 = sub_71B4(&qword_299FD0);
  v13 = *(_QWORD *)(v11 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = v15 + *(_QWORD *)(v13 + 72);
  v17 = v14 | 7;
  v18 = v12;
  v19 = swift_allocObject(v12, v16, v14 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_1F5FF0;
  v20 = enum case for DataEventTrait.onlyOnce(_:);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104);
  v21(v19 + v15, enum case for DataEventTrait.onlyOnce(_:), v11);
  v22 = sub_B4F80();
  AccessTracker.push<A>(data:traits:file:line:)(&v104, v19, 0xD00000000000006ALL, 0x80000000002228A0, 69, &type metadata for SectionData, v22);
  swift_bridgeObjectRelease((BAEventReporter *)v19, v23, v24, v25, v26, v27, v28, v29);
  v104 = xmmword_218320;
  *(_QWORD *)&v105 = 0x6450664F7473696CLL;
  *((_QWORD *)&v105 + 1) = 0xE900000000000066;
  v30 = swift_allocObject(v18, v16, v17);
  *(_OWORD *)(v30 + 16) = xmmword_1F5FF0;
  v21(v30 + v15, v20, v11);
  v31 = sub_1BE6D4();
  AccessTracker.push<A>(data:traits:file:line:)(&v104, v30, 0xD00000000000006ALL, 0x80000000002228A0, 70, &type metadata for PageData, v31);
  swift_bridgeObjectRelease((BAEventReporter *)v30, v32, v33, v34, v35, v36, v37, v38);
  v104 = 0uLL;
  LOBYTE(v105) = 2;
  *((_QWORD *)&v105 + 1) = 0x73694C65736F6C63;
  v106 = 0xEE00666450664F74;
  v108 = 0;
  *(_QWORD *)&v109 = 0;
  v107 = 0;
  v39 = swift_allocObject(v18, v16, v17);
  *(_OWORD *)(v39 + 16) = xmmword_1F5FF0;
  v21(v39 + v15, v20, v11);
  v40 = sub_1BE718();
  AccessTracker.push<A>(data:traits:file:line:)(&v104, v39, 0xD00000000000006ALL, 0x80000000002228A0, 71, &type metadata for ClickData, v40);
  swift_bridgeObjectRelease((BAEventReporter *)v39, v41, v42, v43, v44, v45, v46, v47);
  *(_QWORD *)&v104 = v100;
  *((_QWORD *)&v104 + 1) = v89;
  LOBYTE(v105) = v99;
  *((_QWORD *)&v105 + 1) = v98;
  v106 = (unint64_t)v88;
  v107 = v97;
  v108 = (unint64_t)v90;
  LOWORD(v109) = v96;
  DWORD1(v109) = v95;
  BYTE8(v109) = v94;
  HIDWORD(v109) = v93;
  LOBYTE(v110) = v92;
  *(_DWORD *)((char *)&v110 + 1) = v91;
  BYTE5(v110) = v103;
  *((_QWORD *)&v110 + 1) = v102;
  v111 = v101;
  v48 = swift_allocObject(v18, v16, v17);
  *(_OWORD *)(v48 + 16) = xmmword_1F5FF0;
  v21(v48 + v15, v20, v11);
  v49 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v104, v48, 0xD00000000000006ALL, 0x80000000002228A0, 72, &type metadata for ContentData, v49);
  swift_bridgeObjectRelease(v90, v50, v51, v52, v53, v54, v55, v56);
  swift_bridgeObjectRelease(v88, v57, v58, v59, v60, v61, v62, v63);
  swift_bridgeObjectRelease(v89, v64, v65, v66, v67, v68, v69, v70);
  swift_bridgeObjectRelease((BAEventReporter *)v48, v71, v72, v73, v74, v75, v76, v77);
  swift_bridgeObjectRelease(v101, v78, v79, v80, v81, v82, v83, v84);
  v85 = type metadata accessor for ClickEvent(0);
  v86 = sub_7E10((unint64_t *)&qword_2A6680, type metadata accessor for ClickEvent, (uint64_t)&protocol conformance descriptor for ClickEvent);
  v104 = 0u;
  v105 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v85, 0, &v104, 0, 0, v85, v86);
  return sub_54960((uint64_t)&v104);
}

void EventReporter.emitPageViewEventForSupplementalContentPDF(using:for:with:)(void *a1, uint64_t a2, objc_class *a3, objc_class *a4)
{
  objc_class *v4;
  id v9;
  BAEventReporter *v10;
  BAEventReporter *v11;
  objc_class *v12;
  id v13;
  objc_class *v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;

  v9 = a1;
  if (a1 || (v9 = sub_CB320()) != 0)
  {
    v10 = (BAEventReporter *)swift_allocObject(&unk_2898A0, 56, 7);
    v10[1].super.isa = v4;
    *(_QWORD *)v10[1].dataProviders = a2;
    v10[2].super.isa = a3;
    *(_QWORD *)v10[2].dataProviders = v9;
    v10[3].super.isa = a4;
    v11 = (BAEventReporter *)swift_allocObject(&unk_2898C8, 32, 7);
    v11[1].super.isa = (Class)sub_1BE6B4;
    *(_QWORD *)v11[1].dataProviders = v10;
    v12 = a4;
    swift_retain(v10);
    v13 = a1;
    v14 = v4;
    swift_bridgeObjectRetain(a3);
    v15 = v9;
    Tracker.transaction(block:)(sub_54CC0, v11);

    swift_release(v10, v16, v17, v18, v19, v20, v21, v22);
    swift_release(v11, v23, v24, v25, v26, v27, v28, v29);
  }
}

uint64_t sub_1BE11C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  int64_t v57;
  int64_t v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  BAEventReporter *v78;
  BAEventReporter *v79;
  BAEventReporter *v80;
  int v81;
  char v82;
  int v83;
  char v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  BAEventReporter *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  BAEventReporter *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unsigned __int8 v108[9];

  v108[0] = 3;
  v107 = 1;
  if (a6)
    v10 = objc_msgSend(a6, "intValue");
  else
    v10 = 0;
  v106 = 4;
  v105 = 0;
  LOBYTE(v95) = a6 == 0;
  sub_CAB80(a3, a4, v108, &v107, a5, v10 | ((unint64_t)(a6 == 0) << 32), &v106, &v105, (uint64_t)&v95);
  v90 = v95;
  v89 = v96;
  v79 = (BAEventReporter *)v97;
  v80 = (BAEventReporter *)*((_QWORD *)&v95 + 1);
  v87 = *((_QWORD *)&v97 + 1);
  v88 = *((_QWORD *)&v96 + 1);
  v78 = v98;
  v85 = DWORD1(v99);
  v86 = v99;
  v83 = HIDWORD(v99);
  v84 = BYTE8(v99);
  v82 = v100;
  v93 = BYTE5(v100);
  v91 = (BAEventReporter *)v101;
  v92 = *((_QWORD *)&v100 + 1);
  v11 = type metadata accessor for DataEventTrait(0);
  v81 = *(_DWORD *)((char *)&v100 + 1);
  *(_QWORD *)&v95 = 0;
  *((_QWORD *)&v95 + 1) = 0xE000000000000000;
  v96 = 0u;
  v97 = 0u;
  LOBYTE(v98) = 2;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v94 = sub_71B4(&qword_299FD0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = v14 + *(_QWORD *)(v12 + 72);
  v16 = v13 | 7;
  v77 = v13 | 7;
  v17 = swift_allocObject(v94, v15, v13 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1F5FF0;
  v18 = enum case for DataEventTrait.onlyOnce(_:);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104);
  v19(v17 + v14, enum case for DataEventTrait.onlyOnce(_:), v11);
  v20 = sub_A2754();
  AccessTracker.push<A>(data:traits:file:line:)(&v95, v17, 0xD00000000000006ALL, 0x80000000002228A0, 102, &type metadata for LinkData, v20);
  swift_bridgeObjectRelease((BAEventReporter *)v17, v21, v22, v23, v24, v25, v26, v27);
  v95 = xmmword_218320;
  *(_QWORD *)&v96 = 0x6450664F7473696CLL;
  *((_QWORD *)&v96 + 1) = 0xE900000000000066;
  v28 = swift_allocObject(v94, v15, v16);
  *(_OWORD *)(v28 + 16) = xmmword_1F5FF0;
  v19(v28 + v14, v18, v11);
  v29 = sub_1BE6D4();
  AccessTracker.push<A>(data:traits:file:line:)(&v95, v28, 0xD00000000000006ALL, 0x80000000002228A0, 103, &type metadata for PageData, v29);
  swift_bridgeObjectRelease((BAEventReporter *)v28, v30, v31, v32, v33, v34, v35, v36);
  *(_QWORD *)&v95 = v90;
  *((_QWORD *)&v95 + 1) = v80;
  LOBYTE(v96) = v89;
  *((_QWORD *)&v96 + 1) = v88;
  *(_QWORD *)&v97 = v79;
  *((_QWORD *)&v97 + 1) = v87;
  v98 = v78;
  LOWORD(v99) = v86;
  DWORD1(v99) = v85;
  BYTE8(v99) = v84;
  HIDWORD(v99) = v83;
  LOBYTE(v100) = v82;
  *(_DWORD *)((char *)&v100 + 1) = v81;
  BYTE5(v100) = v93;
  *((_QWORD *)&v100 + 1) = v92;
  *(_QWORD *)&v101 = v91;
  v37 = swift_allocObject(v94, v15, v77);
  *(_OWORD *)(v37 + 16) = xmmword_1F5FF0;
  v19(v37 + v14, v18, v11);
  v38 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v95, v37, 0xD00000000000006ALL, 0x80000000002228A0, 104, &type metadata for ContentData, v38);
  swift_bridgeObjectRelease(v78, v39, v40, v41, v42, v43, v44, v45);
  swift_bridgeObjectRelease(v79, v46, v47, v48, v49, v50, v51, v52);
  swift_bridgeObjectRelease(v80, v53, v54, v55, v56, v57, v58, v59);
  swift_bridgeObjectRelease((BAEventReporter *)v37, v60, v61, v62, v63, v64, v65, v66);
  swift_bridgeObjectRelease(v91, v67, v68, v69, v70, v71, v72, v73);
  v74 = type metadata accessor for PageViewEvent(0);
  v75 = sub_7E10(&qword_2A6670, type metadata accessor for PageViewEvent, (uint64_t)&protocol conformance descriptor for PageViewEvent);
  v95 = 0u;
  v96 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v74, 0, &v95, 0, 0, v74, v75);
  return sub_54960((uint64_t)&v95);
}

uint64_t sub_1BE544(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void *, uint64_t, uint64_t, void *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4, a2);
  v12 = v11;
  v13 = a3;
  v14 = a5;
  v15 = a1;
  a6(a3, v10, v12, a5);

  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_1BE5E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 54, 7);
}

uint64_t sub_1BE614(uint64_t a1)
{
  uint64_t v1;

  return sub_1BD738(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned int *)(v1 + 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 52) << 32), *(_BYTE *)(v1 + 53));
}

uint64_t sub_1BE644(uint64_t a1)
{
  return sub_1BE6C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BDB4C);
}

uint64_t sub_1BE650(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

uint64_t sub_1BE678()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1BE6B4(uint64_t a1)
{
  return sub_1BE6C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BE11C);
}

uint64_t sub_1BE6C0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

unint64_t sub_1BE6D4()
{
  unint64_t result;

  result = qword_2A6668;
  if (!qword_2A6668)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PageData, &type metadata for PageData);
    atomic_store(result, (unint64_t *)&qword_2A6668);
  }
  return result;
}

unint64_t sub_1BE718()
{
  unint64_t result;

  result = qword_2A6678;
  if (!qword_2A6678)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ClickData, &type metadata for ClickData);
    atomic_store(result, (unint64_t *)&qword_2A6678);
  }
  return result;
}

unint64_t sub_1BE75C()
{
  unint64_t result;

  result = qword_2A6688;
  if (!qword_2A6688)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewSourceData, &type metadata for ViewSourceData);
    atomic_store(result, (unint64_t *)&qword_2A6688);
  }
  return result;
}

uint64_t sub_1BE7AC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A6698, &enum case for SessionGroup.default(_:));
}

uint64_t static LoveEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CC8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6698, a1);
}

uint64_t sub_1BE7EC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A66B0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static LoveEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CD0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A66B0, a1);
}

uint64_t LoveEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LoveEvent(0) + 20);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for LoveEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6738, (uint64_t)&nominal type descriptor for LoveEvent);
}

uint64_t LoveEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LoveEvent(0) + 20);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LoveEvent.suggestionData.modify())()
{
  type metadata accessor for LoveEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LoveEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LoveEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LoveEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LoveEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LoveEvent.eventData.modify())()
{
  type metadata accessor for LoveEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LoveEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for LoveEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
}

uint64_t LoveEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LoveEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for LoveEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A67D0, (uint64_t)&nominal type descriptor for LoveEvent.Model);
}

uint64_t LoveEvent.Model.init(contentData:suggestionData:eventData:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  v16 = *a2;
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_BYTE *)(a4 + 96) = v16;
  v17 = a4 + *(int *)(type metadata accessor for LoveEvent.Model(0) + 24);
  v18 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a3, v18);
}

uint64_t sub_1BEB98()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6974736567677573;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_1BEC0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C01B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BEC30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BEE7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BEC58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1BEE7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LoveEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;
  char v41;
  int v42;
  char v43;
  __int128 v44;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A66C8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1BEE7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LoveEvent.Model.CodingKeys, &type metadata for LoveEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v32[0] = *(_QWORD *)v4;
  v32[1] = v13;
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v40 = v21;
  v41 = v22;
  v42 = *(_DWORD *)(v4 + 73);
  v43 = v23;
  v44 = *(_OWORD *)(v4 + 80);
  v31 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v31, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    LOBYTE(v32[0]) = *(_BYTE *)(v4 + 96);
    v31 = 1;
    v25 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v6, &type metadata for SuggestionData, v25);
    v26 = v4 + *(int *)(type metadata accessor for LoveEvent.Model(0) + 24);
    LOBYTE(v32[0]) = 2;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v32, v6, v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1BEE7C()
{
  unint64_t result;

  result = qword_2A66D0;
  if (!qword_2A66D0)
  {
    result = swift_getWitnessTable(asc_2184FC, &type metadata for LoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A66D0);
  }
  return result;
}

void LoveEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[2];
  char v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  __int128 v53;
  char v54;

  v35 = a2;
  v36 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_71B4(&qword_2A66D8);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LoveEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v39 = a1;
  sub_7988(a1, v12);
  v14 = sub_1BEE7C();
  v37 = v8;
  v15 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LoveEvent.Model.CodingKeys, &type metadata for LoveEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v39);
  }
  else
  {
    v40 = v9;
    v16 = v6;
    v17 = v5;
    v18 = v36;
    v54 = 0;
    v19 = sub_1779C();
    v21 = v37;
    v20 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, &type metadata for ContentData, &v54, v38, &type metadata for ContentData, v19);
    v22 = v41[1];
    v23 = v42;
    v24 = v43;
    v25 = v44;
    v26 = v45;
    v27 = v46;
    v28 = v47;
    v29 = v48;
    v30 = v49;
    v31 = v50;
    v32 = v52;
    *(_QWORD *)v11 = v41[0];
    *((_QWORD *)v11 + 1) = v22;
    v11[16] = v23;
    *(_OWORD *)(v11 + 24) = v24;
    *((_QWORD *)v11 + 5) = v25;
    *((_QWORD *)v11 + 6) = v26;
    *((_WORD *)v11 + 28) = v27;
    *((_DWORD *)v11 + 15) = v28;
    v11[64] = v29;
    *((_DWORD *)v11 + 17) = v30;
    v11[72] = v31;
    *(_DWORD *)(v11 + 73) = v51;
    v11[77] = v32;
    *((_OWORD *)v11 + 5) = v53;
    v54 = 1;
    v33 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, &type metadata for SuggestionData, &v54, v20, &type metadata for SuggestionData, v33);
    v11[96] = v41[0];
    LOBYTE(v41[0]) = 2;
    v34 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v41, v20, v18, v34);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v40 + 24)], v17, v18);
    sub_1BF1E4((uint64_t)v11, v35);
    sub_7DAC(v39);
    sub_1BF228((uint64_t)v11);
  }
}

uint64_t sub_1BF1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LoveEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BF228(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LoveEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BF264(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  LoveEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1BF278(_QWORD *a1)
{
  return LoveEvent.Model.encode(to:)(a1);
}

uint64_t sub_1BF28C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CC8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6698, (uint64_t)sub_1BE7AC, a1);
}

uint64_t sub_1BF2B0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CD0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A66B0, (uint64_t)sub_1BE7EC, a1);
}

uint64_t sub_1BF2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for LoveEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for LoveEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for LoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for LoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for LoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for LoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1BF80C);
}

uint64_t sub_1BF80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296F78);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for LoveEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1BF8BC);
}

uint64_t sub_1BF8BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296F78);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1BF968(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for LoveEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t)a2 + v10;
    v12 = a1 + v10;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v12, v11, v13);
  }
  return v3;
}

uint64_t initializeWithCopy for LoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(int *)(a3 + 24);
  v10 = a2 + v9;
  v11 = a1 + v9;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v11, v10, v12);
  return a1;
}

uint64_t assignWithCopy for LoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for LoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1BFE98);
}

uint64_t sub_1BFE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1BFF20);
}

uint64_t sub_1BFF20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BFF94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_218420;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LoveEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C005C + 4 * byte_218335[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C0090 + 4 * byte_218330[v4]))();
}

uint64_t sub_1C0090(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C0098(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C00A0);
  return result;
}

uint64_t sub_1C00AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C00B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C00B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C00C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LoveEvent.Model.CodingKeys()
{
  return &type metadata for LoveEvent.Model.CodingKeys;
}

unint64_t sub_1C00E0()
{
  unint64_t result;

  result = qword_2A6810;
  if (!qword_2A6810)
  {
    result = swift_getWitnessTable(asc_2184D4, &type metadata for LoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6810);
  }
  return result;
}

unint64_t sub_1C0128()
{
  unint64_t result;

  result = qword_2A6818;
  if (!qword_2A6818)
  {
    result = swift_getWitnessTable(aM_13, &type metadata for LoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6818);
  }
  return result;
}

unint64_t sub_1C0170()
{
  unint64_t result;

  result = qword_2A6820;
  if (!qword_2A6820)
  {
    result = swift_getWitnessTable(aU_22, &type metadata for LoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6820);
  }
  return result;
}

uint64_t sub_1C01B4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v7 = 0xEE00617461446E6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1C0350(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A6828, &enum case for SessionGroup.default(_:));
}

uint64_t static TabViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CD8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6828, a1);
}

uint64_t sub_1C0390(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A6840, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static TabViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CE0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6840, a1);
}

uint64_t TabViewEvent.tabData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A6858);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TabViewEvent.tabData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A6858);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t TabViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TabViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for TabViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A68D0, (uint64_t)&nominal type descriptor for TabViewEvent);
}

uint64_t TabViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TabViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*TabViewEvent.eventData.modify())()
{
  type metadata accessor for TabViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t TabViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TabViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TabViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TabViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*TabViewEvent.timedData.modify())()
{
  type metadata accessor for TabViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t TabViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A6858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for TabViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t TabViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TabViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for TabViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6970, (uint64_t)&nominal type descriptor for TabViewEvent.Model);
}

uint64_t TabViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TabViewEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TabViewEvent.Model.init(tabData:eventData:timedData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  *a4 = *a1;
  v7 = type metadata accessor for TabViewEvent.Model(0);
  v8 = &a4[*(int *)(v7 + 20)];
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a2, v9);
  v10 = &a4[*(int *)(v7 + 24)];
  v11 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

uint64_t sub_1C07C8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0x61746144626174;
}

uint64_t sub_1C082C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C1CEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C0850(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0A70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C0878(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0A70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabViewEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_71B4(&qword_2A6860);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C0A70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TabViewEvent.Model.CodingKeys, &type metadata for TabViewEvent.Model.CodingKeys, v11, v9, v10);
  v25 = *v3;
  v24 = 0;
  v12 = sub_1AA8D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, &type metadata for TabData, v12);
  if (!v2)
  {
    v13 = type metadata accessor for TabViewEvent.Model(0);
    v14 = &v3[*(int *)(v13 + 20)];
    v23 = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v23, v5, v15, v16);
    v17 = &v3[*(int *)(v13 + 24)];
    v22 = 2;
    v18 = type metadata accessor for TimedData(0);
    v19 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v22, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1C0A70()
{
  unint64_t result;

  result = qword_2A6868;
  if (!qword_2A6868)
  {
    result = swift_getWitnessTable(asc_21870C, &type metadata for TabViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6868);
  }
  return result;
}

uint64_t TabViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;

  v30 = a2;
  v32 = type metadata accessor for TimedData(0);
  v29 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v31 = (uint64_t *)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v5 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  v34 = v5;
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_71B4(&qword_2A6870);
  v8 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TabViewEvent.Model(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v15);
  v16 = sub_1C0A70();
  v35 = v10;
  v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TabViewEvent.Model.CodingKeys, &type metadata for TabViewEvent.Model.CodingKeys, v16, v15, v14);
  if (v17)
    return sub_7DAC(a1);
  v18 = v13;
  v19 = v33;
  v20 = v34;
  v40 = 0;
  v21 = sub_1AA890();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for TabData, &v40, v36, &type metadata for TabData, v21);
  v37 = v18;
  *v18 = v41;
  v39 = 1;
  v22 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v19, &v39, v36, v19, v22);
  v28 = v11;
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v20 + 32))(&v37[*(int *)(v11 + 20)], v7, v19);
  v38 = 2;
  v23 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v25 = v31;
  v24 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v32, &v38, v36, v32, v23);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v35, v36);
  v26 = (uint64_t)v37;
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v29 + 32))(&v37[*(int *)(v28 + 24)], v25, v24);
  sub_1C0DD8(v26, v30);
  sub_7DAC(a1);
  return sub_1C0E1C(v26);
}

uint64_t sub_1C0DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C0E1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TabViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C0E58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TabViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1C0E6C(_QWORD *a1)
{
  return TabViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_1C0E80@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CD8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6828, (uint64_t)sub_1C0350, a1);
}

uint64_t sub_1C0EA4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CE0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6840, (uint64_t)sub_1C0390, a1);
}

uint64_t sub_1C0EC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A6858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for TabViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_2A6858);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for TabViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_2A6858);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for TabViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A6858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for TabViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A6858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for TabViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A6858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for TabViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A6858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C13EC);
}

uint64_t sub_1C13EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_2A6858);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TabViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C149C);
}

uint64_t sub_1C149C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_2A6858);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1C1548(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_1C15E8(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_1C15E8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2A68E0)
  {
    v2 = sub_1AA890();
    v3 = sub_1AA8D8();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for TabData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2A68E0);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TabViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for EventData(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

_BYTE *initializeWithCopy for TabViewEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

_BYTE *assignWithCopy for TabViewEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_BYTE *initializeWithTake for TabViewEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

_BYTE *assignWithTake for TabViewEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C197C);
}

uint64_t sub_1C197C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 249)
  {
    v4 = *a1;
    if (v4 >= 7)
      return v4 - 6;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TabViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C1A20);
}

_BYTE *sub_1C1A20(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 249)
  {
    *result = a2 + 6;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1C1AB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_218630;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TabViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C1B94 + 4 * byte_218555[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C1BC8 + 4 * byte_218550[v4]))();
}

uint64_t sub_1C1BC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1BD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C1BD8);
  return result;
}

uint64_t sub_1C1BE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C1BECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C1BF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1BF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabViewEvent.Model.CodingKeys()
{
  return &type metadata for TabViewEvent.Model.CodingKeys;
}

unint64_t sub_1C1C18()
{
  unint64_t result;

  result = qword_2A69B0;
  if (!qword_2A69B0)
  {
    result = swift_getWitnessTable(aU_23, &type metadata for TabViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A69B0);
  }
  return result;
}

unint64_t sub_1C1C60()
{
  unint64_t result;

  result = qword_2A69B8;
  if (!qword_2A69B8)
  {
    result = swift_getWitnessTable(byte_218654, &type metadata for TabViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A69B8);
  }
  return result;
}

unint64_t sub_1C1CA8()
{
  unint64_t result;

  result = qword_2A69C0;
  if (!qword_2A69C0)
  {
    result = swift_getWitnessTable(byte_21867C, &type metadata for TabViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A69C0);
  }
  return result;
}

uint64_t sub_1C1CEC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x61746144626174 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61746144626174, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v7 = 0xE900000000000061;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void static RatingData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1C1EAC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C1F18 + 4 * byte_218762[a1]))(6647407);
}

uint64_t sub_1C1F18(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6647407 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6647407, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

uint64_t sub_1C1FD8()
{
  return 0x676E69746172;
}

uint64_t sub_1C1FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x676E69746172 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E69746172, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1C2078(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C21C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C20A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C21C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RatingData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A69C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1C21C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RatingData.CodingKeys, &type metadata for RatingData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1C2208();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for Rating, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1C21C4()
{
  unint64_t result;

  result = qword_2A69D0;
  if (!qword_2A69D0)
  {
    result = swift_getWitnessTable(aI_7, &type metadata for RatingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A69D0);
  }
  return result;
}

unint64_t sub_1C2208()
{
  unint64_t result;

  result = qword_2A69D8;
  if (!qword_2A69D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Rating, &type metadata for Rating);
    atomic_store(result, (unint64_t *)&qword_2A69D8);
  }
  return result;
}

uint64_t RatingData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A69E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C21C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RatingData.CodingKeys, &type metadata for RatingData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1C2368();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Rating, v13, v5, &type metadata for Rating, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_1C2368()
{
  unint64_t result;

  result = qword_2A69E8;
  if (!qword_2A69E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Rating, &type metadata for Rating);
    atomic_store(result, (unint64_t *)&qword_2A69E8);
  }
  return result;
}

uint64_t sub_1C23B4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return RatingData.init(from:)(a1, a2);
}

uint64_t sub_1C23C8(_QWORD *a1)
{
  return RatingData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for RatingData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1C2428 + 4 * byte_21876D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1C245C + 4 * byte_218768[v4]))();
}

uint64_t sub_1C245C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2464(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C246CLL);
  return result;
}

uint64_t sub_1C2478(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2480);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1C2484(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C248C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RatingData()
{
  return &type metadata for RatingData;
}

uint64_t storeEnumTagSinglePayload for RatingData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C24E8 + 4 * byte_218772[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2508 + 4 * byte_218777[v4]))();
}

_BYTE *sub_1C24E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2508(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2510(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2518(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2520(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2528(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RatingData.CodingKeys()
{
  return &type metadata for RatingData.CodingKeys;
}

unint64_t sub_1C2548()
{
  unint64_t result;

  result = qword_2A69F0;
  if (!qword_2A69F0)
  {
    result = swift_getWitnessTable(byte_2188E0, &type metadata for RatingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A69F0);
  }
  return result;
}

unint64_t sub_1C2590()
{
  unint64_t result;

  result = qword_2A69F8;
  if (!qword_2A69F8)
  {
    result = swift_getWitnessTable(byte_218850, &type metadata for RatingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A69F8);
  }
  return result;
}

unint64_t sub_1C25D8()
{
  unint64_t result;

  result = qword_2A6A00;
  if (!qword_2A6A00)
  {
    result = swift_getWitnessTable(byte_218878, &type metadata for RatingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6A00);
  }
  return result;
}

BookAnalytics::SelectedResultSection_optional __swiftcall SelectedResultSection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SelectedResultSection_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268F70, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SelectedResultSection.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C26A4 + 4 * byte_218960[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1C26A4()
{
  return 0x7972617262696CLL;
}

uint64_t sub_1C26B8()
{
  return 0x726F74536B6F6F62;
}

uint64_t sub_1C26D4()
{
  return 0x6F6F626F69647561;
}

uint64_t sub_1C26F8()
{
  return 7105633;
}

void sub_1C2708(char *a1)
{
  sub_28440(*a1);
}

unint64_t sub_1C2718()
{
  unint64_t result;

  result = qword_2A6A08;
  if (!qword_2A6A08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectedResultSection, &type metadata for SelectedResultSection);
    atomic_store(result, (unint64_t *)&qword_2A6A08);
  }
  return result;
}

void sub_1C275C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1C27A8()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x7972617262696CLL, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1C2834()
{
  __asm { BR              X10 }
}

uint64_t sub_1C2870(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x7972617262696CLL, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1C28E8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1C2930()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x7972617262696CLL, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

BookAnalytics::SelectedResultSection_optional sub_1C29BC(Swift::String *a1)
{
  return SelectedResultSection.init(rawValue:)(*a1);
}

uint64_t sub_1C29C8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1C29F8 + 4 * byte_218974[*v0]))();
}

void sub_1C29F8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7972617262696CLL;
  a1[1] = v1;
}

void sub_1C2A10(_QWORD *a1@<X8>)
{
  *a1 = 0x726F74536B6F6F62;
  a1[1] = 0xE900000000000065;
}

void sub_1C2A30(char *a1@<X8>)
{
  strcpy(a1, "audiobookStore");
  a1[15] = -18;
}

void sub_1C2A58(_QWORD *a1@<X8>)
{
  *a1 = 7105633;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1C2A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C2BE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1C2AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C2BE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SelectedResultSection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C2B60 + 4 * byte_21897E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C2B94 + 4 * byte_218979[v4]))();
}

uint64_t sub_1C2B94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2B9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2BA4);
  return result;
}

uint64_t sub_1C2BB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2BB8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C2BBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2BC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SelectedResultSection()
{
  return &type metadata for SelectedResultSection;
}

unint64_t sub_1C2BE0()
{
  unint64_t result;

  result = qword_2A6A10;
  if (!qword_2A6A10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SelectedResultSection, &type metadata for SelectedResultSection);
    atomic_store(result, (unint64_t *)&qword_2A6A10);
  }
  return result;
}

uint64_t sub_1C2C24(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A6A18, &enum case for SessionGroup.default(_:));
}

uint64_t static UnifiedMessageExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CE8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6A18, a1);
}

uint64_t sub_1C2C64(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A6A30, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static UnifiedMessageExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295CF0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6A30, a1);
}

uint64_t UnifiedMessageExposureEvent.messageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A07E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t UnifiedMessageExposureEvent.messageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A07E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t UnifiedMessageExposureEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UnifiedMessageExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6AB8, (uint64_t)&nominal type descriptor for UnifiedMessageExposureEvent);
}

uint64_t UnifiedMessageExposureEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UnifiedMessageExposureEvent.contentData.modify())()
{
  type metadata accessor for UnifiedMessageExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UnifiedMessageExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UnifiedMessageExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UnifiedMessageExposureEvent.eventData.modify())()
{
  type metadata accessor for UnifiedMessageExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UnifiedMessageExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UnifiedMessageExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UnifiedMessageExposureEvent.timedData.modify())()
{
  type metadata accessor for UnifiedMessageExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UnifiedMessageExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for UnifiedMessageExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t UnifiedMessageExposureEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[7];
  v3 = v1[8];
  v4 = v1[9];
  v5 = v1[10];
  v6 = v1[11];
  v7 = v1[12];
  v8 = v1[13];
  v9 = v1[14];
  v10 = v1[15];
  v11 = v1[16];
  v12 = v1[17];
  v13 = v1[18];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t UnifiedMessageExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UnifiedMessageExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6B50, (uint64_t)&nominal type descriptor for UnifiedMessageExposureEvent.Model);
}

uint64_t UnifiedMessageExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageExposureEvent.Model(0) + 28);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UnifiedMessageExposureEvent.Model.init(messageData:contentData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  v8 = a2[1];
  *(_OWORD *)(a5 + 56) = *a2;
  *(_OWORD *)(a5 + 72) = v8;
  v9 = a2[3];
  *(_OWORD *)(a5 + 88) = a2[2];
  *(_OWORD *)(a5 + 104) = v9;
  v10 = a2[5];
  *(_OWORD *)(a5 + 120) = a2[4];
  v11 = *(_BYTE *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)a5 = *(_BYTE *)a1;
  *(_BYTE *)(a5 + 24) = v11;
  *(_QWORD *)(a5 + 48) = v12;
  *(_OWORD *)(a5 + 136) = v10;
  v13 = type metadata accessor for UnifiedMessageExposureEvent.Model(0);
  v14 = a5 + *(int *)(v13 + 24);
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a3, v15);
  v16 = a5 + *(int *)(v13 + 28);
  v17 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a4, v17);
}

uint64_t sub_1C3234()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C326C + 4 * byte_218AB0[*v0]))(0x446567617373656DLL, 0xEB00000000617461);
}

uint64_t sub_1C326C()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_1C3280()
{
  return 0x746144746E657665;
}

uint64_t sub_1C32AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C50C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C32D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C356C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C32F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C356C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UnifiedMessageExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  v3 = v1;
  v5 = sub_71B4(&qword_2A6A48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C356C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UnifiedMessageExposureEvent.Model.CodingKeys, &type metadata for UnifiedMessageExposureEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 24);
  v13 = *(_QWORD *)(v3 + 48);
  v27[0] = *(_BYTE *)v3;
  *(_OWORD *)&v27[8] = *(_OWORD *)(v3 + 8);
  v27[24] = v12;
  v28 = *(_OWORD *)(v3 + 32);
  *(_QWORD *)&v29 = v13;
  v32 = 0;
  v14 = sub_136224();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v27, &v32, v5, &type metadata for MessageData, v14);
  if (!v2)
  {
    v15 = *(_OWORD *)(v3 + 72);
    *(_OWORD *)v27 = *(_OWORD *)(v3 + 56);
    *(_OWORD *)&v27[16] = v15;
    v16 = *(_OWORD *)(v3 + 104);
    v28 = *(_OWORD *)(v3 + 88);
    v29 = v16;
    v17 = *(_OWORD *)(v3 + 136);
    v30 = *(_OWORD *)(v3 + 120);
    v31 = v17;
    v32 = 1;
    v18 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v32, v5, &type metadata for ContentData, v18);
    v19 = type metadata accessor for UnifiedMessageExposureEvent.Model(0);
    v20 = v3 + *(int *)(v19 + 24);
    v27[0] = 2;
    v21 = type metadata accessor for EventData(0);
    v22 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, v27, v5, v21, v22);
    v23 = v3 + *(int *)(v19 + 28);
    v27[0] = 3;
    v24 = type metadata accessor for TimedData(0);
    v25 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, v27, v5, v24, v25);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1C356C()
{
  unint64_t result;

  result = qword_2A6A50;
  if (!qword_2A6A50)
  {
    result = swift_getWitnessTable(byte_218C9C, &type metadata for UnifiedMessageExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6A50);
  }
  return result;
}

void UnifiedMessageExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;

  v37 = a2;
  v38 = type metadata accessor for TimedData(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v39 = (uint64_t *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v6 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_71B4(&qword_2A6A58);
  v7 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UnifiedMessageExposureEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v43 = a1;
  sub_7988(a1, v13);
  v15 = sub_1C356C();
  v42 = v9;
  v16 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UnifiedMessageExposureEvent.Model.CodingKeys, &type metadata for UnifiedMessageExposureEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(v43);
  }
  else
  {
    v44 = v6;
    v17 = v7;
    v18 = v4;
    v19 = v40;
    v50 = 0;
    v20 = sub_136668();
    v21 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45, &type metadata for MessageData, &v50, v41, &type metadata for MessageData, v20);
    v22 = v45[24];
    v23 = v47;
    v24 = (uint64_t)v12;
    *v12 = v45[0];
    *(_OWORD *)(v12 + 8) = *(_OWORD *)&v45[8];
    v12[24] = v22;
    *((_OWORD *)v12 + 2) = v46;
    *((_QWORD *)v12 + 6) = v23;
    v50 = 1;
    v25 = sub_1779C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &type metadata for ContentData, &v50, v21, &type metadata for ContentData, v25);
    v26 = *(_OWORD *)&v45[16];
    *(_OWORD *)(v12 + 56) = *(_OWORD *)v45;
    *(_OWORD *)(v12 + 72) = v26;
    v27 = v47;
    *(_OWORD *)(v12 + 88) = v46;
    *(_OWORD *)(v12 + 104) = v27;
    v28 = v49;
    *(_OWORD *)(v12 + 120) = v48;
    *(_OWORD *)(v12 + 136) = v28;
    v45[0] = 2;
    v29 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v30 = v44;
    v35 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v44, v19, v45, v21, v19, v29);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32))(v24 + *(int *)(v10 + 24), v30, v19);
    v45[0] = 3;
    v31 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v32 = v21;
    v33 = v38;
    v34 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v39, v38, v45, v32, v38, v31);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v42, v41);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v36 + 32))(v24 + *(int *)(v10 + 28), v34, v33);
    sub_1C3A00(v24, v37);
    sub_7DAC(v43);
    sub_1C3A44(v24);
  }
}

uint64_t sub_1C3A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnifiedMessageExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3A44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnifiedMessageExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C3A80(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  UnifiedMessageExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1C3A94(_QWORD *a1)
{
  return UnifiedMessageExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_1C3AA8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CE8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6A18, (uint64_t)sub_1C2C24, a1);
}

uint64_t sub_1C3ACC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295CF0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6A30, (uint64_t)sub_1C2C64, a1);
}

uint64_t sub_1C3AF0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for UnifiedMessageExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2A07E0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for UnifiedMessageExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for UnifiedMessageExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for UnifiedMessageExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for UnifiedMessageExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for UnifiedMessageExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnifiedMessageExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C416C);
}

uint64_t sub_1C416C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A07E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D78);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for UnifiedMessageExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C4244);
}

uint64_t sub_1C4244(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2A07E0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D78);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1C4318(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2A0890, (uint64_t (*)(void))sub_136668, (uint64_t (*)(void))sub_136224, (uint64_t)&type metadata for MessageData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_87D8(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for UnifiedMessageExposureEvent.Model(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v4[24] = *((_BYTE *)a2 + 24);
    v9 = a2[4];
    v8 = a2[5];
    *((_QWORD *)v4 + 4) = v9;
    *((_QWORD *)v4 + 5) = v8;
    v10 = a2[6];
    *((_QWORD *)v4 + 6) = v10;
    v11 = a2[8];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    if (v11)
    {
      *((_QWORD *)v4 + 7) = a2[7];
      *((_QWORD *)v4 + 8) = v11;
      v4[72] = *((_BYTE *)a2 + 72);
      v12 = a2[11];
      *((_QWORD *)v4 + 10) = a2[10];
      *((_QWORD *)v4 + 11) = v12;
      v13 = a2[13];
      *((_QWORD *)v4 + 12) = a2[12];
      *((_QWORD *)v4 + 13) = v13;
      *((_WORD *)v4 + 56) = *((_WORD *)a2 + 56);
      v4[120] = *((_BYTE *)a2 + 120);
      *((_DWORD *)v4 + 29) = *((_DWORD *)a2 + 29);
      *((_DWORD *)v4 + 31) = *((_DWORD *)a2 + 31);
      v4[128] = *((_BYTE *)a2 + 128);
      *(_DWORD *)(v4 + 129) = *(_DWORD *)((char *)a2 + 129);
      v4[133] = *((_BYTE *)a2 + 133);
      v14 = a2[18];
      *((_QWORD *)v4 + 17) = a2[17];
      *((_QWORD *)v4 + 18) = v14;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v4 + 104) = v16;
      v17 = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(v4 + 136) = v17;
      v18 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 72) = v18;
    }
    v19 = *(int *)(a3 + 24);
    v20 = &v4[v19];
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for EventData(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = *(int *)(a3 + 28);
    v24 = &v4[v23];
    v25 = (uint64_t)a2 + v23;
    v26 = type metadata accessor for TimedData(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  }
  return v4;
}

uint64_t destroy for UnifiedMessageExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  v4 = a1[8];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[11]);
    swift_bridgeObjectRelease(a1[13]);
    swift_bridgeObjectRelease(a1[18]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for UnifiedMessageExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v10;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v11;
    v12 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v12;
    *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_DWORD *)(a1 + 129) = *(_DWORD *)(a2 + 129);
    *(_BYTE *)(a1 + 133) = *(_BYTE *)(a2 + 133);
    v13 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v14;
    v15 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v15;
    v16 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v16;
  }
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = *(int *)(a3 + 28);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  return a1;
}

uint64_t assignWithCopy for UnifiedMessageExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  BAEventReporter *v15;
  uint64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  _OWORD *v33;
  _OWORD *v34;
  BAEventReporter *v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  BAEventReporter *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  int v63;
  int v64;
  uint64_t v65;
  BAEventReporter *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v15 = *(BAEventReporter **)(a1 + 32);
  v16 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  v33 = (_OWORD *)(a1 + 56);
  v34 = (_OWORD *)(a2 + 56);
  v35 = *(BAEventReporter **)(a1 + 64);
  v36 = *(_QWORD *)(a2 + 64);
  if (v35)
  {
    if (v36)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v37 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v35, v38, v39, v40, v41, v42, v43, v44);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v45 = *(_QWORD *)(a2 + 88);
      v46 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v54 = *(_QWORD *)(a2 + 104);
      v55 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
      v63 = *(_DWORD *)(a2 + 116);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_DWORD *)(a1 + 116) = v63;
      v64 = *(_DWORD *)(a2 + 124);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_DWORD *)(a1 + 124) = v64;
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
      *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
      *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
      *(_BYTE *)(a1 + 133) = *(_BYTE *)(a2 + 133);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v65 = *(_QWORD *)(a2 + 144);
      v66 = *(BAEventReporter **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 56));
      v80 = *(_OWORD *)(a2 + 72);
      *v33 = *v34;
      *(_OWORD *)(a1 + 72) = v80;
      v81 = *(_OWORD *)(a2 + 136);
      v83 = *(_OWORD *)(a2 + 88);
      v82 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v81;
      *(_OWORD *)(a1 + 88) = v83;
      *(_OWORD *)(a1 + 104) = v82;
    }
  }
  else if (v36)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v74 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v74;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v75 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v75;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v76 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v76;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    v77 = *(_DWORD *)(a2 + 116);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_DWORD *)(a1 + 116) = v77;
    v78 = *(_DWORD *)(a2 + 124);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_DWORD *)(a1 + 124) = v78;
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
    *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
    *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
    *(_BYTE *)(a1 + 133) = *(_BYTE *)(a2 + 133);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v79 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v79;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v79);
  }
  else
  {
    v84 = *(_OWORD *)(a2 + 72);
    *v33 = *v34;
    *(_OWORD *)(a1 + 72) = v84;
    v85 = *(_OWORD *)(a2 + 88);
    v86 = *(_OWORD *)(a2 + 104);
    v87 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v87;
    *(_OWORD *)(a1 + 88) = v85;
    *(_OWORD *)(a1 + 104) = v86;
  }
  v88 = *(int *)(a3 + 24);
  v89 = a1 + v88;
  v90 = a2 + v88;
  v91 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 24))(v89, v90, v91);
  v92 = *(int *)(a3 + 28);
  v93 = a1 + v92;
  v94 = a2 + v92;
  v95 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 24))(v93, v94, v95);
  return a1;
}

uint64_t initializeWithTake for UnifiedMessageExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for UnifiedMessageExposureEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  BAEventReporter *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;
  uint64_t v21;
  BAEventReporter *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  const char *v30;
  void *v31;
  void *v32;
  void *v33;
  int64_t v34;
  int64_t v35;
  void *v36;
  BAEventReporter *v37;
  uint64_t v38;
  uint64_t v39;
  BAEventReporter *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  uint64_t v48;
  BAEventReporter *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  uint64_t v57;
  BAEventReporter *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v13 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v37 = *(BAEventReporter **)(a1 + 64);
  if (!v37)
    goto LABEL_5;
  v38 = *(_QWORD *)(a2 + 64);
  if (!v38)
  {
    sub_4E9F4((_QWORD *)(a1 + 56));
LABEL_5:
    v66 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v66;
    v67 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v67;
    v68 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v68;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v38;
  swift_bridgeObjectRelease(v37, v30, v31, v32, v33, v34, v35, v36);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v39 = *(_QWORD *)(a2 + 88);
  v40 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v39;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v48 = *(_QWORD *)(a2 + 104);
  v49 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 129) = *(_DWORD *)(a2 + 129);
  *(_BYTE *)(a1 + 133) = *(_BYTE *)(a2 + 133);
  v57 = *(_QWORD *)(a2 + 144);
  v58 = *(BAEventReporter **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
LABEL_6:
  v69 = a3[6];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 40))(v70, v71, v72);
  v73 = a3[7];
  v74 = a1 + v73;
  v75 = a2 + v73;
  v76 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnifiedMessageExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C4D44);
}

uint64_t sub_1C4D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UnifiedMessageExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C4DF0);
}

uint64_t sub_1C4DF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1C4E8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = "8";
  v5[1] = &unk_218BC0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UnifiedMessageExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C4F70 + 4 * byte_218AB9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C4FA4 + 4 * byte_218AB4[v4]))();
}

uint64_t sub_1C4FA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C4FAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C4FB4);
  return result;
}

uint64_t sub_1C4FC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C4FC8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C4FCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C4FD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnifiedMessageExposureEvent.Model.CodingKeys()
{
  return &type metadata for UnifiedMessageExposureEvent.Model.CodingKeys;
}

unint64_t sub_1C4FF4()
{
  unint64_t result;

  result = qword_2A6B90;
  if (!qword_2A6B90)
  {
    result = swift_getWitnessTable(a5_4, &type metadata for UnifiedMessageExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6B90);
  }
  return result;
}

unint64_t sub_1C503C()
{
  unint64_t result;

  result = qword_2A6B98;
  if (!qword_2A6B98)
  {
    result = swift_getWitnessTable(asc_218BE4, &type metadata for UnifiedMessageExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6B98);
  }
  return result;
}

unint64_t sub_1C5084()
{
  unint64_t result;

  result = qword_2A6BA0;
  if (!qword_2A6BA0)
  {
    result = swift_getWitnessTable(aE_18, &type metadata for UnifiedMessageExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6BA0);
  }
  return result;
}

uint64_t sub_1C50C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x446567617373656DLL && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446567617373656DLL, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1C52BC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7469736F50646E65;
  if (*v0 != 1)
    v1 = 0x6E654C6C61746F74;
  if (*v0)
    return v1;
  else
    return 0x736F507472617473;
}

uint64_t sub_1C5334@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C5898(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C5358(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C54FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C5380(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C54FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ScrubData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_2A6BA8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v16 = v1[1];
  v15 = v1[2];
  v10 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v10);
  v11 = sub_1C54FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScrubData.CodingKeys, &type metadata for ScrubData.CodingKeys, v11, v10, v9);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v19, v4);
  if (!v2)
  {
    v12 = v15;
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v18, v4);
    v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v12, &v17, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1C54FC()
{
  unint64_t result;

  result = qword_2A6BB0;
  if (!qword_2A6BB0)
  {
    result = swift_getWitnessTable(byte_218E8C, &type metadata for ScrubData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6BB0);
  }
  return result;
}

uint64_t ScrubData.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v5 = sub_71B4(&qword_2A6BB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C54FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScrubData.CodingKeys, &type metadata for ScrubData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v19 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
    v18 = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5);
    v17 = 2;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1C56BC@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return ScrubData.init(from:)(a1, a2);
}

uint64_t sub_1C56D0(_QWORD *a1)
{
  return ScrubData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ScrubData()
{
  return &type metadata for ScrubData;
}

uint64_t storeEnumTagSinglePayload for ScrubData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C5740 + 4 * byte_218CF1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C5774 + 4 * byte_218CEC[v4]))();
}

uint64_t sub_1C5774(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C577C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C5784);
  return result;
}

uint64_t sub_1C5790(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C5798);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C579C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C57A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrubData.CodingKeys()
{
  return &type metadata for ScrubData.CodingKeys;
}

unint64_t sub_1C57C4()
{
  unint64_t result;

  result = qword_2A6BC0;
  if (!qword_2A6BC0)
  {
    result = swift_getWitnessTable(byte_218E64, &type metadata for ScrubData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6BC0);
  }
  return result;
}

unint64_t sub_1C580C()
{
  unint64_t result;

  result = qword_2A6BC8;
  if (!qword_2A6BC8)
  {
    result = swift_getWitnessTable(byte_218DD4, &type metadata for ScrubData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6BC8);
  }
  return result;
}

unint64_t sub_1C5854()
{
  unint64_t result;

  result = qword_2A6BD0;
  if (!qword_2A6BD0)
  {
    result = swift_getWitnessTable(aU_24, &type metadata for ScrubData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6BD0);
  }
  return result;
}

uint64_t sub_1C5898(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x736F507472617473 && a2 == 0xED00006E6F697469)
  {
    v5 = 0xED00006E6F697469;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736F507472617473, 0xED00006E6F697469, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7469736F50646E65 && a2 == 0xEB000000006E6F69)
  {
    v7 = 0xEB000000006E6F69;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469736F50646E65, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E654C6C61746F74 && a2 == 0xEB00000000687467)
  {
    swift_bridgeObjectRelease(0xEB00000000687467);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E654C6C61746F74, 0xEB00000000687467, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1C5A44()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1C5A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065707954)
  {
    result = swift_bridgeObjectRelease(0xEC00000065707954);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000065707954, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1C5B10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C5E3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C5B38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C5E3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LocationData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A6BD8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1C5E3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocationData.CodingKeys, &type metadata for LocationData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1C5E80();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for LocationType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t LocationData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A6BF0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C5E3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocationData.CodingKeys, &type metadata for LocationData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1C5EC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for LocationType, v13, v5, &type metadata for LocationType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1C5D78@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return LocationData.init(from:)(a1, a2);
}

uint64_t sub_1C5D8C(_QWORD *a1)
{
  return LocationData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics12LocationDataV2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0;
  BAEventReporter *v1;
  BAEventReporter *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  BAEventReporter *v12;
  char v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;

  v0 = LocationType.rawValue.getter();
  v2 = v1;
  v3 = LocationType.rawValue.getter();
  if (v0 == v3 && v2 == (BAEventReporter *)v4)
  {
    v13 = 1;
    v12 = v2;
  }
  else
  {
    v12 = (BAEventReporter *)v4;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
  }
  swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
  swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
  return v13 & 1;
}

unint64_t sub_1C5E3C()
{
  unint64_t result;

  result = qword_2A6BE0;
  if (!qword_2A6BE0)
  {
    result = swift_getWitnessTable(byte_219080, &type metadata for LocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6BE0);
  }
  return result;
}

unint64_t sub_1C5E80()
{
  unint64_t result;

  result = qword_2A6BE8;
  if (!qword_2A6BE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LocationType, &type metadata for LocationType);
    atomic_store(result, (unint64_t *)&qword_2A6BE8);
  }
  return result;
}

unint64_t sub_1C5EC4()
{
  unint64_t result;

  result = qword_2A6BF8;
  if (!qword_2A6BF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LocationType, &type metadata for LocationType);
    atomic_store(result, (unint64_t *)&qword_2A6BF8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 31 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 31) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE0)
    return ((uint64_t (*)(void))((char *)&loc_1C5F5C + 4 * byte_218EE1[v4]))();
  *a1 = a2 + 31;
  return ((uint64_t (*)(void))((char *)sub_1C5F90 + 4 * byte_218EDC[v4]))();
}

uint64_t sub_1C5F90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C5F98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C5FA0);
  return result;
}

uint64_t sub_1C5FAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C5FB4);
  *(_BYTE *)result = a2 + 31;
  return result;
}

uint64_t sub_1C5FB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C5FC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationData()
{
  return &type metadata for LocationData;
}

uint64_t storeEnumTagSinglePayload for LocationData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C601C + 4 * byte_218EE6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C603C + 4 * byte_218EEB[v4]))();
}

_BYTE *sub_1C601C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C603C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C6044(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C604C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C6054(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C605C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocationData.CodingKeys()
{
  return &type metadata for LocationData.CodingKeys;
}

unint64_t sub_1C607C()
{
  unint64_t result;

  result = qword_2A6C00;
  if (!qword_2A6C00)
  {
    result = swift_getWitnessTable(byte_219058, &type metadata for LocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C00);
  }
  return result;
}

unint64_t sub_1C60C4()
{
  unint64_t result;

  result = qword_2A6C08;
  if (!qword_2A6C08)
  {
    result = swift_getWitnessTable(byte_218FC8, &type metadata for LocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C08);
  }
  return result;
}

unint64_t sub_1C610C()
{
  unint64_t result;

  result = qword_2A6C10;
  if (!qword_2A6C10)
  {
    result = swift_getWitnessTable(aI_8, &type metadata for LocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C10);
  }
  return result;
}

uint64_t sub_1C6154()
{
  return 0x657079546C616F67;
}

uint64_t sub_1C616C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x657079546C616F67 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657079546C616F67, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1C6200(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C65AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C6228(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C65AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GoalAdjustTypeData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A6C18);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1C65AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GoalAdjustTypeData.CodingKeys, &type metadata for GoalAdjustTypeData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_7861C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for GoalType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t GoalAdjustTypeData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A6C28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C65AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GoalAdjustTypeData.CodingKeys, &type metadata for GoalAdjustTypeData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_78748();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for GoalType, v13, v5, &type metadata for GoalType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1C6468@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GoalAdjustTypeData.init(from:)(a1, a2);
}

uint64_t sub_1C647C(_QWORD *a1)
{
  return GoalAdjustTypeData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics18GoalAdjustTypeDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x47676E6964616572;
  v4 = 0xEB000000006C616FLL;
  if (v2 != 1)
  {
    v3 = 0x616F47736B6F6F62;
    v4 = 0xE90000000000006CLL;
  }
  if (*a1)
    v5 = v3;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v4;
  else
    v6 = 0xE700000000000000;
  v7 = 0x47676E6964616572;
  v8 = 0xEB000000006C616FLL;
  if (*a2 != 1)
  {
    v7 = 0x616F47736B6F6F62;
    v8 = 0xE90000000000006CLL;
  }
  if (*a2)
    v9 = v7;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v8;
  else
    v10 = 0xE700000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_1C65AC()
{
  unint64_t result;

  result = qword_2A6C20;
  if (!qword_2A6C20)
  {
    result = swift_getWitnessTable(byte_219278, &type metadata for GoalAdjustTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C20);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GoalAdjustTypeData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C6644 + 4 * byte_2190D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C6678 + 4 * byte_2190D0[v4]))();
}

uint64_t sub_1C6678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C6680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C6688);
  return result;
}

uint64_t sub_1C6694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C669CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C66A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C66A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GoalAdjustTypeData()
{
  return &type metadata for GoalAdjustTypeData;
}

uint64_t storeEnumTagSinglePayload for GoalAdjustTypeData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C6704 + 4 * byte_2190DA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C6724 + 4 * byte_2190DF[v4]))();
}

_BYTE *sub_1C6704(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C6724(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C672C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C6734(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C673C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C6744(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GoalAdjustTypeData.CodingKeys()
{
  return &type metadata for GoalAdjustTypeData.CodingKeys;
}

unint64_t sub_1C6764()
{
  unint64_t result;

  result = qword_2A6C30;
  if (!qword_2A6C30)
  {
    result = swift_getWitnessTable(byte_219250, &type metadata for GoalAdjustTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C30);
  }
  return result;
}

unint64_t sub_1C67AC()
{
  unint64_t result;

  result = qword_2A6C38;
  if (!qword_2A6C38)
  {
    result = swift_getWitnessTable(aQ_7, &type metadata for GoalAdjustTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C38);
  }
  return result;
}

unint64_t sub_1C67F4()
{
  unint64_t result;

  result = qword_2A6C40;
  if (!qword_2A6C40)
  {
    result = swift_getWitnessTable(aY_12, &type metadata for GoalAdjustTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C40);
  }
  return result;
}

void __swiftcall LinkData.init(previousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:)(BookAnalytics::LinkData *__return_ptr retstr, Swift::String previousSectionID, Swift::String_optional previousSectionName, Swift::String_optional previousContentID, BookAnalytics::LinkActionType linkActionType, Swift::String_optional previousSeriesID, Swift::String_optional previousGenreID, Swift::String_optional previousCollectionID, Swift::String_optional previousAuthorID, Swift::String_optional previousFlowcaseID, Swift::String_optional previousBrickID)
{
  BookAnalytics::LinkActionType v11;

  v11 = *(_BYTE *)linkActionType;
  retstr->previousSectionID = previousSectionID;
  retstr->previousSectionName = previousSectionName;
  retstr->previousContentID = previousContentID;
  retstr->linkActionType = v11;
  retstr->previousSeriesID.value._countAndFlagsBits = previousSeriesID.value._countAndFlagsBits;
  *(Swift::String_optional *)&retstr->previousSeriesID.value._object = *(Swift::String_optional *)&previousSeriesID.value._object;
  *(Swift::String_optional *)&retstr->previousGenreID.value._object = *(Swift::String_optional *)((char *)&previousCollectionID
                                                                                                - 8);
  *(Swift::String_optional *)&retstr->previousCollectionID.value._object = *(Swift::String_optional *)&previousCollectionID.value._object;
  *(Swift::String_optional *)&retstr->previousAuthorID.value._object = *(Swift::String_optional *)&previousAuthorID.value._object;
  *(Swift::String_optional *)&retstr->previousFlowcaseID.value._object = *(Swift::String_optional *)((char *)&previousBrickID - 8);
  retstr->previousBrickID.value._object = previousBrickID.value._object;
}

uint64_t LinkData.previousAuthorID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t LinkData.previousAuthorID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 112));
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return result;
}

uint64_t LinkData.previousFlowcaseID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t LinkData.previousFlowcaseID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 128));
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return result;
}

uint64_t LinkData.previousBrickID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 144));
  return v1;
}

uint64_t LinkData.previousBrickID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 144));
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return result;
}

uint64_t sub_1C6998(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C69D4 + 4 * byte_2192C8[a1]))(0xD000000000000011, 0x8000000000220530);
}

uint64_t sub_1C69D4()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_1C6A9C()
{
  unsigned __int8 *v0;

  return sub_1C6998(*v0);
}

uint64_t sub_1C6AA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C8014(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C6AC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C79F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C6AF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C79F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LinkData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v3 = sub_71B4(&qword_2A6C48);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = *v1;
  v7 = v1[1];
  v8 = v1[2];
  v44 = v1[3];
  v45 = v8;
  v9 = v1[4];
  v42 = v1[5];
  v43 = v9;
  v41 = *((unsigned __int8 *)v1 + 48);
  v10 = v1[8];
  v38 = v1[7];
  v39 = v10;
  v11 = v1[10];
  v36 = v1[9];
  v37 = v11;
  v12 = v1[12];
  v34 = v1[11];
  v35 = v12;
  v13 = v1[14];
  v32 = v1[13];
  v33 = v13;
  v14 = v1[15];
  v30 = v1[16];
  v31 = v14;
  v15 = v1[18];
  v40 = v1[17];
  v16 = a1[3];
  v17 = a1[4];
  v18 = a1;
  v19 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_7988(v18, v16);
  v20 = sub_1C79F0();
  v21 = v16;
  v22 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LinkData.CodingKeys, &type metadata for LinkData.CodingKeys, v20, v21, v17);
  v57 = 0;
  v23 = v46;
  KeyedEncodingContainer.encode(_:forKey:)(v6, v7, &v57, v3);
  if (!v23)
  {
    v25 = v42;
    v24 = v43;
    v26 = v41;
    v46 = v15;
    v27 = v40;
    v56 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v44, &v56, v22);
    v55 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v55, v22);
    v54 = v26;
    v53 = 3;
    v28 = sub_1508A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v22, &type metadata for LinkActionType, v28);
    v52 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &v52, v22);
    v51 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v51, v22);
    v50 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v50, v22);
    v49 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v49, v22);
    v48 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v30, &v48, v22);
    v47 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v46, &v47, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v19, v22);
}

void LinkData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  int64_t v16;
  int64_t v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  int64_t v65;
  int64_t v66;
  id v67;
  uint64_t v68;
  BAEventReporter *v69;
  BAEventReporter *v70;
  BAEventReporter *v71;
  BAEventReporter *v72;
  uint64_t v73;
  BAEventReporter *v74;
  BAEventReporter *v75;
  unint64_t v76;
  BAEventReporter *v77;
  BAEventReporter *v78;
  BAEventReporter *v79;
  BAEventReporter *v80;
  uint64_t v81;
  BAEventReporter *v82;
  BAEventReporter *v83;
  uint64_t v84;
  BAEventReporter *v85;
  BAEventReporter *v86;
  BAEventReporter *v87;
  BAEventReporter *v88;
  BAEventReporter *v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  BAEventReporter *v98;
  BAEventReporter *v99;
  BAEventReporter *v100;
  BAEventReporter *v101;
  BAEventReporter *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  int64_t v107;
  int64_t v108;
  id v109;
  BAEventReporter *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  int64_t v115;
  int64_t v116;
  id v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  int64_t v129;
  int64_t v130;
  id v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  int64_t v136;
  int64_t v137;
  id v138;
  SEL v139;
  id v140;
  id v141;
  id v142;
  int64_t v143;
  int64_t v144;
  id v145;
  BAEventReporter *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  int64_t v151;
  int64_t v152;
  id v153;
  SEL v154;
  id v155;
  id v156;
  id v157;
  int64_t v158;
  int64_t v159;
  id v160;
  SEL v161;
  id v162;
  id v163;
  id v164;
  int64_t v165;
  int64_t v166;
  id v167;
  __int128 v168;
  _QWORD *v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BAEventReporter *v179;
  uint64_t v180;
  BAEventReporter *v181;
  uint64_t v182;
  int v183;
  BAEventReporter *v184;
  uint64_t v185;
  BAEventReporter *v186;
  uint64_t v187;
  BAEventReporter *v188;
  BAEventReporter *v189;
  BAEventReporter *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  BAEventReporter *v203;
  _QWORD v204[6];
  char v205;
  _BYTE v206[7];
  uint64_t v207;
  BAEventReporter *v208;
  uint64_t v209;
  BAEventReporter *v210;
  uint64_t v211;
  BAEventReporter *v212;
  uint64_t v213;
  BAEventReporter *v214;
  uint64_t v215;
  BAEventReporter *v216;
  uint64_t v217;
  BAEventReporter *v218;
  char v219;
  _DWORD v220[3];
  uint64_t v221;

  v221 = sub_71B4(&qword_2A6C58);
  v5 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221);
  v7 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1C79F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LinkData.CodingKeys, &type metadata for LinkData.CodingKeys, v10, v8, v9);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(0, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(0, v26, v27, v28, v29, v30, v31, v32);
    swift_bridgeObjectRelease(0, v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(0, v40, v41, v42, v43, v44, v45, v46);
    swift_bridgeObjectRelease(0, v47, v48, v49, v50, v51, v52, v53);
    swift_bridgeObjectRelease(0, v54, v55, v56, v57, v58, v59, v60);
    swift_bridgeObjectRelease(0, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    v192 = a1;
    v193 = v5;
    v191 = a2;
    LOBYTE(v204[0]) = 0;
    v11 = v221;
    v68 = KeyedDecodingContainer.decode(_:forKey:)(v204, v221);
    v70 = v69;
    LOBYTE(v204[0]) = 1;
    swift_bridgeObjectRetain(v69);
    v187 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v204, v11);
    v188 = v70;
    LOBYTE(v204[0]) = 2;
    v72 = v71;
    swift_bridgeObjectRetain(v71);
    v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v204, v11);
    v75 = v74;
    v185 = v73;
    v186 = v72;
    LOBYTE(v194) = 3;
    v76 = sub_1508E8();
    swift_bridgeObjectRetain(v75);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v204, &type metadata for LinkActionType, &v194, v11, &type metadata for LinkActionType, v76);
    v184 = v75;
    LODWORD(v75) = LOBYTE(v204[0]);
    LOBYTE(v204[0]) = 4;
    v182 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v204, v11);
    v183 = (int)v75;
    LOBYTE(v204[0]) = 5;
    v78 = v77;
    swift_bridgeObjectRetain(v77);
    v180 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v204, v11);
    v181 = v78;
    LOBYTE(v204[0]) = 6;
    v80 = v79;
    swift_bridgeObjectRetain(v79);
    v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v204, v11);
    v83 = v82;
    v178 = v81;
    v179 = v80;
    LOBYTE(v204[0]) = 7;
    swift_bridgeObjectRetain(v82);
    v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v204, v11);
    v190 = v83;
    v177 = v84;
    LOBYTE(v204[0]) = 8;
    v189 = v85;
    swift_bridgeObjectRetain(v85);
    v176 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v204, v11);
    v87 = v86;
    v219 = 9;
    swift_bridgeObjectRetain(v86);
    v175 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v219, v11);
    v89 = v88;
    (*(void (**)(char *, uint64_t))(v193 + 8))(v7, v221);
    v90 = v89;
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRelease(0, v91, v92, v93, v94, v95, v96, v97);
    v174 = v68;
    v98 = v188;
    *(_QWORD *)&v194 = v68;
    *((_QWORD *)&v194 + 1) = v188;
    *(_QWORD *)&v195 = v187;
    *((_QWORD *)&v195 + 1) = v186;
    v99 = v184;
    *(_QWORD *)&v196 = v185;
    *((_QWORD *)&v196 + 1) = v184;
    LOBYTE(v197) = v183;
    v100 = v181;
    *((_QWORD *)&v197 + 1) = v182;
    *(_QWORD *)&v198 = v181;
    v101 = v179;
    *((_QWORD *)&v198 + 1) = v180;
    *(_QWORD *)&v199 = v179;
    *((_QWORD *)&v199 + 1) = v178;
    *(_QWORD *)&v200 = v190;
    *((_QWORD *)&v200 + 1) = v177;
    *(_QWORD *)&v201 = v189;
    v102 = v189;
    *((_QWORD *)&v201 + 1) = v176;
    *(_QWORD *)&v202 = v87;
    *((_QWORD *)&v202 + 1) = v175;
    v203 = v90;
    sub_2DC18(&v194);
    swift_bridgeObjectRelease(v98, v103, v104, v105, v106, v107, v108, v109);
    v110 = v186;
    swift_bridgeObjectRelease(v186, v111, v112, v113, v114, v115, v116, v117);
    swift_bridgeObjectRelease(v99, v118, v119, v120, v121, v122, v123, v124);
    swift_bridgeObjectRelease(v100, v125, v126, v127, v128, v129, v130, v131);
    swift_bridgeObjectRelease(v101, v132, v133, v134, v135, v136, v137, v138);
    swift_bridgeObjectRelease(v190, v139, v140, v141, v142, v143, v144, v145);
    v146 = v102;
    swift_bridgeObjectRelease(v102, v147, v148, v149, v150, v151, v152, v153);
    swift_bridgeObjectRelease(v87, v154, v155, v156, v157, v158, v159, v160);
    swift_bridgeObjectRelease(v90, v161, v162, v163, v164, v165, v166, v167);
    v168 = v201;
    v170 = v191;
    v169 = v192;
    *(_OWORD *)(v191 + 96) = v200;
    *(_OWORD *)(v170 + 112) = v168;
    *(_OWORD *)(v170 + 128) = v202;
    *(_QWORD *)(v170 + 144) = v203;
    v171 = v197;
    *(_OWORD *)(v170 + 32) = v196;
    *(_OWORD *)(v170 + 48) = v171;
    v172 = v199;
    *(_OWORD *)(v170 + 64) = v198;
    *(_OWORD *)(v170 + 80) = v172;
    v173 = v195;
    *(_OWORD *)v170 = v194;
    *(_OWORD *)(v170 + 16) = v173;
    sub_7DAC(v169);
    v204[0] = v174;
    v204[1] = v188;
    v204[2] = v187;
    v204[3] = v110;
    v204[4] = v185;
    v204[5] = v99;
    v205 = v183;
    *(_DWORD *)v206 = v220[0];
    *(_DWORD *)&v206[3] = *(_DWORD *)((char *)v220 + 3);
    v207 = v182;
    v208 = v181;
    v209 = v180;
    v210 = v101;
    v211 = v178;
    v212 = v190;
    v213 = v177;
    v214 = v146;
    v215 = v176;
    v216 = v87;
    v217 = v175;
    v218 = v90;
    sub_2F180(v204);
  }
}

void sub_1C7614(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  LinkData.init(from:)(a1, a2);
}

uint64_t sub_1C7628(_QWORD *a1)
{
  return LinkData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics8LinkDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = *((_BYTE *)a1 + 48);
  v45 = a1[7];
  v49 = a1[8];
  v41 = a1[9];
  v47 = a1[10];
  v37 = a1[11];
  v43 = a1[12];
  v33 = a1[13];
  v39 = a1[14];
  v31 = a1[15];
  v35 = a1[16];
  v27 = a1[17];
  v29 = a1[18];
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v44 = a2[7];
  v48 = a2[8];
  v40 = a2[9];
  v46 = a2[10];
  v36 = a2[11];
  v42 = a2[12];
  v32 = a2[13];
  v38 = a2[14];
  v30 = a2[15];
  v34 = a2[16];
  v26 = a2[17];
  v28 = a2[18];
  if (v4 == *a2 && v5 == v11
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v11, 0), result = 0, (v16 & 1) != 0))
  {
    if (v7)
    {
      if (!v13)
        return 0;
      if (v6 != v12 || v7 != v13)
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0);
        result = 0;
        if ((v18 & 1) == 0)
          return result;
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v9)
    {
      if (!v15)
        return 0;
      if (v8 != v14 || v9 != v15)
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v14, v15, 0);
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
    }
    else if (v15)
    {
      return 0;
    }
    sub_24E04(v10);
    if ((v20 & 1) != 0)
    {
      if (v49)
      {
        if (!v48)
          return 0;
        if (v45 != v44 || v49 != v48)
        {
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v49, v44, v48, 0);
          result = 0;
          if ((v21 & 1) == 0)
            return result;
        }
      }
      else if (v48)
      {
        return 0;
      }
      if (v47)
      {
        if (!v46)
          return 0;
        if (v41 != v40 || v47 != v46)
        {
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v47, v40, v46, 0);
          result = 0;
          if ((v22 & 1) == 0)
            return result;
        }
      }
      else if (v46)
      {
        return 0;
      }
      if (v43)
      {
        if (!v42)
          return 0;
        if (v37 != v36 || v43 != v42)
        {
          v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v43, v36, v42, 0);
          result = 0;
          if ((v23 & 1) == 0)
            return result;
        }
      }
      else if (v42)
      {
        return 0;
      }
      if (v39)
      {
        if (!v38)
          return 0;
        if (v33 != v32 || v39 != v38)
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v39, v32, v38, 0);
          result = 0;
          if ((v24 & 1) == 0)
            return result;
        }
      }
      else if (v38)
      {
        return 0;
      }
      if (v35)
      {
        if (!v34)
          return 0;
        if (v31 != v30 || v35 != v34)
        {
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v35, v30, v34, 0);
          result = 0;
          if ((v25 & 1) == 0)
            return result;
        }
      }
      else if (v34)
      {
        return 0;
      }
      if (v29)
      {
        if (v28
          && (v27 == v26 && v29 == v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v26, v28, 0) & 1) != 0))
        {
          return 1;
        }
      }
      else if (!v28)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_1C79F0()
{
  unint64_t result;

  result = qword_2A6C50;
  if (!qword_2A6C50)
  {
    result = swift_getWitnessTable(byte_21948C, &type metadata for LinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C50);
  }
  return result;
}

uint64_t destroy for LinkData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_bridgeObjectRelease(a1[18]);
}

uint64_t initializeWithCopy for LinkData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for LinkData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 initializeWithTake for LinkData(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for LinkData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v20;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkData()
{
  return &type metadata for LinkData;
}

uint64_t storeEnumTagSinglePayload for LinkData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1C7EBC + 4 * byte_2192D7[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1C7EF0 + 4 * byte_2192D2[v4]))();
}

uint64_t sub_1C7EF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C7EF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C7F00);
  return result;
}

uint64_t sub_1C7F0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C7F14);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1C7F18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C7F20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LinkData.CodingKeys()
{
  return &type metadata for LinkData.CodingKeys;
}

unint64_t sub_1C7F40()
{
  unint64_t result;

  result = qword_2A6C60;
  if (!qword_2A6C60)
  {
    result = swift_getWitnessTable(byte_219464, &type metadata for LinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C60);
  }
  return result;
}

unint64_t sub_1C7F88()
{
  unint64_t result;

  result = qword_2A6C68;
  if (!qword_2A6C68)
  {
    result = swift_getWitnessTable(aE_19, &type metadata for LinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C68);
  }
  return result;
}

unint64_t sub_1C7FD0()
{
  unint64_t result;

  result = qword_2A6C70;
  if (!qword_2A6C70)
  {
    result = swift_getWitnessTable(aM_14, &type metadata for LinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C70);
  }
  return result;
}

uint64_t sub_1C8014(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000000220530;
    if (a2 == 0x8000000000220530)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000220530, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000000220550)
  {
    v6 = 0x8000000000220550;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000220550, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000000220570;
    if (a2 == 0x8000000000220570)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000220570, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x697463416B6E696CLL && a2 == 0xEE00657079546E6FLL)
  {
    v8 = 0xEE00657079546E6FLL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463416B6E696CLL, 0xEE00657079546E6FLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000000002205A0;
    if (a2 == 0x80000000002205A0)
      goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002205A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0x73756F6976657270 && a2 == 0xEF444965726E6547)
  {
    v10 = 0xEF444965726E6547;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73756F6976657270, 0xEF444965726E6547, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_33;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000002205D0)
  {
    v11 = 0x80000000002205D0;
LABEL_39:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000002205D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_39;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x80000000002205F0;
    if (a2 == 0x80000000002205F0)
      goto LABEL_44;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002205F0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000000220610)
  {
    v13 = 0x8000000000220610;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000220610, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x73756F6976657270 && a2 == 0xEF44496B63697242)
  {
    swift_bridgeObjectRelease(0xEF44496B63697242);
    return 9;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73756F6976657270, 0xEF44496B63697242, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t static ReadingNowData.== infix(_:_:)(uint64_t *a1, _QWORD **a2)
{
  return sub_66EC4(*a1, *a2);
}

unint64_t sub_1C8438()
{
  return 0xD000000000000011;
}

uint64_t sub_1C8454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C898C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C847C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C85EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C84A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C85EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingNowData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_2A6C78);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1C85EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingNowData.CodingKeys, &type metadata for ReadingNowData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_2A6C88);
  v12 = sub_1C8770(&qword_2A6C90, (uint64_t (*)(void))sub_1B5F24, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1C85EC()
{
  unint64_t result;

  result = qword_2A6C80;
  if (!qword_2A6C80)
  {
    result = swift_getWitnessTable(byte_219678, &type metadata for ReadingNowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6C80);
  }
  return result;
}

uint64_t ReadingNowData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A6C98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C85EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingNowData.CodingKeys, &type metadata for ReadingNowData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_2A6C88);
    v13 = sub_1C8770(&qword_2A6CA0, (uint64_t (*)(void))sub_1B5EDC, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1C8770(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_2A6C88);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C87E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReadingNowData.init(from:)(a1, a2);
}

uint64_t sub_1C87F4(_QWORD *a1)
{
  return ReadingNowData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ReadingNowData()
{
  return &type metadata for ReadingNowData;
}

uint64_t storeEnumTagSinglePayload for ReadingNowData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C8858 + 4 * byte_2194DC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C8878 + 4 * byte_2194E1[v4]))();
}

_BYTE *sub_1C8858(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C8878(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C8880(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C8888(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C8890(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C8898(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReadingNowData.CodingKeys()
{
  return &type metadata for ReadingNowData.CodingKeys;
}

unint64_t sub_1C88B8()
{
  unint64_t result;

  result = qword_2A6CA8;
  if (!qword_2A6CA8)
  {
    result = swift_getWitnessTable(aI_9, &type metadata for ReadingNowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6CA8);
  }
  return result;
}

unint64_t sub_1C8900()
{
  unint64_t result;

  result = qword_2A6CB0;
  if (!qword_2A6CB0)
  {
    result = swift_getWitnessTable(asc_2195C0, &type metadata for ReadingNowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6CB0);
  }
  return result;
}

unint64_t sub_1C8948()
{
  unint64_t result;

  result = qword_2A6CB8;
  if (!qword_2A6CB8)
  {
    result = swift_getWitnessTable(byte_2195E8, &type metadata for ReadingNowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6CB8);
  }
  return result;
}

uint64_t sub_1C898C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000000222910)
  {
    swift_bridgeObjectRelease(0x8000000000222910);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222910, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1C8A10()
{
  return 0x657A6953746E6F66;
}

uint64_t sub_1C8A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x657A6953746E6F66 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953746E6F66, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1C8ABC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C8BF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1C8AE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C8BF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FontSizeData.encode(to:)(_QWORD *a1)
{
  float *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_71B4(&qword_2A6CC0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1C8BF4();
  v11 = dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FontSizeData.CodingKeys, &type metadata for FontSizeData.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v11, v3, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1C8BF4()
{
  unint64_t result;

  result = qword_2A6CC8;
  if (!qword_2A6CC8)
  {
    result = swift_getWitnessTable(asc_219864, &type metadata for FontSizeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6CC8);
  }
  return result;
}

uint64_t FontSizeData.init(from:)@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v15;

  v5 = sub_71B4(&qword_2A6CD0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1C8BF4();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FontSizeData.CodingKeys, &type metadata for FontSizeData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1C8D4C@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  return FontSizeData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for FontSizeData()
{
  return &type metadata for FontSizeData;
}

uint64_t storeEnumTagSinglePayload for FontSizeData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C8DB0 + 4 * byte_2196C8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C8DD0 + 4 * byte_2196CD[v4]))();
}

_BYTE *sub_1C8DB0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C8DD0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C8DD8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C8DE0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C8DE8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C8DF0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FontSizeData.CodingKeys()
{
  return &type metadata for FontSizeData.CodingKeys;
}

unint64_t sub_1C8E10()
{
  unint64_t result;

  result = qword_2A6CD8;
  if (!qword_2A6CD8)
  {
    result = swift_getWitnessTable(byte_21983C, &type metadata for FontSizeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6CD8);
  }
  return result;
}

unint64_t sub_1C8E58()
{
  unint64_t result;

  result = qword_2A6CE0;
  if (!qword_2A6CE0)
  {
    result = swift_getWitnessTable(byte_2197AC, &type metadata for FontSizeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6CE0);
  }
  return result;
}

unint64_t sub_1C8EA0()
{
  unint64_t result;

  result = qword_2A6CE8;
  if (!qword_2A6CE8)
  {
    result = swift_getWitnessTable(byte_2197D4, &type metadata for FontSizeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6CE8);
  }
  return result;
}

uint64_t ClickData.TargetType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_269008, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 11;
  if (v5 < 0xB)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t ClickData.TargetType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C8F78 + 4 * byte_2198C0[*v0]))(0x6E61576F54646461, 0xEF646165526F5474);
}

uint64_t sub_1C8F78()
{
  return 0x6D61536F69647561;
}

uint64_t sub_1C8F98()
{
  return 0x6E6F74747562;
}

uint64_t sub_1C8FAC()
{
  return 7959906;
}

uint64_t sub_1C8FBC()
{
  return 0x6574656C6564;
}

uint64_t sub_1C8FD0()
{
  return 0x7373696D736964;
}

uint64_t sub_1C8FE8()
{
  return 0x64616F6C6E776F64;
}

uint64_t sub_1C9000()
{
  return 0x657461676976616ELL;
}

uint64_t sub_1C9018()
{
  return 0x64616F6C6572;
}

unint64_t sub_1C902C()
{
  return 0xD000000000000014;
}

uint64_t sub_1C9048()
{
  return 0x706D615364616572;
}

void sub_1C9064(char *a1)
{
  sub_24FC4(*a1);
}

Swift::Int sub_1C9070()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_1EC57C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1C90B4(uint64_t a1)
{
  char *v1;

  sub_1EC57C(a1, *v1);
}

Swift::Int sub_1C90BC(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1EC57C((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_1C90FC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return ClickData.TargetType.init(rawValue:)(*a1, a2);
}

uint64_t sub_1C9108@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ClickData.TargetType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void ClickData.init(with:linkActionType:index:url:)(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = Date.init()(v4);
  v9 = Date.timeIntervalSince1970.getter(v8);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  Double.description.getter(v10, v9 * 1000.0);
  __asm { BR              X11 }
}

uint64_t sub_1C9214(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)v5 = result;
  *(_QWORD *)(v5 + 8) = a2;
  *(_BYTE *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = 0x6D61536F69647561;
  *(_QWORD *)(v5 + 32) = 0xEB00000000656C70;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v2;
  return result;
}

uint64_t SectionData.ComponentContained.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_269130, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t SectionData.ComponentContained.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C93BC + 4 * byte_2198D6[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1C93BC()
{
  return 0x68736F6F7773;
}

uint64_t sub_1C93D0()
{
  return 0x756B636F4C706F74;
}

uint64_t sub_1C93EC()
{
  return 0x6143736569726573;
}

uint64_t sub_1C9408()
{
  return 0x7465656873;
}

void sub_1C941C(char *a1)
{
  sub_2B2AC(*a1);
}

void sub_1C9428()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1C9474()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x68736F6F7773, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1C94FC()
{
  __asm { BR              X10 }
}

uint64_t sub_1C9538(uint64_t a1)
{
  String.hash(into:)(a1, 0x68736F6F7773, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1C95AC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1C95F4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x68736F6F7773, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1C967C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return SectionData.ComponentContained.init(rawValue:)(*a1, a2);
}

uint64_t sub_1C9688()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1C96B8 + 4 * byte_2198EA[*v0]))();
}

void sub_1C96B8(_QWORD *a1@<X8>)
{
  *a1 = 0x68736F6F7773;
  a1[1] = 0xE600000000000000;
}

void sub_1C96D0(_QWORD *a1@<X8>)
{
  *a1 = 0x756B636F4C706F74;
  a1[1] = 0xE900000000000070;
}

void sub_1C96F0(_QWORD *a1@<X8>)
{
  *a1 = 0x6143736569726573;
  a1[1] = 0xEA00000000006472;
}

void sub_1C9710(_QWORD *a1@<X8>)
{
  *a1 = 0x7465656873;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1C9728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C9AC0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1C9784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C9AC0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t SectionData.init(sectionID:name:sectionType:componentContained:exposureIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  return ((uint64_t (*)(void))((char *)sub_1C9804 + 4 * byte_2198EF[*a6]))();
}

double sub_1C9804@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W6>, uint64_t a6@<X8>)
{
  char v6;
  double result;

  *(_BYTE *)a6 = v6;
  *(_DWORD *)(a6 + 4) = a5;
  *(_QWORD *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0xE000000000000000;
  *(_QWORD *)(a6 + 40) = 0x68736F6F7773;
  *(_QWORD *)(a6 + 48) = 0xE600000000000000;
  result = 0.0;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_DWORD *)(a6 + 88) = 0;
  *(_BYTE *)(a6 + 92) = 1;
  *(_QWORD *)(a6 + 96) = a1;
  *(_QWORD *)(a6 + 104) = a2;
  return result;
}

unint64_t sub_1C989C()
{
  unint64_t result;

  result = qword_2A6CF0;
  if (!qword_2A6CF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ClickData.TargetType, &type metadata for ClickData.TargetType);
    atomic_store(result, (unint64_t *)&qword_2A6CF0);
  }
  return result;
}

unint64_t sub_1C98E4()
{
  unint64_t result;

  result = qword_2A6CF8;
  if (!qword_2A6CF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SectionData.ComponentContained, &type metadata for SectionData.ComponentContained);
    atomic_store(result, (unint64_t *)&qword_2A6CF8);
  }
  return result;
}

uint64_t _s10TargetTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1C9974 + 4 * byte_2198F9[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1C99A8 + 4 * byte_2198F4[v4]))();
}

uint64_t sub_1C99A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C99B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C99B8);
  return result;
}

uint64_t sub_1C99C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C99CCLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1C99D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C99D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClickData.TargetType()
{
  return &type metadata for ClickData.TargetType;
}

uint64_t _s18ComponentContainedOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C9A40 + 4 * byte_219903[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C9A74 + 4 * byte_2198FE[v4]))();
}

uint64_t sub_1C9A74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C9A7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C9A84);
  return result;
}

uint64_t sub_1C9A90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C9A98);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C9A9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C9AA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SectionData.ComponentContained()
{
  return &type metadata for SectionData.ComponentContained;
}

unint64_t sub_1C9AC0()
{
  unint64_t result;

  result = qword_2A6D00;
  if (!qword_2A6D00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SectionData.ComponentContained, &type metadata for SectionData.ComponentContained);
    atomic_store(result, (unint64_t *)&qword_2A6D00);
  }
  return result;
}

uint64_t AppAnalyticsAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AppAnalyticsAction.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AppAnalyticsAction(0) + 20);
  return sub_1C9B84(v3, a1);
}

uint64_t type metadata accessor for AppAnalyticsAction(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6D70, (uint64_t)&nominal type descriptor for AppAnalyticsAction);
}

uint64_t sub_1C9B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppAnalyticsAction.Type(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppAnalyticsAction.Type(uint64_t a1)
{
  return sub_74F4(a1, qword_2A6E18, (uint64_t)&nominal type descriptor for AppAnalyticsAction.Type);
}

uint64_t AppAnalyticsAction.init(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  static ActionMetrics.notInstrumented.getter();
  v4 = a2 + *(int *)(type metadata accessor for AppAnalyticsAction(0) + 20);
  return sub_1C9C14(a1, v4);
}

uint64_t sub_1C9C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppAnalyticsAction.Type(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppAnalyticsAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AppAnalyticsAction.Type(0);
    switch(swift_getEnumCaseMultiPayload(v10, v11))
    {
      case 0u:
        *v9 = *v10;
        v12 = *((_QWORD *)v10 + 2);
        *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
        *((_QWORD *)v9 + 2) = v12;
        v9[24] = v10[24];
        v53 = *((_QWORD *)v10 + 5);
        *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
        *((_QWORD *)v9 + 5) = v53;
        *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
        v13 = *((_QWORD *)v10 + 8);
        *((_QWORD *)v9 + 8) = v13;
        v9[72] = v10[72];
        *((_DWORD *)v9 + 19) = *((_DWORD *)v10 + 19);
        v14 = *((_QWORD *)v10 + 11);
        *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
        *((_QWORD *)v9 + 11) = v14;
        v15 = *((_QWORD *)v10 + 13);
        *((_QWORD *)v9 + 12) = *((_QWORD *)v10 + 12);
        *((_QWORD *)v9 + 13) = v15;
        v16 = *((_QWORD *)v10 + 15);
        *((_QWORD *)v9 + 14) = *((_QWORD *)v10 + 14);
        *((_QWORD *)v9 + 15) = v16;
        v17 = *((_QWORD *)v10 + 17);
        *((_QWORD *)v9 + 16) = *((_QWORD *)v10 + 16);
        *((_QWORD *)v9 + 17) = v17;
        v18 = *((_QWORD *)v10 + 19);
        *((_QWORD *)v9 + 18) = *((_QWORD *)v10 + 18);
        *((_QWORD *)v9 + 19) = v18;
        v9[164] = v10[164];
        *((_DWORD *)v9 + 40) = *((_DWORD *)v10 + 40);
        v19 = *((_QWORD *)v10 + 21);
        v20 = *((_QWORD *)v10 + 22);
        *((_QWORD *)v9 + 21) = v19;
        *((_QWORD *)v9 + 22) = v20;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(v9, v11, 0);
        break;
      case 1u:
        v23 = *((_QWORD *)v10 + 5);
        v24 = *(_OWORD *)(v10 + 24);
        *(_OWORD *)(v9 + 24) = v24;
        *((_QWORD *)v9 + 5) = v23;
        (**(void (***)(void *, const void *))(v24 - 8))(v9, v10);
        v25 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
        v26 = &v9[v25];
        v27 = &v10[v25];
        v28 = type metadata accessor for ScenePhase(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
        swift_storeEnumTagMultiPayload(v9, v11, 1);
        break;
      case 2u:
        v29 = *((_QWORD *)v10 + 5);
        v30 = *(_OWORD *)(v10 + 24);
        *(_OWORD *)(v9 + 24) = v30;
        *((_QWORD *)v9 + 5) = v29;
        (**(void (***)(void *, const void *))(v30 - 8))(v9, v10);
        swift_storeEnumTagMultiPayload(v9, v11, 2);
        break;
      case 3u:
        v31 = *((_QWORD *)v10 + 1);
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_QWORD *)v9 + 1) = v31;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        v9[24] = v10[24];
        swift_bridgeObjectRetain(v31);
        swift_storeEnumTagMultiPayload(v9, v11, 3);
        break;
      case 4u:
        v32 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v9, v10, v32);
        v33 = sub_71B4(&qword_2A6D10);
        v34 = *(int *)(v33 + 48);
        v35 = &v9[v34];
        v36 = &v10[v34];
        v37 = *((_QWORD *)v36 + 1);
        *(_QWORD *)v35 = *(_QWORD *)v36;
        *((_QWORD *)v35 + 1) = v37;
        v35[16] = v36[16];
        v54 = *((_QWORD *)v36 + 4);
        *((_QWORD *)v35 + 3) = *((_QWORD *)v36 + 3);
        *((_QWORD *)v35 + 4) = v54;
        v52 = *((_QWORD *)v36 + 6);
        *((_QWORD *)v35 + 5) = *((_QWORD *)v36 + 5);
        *((_QWORD *)v35 + 6) = v52;
        v35[56] = v36[56];
        v35[57] = v36[57];
        *((_DWORD *)v35 + 15) = *((_DWORD *)v36 + 15);
        v35[64] = v36[64];
        *((_DWORD *)v35 + 17) = *((_DWORD *)v36 + 17);
        v35[72] = v36[72];
        *(_DWORD *)(v35 + 73) = *(_DWORD *)(v36 + 73);
        v35[77] = v36[77];
        v38 = *((_QWORD *)v36 + 11);
        *((_QWORD *)v35 + 10) = *((_QWORD *)v36 + 10);
        *((_QWORD *)v35 + 11) = v38;
        v39 = *(int *)(v33 + 64);
        v40 = &v9[v39];
        v41 = &v10[v39];
        *v40 = *v41;
        *((_DWORD *)v40 + 1) = *((_DWORD *)v41 + 1);
        v42 = *((_QWORD *)v41 + 2);
        *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
        *((_QWORD *)v40 + 2) = v42;
        v43 = *((_QWORD *)v41 + 4);
        *((_QWORD *)v40 + 3) = *((_QWORD *)v41 + 3);
        *((_QWORD *)v40 + 4) = v43;
        v44 = *((_QWORD *)v41 + 6);
        *((_QWORD *)v40 + 5) = *((_QWORD *)v41 + 5);
        *((_QWORD *)v40 + 6) = v44;
        v45 = *((_QWORD *)v41 + 8);
        *((_QWORD *)v40 + 7) = *((_QWORD *)v41 + 7);
        *((_QWORD *)v40 + 8) = v45;
        v46 = *((_QWORD *)v41 + 10);
        *((_QWORD *)v40 + 9) = *((_QWORD *)v41 + 9);
        *((_QWORD *)v40 + 10) = v46;
        LODWORD(v35) = *((_DWORD *)v41 + 22);
        v40[92] = v41[92];
        *((_DWORD *)v40 + 22) = (_DWORD)v35;
        v47 = *((_QWORD *)v41 + 13);
        *((_QWORD *)v40 + 12) = *((_QWORD *)v41 + 12);
        *((_QWORD *)v40 + 13) = v47;
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        swift_storeEnumTagMultiPayload(v9, v11, 4);
        break;
      case 5u:
        v48 = *((_QWORD *)v10 + 1);
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_QWORD *)v9 + 1) = v48;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        swift_bridgeObjectRetain(v48);
        swift_storeEnumTagMultiPayload(v9, v11, 5);
        break;
      case 6u:
        v49 = *((_QWORD *)v10 + 1);
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_QWORD *)v9 + 1) = v49;
        swift_bridgeObjectRetain(v49);
        swift_storeEnumTagMultiPayload(v9, v11, 6);
        break;
      case 7u:
        *(_QWORD *)v9 = *(_QWORD *)v10;
        v9[8] = v10[8];
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        v9[24] = v10[24];
        *(_WORD *)(v9 + 25) = *(_WORD *)(v10 + 25);
        v50 = *((_QWORD *)v10 + 5);
        *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
        *((_QWORD *)v9 + 5) = v50;
        swift_bridgeObjectRetain(v50);
        swift_storeEnumTagMultiPayload(v9, v11, 7);
        break;
      case 8u:
        *(_QWORD *)v9 = *(_QWORD *)v10;
        v9[8] = v10[8];
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        v9[24] = v10[24];
        *(_WORD *)(v9 + 25) = *(_WORD *)(v10 + 25);
        v51 = *((_QWORD *)v10 + 5);
        *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
        *((_QWORD *)v9 + 5) = v51;
        *((_WORD *)v9 + 24) = *((_WORD *)v10 + 24);
        swift_bridgeObjectRetain(v51);
        swift_storeEnumTagMultiPayload(v9, v11, 8);
        break;
      default:
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        break;
    }
  }
  return a1;
}

void destroy for AppAnalyticsAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  int64_t v11;
  int64_t v12;
  void *v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  int64_t v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  int64_t v47;
  int64_t v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BAEventReporter **v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  int64_t v87;
  int64_t v88;
  id v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  int64_t v94;
  int64_t v95;
  id v96;
  BAEventReporter **v97;
  SEL v98;
  id v99;
  id v100;
  id v101;
  int64_t v102;
  int64_t v103;
  id v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  int64_t v116;
  int64_t v117;
  id v118;
  SEL v119;
  id v120;
  id v121;
  id v122;
  int64_t v123;
  int64_t v124;
  id v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  int64_t v130;
  int64_t v131;
  id v132;

  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AppAnalyticsAction.Type(0);
  switch(swift_getEnumCaseMultiPayload(v5, v6))
  {
    case 0u:
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 16), v7, v8, v9, v10, v11, v12, v13);
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 40), v15, v16, v17, v18, v19, v20, v21);
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 64), v22, v23, v24, v25, v26, v27, v28);
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 88), v29, v30, v31, v32, v33, v34, v35);
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 104), v36, v37, v38, v39, v40, v41, v42);
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 120), v43, v44, v45, v46, v47, v48, v49);
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 136), v50, v51, v52, v53, v54, v55, v56);
      swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 152), v57, v58, v59, v60, v61, v62, v63);
      v14 = *(BAEventReporter **)(v5 + 176);
      goto LABEL_8;
    case 1u:
      sub_7DAC((_QWORD *)v5);
      v64 = v5 + *(int *)(sub_71B4(&qword_2A6D08) + 48);
      v65 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v64, v65);
      return;
    case 2u:
      sub_7DAC((_QWORD *)v5);
      return;
    case 3u:
    case 5u:
    case 6u:
      v14 = *(BAEventReporter **)(v5 + 8);
      goto LABEL_8;
    case 4u:
      v66 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v5, v66);
      v67 = sub_71B4(&qword_2A6D10);
      v68 = (BAEventReporter **)(v5 + *(int *)(v67 + 48));
      swift_bridgeObjectRelease(v68[1], v69, v70, v71, v72, v73, v74, v75);
      swift_bridgeObjectRelease(v68[4], v76, v77, v78, v79, v80, v81, v82);
      swift_bridgeObjectRelease(v68[6], v83, v84, v85, v86, v87, v88, v89);
      swift_bridgeObjectRelease(v68[11], v90, v91, v92, v93, v94, v95, v96);
      v97 = (BAEventReporter **)(v5 + *(int *)(v67 + 64));
      swift_bridgeObjectRelease(v97[2], v98, v99, v100, v101, v102, v103, v104);
      swift_bridgeObjectRelease(v97[4], v105, v106, v107, v108, v109, v110, v111);
      swift_bridgeObjectRelease(v97[6], v112, v113, v114, v115, v116, v117, v118);
      swift_bridgeObjectRelease(v97[8], v119, v120, v121, v122, v123, v124, v125);
      swift_bridgeObjectRelease(v97[10], v126, v127, v128, v129, v130, v131, v132);
      v14 = v97[13];
      goto LABEL_8;
    case 7u:
    case 8u:
      v14 = *(BAEventReporter **)(v5 + 40);
LABEL_8:
      swift_bridgeObjectRelease(v14, v7, v8, v9, v10, v11, v12, v13);
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for AppAnalyticsAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for AppAnalyticsAction.Type(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
      *v8 = *v9;
      v11 = *((_QWORD *)v9 + 2);
      *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
      *((_QWORD *)v8 + 2) = v11;
      v8[24] = v9[24];
      v54 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v54;
      *((_OWORD *)v8 + 3) = *((_OWORD *)v9 + 3);
      v12 = *((_QWORD *)v9 + 8);
      *((_QWORD *)v8 + 8) = v12;
      v8[72] = v9[72];
      *((_DWORD *)v8 + 19) = *((_DWORD *)v9 + 19);
      v13 = *((_QWORD *)v9 + 11);
      *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
      *((_QWORD *)v8 + 11) = v13;
      v14 = *((_QWORD *)v9 + 13);
      *((_QWORD *)v8 + 12) = *((_QWORD *)v9 + 12);
      *((_QWORD *)v8 + 13) = v14;
      v15 = *((_QWORD *)v9 + 15);
      *((_QWORD *)v8 + 14) = *((_QWORD *)v9 + 14);
      *((_QWORD *)v8 + 15) = v15;
      v16 = *((_QWORD *)v9 + 17);
      *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
      *((_QWORD *)v8 + 17) = v16;
      v17 = *((_QWORD *)v9 + 19);
      *((_QWORD *)v8 + 18) = *((_QWORD *)v9 + 18);
      *((_QWORD *)v8 + 19) = v17;
      v8[164] = v9[164];
      *((_DWORD *)v8 + 40) = *((_DWORD *)v9 + 40);
      v18 = *((_QWORD *)v9 + 21);
      v19 = *((_QWORD *)v9 + 22);
      *((_QWORD *)v8 + 21) = v18;
      *((_QWORD *)v8 + 22) = v19;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      v20 = v8;
      v21 = v10;
      v22 = 0;
      goto LABEL_12;
    case 1u:
      v23 = *((_QWORD *)v9 + 5);
      v24 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v24;
      *((_QWORD *)v8 + 5) = v23;
      (**(void (***)(void *, const void *))(v24 - 8))(v8, v9);
      v25 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
      v26 = &v8[v25];
      v27 = &v9[v25];
      v28 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      v20 = v8;
      v21 = v10;
      v22 = 1;
      goto LABEL_12;
    case 2u:
      v29 = *((_QWORD *)v9 + 5);
      v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((_QWORD *)v8 + 5) = v29;
      (**(void (***)(void *, const void *))(v30 - 8))(v8, v9);
      v20 = v8;
      v21 = v10;
      v22 = 2;
      goto LABEL_12;
    case 3u:
      v31 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v31;
      *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
      v8[24] = v9[24];
      swift_bridgeObjectRetain(v31);
      v20 = v8;
      v21 = v10;
      v22 = 3;
      goto LABEL_12;
    case 4u:
      v32 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v8, v9, v32);
      v33 = sub_71B4(&qword_2A6D10);
      v34 = *(int *)(v33 + 48);
      v35 = &v8[v34];
      v36 = &v9[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v35[16] = v36[16];
      v55 = *((_QWORD *)v36 + 4);
      *((_QWORD *)v35 + 3) = *((_QWORD *)v36 + 3);
      *((_QWORD *)v35 + 4) = v55;
      v53 = *((_QWORD *)v36 + 6);
      *((_QWORD *)v35 + 5) = *((_QWORD *)v36 + 5);
      *((_QWORD *)v35 + 6) = v53;
      v35[56] = v36[56];
      v35[57] = v36[57];
      *((_DWORD *)v35 + 15) = *((_DWORD *)v36 + 15);
      v35[64] = v36[64];
      *((_DWORD *)v35 + 17) = *((_DWORD *)v36 + 17);
      v35[72] = v36[72];
      *(_DWORD *)(v35 + 73) = *(_DWORD *)(v36 + 73);
      v35[77] = v36[77];
      v38 = *((_QWORD *)v36 + 11);
      *((_QWORD *)v35 + 10) = *((_QWORD *)v36 + 10);
      *((_QWORD *)v35 + 11) = v38;
      v39 = *(int *)(v33 + 64);
      v40 = &v8[v39];
      v41 = &v9[v39];
      *v40 = *v41;
      *((_DWORD *)v40 + 1) = *((_DWORD *)v41 + 1);
      v42 = *((_QWORD *)v41 + 2);
      *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
      *((_QWORD *)v40 + 2) = v42;
      v43 = *((_QWORD *)v41 + 4);
      *((_QWORD *)v40 + 3) = *((_QWORD *)v41 + 3);
      *((_QWORD *)v40 + 4) = v43;
      v44 = *((_QWORD *)v41 + 6);
      *((_QWORD *)v40 + 5) = *((_QWORD *)v41 + 5);
      *((_QWORD *)v40 + 6) = v44;
      v45 = *((_QWORD *)v41 + 8);
      *((_QWORD *)v40 + 7) = *((_QWORD *)v41 + 7);
      *((_QWORD *)v40 + 8) = v45;
      v46 = *((_QWORD *)v41 + 10);
      *((_QWORD *)v40 + 9) = *((_QWORD *)v41 + 9);
      *((_QWORD *)v40 + 10) = v46;
      LODWORD(v35) = *((_DWORD *)v41 + 22);
      v40[92] = v41[92];
      *((_DWORD *)v40 + 22) = (_DWORD)v35;
      v47 = *((_QWORD *)v41 + 13);
      *((_QWORD *)v40 + 12) = *((_QWORD *)v41 + 12);
      *((_QWORD *)v40 + 13) = v47;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v47);
      v20 = v8;
      v21 = v10;
      v22 = 4;
      goto LABEL_12;
    case 5u:
      v48 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v48;
      *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
      swift_bridgeObjectRetain(v48);
      v20 = v8;
      v21 = v10;
      v22 = 5;
      goto LABEL_12;
    case 6u:
      v49 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v49;
      swift_bridgeObjectRetain(v49);
      v20 = v8;
      v21 = v10;
      v22 = 6;
      goto LABEL_12;
    case 7u:
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v8[8] = v9[8];
      *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
      v8[24] = v9[24];
      *(_WORD *)(v8 + 25) = *(_WORD *)(v9 + 25);
      v50 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v50;
      swift_bridgeObjectRetain(v50);
      v20 = v8;
      v21 = v10;
      v22 = 7;
      goto LABEL_12;
    case 8u:
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v8[8] = v9[8];
      *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
      v8[24] = v9[24];
      *(_WORD *)(v8 + 25) = *(_WORD *)(v9 + 25);
      v51 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v51;
      *((_WORD *)v8 + 24) = *((_WORD *)v9 + 24);
      swift_bridgeObjectRetain(v51);
      v20 = v8;
      v21 = v10;
      v22 = 8;
LABEL_12:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      break;
    default:
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for AppAnalyticsAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (_QWORD *)(a1 + v7);
    v9 = (_QWORD *)(a2 + v7);
    sub_1CAD78(a1 + v7);
    v10 = type metadata accessor for AppAnalyticsAction.Type(0);
    switch(swift_getEnumCaseMultiPayload(v9, v10))
    {
      case 0u:
        *(_BYTE *)v8 = *(_BYTE *)v9;
        v8[1] = v9[1];
        v11 = v9[2];
        v8[2] = v11;
        *((_BYTE *)v8 + 24) = *((_BYTE *)v9 + 24);
        v8[4] = v9[4];
        v54 = v9[5];
        v8[5] = v54;
        v8[6] = v9[6];
        v8[7] = v9[7];
        v12 = v9[8];
        v8[8] = v12;
        *((_BYTE *)v8 + 72) = *((_BYTE *)v9 + 72);
        *((_DWORD *)v8 + 19) = *((_DWORD *)v9 + 19);
        v8[10] = v9[10];
        v13 = v9[11];
        v8[11] = v13;
        v8[12] = v9[12];
        v14 = v9[13];
        v8[13] = v14;
        v8[14] = v9[14];
        v15 = v9[15];
        v8[15] = v15;
        v8[16] = v9[16];
        v16 = v9[17];
        v8[17] = v16;
        v8[18] = v9[18];
        v17 = v9[19];
        v8[19] = v17;
        v18 = *((_DWORD *)v9 + 40);
        *((_BYTE *)v8 + 164) = *((_BYTE *)v9 + 164);
        *((_DWORD *)v8 + 40) = v18;
        v8[21] = v9[21];
        v19 = v9[22];
        v8[22] = v19;
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v19);
        v20 = v8;
        v21 = v10;
        v22 = 0;
        goto LABEL_13;
      case 1u:
        v23 = v9[3];
        v8[3] = v23;
        *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
        (**(void (***)(void *, const void *))(v23 - 8))(v8, v9);
        v24 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
        v25 = (char *)v8 + v24;
        v26 = (char *)v9 + v24;
        v27 = type metadata accessor for ScenePhase(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
        v20 = v8;
        v21 = v10;
        v22 = 1;
        goto LABEL_13;
      case 2u:
        v28 = v9[3];
        v8[3] = v28;
        *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
        (**(void (***)(void *, const void *))(v28 - 8))(v8, v9);
        v20 = v8;
        v21 = v10;
        v22 = 2;
        goto LABEL_13;
      case 3u:
        *v8 = *v9;
        v29 = v9[1];
        v8[1] = v29;
        v30 = v9[2];
        *((_BYTE *)v8 + 24) = *((_BYTE *)v9 + 24);
        v8[2] = v30;
        swift_bridgeObjectRetain(v29);
        v20 = v8;
        v21 = v10;
        v22 = 3;
        goto LABEL_13;
      case 4u:
        v31 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v8, v9, v31);
        v32 = sub_71B4(&qword_2A6D10);
        v33 = *(int *)(v32 + 48);
        v34 = (char *)v8 + v33;
        v35 = (char *)v9 + v33;
        *(_QWORD *)v34 = *(_QWORD *)v35;
        v36 = *((_QWORD *)v35 + 1);
        *((_QWORD *)v34 + 1) = v36;
        v34[16] = v35[16];
        *((_QWORD *)v34 + 3) = *((_QWORD *)v35 + 3);
        v55 = *((_QWORD *)v35 + 4);
        *((_QWORD *)v34 + 4) = v55;
        *((_QWORD *)v34 + 5) = *((_QWORD *)v35 + 5);
        v53 = *((_QWORD *)v35 + 6);
        *((_QWORD *)v34 + 6) = v53;
        v34[56] = v35[56];
        v34[57] = v35[57];
        v37 = *((_DWORD *)v35 + 15);
        v34[64] = v35[64];
        *((_DWORD *)v34 + 15) = v37;
        LOBYTE(v37) = v35[72];
        *((_DWORD *)v34 + 17) = *((_DWORD *)v35 + 17);
        v34[72] = v37;
        v34[73] = v35[73];
        v34[74] = v35[74];
        v34[75] = v35[75];
        v34[76] = v35[76];
        v34[77] = v35[77];
        *((_QWORD *)v34 + 10) = *((_QWORD *)v35 + 10);
        v38 = *((_QWORD *)v35 + 11);
        *((_QWORD *)v34 + 11) = v38;
        v39 = *(int *)(v32 + 64);
        v40 = (char *)v8 + v39;
        v41 = (char *)v9 + v39;
        *v40 = *v41;
        *((_DWORD *)v40 + 1) = *((_DWORD *)v41 + 1);
        *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
        v42 = *((_QWORD *)v41 + 2);
        *((_QWORD *)v40 + 2) = v42;
        *((_QWORD *)v40 + 3) = *((_QWORD *)v41 + 3);
        v43 = *((_QWORD *)v41 + 4);
        *((_QWORD *)v40 + 4) = v43;
        *((_QWORD *)v40 + 5) = *((_QWORD *)v41 + 5);
        v44 = *((_QWORD *)v41 + 6);
        *((_QWORD *)v40 + 6) = v44;
        *((_QWORD *)v40 + 7) = *((_QWORD *)v41 + 7);
        v45 = *((_QWORD *)v41 + 8);
        *((_QWORD *)v40 + 8) = v45;
        *((_QWORD *)v40 + 9) = *((_QWORD *)v41 + 9);
        v46 = *((_QWORD *)v41 + 10);
        *((_QWORD *)v40 + 10) = v46;
        LODWORD(v34) = *((_DWORD *)v41 + 22);
        v40[92] = v41[92];
        *((_DWORD *)v40 + 22) = (_DWORD)v34;
        *((_QWORD *)v40 + 12) = *((_QWORD *)v41 + 12);
        v47 = *((_QWORD *)v41 + 13);
        *((_QWORD *)v40 + 13) = v47;
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        v20 = v8;
        v21 = v10;
        v22 = 4;
        goto LABEL_13;
      case 5u:
        *v8 = *v9;
        v48 = v9[1];
        v8[1] = v48;
        v8[2] = v9[2];
        swift_bridgeObjectRetain(v48);
        v20 = v8;
        v21 = v10;
        v22 = 5;
        goto LABEL_13;
      case 6u:
        *v8 = *v9;
        v49 = v9[1];
        v8[1] = v49;
        swift_bridgeObjectRetain(v49);
        v20 = v8;
        v21 = v10;
        v22 = 6;
        goto LABEL_13;
      case 7u:
        *v8 = *v9;
        *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
        v8[2] = v9[2];
        *((_BYTE *)v8 + 24) = *((_BYTE *)v9 + 24);
        *((_BYTE *)v8 + 25) = *((_BYTE *)v9 + 25);
        *((_BYTE *)v8 + 26) = *((_BYTE *)v9 + 26);
        v8[4] = v9[4];
        v50 = v9[5];
        v8[5] = v50;
        swift_bridgeObjectRetain(v50);
        v20 = v8;
        v21 = v10;
        v22 = 7;
        goto LABEL_13;
      case 8u:
        *v8 = *v9;
        *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
        v8[2] = v9[2];
        *((_BYTE *)v8 + 24) = *((_BYTE *)v9 + 24);
        *((_BYTE *)v8 + 25) = *((_BYTE *)v9 + 25);
        *((_BYTE *)v8 + 26) = *((_BYTE *)v9 + 26);
        v8[4] = v9[4];
        v51 = v9[5];
        v8[5] = v51;
        *((_BYTE *)v8 + 48) = *((_BYTE *)v9 + 48);
        *((_BYTE *)v8 + 49) = *((_BYTE *)v9 + 49);
        swift_bridgeObjectRetain(v51);
        v20 = v8;
        v21 = v10;
        v22 = 8;
LABEL_13:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        break;
      default:
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1CAD78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppAnalyticsAction.Type(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for AppAnalyticsAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = type metadata accessor for AppAnalyticsAction.Type(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  if (EnumCaseMultiPayload == 4)
  {
    v17 = type metadata accessor for Date(0);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v8, v9, v17);
    v18 = sub_71B4(&qword_2A6D10);
    v19 = *(int *)(v18 + 48);
    v20 = (_OWORD *)((char *)v8 + v19);
    v21 = (_OWORD *)((char *)v9 + v19);
    v22 = v21[3];
    v20[2] = v21[2];
    v20[3] = v22;
    v23 = v21[5];
    v20[4] = v21[4];
    v20[5] = v23;
    v24 = v21[1];
    *v20 = *v21;
    v20[1] = v24;
    v25 = *(int *)(v18 + 64);
    v26 = (_OWORD *)((char *)v8 + v25);
    v27 = (_OWORD *)((char *)v9 + v25);
    v28 = v27[5];
    v26[4] = v27[4];
    v26[5] = v28;
    v26[6] = v27[6];
    v29 = v27[1];
    *v26 = *v27;
    v26[1] = v29;
    v30 = v27[3];
    v26[2] = v27[2];
    v26[3] = v30;
    swift_storeEnumTagMultiPayload(v8, v10, 4);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v12 = v9[1];
    *v8 = *v9;
    v8[1] = v12;
    v8[2] = v9[2];
    v13 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v16 = type metadata accessor for ScenePhase(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for AppAnalyticsAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (_OWORD *)(a1 + v7);
    v9 = (_OWORD *)(a2 + v7);
    sub_1CAD78(a1 + v7);
    v10 = type metadata accessor for AppAnalyticsAction.Type(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    if (EnumCaseMultiPayload == 4)
    {
      v17 = type metadata accessor for Date(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v8, v9, v17);
      v18 = sub_71B4(&qword_2A6D10);
      v19 = *(int *)(v18 + 48);
      v20 = (_OWORD *)((char *)v8 + v19);
      v21 = (_OWORD *)((char *)v9 + v19);
      v22 = v21[3];
      v20[2] = v21[2];
      v20[3] = v22;
      v23 = v21[5];
      v20[4] = v21[4];
      v20[5] = v23;
      v24 = v21[1];
      *v20 = *v21;
      v20[1] = v24;
      v25 = *(int *)(v18 + 64);
      v26 = (_OWORD *)((char *)v8 + v25);
      v27 = (_OWORD *)((char *)v9 + v25);
      v28 = v27[5];
      v26[4] = v27[4];
      v26[5] = v28;
      v26[6] = v27[6];
      v29 = v27[1];
      *v26 = *v27;
      v26[1] = v29;
      v30 = v27[3];
      v26[2] = v27[2];
      v26[3] = v30;
      swift_storeEnumTagMultiPayload(v8, v10, 4);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = v9[1];
      *v8 = *v9;
      v8[1] = v12;
      v8[2] = v9[2];
      v13 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
      v14 = (char *)v8 + v13;
      v15 = (char *)v9 + v13;
      v16 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AppAnalyticsAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CB0E8);
}

uint64_t sub_1CB0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for AppAnalyticsAction.Type(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AppAnalyticsAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CB168);
}

uint64_t sub_1CB168(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for AppAnalyticsAction.Type(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1CB1E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AppAnalyticsAction.Type(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AppAnalyticsAction.Type(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v18 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v18);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        v8 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = v8;
        a1[24] = a2[24];
        v9 = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = v9;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        v10 = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 8) = v10;
        a1[72] = a2[72];
        *((_DWORD *)a1 + 19) = *((_DWORD *)a2 + 19);
        v11 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v11;
        v12 = *((_QWORD *)a2 + 13);
        *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 13) = v12;
        v13 = *((_QWORD *)a2 + 15);
        *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
        *((_QWORD *)a1 + 15) = v13;
        v14 = *((_QWORD *)a2 + 17);
        *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
        *((_QWORD *)a1 + 17) = v14;
        v15 = *((_QWORD *)a2 + 19);
        *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
        *((_QWORD *)a1 + 19) = v15;
        a1[164] = a2[164];
        *((_DWORD *)a1 + 40) = *((_DWORD *)a2 + 40);
        v16 = *((_QWORD *)a2 + 21);
        v17 = *((_QWORD *)a2 + 22);
        *((_QWORD *)a1 + 21) = v16;
        *((_QWORD *)a1 + 22) = v17;
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v17);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v20 = *((_QWORD *)a2 + 5);
        v21 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v21;
        *((_QWORD *)a1 + 5) = v20;
        (**(void (***)(void *, const void *))(v21 - 8))(a1, a2);
        v22 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
        v23 = &a1[v22];
        v24 = &a2[v22];
        v25 = type metadata accessor for ScenePhase(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v26 = *((_QWORD *)a2 + 5);
        v27 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v27;
        *((_QWORD *)a1 + 5) = v26;
        (**(void (***)(void *, const void *))(v27 - 8))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v28 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v28;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        swift_bridgeObjectRetain(v28);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v29 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a1, a2, v29);
        v30 = sub_71B4(&qword_2A6D10);
        v31 = *(int *)(v30 + 48);
        v32 = &a1[v31];
        v33 = &a2[v31];
        v34 = *((_QWORD *)v33 + 1);
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *((_QWORD *)v32 + 1) = v34;
        v32[16] = v33[16];
        v50 = *((_QWORD *)v33 + 4);
        *((_QWORD *)v32 + 3) = *((_QWORD *)v33 + 3);
        *((_QWORD *)v32 + 4) = v50;
        v35 = *((_QWORD *)v33 + 6);
        *((_QWORD *)v32 + 5) = *((_QWORD *)v33 + 5);
        *((_QWORD *)v32 + 6) = v35;
        v32[56] = v33[56];
        v32[57] = v33[57];
        *((_DWORD *)v32 + 15) = *((_DWORD *)v33 + 15);
        v32[64] = v33[64];
        *((_DWORD *)v32 + 17) = *((_DWORD *)v33 + 17);
        v32[72] = v33[72];
        *(_DWORD *)(v32 + 73) = *(_DWORD *)(v33 + 73);
        v32[77] = v33[77];
        v36 = *((_QWORD *)v33 + 11);
        *((_QWORD *)v32 + 10) = *((_QWORD *)v33 + 10);
        *((_QWORD *)v32 + 11) = v36;
        v37 = *(int *)(v30 + 64);
        v38 = &a1[v37];
        v39 = &a2[v37];
        *v38 = *v39;
        *((_DWORD *)v38 + 1) = *((_DWORD *)v39 + 1);
        v40 = *((_QWORD *)v39 + 2);
        *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
        *((_QWORD *)v38 + 2) = v40;
        v41 = *((_QWORD *)v39 + 4);
        *((_QWORD *)v38 + 3) = *((_QWORD *)v39 + 3);
        *((_QWORD *)v38 + 4) = v41;
        v42 = *((_QWORD *)v39 + 6);
        *((_QWORD *)v38 + 5) = *((_QWORD *)v39 + 5);
        *((_QWORD *)v38 + 6) = v42;
        v43 = *((_QWORD *)v39 + 8);
        *((_QWORD *)v38 + 7) = *((_QWORD *)v39 + 7);
        *((_QWORD *)v38 + 8) = v43;
        v44 = *((_QWORD *)v39 + 10);
        *((_QWORD *)v38 + 9) = *((_QWORD *)v39 + 9);
        *((_QWORD *)v38 + 10) = v44;
        LODWORD(v32) = *((_DWORD *)v39 + 22);
        v38[92] = v39[92];
        *((_DWORD *)v38 + 22) = (_DWORD)v32;
        v45 = *((_QWORD *)v39 + 13);
        *((_QWORD *)v38 + 12) = *((_QWORD *)v39 + 12);
        *((_QWORD *)v38 + 13) = v45;
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v46 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v46;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        swift_bridgeObjectRetain(v46);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v47 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v47;
        swift_bridgeObjectRetain(v47);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
        v48 = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = v48;
        swift_bridgeObjectRetain(v48);
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
        v49 = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = v49;
        *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
        swift_bridgeObjectRetain(v49);
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for AppAnalyticsAction.Type(uint64_t a1, uint64_t a2)
{
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;
  int64_t v8;
  void *v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  int64_t v57;
  int64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BAEventReporter **v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  int64_t v83;
  int64_t v84;
  id v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  int64_t v90;
  int64_t v91;
  id v92;
  BAEventReporter **v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  int64_t v98;
  int64_t v99;
  id v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  int64_t v105;
  int64_t v106;
  id v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  int64_t v112;
  int64_t v113;
  id v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  int64_t v119;
  int64_t v120;
  id v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  int64_t v126;
  int64_t v127;
  id v128;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 16), v3, v4, v5, v6, v7, v8, v9);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 40), v11, v12, v13, v14, v15, v16, v17);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 64), v18, v19, v20, v21, v22, v23, v24);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 88), v25, v26, v27, v28, v29, v30, v31);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 104), v32, v33, v34, v35, v36, v37, v38);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 120), v39, v40, v41, v42, v43, v44, v45);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 136), v46, v47, v48, v49, v50, v51, v52);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 152), v53, v54, v55, v56, v57, v58, v59);
      v10 = *(BAEventReporter **)(a1 + 176);
      goto LABEL_8;
    case 1u:
      sub_7DAC((_QWORD *)a1);
      v60 = a1 + *(int *)(sub_71B4(&qword_2A6D08) + 48);
      v61 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v60, v61);
      return;
    case 2u:
      sub_7DAC((_QWORD *)a1);
      return;
    case 3u:
    case 5u:
    case 6u:
      v10 = *(BAEventReporter **)(a1 + 8);
      goto LABEL_8;
    case 4u:
      v62 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(a1, v62);
      v63 = sub_71B4(&qword_2A6D10);
      v64 = (BAEventReporter **)(a1 + *(int *)(v63 + 48));
      swift_bridgeObjectRelease(v64[1], v65, v66, v67, v68, v69, v70, v71);
      swift_bridgeObjectRelease(v64[4], v72, v73, v74, v75, v76, v77, v78);
      swift_bridgeObjectRelease(v64[6], v79, v80, v81, v82, v83, v84, v85);
      swift_bridgeObjectRelease(v64[11], v86, v87, v88, v89, v90, v91, v92);
      v93 = (BAEventReporter **)(a1 + *(int *)(v63 + 64));
      swift_bridgeObjectRelease(v93[2], v94, v95, v96, v97, v98, v99, v100);
      swift_bridgeObjectRelease(v93[4], v101, v102, v103, v104, v105, v106, v107);
      swift_bridgeObjectRelease(v93[6], v108, v109, v110, v111, v112, v113, v114);
      swift_bridgeObjectRelease(v93[8], v115, v116, v117, v118, v119, v120, v121);
      swift_bridgeObjectRelease(v93[10], v122, v123, v124, v125, v126, v127, v128);
      v10 = v93[13];
      goto LABEL_8;
    case 7u:
    case 8u:
      v10 = *(BAEventReporter **)(a1 + 40);
LABEL_8:
      swift_bridgeObjectRelease(v10, v3, v4, v5, v6, v7, v8, v9);
      break;
    default:
      return;
  }
}

char *initializeWithCopy for AppAnalyticsAction.Type(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      *a1 = *a2;
      v6 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v6;
      a1[24] = a2[24];
      v7 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      v8 = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 8) = v8;
      a1[72] = a2[72];
      *((_DWORD *)a1 + 19) = *((_DWORD *)a2 + 19);
      v9 = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 11) = v9;
      v10 = *((_QWORD *)a2 + 13);
      *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
      *((_QWORD *)a1 + 13) = v10;
      v11 = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
      *((_QWORD *)a1 + 15) = v11;
      v12 = *((_QWORD *)a2 + 17);
      *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
      *((_QWORD *)a1 + 17) = v12;
      v13 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      *((_QWORD *)a1 + 19) = v13;
      a1[164] = a2[164];
      *((_DWORD *)a1 + 40) = *((_DWORD *)a2 + 40);
      v14 = *((_QWORD *)a2 + 21);
      v15 = *((_QWORD *)a2 + 22);
      *((_QWORD *)a1 + 21) = v14;
      *((_QWORD *)a1 + 22) = v15;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      v16 = a1;
      v17 = a3;
      v18 = 0;
      goto LABEL_12;
    case 1u:
      v19 = *((_QWORD *)a2 + 5);
      v20 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v20;
      *((_QWORD *)a1 + 5) = v19;
      (**(void (***)(void *, const void *))(v20 - 8))(a1, a2);
      v21 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
      v22 = &a1[v21];
      v23 = &a2[v21];
      v24 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      v16 = a1;
      v17 = a3;
      v18 = 1;
      goto LABEL_12;
    case 2u:
      v25 = *((_QWORD *)a2 + 5);
      v26 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v26;
      *((_QWORD *)a1 + 5) = v25;
      (**(void (***)(void *, const void *))(v26 - 8))(a1, a2);
      v16 = a1;
      v17 = a3;
      v18 = 2;
      goto LABEL_12;
    case 3u:
      v27 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v27;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      swift_bridgeObjectRetain(v27);
      v16 = a1;
      v17 = a3;
      v18 = 3;
      goto LABEL_12;
    case 4u:
      v28 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(a1, a2, v28);
      v29 = sub_71B4(&qword_2A6D10);
      v30 = *(int *)(v29 + 48);
      v31 = &a1[v30];
      v32 = &a2[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v31[16] = v32[16];
      v50 = *((_QWORD *)v32 + 4);
      *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
      *((_QWORD *)v31 + 4) = v50;
      v34 = *((_QWORD *)v32 + 6);
      *((_QWORD *)v31 + 5) = *((_QWORD *)v32 + 5);
      *((_QWORD *)v31 + 6) = v34;
      v31[56] = v32[56];
      v31[57] = v32[57];
      *((_DWORD *)v31 + 15) = *((_DWORD *)v32 + 15);
      v31[64] = v32[64];
      *((_DWORD *)v31 + 17) = *((_DWORD *)v32 + 17);
      v31[72] = v32[72];
      *(_DWORD *)(v31 + 73) = *(_DWORD *)(v32 + 73);
      v31[77] = v32[77];
      v35 = *((_QWORD *)v32 + 11);
      *((_QWORD *)v31 + 10) = *((_QWORD *)v32 + 10);
      *((_QWORD *)v31 + 11) = v35;
      v36 = *(int *)(v29 + 64);
      v37 = &a1[v36];
      v38 = &a2[v36];
      *v37 = *v38;
      *((_DWORD *)v37 + 1) = *((_DWORD *)v38 + 1);
      v39 = *((_QWORD *)v38 + 2);
      *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
      *((_QWORD *)v37 + 2) = v39;
      v40 = *((_QWORD *)v38 + 4);
      *((_QWORD *)v37 + 3) = *((_QWORD *)v38 + 3);
      *((_QWORD *)v37 + 4) = v40;
      v41 = *((_QWORD *)v38 + 6);
      *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
      *((_QWORD *)v37 + 6) = v41;
      v42 = *((_QWORD *)v38 + 8);
      *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
      *((_QWORD *)v37 + 8) = v42;
      v43 = *((_QWORD *)v38 + 10);
      *((_QWORD *)v37 + 9) = *((_QWORD *)v38 + 9);
      *((_QWORD *)v37 + 10) = v43;
      LODWORD(v31) = *((_DWORD *)v38 + 22);
      v37[92] = v38[92];
      *((_DWORD *)v37 + 22) = (_DWORD)v31;
      v44 = *((_QWORD *)v38 + 13);
      *((_QWORD *)v37 + 12) = *((_QWORD *)v38 + 12);
      *((_QWORD *)v37 + 13) = v44;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v44);
      v16 = a1;
      v17 = a3;
      v18 = 4;
      goto LABEL_12;
    case 5u:
      v45 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v45;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain(v45);
      v16 = a1;
      v17 = a3;
      v18 = 5;
      goto LABEL_12;
    case 6u:
      v46 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v46;
      swift_bridgeObjectRetain(v46);
      v16 = a1;
      v17 = a3;
      v18 = 6;
      goto LABEL_12;
    case 7u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
      v47 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v47;
      swift_bridgeObjectRetain(v47);
      v16 = a1;
      v17 = a3;
      v18 = 7;
      goto LABEL_12;
    case 8u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
      v48 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v48;
      *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
      swift_bridgeObjectRetain(v48);
      v16 = a1;
      v17 = a3;
      v18 = 8;
LABEL_12:
      swift_storeEnumTagMultiPayload(v16, v17, v18);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for AppAnalyticsAction.Type(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;

  if (a1 != a2)
  {
    sub_1CAD78((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        v6 = a2[2];
        a1[2] = v6;
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[4] = a2[4];
        v7 = a2[5];
        a1[5] = v7;
        a1[6] = a2[6];
        a1[7] = a2[7];
        v8 = a2[8];
        a1[8] = v8;
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *((_DWORD *)a1 + 19) = *((_DWORD *)a2 + 19);
        a1[10] = a2[10];
        v9 = a2[11];
        a1[11] = v9;
        a1[12] = a2[12];
        v10 = a2[13];
        a1[13] = v10;
        a1[14] = a2[14];
        v11 = a2[15];
        a1[15] = v11;
        a1[16] = a2[16];
        v12 = a2[17];
        a1[17] = v12;
        a1[18] = a2[18];
        v13 = a2[19];
        a1[19] = v13;
        v14 = *((_DWORD *)a2 + 40);
        *((_BYTE *)a1 + 164) = *((_BYTE *)a2 + 164);
        *((_DWORD *)a1 + 40) = v14;
        a1[21] = a2[21];
        v15 = a2[22];
        a1[22] = v15;
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v15);
        v16 = a1;
        v17 = a3;
        v18 = 0;
        goto LABEL_13;
      case 1u:
        v19 = a2[3];
        a1[3] = v19;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        (**(void (***)(void *, const void *))(v19 - 8))(a1, a2);
        v20 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = type metadata accessor for ScenePhase(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v16 = a1;
        v17 = a3;
        v18 = 1;
        goto LABEL_13;
      case 2u:
        v24 = a2[3];
        a1[3] = v24;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        (**(void (***)(void *, const void *))(v24 - 8))(a1, a2);
        v16 = a1;
        v17 = a3;
        v18 = 2;
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        v25 = a2[1];
        a1[1] = v25;
        v26 = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[2] = v26;
        swift_bridgeObjectRetain(v25);
        v16 = a1;
        v17 = a3;
        v18 = 3;
        goto LABEL_13;
      case 4u:
        v27 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
        v28 = sub_71B4(&qword_2A6D10);
        v29 = *(int *)(v28 + 48);
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        *(_QWORD *)v30 = *(_QWORD *)v31;
        v32 = *((_QWORD *)v31 + 1);
        *((_QWORD *)v30 + 1) = v32;
        v30[16] = v31[16];
        *((_QWORD *)v30 + 3) = *((_QWORD *)v31 + 3);
        v50 = *((_QWORD *)v31 + 4);
        *((_QWORD *)v30 + 4) = v50;
        *((_QWORD *)v30 + 5) = *((_QWORD *)v31 + 5);
        v33 = *((_QWORD *)v31 + 6);
        *((_QWORD *)v30 + 6) = v33;
        v30[56] = v31[56];
        v30[57] = v31[57];
        v34 = *((_DWORD *)v31 + 15);
        v30[64] = v31[64];
        *((_DWORD *)v30 + 15) = v34;
        LOBYTE(v34) = v31[72];
        *((_DWORD *)v30 + 17) = *((_DWORD *)v31 + 17);
        v30[72] = v34;
        v30[73] = v31[73];
        v30[74] = v31[74];
        v30[75] = v31[75];
        v30[76] = v31[76];
        v30[77] = v31[77];
        *((_QWORD *)v30 + 10) = *((_QWORD *)v31 + 10);
        v35 = *((_QWORD *)v31 + 11);
        *((_QWORD *)v30 + 11) = v35;
        v36 = *(int *)(v28 + 64);
        v37 = (char *)a1 + v36;
        v38 = (char *)a2 + v36;
        *v37 = *v38;
        *((_DWORD *)v37 + 1) = *((_DWORD *)v38 + 1);
        *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
        v39 = *((_QWORD *)v38 + 2);
        *((_QWORD *)v37 + 2) = v39;
        *((_QWORD *)v37 + 3) = *((_QWORD *)v38 + 3);
        v40 = *((_QWORD *)v38 + 4);
        *((_QWORD *)v37 + 4) = v40;
        *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
        v41 = *((_QWORD *)v38 + 6);
        *((_QWORD *)v37 + 6) = v41;
        *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
        v42 = *((_QWORD *)v38 + 8);
        *((_QWORD *)v37 + 8) = v42;
        *((_QWORD *)v37 + 9) = *((_QWORD *)v38 + 9);
        v43 = *((_QWORD *)v38 + 10);
        *((_QWORD *)v37 + 10) = v43;
        LODWORD(v30) = *((_DWORD *)v38 + 22);
        v37[92] = v38[92];
        *((_DWORD *)v37 + 22) = (_DWORD)v30;
        *((_QWORD *)v37 + 12) = *((_QWORD *)v38 + 12);
        v44 = *((_QWORD *)v38 + 13);
        *((_QWORD *)v37 + 13) = v44;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        v16 = a1;
        v17 = a3;
        v18 = 4;
        goto LABEL_13;
      case 5u:
        *a1 = *a2;
        v45 = a2[1];
        a1[1] = v45;
        a1[2] = a2[2];
        swift_bridgeObjectRetain(v45);
        v16 = a1;
        v17 = a3;
        v18 = 5;
        goto LABEL_13;
      case 6u:
        *a1 = *a2;
        v46 = a2[1];
        a1[1] = v46;
        swift_bridgeObjectRetain(v46);
        v16 = a1;
        v17 = a3;
        v18 = 6;
        goto LABEL_13;
      case 7u:
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
        *((_BYTE *)a1 + 26) = *((_BYTE *)a2 + 26);
        a1[4] = a2[4];
        v47 = a2[5];
        a1[5] = v47;
        swift_bridgeObjectRetain(v47);
        v16 = a1;
        v17 = a3;
        v18 = 7;
        goto LABEL_13;
      case 8u:
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
        *((_BYTE *)a1 + 26) = *((_BYTE *)a2 + 26);
        a1[4] = a2[4];
        v48 = a2[5];
        a1[5] = v48;
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
        swift_bridgeObjectRetain(v48);
        v16 = a1;
        v17 = a3;
        v18 = 8;
LABEL_13:
        swift_storeEnumTagMultiPayload(v16, v17, v18);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for AppAnalyticsAction.Type(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 4)
  {
    v12 = type metadata accessor for Date(0);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    v13 = sub_71B4(&qword_2A6D10);
    v14 = *(int *)(v13 + 48);
    v15 = (_OWORD *)((char *)a1 + v14);
    v16 = (_OWORD *)((char *)a2 + v14);
    v17 = v16[3];
    v15[2] = v16[2];
    v15[3] = v17;
    v18 = v16[5];
    v15[4] = v16[4];
    v15[5] = v18;
    v19 = v16[1];
    *v15 = *v16;
    v15[1] = v19;
    v20 = *(int *)(v13 + 64);
    v21 = (_OWORD *)((char *)a1 + v20);
    v22 = (_OWORD *)((char *)a2 + v20);
    v23 = v22[5];
    v21[4] = v22[4];
    v21[5] = v23;
    v21[6] = v22[6];
    v24 = v22[1];
    *v21 = *v22;
    v21[1] = v24;
    v25 = v22[3];
    v21[2] = v22[2];
    v21[3] = v25;
    swift_storeEnumTagMultiPayload(a1, a3, 4);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    v8 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ScenePhase(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for AppAnalyticsAction.Type(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a1 != a2)
  {
    sub_1CAD78((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 4)
    {
      v12 = type metadata accessor for Date(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = sub_71B4(&qword_2A6D10);
      v14 = *(int *)(v13 + 48);
      v15 = (_OWORD *)((char *)a1 + v14);
      v16 = (_OWORD *)((char *)a2 + v14);
      v17 = v16[3];
      v15[2] = v16[2];
      v15[3] = v17;
      v18 = v16[5];
      v15[4] = v16[4];
      v15[5] = v18;
      v19 = v16[1];
      *v15 = *v16;
      v15[1] = v19;
      v20 = *(int *)(v13 + 64);
      v21 = (_OWORD *)((char *)a1 + v20);
      v22 = (_OWORD *)((char *)a2 + v20);
      v23 = v22[5];
      v21[4] = v22[4];
      v21[5] = v23;
      v21[6] = v22[6];
      v24 = v22[1];
      *v21 = *v22;
      v21[1] = v24;
      v25 = v22[3];
      v21[2] = v22[2];
      v21[3] = v25;
      swift_storeEnumTagMultiPayload(a1, a3, 4);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      v8 = *(int *)(sub_71B4(&qword_2A6D08) + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AppAnalyticsAction.Type(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AppAnalyticsAction.Type(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1CC550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1CC560(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _QWORD v7[10];

  v7[0] = &unk_219BD8;
  result = type metadata accessor for ScenePhase(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v6, &unk_219BF0, *(_QWORD *)(result - 8) + 64);
    v7[1] = v6;
    v7[2] = &unk_219BF0;
    v7[3] = &unk_219C08;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout3(v5, *(_QWORD *)(result - 8) + 64, &unk_219C20, &unk_219C38);
      v7[4] = v5;
      v7[5] = &unk_219C50;
      v7[6] = &unk_219C68;
      v7[7] = &unk_219C80;
      v7[8] = &unk_219C98;
      v7[9] = &unk_219CB0;
      swift_initEnumMetadataMultiPayload(a1, 256, 10, v7);
      return 0;
    }
  }
  return result;
}

void static ReviewTypeData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CC6B8@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CC71C + 4 * byte_219CF4[a1]))(0x676E69746172);
}

uint64_t sub_1CC71C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x676E69746172 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x676E69746172, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_1CC7C8()
{
  return 0x7954776569766572;
}

uint64_t sub_1CC7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7954776569766572 && a2 == 0xEA00000000006570)
  {
    result = swift_bridgeObjectRelease(0xEA00000000006570);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7954776569766572, 0xEA00000000006570, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1CC884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1CC9D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1CC8AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1CC9D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReviewTypeData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A6E50);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1CC9D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReviewTypeData.CodingKeys, &type metadata for ReviewTypeData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1CCA14();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for ReviewType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1CC9D0()
{
  unint64_t result;

  result = qword_2A6E58;
  if (!qword_2A6E58)
  {
    result = swift_getWitnessTable(byte_219E9C, &type metadata for ReviewTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6E58);
  }
  return result;
}

unint64_t sub_1CCA14()
{
  unint64_t result;

  result = qword_2A6E60;
  if (!qword_2A6E60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReviewType, &type metadata for ReviewType);
    atomic_store(result, (unint64_t *)&qword_2A6E60);
  }
  return result;
}

uint64_t ReviewTypeData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A6E68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1CC9D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReviewTypeData.CodingKeys, &type metadata for ReviewTypeData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1CCB74();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for ReviewType, v13, v5, &type metadata for ReviewType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_1CCB74()
{
  unint64_t result;

  result = qword_2A6E70;
  if (!qword_2A6E70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReviewType, &type metadata for ReviewType);
    atomic_store(result, (unint64_t *)&qword_2A6E70);
  }
  return result;
}

uint64_t sub_1CCBC0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ReviewTypeData.init(from:)(a1, a2);
}

uint64_t sub_1CCBD4(_QWORD *a1)
{
  return ReviewTypeData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for ReviewTypeData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCC34 + 4 * byte_219CFD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCC68 + 4 * byte_219CF8[v4]))();
}

uint64_t sub_1CCC68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCC70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCC78);
  return result;
}

uint64_t sub_1CCC84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCC8CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCC90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCC98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReviewTypeData()
{
  return &type metadata for ReviewTypeData;
}

uint64_t storeEnumTagSinglePayload for ReviewTypeData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCCF4 + 4 * byte_219D02[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCD14 + 4 * byte_219D07[v4]))();
}

_BYTE *sub_1CCCF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCD14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCD1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCD24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCD2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCD34(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReviewTypeData.CodingKeys()
{
  return &type metadata for ReviewTypeData.CodingKeys;
}

unint64_t sub_1CCD54()
{
  unint64_t result;

  result = qword_2A6E78;
  if (!qword_2A6E78)
  {
    result = swift_getWitnessTable(aU_25, &type metadata for ReviewTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6E78);
  }
  return result;
}

unint64_t sub_1CCD9C()
{
  unint64_t result;

  result = qword_2A6E80;
  if (!qword_2A6E80)
  {
    result = swift_getWitnessTable(byte_219DE4, &type metadata for ReviewTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6E80);
  }
  return result;
}

unint64_t sub_1CCDE4()
{
  unint64_t result;

  result = qword_2A6E88;
  if (!qword_2A6E88)
  {
    result = swift_getWitnessTable(byte_219E0C, &type metadata for ReviewTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6E88);
  }
  return result;
}

uint64_t DataStack.subscript.getter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  BAEventReporter *v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  int64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;

  v2 = *v1;
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v4 = *a1;
  v3 = (BAEventReporter *)a1[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_DAAC(v4, (uint64_t)v3);
  if ((v6 & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRelease(v3, v6, v7, v8, v9, v10, v11, v12);
  return v13;
}

uint64_t DataStackID.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int DataStackID.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

Swift::Int sub_1CCF38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

_QWORD *sub_1CCF8C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

void sub_1CCF98(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v3 = a3[1];
  v4 = *a1;
  v5[0] = *a3;
  v5[1] = v3;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  DataStack.subscript.setter(v4, v5);
}

void DataStack.subscript.setter(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  BAEventReporter *v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  BAEventReporter *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  uint64_t v23;

  v3 = v2;
  v5 = *a2;
  v4 = (BAEventReporter *)a2[1];
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v23 = *v2;
    *v2 = 0x8000000000000000;
    sub_1CF75C(a1, v5, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
    v15 = (BAEventReporter *)*v2;
    *v3 = v23;
  }
  else
  {
    v15 = (BAEventReporter *)sub_1CE8CC(*a2, a2[1]);
  }
  swift_bridgeObjectRelease(v4, v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
}

void (*DataStack.subscript.modify(_QWORD *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  v5 = *a2;
  v4 = a2[1];
  a1[1] = v2;
  a1[2] = v5;
  a1[3] = v4;
  v6 = *v2;
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRetain(v4);
  if (v7)
  {
    swift_bridgeObjectRetain_n(v4, 2);
    v8 = sub_DAAC(v5, v4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      v10 = 0;
    }
    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    v10 = 0;
  }
  *a1 = v10;
  return sub_1CD130;
}

void sub_1CD130(uint64_t *a1, char a2)
{
  BAEventReporter *v2;
  uint64_t v3;
  uint64_t v4;
  BAEventReporter **v5;
  char isUniquelyReferenced_nonNull_native;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  int64_t v19;
  int64_t v20;
  void *v21;
  BAEventReporter *v22;
  char v23;
  BAEventReporter *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  int64_t v36;
  int64_t v37;
  void *v38;
  BAEventReporter *v39;
  uint64_t v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  uint64_t v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  BAEventReporter *v56;
  BAEventReporter *v57;

  v3 = a1[2];
  v2 = (BAEventReporter *)a1[3];
  v4 = *a1;
  v5 = (BAEventReporter **)a1[1];
  if ((a2 & 1) != 0)
  {
    if (v4)
    {
      swift_bridgeObjectRetain(*a1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
      v56 = *v5;
      *v5 = (BAEventReporter *)0x8000000000000000;
      sub_1CF75C(v4, v3, (uint64_t)v2, isUniquelyReferenced_nonNull_native);
      v7 = *v5;
      *v5 = v56;
      swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
      v22 = v2;
    }
    else
    {
      v40 = sub_1CE8CC(a1[2], (uint64_t)v2);
      swift_bridgeObjectRelease(v2, v41, v42, v43, v44, v45, v46, v47);
      v22 = (BAEventReporter *)v40;
    }
    swift_bridgeObjectRelease(v22, v15, v16, v17, v18, v19, v20, v21);
    v39 = (BAEventReporter *)v4;
  }
  else if (v4)
  {
    v23 = swift_isUniquelyReferenced_nonNull_native(*v5);
    v57 = *v5;
    *v5 = (BAEventReporter *)0x8000000000000000;
    sub_1CF75C(v4, v3, (uint64_t)v2, v23);
    v24 = *v5;
    *v5 = v57;
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    v39 = v2;
  }
  else
  {
    v48 = sub_1CE8CC(a1[2], (uint64_t)v2);
    swift_bridgeObjectRelease(v2, v49, v50, v51, v52, v53, v54, v55);
    v39 = (BAEventReporter *)v48;
  }
  swift_bridgeObjectRelease(v39, v32, v33, v34, v35, v36, v37, v38);
}

uint64_t sub_1CD25C(BAEventReporter *a1, BAEventReporter *a2)
{
  Class isa;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t result;
  Class v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  BAEventReporter *v35;
  __int128 v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[3];
  BAEventReporter *v44;

  isa = a1[1].super.isa;
  v44 = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (isa)
  {
    v11 = 0;
    v12 = 2;
    v35 = a2;
    while (1)
    {
      result = sub_1D055C((uint64_t)&v44[v12], (uint64_t)v36);
      v14 = a2[1].super.isa;
      if (v11 == v14)
      {
        sub_7DAC(v36);
        goto LABEL_9;
      }
      if (v11 >= v14)
        break;
      sub_1D05A0(v36, &v40);
      sub_1D055C((uint64_t)&a2[v12], (uint64_t)v43);
      v36[2] = v42;
      v37 = v43[0];
      v38 = v43[1];
      v39 = v43[2];
      v36[0] = v40;
      v36[1] = v41;
      v15 = *((_QWORD *)&v41 + 1);
      v16 = v42;
      v17 = (uint64_t)sub_7988(v36, *((uint64_t *)&v41 + 1));
      v18 = *((_QWORD *)&v38 + 1);
      v19 = v39;
      v20 = sub_7988(&v37, *((uint64_t *)&v38 + 1));
      LOBYTE(v17) = sub_603FC(v17, (uint64_t)v20, v15, v18, v16, *((uint64_t *)&v16 + 1), v19, *((uint64_t *)&v19 + 1));
      sub_88F50((uint64_t)v36, &qword_2A6F38);
      if ((v17 & 1) == 0)
      {
        swift_bridgeObjectRelease(v35, v4, v5, v6, v7, v8, v9, v10);
        swift_bridgeObjectRelease(v44, v28, v29, v30, v31, v32, v33, v34);
        return 0;
      }
      v11 = (objc_class *)((char *)v11 + 1);
      v12 += 3;
      a2 = v35;
      if (isa == v11)
        goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(a2, v4, v5, v6, v7, v8, v9, v10);
    swift_bridgeObjectRelease(v44, v21, v22, v23, v24, v25, v26, v27);
    return 1;
  }
  return result;
}

__n128 DataStack.first<A>(of:)(uint64_t a1, objc_class *a2, uint64_t a3, objc_class *a4)
{
  uint64_t *v4;
  uint64_t v8;
  BAEventReporter *v9;
  uint64_t v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  BAEventReporter *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  SEL v36;
  id v37;
  id v38;
  int64_t v39;
  id v40;
  BOOL v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  int64_t v46;
  id v47;
  BOOL v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  int64_t v53;
  id v54;
  BOOL v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  __n128 result;
  BAEventReporter *v65;
  BAEventReporter *v66;
  BAEventReporter *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  BAEventReporter *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  BAEventReporter *v78;

  v8 = *v4;
  *(_QWORD *)&v71 = v8;
  v9 = (BAEventReporter *)swift_allocObject(&unk_28AE88, 40, 7);
  v9[1].super.isa = a2;
  *(_QWORD *)v9[1].dataProviders = a3;
  v9[2].super.isa = a4;
  swift_bridgeObjectRetain(v8);
  v10 = sub_71B4(&qword_2A6E98);
  v11 = sub_F7668(&qword_2A6EA0, &qword_2A6E98, (const char *)&protocol conformance descriptor for LazySequence<A>);
  LazySequenceProtocol.compactMap<A>(_:)(&v75, sub_1D01DC, v9, v10, a2, v11);
  swift_release(v9, v12, v13, v14, v15, v16, v17, v18);
  swift_bridgeObjectRelease((BAEventReporter *)v71, v19, v20, v21, v22, v23, v24, v25);
  v26 = v78;
  v66 = (BAEventReporter *)v76;
  v67 = (BAEventReporter *)v75;
  v71 = v75;
  v72 = v76;
  v65 = (BAEventReporter *)v77;
  v73 = v77;
  v74 = v78;
  v27 = sub_679EC(&qword_2A6EA8);
  v28 = type metadata accessor for Optional(255, a2);
  v29 = sub_F7668(&qword_2A6EB0, &qword_2A6EA8, (const char *)&protocol conformance descriptor for [A : B].Values);
  v30 = type metadata accessor for LazyMapSequence(255, v27, v28, v29);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for LazyMapSequence<A, B>, v30);
  v32 = type metadata accessor for LazyFilterSequence(255, v30, WitnessTable);
  v33 = swift_getWitnessTable((const char *)&protocol conformance descriptor for LazyFilterSequence<A>, v32);
  v34 = type metadata accessor for LazyMapSequence(0, v32, a2, v33);
  v70 = sub_F7668(&qword_2A6EB8, &qword_2A6EA8, (const char *)&protocol conformance descriptor for [A : B].Values);
  v69 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> LazyMapSequence<A, B>, v30, &v70);
  v68 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> LazyFilterSequence<A>, v32, &v69);
  v35 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> LazyMapSequence<A, B>, v34, &v68);
  Collection.first.getter(v34, v35);
  swift_release(v26, v36, v37, v38, v39, v40, v41, v42);
  swift_release(v65, v43, v44, v45, v46, v47, v48, v49);
  swift_release(v66, v50, v51, v52, v53, v54, v55, v56);
  swift_bridgeObjectRelease(v67, v57, v58, v59, v60, v61, v62, v63);
  return result;
}

uint64_t sub_1CD640@<X0>(BAEventReporter **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BAEventReporter *v5;
  Class isa;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  int64_t v19;
  int64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  __int128 v25[3];
  _OWORD v26[3];

  v5 = *a1;
  isa = (*a1)[1].super.isa;
  if (isa)
  {
    v7 = (uint64_t)&v5[2];
    swift_bridgeObjectRetain(*a1);
    while (1)
    {
      sub_1D055C(v7, (uint64_t)v25);
      if ((sub_1CD760((uint64_t)v25, a2) & 1) != 0)
        break;
      sub_7DAC(v25);
      v7 += 48;
      isa = (Class)((char *)isa - 1);
      if (!isa)
      {
        swift_bridgeObjectRelease(v5, v15, v16, v17, v18, v19, v20, v21);
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease(v5, v8, v9, v10, v11, v12, v13, v14);
    sub_1D05A0(v25, v26);
  }
  else
  {
LABEL_6:
    memset(v26, 0, sizeof(v26));
  }
  v22 = sub_71B4(&qword_2A6F20);
  v23 = swift_dynamicCast(a3, v26, v22, a2, 6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v23 ^ 1u, 1, a2);
}

uint64_t sub_1CD760(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[48];

  v3 = *(_QWORD *)(a2 - 8);
  v4 = __chkstk_darwin(a1);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D055C(v4, (uint64_t)v10);
  v7 = sub_71B4(&qword_2A6F00);
  v8 = swift_dynamicCast(v6, v10, v7, a2, 6);
  if ((_DWORD)v8)
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, a2);
  return v8;
}

void sub_1CD810(uint64_t *a1, BAEventReporter *a2, uint64_t a3)
{
  Class isa;
  BAEventReporter *v4;
  uint64_t v5;
  Class v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  int64_t v25;
  int64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD *, uint64_t, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  uint64_t v48;
  uint64_t v49;
  unsigned int v51;
  _BYTE v52[40];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[6];
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  isa = a2[1].super.isa;
  if (isa)
  {
    v48 = a1[1];
    v49 = *a1;
    v4 = a2 + 2;
    v51 = enum case for DataEventTrait.onlyOnce(_:);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_1D055C((uint64_t)v4, (uint64_t)v56);
      v28 = sub_71B4(&qword_2A6F00);
      v29 = sub_71B4(&qword_2A6F08);
      if (swift_dynamicCast(&v53, v56, v28, v29, 6))
      {
        sub_8929C(&v53, (uint64_t)v57);
        sub_3A82C(a3, (uint64_t)&v53, &qword_296200);
        if (*((_QWORD *)&v54 + 1))
        {
          sub_8929C(&v53, (uint64_t)v56);
          v31 = v58;
          v30 = v59;
          sub_7988(v57, v58);
          *(_QWORD *)&v53 = v49;
          *((_QWORD *)&v53 + 1) = v48;
          swift_bridgeObjectRetain(v48);
          AnyHashable.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String);
          v32 = *(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t))(v30 + 24);
          *((_QWORD *)&v54 + 1) = v31;
          v55 = v30;
          v33 = sub_16E508(&v53);
          v32(v52, v56, v31, v30);
          sub_E1F0((uint64_t)v52);
          v34 = sub_71B4(&qword_299FD0);
          v35 = type metadata accessor for DataEventTrait(0);
          v36 = *(_QWORD *)(v35 - 8);
          v37 = *(unsigned __int8 *)(v36 + 80);
          v38 = (v37 + 32) & ~v37;
          v39 = swift_allocObject(v34, v38 + *(_QWORD *)(v36 + 72), v37 | 7);
          *(_OWORD *)(v39 + 16) = xmmword_1F5FF0;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104))(v39 + v38, v51, v35);
          AccessTracker.push<A>(data:traits:file:line:)(v33, v39, 0xD000000000000063, 0x8000000000222950, 59, v31, *(_QWORD *)(v30 + 8));
          swift_bridgeObjectRelease((BAEventReporter *)v39, v40, v41, v42, v43, v44, v45, v46);
          sub_7DAC(v56);
          sub_7DAC(&v53);
          sub_7DAC(v57);
          goto LABEL_5;
        }
        sub_88F50((uint64_t)&v53, &qword_296200);
        sub_7DAC(v57);
      }
      else
      {
        v55 = 0;
        v53 = 0u;
        v54 = 0u;
        sub_88F50((uint64_t)&v53, &qword_2A6F10);
      }
      v5 = *(_QWORD *)v4[1].dataProviders;
      v6 = v4[2].super.isa;
      v7 = sub_7988(v4, v5);
      v8 = sub_71B4(&qword_299FD0);
      v9 = type metadata accessor for DataEventTrait(0);
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(unsigned __int8 *)(v10 + 80);
      v12 = (v11 + 32) & ~v11;
      v13 = swift_allocObject(v8, v12 + *(_QWORD *)(v10 + 72), v11 | 7);
      *(_OWORD *)(v13 + 16) = xmmword_1F5FF0;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v13 + v12, v51, v9);
      AccessTracker.push<A>(data:traits:file:line:)(v7, v13, 0xD000000000000063, 0x8000000000222950, 61, v5, v6);
      swift_bridgeObjectRelease((BAEventReporter *)v13, v14, v15, v16, v17, v18, v19, v20);
LABEL_5:
      v4 += 3;
      isa = (Class)((char *)isa - 1);
      if (!isa)
      {
        swift_bridgeObjectRelease(a2, v21, v22, v23, v24, v25, v26, v27);
        return;
      }
    }
  }
}

unint64_t sub_1CDB4C(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  unint64_t result;

  result = sub_3A484((BAEventReporter *)_swiftEmptyArrayStorage, a2, a3, a4, a5, a6, a7, a8);
  qword_2A6E90 = result;
  return result;
}

uint64_t sub_1CDB70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_295CF8 != -1)
    swift_once(&qword_295CF8, sub_1CDB4C);
  v2 = qword_2A6E90;
  *a1 = qword_2A6E90;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1CDBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1D0518();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

_QWORD *EnvironmentValues._dataStack.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_E224();
  return EnvironmentValues.subscript.getter(a1, &type metadata for DataStackKey, &type metadata for DataStackKey, v2);
}

uint64_t EnvironmentValues._dataStack.setter(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_E224();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for DataStackKey, &type metadata for DataStackKey, v1);
}

uint64_t (*EnvironmentValues._dataStack.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  unint64_t v3;

  a1[2] = v1;
  v3 = sub_E224();
  a1[3] = v3;
  EnvironmentValues.subscript.getter(a1, &type metadata for DataStackKey, &type metadata for DataStackKey, v3);
  return sub_1CDCCC;
}

uint64_t sub_1CDCCC(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  a1[1] = v3;
  v4 = a1[3];
  if ((a2 & 1) == 0)
    return EnvironmentValues.subscript.setter(a1 + 1, &type metadata for DataStackKey, &type metadata for DataStackKey, a1[3]);
  swift_bridgeObjectRetain(v3);
  EnvironmentValues.subscript.setter(a1 + 1, &type metadata for DataStackKey, &type metadata for DataStackKey, v4);
  return swift_bridgeObjectRelease(*a1);
}

void static DataStackID.additionalEventData.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x8000000000222930;
}

void View.appAnalyticsData<A>(_:for:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a5;
  v28 = a6;
  v29 = a7;
  v11 = type metadata accessor for Optional(0, a4);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - v13;
  v15 = sub_71B4(&qword_2A6EC0);
  v16 = swift_allocObject(v15, 80, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  v17 = (_QWORD *)(v16 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v18 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)v17 = 0u;
  }
  else
  {
    v19 = v28;
    *(_QWORD *)(v16 + 56) = a4;
    *(_QWORD *)(v16 + 64) = v19;
    *(_QWORD *)(v16 + 72) = v29;
    v20 = sub_16E508(v17);
    (*(void (**)(_QWORD *, char *, uint64_t))(v18 + 32))(v20, v14, a4);
  }
  View.appAnalyticsData(_:for:)((objc_class *)v16, a2, a3, v30);
  swift_bridgeObjectRelease((BAEventReporter *)v16, v21, v22, v23, v24, v25, v26, v27);
}

void View.appAnalyticsData(_:for:)(objc_class *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  objc_class *v7;
  uint64_t v8;
  BAEventReporter *KeyPath;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;

  v8 = *a2;
  v7 = (objc_class *)a2[1];
  KeyPath = (BAEventReporter *)swift_getKeyPath(&unk_219EF0);
  v10 = (BAEventReporter *)swift_allocObject(&unk_28AEB0, 40, 7);
  v10[1].super.isa = a1;
  *(_QWORD *)v10[1].dataProviders = v8;
  v10[2].super.isa = v7;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v7);
  View.transformEnvironment<A>(_:transform:)(KeyPath, sub_1D021C, v10, a3, a4);
  swift_release(KeyPath, v11, v12, v13, v14, v15, v16, v17);
  swift_release(v10, v18, v19, v20, v21, v22, v23, v24);
}

void sub_1CDF80(BAEventReporter **a1, BAEventReporter *a2, uint64_t a3, BAEventReporter *a4)
{
  uint64_t v5;
  Class isa;
  uint64_t v9;
  BAEventReporter *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  void *v18;
  int64_t v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  int64_t v30;
  int64_t v31;
  void *v32;
  BAEventReporter *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  const char *v39;
  void *v40;
  void *v41;
  void *v42;
  int64_t v43;
  int64_t v44;
  void *v45;
  BAEventReporter *v46;
  BAEventReporter *v47;
  char v48;
  BAEventReporter *v49;
  __int128 v51;
  uint64_t v52;
  __int128 v53[3];
  _QWORD v54[7];

  v5 = a3;
  isa = a2[1].super.isa;
  if (isa)
  {
    v9 = (uint64_t)&a2[2];
    swift_bridgeObjectRetain(a2);
    v10 = (BAEventReporter *)_swiftEmptyArrayStorage;
    do
    {
      sub_3A82C(v9, (uint64_t)v54, &qword_2A6F20);
      sub_1D05B8((uint64_t)v54, (uint64_t)&v51);
      if (v52)
      {
        sub_1D05A0(&v51, v53);
        sub_1D05A0(v53, &v51);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_1DB7C8(0, (int64_t)v10[1].super.isa + 1, 1, v10, v18, v19, v20, v21);
        v23 = (unint64_t)v10[1].super.isa;
        v22 = *(_QWORD *)v10[1].dataProviders;
        if (v23 >= v22 >> 1)
          v10 = sub_1DB7C8((BAEventReporter *)(v22 > 1), v23 + 1, 1, v10, v18, v19, v20, v21);
        v10[1].super.isa = (Class)(v23 + 1);
        sub_1D05A0(&v51, &v10[3 * v23 + 2]);
      }
      else
      {
        sub_88F50((uint64_t)&v51, &qword_2A6F20);
      }
      v9 += 48;
      isa = (Class)((char *)isa - 1);
    }
    while (isa);
    swift_bridgeObjectRelease(a2, v11, v12, v13, v14, v15, v16, v17);
    v5 = a3;
  }
  else
  {
    v10 = (BAEventReporter *)_swiftEmptyArrayStorage;
  }
  v54[0] = v10;
  v24 = sub_71B4(&qword_2A6F28);
  v25 = sub_F7668(&qword_2A6F30, &qword_2A6F28, (const char *)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v24, v25) & 1) != 0)
  {
    v33 = *a1;
    if ((*a1)[1].super.isa)
    {
      swift_bridgeObjectRetain_n(a4, 2);
      v34 = sub_DAAC(v5, (uint64_t)a4);
      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(*(_QWORD *)v33[3].dataProviders + 8 * v34);
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRelease_n(a4, 2);
        v54[0] = v36;
        sub_1CE224(v10);
        v37 = v54[0];
        swift_bridgeObjectRetain(a4);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
        *(_QWORD *)&v53[0] = *a1;
        *a1 = (BAEventReporter *)0x8000000000000000;
        sub_1CF75C(v37, v5, (uint64_t)a4, isUniquelyReferenced_nonNull_native);
        v46 = *(BAEventReporter **)&v53[0];
LABEL_20:
        v49 = *a1;
        *a1 = v46;
        swift_bridgeObjectRelease(a4, v39, v40, v41, v42, v43, v44, v45);
        v47 = v49;
        goto LABEL_21;
      }
      swift_bridgeObjectRelease_n(a4, 2);
    }
    swift_bridgeObjectRetain(a4);
    v48 = swift_isUniquelyReferenced_nonNull_native(*a1);
    v54[0] = *a1;
    *a1 = (BAEventReporter *)0x8000000000000000;
    sub_1CF75C((uint64_t)v10, v5, (uint64_t)a4, v48);
    v46 = (BAEventReporter *)v54[0];
    goto LABEL_20;
  }
  v47 = v10;
LABEL_21:
  swift_bridgeObjectRelease(v47, v26, v27, v28, v29, v30, v31, v32);
}

void sub_1CE224(BAEventReporter *a1)
{
  BAEventReporter **v1;
  Class isa;
  BAEventReporter *v3;
  int64_t v4;
  char *v5;
  BAEventReporter *isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  uint64_t v15;
  int64_t v16;
  Class v17;
  objc_class *v18;
  unint64_t v19;
  Class v21;
  BOOL v22;
  objc_class *v23;
  char v24;

  isa = a1[1].super.isa;
  v3 = *v1;
  v4 = (int64_t)(*v1)[1].super.isa;
  v5 = (char *)isa + v4;
  if (__OFADD__(v4, isa))
  {
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (BAEventReporter *)swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v15 = *(_QWORD *)v3[1].dataProviders >> 1, v15 < (uint64_t)v5))
  {
    if (v4 <= (uint64_t)v5)
      v16 = (int64_t)isa + v4;
    else
      v16 = v4;
    v3 = sub_1DB7C8(isUniquelyReferenced_nonNull_native, v16, 1, v3, v11, v12, v13, v14);
    *v1 = v3;
    v15 = *(_QWORD *)v3[1].dataProviders >> 1;
  }
  v17 = v3[1].super.isa;
  v18 = (objc_class *)(v15 - (_QWORD)v17);
  if (!a1[1].super.isa)
  {
    if (!isa)
      goto LABEL_19;
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((uint64_t)v18 < (uint64_t)isa)
  {
    __break(1u);
    goto LABEL_25;
  }
  v19 = (unint64_t)&v3[3 * (_QWORD)v17 + 2];
  if ((unint64_t)&a1[2] < v19 + 48 * (_QWORD)isa && v19 < (unint64_t)&a1[3 * (_QWORD)isa + 2])
    goto LABEL_26;
  sub_71B4(&qword_2A6F00);
  swift_arrayInitWithCopy(v19);
  if (isa)
  {
    v21 = v3[1].super.isa;
    v22 = __OFADD__(v21, isa);
    v23 = (Class)((char *)isa + (_QWORD)v21);
    if (!v22)
    {
      v3[1].super.isa = v23;
      goto LABEL_19;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    v24 = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v24, 1092, 0);
    __break(1u);
    return;
  }
LABEL_19:
  swift_bridgeObjectRelease(a1, v8, v9, v10, v11, v12, v13, v14);
  if (isa == v18)
LABEL_23:
    *v1 = v3;
}

void View.transformAppAnalyticsData<A>(_:for:transform:)(uint64_t a1, uint64_t *a2, uint64_t a3, objc_class *a4, objc_class *a5, uint64_t a6, objc_class *a7, uint64_t a8, objc_class *a9)
{
  uint64_t v14;
  objc_class *v15;
  BAEventReporter *KeyPath;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;

  v14 = *a2;
  v15 = (objc_class *)a2[1];
  KeyPath = (BAEventReporter *)swift_getKeyPath(&unk_219EF0);
  v17 = (BAEventReporter *)swift_allocObject(&unk_28AED8, 88, 7);
  v17[1].super.isa = a5;
  *(_QWORD *)v17[1].dataProviders = a6;
  v17[2].super.isa = a7;
  *(_QWORD *)v17[2].dataProviders = a8;
  v17[3].super.isa = a9;
  *(_QWORD *)v17[3].dataProviders = v14;
  v17[4].super.isa = v15;
  *(_QWORD *)v17[4].dataProviders = a3;
  v17[5].super.isa = a4;
  swift_bridgeObjectRetain(v15);
  swift_retain(a4);
  View.transformEnvironment<A>(_:transform:)(KeyPath, sub_1D0254, v17, a5, a7);
  swift_release(KeyPath, v18, v19, v20, v21, v22, v23, v24);
  swift_release(v17, v25, v26, v27, v28, v29, v30, v31);
}

void sub_1CE488(BAEventReporter **a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  BAEventReporter *v25;
  unint64_t v26;
  char v27;
  BAEventReporter *v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  int64_t v33;
  int64_t v34;
  void *v35;
  Class isa;
  objc_class *v37;
  uint64_t v38;
  BAEventReporter *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  int64_t v46;
  int64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int64_t v54;
  int64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v61;
  BAEventReporter *v62;
  BAEventReporter **v63;
  char isUniquelyReferenced_nonNull_native;
  BAEventReporter *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  int64_t v70;
  int64_t v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  int64_t v77;
  int64_t v78;
  id v79;
  const char *v80;
  void *v81;
  void *v82;
  void *v83;
  int64_t v84;
  int64_t v85;
  void *v86;
  uint64_t v87;
  BAEventReporter **v88;
  BAEventReporter *v89;
  void (*v90)(char *);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v98 = a10;
  v96 = a5;
  v97 = a9;
  v17 = type metadata accessor for Optional(0, a7);
  v18 = __chkstk_darwin(v17);
  v19 = *(_QWORD *)(a7 - 8);
  v20 = __chkstk_darwin(v18);
  v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  if (!(*a1)[1].super.isa)
    return;
  v93 = v22;
  v94 = v20;
  v95 = v21;
  swift_bridgeObjectRetain_n(a3, 2);
  v26 = sub_DAAC(a2, a3);
  if ((v27 & 1) == 0)
  {
    v49 = a3;
LABEL_9:
    swift_bridgeObjectRelease_n(v49, 2);
    return;
  }
  v91 = v24;
  v92 = v19;
  v28 = *(BAEventReporter **)(*(_QWORD *)v25[3].dataProviders + 8 * v26);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease_n(a3, 2);
  isa = v28[1].super.isa;
  if (!isa)
  {
    swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
    return;
  }
  v89 = (BAEventReporter *)a3;
  v90 = a4;
  v87 = a2;
  v88 = a1;
  swift_bridgeObjectRetain(v28);
  v37 = 0;
  v38 = 2;
  while (1)
  {
    v39 = v28;
    v40 = (uint64_t)&v28[v38];
    sub_1D055C(v40, (uint64_t)&v99);
    v41 = sub_1CE7F4((uint64_t)&v99, a6, a7);
    sub_7DAC(&v99);
    if ((v41 & 1) != 0)
      break;
    v37 = (objc_class *)((char *)v37 + 1);
    v38 += 3;
    v28 = v39;
    if (isa == v37)
    {
      v49 = (uint64_t)v39;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease(v39, v42, v43, v44, v45, v46, v47, v48);
  if (v37 >= v39[1].super.isa)
  {
    __break(1u);
  }
  else
  {
    sub_1D055C(v40, (uint64_t)&v99);
    v57 = sub_71B4(&qword_2A6F00);
    v58 = v95;
    v59 = swift_dynamicCast(v95, &v99, v57, a7, 6);
    a8 = v91;
    v41 = v92;
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56);
    if ((v59 & 1) == 0)
    {
      v60(v58, 1, 1, a7);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v58, v94);
      goto LABEL_18;
    }
    v60(v58, 0, 1, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(a8, v58, a7);
    v90(a8);
    v100 = a7;
    v101 = v97;
    v102 = v98;
    v61 = sub_16E508(&v99);
    (*(void (**)(_QWORD *, char *, uint64_t))(v41 + 16))(v61, a8, a7);
    if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) != 0)
      goto LABEL_15;
  }
  v39 = sub_1CE8B8((uint64_t)v39, v50, v51, v52, v53, v54, v55, v56);
LABEL_15:
  if (v37 < v39[1].super.isa)
  {
    sub_7DAC(&v39[v38].super.isa);
    sub_1D05A0(&v99, &v39[v38]);
    v62 = v89;
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v39);
    v63 = v88;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v88);
    *(_QWORD *)&v99 = *v63;
    *v63 = (BAEventReporter *)0x8000000000000000;
    sub_1CF75C((uint64_t)v39, v87, (uint64_t)v62, isUniquelyReferenced_nonNull_native);
    v65 = *v63;
    *v63 = (BAEventReporter *)v99;
    swift_bridgeObjectRelease(v62, v66, v67, v68, v69, v70, v71, v72);
    swift_bridgeObjectRelease(v65, v73, v74, v75, v76, v77, v78, v79);
    (*(void (**)(char *, uint64_t))(v41 + 8))(a8, a7);
LABEL_18:
    swift_bridgeObjectRelease(v39, v80, v81, v82, v83, v84, v85, v86);
    return;
  }
  __break(1u);
}

uint64_t sub_1CE7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[48];

  v4 = *(_QWORD *)(a3 - 8);
  v5 = __chkstk_darwin(a1);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D055C(v5, (uint64_t)v11);
  v8 = sub_71B4(&qword_2A6F00);
  v9 = swift_dynamicCast(v7, v11, v8, a3, 6);
  if ((_DWORD)v9)
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, a3);
  return v9;
}

BAEventReporter *sub_1CE8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  return sub_1DBB04(0, *(_QWORD *)(a1 + 16), 0, (BAEventReporter *)a1, a5, a6, a7, a8);
}

BAEventReporter *sub_1CE8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  return sub_1DB7C8(0, *(_QWORD *)(a1 + 16), 0, (BAEventReporter *)a1, a5, a6, a7, a8);
}

uint64_t sub_1CE8CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  BAEventReporter *v6;
  unint64_t v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  int isUniquelyReferenced_nonNull_native;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  int64_t v20;
  int64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  BAEventReporter *v34;

  v3 = v2;
  v6 = (BAEventReporter *)*v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_DAAC(a1, a2);
  LOBYTE(a2) = (_BYTE)v8;
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v23 = *v3;
  v34 = (BAEventReporter *)*v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1CFC24();
    v23 = (uint64_t)v34;
  }
  swift_bridgeObjectRelease(*(BAEventReporter **)(*(_QWORD *)(v23 + 48) + 16 * v7 + 8), v16, v17, v18, v19, v20, v21, v22);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v7);
  sub_1E3B48(v7, v23);
  v25 = (BAEventReporter *)*v3;
  *v3 = v23;
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  return v24;
}

void sub_1CE998(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  BOOL v25;
  void *v26;
  int64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  _QWORD *v39;
  unint64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int64_t v55;
  uint64_t v56;
  char v57;
  _QWORD v58[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_71B4(&qword_2A6F40);
  v57 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v15 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v5 + 32);
  v56 = v5 + 64;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & *(_QWORD *)(v5 + 64);
  v54 = v3;
  v55 = (unint64_t)(v16 + 63) >> 6;
  v19 = v7 + 64;
  swift_retain(v5);
  v27 = 0;
  while (1)
  {
    if (v18)
    {
      v36 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v37 = v36 | (v27 << 6);
      goto LABEL_34;
    }
    v38 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v38 >= v55)
      break;
    v39 = (_QWORD *)(v5 + 64);
    v40 = *(_QWORD *)(v56 + 8 * v38);
    ++v27;
    if (!v40)
    {
      v27 = v38 + 1;
      if (v38 + 1 >= v55)
        goto LABEL_36;
      v40 = *(_QWORD *)(v56 + 8 * v27);
      if (!v40)
      {
        v41 = v38 + 2;
        if (v41 >= v55)
        {
LABEL_36:
          swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
          v3 = v54;
          if ((v57 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v40 = *(_QWORD *)(v56 + 8 * v41);
        if (!v40)
        {
          while (1)
          {
            v27 = v41 + 1;
            if (__OFADD__(v41, 1))
              goto LABEL_45;
            if (v27 >= v55)
              goto LABEL_36;
            v40 = *(_QWORD *)(v56 + 8 * v27);
            ++v41;
            if (v40)
              goto LABEL_33;
          }
        }
        v27 = v41;
      }
    }
LABEL_33:
    v18 = (v40 - 1) & v40;
    v37 = __clz(__rbit64(v40)) + (v27 << 6);
LABEL_34:
    v46 = 16 * v37;
    v47 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v46);
    v49 = *v47;
    v48 = v47[1];
    v50 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v46);
    v51 = *v50;
    v52 = v50[1];
    if ((v57 & 1) == 0)
    {
      swift_bridgeObjectRetain(v47[1]);
      swift_bridgeObjectRetain(v52);
    }
    Hasher.init(_seed:)(v58, *(_QWORD *)(v15 + 40));
    String.hash(into:)(v58, v49, v48);
    v28 = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v15 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v31 == v43;
        if (v31 == v43)
          v31 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v31);
      }
      while (v45 == -1);
      v32 = __clz(__rbit64(~v45)) + (v31 << 6);
    }
    *(_QWORD *)(v19 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v33 = 16 * v32;
    v34 = (_QWORD *)(*(_QWORD *)(v15 + 48) + v33);
    *v34 = v49;
    v34[1] = v48;
    v35 = (_QWORD *)(*(_QWORD *)(v15 + 56) + v33);
    *v35 = v51;
    v35[1] = v52;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
  v3 = v54;
  v39 = (_QWORD *)(v5 + 64);
  if ((v57 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v53 = 1 << *(_BYTE *)(v5 + 32);
  if (v53 >= 64)
    bzero(v39, ((unint64_t)(v53 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v53;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release((BAEventReporter *)v5, v8, v9, v10, v11, v12, v13, v14);
  *v3 = v15;
}

void sub_1CECBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  BOOL v25;
  void *v26;
  int64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  _QWORD *v37;
  unint64_t v38;
  int64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char v51;
  _QWORD v52[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_71B4(&qword_2A6EF8);
  v51 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v15 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v5 + 32);
  v50 = v5 + 64;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & *(_QWORD *)(v5 + 64);
  v49 = (unint64_t)(v16 + 63) >> 6;
  v19 = v7 + 64;
  swift_retain(v5);
  v27 = 0;
  while (1)
  {
    if (v18)
    {
      v34 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v35 = v34 | (v27 << 6);
      goto LABEL_34;
    }
    v36 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v36 >= v49)
      break;
    v37 = (_QWORD *)(v5 + 64);
    v38 = *(_QWORD *)(v50 + 8 * v36);
    ++v27;
    if (!v38)
    {
      v27 = v36 + 1;
      if (v36 + 1 >= v49)
        goto LABEL_36;
      v38 = *(_QWORD *)(v50 + 8 * v27);
      if (!v38)
      {
        v39 = v36 + 2;
        if (v39 >= v49)
        {
LABEL_36:
          swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
          if ((v51 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v38 = *(_QWORD *)(v50 + 8 * v39);
        if (!v38)
        {
          while (1)
          {
            v27 = v39 + 1;
            if (__OFADD__(v39, 1))
              goto LABEL_45;
            if (v27 >= v49)
              goto LABEL_36;
            v38 = *(_QWORD *)(v50 + 8 * v27);
            ++v39;
            if (v38)
              goto LABEL_33;
          }
        }
        v27 = v39;
      }
    }
LABEL_33:
    v18 = (v38 - 1) & v38;
    v35 = __clz(__rbit64(v38)) + (v27 << 6);
LABEL_34:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v35);
    v46 = *v44;
    v45 = v44[1];
    v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    if ((v51 & 1) == 0)
    {
      swift_bridgeObjectRetain(v44[1]);
      swift_bridgeObjectRetain(v47);
    }
    Hasher.init(_seed:)(v52, *(_QWORD *)(v15 + 40));
    String.hash(into:)(v52, v46, v45);
    v28 = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v15 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v42 = v31 == v41;
        if (v31 == v41)
          v31 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v31);
      }
      while (v43 == -1);
      v32 = __clz(__rbit64(~v43)) + (v31 << 6);
    }
    *(_QWORD *)(v19 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v33 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v32);
    *v33 = v46;
    v33[1] = v45;
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v32) = v47;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
  v37 = (_QWORD *)(v5 + 64);
  if ((v51 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v48 = 1 << *(_BYTE *)(v5 + 32);
  if (v48 >= 64)
    bzero(v37, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v37 = -1 << v48;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release((BAEventReporter *)v5, v8, v9, v10, v11, v12, v13, v14);
  *v3 = v15;
}

void sub_1CEFD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  BOOL v25;
  void *v26;
  int64_t v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  _QWORD *v44;
  unint64_t v45;
  int64_t v46;
  char v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t *v51;
  BAEventReporter *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  char v58;
  _QWORD v59[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_71B4(&qword_297610);
  v58 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v15 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v5 + 32);
  v57 = v5 + 64;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & *(_QWORD *)(v5 + 64);
  v56 = (unint64_t)(v16 + 63) >> 6;
  v19 = v7 + 64;
  swift_retain(v5);
  v27 = 0;
  while (1)
  {
    if (v18)
    {
      v41 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v42 = v41 | (v27 << 6);
      goto LABEL_34;
    }
    v43 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v43 >= v56)
      break;
    v44 = (_QWORD *)(v5 + 64);
    v45 = *(_QWORD *)(v57 + 8 * v43);
    ++v27;
    if (!v45)
    {
      v27 = v43 + 1;
      if (v43 + 1 >= v56)
        goto LABEL_36;
      v45 = *(_QWORD *)(v57 + 8 * v27);
      if (!v45)
      {
        v46 = v43 + 2;
        if (v46 >= v56)
        {
LABEL_36:
          swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
          if ((v58 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v45 = *(_QWORD *)(v57 + 8 * v46);
        if (!v45)
        {
          while (1)
          {
            v27 = v46 + 1;
            if (__OFADD__(v46, 1))
              goto LABEL_45;
            if (v27 >= v56)
              goto LABEL_36;
            v45 = *(_QWORD *)(v57 + 8 * v27);
            ++v46;
            if (v45)
              goto LABEL_33;
          }
        }
        v27 = v46;
      }
    }
LABEL_33:
    v18 = (v45 - 1) & v45;
    v42 = __clz(__rbit64(v45)) + (v27 << 6);
LABEL_34:
    v51 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v42);
    v53 = *v51;
    v52 = (BAEventReporter *)v51[1];
    v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v42);
    if ((v58 & 1) == 0)
    {
      swift_bridgeObjectRetain(v51[1]);
      swift_bridgeObjectRetain(v54);
    }
    Hasher.init(_seed:)(v59, *(_QWORD *)(v15 + 40));
    swift_bridgeObjectRetain(v52);
    String.hash(into:)(v59, v53, v52);
    swift_bridgeObjectRelease(v52, v28, v29, v30, v31, v32, v33, v34);
    v35 = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v15 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6))) != 0)
    {
      v39 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v47 = 0;
      v48 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v48 && (v47 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v49 = v38 == v48;
        if (v38 == v48)
          v38 = 0;
        v47 |= v49;
        v50 = *(_QWORD *)(v19 + 8 * v38);
      }
      while (v50 == -1);
      v39 = __clz(__rbit64(~v50)) + (v38 << 6);
    }
    *(_QWORD *)(v19 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    v40 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v39);
    *v40 = v53;
    v40[1] = v52;
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v39) = v54;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
  v44 = (_QWORD *)(v5 + 64);
  if ((v58 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v55 = 1 << *(_BYTE *)(v5 + 32);
  if (v55 >= 64)
    bzero(v44, ((unint64_t)(v55 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v44 = -1 << v55;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release((BAEventReporter *)v5, v8, v9, v10, v11, v12, v13, v14);
  *v3 = v15;
}

void sub_1CF2F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  BOOL v25;
  void *v26;
  int64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  _QWORD *v37;
  unint64_t v38;
  int64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  uint64_t v52;
  char v53;
  _QWORD v54[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_71B4(&qword_2A6F18);
  v53 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v15 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v5 + 32);
  v52 = v5 + 64;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & *(_QWORD *)(v5 + 64);
  v50 = v3;
  v51 = (unint64_t)(v16 + 63) >> 6;
  v19 = v7 + 64;
  swift_retain(v5);
  v27 = 0;
  while (1)
  {
    if (v18)
    {
      v34 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v35 = v34 | (v27 << 6);
      goto LABEL_34;
    }
    v36 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v36 >= v51)
      break;
    v37 = (_QWORD *)(v5 + 64);
    v38 = *(_QWORD *)(v52 + 8 * v36);
    ++v27;
    if (!v38)
    {
      v27 = v36 + 1;
      if (v36 + 1 >= v51)
        goto LABEL_36;
      v38 = *(_QWORD *)(v52 + 8 * v27);
      if (!v38)
      {
        v39 = v36 + 2;
        if (v39 >= v51)
        {
LABEL_36:
          swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
          v3 = v50;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v38 = *(_QWORD *)(v52 + 8 * v39);
        if (!v38)
        {
          while (1)
          {
            v27 = v39 + 1;
            if (__OFADD__(v39, 1))
              goto LABEL_45;
            if (v27 >= v51)
              goto LABEL_36;
            v38 = *(_QWORD *)(v52 + 8 * v27);
            ++v39;
            if (v38)
              goto LABEL_33;
          }
        }
        v27 = v39;
      }
    }
LABEL_33:
    v18 = (v38 - 1) & v38;
    v35 = __clz(__rbit64(v38)) + (v27 << 6);
LABEL_34:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v35);
    v46 = *v44;
    v45 = v44[1];
    v47 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v35);
    if ((v53 & 1) == 0)
    {
      swift_bridgeObjectRetain(v44[1]);
      v48 = v47;
    }
    Hasher.init(_seed:)(v54, *(_QWORD *)(v15 + 40));
    String.hash(into:)(v54, v46, v45);
    v28 = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v15 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v42 = v31 == v41;
        if (v31 == v41)
          v31 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v31);
      }
      while (v43 == -1);
      v32 = __clz(__rbit64(~v43)) + (v31 << 6);
    }
    *(_QWORD *)(v19 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v33 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v32);
    *v33 = v46;
    v33[1] = v45;
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v32) = v47;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release((BAEventReporter *)v5, v20, v21, v22, v23, v24, v25, v26);
  v3 = v50;
  v37 = (_QWORD *)(v5 + 64);
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v49 = 1 << *(_BYTE *)(v5 + 32);
  if (v49 >= 64)
    bzero(v37, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v37 = -1 << v49;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release((BAEventReporter *)v5, v8, v9, v10, v11, v12, v13, v14);
  *v3 = v15;
}

void sub_1CF600(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v5 = v4;
  v10 = *v4;
  v18 = sub_DF7C(a2, a3);
  v19 = *(_QWORD *)(v10 + 16);
  v20 = (v11 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v22 = (char)v11;
  v23 = *(_QWORD *)(v10 + 24);
  if (v23 >= v21 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    sub_1CFA70();
LABEL_7:
    v24 = (_QWORD *)*v5;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = v24[7];
      swift_bridgeObjectRelease(*(BAEventReporter **)(v25 + 8 * v18), v11, v12, v13, v14, v15, v16, v17);
      *(_QWORD *)(v25 + 8 * v18) = a1;
      return;
    }
LABEL_11:
    v24[(v18 >> 6) + 8] |= 1 << v18;
    v27 = (uint64_t *)(v24[6] + 16 * v18);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v24[7] + 8 * v18) = a1;
    v28 = v24[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v24[2] = v30;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1CECBC(v21, a4 & 1);
  v26 = sub_DF7C(a2, a3);
  if ((v22 & 1) == (v11 & 1))
  {
    v18 = v26;
    v24 = (_QWORD *)*v5;
    if ((v22 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1CF75C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v5 = v4;
  v10 = *v4;
  v18 = sub_DAAC(a2, a3);
  v19 = *(_QWORD *)(v10 + 16);
  v20 = (v11 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v22 = (char)v11;
  v23 = *(_QWORD *)(v10 + 24);
  if (v23 >= v21 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    sub_1CFC24();
LABEL_7:
    v24 = (_QWORD *)*v5;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = v24[7];
      swift_bridgeObjectRelease(*(BAEventReporter **)(v25 + 8 * v18), v11, v12, v13, v14, v15, v16, v17);
      *(_QWORD *)(v25 + 8 * v18) = a1;
      return;
    }
LABEL_11:
    v24[(v18 >> 6) + 8] |= 1 << v18;
    v27 = (uint64_t *)(v24[6] + 16 * v18);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v24[7] + 8 * v18) = a1;
    v28 = v24[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v24[2] = v30;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1CEFD0(v21, a4 & 1);
  v26 = sub_DAAC(a2, a3);
  if ((v22 & 1) == (v11 & 1))
  {
    v18 = v26;
    v24 = (_QWORD *)*v5;
    if ((v22 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DataStackID);
  __break(1u);
}

void sub_1CF8B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;

  v1 = v0;
  sub_71B4(&qword_2A6F40);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v11 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release((BAEventReporter *)v2, v4, v5, v6, v7, v8, v9, v10);
    *v1 = v11;
    return;
  }
  v12 = (void *)(v3 + 64);
  v13 = v2 + 64;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v2 || (unint64_t)v12 >= v2 + 64 + 8 * v14)
    memmove(v12, (const void *)(v2 + 64), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v2 + 16);
  v17 = 1 << *(_BYTE *)(v2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v2 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v32 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v20)
      goto LABEL_26;
    v33 = *(_QWORD *)(v13 + 8 * v32);
    ++v16;
    if (!v33)
    {
      v16 = v32 + 1;
      if (v32 + 1 >= v20)
        goto LABEL_26;
      v33 = *(_QWORD *)(v13 + 8 * v16);
      if (!v33)
        break;
    }
LABEL_25:
    v19 = (v33 - 1) & v33;
    v22 = __clz(__rbit64(v33)) + (v16 << 6);
LABEL_12:
    v23 = 16 * v22;
    v24 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v23);
    v26 = *v24;
    v25 = v24[1];
    v27 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v23);
    v28 = *v27;
    v29 = v27[1];
    v30 = (_QWORD *)(*(_QWORD *)(v11 + 48) + v23);
    *v30 = v26;
    v30[1] = v25;
    v31 = (_QWORD *)(*(_QWORD *)(v11 + 56) + v23);
    *v31 = v28;
    v31[1] = v29;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
  }
  v34 = v32 + 2;
  if (v34 >= v20)
    goto LABEL_26;
  v33 = *(_QWORD *)(v13 + 8 * v34);
  if (v33)
  {
    v16 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v16 >= v20)
      goto LABEL_26;
    v33 = *(_QWORD *)(v13 + 8 * v16);
    ++v34;
    if (v33)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1CFA70()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  sub_71B4(&qword_2A6EF8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v11 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release((BAEventReporter *)v2, v4, v5, v6, v7, v8, v9, v10);
    *v1 = v11;
    return;
  }
  v12 = (void *)(v3 + 64);
  v13 = v2 + 64;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v2 || (unint64_t)v12 >= v2 + 64 + 8 * v14)
    memmove(v12, (const void *)(v2 + 64), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v2 + 16);
  v17 = 1 << *(_BYTE *)(v2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v2 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v29 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v20)
      goto LABEL_26;
    v30 = *(_QWORD *)(v13 + 8 * v29);
    ++v16;
    if (!v30)
    {
      v16 = v29 + 1;
      if (v29 + 1 >= v20)
        goto LABEL_26;
      v30 = *(_QWORD *)(v13 + 8 * v16);
      if (!v30)
        break;
    }
LABEL_25:
    v19 = (v30 - 1) & v30;
    v22 = __clz(__rbit64(v30)) + (v16 << 6);
LABEL_12:
    v23 = 16 * v22;
    v24 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v22);
    v25 = v24[1];
    v26 = 8 * v22;
    v27 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v26);
    v28 = (_QWORD *)(*(_QWORD *)(v11 + 48) + v23);
    *v28 = *v24;
    v28[1] = v25;
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v26) = v27;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
  }
  v31 = v29 + 2;
  if (v31 >= v20)
    goto LABEL_26;
  v30 = *(_QWORD *)(v13 + 8 * v31);
  if (v30)
  {
    v16 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v16 >= v20)
      goto LABEL_26;
    v30 = *(_QWORD *)(v13 + 8 * v16);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1CFC24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  sub_71B4(&qword_297610);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v11 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release((BAEventReporter *)v2, v4, v5, v6, v7, v8, v9, v10);
    *v1 = v11;
    return;
  }
  v12 = (void *)(v3 + 64);
  v13 = v2 + 64;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v2 || (unint64_t)v12 >= v2 + 64 + 8 * v14)
    memmove(v12, (const void *)(v2 + 64), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v2 + 16);
  v17 = 1 << *(_BYTE *)(v2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v2 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v29 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v20)
      goto LABEL_26;
    v30 = *(_QWORD *)(v13 + 8 * v29);
    ++v16;
    if (!v30)
    {
      v16 = v29 + 1;
      if (v29 + 1 >= v20)
        goto LABEL_26;
      v30 = *(_QWORD *)(v13 + 8 * v16);
      if (!v30)
        break;
    }
LABEL_25:
    v19 = (v30 - 1) & v30;
    v22 = __clz(__rbit64(v30)) + (v16 << 6);
LABEL_12:
    v23 = 16 * v22;
    v24 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v22);
    v25 = v24[1];
    v26 = 8 * v22;
    v27 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v26);
    v28 = (_QWORD *)(*(_QWORD *)(v11 + 48) + v23);
    *v28 = *v24;
    v28[1] = v25;
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v26) = v27;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
  }
  v31 = v29 + 2;
  if (v31 >= v20)
    goto LABEL_26;
  v30 = *(_QWORD *)(v13 + 8 * v31);
  if (v30)
  {
    v16 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v16 >= v20)
      goto LABEL_26;
    v30 = *(_QWORD *)(v13 + 8 * v16);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1CFDD8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  sub_71B4(&qword_2A6F18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v11 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release((BAEventReporter *)v2, v4, v5, v6, v7, v8, v9, v10);
    *v1 = v11;
    return;
  }
  v12 = (void *)(v3 + 64);
  v13 = v2 + 64;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v2 || (unint64_t)v12 >= v2 + 64 + 8 * v14)
    memmove(v12, (const void *)(v2 + 64), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v2 + 16);
  v17 = 1 << *(_BYTE *)(v2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v2 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v30 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v20)
      goto LABEL_26;
    v31 = *(_QWORD *)(v13 + 8 * v30);
    ++v16;
    if (!v31)
    {
      v16 = v30 + 1;
      if (v30 + 1 >= v20)
        goto LABEL_26;
      v31 = *(_QWORD *)(v13 + 8 * v16);
      if (!v31)
        break;
    }
LABEL_25:
    v19 = (v31 - 1) & v31;
    v22 = __clz(__rbit64(v31)) + (v16 << 6);
LABEL_12:
    v23 = 16 * v22;
    v24 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v22);
    v25 = v24[1];
    v26 = 8 * v22;
    v27 = *(void **)(*(_QWORD *)(v2 + 56) + v26);
    v28 = (_QWORD *)(*(_QWORD *)(v11 + 48) + v23);
    *v28 = *v24;
    v28[1] = v25;
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v26) = v27;
    swift_bridgeObjectRetain(v25);
    v29 = v27;
  }
  v32 = v30 + 2;
  if (v32 >= v20)
    goto LABEL_26;
  v31 = *(_QWORD *)(v13 + 8 * v32);
  if (v31)
  {
    v16 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v16 >= v20)
      goto LABEL_26;
    v31 = *(_QWORD *)(v13 + 8 * v16);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void _s13BookAnalytics9DataStackV2eeoiySbAC_ACtFZ_0(_QWORD *a1, BAEventReporter **a2)
{
  uint64_t v2;
  BAEventReporter *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  const char *v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  BOOL v14;
  void *v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  BAEventReporter *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  void *v28;
  void *v29;
  void *v30;
  int64_t v31;
  int64_t v32;
  void *v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  int64_t v46;
  int64_t v47;
  void *v48;
  char v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  int64_t v67;
  id v68;
  BOOL v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  int64_t v75;
  int64_t v76;
  id v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;

  v2 = *a1;
  v3 = *a2;
  if (*(Class *)(*a1 + 16) != (*a2)[1].super.isa)
    return;
  v4 = v2 + 64;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(*a1);
  v16 = 0;
  while (1)
  {
    if (v7)
    {
      v17 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v18 = v17 | (v16 << 6);
      if (!v3[1].super.isa)
        goto LABEL_29;
      goto LABEL_19;
    }
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v16 >= v8)
      goto LABEL_31;
    v20 = *(_QWORD *)(v4 + 8 * v16);
    if (!v20)
      break;
LABEL_18:
    v7 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
    if (!v3[1].super.isa)
      goto LABEL_29;
LABEL_19:
    v22 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v18);
    v23 = *(BAEventReporter **)(*(_QWORD *)(v2 + 56) + 8 * v18);
    v25 = *v22;
    v24 = v22[1];
    swift_bridgeObjectRetain_n(v24, 2);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v3);
    v26 = sub_DAAC(v25, v24);
    if ((v27 & 1) == 0)
    {
      swift_bridgeObjectRelease(v23, v27, v28, v29, v30, v31, v32, v33);
      swift_release((BAEventReporter *)v2, v64, v65, v66, v67, v68, v69, v70);
      swift_bridgeObjectRelease(v3, v71, v72, v73, v74, v75, v76, v77);
      swift_bridgeObjectRelease_n(v24, 2);
      return;
    }
    v34 = *(BAEventReporter **)(*(_QWORD *)v3[3].dataProviders + 8 * v26);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v3, v35, v36, v37, v38, v39, v40, v41);
    swift_bridgeObjectRelease_n(v24, 2);
    if (v23[1].super.isa != v34[1].super.isa)
    {
      swift_bridgeObjectRelease(v34, v42, v43, v44, v45, v46, v47, v48);
      swift_bridgeObjectRelease(v23, v78, v79, v80, v81, v82, v83, v84);
LABEL_29:
      swift_release((BAEventReporter *)v2, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
    v49 = sub_1CD25C(v23, v34);
    swift_bridgeObjectRelease(v34, v50, v51, v52, v53, v54, v55, v56);
    swift_bridgeObjectRelease(v23, v57, v58, v59, v60, v61, v62, v63);
    if ((v49 & 1) == 0)
      goto LABEL_29;
  }
  v21 = v16 + 1;
  if (v16 + 1 >= v8)
    goto LABEL_31;
  v20 = *(_QWORD *)(v4 + 8 * v21);
  if (v20)
    goto LABEL_17;
  v21 = v16 + 2;
  if (v16 + 2 >= v8)
    goto LABEL_31;
  v20 = *(_QWORD *)(v4 + 8 * v21);
  if (v20)
    goto LABEL_17;
  v21 = v16 + 3;
  if (v16 + 3 >= v8)
  {
LABEL_31:
    swift_release((BAEventReporter *)v2, v9, v10, v11, v12, v13, v14, v15);
    return;
  }
  v20 = *(_QWORD *)(v4 + 8 * v21);
  if (v20)
  {
LABEL_17:
    v16 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v8)
      goto LABEL_31;
    v20 = *(_QWORD *)(v4 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_18;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1D01CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1D01DC@<X0>(BAEventReporter **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1CD640(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1D01F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1D021C(BAEventReporter **a1)
{
  uint64_t v1;

  sub_1CDF80(a1, *(BAEventReporter **)(v1 + 16), *(_QWORD *)(v1 + 24), *(BAEventReporter **)(v1 + 32));
}

uint64_t sub_1D0228()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  int64_t v4;
  id v5;
  BOOL v6;
  id v7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(BAEventReporter **)(v0 + 80), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocObject(v0, 88, 7);
}

void sub_1D0254(BAEventReporter **a1)
{
  uint64_t v1;

  sub_1CE488(a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void (**)(char *))(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

unint64_t sub_1D028C()
{
  unint64_t result;

  result = qword_2A6EC8;
  if (!qword_2A6EC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DataStackID, &type metadata for DataStackID);
    atomic_store(result, (unint64_t *)&qword_2A6EC8);
  }
  return result;
}

unint64_t sub_1D02D4()
{
  unint64_t result;

  result = qword_2A6ED0;
  if (!qword_2A6ED0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DataStackID, &type metadata for DataStackID);
    atomic_store(result, (unint64_t *)&qword_2A6ED0);
  }
  return result;
}

void *sub_1D0318()
{
  return &protocol witness table for String;
}

unint64_t sub_1D0328()
{
  unint64_t result;

  result = qword_2A6ED8;
  if (!qword_2A6ED8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DataStackID, &type metadata for DataStackID);
    atomic_store(result, (unint64_t *)&qword_2A6ED8);
  }
  return result;
}

void *sub_1D036C()
{
  return &protocol witness table for String;
}

void *sub_1D0378()
{
  return &protocol witness table for String;
}

uint64_t sub_1D0384@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7[3];

  v4 = *a1;
  v5 = *a2;
  v7[1] = a2[1];
  v7[2] = v4;
  v7[0] = v5;
  result = DataStack.subscript.getter(v7);
  *a3 = result;
  return result;
}

uint64_t sub_1D03CC()
{
  return 0;
}

ValueMetadata *type metadata accessor for DataStackID()
{
  return &type metadata for DataStackID;
}

ValueMetadata *type metadata accessor for DataStack()
{
  return &type metadata for DataStack;
}

uint64_t sub_1D0404(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[2];
  v3 = sub_679EC(&qword_2A6EE0);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v6[0] = v2;
  v6[1] = sub_F7668(&qword_2A6EE8, &qword_2A6EE0, (const char *)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v6);
}

uint64_t sub_1D0488(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_679EC(&qword_2A6EE0);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v6[0] = v2;
  v6[1] = sub_F7668(&qword_2A6EE8, &qword_2A6EE0, (const char *)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v6);
}

ValueMetadata *type metadata accessor for DataStackKey()
{
  return &type metadata for DataStackKey;
}

unint64_t sub_1D0518()
{
  unint64_t result;

  result = qword_2A6EF0;
  if (!qword_2A6EF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DataStack, &type metadata for DataStack);
    atomic_store(result, (unint64_t *)&qword_2A6EF0);
  }
  return result;
}

uint64_t sub_1D055C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_1D05A0(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_1D05B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_2A6F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BookAnalytics::OdpSuggestionType_optional __swiftcall OdpSuggestionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::OdpSuggestionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2691C8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 12;
  if (v5 < 0xC)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t OdpSuggestionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D0694 + 4 * byte_21A0D0[*v0]))(0xD000000000000015, 0x800000000021E610);
}

uint64_t sub_1D0694()
{
  return 0x6465776569766572;
}

uint64_t sub_1D06B0()
{
  return 0x6465776569766572;
}

uint64_t sub_1D06D0()
{
  return 0x6465776569766572;
}

uint64_t sub_1D06F0()
{
  return 1684104562;
}

uint64_t sub_1D0700()
{
  return 0x64656873696E6966;
}

uint64_t sub_1D0718()
{
  return 0x706D615364616572;
}

uint64_t sub_1D0734()
{
  return 0x6573616863727570;
}

uint64_t sub_1D0750@<X0>(uint64_t a1@<X8>)
{
  return a1 + 9;
}

uint64_t sub_1D0768()
{
  return 0x64656C706D6173;
}

unint64_t sub_1D0780()
{
  return 0xD000000000000011;
}

uint64_t sub_1D07A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_293D4(*a1, *a2);
}

unint64_t sub_1D07B8()
{
  unint64_t result;

  result = qword_2A6F48;
  if (!qword_2A6F48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OdpSuggestionType, &type metadata for OdpSuggestionType);
    atomic_store(result, (unint64_t *)&qword_2A6F48);
  }
  return result;
}

Swift::Int sub_1D07FC()
{
  uint64_t v0;
  BAEventReporter *v1;
  BAEventReporter *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  int64_t v7;
  int64_t v8;
  id v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  v0 = OdpSuggestionType.rawValue.getter();
  v2 = v1;
  String.hash(into:)(v11, v0, v1);
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
  return Hasher._finalize()();
}

void sub_1D0860(uint64_t a1)
{
  uint64_t v2;
  BAEventReporter *v3;
  BAEventReporter *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  int64_t v9;
  int64_t v10;
  id v11;

  v2 = OdpSuggestionType.rawValue.getter();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
}

Swift::Int sub_1D08B0(uint64_t a1)
{
  uint64_t v1;
  BAEventReporter *v2;
  BAEventReporter *v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  int64_t v8;
  int64_t v9;
  id v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, a1);
  v1 = OdpSuggestionType.rawValue.getter();
  v3 = v2;
  String.hash(into:)(v12, v1, v2);
  swift_bridgeObjectRelease(v3, v4, v5, v6, v7, v8, v9, v10);
  return Hasher._finalize()();
}

BookAnalytics::OdpSuggestionType_optional sub_1D0910(Swift::String *a1)
{
  return OdpSuggestionType.init(rawValue:)(*a1);
}

uint64_t sub_1D091C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = OdpSuggestionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D0940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D0AB4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1D099C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D0AB4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for OdpSuggestionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1D0A34 + 4 * byte_21A0E1[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1D0A68 + 4 * byte_21A0DC[v4]))();
}

uint64_t sub_1D0A68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D0A70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D0A78);
  return result;
}

uint64_t sub_1D0A84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D0A8CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1D0A90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D0A98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OdpSuggestionType()
{
  return &type metadata for OdpSuggestionType;
}

unint64_t sub_1D0AB4()
{
  unint64_t result;

  result = qword_2A6F50;
  if (!qword_2A6F50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OdpSuggestionType, &type metadata for OdpSuggestionType);
    atomic_store(result, (unint64_t *)&qword_2A6F50);
  }
  return result;
}

BookAnalytics::ContentType_optional __swiftcall ContentType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ContentType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_269308, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ContentType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D0B80 + 4 * byte_21A224[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1D0B80()
{
  return 1802465122;
}

uint64_t sub_1D0B90()
{
  return 0x6F6F626F69647561;
}

uint64_t sub_1D0BAC()
{
  return 4605008;
}

uint64_t sub_1D0BBC()
{
  return 5527636;
}

uint64_t sub_1D0BCC()
{
  return 4276809;
}

uint64_t sub_1D0BDC()
{
  return 0x694773656E757469;
}

void sub_1D0C00(char *a1)
{
  sub_26C28(*a1);
}

unint64_t sub_1D0C10()
{
  unint64_t result;

  result = qword_2A6F58;
  if (!qword_2A6F58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentType, &type metadata for ContentType);
    atomic_store(result, (unint64_t *)&qword_2A6F58);
  }
  return result;
}

void sub_1D0C54()
{
  char *v0;

  sub_1D2EF4(0, *v0);
}

void sub_1D0C60()
{
  __asm { BR              X10 }
}

uint64_t sub_1D0C9C(uint64_t a1)
{
  String.hash(into:)(a1, 1802465122, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_1D0D30(uint64_t a1)
{
  char *v1;

  sub_1D2EF4(a1, *v1);
}

BookAnalytics::ContentType_optional sub_1D0D38(Swift::String *a1)
{
  return ContentType.init(rawValue:)(*a1);
}

uint64_t sub_1D0D44()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1D0D74 + 4 * byte_21A232[*v0]))();
}

void sub_1D0D74(_QWORD *a1@<X8>)
{
  *a1 = 1802465122;
  a1[1] = 0xE400000000000000;
}

void sub_1D0D88(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6F626F69647561;
  a1[1] = 0xE90000000000006BLL;
}

void sub_1D0DA8(_QWORD *a1@<X8>)
{
  *a1 = 4605008;
  a1[1] = 0xE300000000000000;
}

void sub_1D0DBC(_QWORD *a1@<X8>)
{
  *a1 = 5527636;
  a1[1] = 0xE300000000000000;
}

void sub_1D0DD0(_QWORD *a1@<X8>)
{
  *a1 = 4276809;
  a1[1] = 0xE300000000000000;
}

void sub_1D0DE4(char *a1@<X8>)
{
  strcpy(a1, "itunesGiftCard");
  a1[15] = -18;
}

uint64_t sub_1D0E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D0F80();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1D0E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D0F80();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1D0F00 + 4 * byte_21A23E[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1D0F34 + 4 * byte_21A239[v4]))();
}

uint64_t sub_1D0F34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D0F3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D0F44);
  return result;
}

uint64_t sub_1D0F50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D0F58);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1D0F5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D0F64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentType()
{
  return &type metadata for ContentType;
}

unint64_t sub_1D0F80()
{
  unint64_t result;

  result = qword_2A6F60;
  if (!qword_2A6F60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentType, &type metadata for ContentType);
    atomic_store(result, (unint64_t *)&qword_2A6F60);
  }
  return result;
}

uint64_t sub_1D0FC4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A6F68, &enum case for SessionGroup.default(_:));
}

uint64_t static ExitLinkTapEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D00, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6F68, a1);
}

uint64_t sub_1D1004(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A6F80, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ExitLinkTapEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D08, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6F80, a1);
}

uint64_t ExitLinkTapEvent.externalLinkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A6F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ExitLinkTapEvent.externalLinkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A6F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ExitLinkTapEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ExitLinkTapEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ExitLinkTapEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A7020, (uint64_t)&nominal type descriptor for ExitLinkTapEvent);
}

uint64_t ExitLinkTapEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ExitLinkTapEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ExitLinkTapEvent.eventData.modify())()
{
  type metadata accessor for ExitLinkTapEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ExitLinkTapEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A6F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for ExitLinkTapEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t ExitLinkTapEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ExitLinkTapEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ExitLinkTapEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A70B8, (uint64_t)&nominal type descriptor for ExitLinkTapEvent.Model);
}

uint64_t ExitLinkTapEvent.Model.init(externalLinkData:eventData:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  v5 = (char *)a3 + *(int *)(type metadata accessor for ExitLinkTapEvent.Model(0) + 20);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_1D12BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0xD000000000000010;
}

uint64_t sub_1D1300@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D2408(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D1324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D14D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D134C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D14D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ExitLinkTapEvent.Model.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _QWORD v20[2];

  v3 = v1;
  v5 = sub_71B4(&qword_2A6FA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D14D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ExitLinkTapEvent.Model.CodingKeys, &type metadata for ExitLinkTapEvent.Model.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v20[0] = *v3;
  v20[1] = v12;
  v19 = 0;
  v13 = sub_1D151C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v19, v5, &type metadata for ExternalLinkData, v13);
  if (!v2)
  {
    v14 = (char *)v3 + *(int *)(type metadata accessor for ExitLinkTapEvent.Model(0) + 20);
    LOBYTE(v20[0]) = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v20, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1D14D8()
{
  unint64_t result;

  result = qword_2A6FA8;
  if (!qword_2A6FA8)
  {
    result = swift_getWitnessTable(byte_21A514, &type metadata for ExitLinkTapEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A6FA8);
  }
  return result;
}

unint64_t sub_1D151C()
{
  unint64_t result;

  result = qword_2A6FB0;
  if (!qword_2A6FB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ExternalLinkData, &type metadata for ExternalLinkData);
    atomic_store(result, (unint64_t *)&qword_2A6FB0);
  }
  return result;
}

void ExitLinkTapEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  char v29;

  v24 = a2;
  v26 = type metadata accessor for EventData(0);
  v23 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_71B4(&qword_2A6FB8);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ExitLinkTapEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_1D14D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ExitLinkTapEvent.Model.CodingKeys, &type metadata for ExitLinkTapEvent.Model.CodingKeys, v13, v12, v11);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v22 = a1;
    v14 = v5;
    v15 = v10;
    v16 = v25;
    v17 = v26;
    v29 = 0;
    v18 = sub_1D17C0();
    v19 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v28, &type metadata for ExternalLinkData, &v29, v27, &type metadata for ExternalLinkData, v18);
    v20 = v28[1];
    *(_QWORD *)v15 = v28[0];
    *((_QWORD *)v15 + 1) = v20;
    LOBYTE(v28[0]) = 1;
    v21 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, v28, v19, v17, v21);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v19);
    (*(void (**)(char *, _QWORD *, uint64_t))(v23 + 32))(&v15[*(int *)(v8 + 20)], v16, v17);
    sub_1D1804((uint64_t)v15, v24);
    sub_7DAC(v22);
    sub_1D1848((uint64_t)v15);
  }
}

unint64_t sub_1D17C0()
{
  unint64_t result;

  result = qword_2A6FC0;
  if (!qword_2A6FC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ExternalLinkData, &type metadata for ExternalLinkData);
    atomic_store(result, (unint64_t *)&qword_2A6FC0);
  }
  return result;
}

uint64_t sub_1D1804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ExitLinkTapEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D1848(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ExitLinkTapEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1D1884(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ExitLinkTapEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1D1898(_QWORD *a1)
{
  return ExitLinkTapEvent.Model.encode(to:)(a1);
}

uint64_t sub_1D18AC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D00, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A6F68, (uint64_t)sub_1D0FC4, a1);
}

uint64_t sub_1D18D0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D08, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A6F80, (uint64_t)sub_1D1004, a1);
}

uint64_t sub_1D18F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A6F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for ExitLinkTapEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_2A6F98);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for ExitLinkTapEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_2A6F98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for ExitLinkTapEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A6F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for ExitLinkTapEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A6F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for ExitLinkTapEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A6F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ExitLinkTapEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A6F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExitLinkTapEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D1CA4);
}

uint64_t sub_1D1CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_2A6F98);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ExitLinkTapEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D1D2C);
}

uint64_t sub_1D1D2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_2A6F98);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1D1DB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1D1E34(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_1D1E34(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2A7030)
  {
    v2 = sub_1D17C0();
    v3 = sub_1D151C();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for ExternalLinkData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2A7030);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ExitLinkTapEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for EventData(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

_QWORD *initializeWithCopy for ExitLinkTapEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for ExitLinkTapEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *initializeWithTake for ExitLinkTapEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for ExitLinkTapEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExitLinkTapEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D20F4);
}

uint64_t sub_1D20F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ExitLinkTapEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D217C);
}

uint64_t sub_1D217C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1D21F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_21A438;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ExitLinkTapEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D22B0 + 4 * byte_21A375[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D22E4 + 4 * byte_21A370[v4]))();
}

uint64_t sub_1D22E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D22EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D22F4);
  return result;
}

uint64_t sub_1D2300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2308);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D230C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2314(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExitLinkTapEvent.Model.CodingKeys()
{
  return &type metadata for ExitLinkTapEvent.Model.CodingKeys;
}

unint64_t sub_1D2334()
{
  unint64_t result;

  result = qword_2A70F0;
  if (!qword_2A70F0)
  {
    result = swift_getWitnessTable(byte_21A4EC, &type metadata for ExitLinkTapEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A70F0);
  }
  return result;
}

unint64_t sub_1D237C()
{
  unint64_t result;

  result = qword_2A70F8;
  if (!qword_2A70F8)
  {
    result = swift_getWitnessTable(aE_20, &type metadata for ExitLinkTapEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A70F8);
  }
  return result;
}

unint64_t sub_1D23C4()
{
  unint64_t result;

  result = qword_2A7100;
  if (!qword_2A7100)
  {
    result = swift_getWitnessTable(asc_21A484, &type metadata for ExitLinkTapEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7100);
  }
  return result;
}

uint64_t sub_1D2408(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000000002229C0;
    if (a2 == 0x80000000002229C0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002229C0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D2500(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D291C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D2528(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D291C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DragDropItemData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = sub_71B4(&qword_2A7108);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v21 = v1[3];
  v22 = v9;
  v10 = v1[4];
  v19 = v1[5];
  v20 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_1D291C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DragDropItemData.CodingKeys, &type metadata for DragDropItemData.CodingKeys, v13, v11, v12);
  v26 = 0;
  v14 = v23;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v26, v3);
  if (!v14)
  {
    v16 = v19;
    v15 = v20;
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v21, &v25, v3);
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v24, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void DragDropItemData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  uint64_t v18;
  BAEventReporter *v19;
  BAEventReporter *v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  BAEventReporter *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  BAEventReporter *v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;

  v5 = sub_71B4(&qword_2A7118);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D291C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DragDropItemData.CodingKeys, &type metadata for DragDropItemData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v57 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v5);
    v14 = v13;
    v54 = v12;
    v56 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v56, v5);
    v17 = v16;
    v52 = v15;
    v55 = 2;
    swift_bridgeObjectRetain(v16);
    v53 = v17;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
    v20 = v19;
    v21 = v18;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v14, v22, v23, v24, v25, v26, v27, v28);
    v29 = v53;
    *a2 = v54;
    a2[1] = (uint64_t)v14;
    a2[2] = v52;
    a2[3] = (uint64_t)v29;
    a2[4] = v21;
    a2[5] = (uint64_t)v20;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v20, v30, v31, v32, v33, v34, v35, v36);
    swift_bridgeObjectRelease(v29, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(v14, v44, v45, v46, v47, v48, v49, v50);
  }
}

void sub_1D28F4(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  DragDropItemData.init(from:)(a1, a2);
}

uint64_t sub_1D2908(_QWORD *a1)
{
  return DragDropItemData.encode(to:)(a1);
}

unint64_t sub_1D291C()
{
  unint64_t result;

  result = qword_2A7110;
  if (!qword_2A7110)
  {
    result = swift_getWitnessTable(byte_21A714, &type metadata for DragDropItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7110);
  }
  return result;
}

ValueMetadata *type metadata accessor for DragDropItemData()
{
  return &type metadata for DragDropItemData;
}

uint64_t storeEnumTagSinglePayload for DragDropItemData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D29C4 + 4 * byte_21A575[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D29F8 + 4 * byte_21A570[v4]))();
}

uint64_t sub_1D29F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2A08);
  return result;
}

uint64_t sub_1D2A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2A1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D2A20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2A28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DragDropItemData.CodingKeys()
{
  return &type metadata for DragDropItemData.CodingKeys;
}

unint64_t sub_1D2A48()
{
  unint64_t result;

  result = qword_2A7120;
  if (!qword_2A7120)
  {
    result = swift_getWitnessTable(byte_21A6EC, &type metadata for DragDropItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7120);
  }
  return result;
}

unint64_t sub_1D2A90()
{
  unint64_t result;

  result = qword_2A7128;
  if (!qword_2A7128)
  {
    result = swift_getWitnessTable(aE_21, &type metadata for DragDropItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7128);
  }
  return result;
}

unint64_t sub_1D2AD8()
{
  unint64_t result;

  result = qword_2A7130;
  if (!qword_2A7130)
  {
    result = swift_getWitnessTable(asc_21A684, &type metadata for DragDropItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7130);
  }
  return result;
}

void sub_1D2B1C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D2B68()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x546567617373656DLL, 0xEA00000000007061);
  swift_bridgeObjectRelease(0xEA00000000007061);
  return Hasher._finalize()();
}

void sub_1D2C50(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D2CA4()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x6552736569726573, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1D2D4C(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000012;
    else
      v3 = 0xD00000000000001ALL;
    if (a2 == 1)
      v4 = 0x800000000021E3F0;
    else
      v4 = 0x800000000021E410;
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6E776F6E6B6E75;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1D2DEC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D2E38()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000015, 0x800000000021DB70);
  swift_bridgeObjectRelease(0x800000000021DB70);
  return Hasher._finalize()();
}

void sub_1D2EF4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D2F40()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1802465122, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_1D2FE8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D303C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C62627562, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1D30FC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3148()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x68736F6F7773, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1D31F4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3240()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C616E7265747865, 0xEC0000006B6E694CLL);
  swift_bridgeObjectRelease(0xEC0000006B6E694CLL);
  return Hasher._finalize()();
}

void sub_1D3338(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3384()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7542686372616573, 0xEF7061546E6F7474);
  swift_bridgeObjectRelease(0xEF7061546E6F7474);
  return Hasher._finalize()();
}

void sub_1D3468(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D34B4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6573616863727570, 0xE900000000000064);
  swift_bridgeObjectRelease(0xE900000000000064);
  return Hasher._finalize()();
}

void sub_1D3598(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D35E4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x756F72676B636162, 0xEC0000006465646ELL);
  swift_bridgeObjectRelease(0xEC0000006465646ELL);
  return Hasher._finalize()();
}

void sub_1D366C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D36B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x696C43656C746974, 0xEA00000000006B63);
  swift_bridgeObjectRelease(0xEA00000000006B63);
  return Hasher._finalize()();
}

void sub_1D3754(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D37A0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E65636572, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1D3858(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D38A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x75426C65636E6163, 0xEF7061546E6F7474);
  swift_bridgeObjectRelease(0xEF7061546E6F7474);
  return Hasher._finalize()();
}

void sub_1D3928(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3974()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656369766564, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1D3A34(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3A88()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65536E497478656ELL, 0xEC00000073656972);
  swift_bridgeObjectRelease(0xEC00000073656972);
  return Hasher._finalize()();
}

void sub_1D3B58(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3BA4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 28271, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_1D3C28(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3C74()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E65636572, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1D3D3C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3D88()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7070416E69, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1D3E50(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    v3 = 0xD000000000000010;
    if (a2 == 1)
      v4 = 0x800000000021E180;
    else
      v4 = 0x800000000021E1A0;
  }
  else
  {
    v4 = 0xEC000000656C6261;
    v3 = 0x6863616552746F6ELL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1D3EFC(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v4 = 0x800000000021E0C0;
  else
    v4 = 0x800000000021E0A0;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1D3F7C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D3FC8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 6647407, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

void sub_1D4044(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D4090()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x4E676E6964616572, 0xEA0000000000776FLL);
  swift_bridgeObjectRelease(0xEA0000000000776FLL);
  return Hasher._finalize()();
}

void sub_1D4150(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D419C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6553656369766564, 0xEE0073676E697474);
  swift_bridgeObjectRelease(0xEE0073676E697474);
  return Hasher._finalize()();
}

void sub_1D4218(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D4264()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65536E497478656ELL, 0xEC00000073656972);
  swift_bridgeObjectRelease(0xEC00000073656972);
  return Hasher._finalize()();
}

void sub_1D4310(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D435C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F6F527265707573, 0xE90000000000006DLL);
  swift_bridgeObjectRelease(0xE90000000000006DLL);
  return Hasher._finalize()();
}

void sub_1D441C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1D4468()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C61626F6C67, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

BookAnalytics::SearchMethod_optional __swiftcall SearchMethod.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SearchMethod_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2693D0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SearchMethod.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D45A0 + 4 * byte_21A801[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1D45A0()
{
  return 0x7542686372616573;
}

unint64_t sub_1D45C4()
{
  return 0xD000000000000011;
}

unint64_t sub_1D45EC()
{
  return 0xD000000000000013;
}

uint64_t sub_1D4628()
{
  return 0x6574736567677573;
}

unint64_t sub_1D4660()
{
  unint64_t result;

  result = qword_2A7138;
  if (!qword_2A7138)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchMethod, &type metadata for SearchMethod);
    atomic_store(result, (unint64_t *)&qword_2A7138);
  }
  return result;
}

void sub_1D46A4()
{
  char *v0;

  sub_1D3338(0, *v0);
}

void sub_1D46B0(uint64_t a1)
{
  char *v1;

  sub_1ED00C(a1, *v1);
}

void sub_1D46B8(uint64_t a1)
{
  char *v1;

  sub_1D3338(a1, *v1);
}

BookAnalytics::SearchMethod_optional sub_1D46C0(Swift::String *a1)
{
  return SearchMethod.init(rawValue:)(*a1);
}

uint64_t sub_1D46CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SearchMethod.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D46F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D4864();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1D474C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D4864();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SearchMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1D47E4 + 4 * byte_21A80E[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1D4818 + 4 * byte_21A809[v4]))();
}

uint64_t sub_1D4818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D4820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D4828);
  return result;
}

uint64_t sub_1D4834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D483CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1D4840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D4848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchMethod()
{
  return &type metadata for SearchMethod;
}

unint64_t sub_1D4864()
{
  unint64_t result;

  result = qword_2A7140;
  if (!qword_2A7140)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchMethod, &type metadata for SearchMethod);
    atomic_store(result, (unint64_t *)&qword_2A7140);
  }
  return result;
}

BookAnalytics::UpSellVariant_optional __swiftcall UpSellVariant.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::UpSellVariant_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2694B0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t UpSellVariant.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F43664F646E65;
  if (*v0 != 1)
    v1 = 0x6F6F42664F646E65;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_1D4968(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2A6E8(*a1, *a2);
}

unint64_t sub_1D4978()
{
  unint64_t result;

  result = qword_2A7148;
  if (!qword_2A7148)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UpSellVariant, &type metadata for UpSellVariant);
    atomic_store(result, (unint64_t *)&qword_2A7148);
  }
  return result;
}

Swift::Int sub_1D49BC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEC000000746E6574;
  v3 = 0x6E6F43664F646E65;
  if (v1 != 1)
  {
    v3 = 0x6F6F42664F646E65;
    v2 = 0xE90000000000006BLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1D4A68(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEC000000746E6574;
  v3 = 0x6E6F43664F646E65;
  if (*v1 != 1)
  {
    v3 = 0x6F6F42664F646E65;
    v2 = 0xE90000000000006BLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1D4AF0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEC000000746E6574;
  v4 = 0x6E6F43664F646E65;
  if (v2 != 1)
  {
    v4 = 0x6F6F42664F646E65;
    v3 = 0xE90000000000006BLL;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::UpSellVariant_optional sub_1D4B98(Swift::String *a1)
{
  return UpSellVariant.init(rawValue:)(*a1);
}

void sub_1D4BA4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEC000000746E6574;
  v5 = 0x6E6F43664F646E65;
  if (v2 != 1)
  {
    v5 = 0x6F6F42664F646E65;
    v4 = 0xE90000000000006BLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1D4C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D4D84();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1D4C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D4D84();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for UpSellVariant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D4D04 + 4 * byte_21A93D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D4D38 + 4 * byte_21A938[v4]))();
}

uint64_t sub_1D4D38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D4D40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D4D48);
  return result;
}

uint64_t sub_1D4D54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D4D5CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D4D60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D4D68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UpSellVariant()
{
  return &type metadata for UpSellVariant;
}

unint64_t sub_1D4D84()
{
  unint64_t result;

  result = qword_2A7150;
  if (!qword_2A7150)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UpSellVariant, &type metadata for UpSellVariant);
    atomic_store(result, (unint64_t *)&qword_2A7150);
  }
  return result;
}

BookAnalytics::ViewType_optional __swiftcall ViewType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ViewType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_269518, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ViewType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D4E50 + 4 * byte_21AA54[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1D4E50()
{
  return 7368564;
}

uint64_t sub_1D4E60()
{
  return 0x6B72616D6B6F6F62;
}

uint64_t sub_1D4E78()
{
  return 0x7365746F6ELL;
}

uint64_t sub_1D4E8C()
{
  return 0x6867696C68676968;
}

void sub_1D4EA8(char *a1)
{
  sub_25370(*a1);
}

unint64_t sub_1D4EB8()
{
  unint64_t result;

  result = qword_2A7158;
  if (!qword_2A7158)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewType, &type metadata for ViewType);
    atomic_store(result, (unint64_t *)&qword_2A7158);
  }
  return result;
}

void sub_1D4EFC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1D4F48()
{
  uint64_t v1;

  String.hash(into:)(&v1, 7368564, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

void sub_1D4FC8()
{
  __asm { BR              X10 }
}

uint64_t sub_1D5004(uint64_t a1)
{
  String.hash(into:)(a1, 7368564, 0xE300000000000000);
  return swift_bridgeObjectRelease(0xE300000000000000);
}

void sub_1D5070(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1D50B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 7368564, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

BookAnalytics::ViewType_optional sub_1D5138(Swift::String *a1)
{
  return ViewType.init(rawValue:)(*a1);
}

uint64_t sub_1D5144()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1D5174 + 4 * byte_21AA68[*v0]))();
}

void sub_1D5174(_QWORD *a1@<X8>)
{
  *a1 = 7368564;
  a1[1] = 0xE300000000000000;
}

void sub_1D5188(_QWORD *a1@<X8>)
{
  *a1 = 0x6B72616D6B6F6F62;
  a1[1] = 0xE800000000000000;
}

void sub_1D51A4(_QWORD *a1@<X8>)
{
  *a1 = 0x7365746F6ELL;
  a1[1] = 0xE500000000000000;
}

void sub_1D51BC(_QWORD *a1@<X8>)
{
  *a1 = 0x6867696C68676968;
  a1[1] = 0xEA00000000007374;
}

uint64_t sub_1D51DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D5350();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1D5238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1D5350();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ViewType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1D52D0 + 4 * byte_21AA72[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1D5304 + 4 * byte_21AA6D[v4]))();
}

uint64_t sub_1D5304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D530C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D5314);
  return result;
}

uint64_t sub_1D5320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D5328);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1D532C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewType()
{
  return &type metadata for ViewType;
}

unint64_t sub_1D5350()
{
  unint64_t result;

  result = qword_2A7160;
  if (!qword_2A7160)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewType, &type metadata for ViewType);
    atomic_store(result, (unint64_t *)&qword_2A7160);
  }
  return result;
}

uint64_t sub_1D5394()
{
  return 1701667182;
}

uint64_t sub_1D53A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1D5428(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D5564();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D5450(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D5564();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DebugData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_71B4(&qword_2A7168);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D5564();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DebugData.CodingKeys, &type metadata for DebugData.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1D5564()
{
  unint64_t result;

  result = qword_2A7170;
  if (!qword_2A7170)
  {
    result = swift_getWitnessTable(byte_21AD24, &type metadata for DebugData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7170);
  }
  return result;
}

uint64_t DebugData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A7178);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D5564();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DebugData.CodingKeys, &type metadata for DebugData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

unint64_t sub_1D56C8()
{
  unint64_t result;

  result = qword_2A7180;
  if (!qword_2A7180)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DebugData, &type metadata for DebugData);
    atomic_store(result, (unint64_t *)&qword_2A7180);
  }
  return result;
}

unint64_t sub_1D5710()
{
  unint64_t result;

  result = qword_2A7188;
  if (!qword_2A7188)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DebugData, &type metadata for DebugData);
    atomic_store(result, (unint64_t *)&qword_2A7188);
  }
  return result;
}

uint64_t sub_1D5754@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return DebugData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for DebugData()
{
  return &type metadata for DebugData;
}

uint64_t storeEnumTagSinglePayload for DebugData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D57B8 + 4 * byte_21AB8C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D57D8 + 4 * byte_21AB91[v4]))();
}

_BYTE *sub_1D57B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D57D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D57E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D57E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D57F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D57F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DebugData.CodingKeys()
{
  return &type metadata for DebugData.CodingKeys;
}

unint64_t sub_1D5818()
{
  unint64_t result;

  result = qword_2A7190;
  if (!qword_2A7190)
  {
    result = swift_getWitnessTable("u\r\a", &type metadata for DebugData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7190);
  }
  return result;
}

unint64_t sub_1D5860()
{
  unint64_t result;

  result = qword_2A7198;
  if (!qword_2A7198)
  {
    result = swift_getWitnessTable(a5_5, &type metadata for DebugData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7198);
  }
  return result;
}

unint64_t sub_1D58A8()
{
  unint64_t result;

  result = qword_2A71A0;
  if (!qword_2A71A0)
  {
    result = swift_getWitnessTable(byte_21AC94, &type metadata for DebugData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A71A0);
  }
  return result;
}

uint64_t sub_1D58F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D5924 + 4 * byte_21AD74[*v0]))(0x496E6F6974636573, 0xE900000000000044);
}

uint64_t sub_1D5924()
{
  return 0x4E6E6F6974636573;
}

unint64_t sub_1D5944()
{
  return 0xD000000000000011;
}

uint64_t sub_1D5960()
{
  return 0x657A69536C6C6563;
}

uint64_t sub_1D5978@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D63C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D599C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D5FB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D59C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D5FB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ExposureData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = sub_71B4(&qword_2A71A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v26 = v1[3];
  v27 = v9;
  v10 = v1[4];
  v24 = v1[5];
  v25 = v10;
  v11 = v1[6];
  v22 = v1[7];
  v23 = v11;
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_1D5FB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ExposureData.CodingKeys, &type metadata for ExposureData.CodingKeys, v14, v13, v12);
  v32 = 0;
  v15 = v28;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v32, v3);
  if (!v15)
  {
    v17 = v24;
    v16 = v25;
    v19 = v22;
    v18 = v23;
    v31 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v26, &v31, v3);
    v30 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v30, v3);
    v29 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v29, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void ExposureData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  uint64_t v18;
  BAEventReporter *v19;
  BAEventReporter *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  BAEventReporter *v30;
  BAEventReporter *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  int64_t v57;
  int64_t v58;
  void *v59;
  BAEventReporter *v60;
  uint64_t v61;
  uint64_t v62;
  BAEventReporter *v63;
  uint64_t v64;
  uint64_t v65;
  BAEventReporter *v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v5 = sub_71B4(&qword_2A71B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D5FB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ExposureData.CodingKeys, &type metadata for ExposureData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v60 = 0;
  }
  else
  {
    v70 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v70, v5);
    v14 = v13;
    v65 = v12;
    v69 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v69, v5);
    v66 = v16;
    v64 = v15;
    v68 = 2;
    swift_bridgeObjectRetain(v16);
    v62 = KeyedDecodingContainer.decode(_:forKey:)(&v68, v5);
    v63 = v17;
    v67 = 3;
    swift_bridgeObjectRetain(v17);
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v67, v5);
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22 = v18;
    v21(v8, v5);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(0, v23, v24, v25, v26, v27, v28, v29);
    v30 = v66;
    *a2 = v65;
    a2[1] = (uint64_t)v14;
    v31 = v63;
    a2[2] = v64;
    a2[3] = (uint64_t)v30;
    a2[4] = v62;
    a2[5] = (uint64_t)v31;
    a2[6] = v22;
    a2[7] = (uint64_t)v20;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v20, v32, v33, v34, v35, v36, v37, v38);
    swift_bridgeObjectRelease(v31, v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v30, v46, v47, v48, v49, v50, v51, v52);
    v60 = v14;
  }
  swift_bridgeObjectRelease(v60, v53, v54, v55, v56, v57, v58, v59);
}

void sub_1D5E50(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ExposureData.init(from:)(a1, a2);
}

uint64_t sub_1D5E64(_QWORD *a1)
{
  return ExposureData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics12ExposureDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a1[7];
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v16 = a2[7];
  v21 = a2[6];
  v22 = a1[6];
  if (v4 == *a2 && v5 == v11
    || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v11, 0), result = 0, (v17 & 1) != 0))
  {
    if (v6 == v12 && v8 == v13
      || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v12, v13, 0), result = 0, (v19 & 1) != 0))
    {
      if (v7 == v14 && v9 == v15
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v14, v15, 0), result = 0, (v20 & 1) != 0))
      {
        if (v10)
        {
          if (v16
            && (v22 == v21 && v10 == v16
             || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v10, v21, v16, 0) & 1) != 0))
          {
            return 1;
          }
        }
        else if (!v16)
        {
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_1D5FB4()
{
  unint64_t result;

  result = qword_2A71B0;
  if (!qword_2A71B0)
  {
    result = swift_getWitnessTable(byte_21AF20, &type metadata for ExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A71B0);
  }
  return result;
}

_QWORD *initializeWithCopy for ExposureData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for ExposureData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for ExposureData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExposureData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExposureData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExposureData()
{
  return &type metadata for ExposureData;
}

uint64_t storeEnumTagSinglePayload for ExposureData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D6268 + 4 * byte_21AD7D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D629C + 4 * byte_21AD78[v4]))();
}

uint64_t sub_1D629C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D62A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D62ACLL);
  return result;
}

uint64_t sub_1D62B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D62C0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D62C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D62CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExposureData.CodingKeys()
{
  return &type metadata for ExposureData.CodingKeys;
}

unint64_t sub_1D62EC()
{
  unint64_t result;

  result = qword_2A71C0;
  if (!qword_2A71C0)
  {
    result = swift_getWitnessTable("i\r\a", &type metadata for ExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A71C0);
  }
  return result;
}

unint64_t sub_1D6334()
{
  unint64_t result;

  result = qword_2A71C8;
  if (!qword_2A71C8)
  {
    result = swift_getWitnessTable(asc_21AE68, &type metadata for ExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A71C8);
  }
  return result;
}

unint64_t sub_1D637C()
{
  unint64_t result;

  result = qword_2A71D0;
  if (!qword_2A71D0)
  {
    result = swift_getWitnessTable(byte_21AE90, &type metadata for ExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A71D0);
  }
  return result;
}

uint64_t sub_1D63C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x496E6F6974636573 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496E6F6974636573, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4E6E6F6974636573 && a2 == 0xEB00000000656D61)
  {
    v7 = 0xEB00000000656D61;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6974636573, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x800000000021ECA0;
    if (a2 == 0x800000000021ECA0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021ECA0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x657A69536C6C6563 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657A69536C6C6563, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1D6598()
{
  return 0x7079547261656C63;
}

uint64_t sub_1D65B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7079547261656C63 && a2 == 0xE900000000000065)
  {
    result = swift_bridgeObjectRelease(0xE900000000000065);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7079547261656C63, 0xE900000000000065, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1D6654(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D69A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D667C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D69A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClearedData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A71D8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1D69A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ClearedData.CodingKeys, &type metadata for ClearedData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1D69E8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for ClearType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ClearedData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A71F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D69A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClearedData.CodingKeys, &type metadata for ClearedData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1D6A2C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for ClearType, v13, v5, &type metadata for ClearType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1D68BC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ClearedData.init(from:)(a1, a2);
}

uint64_t sub_1D68D0(_QWORD *a1)
{
  return ClearedData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics11ClearedDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x796C746E65636572;
  else
    v3 = 0x6553746E65636572;
  if (v2)
    v4 = 0xEE00736568637261;
  else
    v4 = 0xEE00646577656956;
  if (*a2)
    v5 = 0x796C746E65636572;
  else
    v5 = 0x6553746E65636572;
  if (*a2)
    v6 = 0xEE00646577656956;
  else
    v6 = 0xEE00736568637261;
  if (v3 == v5 && v4 == v6)
  {
    v8 = 1;
    v6 = v4;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

unint64_t sub_1D69A4()
{
  unint64_t result;

  result = qword_2A71E0;
  if (!qword_2A71E0)
  {
    result = swift_getWitnessTable(byte_21B114, &type metadata for ClearedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A71E0);
  }
  return result;
}

unint64_t sub_1D69E8()
{
  unint64_t result;

  result = qword_2A71E8;
  if (!qword_2A71E8)
  {
    result = swift_getWitnessTable("5Z\a", &type metadata for ClearType);
    atomic_store(result, (unint64_t *)&qword_2A71E8);
  }
  return result;
}

unint64_t sub_1D6A2C()
{
  unint64_t result;

  result = qword_2A71F8;
  if (!qword_2A71F8)
  {
    result = swift_getWitnessTable("MZ\a", &type metadata for ClearType);
    atomic_store(result, (unint64_t *)&qword_2A71F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClearedData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D6AC4 + 4 * byte_21AF75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D6AF8 + 4 * byte_21AF70[v4]))();
}

uint64_t sub_1D6AF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D6B00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D6B08);
  return result;
}

uint64_t sub_1D6B14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D6B1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D6B20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D6B28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClearedData()
{
  return &type metadata for ClearedData;
}

uint64_t storeEnumTagSinglePayload for ClearedData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D6B84 + 4 * byte_21AF7A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D6BA4 + 4 * byte_21AF7F[v4]))();
}

_BYTE *sub_1D6B84(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D6BA4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D6BAC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D6BB4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D6BBC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D6BC4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClearedData.CodingKeys()
{
  return &type metadata for ClearedData.CodingKeys;
}

unint64_t sub_1D6BE4()
{
  unint64_t result;

  result = qword_2A7200;
  if (!qword_2A7200)
  {
    result = swift_getWitnessTable("]\r\a", &type metadata for ClearedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7200);
  }
  return result;
}

unint64_t sub_1D6C2C()
{
  unint64_t result;

  result = qword_2A7208;
  if (!qword_2A7208)
  {
    result = swift_getWitnessTable(byte_21B05C, &type metadata for ClearedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7208);
  }
  return result;
}

unint64_t sub_1D6C74()
{
  unint64_t result;

  result = qword_2A7210;
  if (!qword_2A7210)
  {
    result = swift_getWitnessTable(byte_21B084, &type metadata for ClearedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7210);
  }
  return result;
}

uint64_t sub_1D6CB8()
{
  return 0x6C616E7265747865;
}

uint64_t sub_1D6CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6C616E7265747865 && a2 == 0xEB000000006C7255)
  {
    result = swift_bridgeObjectRelease(0xEB000000006C7255);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E7265747865, 0xEB000000006C7255, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1D6D84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D6EC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D6DAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D6EC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ExternalLinkData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_71B4(&qword_2A7218);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D6EC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ExternalLinkData.CodingKeys, &type metadata for ExternalLinkData.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1D6EC0()
{
  unint64_t result;

  result = qword_2A7220;
  if (!qword_2A7220)
  {
    result = swift_getWitnessTable(byte_21B314, &type metadata for ExternalLinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7220);
  }
  return result;
}

uint64_t ExternalLinkData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A7228);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D6EC0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ExternalLinkData.CodingKeys, &type metadata for ExternalLinkData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1D7028@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ExternalLinkData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for ExternalLinkData()
{
  return &type metadata for ExternalLinkData;
}

uint64_t storeEnumTagSinglePayload for ExternalLinkData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D708C + 4 * byte_21B170[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D70AC + 4 * byte_21B175[v4]))();
}

_BYTE *sub_1D708C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D70AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D70B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D70BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D70C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D70CC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ExternalLinkData.CodingKeys()
{
  return &type metadata for ExternalLinkData.CodingKeys;
}

unint64_t sub_1D70EC()
{
  unint64_t result;

  result = qword_2A7230;
  if (!qword_2A7230)
  {
    result = swift_getWitnessTable("E\r\a", &type metadata for ExternalLinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7230);
  }
  return result;
}

unint64_t sub_1D7134()
{
  unint64_t result;

  result = qword_2A7238;
  if (!qword_2A7238)
  {
    result = swift_getWitnessTable(byte_21B25C, &type metadata for ExternalLinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7238);
  }
  return result;
}

unint64_t sub_1D717C()
{
  unint64_t result;

  result = qword_2A7240;
  if (!qword_2A7240)
  {
    result = swift_getWitnessTable(byte_21B284, &type metadata for ExternalLinkData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7240);
  }
  return result;
}

BookAnalytics::SearchSuggestionData __swiftcall SearchSuggestionData.init(suggestionsReturnedCount:searchSuggestionSummary:)(Swift::Int32 suggestionsReturnedCount, Swift::OpaquePointer searchSuggestionSummary)
{
  uint64_t v2;
  BookAnalytics::SearchSuggestionData result;

  *(_DWORD *)v2 = suggestionsReturnedCount;
  *(Swift::OpaquePointer *)(v2 + 8) = searchSuggestionSummary;
  result.searchSuggestionSummary = searchSuggestionSummary;
  result.suggestionsReturnedCount = suggestionsReturnedCount;
  return result;
}

uint64_t static SearchSuggestionData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return sub_663E8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  else
    return 0;
}

unint64_t sub_1D71F0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000017;
  else
    return 0xD000000000000018;
}

uint64_t sub_1D722C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D78C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D7250(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D7400();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D7278(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D7400();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchSuggestionData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v4 = sub_71B4(&qword_2A7248);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = *((_QWORD *)v1 + 1);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D7400();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionData.CodingKeys, &type metadata for SearchSuggestionData.CodingKeys, v11, v9, v10);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v18, v4);
  if (!v2)
  {
    v16 = v15;
    v17 = 1;
    v12 = sub_71B4(&qword_2A7258);
    v13 = sub_1D75D0(&qword_2A7260, (uint64_t (*)(void))sub_141894, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v17, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1D7400()
{
  unint64_t result;

  result = qword_2A7250;
  if (!qword_2A7250)
  {
    result = swift_getWitnessTable("y\r\a", &type metadata for SearchSuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7250);
  }
  return result;
}

uint64_t SearchSuggestionData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v5 = sub_71B4(&qword_2A7268);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1D7400();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionData.CodingKeys, &type metadata for SearchSuggestionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v20 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
    v13 = sub_71B4(&qword_2A7258);
    v19 = 1;
    v14 = sub_1D75D0(&qword_2A7270, (uint64_t (*)(void))sub_14184C, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v13, &v19, v5, v13, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v18;
    *(_DWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1D75D0(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_2A7258);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7640@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SearchSuggestionData.init(from:)(a1, a2);
}

uint64_t sub_1D7654(_QWORD *a1)
{
  return SearchSuggestionData.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for SearchSuggestionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SearchSuggestionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SearchSuggestionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for SearchSuggestionData()
{
  return &type metadata for SearchSuggestionData;
}

uint64_t storeEnumTagSinglePayload for SearchSuggestionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D7770 + 4 * byte_21B375[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D77A4 + 4 * byte_21B370[v4]))();
}

uint64_t sub_1D77A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D77AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D77B4);
  return result;
}

uint64_t sub_1D77C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D77C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D77CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D77D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchSuggestionData.CodingKeys()
{
  return &type metadata for SearchSuggestionData.CodingKeys;
}

unint64_t sub_1D77F4()
{
  unint64_t result;

  result = qword_2A7278;
  if (!qword_2A7278)
  {
    result = swift_getWitnessTable(")\r\a", &type metadata for SearchSuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7278);
  }
  return result;
}

unint64_t sub_1D783C()
{
  unint64_t result;

  result = qword_2A7280;
  if (!qword_2A7280)
  {
    result = swift_getWitnessTable(byte_21B460, &type metadata for SearchSuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7280);
  }
  return result;
}

unint64_t sub_1D7884()
{
  unint64_t result;

  result = qword_2A7288;
  if (!qword_2A7288)
  {
    result = swift_getWitnessTable(byte_21B488, &type metadata for SearchSuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7288);
  }
  return result;
}

uint64_t sub_1D78C8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000018 && a2 == 0x80000000002229E0)
  {
    v4 = 0x80000000002229E0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000002229E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000000222A00)
  {
    swift_bridgeObjectRelease(0x8000000000222A00);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000000222A00, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t View.collectAppAnalyticsExposure(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t WitnessTable;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  void (*v29)(_QWORD, _QWORD);
  char *v30;
  uint64_t v31;
  void (*v32)(_QWORD, _QWORD, _QWORD);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  __int128 v50;
  uint64_t v51;
  _OWORD v52[3];

  v44 = a3;
  v45 = a4;
  v40[0] = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v40 - v9;
  v11 = type metadata accessor for ExposureViewModifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModifiedContent(0, a2, v11);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)v40 - v19;
  v43 = type metadata accessor for _ConditionalContent(0, v14, a2);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v41 = (char *)v40 - v21;
  sub_3A82C(a1, (uint64_t)&v50, &qword_2A6F20);
  if (v51)
  {
    sub_1D05A0(&v50, v52);
    sub_1D055C((uint64_t)v52, (uint64_t)&v50);
    v22 = swift_allocObject(&unk_28C2D8, 64, 7);
    sub_1D05A0(&v50, (_OWORD *)(v22 + 16));
    sub_1D8CC4((uint64_t)sub_1D80A4, v22, 0, (uint64_t)v13);
    v23 = v44;
    View.modifier<A>(_:)(v13, a2, v11, v44);
    v24 = (uint64_t)v13;
    v25 = v23;
    sub_1D80AC(v24);
    v26 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
    v46[0] = v23;
    v46[1] = v26;
    WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v14, v46);
    v28 = *(void (**)(_QWORD, _QWORD, _QWORD))(v15 + 16);
    v28(v20, v18, v14);
    v29 = *(void (**)(_QWORD, _QWORD))(v15 + 8);
    v29(v18, v14);
    v28(v18, v20, v14);
    v30 = v41;
    sub_1D7EF8((uint64_t)v18, v14, a2, WitnessTable, v25);
    v29(v18, v14);
    v29(v20, v14);
    sub_7DAC(v52);
  }
  else
  {
    sub_88F50((uint64_t)&v50, &qword_2A6F20);
    v31 = v40[0];
    v32 = *(void (**)(_QWORD, _QWORD, _QWORD))(v40[0] + 16);
    v32(v10, v40[1], a2);
    v32(v8, v10, a2);
    v33 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
    v25 = v44;
    v49[0] = v44;
    v49[1] = v33;
    v34 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v14, v49);
    v30 = v41;
    sub_1D7FBC((uint64_t)v8, v14, a2, v34, v25);
    v35 = *(void (**)(_QWORD, _QWORD))(v31 + 8);
    v35(v8, a2);
    v35(v10, a2);
  }
  v36 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
  v48[0] = v25;
  v48[1] = v36;
  v47[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v14, v48);
  v47[1] = v25;
  v37 = v43;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v43, v47);
  v38 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v45, v30, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v30, v37);
}

uint64_t type metadata accessor for ExposureViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_2A72F8;
  if (!qword_2A72F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ExposureViewModifier);
  return result;
}

uint64_t sub_1D7E18(uint64_t a1, uint64_t a2)
{
  BAEventReporter **v3;
  BAEventReporter *v4;
  char isUniquelyReferenced_nonNull_native;
  void *v6;
  int64_t v7;
  int64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t isa;
  _BYTE v13[24];
  __int128 v14[3];

  sub_1D055C(a2, (uint64_t)v14);
  v3 = (BAEventReporter **)(a1 + 16);
  swift_beginAccess(a1 + 16, v13, 33, 0);
  v4 = *(BAEventReporter **)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *(_QWORD *)(a1 + 16) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1DB7C8(0, (int64_t)v4[1].super.isa + 1, 1, v4, v6, v7, v8, v9);
    *v3 = v4;
  }
  isa = (unint64_t)v4[1].super.isa;
  v10 = *(_QWORD *)v4[1].dataProviders;
  if (isa >= v10 >> 1)
  {
    v4 = sub_1DB7C8((BAEventReporter *)(v10 > 1), isa + 1, 1, v4, v6, v7, v8, v9);
    *v3 = v4;
  }
  v4[1].super.isa = (Class)(isa + 1);
  sub_1D05A0(v14, &v4[3 * isa + 2]);
  return swift_endAccess(v13);
}

uint64_t sub_1D7EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_1D7FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_1D8080()
{
  uint64_t v0;

  sub_7DAC((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1D80A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1D7E18(a1, v1 + 16);
}

uint64_t sub_1D80AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ExposureViewModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.emitAppAnalyticsExposureEvent<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t WitnessTable;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];

  v50 = a5;
  v54 = a4;
  v55 = a6;
  v48 = *(_QWORD *)(a2 - 8);
  v49 = a3;
  v8 = __chkstk_darwin(a1);
  v47 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v46 = (char *)&v46 - v10;
  v11 = type metadata accessor for ExposureViewModifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModifiedContent(0, a2, v11);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v46 - v19;
  v21 = type metadata accessor for _ConditionalContent(0, v14, a2);
  v52 = *(_QWORD *)(v21 - 8);
  v53 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v46 - v22;
  if (a1)
  {
    v24 = a1;
    v25 = (_QWORD *)swift_allocObject(&unk_28C300, 56, 7);
    v26 = v49;
    v25[2] = a2;
    v25[3] = v26;
    v27 = v54;
    v28 = v50;
    v25[4] = v54;
    v25[5] = v28;
    v25[6] = v24;
    sub_1D8CC4((uint64_t)sub_1D8654, (uint64_t)v25, 1, (uint64_t)v13);
    View.modifier<A>(_:)(v13, a2, v11, v27);
    v29 = (uint64_t)v13;
    v30 = v27;
    sub_1D80AC(v29);
    v31 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
    v56[0] = v27;
    v56[1] = v31;
    WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v14, v56);
    v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v33(v20, v18, v14);
    v34 = *(void (**)(char *, uint64_t))(v15 + 8);
    v34(v18, v14);
    v33(v18, v20, v14);
    sub_1D7EF8((uint64_t)v18, v14, a2, WitnessTable, v30);
    v34(v18, v14);
    v34(v20, v14);
  }
  else
  {
    v35 = v48;
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    v37 = v46;
    v36(v46, v51, a2);
    v38 = (uint64_t)v47;
    v36(v47, (uint64_t)v37, a2);
    v39 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
    v30 = v54;
    v59[0] = v54;
    v59[1] = v39;
    v40 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v14, v59);
    sub_1D7FBC(v38, v14, a2, v40, v30);
    v41 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v41(v38, a2);
    v41((uint64_t)v37, a2);
  }
  v42 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
  v58[0] = v30;
  v58[1] = v42;
  v57[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v14, v58);
  v57[1] = v30;
  v43 = v53;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v53, v57);
  v44 = v52;
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v55, v23, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v23, v43);
}

void sub_1D848C(uint64_t a1, objc_class **a2, uint64_t a3, uint64_t a4, objc_class *a5, objc_class *a6, uint64_t a7, objc_class *a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BAEventReporter *v25;
  uint64_t v26;
  objc_class *v27;
  BAEventReporter *v28;
  SEL v29;
  id v30;
  id v31;
  int64_t v32;
  id v33;
  BOOL v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  int64_t v39;
  id v40;
  BOOL v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  objc_class *v45;
  objc_class *v46;
  objc_class *v47;
  _BYTE v48[40];

  v46 = a5;
  v47 = a8;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v45 = *a2;
    v19 = BATracker.copy()();
    if (v19)
    {
      v20 = v19;
      v44 = a9;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v15);
      sub_3A82C(a3, (uint64_t)v48, &qword_296200);
      v21 = *(unsigned __int8 *)(v16 + 80);
      v22 = (v21 + 56) & ~v21;
      v23 = (v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
      v25 = (BAEventReporter *)swift_allocObject(&unk_28C3C8, v24 + 40, v21 | 7);
      v25[1].super.isa = a6;
      *(_QWORD *)v25[1].dataProviders = a7;
      v26 = v44;
      v25[2].super.isa = v47;
      *(_QWORD *)v25[2].dataProviders = v26;
      v25[3].super.isa = v46;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))((char *)v25 + v22, v18, v15);
      v27 = v45;
      *(Class *)((char *)&v25->super.isa + v23) = v45;
      sub_DF28((uint64_t)v48, (uint64_t)v25 + v24);
      v28 = (BAEventReporter *)swift_allocObject(&unk_28C3F0, 32, 7);
      v28[1].super.isa = (Class)sub_1DBD54;
      *(_QWORD *)v28[1].dataProviders = v25;
      swift_bridgeObjectRetain(v27);
      swift_retain(v25);
      Tracker.transaction(block:)(sub_53E94, v28);
      swift_release(v25, v29, v30, v31, v32, v33, v34, v35);

      swift_release(v28, v36, v37, v38, v39, v40, v41, v42);
    }
  }
}

uint64_t sub_1D8644()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

void sub_1D8654(uint64_t a1, objc_class **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1D848C(a1, a2, a3, a4, *(objc_class **)(v4 + 48), *(objc_class **)(v4 + 16), *(_QWORD *)(v4 + 24), *(objc_class **)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_1D8680(uint64_t a1, uint64_t a2, uint64_t a3, BAEventReporter *a4, uint64_t a5, objc_class *a6, uint64_t a7, objc_class *a8, uint64_t a9)
{
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;

  AccessTracker.explicitTime<A>(_:startTime:)(a2, a3, a7, a9);
  v15 = swift_bridgeObjectRetain(a4);
  sub_1E7448(v15, (void (*)(_QWORD *, uint64_t))sub_1DBE0C);
  swift_bridgeObjectRelease(a4, v16, v17, v18, v19, v20, v21, v22);
  return sub_1D8730(a1, a2, a6, a7, a8, a9);
}

uint64_t sub_1D8730(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, objc_class *a5, uint64_t a6)
{
  BAEventReporter *v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  _OWORD v20[2];

  memset(v20, 0, sizeof(v20));
  v11 = (BAEventReporter *)swift_allocObject(&unk_28C418, 48, 7);
  v11[1].super.isa = a3;
  *(_QWORD *)v11[1].dataProviders = a4;
  v11[2].super.isa = a5;
  *(_QWORD *)v11[2].dataProviders = a6;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(a2, 0, v20, sub_1DC218, v11, a4, a6);
  swift_release(v11, v12, v13, v14, v15, v16, v17, v18);
  return sub_88F50((uint64_t)v20, &qword_2983D0);
}

void sub_1D87E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BAEventReporter *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BAEventReporter *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;

  v8 = type metadata accessor for ProcessEvent(0, a3, a5);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v65 - v13;
  v15 = type metadata accessor for EventSubmitResult(0, a3, a5);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v65 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v65 - v17, a1, v15);
  v19 = (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 88))(v18, v15);
  if (v19 == enum case for EventSubmitResult.success<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v14, v18, v8);
    if (qword_295608 != -1)
      swift_once(&qword_295608, sub_5C794);
    v20 = type metadata accessor for Logger(0);
    sub_705C(v20, (uint64_t)qword_2987B8);
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v68 = v25;
      *(_DWORD *)v24 = 136315138;
      v66 = v24 + 4;
      v26 = ProcessEvent.name.getter(v8);
      v28 = (BAEventReporter *)v27;
      v67 = sub_EB014(v26, v27, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v66, v24 + 12);
      swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
      v36 = *(void (**)(char *, uint64_t))(v9 + 8);
      v36(v12, v8);
      _os_log_impl(&dword_0, v22, v23, "Reported %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      v36 = *(void (**)(char *, uint64_t))(v9 + 8);
      v36(v12, v8);
    }
    v36(v14, v8);
  }
  else if (v19 == enum case for EventSubmitResult.failed<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
    v37 = *v18;
    if (qword_295608 != -1)
      swift_once(&qword_295608, sub_5C794);
    v38 = type metadata accessor for Logger(0);
    sub_705C(v38, (uint64_t)qword_2987B8);
    swift_errorRetain(v37);
    v39 = swift_errorRetain(v37);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(22, -1);
      v43 = swift_slowAlloc(64, -1);
      v68 = v43;
      *(_DWORD *)v42 = 136315394;
      v44 = _typeName(_:qualified:)(a3, 0);
      v46 = (BAEventReporter *)v45;
      v67 = sub_EB014(v44, v45, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
      *(_WORD *)(v42 + 12) = 2080;
      v67 = v37;
      swift_errorRetain(v37);
      v54 = sub_71B4(&qword_29FBC0);
      v55 = String.init<A>(describing:)(&v67, v54);
      v57 = (BAEventReporter *)v56;
      v67 = sub_EB014(v55, v56, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      _os_log_impl(&dword_0, v40, v41, "Unable to submit %s: %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      swift_errorRelease(v37);
    }
    else
    {
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      swift_errorRelease(v37);

    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v18, v15);
  }
}

_QWORD *sub_1D8CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *result;
  uint64_t v26;
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v28 = a3;
  v7 = sub_71B4(&qword_29F018);
  v8 = __chkstk_darwin(v7);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v27[-v11];
  LOBYTE(v29) = 0;
  State.init(wrappedValue:)(&v30, &v29, &type metadata for Bool);
  v13 = v31;
  *(_BYTE *)(a4 + 24) = v30;
  *(_QWORD *)(a4 + 32) = v13;
  v14 = (int *)type metadata accessor for ExposureViewModifier(0);
  v15 = (_QWORD *)(a4 + v14[6]);
  v16 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  sub_3A82C((uint64_t)v12, (uint64_t)v10, &qword_29F018);
  State.init(wrappedValue:)(v15, v10, v7);
  sub_88F50((uint64_t)v12, &qword_29F018);
  v17 = a4 + v14[7];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_21B680);
  *(_BYTE *)(v17 + 8) = 0;
  v18 = a4 + v14[8];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_21B6A8);
  *(_BYTE *)(v18 + 8) = 0;
  v19 = a4 + v14[9];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_21B6D0);
  *(_BYTE *)(v19 + 40) = 0;
  v20 = a4 + v14[10];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_21B6F8);
  *(_BYTE *)(v20 + 8) = 0;
  v21 = a4 + v14[11];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_21B720);
  *(_BYTE *)(v21 + 8) = 0;
  v22 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  LOBYTE(v30) = 0;
  v23 = UserDefault.init(_:defaults:defaultValue:)(0xD00000000000001FLL, 0x8000000000222A30, v22, &v30, &type metadata for Bool);
  v24 = (_QWORD *)(a4 + v14[13]);
  v29 = static Color.red.getter(v23);
  result = State.init(wrappedValue:)(&v30, &v29, &type metadata for Color);
  v26 = v31;
  *v24 = v30;
  v24[1] = v26;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t View.emitAppAnalyticsExposureEvent<A>(_:attaching:with:)@<X0>(uint64_t a1@<X0>, objc_class *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  _QWORD v24[2];
  objc_class *v25;
  uint64_t *v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[2];

  v24[1] = a8;
  v25 = a2;
  v26 = a3;
  v13 = type metadata accessor for ExposureViewModifier(255);
  v14 = type metadata accessor for ModifiedContent(255, a4, v13);
  v15 = type metadata accessor for _ConditionalContent(255, v14, a4);
  v16 = type metadata accessor for Group(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)v24 - v18;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v32 = v24[0];
  v33 = a1;
  v20 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
  v36[0] = a6;
  v36[1] = v20;
  v35[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v14, v36);
  v35[1] = a6;
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v15, v35);
  Group<A>.init(content:)(sub_1D9218, v27, v15, WitnessTable);
  v34 = WitnessTable;
  v22 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> Group<A>, v16, &v34);
  View.appAnalyticsData(_:for:)(v25, v26, v16, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t sub_1D909C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  _QWORD v25[2];
  _QWORD v26[2];

  v23 = a5;
  v24 = a6;
  v10 = type metadata accessor for ExposureViewModifier(255);
  v11 = type metadata accessor for ModifiedContent(255, a2, v10);
  v12 = type metadata accessor for _ConditionalContent(0, v11, a2);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v23 - v17;
  View.emitAppAnalyticsExposureEvent<A>(_:)(a1, a2, a3, a4, v23, (uint64_t)v16);
  v19 = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
  v26[0] = a4;
  v26[1] = v19;
  v25[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v11, v26);
  v25[1] = a4;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v12, v25);
  v20 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v20(v18, v16, v12);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v20(v24, v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v12);
}

uint64_t sub_1D9218@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_1D909C(v1[7], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1D9228(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for ExposureViewModifier(255);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v5 = type metadata accessor for _ConditionalContent(255, v4, v1);
  v8[0] = v2;
  v8[1] = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
  v7[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v8);
  v7[1] = v2;
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v5, v7);
}

uint64_t sub_1D92D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];

  v1 = *a1;
  v2 = a1[2];
  v3 = type metadata accessor for ExposureViewModifier(255);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v5 = type metadata accessor for _ConditionalContent(255, v4, v1);
  v8[0] = v2;
  v8[1] = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
  v7[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v8);
  v7[1] = v2;
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v5, v7);
}

uint64_t sub_1D9384(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t WitnessTable;
  _QWORD v12[2];
  _QWORD v13[2];

  v1 = *a1;
  v2 = a1[2];
  v3 = type metadata accessor for ExposureViewModifier(255);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v5 = type metadata accessor for _ConditionalContent(255, v4, v1);
  v6 = type metadata accessor for Group(255, v5);
  v7 = sub_679EC(&qword_2A6EE0);
  v8 = type metadata accessor for ModifiedContent(255, v6, v7);
  v13[0] = v2;
  v13[1] = sub_7E10(&qword_2A7290, type metadata accessor for ExposureViewModifier, (uint64_t)&unk_21B600);
  v12[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v13);
  v12[1] = v2;
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v5, v12);
  v10[0] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> Group<A>, v6, &WitnessTable);
  v10[1] = sub_F7668(&qword_2A6EE8, &qword_2A6EE0, (const char *)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v10);
}

uint64_t *sub_1D94C4(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_1D9754(*(_QWORD *)a2, v8);
    *v4 = v7;
    v4[1] = v8;
    *((_BYTE *)v4 + 16) = v9;
    *((_BYTE *)v4 + 24) = *(_BYTE *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v4[4] = v10;
    v11 = a3[6];
    v12 = (char *)v4 + v11;
    v13 = (char *)(a2 + v11);
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_retain(v10);
    if (v16(v13, 1, v14))
    {
      v17 = sub_71B4(&qword_29F018);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v19 = *(int *)(sub_71B4(&qword_2A7298) + 28);
    v20 = *(_QWORD *)&v13[v19];
    *(_QWORD *)&v12[v19] = v20;
    v21 = a3[7];
    v22 = (char *)v4 + v21;
    v23 = a2 + v21;
    v24 = *(void **)v23;
    v25 = *(_BYTE *)(v23 + 8);
    swift_retain(v20);
    sub_1D975C(v24, v25);
    *(_QWORD *)v22 = v24;
    v22[8] = v25;
    v26 = a3[8];
    v27 = (char *)v4 + v26;
    v28 = a2 + v26;
    v29 = *(_QWORD *)v28;
    v30 = *(_BYTE *)(v28 + 8);
    sub_D374(*(_QWORD *)v28, v30);
    *(_QWORD *)v27 = v29;
    v27[8] = v30;
    v31 = a3[9];
    v32 = (char *)v4 + v31;
    v33 = (uint64_t *)(a2 + v31);
    if ((*(_BYTE *)(a2 + v31 + 40) & 1) != 0)
    {
      v34 = v33[3];
      if (v34)
      {
        v35 = v33[4];
        *((_QWORD *)v32 + 3) = v34;
        *((_QWORD *)v32 + 4) = v35;
        (**(void (***)(char *))(v34 - 8))(v32);
      }
      else
      {
        v37 = *((_OWORD *)v33 + 1);
        *(_OWORD *)v32 = *(_OWORD *)v33;
        *((_OWORD *)v32 + 1) = v37;
        *((_QWORD *)v32 + 4) = v33[4];
      }
      v32[40] = 1;
    }
    else
    {
      v36 = *v33;
      *(_QWORD *)v32 = *v33;
      v32[40] = 0;
      swift_retain(v36);
    }
    v38 = a3[10];
    v39 = (char *)v4 + v38;
    v40 = (uint64_t *)(a2 + v38);
    v41 = *v40;
    v42 = *((_BYTE *)v40 + 8);
    j__swift_retain(*v40);
    *(_QWORD *)v39 = v41;
    v39[8] = v42;
    v43 = a3[11];
    v44 = a3[12];
    v45 = (char *)v4 + v43;
    v46 = (uint64_t *)(a2 + v43);
    v47 = *v46;
    LOBYTE(v46) = *((_BYTE *)v46 + 8);
    *(_QWORD *)v45 = v47;
    v45[8] = (char)v46;
    v48 = (char *)v4 + v44;
    v49 = a2 + v44;
    swift_retain(v47);
    v50 = sub_71B4(&qword_29EFF8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
    v51 = a3[13];
    v52 = (uint64_t *)((char *)v4 + v51);
    v53 = (uint64_t *)(a2 + v51);
    v54 = *v53;
    v18 = v53[1];
    *v52 = *v53;
    v52[1] = v18;
    swift_retain(v54);
  }
  swift_retain(v18);
  return v4;
}

uint64_t sub_1D9754(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

id sub_1D975C(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain(a1);
}

void sub_1D976C(uint64_t a1, int *a2, uint64_t a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  SEL v21;
  id v22;
  id v23;
  int64_t v24;
  id v25;
  BOOL v26;
  id v27;
  const char *v28;
  void *v29;
  void *v30;
  int64_t v31;
  void *v32;
  BOOL v33;
  void *v34;
  uint64_t v35;
  SEL v36;
  id v37;
  id v38;
  int64_t v39;
  id v40;
  BOOL v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  BAEventReporter **v45;
  SEL v46;
  id v47;
  id v48;
  int64_t v49;
  id v50;
  BOOL v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  int64_t v56;
  id v57;
  BOOL v58;
  id v59;

  sub_1D98B8(*(_QWORD *)a1, *(BAEventReporter **)(a1 + 8), (void *)*(unsigned __int8 *)(a1 + 16), a4, a5, a6, a7, a8);
  swift_release(*(BAEventReporter **)(a1 + 32), v10, v11, v12, v13, v14, v15, v16);
  v17 = a1 + a2[6];
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  v20 = sub_71B4(&qword_2A7298);
  swift_release(*(BAEventReporter **)(v17 + *(int *)(v20 + 28)), v21, v22, v23, v24, v25, v26, v27);
  sub_DF70(*(id *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  sub_D380(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  v35 = a1 + a2[9];
  if ((*(_BYTE *)(v35 + 40) & 1) != 0)
  {
    if (*(_QWORD *)(v35 + 24))
      sub_7DAC((_QWORD *)v35);
  }
  else
  {
    swift_release(*(BAEventReporter **)v35, v28, v29, v30, v31, v32, v33, v34);
  }
  j__swift_release(*(BAEventReporter **)(a1 + a2[10]), (SEL)*(unsigned __int8 *)(a1 + a2[10] + 8), v29, v30, v31, v32, v33, v34);
  swift_release(*(BAEventReporter **)(a1 + a2[11]), v36, v37, v38, v39, v40, v41, v42);
  v43 = a1 + a2[12];
  v44 = sub_71B4(&qword_29EFF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
  v45 = (BAEventReporter **)(a1 + a2[13]);
  swift_release(*v45, v46, v47, v48, v49, v50, v51, v52);
  swift_release(v45[1], v53, v54, v55, v56, v57, v58, v59);
}

void sub_1D98B8(uint64_t a1, BAEventReporter *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  swift_release(a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D98C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_1D9754(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  v10 = a3[6];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_retain(v9);
  if (v15(v12, 1, v13))
  {
    v16 = sub_71B4(&qword_29F018);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = *(int *)(sub_71B4(&qword_2A7298) + 28);
  v18 = *(_QWORD *)&v12[v17];
  *(_QWORD *)&v11[v17] = v18;
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(void **)v21;
  v23 = *(_BYTE *)(v21 + 8);
  swift_retain(v18);
  sub_1D975C(v22, v23);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v23;
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_D374(*(_QWORD *)v26, v28);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = (uint64_t *)(a2 + v29);
  if ((*(_BYTE *)(a2 + v29 + 40) & 1) != 0)
  {
    v32 = v31[3];
    if (v32)
    {
      v33 = v31[4];
      *(_QWORD *)(v30 + 24) = v32;
      *(_QWORD *)(v30 + 32) = v33;
      (**(void (***)(uint64_t))(v32 - 8))(v30);
    }
    else
    {
      v35 = *((_OWORD *)v31 + 1);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *(_OWORD *)(v30 + 16) = v35;
      *(_QWORD *)(v30 + 32) = v31[4];
    }
    *(_BYTE *)(v30 + 40) = 1;
  }
  else
  {
    v34 = *v31;
    *(_QWORD *)v30 = *v31;
    *(_BYTE *)(v30 + 40) = 0;
    swift_retain(v34);
  }
  v36 = a3[10];
  v37 = a1 + v36;
  v38 = (uint64_t *)(a2 + v36);
  v39 = *v38;
  v40 = *((_BYTE *)v38 + 8);
  j__swift_retain(*v38);
  *(_QWORD *)v37 = v39;
  *(_BYTE *)(v37 + 8) = v40;
  v41 = a3[11];
  v42 = a3[12];
  v43 = a1 + v41;
  v44 = (uint64_t *)(a2 + v41);
  v45 = *v44;
  LOBYTE(v44) = *((_BYTE *)v44 + 8);
  *(_QWORD *)v43 = v45;
  *(_BYTE *)(v43 + 8) = (_BYTE)v44;
  v46 = a1 + v42;
  v47 = a2 + v42;
  swift_retain(v45);
  v48 = sub_71B4(&qword_29EFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
  v49 = a3[13];
  v50 = (uint64_t *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  v53 = v51[1];
  *v50 = *v51;
  v50[1] = v53;
  swift_retain(v52);
  swift_retain(v53);
  return a1;
}

uint64_t sub_1D9B28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  BAEventReporter *v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  BAEventReporter *v17;
  uint64_t v18;
  SEL v19;
  id v20;
  id v21;
  int64_t v22;
  id v23;
  BOOL v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  BAEventReporter *v36;
  uint64_t v37;
  SEL v38;
  id v39;
  id v40;
  int64_t v41;
  id v42;
  BOOL v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  char v49;
  void *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char v70;
  BAEventReporter *v71;
  const char *v72;
  id v73;
  id v74;
  int64_t v75;
  id v76;
  BOOL v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  BAEventReporter *v83;
  SEL v84;
  id v85;
  id v86;
  int64_t v87;
  id v88;
  BOOL v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  int64_t v103;
  id v104;
  BOOL v105;
  id v106;
  BAEventReporter *v107;
  uint64_t v108;
  SEL v109;
  id v110;
  id v111;
  int64_t v112;
  id v113;
  BOOL v114;
  id v115;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_1D9754(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(BAEventReporter **)(a1 + 8);
  v11 = (void *)*(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_1D98B8(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v17 = *(BAEventReporter **)(a1 + 32);
  v18 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v18;
  swift_retain(v18);
  swift_release(v17, v19, v20, v21, v22, v23, v24, v25);
  v26 = a3[6];
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
LABEL_6:
    v34 = sub_71B4(&qword_29F018);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_7:
  v35 = *(int *)(sub_71B4(&qword_2A7298) + 28);
  v36 = *(BAEventReporter **)&v27[v35];
  v37 = *(_QWORD *)&v28[v35];
  *(_QWORD *)&v27[v35] = v37;
  swift_retain(v37);
  swift_release(v36, v38, v39, v40, v41, v42, v43, v44);
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = *(id *)v47;
  v49 = *(_BYTE *)(v47 + 8);
  sub_1D975C(*(id *)v47, v49);
  v50 = *(void **)v46;
  v51 = *(_BYTE *)(v46 + 8);
  *(_QWORD *)v46 = v48;
  *(_BYTE *)(v46 + 8) = v49;
  sub_DF70(v50, v51);
  v52 = a3[8];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = *(_QWORD *)v54;
  v56 = *(_BYTE *)(v54 + 8);
  sub_D374(*(_QWORD *)v54, v56);
  v57 = *(_QWORD *)v53;
  v58 = *(_BYTE *)(v53 + 8);
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = v56;
  sub_D380(v57, v58);
  if (a1 != a2)
  {
    v59 = a3[9];
    v60 = a1 + v59;
    v61 = (__int128 *)(a2 + v59);
    sub_88F50(a1 + v59, &qword_2961F8);
    if ((*((_BYTE *)v61 + 40) & 1) != 0)
    {
      v62 = *((_QWORD *)v61 + 3);
      if (v62)
      {
        *(_QWORD *)(v60 + 24) = v62;
        *(_QWORD *)(v60 + 32) = *((_QWORD *)v61 + 4);
        (**(void (***)(uint64_t, __int128 *))(v62 - 8))(v60, v61);
      }
      else
      {
        v64 = *v61;
        v65 = v61[1];
        *(_QWORD *)(v60 + 32) = *((_QWORD *)v61 + 4);
        *(_OWORD *)v60 = v64;
        *(_OWORD *)(v60 + 16) = v65;
      }
      *(_BYTE *)(v60 + 40) = 1;
    }
    else
    {
      v63 = *(_QWORD *)v61;
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *(_BYTE *)(v60 + 40) = 0;
      swift_retain(v63);
    }
  }
  v66 = a3[10];
  v67 = a1 + v66;
  v68 = (uint64_t *)(a2 + v66);
  v69 = *v68;
  v70 = *((_BYTE *)v68 + 8);
  j__swift_retain(*v68);
  v71 = *(BAEventReporter **)v67;
  v72 = (const char *)*(unsigned __int8 *)(v67 + 8);
  *(_QWORD *)v67 = v69;
  *(_BYTE *)(v67 + 8) = v70;
  j__swift_release(v71, v72, v73, v74, v75, v76, v77, v78);
  v79 = a3[11];
  v80 = a1 + v79;
  v81 = (uint64_t *)(a2 + v79);
  v82 = *v81;
  LOBYTE(v81) = *((_BYTE *)v81 + 8);
  v83 = *(BAEventReporter **)v80;
  *(_QWORD *)v80 = v82;
  *(_BYTE *)(v80 + 8) = (_BYTE)v81;
  swift_retain(v82);
  swift_release(v83, v84, v85, v86, v87, v88, v89, v90);
  v91 = a3[12];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v94 = sub_71B4(&qword_29EFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 24))(v92, v93, v94);
  v95 = a3[13];
  v96 = a1 + v95;
  v97 = a2 + v95;
  v98 = *(_QWORD *)(a2 + v95);
  v99 = *(BAEventReporter **)(a1 + v95);
  *(_QWORD *)(a1 + v95) = v98;
  swift_retain(v98);
  swift_release(v99, v100, v101, v102, v103, v104, v105, v106);
  v107 = *(BAEventReporter **)(v96 + 8);
  v108 = *(_QWORD *)(v97 + 8);
  *(_QWORD *)(v96 + 8) = v108;
  swift_retain(v108);
  swift_release(v107, v109, v110, v111, v112, v113, v114, v115);
  return a1;
}

uint64_t sub_1D9E64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_71B4(&qword_29F018);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = sub_71B4(&qword_2A7298);
  *(_QWORD *)&v7[*(int *)(v12 + 28)] = *(_QWORD *)&v8[*(int *)(v12 + 28)];
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = (_OWORD *)(a1 + v19);
  v22 = (_OWORD *)(a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  *(_OWORD *)((char *)v21 + 25) = *(_OWORD *)((char *)v22 + 25);
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  v32 = sub_71B4(&qword_29EFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1DA014(uint64_t a1, uint64_t a2, int *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  char v11;
  uint64_t v12;
  BAEventReporter *v13;
  void *v14;
  BAEventReporter *v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  BAEventReporter *v33;
  SEL v34;
  id v35;
  id v36;
  int64_t v37;
  id v38;
  BOOL v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void *v53;
  void *v54;
  int64_t v55;
  void *v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  BAEventReporter *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  BAEventReporter *v73;
  SEL v74;
  id v75;
  id v76;
  int64_t v77;
  id v78;
  BOOL v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  BAEventReporter *v88;
  SEL v89;
  id v90;
  id v91;
  int64_t v92;
  id v93;
  BOOL v94;
  id v95;
  BAEventReporter *v96;
  SEL v97;
  id v98;
  id v99;
  int64_t v100;
  id v101;
  BOOL v102;
  id v103;

  v11 = *(_BYTE *)(a2 + 16);
  v12 = *(_QWORD *)a1;
  v13 = *(BAEventReporter **)(a1 + 8);
  v14 = (void *)*(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v11;
  sub_1D98B8(v12, v13, v14, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v15 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v15, v16, v17, v18, v19, v20, v21, v22);
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_6:
    v31 = sub_71B4(&qword_29F018);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_7:
  v32 = *(int *)(sub_71B4(&qword_2A7298) + 28);
  v33 = *(BAEventReporter **)&v24[v32];
  *(_QWORD *)&v24[v32] = *(_QWORD *)&v25[v32];
  swift_release(v33, v34, v35, v36, v37, v38, v39, v40);
  v41 = a3[7];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  v45 = *(void **)v42;
  v46 = *(_BYTE *)(v42 + 8);
  *(_QWORD *)v42 = v44;
  *(_BYTE *)(v42 + 8) = (_BYTE)v43;
  sub_DF70(v45, v46);
  v47 = a3[8];
  v48 = a1 + v47;
  v49 = (uint64_t *)(a2 + v47);
  v50 = *v49;
  LOBYTE(v49) = *((_BYTE *)v49 + 8);
  v51 = *(_QWORD *)v48;
  v52 = *(_BYTE *)(v48 + 8);
  *(_QWORD *)v48 = v50;
  *(_BYTE *)(v48 + 8) = (_BYTE)v49;
  sub_D380(v51, v52);
  if (a1 != a2)
  {
    v59 = a3[9];
    v60 = (_OWORD *)(a2 + v59);
    v61 = (_OWORD *)(a1 + v59);
    sub_88F50(a1 + v59, &qword_2961F8);
    v62 = v60[1];
    *v61 = *v60;
    v61[1] = v62;
    *(_OWORD *)((char *)v61 + 25) = *(_OWORD *)((char *)v60 + 25);
  }
  v63 = a3[10];
  v64 = a1 + v63;
  v65 = (uint64_t *)(a2 + v63);
  v66 = *v65;
  LOBYTE(v65) = *((_BYTE *)v65 + 8);
  v67 = *(BAEventReporter **)v64;
  v68 = (const char *)*(unsigned __int8 *)(v64 + 8);
  *(_QWORD *)v64 = v66;
  *(_BYTE *)(v64 + 8) = (_BYTE)v65;
  j__swift_release(v67, v68, v53, v54, v55, v56, v57, v58);
  v69 = a3[11];
  v70 = a1 + v69;
  v71 = (uint64_t *)(a2 + v69);
  v72 = *v71;
  LOBYTE(v71) = *((_BYTE *)v71 + 8);
  v73 = *(BAEventReporter **)v70;
  *(_QWORD *)v70 = v72;
  *(_BYTE *)(v70 + 8) = (_BYTE)v71;
  swift_release(v73, v74, v75, v76, v77, v78, v79, v80);
  v81 = a3[12];
  v82 = a1 + v81;
  v83 = a2 + v81;
  v84 = sub_71B4(&qword_29EFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 40))(v82, v83, v84);
  v85 = a3[13];
  v86 = a1 + v85;
  v87 = (_QWORD *)(a2 + v85);
  v88 = *(BAEventReporter **)(a1 + v85);
  *(_QWORD *)(a1 + v85) = *v87;
  swift_release(v88, v89, v90, v91, v92, v93, v94, v95);
  v96 = *(BAEventReporter **)(v86 + 8);
  *(_QWORD *)(v86 + 8) = v87[1];
  swift_release(v96, v97, v98, v99, v100, v101, v102, v103);
  return a1;
}

uint64_t sub_1DA2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1DA2B4);
}

uint64_t sub_1DA2B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_71B4(&qword_2A7298);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_71B4(&qword_29EFF8);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[13]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_1DA360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1DA36C);
}

uint64_t sub_1DA36C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_71B4(&qword_2A7298);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_71B4(&qword_29EFF8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[13]) = (a2 - 1);
  return result;
}

void sub_1DA414(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  v6[0] = &unk_21B588;
  v6[1] = &unk_21B5A0;
  sub_1DA4CC(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_21B5B8;
    v6[4] = &unk_21B5B8;
    v6[5] = &unk_21B5D0;
    v6[6] = &unk_21B5B8;
    v6[7] = &unk_21B5B8;
    sub_1DA524();
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      v6[9] = &unk_21B5E8;
      swift_initStructMetadata(a1, 256, 10, v6, a1 + 16);
    }
  }
}

void sub_1DA4CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_2A7308)
  {
    v2 = sub_679EC(&qword_29F018);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2A7308);
  }
}

void sub_1DA524()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2A7310)
  {
    v0 = type metadata accessor for UserDefault(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2A7310);
  }
}

uint64_t sub_1DA578(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_2345CC, 1);
}

uint64_t sub_1DA588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(BOOL *@<X8>);
  void (*v15)(BOOL *@<X8>);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(BOOL *@<X8>);
  uint64_t v23;
  BAEventReporter **v24;
  BAEventReporter *v25;
  BAEventReporter *v26;
  BAEventReporter *v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  int64_t v43;
  id v44;
  BOOL v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BAEventReporter *v61;
  SEL v62;
  id v63;
  id v64;
  int64_t v65;
  id v66;
  BOOL v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  BAEventReporter *v78;

  v3 = v2;
  v73 = a1;
  v76 = a2;
  v74 = type metadata accessor for ExposureViewModifier(0);
  v4 = *(_QWORD *)(v74 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v74);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_71B4(&qword_2A7360);
  __chkstk_darwin(v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_71B4(&qword_2A7368);
  v10 = __chkstk_darwin(v75);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Alignment.center.getter(v10);
  v15 = v14;
  sub_1DB428(v3, (uint64_t)v6);
  v16 = *(unsigned __int8 *)(v4 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = v17 + v5;
  v72 = v17 + v5;
  v19 = v16 | 7;
  v20 = swift_allocObject(&unk_28C328, v18, v16 | 7);
  sub_1DB470((uint64_t)v6, v20 + v17);
  v21 = sub_71B4(&qword_2A7370);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v9, v73, v21);
  v22 = (void (**)(BOOL *@<X8>))&v9[*(int *)(v7 + 36)];
  *v22 = sub_1DA8F4;
  v22[1] = 0;
  v22[2] = (void (*)(BOOL *@<X8>))sub_1DB4B4;
  v22[3] = (void (*)(BOOL *@<X8>))v20;
  v22[4] = (void (*)(BOOL *@<X8>))v13;
  v22[5] = v15;
  v23 = v74;
  v24 = (BAEventReporter **)(v3 + *(int *)(v74 + 44));
  v25 = *v24;
  LOBYTE(v20) = *((_BYTE *)v24 + 8);
  v26 = (BAEventReporter *)swift_retain(*v24);
  v27 = (BAEventReporter *)sub_D38C(v26, v20);
  swift_release(v25, v28, v29, v30, v31, v32, v33, v34);
  v77[0] = *(_QWORD *)v27[2].dataProviders;
  v35 = sub_71B4(&qword_29E0E0);
  v36 = sub_F7668(&qword_29E0E8, &qword_29E0E0, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v37 = v35;
  v38 = v23;
  v39 = Publisher.eraseToAnyPublisher()(v37, v36);
  swift_release(v27, v40, v41, v42, v43, v44, v45, v46);
  sub_1DB428(v3, (uint64_t)v6);
  v47 = swift_allocObject(&unk_28C350, v72, v19);
  sub_1DB470((uint64_t)v6, v47 + v17);
  sub_3A82C((uint64_t)v9, (uint64_t)v12, &qword_2A7360);
  v48 = v75;
  *(_QWORD *)&v12[*(int *)(v75 + 52)] = v39;
  v49 = (uint64_t (**)(uint64_t))&v12[*(int *)(v48 + 56)];
  *v49 = sub_1DB650;
  v49[1] = (uint64_t (*)(uint64_t))v47;
  v50 = sub_88F50((uint64_t)v9, &qword_2A7360);
  v51 = static Alignment.center.getter(v50);
  v53 = v52;
  v54 = sub_71B4(&qword_29EFF8);
  UserDefault.wrappedValue.getter(v77, v54);
  KeyPath = 0;
  v56 = 0;
  if (LOBYTE(v77[0]) == 1)
  {
    v57 = (uint64_t *)(v3 + *(int *)(v38 + 52));
    v59 = *v57;
    v58 = v57[1];
    v77[0] = v59;
    v77[1] = v58;
    v60 = sub_71B4(&qword_2A7380);
    State.wrappedValue.getter(v60);
    v61 = v78;
    v56 = Color.opacity(_:)(v78, 0.15);
    swift_release(v61, v62, v63, v64, v65, v66, v67, v68);
    KeyPath = swift_getKeyPath(&unk_21B650);
  }
  v69 = v76;
  sub_3A82C((uint64_t)v12, v76, &qword_2A7368);
  v70 = v69 + *(int *)(sub_71B4(&qword_2A7378) + 36);
  *(_QWORD *)v70 = KeyPath;
  *(_QWORD *)(v70 + 8) = v56;
  *(_BYTE *)(v70 + 16) = 0;
  *(_QWORD *)(v70 + 24) = v51;
  *(_QWORD *)(v70 + 32) = v53;
  return sub_88F50((uint64_t)v12, &qword_2A7368);
}

void sub_1DA8F4(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  _QWORD v14[5];

  v2 = type metadata accessor for CoordinateSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for CoordinateSpace.global(_:), v2);
  GeometryProxy.frameClippedToScrollViews(in:)(v14, v5);
  v6 = *(double *)&v14[2];
  v7 = *(double *)&v14[3];
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = ((uint64_t (*)(uint64_t))GeometryProxy.size.getter)(v8);
  v11 = v7 / v10;
  v12 = v6 / GeometryProxy.size.getter(v9);
  if (v12 >= v11)
    v12 = v11;
  *a1 = v12 > 0.5;
}

void sub_1DA9D0(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BAEventReporter *v6;
  char v7;
  BAEventReporter *v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  int64_t v28;
  int64_t v29;
  void *v30;
  char v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  int v39;
  _BYTE v40[8];
  uint64_t v41;
  char v42;

  if (*a1 != 1)
  {
    v39 = 0;
LABEL_8:
    sub_1DAAF0(v39);
    return;
  }
  v3 = *(_QWORD *)(a2 + 32);
  v40[0] = *(_BYTE *)(a2 + 24);
  v41 = v3;
  v42 = 1;
  v4 = sub_71B4(&qword_2A7388);
  State.wrappedValue.setter(&v42, v4);
  v5 = a2 + *(int *)(type metadata accessor for ExposureViewModifier(0) + 44);
  v6 = *(BAEventReporter **)v5;
  v7 = *(_BYTE *)(v5 + 8);
  v8 = (BAEventReporter *)swift_retain(*(_QWORD *)v5);
  v9 = sub_D38C(v8, v7);
  swift_release(v6, v10, v11, v12, v13, v14, v15, v16);
  swift_beginAccess(v9 + 16, v40, 0, 0);
  LOBYTE(v6) = *(_BYTE *)(v9 + 16);
  swift_release((BAEventReporter *)v9, v17, v18, v19, v20, v21, v22, v23);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease((BAEventReporter *)0xE700000000000000, v24, v25, v26, v27, v28, v29, v30);
    goto LABEL_7;
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564646968, 0xE600000000000000, 0x656C6269736976, 0xE700000000000000, 0);
  swift_bridgeObjectRelease((BAEventReporter *)0xE600000000000000, v32, v33, v34, v35, v36, v37, v38);
  if ((v31 & 1) != 0)
  {
LABEL_7:
    v39 = 1;
    goto LABEL_8;
  }
}

_QWORD *sub_1DAAF0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  void *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BAEventReporter *v39;
  void *v40;
  SEL v41;
  id v42;
  id v43;
  int64_t v44;
  id v45;
  BOOL v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(_QWORD);
  uint64_t v67;
  void *v68;
  char v69;
  BAEventReporter *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void *v75;
  int64_t v76;
  void *v77;
  BOOL v78;
  void *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  int64_t v84;
  int64_t v85;
  id v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  BAEventReporter *v89;
  const char *v90;
  BAEventReporter *v91;
  BAEventReporter *v92;
  id v93;
  id v94;
  int64_t v95;
  id v96;
  BOOL v97;
  id v98;
  void *v99;
  int64_t v100;
  void *v101;
  BOOL v102;
  void *v103;
  SEL v104;
  id v105;
  id v106;
  int64_t v107;
  id v108;
  BOOL v109;
  id v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD aBlock[5];
  BAEventReporter *v127;
  BAEventReporter *v128[2];

  LODWORD(v124) = a1;
  v122 = type metadata accessor for Date(0);
  v125 = *(_QWORD *)(v122 - 8);
  v1 = __chkstk_darwin(v122);
  v120 = (char *)&v112 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v119 = (char *)&v112 - v3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  v117 = v4;
  v118 = v5;
  __chkstk_darwin(v4);
  v113 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v115 = *(_QWORD *)(v7 - 8);
  v116 = v7;
  __chkstk_darwin(v7);
  v114 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for ExposureViewModifier(0);
  v9 = *(char **)(v121 - 8);
  v10 = *((_QWORD *)v9 + 8);
  __chkstk_darwin(v121);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(char **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v112 - v16;
  v18 = sub_71B4(&qword_29F018);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v112 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v112 - v26;
  if ((v124 & 1) != 0)
  {
    v119 = v12;
    v120 = v9;
    v124 = (uint64_t)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Date.now.getter(v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v27, 0, 1, v122);
    v28 = v123;
    sub_3A82C((uint64_t)v27, (uint64_t)v24, &qword_29F018);
    v29 = sub_71B4(&qword_2A7298);
    State.wrappedValue.setter(v24, v29);
    sub_88F50((uint64_t)v27, &qword_29F018);
    v30 = sub_71B4(&qword_29EFF8);
    result = UserDefault.wrappedValue.getter(aBlock, v30);
    if (LOBYTE(aBlock[0]) == 1)
    {
      sub_CB2E4();
      v32 = (void *)static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      v33 = v17;
      + infix(_:_:)(v15, 1.0);
      v34 = (void (*)(char *, uint64_t))*((_QWORD *)v119 + 1);
      v35 = v11;
      v34(v15, v11);
      v36 = v124;
      sub_1DB428(v28, v124);
      v37 = v120[80];
      v38 = (v37 + 16) & ~v37;
      v39 = (BAEventReporter *)swift_allocObject(&unk_28C378, v38 + v10, v37 | 7);
      sub_1DB470(v36, (uint64_t)v39 + v38);
      aBlock[4] = sub_1DBC64;
      v127 = v39;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_124DDC;
      aBlock[3] = &unk_28C390;
      v40 = _Block_copy(aBlock);
      swift_release(v127, v41, v42, v43, v44, v45, v46, v47);
      v48 = v114;
      static DispatchQoS.unspecified.getter(v49);
      aBlock[0] = _swiftEmptyArrayStorage;
      v50 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v51 = sub_71B4(&qword_29FBA8);
      v52 = sub_F7668((unint64_t *)&qword_2A0080, &qword_29FBA8, (const char *)&protocol conformance descriptor for [A]);
      v53 = v113;
      v54 = v51;
      v55 = v117;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v54, v52, v117, v50);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v48, v53, v40);
      _Block_release(v40);

      (*(void (**)(char *, uint64_t))(v118 + 8))(v53, v55);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v48, v116);
      return (_QWORD *)((uint64_t (*)(char *, uint64_t))v34)(v33, v35);
    }
  }
  else
  {
    v57 = v119;
    v56 = v120;
    v58 = (int *)v121;
    v59 = v123;
    v60 = sub_71B4(&qword_2A7298);
    State.wrappedValue.getter(v60);
    v61 = v125;
    v62 = v122;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v21, 1, v122) == 1)
    {
      return (_QWORD *)sub_88F50((uint64_t)v21, &qword_29F018);
    }
    else
    {
      v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 32))(v57, v21, v62);
      v64 = v56;
      static Date.now.getter(v63);
      if (Date.timeIntervalSince(_:)(v57) <= 1.0)
      {
        sub_1DB2D0(v59);
        v87 = *(void (**)(char *, uint64_t))(v61 + 8);
        v87(v56, v62);
        return (_QWORD *)((uint64_t (*)(char *, uint64_t))v87)(v57, v62);
      }
      else
      {
        v66 = *(void (**)(_QWORD))v59;
        v65 = *(_QWORD *)(v59 + 8);
        if ((*(_BYTE *)(v59 + 16) & 1) != 0)
        {
          v67 = v59 + v58[7];
          v68 = *(void **)v67;
          v69 = *(_BYTE *)(v67 + 8);
          v70 = *(BAEventReporter **)(v59 + 8);
          sub_1D9754(*(_QWORD *)v59, v65);
          sub_1D975C(v68, v69);
          v71 = (void *)sub_D708(v68, v69);
          sub_DF70(v68, v69);
          v72 = v59 + v58[8];
          v73 = *(_QWORD *)v72;
          v74 = *(_BYTE *)(v72 + 8);
          sub_D374(*(_QWORD *)v72, v74);
          sub_D180(v73, v74, (uint64_t *)v128);
          sub_D380(v73, v74);
          sub_D8D0((uint64_t)aBlock);
          ((void (*)(void *, BAEventReporter **, _QWORD *, char *))v66)(v71, v128, aBlock, v57);
          sub_1D98B8((uint64_t)v66, v70, (char *)&dword_0 + 1, v75, v76, v77, v78, v79);

          v64 = v56;
          v61 = v125;
          sub_88F50((uint64_t)aBlock, &qword_296200);
          swift_bridgeObjectRelease(v128[0], v80, v81, v82, v83, v84, v85, v86);
        }
        else
        {
          v88 = v59 + v58[10];
          v89 = *(BAEventReporter **)v88;
          v90 = (const char *)*(unsigned __int8 *)(v88 + 8);
          v91 = *(BAEventReporter **)(v59 + 8);
          sub_1D9754(*(_QWORD *)v59, v65);
          j__swift_retain(v89);
          v92 = (BAEventReporter *)sub_D548(v89, (char)v90);
          j__swift_release(v89, v90, v93, v94, v95, v96, v97, v98);
          if (v92)
          {
            v66(v92);
            swift_release(v92, v104, v105, v106, v107, v108, v109, v110);
          }
          sub_1D98B8((uint64_t)v66, v91, 0, v99, v100, v101, v102, v103);
        }
        sub_1DB2D0(v59);
        v111 = *(void (**)(char *, uint64_t))(v61 + 8);
        v111(v64, v62);
        return (_QWORD *)((uint64_t (*)(char *, uint64_t))v111)(v57, v62);
      }
    }
  }
  return result;
}

_QWORD *sub_1DB1B4(_BYTE *a1, const char *a2, void *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  char v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  _QWORD *result;
  char v19;

  if ((*a1 & 1) != 0)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564646968, 0xE600000000000000, 0x656C6269736976, 0xE700000000000000, 0);
    swift_bridgeObjectRelease((BAEventReporter *)0xE600000000000000, v9, v10, v11, v12, v13, v14, v15);
    if ((v8 & 1) == 0)
    {
      v16 = 0;
      return sub_1DAAF0(v16);
    }
  }
  else
  {
    swift_bridgeObjectRelease((BAEventReporter *)0xE700000000000000, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = sub_71B4(&qword_2A7388);
  result = (_QWORD *)State.wrappedValue.getter(v17);
  if (v19 != 1)
    return result;
  v16 = 1;
  return sub_1DAAF0(v16);
}

uint64_t sub_1DB26C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v2 = static Color.green.getter();
  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ExposureViewModifier(0) + 52));
  v5 = *v3;
  v4 = v3[1];
  v8[1] = v5;
  v8[2] = v4;
  v8[0] = v2;
  v6 = sub_71B4(&qword_2A7380);
  return State.wrappedValue.setter(v8, v6);
}

_QWORD *sub_1DB2D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v2 = sub_71B4(&qword_29F018);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v18 - v6;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = type metadata accessor for ExposureViewModifier(0);
  sub_3A82C((uint64_t)v7, (uint64_t)v5, &qword_29F018);
  v10 = sub_71B4(&qword_2A7298);
  State.wrappedValue.setter(v5, v10);
  sub_88F50((uint64_t)v7, &qword_29F018);
  v11 = sub_71B4(&qword_29EFF8);
  result = UserDefault.wrappedValue.getter(v20, v11);
  if (LOBYTE(v20[0]) == 1)
  {
    v13 = static Color.red.getter(result);
    v14 = (uint64_t *)(a1 + *(int *)(v9 + 52));
    v16 = *v14;
    v15 = v14[1];
    v20[0] = v16;
    v20[1] = v15;
    v19 = v13;
    v17 = sub_71B4(&qword_2A7380);
    return (_QWORD *)State.wrappedValue.setter(&v19, v17);
  }
  return result;
}

uint64_t sub_1DB428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ExposureViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DB470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ExposureViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DB4B4(uint64_t a1)
{
  return sub_1DB65C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1DA9D0);
}

uint64_t sub_1DB4C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int64_t v8;
  void *v9;
  BOOL v10;
  void *v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  const char *v30;
  void *v31;
  void *v32;
  int64_t v33;
  void *v34;
  BOOL v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  SEL v39;
  id v40;
  id v41;
  int64_t v42;
  id v43;
  BOOL v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  BAEventReporter **v48;
  SEL v49;
  id v50;
  id v51;
  int64_t v52;
  id v53;
  BOOL v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  int64_t v59;
  id v60;
  BOOL v61;
  id v62;

  v1 = (int *)type metadata accessor for ExposureViewModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_1D98B8(*(_QWORD *)(v0 + v4), *(BAEventReporter **)(v0 + v4 + 8), (void *)*(unsigned __int8 *)(v0 + v4 + 16), v7, v8, v9, v10, v11);
  swift_release(*(BAEventReporter **)(v0 + v4 + 32), v12, v13, v14, v15, v16, v17, v18);
  v19 = v0 + v4 + v1[6];
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  v22 = sub_71B4(&qword_2A7298);
  swift_release(*(BAEventReporter **)(v19 + *(int *)(v22 + 28)), v23, v24, v25, v26, v27, v28, v29);
  sub_DF70(*(id *)(v6 + v1[7]), *(_BYTE *)(v6 + v1[7] + 8));
  sub_D380(*(_QWORD *)(v6 + v1[8]), *(_BYTE *)(v6 + v1[8] + 8));
  v37 = v6 + v1[9];
  if ((*(_BYTE *)(v37 + 40) & 1) != 0)
  {
    if (*(_QWORD *)(v37 + 24))
      sub_7DAC((_QWORD *)v37);
  }
  else
  {
    swift_release(*(BAEventReporter **)v37, v30, v31, v32, v33, v34, v35, v36);
  }
  v38 = v3 | 7;
  j__swift_release(*(BAEventReporter **)(v6 + v1[10]), (SEL)*(unsigned __int8 *)(v6 + v1[10] + 8), v31, v32, v33, v34, v35, v36);
  swift_release(*(BAEventReporter **)(v6 + v1[11]), v39, v40, v41, v42, v43, v44, v45);
  v46 = v6 + v1[12];
  v47 = sub_71B4(&qword_29EFF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  v48 = (BAEventReporter **)(v6 + v1[13]);
  swift_release(*v48, v49, v50, v51, v52, v53, v54, v55);
  swift_release(v48[1], v56, v57, v58, v59, v60, v61, v62);
  return swift_deallocObject(v0, v4 + v5, v38);
}

uint64_t sub_1DB650(uint64_t a1)
{
  return sub_1DB65C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1DB1B4);
}

uint64_t sub_1DB65C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ExposureViewModifier(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

char *sub_1DB6A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_71B4(&qword_2A73A8);
      v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[40 * v8 + 32])
          memmove(v13, a4 + 32, 40 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1DBE14(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

BAEventReporter *sub_1DB7C8(BAEventReporter *result, int64_t a2, char a3, BAEventReporter *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t isa;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  size_t v16;
  Class *p_isa;
  BAEventReporter *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4[1].dataProviders;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    isa = (uint64_t)a4[1].super.isa;
    if (v11 <= isa)
      v13 = (uint64_t)a4[1].super.isa;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_71B4(&qword_2A7390);
      v15 = (BAEventReporter *)swift_allocObject(v14, 48 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v15[1].super.isa = (Class)isa;
      *(_QWORD *)v15[1].dataProviders = 2 * ((uint64_t)(v16 - 32) / 48);
      p_isa = &v15[2].super.isa;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = a4 + 2;
        if (v15 != a4 || p_isa >= &a4[3 * isa + 2].super.isa)
          memmove(p_isa, v18, 48 * isa);
        a4[1].super.isa = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = (BAEventReporter *)_swiftEmptyArrayStorage;
      p_isa = (Class *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1DC224(0, isa, (unint64_t)p_isa, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, p_isa, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

BAEventReporter *sub_1DB8EC(BAEventReporter *result, int64_t a2, char a3, BAEventReporter *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t isa;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  int64_t v16;
  uint64_t v17;
  Class *p_isa;
  BAEventReporter *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4[1].dataProviders;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    isa = (uint64_t)a4[1].super.isa;
    if (v11 <= isa)
      v13 = (uint64_t)a4[1].super.isa;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_71B4(&qword_2A7398);
      v15 = (BAEventReporter *)swift_allocObject(v14, (v13 << 6) | 0x20, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 + 31;
      v15[1].super.isa = (Class)isa;
      *(_QWORD *)v15[1].dataProviders = 2 * (v17 >> 6);
      p_isa = &v15[2].super.isa;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = (BAEventReporter *)_swiftEmptyArrayStorage;
      p_isa = (Class *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 2;
        if (v15 != a4 || p_isa >= &a4[4 * isa + 2].super.isa)
          memmove(p_isa, v19, isa << 6);
        a4[1].super.isa = 0;
        goto LABEL_24;
      }
    }
    sub_1DBF20(0, isa, (unint64_t)p_isa, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, p_isa, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

BAEventReporter *sub_1DB9F8(BAEventReporter *result, int64_t a2, char a3, BAEventReporter *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t isa;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  int64_t v16;
  uint64_t v17;
  Class *p_isa;
  BAEventReporter *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4[1].dataProviders;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    isa = (uint64_t)a4[1].super.isa;
    if (v11 <= isa)
      v13 = (uint64_t)a4[1].super.isa;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_71B4(&qword_2A73A0);
      v15 = (BAEventReporter *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      v15[1].super.isa = (Class)isa;
      *(_QWORD *)v15[1].dataProviders = 2 * (v17 >> 4);
      p_isa = &v15[2].super.isa;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = (BAEventReporter *)_swiftEmptyArrayStorage;
      p_isa = (Class *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 2;
        if (v15 != a4 || p_isa >= &a4[isa + 2].super.isa)
          memmove(p_isa, v19, 16 * isa);
        a4[1].super.isa = 0;
        goto LABEL_24;
      }
    }
    sub_1DC010(0, isa, (unint64_t)p_isa, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, p_isa, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

BAEventReporter *sub_1DBB04(BAEventReporter *result, int64_t a2, char a3, BAEventReporter *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t isa;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  int64_t v16;
  uint64_t v17;
  Class *p_isa;
  BAEventReporter *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4[1].dataProviders;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    isa = (uint64_t)a4[1].super.isa;
    if (v11 <= isa)
      v13 = (uint64_t)a4[1].super.isa;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_71B4((uint64_t *)&unk_2A0060);
      v15 = (BAEventReporter *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      v15[1].super.isa = (Class)isa;
      *(_QWORD *)v15[1].dataProviders = 2 * (v17 >> 4);
      p_isa = &v15[2].super.isa;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = (BAEventReporter *)_swiftEmptyArrayStorage;
      p_isa = (Class *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 2;
        if (v15 != a4 || p_isa >= &a4[isa + 2].super.isa)
          memmove(p_isa, v19, 16 * isa);
        a4[1].super.isa = 0;
        goto LABEL_24;
      }
    }
    sub_1DC118(0, isa, (unint64_t)p_isa, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, p_isa, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DBC10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1DBC38(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1DBC64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ExposureViewModifier(0) - 8) + 80);
  return sub_1DB26C(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1DBC90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

void sub_1DBCA0(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  swift_release(*(BAEventReporter **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1DBCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  int64_t v11;
  int64_t v12;
  id v13;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(BAEventReporter **)(v0 + v5), v7, v8, v9, v10, v11, v12, v13);
  if (*(_QWORD *)(v0 + v6 + 24))
    sub_7DAC((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v3 | 7);
}

uint64_t sub_1DBD54(uint64_t a1)
{
  _QWORD *v1;
  objc_class *v3;
  uint64_t v4;
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = (objc_class *)v1[2];
  v4 = v1[3];
  v5 = (objc_class *)v1[4];
  v6 = v1[5];
  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1D8680(a1, v1[6], (uint64_t)v1 + v8, *(BAEventReporter **)((char *)v1 + v9), (uint64_t)v1 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8), v3, v4, v5, v6);
}

uint64_t sub_1DBDE8(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

void sub_1DBE0C(uint64_t *a1, BAEventReporter *a2)
{
  uint64_t v2;

  sub_1CD810(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1DBE14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_71B4(&qword_2A73B0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1DBF20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1DC010(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_71B4(&qword_2A0330);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1DC118(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1DC208()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_1DC218(uint64_t a1)
{
  uint64_t *v1;

  sub_1D87E8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1DC224(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_71B4(&qword_2A6F00);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void destroy for ExposureViewModifier.ExposureHandlerKind(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  sub_1D98B8(*(_QWORD *)a1, *(BAEventReporter **)(a1 + 8), (void *)*(unsigned __int8 *)(a1 + 16), a4, a5, a6, a7, a8);
}

uint64_t _s13BookAnalytics20ExposureViewModifierV19ExposureHandlerKindOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1D9754(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ExposureViewModifier.ExposureHandlerKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  BAEventReporter *v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  BOOL v12;
  void *v13;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1D9754(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(BAEventReporter **)(a1 + 8);
  v8 = (void *)*(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1D98B8(v6, v7, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for ExposureViewModifier.ExposureHandlerKind(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  char v9;
  uint64_t v10;
  BAEventReporter *v11;
  void *v12;

  v9 = *(_BYTE *)(a2 + 16);
  v10 = *(_QWORD *)a1;
  v11 = *(BAEventReporter **)(a1 + 8);
  v12 = (void *)*(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v9;
  sub_1D98B8(v10, v11, v12, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExposureViewModifier.ExposureHandlerKind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExposureViewModifier.ExposureHandlerKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1DC4B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1DC4B8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ExposureViewModifier.ExposureHandlerKind()
{
  return &type metadata for ExposureViewModifier.ExposureHandlerKind;
}

unint64_t sub_1DC4D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2A73B8;
  if (!qword_2A73B8)
  {
    v1 = sub_679EC(&qword_2A7378);
    v2[0] = sub_F7668(&qword_2A73C0, &qword_2A7368, (const char *)&protocol conformance descriptor for SubscriptionView<A, B>);
    v2[1] = sub_F7668(&qword_2A73C8, &qword_2A73D0, (const char *)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_2A73B8);
  }
  return result;
}

uint64_t sub_1DC574(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A73D8, &enum case for SessionGroup.default(_:));
}

uint64_t static SeriesDetailsViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D10, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A73D8, a1);
}

uint64_t sub_1DC5B4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A73F0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SeriesDetailsViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D18, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A73F0, a1);
}

uint64_t SeriesDetailsViewEvent.exposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SeriesDetailsViewEvent.exposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t SeriesDetailsViewEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesDetailsViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A7480, (uint64_t)&nominal type descriptor for SeriesDetailsViewEvent);
}

uint64_t SeriesDetailsViewEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesDetailsViewEvent.seriesData.modify())()
{
  type metadata accessor for SeriesDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesDetailsViewEvent.altSeriesContentTypeExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 24);
  v4 = sub_71B4(&qword_2A7408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesDetailsViewEvent.altSeriesContentTypeExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 24);
  v4 = sub_71B4(&qword_2A7408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesDetailsViewEvent.altSeriesContentTypeExposureData.modify())()
{
  type metadata accessor for SeriesDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesDetailsViewEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 28);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesDetailsViewEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 28);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesDetailsViewEvent.linkData.modify())()
{
  type metadata accessor for SeriesDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesDetailsViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesDetailsViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesDetailsViewEvent.eventData.modify())()
{
  type metadata accessor for SeriesDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesDetailsViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesDetailsViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesDetailsViewEvent.timedData.modify())()
{
  type metadata accessor for SeriesDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesDetailsViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for SeriesDetailsViewEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_2A7408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v6, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v6, v15);
}

uint64_t SeriesDetailsViewEvent.Model.exposureData.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  return sub_40660(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t SeriesDetailsViewEvent.Model.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_WORD *)(v1 + 88);
  v5 = *(_BYTE *)(v1 + 90);
  v7 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 64);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 26) = v5;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t SeriesDetailsViewEvent.Model.altSeriesContentTypeExposureData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[14];
  v3 = v1[15];
  v4 = v1[16];
  v5 = v1[17];
  v6 = v1[18];
  v7 = v1[19];
  v8 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_1DCC08(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1DCC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a3 != 1)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

_QWORD *SeriesDetailsViewEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[19];

  sub_406FC(v1 + 168, (uint64_t)v4);
  sub_406FC((uint64_t)v4, a1);
  return sub_41240(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AF4C);
}

uint64_t SeriesDetailsViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesDetailsViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A7528, (uint64_t)&nominal type descriptor for SeriesDetailsViewEvent.Model);
}

uint64_t SeriesDetailsViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesDetailsViewEvent.Model(0) + 36);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesDetailsViewEvent.Model.init(exposureData:seriesData:altSeriesContentTypeExposureData:linkData:eventData:timedData:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v32[160];

  v27 = a1[1];
  v28 = *a1;
  v8 = *((_QWORD *)a1 + 6);
  v9 = *((_QWORD *)a1 + 7);
  v10 = *a2;
  v11 = *((_BYTE *)a2 + 8);
  v12 = a2[2];
  v13 = *((_WORD *)a2 + 12);
  v14 = *((_BYTE *)a2 + 26);
  v15 = a2[4];
  v16 = a2[5];
  v25 = *a3;
  v26 = a1[2];
  v23 = a3[2];
  v24 = a3[1];
  v29 = *((_QWORD *)a3 + 6);
  sub_406FC(a4, (uint64_t)v32);
  *(_OWORD *)a7 = v28;
  *(_OWORD *)(a7 + 16) = v27;
  *(_OWORD *)(a7 + 32) = v26;
  *(_QWORD *)(a7 + 48) = v8;
  *(_QWORD *)(a7 + 56) = v9;
  *(_QWORD *)(a7 + 64) = v10;
  *(_BYTE *)(a7 + 72) = v11;
  *(_QWORD *)(a7 + 80) = v12;
  *(_WORD *)(a7 + 88) = v13;
  *(_BYTE *)(a7 + 90) = v14;
  *(_QWORD *)(a7 + 96) = v15;
  *(_QWORD *)(a7 + 104) = v16;
  *(_OWORD *)(a7 + 112) = v25;
  *(_OWORD *)(a7 + 128) = v24;
  *(_OWORD *)(a7 + 144) = v23;
  *(_QWORD *)(a7 + 160) = v29;
  sub_406FC((uint64_t)v32, a7 + 168);
  v17 = type metadata accessor for SeriesDetailsViewEvent.Model(0);
  v18 = a7 + *(int *)(v17 + 32);
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a5, v19);
  v20 = a7 + *(int *)(v17 + 36);
  v21 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a6, v21);
}

uint64_t sub_1DCE88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DCEC0 + 4 * byte_21B770[*v0]))(0x657275736F707865, 0xEC00000061746144);
}

uint64_t sub_1DCEC0()
{
  return 0x6144736569726573;
}

unint64_t sub_1DCEDC()
{
  return 0xD000000000000020;
}

uint64_t sub_1DCEF8()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_1DCF10()
{
  return 0x746144746E657665;
}

uint64_t sub_1DCF3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1DFA10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DCF60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1DD2C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1DCF88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1DD2C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SeriesDetailsViewEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[152];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  _OWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  v4 = sub_71B4(&qword_2A7410);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v8 = a1[4];
  sub_7988(a1, v9);
  v10 = sub_1DD2C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SeriesDetailsViewEvent.Model.CodingKeys, &type metadata for SeriesDetailsViewEvent.Model.CodingKeys, v10, v9, v8);
  v11 = v2[1];
  v39 = *v2;
  v40 = v11;
  v12 = v2[3];
  v41 = v2[2];
  v42 = v12;
  v38[0] = 0;
  v13 = sub_40CF4();
  v14 = v46;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, v38, v4, &type metadata for ExposureData, v13);
  if (v14)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v15 = v5;
  v16 = *((_BYTE *)v2 + 72);
  v17 = *((_QWORD *)v2 + 10);
  v18 = *((_WORD *)v2 + 44);
  v19 = *((_BYTE *)v2 + 90);
  *(_QWORD *)&v39 = *((_QWORD *)v2 + 8);
  BYTE8(v39) = v16;
  *(_QWORD *)&v40 = v17;
  WORD4(v40) = v18;
  BYTE10(v40) = v19;
  v41 = v2[6];
  v38[0] = 1;
  v20 = sub_10AD0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, v38, v4, &type metadata for SeriesData, v20);
  v21 = *((_QWORD *)v2 + 20);
  v22 = v2[8];
  v44[0] = v2[7];
  v44[1] = v22;
  v44[2] = v2[9];
  v45 = v21;
  v43 = 2;
  v23 = sub_C7F10();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v44, &v43, v4, &type metadata for AltSeriesContentTypeExposureData, v23);
  sub_406FC((uint64_t)v2 + 168, (uint64_t)&v39);
  sub_406FC((uint64_t)&v39, (uint64_t)v38);
  HIBYTE(v37) = 3;
  v24 = sub_1B7F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v38, (char *)&v37 + 7, v4, &type metadata for LinkData, v24);
  v26 = type metadata accessor for SeriesDetailsViewEvent.Model(0);
  v27 = (uint64_t)v2 + *(int *)(v26 + 32);
  v38[0] = 4;
  v28 = v7;
  v29 = v4;
  v30 = type metadata accessor for EventData(0);
  v31 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v32 = v27;
  v33 = v29;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v32, v38, v29, v30, v31);
  v34 = (uint64_t)v2 + *(int *)(v26 + 36);
  v38[0] = 5;
  v35 = type metadata accessor for TimedData(0);
  v36 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v34, v38, v33, v35, v36);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v28, v33);
}

unint64_t sub_1DD2C0()
{
  unint64_t result;

  result = qword_2A7418;
  if (!qword_2A7418)
  {
    result = swift_getWitnessTable(byte_21B9A4, &type metadata for SeriesDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7418);
  }
  return result;
}

void SeriesDetailsViewEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  char v52;
  _BYTE v53[159];
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v44 = a2;
  v45 = type metadata accessor for TimedData(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v46 = (uint64_t *)((char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_71B4(&qword_2A7420);
  v7 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeriesDetailsViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v51 = a1;
  sub_7988(a1, v13);
  v15 = sub_1DD2C0();
  v50 = v9;
  v16 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesDetailsViewEvent.Model.CodingKeys, &type metadata for SeriesDetailsViewEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(v51);
  }
  else
  {
    v42 = v6;
    v17 = v7;
    v59 = v10;
    v18 = (uint64_t)v12;
    v19 = v48;
    v53[0] = 0;
    v20 = sub_411FC();
    v21 = v49;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for ExposureData, v53, v49, &type metadata for ExposureData, v20);
    v22 = v56;
    *(_OWORD *)v18 = v55;
    *(_OWORD *)(v18 + 16) = v22;
    v23 = v58;
    *(_OWORD *)(v18 + 32) = v57;
    *(_OWORD *)(v18 + 48) = v23;
    v53[0] = 1;
    v24 = sub_10EA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for SeriesData, v53, v21, &type metadata for SeriesData, v24);
    v25 = BYTE8(v55);
    v26 = v56;
    v27 = WORD4(v56);
    v28 = BYTE10(v56);
    *(_QWORD *)(v18 + 64) = v55;
    *(_BYTE *)(v18 + 72) = v25;
    *(_QWORD *)(v18 + 80) = v26;
    *(_WORD *)(v18 + 88) = v27;
    *(_BYTE *)(v18 + 90) = v28;
    *(_OWORD *)(v18 + 96) = v57;
    v53[0] = 2;
    v29 = sub_C7EC8();
    v41 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for AltSeriesContentTypeExposureData, v53, v21, &type metadata for AltSeriesContentTypeExposureData, v29);
    v30 = v19;
    v31 = v58;
    v32 = v56;
    *(_OWORD *)(v18 + 112) = v55;
    *(_OWORD *)(v18 + 128) = v32;
    *(_OWORD *)(v18 + 144) = v57;
    *(_QWORD *)(v18 + 160) = v31;
    v54 = 3;
    v33 = sub_1C06C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for LinkData, &v54, v21, &type metadata for LinkData, v33);
    sub_406FC((uint64_t)&v55, (uint64_t)v53);
    sub_406FC((uint64_t)v53, v18 + 168);
    v52 = 4;
    v34 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v35 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v19, &v52, v21, v19, v34);
    v36 = v59;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v47 + 32))(v18 + *(int *)(v59 + 32), v35, v30);
    v52 = 5;
    v37 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v38 = v21;
    v39 = v45;
    v40 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v46, v45, &v52, v38, v45, v37);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v50, v49);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v43 + 32))(v18 + *(int *)(v36 + 36), v40, v39);
    sub_1DD8CC(v18, v44);
    sub_7DAC(v51);
    sub_1DD910(v18);
  }
}

uint64_t sub_1DD88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a3 != 1)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_1DD8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesDetailsViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DD910(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeriesDetailsViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1DD94C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SeriesDetailsViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1DD960(_QWORD *a1)
{
  return SeriesDetailsViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_1DD974@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D10, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A73D8, (uint64_t)sub_1DC574, a1);
}

uint64_t sub_1DD998@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D18, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A73F0, (uint64_t)sub_1DC5B4, a1);
}

uint64_t sub_1DD9BC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_2A7408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v7, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v7, v16);
}

uint64_t *initializeBufferWithCopyOfBuffer for SeriesDetailsViewEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = sub_71B4(&qword_297A28);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A7408);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for SeriesDetailsViewEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A7408);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for SeriesDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A7408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t assignWithCopy for SeriesDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A7408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for SeriesDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A7408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for SeriesDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A7408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesDetailsViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1DE2C0);
}

uint64_t sub_1DE2C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_71B4(&qword_297A28);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296310);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A7408);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296A10);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v8 = sub_71B4(&qword_295D78);
            v12 = *(_QWORD *)(v8 - 8);
            v13 = a3[9];
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SeriesDetailsViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1DE3E8);
}

uint64_t sub_1DE3E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_71B4(&qword_297A28);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296310);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A7408);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296A10);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v10 = sub_71B4(&qword_295D78);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[9];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1DE50C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];

  sub_B9C8(319, (unint64_t *)&unk_297AC0, (uint64_t (*)(void))sub_411FC, (uint64_t (*)(void))sub_40CF4, (uint64_t)&type metadata for ExposureData);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2A7490, (uint64_t (*)(void))sub_C7EC8, (uint64_t (*)(void))sub_C7F10, (uint64_t)&type metadata for AltSeriesContentTypeExposureData);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_87D8(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesDetailsViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = a2[1];
    if (v7)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v8;
      v9 = a2[5];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v9;
      v10 = a2[7];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v10;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      v12 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      v13 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v13;
    }
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_WORD *)(a1 + 89) = *(_WORD *)((char *)a2 + 89);
    v14 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v14;
    v15 = a2[16];
    swift_bridgeObjectRetain(v14);
    if (v15 == 1)
    {
      v16 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v16;
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_QWORD *)(a1 + 160) = a2[20];
      v17 = a2[22];
      if (v17)
      {
LABEL_8:
        *(_QWORD *)(a1 + 168) = a2[21];
        *(_QWORD *)(a1 + 176) = v17;
        v18 = a2[24];
        *(_QWORD *)(a1 + 184) = a2[23];
        *(_QWORD *)(a1 + 192) = v18;
        v19 = a2[26];
        *(_QWORD *)(a1 + 200) = a2[25];
        *(_QWORD *)(a1 + 208) = v19;
        *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
        v20 = a2[29];
        *(_QWORD *)(a1 + 224) = a2[28];
        *(_QWORD *)(a1 + 232) = v20;
        v42 = v6;
        v21 = a2[31];
        *(_QWORD *)(a1 + 240) = a2[30];
        *(_QWORD *)(a1 + 248) = v21;
        v22 = a2[33];
        *(_QWORD *)(a1 + 256) = a2[32];
        *(_QWORD *)(a1 + 264) = v22;
        v23 = a2[35];
        *(_QWORD *)(a1 + 272) = a2[34];
        *(_QWORD *)(a1 + 280) = v23;
        v24 = a2[37];
        *(_QWORD *)(a1 + 288) = a2[36];
        *(_QWORD *)(a1 + 296) = v24;
        v25 = a2[39];
        *(_QWORD *)(a1 + 304) = a2[38];
        *(_QWORD *)(a1 + 312) = v25;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        v26 = v21;
        v6 = v42;
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
LABEL_11:
        v33 = *(int *)(v6 + 32);
        v34 = a1 + v33;
        v35 = (uint64_t)a2 + v33;
        v36 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        v37 = *(int *)(v6 + 36);
        v38 = a1 + v37;
        v39 = (uint64_t)a2 + v37;
        v40 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
        return a1;
      }
    }
    else
    {
      *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
      *(_QWORD *)(a1 + 120) = a2[15];
      *(_QWORD *)(a1 + 128) = v15;
      v27 = a2[18];
      *(_QWORD *)(a1 + 136) = a2[17];
      *(_QWORD *)(a1 + 144) = v27;
      v28 = a2[20];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v28;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      v17 = a2[22];
      if (v17)
        goto LABEL_8;
    }
    v29 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 280) = v29;
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_QWORD *)(a1 + 312) = a2[39];
    v30 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = v30;
    v31 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v31;
    v32 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(a1 + 184) = v32;
    goto LABEL_11;
  }
  v11 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v11);
  return a1;
}

uint64_t destroy for SeriesDetailsViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[3]);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[7]);
  }
  swift_bridgeObjectRelease(a1[13]);
  v5 = a1[16];
  if (v5 != 1)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[20]);
  }
  v6 = a1[22];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[33]);
    swift_bridgeObjectRelease(a1[35]);
    swift_bridgeObjectRelease(a1[37]);
    swift_bridgeObjectRelease(a1[39]);
  }
  v7 = (char *)a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)a1 + *(int *)(a2 + 36);
  v10 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for SeriesDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v8;
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v9;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain(v12);
  if (v13 != 1)
  {
    *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v13;
    v25 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v25;
    v26 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v26;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    v15 = *(_QWORD *)(a2 + 176);
    if (v15)
      goto LABEL_6;
LABEL_8:
    v27 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v27;
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    v28 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v28;
    v29 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v29;
    v30 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v30;
    goto LABEL_9;
  }
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v15 = *(_QWORD *)(a2 + 176);
  if (!v15)
    goto LABEL_8;
LABEL_6:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v17;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v18;
  v40 = a3;
  v19 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v19;
  v20 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v20;
  v21 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v21;
  v22 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v22;
  v23 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v23;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  v24 = v19;
  a3 = v40;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
LABEL_9:
  v31 = *(int *)(a3 + 32);
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = *(int *)(a3 + 36);
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  return a1;
}

uint64_t assignWithCopy for SeriesDetailsViewEvent.Model(uint64_t a1, __int128 *a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  BAEventReporter *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  BAEventReporter *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  int64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  BAEventReporter *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  int64_t v59;
  int64_t v60;
  id v61;
  _OWORD *v62;
  __int128 *v63;
  BAEventReporter *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  uint64_t v83;
  BAEventReporter *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  int64_t v89;
  int64_t v90;
  id v91;
  uint64_t v92;
  BAEventReporter *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  int64_t v98;
  int64_t v99;
  id v100;
  _OWORD *v101;
  _OWORD *v102;
  BAEventReporter *v103;
  uint64_t v104;
  uint64_t v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  int64_t v110;
  int64_t v111;
  id v112;
  uint64_t v113;
  BAEventReporter *v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  int64_t v119;
  int64_t v120;
  id v121;
  uint64_t v122;
  BAEventReporter *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  int64_t v128;
  int64_t v129;
  id v130;
  uint64_t v131;
  BAEventReporter *v132;
  SEL v133;
  id v134;
  id v135;
  id v136;
  int64_t v137;
  int64_t v138;
  id v139;
  uint64_t v140;
  BAEventReporter *v141;
  SEL v142;
  id v143;
  id v144;
  id v145;
  int64_t v146;
  int64_t v147;
  id v148;
  uint64_t v149;
  BAEventReporter *v150;
  SEL v151;
  id v152;
  id v153;
  id v154;
  int64_t v155;
  int64_t v156;
  id v157;
  uint64_t v158;
  BAEventReporter *v159;
  SEL v160;
  id v161;
  id v162;
  id v163;
  int64_t v164;
  int64_t v165;
  id v166;
  uint64_t v167;
  BAEventReporter *v168;
  SEL v169;
  id v170;
  id v171;
  id v172;
  int64_t v173;
  int64_t v174;
  id v175;
  uint64_t v176;
  BAEventReporter *v177;
  SEL v178;
  id v179;
  id v180;
  id v181;
  int64_t v182;
  int64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v218;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      v16 = *((_QWORD *)a2 + 3);
      v17 = *(BAEventReporter **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      v25 = *((_QWORD *)a2 + 5);
      v26 = *(BAEventReporter **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      v34 = *((_QWORD *)a2 + 7);
      v35 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      sub_4294C((_QWORD *)a1);
      v47 = a2[3];
      v49 = *a2;
      v48 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v47;
      *(_OWORD *)a1 = v49;
      *(_OWORD *)(a1 + 16) = v48;
    }
  }
  else if (v7)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v43 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    v44 = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 24) = v44;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    v45 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 40) = v45;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    v46 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 56) = v46;
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
  }
  else
  {
    v50 = *a2;
    v51 = a2[1];
    v52 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v52;
    *(_OWORD *)a1 = v50;
    *(_OWORD *)(a1 + 16) = v51;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v53 = *((_QWORD *)a2 + 13);
  v54 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
  v62 = (_OWORD *)(a1 + 112);
  v63 = a2 + 7;
  v64 = *(BAEventReporter **)(a1 + 128);
  v65 = *((_QWORD *)a2 + 16);
  if (v64 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v65 == 1)
    {
      v66 = *v63;
      v67 = a2[8];
      v68 = a2[9];
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      *(_OWORD *)(a1 + 128) = v67;
      *(_OWORD *)(a1 + 144) = v68;
      *v62 = v66;
    }
    else
    {
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      v72 = *((_QWORD *)a2 + 16);
      *(_QWORD *)(a1 + 128) = v72;
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      v73 = *((_QWORD *)a2 + 18);
      *(_QWORD *)(a1 + 144) = v73;
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      v74 = *((_QWORD *)a2 + 20);
      *(_QWORD *)(a1 + 160) = v74;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v74);
    }
  }
  else if (v65 == 1)
  {
    sub_1DF28C((_QWORD *)(a1 + 112));
    v70 = a2[8];
    v69 = a2[9];
    v71 = *v63;
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v70;
    *(_OWORD *)(a1 + 144) = v69;
    *v62 = v71;
  }
  else
  {
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    v75 = *((_QWORD *)a2 + 16);
    *(_QWORD *)(a1 + 128) = v75;
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRelease(v64, v76, v77, v78, v79, v80, v81, v82);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    v83 = *((_QWORD *)a2 + 18);
    v84 = *(BAEventReporter **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v83;
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRelease(v84, v85, v86, v87, v88, v89, v90, v91);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    v92 = *((_QWORD *)a2 + 20);
    v93 = *(BAEventReporter **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v92;
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  v101 = (_OWORD *)(a1 + 168);
  v102 = (__int128 *)((char *)a2 + 168);
  v103 = *(BAEventReporter **)(a1 + 176);
  v104 = *((_QWORD *)a2 + 22);
  if (v103)
  {
    if (v104)
    {
      *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
      v105 = *((_QWORD *)a2 + 22);
      *(_QWORD *)(a1 + 176) = v105;
      swift_bridgeObjectRetain(v105);
      swift_bridgeObjectRelease(v103, v106, v107, v108, v109, v110, v111, v112);
      *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
      v113 = *((_QWORD *)a2 + 24);
      v114 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v113;
      swift_bridgeObjectRetain(v113);
      swift_bridgeObjectRelease(v114, v115, v116, v117, v118, v119, v120, v121);
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
      v122 = *((_QWORD *)a2 + 26);
      v123 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v122;
      swift_bridgeObjectRetain(v122);
      swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
      *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
      v131 = *((_QWORD *)a2 + 29);
      v132 = *(BAEventReporter **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v131;
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRelease(v132, v133, v134, v135, v136, v137, v138, v139);
      *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
      v140 = *((_QWORD *)a2 + 31);
      v141 = *(BAEventReporter **)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v140;
      swift_bridgeObjectRetain(v140);
      swift_bridgeObjectRelease(v141, v142, v143, v144, v145, v146, v147, v148);
      *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
      v149 = *((_QWORD *)a2 + 33);
      v150 = *(BAEventReporter **)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v149;
      swift_bridgeObjectRetain(v149);
      swift_bridgeObjectRelease(v150, v151, v152, v153, v154, v155, v156, v157);
      *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
      v158 = *((_QWORD *)a2 + 35);
      v159 = *(BAEventReporter **)(a1 + 280);
      *(_QWORD *)(a1 + 280) = v158;
      swift_bridgeObjectRetain(v158);
      swift_bridgeObjectRelease(v159, v160, v161, v162, v163, v164, v165, v166);
      *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
      v167 = *((_QWORD *)a2 + 37);
      v168 = *(BAEventReporter **)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v167;
      swift_bridgeObjectRetain(v167);
      swift_bridgeObjectRelease(v168, v169, v170, v171, v172, v173, v174, v175);
      *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
      v176 = *((_QWORD *)a2 + 39);
      v177 = *(BAEventReporter **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v176;
      swift_bridgeObjectRetain(v176);
      swift_bridgeObjectRelease(v177, v178, v179, v180, v181, v182, v183, v184);
    }
    else
    {
      sub_1E060((_QWORD *)(a1 + 168));
      v195 = *(__int128 *)((char *)a2 + 184);
      *v101 = *v102;
      *(_OWORD *)(a1 + 184) = v195;
      v196 = *(__int128 *)((char *)a2 + 248);
      v198 = *(__int128 *)((char *)a2 + 200);
      v197 = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 248) = v196;
      *(_OWORD *)(a1 + 200) = v198;
      *(_OWORD *)(a1 + 216) = v197;
      v200 = *(__int128 *)((char *)a2 + 280);
      v199 = *(__int128 *)((char *)a2 + 296);
      v201 = *(__int128 *)((char *)a2 + 264);
      *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
      *(_OWORD *)(a1 + 280) = v200;
      *(_OWORD *)(a1 + 296) = v199;
      *(_OWORD *)(a1 + 264) = v201;
    }
  }
  else if (v104)
  {
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    v185 = *((_QWORD *)a2 + 22);
    *(_QWORD *)(a1 + 176) = v185;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    v186 = *((_QWORD *)a2 + 24);
    *(_QWORD *)(a1 + 192) = v186;
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    v187 = *((_QWORD *)a2 + 26);
    *(_QWORD *)(a1 + 208) = v187;
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
    v188 = *((_QWORD *)a2 + 29);
    *(_QWORD *)(a1 + 232) = v188;
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    v218 = a3;
    v189 = *((_QWORD *)a2 + 31);
    *(_QWORD *)(a1 + 248) = v189;
    *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
    v190 = *((_QWORD *)a2 + 33);
    *(_QWORD *)(a1 + 264) = v190;
    *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
    v191 = *((_QWORD *)a2 + 35);
    *(_QWORD *)(a1 + 280) = v191;
    *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
    v192 = *((_QWORD *)a2 + 37);
    *(_QWORD *)(a1 + 296) = v192;
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
    v193 = *((_QWORD *)a2 + 39);
    *(_QWORD *)(a1 + 312) = v193;
    swift_bridgeObjectRetain(v185);
    swift_bridgeObjectRetain(v186);
    swift_bridgeObjectRetain(v187);
    swift_bridgeObjectRetain(v188);
    v194 = v189;
    a3 = v218;
    swift_bridgeObjectRetain(v194);
    swift_bridgeObjectRetain(v190);
    swift_bridgeObjectRetain(v191);
    swift_bridgeObjectRetain(v192);
    swift_bridgeObjectRetain(v193);
  }
  else
  {
    v202 = *(__int128 *)((char *)a2 + 184);
    *v101 = *v102;
    *(_OWORD *)(a1 + 184) = v202;
    v203 = *(__int128 *)((char *)a2 + 200);
    v204 = *(__int128 *)((char *)a2 + 216);
    v205 = *(__int128 *)((char *)a2 + 248);
    *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
    *(_OWORD *)(a1 + 248) = v205;
    *(_OWORD *)(a1 + 200) = v203;
    *(_OWORD *)(a1 + 216) = v204;
    v206 = *(__int128 *)((char *)a2 + 264);
    v207 = *(__int128 *)((char *)a2 + 280);
    v208 = *(__int128 *)((char *)a2 + 296);
    *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
    *(_OWORD *)(a1 + 280) = v207;
    *(_OWORD *)(a1 + 296) = v208;
    *(_OWORD *)(a1 + 264) = v206;
  }
  v209 = *(int *)(a3 + 32);
  v210 = a1 + v209;
  v211 = (uint64_t)a2 + v209;
  v212 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v212 - 8) + 24))(v210, v211, v212);
  v213 = *(int *)(a3 + 36);
  v214 = a1 + v213;
  v215 = (uint64_t)a2 + v213;
  v216 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v216 - 8) + 24))(v214, v215, v216);
  return a1;
}

_QWORD *sub_1DF28C(_QWORD *a1)
{
  destroy for AltSeriesContentTypeExposureData(a1);
  return a1;
}

uint64_t initializeWithTake for SeriesDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v13 = *(_OWORD *)(a2 + 296);
  v14 = *(_OWORD *)(a2 + 264);
  v15 = *(int *)(a3 + 32);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v13;
  *(_OWORD *)(a1 + 264) = v14;
  v18 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = *(int *)(a3 + 36);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for SeriesDetailsViewEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  BAEventReporter *v43;
  const char *v44;
  void *v45;
  void *v46;
  void *v47;
  int64_t v48;
  int64_t v49;
  void *v50;
  BAEventReporter *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  BAEventReporter *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  BAEventReporter *v72;
  uint64_t v73;
  uint64_t v74;
  BAEventReporter *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  uint64_t v83;
  BAEventReporter *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  int64_t v89;
  int64_t v90;
  id v91;
  uint64_t v92;
  BAEventReporter *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  int64_t v98;
  int64_t v99;
  id v100;
  uint64_t v101;
  BAEventReporter *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  int64_t v107;
  int64_t v108;
  id v109;
  uint64_t v110;
  BAEventReporter *v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  int64_t v116;
  int64_t v117;
  id v118;
  uint64_t v119;
  BAEventReporter *v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  int64_t v125;
  int64_t v126;
  id v127;
  uint64_t v128;
  BAEventReporter *v129;
  SEL v130;
  id v131;
  id v132;
  id v133;
  int64_t v134;
  int64_t v135;
  id v136;
  uint64_t v137;
  BAEventReporter *v138;
  SEL v139;
  id v140;
  id v141;
  id v142;
  int64_t v143;
  int64_t v144;
  id v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if (v12)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v12;
      swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *(BAEventReporter **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v13;
      swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
      v22 = *(_QWORD *)(a2 + 40);
      v23 = *(BAEventReporter **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v22;
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      v31 = *(_QWORD *)(a2 + 56);
      v32 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v31;
      swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_6;
    }
    sub_4294C((_QWORD *)a1);
  }
  v40 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v40;
  v41 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v41;
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  v42 = *(_QWORD *)(a2 + 104);
  v43 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v42;
  swift_bridgeObjectRelease(v43, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v51 = *(BAEventReporter **)(a1 + 128);
  if (v51 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
LABEL_9:
    v53 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v53;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    goto LABEL_11;
  }
  v52 = *(_QWORD *)(a2 + 128);
  if (v52 == 1)
  {
    sub_1DF28C((_QWORD *)(a1 + 112));
    goto LABEL_9;
  }
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v52;
  swift_bridgeObjectRelease(v51, v44, v45, v46, v47, v48, v49, v50);
  v54 = *(_QWORD *)(a2 + 144);
  v55 = *(BAEventReporter **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v54;
  swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
  v63 = *(_QWORD *)(a2 + 160);
  v64 = *(BAEventReporter **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v63;
  swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
LABEL_11:
  v72 = *(BAEventReporter **)(a1 + 176);
  if (!v72)
  {
LABEL_15:
    v146 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v146;
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    v147 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v147;
    v148 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v148;
    v149 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v149;
    goto LABEL_16;
  }
  v73 = *(_QWORD *)(a2 + 176);
  if (!v73)
  {
    sub_1E060((_QWORD *)(a1 + 168));
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v73;
  swift_bridgeObjectRelease(v72, v44, v45, v46, v47, v48, v49, v50);
  v74 = *(_QWORD *)(a2 + 192);
  v75 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v74;
  swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
  v83 = *(_QWORD *)(a2 + 208);
  v84 = *(BAEventReporter **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v83;
  swift_bridgeObjectRelease(v84, v85, v86, v87, v88, v89, v90, v91);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v92 = *(_QWORD *)(a2 + 232);
  v93 = *(BAEventReporter **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v92;
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  v101 = *(_QWORD *)(a2 + 248);
  v102 = *(BAEventReporter **)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v101;
  swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
  v110 = *(_QWORD *)(a2 + 264);
  v111 = *(BAEventReporter **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v110;
  swift_bridgeObjectRelease(v111, v112, v113, v114, v115, v116, v117, v118);
  v119 = *(_QWORD *)(a2 + 280);
  v120 = *(BAEventReporter **)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v119;
  swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
  v128 = *(_QWORD *)(a2 + 296);
  v129 = *(BAEventReporter **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v128;
  swift_bridgeObjectRelease(v129, v130, v131, v132, v133, v134, v135, v136);
  v137 = *(_QWORD *)(a2 + 312);
  v138 = *(BAEventReporter **)(a1 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v137;
  swift_bridgeObjectRelease(v138, v139, v140, v141, v142, v143, v144, v145);
LABEL_16:
  v150 = a3[8];
  v151 = a1 + v150;
  v152 = a2 + v150;
  v153 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 40))(v151, v152, v153);
  v154 = a3[9];
  v155 = a1 + v154;
  v156 = a2 + v154;
  v157 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 40))(v155, v156, v157);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1DF66C);
}

uint64_t sub_1DF66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 32);
    }
    else
    {
      v11 = type metadata accessor for TimedData(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1DF724);
}

uint64_t sub_1DF724(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1DF7C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = "@";
  v5[1] = &unk_21B898;
  v5[2] = &unk_21B8B0;
  v5[3] = &unk_21B8C8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeriesDetailsViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1DF8B8 + 4 * byte_21B77B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1DF8EC + 4 * byte_21B776[v4]))();
}

uint64_t sub_1DF8EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DF8F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DF8FCLL);
  return result;
}

uint64_t sub_1DF908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DF910);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1DF914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DF91C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesDetailsViewEvent.Model.CodingKeys()
{
  return &type metadata for SeriesDetailsViewEvent.Model.CodingKeys;
}

unint64_t sub_1DF93C()
{
  unint64_t result;

  result = qword_2A7570;
  if (!qword_2A7570)
  {
    result = swift_getWitnessTable(byte_21B97C, &type metadata for SeriesDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7570);
  }
  return result;
}

unint64_t sub_1DF984()
{
  unint64_t result;

  result = qword_2A7578;
  if (!qword_2A7578)
  {
    result = swift_getWitnessTable(byte_21B8EC, &type metadata for SeriesDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7578);
  }
  return result;
}

unint64_t sub_1DF9CC()
{
  unint64_t result;

  result = qword_2A7580;
  if (!qword_2A7580)
  {
    result = swift_getWitnessTable(byte_21B914, &type metadata for SeriesDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7580);
  }
  return result;
}

uint64_t sub_1DFA10(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x657275736F707865 && a2 == 0xEC00000061746144)
  {
    v5 = 0xEC00000061746144;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000020)
  {
    v8 = 0x8000000000222A90;
    if (a2 == 0x8000000000222A90)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000000222A90, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void static NotificationOptInLocationData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1DFD18@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1DFD84 + 4 * byte_21BA04[a1]))(0x6553656369766564);
}

uint64_t sub_1DFD84(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6553656369766564 && v1 == 0xEE0073676E697474)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6553656369766564, 0xEE0073676E697474, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEE0073676E697474);
  return v2 & 1;
}

uint64_t sub_1DFE38()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1DFE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1DFEE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E0030();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1DFF0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E0030();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NotificationOptInLocationData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A7588);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1E0030();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationOptInLocationData.CodingKeys, &type metadata for NotificationOptInLocationData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1E0074();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for Location, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1E0030()
{
  unint64_t result;

  result = qword_2A7590;
  if (!qword_2A7590)
  {
    result = swift_getWitnessTable(asc_21BBC4, &type metadata for NotificationOptInLocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7590);
  }
  return result;
}

unint64_t sub_1E0074()
{
  unint64_t result;

  result = qword_2A7598;
  if (!qword_2A7598)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Location, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2A7598);
  }
  return result;
}

uint64_t NotificationOptInLocationData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A75A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1E0030();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationOptInLocationData.CodingKeys, &type metadata for NotificationOptInLocationData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1E01D4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Location, v13, v5, &type metadata for Location, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_1E01D4()
{
  unint64_t result;

  result = qword_2A75A8;
  if (!qword_2A75A8)
  {
    result = swift_getWitnessTable("Ŕ\a", &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2A75A8);
  }
  return result;
}

uint64_t sub_1E0220@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NotificationOptInLocationData.init(from:)(a1, a2);
}

uint64_t sub_1E0234(_QWORD *a1)
{
  return NotificationOptInLocationData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for NotificationOptInLocationData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1E0294 + 4 * byte_21BA0D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1E02C8 + 4 * byte_21BA08[v4]))();
}

uint64_t sub_1E02C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E02D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E02D8);
  return result;
}

uint64_t sub_1E02E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E02ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1E02F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E02F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationOptInLocationData()
{
  return &type metadata for NotificationOptInLocationData;
}

uint64_t storeEnumTagSinglePayload for NotificationOptInLocationData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1E0354 + 4 * byte_21BA12[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1E0374 + 4 * byte_21BA17[v4]))();
}

_BYTE *sub_1E0354(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1E0374(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1E037C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1E0384(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1E038C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1E0394(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotificationOptInLocationData.CodingKeys()
{
  return &type metadata for NotificationOptInLocationData.CodingKeys;
}

unint64_t sub_1E03B4()
{
  unint64_t result;

  result = qword_2A75B0;
  if (!qword_2A75B0)
  {
    result = swift_getWitnessTable(asc_21BB9C, &type metadata for NotificationOptInLocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A75B0);
  }
  return result;
}

unint64_t sub_1E03FC()
{
  unint64_t result;

  result = qword_2A75B8;
  if (!qword_2A75B8)
  {
    result = swift_getWitnessTable(byte_21BB0C, &type metadata for NotificationOptInLocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A75B8);
  }
  return result;
}

unint64_t sub_1E0444()
{
  unint64_t result;

  result = qword_2A75C0;
  if (!qword_2A75C0)
  {
    result = swift_getWitnessTable(byte_21BB34, &type metadata for NotificationOptInLocationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A75C0);
  }
  return result;
}

void BATracker.transaction(_:)(objc_class *a1, uint64_t a2)
{
  BAEventReporter *v4;
  SEL v5;
  id v6;
  id v7;
  int64_t v8;
  id v9;
  BOOL v10;
  id v11;

  v4 = (BAEventReporter *)swift_allocObject(&unk_28C868, 32, 7);
  v4[1].super.isa = a1;
  *(_QWORD *)v4[1].dataProviders = a2;
  swift_retain(a2);
  Tracker.transaction(block:)(sub_12EFF8, v4);
  swift_release(v4, v5, v6, v7, v8, v9, v10, v11);
}

Swift::String_optional __swiftcall BATracker.contentPrivateID(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  Swift::String_optional result;

  v1 = sub_1E050C(a1._countAndFlagsBits, (uint64_t)a1._object, (SEL *)&selRef_contentPrivateIDForContentID_);
  result.value._object = v2;
  result.value._countAndFlagsBits = (uint64_t)v1;
  return result;
}

Swift::String_optional __swiftcall BATracker.contentUserID(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  Swift::String_optional result;

  v1 = sub_1E050C(a1._countAndFlagsBits, (uint64_t)a1._object, (SEL *)&selRef_contentUserIDForContentID_);
  result.value._object = v2;
  result.value._countAndFlagsBits = (uint64_t)v1;
  return result;
}

void *sub_1E050C(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v5;
  void *Strong;
  NSString v7;
  id v8;
  uint64_t v9;
  _BYTE v11[24];

  v5 = v3 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v5, v11, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(Strong, *a3, v7);

    swift_unknownObjectRelease(Strong);
    if (v8)
    {
      Strong = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    }
    else
    {
      return 0;
    }
  }
  return Strong;
}

id BATracker.chain(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  objc_class *ObjectType;
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t Strong;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  objc_super v24;
  char v25[24];
  char v26[24];

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v6 = (BAEventReporter *)Tracker.chain(name:identifier:)(a1, a2, 0, 0);
  v7 = v2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v7, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  v9 = (char *)objc_allocWithZone(ObjectType);
  v10 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
  v11 = sub_71B4(&qword_299F90);
  v12 = swift_allocObject(v11, 28, 7);
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v9[v10] = v12;
  v13 = &v9[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
  v14 = swift_unknownObjectWeakInit(&v9[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate]);
  *(_QWORD *)&v9[OBJC_IVAR____TtC13BookAnalytics9BATracker_aaTracker] = v6;
  swift_beginAccess(v14, v25, 1, 0);
  swift_unknownObjectWeakAssign(v13, Strong);
  v24.receiver = v9;
  v24.super_class = ObjectType;
  swift_retain(v6);
  v15 = objc_msgSendSuper2(&v24, "init");
  swift_release(v6, v16, v17, v18, v19, v20, v21, v22);
  swift_unknownObjectRelease(Strong);
  return v15;
}

id BATracker.optedIn.getter()
{
  id result;
  void *v1;
  id v2;

  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "isDiagnosticSubmissionAllowed");

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t BATracker.pop<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;

  v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  swift_retain(v9);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  sub_1E204C((BAEventReporter **)(v9 + 16), a1, a2, a3, a4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release((BAEventReporter *)v9, v10, v11, v12, v13, v14, v15, v16);
  return Tracker.pop<A>(type:)(a1, a2, a3);
}

void BATracker.push<A>(data:traits:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;

  v15 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  swift_retain(v15);
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 24));
  sub_1E2110((BAEventReporter **)(v15 + 16), a1, a2, a6, a7, a8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
  swift_release((BAEventReporter *)v15, v16, v17, v18, v19, v20, v21, v22);
  if (a2)
    v23 = (BAEventReporter *)a2;
  else
    v23 = (BAEventReporter *)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a2);
  Tracker.push<A>(data:traits:file:line:)(a1, v23, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t BATracker.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Tracker.submit<A>(_:onlyIfTimed:completion:)(a1, 0, a2, a3, a4, a5);
}

uint64_t BATracker.time<A>(_:startTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v8 = sub_71B4(&qword_29F018);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10EDD4(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_88F50((uint64_t)v10, &qword_29F018);
    return Tracker.time<A>(_:submitAndRestartWithSession:)(a1, 1, a3, a4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    Tracker.explicitTime<A>(_:startTime:)(a1, v14, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

id BATracker.__allocating_init(tracker:sessionOperationDelegate:)(BAEventReporter *a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  objc_super v21;
  char v22[24];

  v3 = v2;
  v6 = (char *)objc_allocWithZone(v3);
  v7 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
  v8 = sub_71B4(&qword_299F90);
  v9 = swift_allocObject(v8, 28, 7);
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v6[v7] = v9;
  v10 = &v6[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
  v11 = swift_unknownObjectWeakInit(&v6[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate]);
  *(_QWORD *)&v6[OBJC_IVAR____TtC13BookAnalytics9BATracker_aaTracker] = a1;
  swift_beginAccess(v11, v22, 1, 0);
  swift_unknownObjectWeakAssign(v10, a2);
  v21.receiver = v6;
  v21.super_class = v3;
  swift_retain(a1);
  v12 = -[BAEventReporter init](&v21, "init");
  swift_release(a1, v13, v14, v15, v16, v17, v18, v19);
  swift_unknownObjectRelease(a2);
  return v12;
}

uint64_t sub_1E0BB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

id BATracker.copy()()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t v3;
  BAEventReporter *v4;
  void *v5;
  uint64_t v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  BAEventReporter *v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  uint64_t Strong;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  int64_t v36;
  id v37;
  BOOL v38;
  id v39;
  uint64_t v40;
  SEL v41;
  id v42;
  id v43;
  int64_t v44;
  id v45;
  BOOL v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  int64_t v51;
  id v52;
  BOOL v53;
  id v54;
  objc_super v56;
  char v57[24];
  char v58[24];

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = Tracker.parentTracker.getter();
  if (!v3)
    return 0;
  v4 = (BAEventReporter *)v3;
  v5 = (void *)Tracker.bridgedTracker.getter();
  v6 = BridgedTracker.name.getter();
  v8 = v7;

  v9 = (BAEventReporter *)Tracker.chain(name:identifier:)(v6, v8, 0, 0);
  swift_release(v4, v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(v8, v17, v18, v19, v20, v21, v22, v23);
  v24 = v1 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v58, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v24);
  v26 = (char *)objc_allocWithZone(ObjectType);
  v27 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
  v28 = sub_71B4(&qword_299F90);
  v29 = swift_allocObject(v28, 28, 7);
  *(_DWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v26[v27] = v29;
  v30 = &v26[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
  v31 = swift_unknownObjectWeakInit(&v26[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate]);
  *(_QWORD *)&v26[OBJC_IVAR____TtC13BookAnalytics9BATracker_aaTracker] = v9;
  swift_beginAccess(v31, v57, 1, 0);
  swift_unknownObjectWeakAssign(v30, Strong);
  v56.receiver = v26;
  v56.super_class = ObjectType;
  swift_retain_n(v9, 2);
  v32 = objc_msgSendSuper2(&v56, "init");
  swift_release(v9, v33, v34, v35, v36, v37, v38, v39);
  swift_unknownObjectRelease(Strong);
  v40 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  swift_retain(v40);
  os_unfair_lock_lock((os_unfair_lock_t)(v40 + 24));
  sub_1E2264((BAEventReporter **)(v40 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 24));
  swift_release((BAEventReporter *)v40, v41, v42, v43, v44, v45, v46, v47);
  swift_release(v9, v48, v49, v50, v51, v52, v53, v54);
  return v32;
}

uint64_t BATracker.sessionOperationDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t BATracker.sessionOperationDelegate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v3, v5, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*BATracker.sessionOperationDelegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_125380;
}

id static BATracker.mock.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BAEventReporter *v21;
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  objc_class *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Class v42;
  objc_super v43;
  _QWORD v44[3];

  v0 = type metadata accessor for TimestampJitter(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FlushEvents(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for SessionManager(0);
  type metadata accessor for AccessQueue(0);
  v8 = static AccessQueue.background.getter();
  v9 = type metadata accessor for SessionGroupManager(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v40 = SessionGroupManager.init(accessQueue:)(v8);
  v39 = static AccessQueue.background.getter();
  v10 = sub_71B4(&qword_2A0028);
  v11 = swift_allocObject(v10, ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ 3 * *(_QWORD *)(v5 + 72), *(unsigned __int8 *)(v5 + 80) | 7);
  *(_OWORD *)(v11 + 16) = xmmword_209330;
  started = static FlushEvents.didStartSession.getter();
  v13 = static FlushEvents.didEndSession.getter(started);
  static FlushEvents.didLeaveGroup.getter(v13);
  v44[0] = v11;
  v14 = sub_7E10(&qword_2A0030, (uint64_t (*)(uint64_t))&type metadata accessor for FlushEvents, (uint64_t)&protocol conformance descriptor for FlushEvents);
  v15 = sub_71B4(&qword_2A0038);
  v16 = sub_F7668((unint64_t *)&unk_2A0040, &qword_2A0038, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v44, v15, v16, v4, v14);
  v17 = type metadata accessor for FlushProcessor(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = FlushProcessor.init(flushEvents:flushInterval:)(v7, 60.0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for TimestampJitter.disabled(_:), v0);
  v19 = type metadata accessor for DisabledPrivacyValidationProvider(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = DisabledPrivacyValidationProvider.init()();
  v21 = (BAEventReporter *)SessionManager.__allocating_init(accessQueue:sessionGroupManager:flushProcessor:timestampJitter:privacyValidationProvider:)(v39, v40, v18, v3, v20, &protocol witness table for DisabledPrivacyValidationProvider);
  v22 = SessionManager.tracker.getter(v21);
  swift_release(v21, v23, v24, v25, v26, v27, v28, v29);
  v30 = v42;
  v31 = (char *)objc_allocWithZone(v42);
  v32 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
  v33 = sub_71B4(&qword_299F90);
  v34 = swift_allocObject(v33, 28, 7);
  *(_DWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v31[v32] = v34;
  v35 = &v31[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
  v36 = swift_unknownObjectWeakInit(&v31[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate]);
  *(_QWORD *)&v31[OBJC_IVAR____TtC13BookAnalytics9BATracker_aaTracker] = v22;
  swift_beginAccess(v36, v44, 1, 0);
  swift_unknownObjectWeakAssign(v35, 0);
  v43.receiver = v31;
  v43.super_class = v30;
  return objc_msgSendSuper2(&v43, "init");
}

id BATracker.init(tracker:sessionOperationDelegate:)(BAEventReporter *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  objc_super v21;
  char v22[24];

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v7 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
  v8 = sub_71B4(&qword_299F90);
  v9 = swift_allocObject(v8, 28, 7);
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v3[v7] = v9;
  v10 = &v3[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
  v11 = swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate]);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13BookAnalytics9BATracker_aaTracker] = a1;
  swift_beginAccess(v11, v22, 1, 0);
  swift_unknownObjectWeakAssign(v10, a2);
  v21.receiver = v3;
  v21.super_class = ObjectType;
  swift_retain(a1);
  v12 = -[BAEventReporter init](&v21, "init");
  swift_release(a1, v13, v14, v15, v16, v17, v18, v19);
  swift_unknownObjectRelease(a2);
  return v12;
}

uint64_t sub_1E12AC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1E12CC(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

uint64_t BATracker.time<A>(_:submitAndRestartWithSession:)()
{
  return Tracker.time<A>(_:submitAndRestartWithSession:)();
}

void BATracker.timeRawEvent(_:properties:startTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  unsigned int (*v32)(char *, uint64_t, unint64_t);
  uint64_t v33;
  void *v34;
  void (*v35)(char *, char *, unint64_t);
  uint64_t v36;
  void *Strong;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, char *, unint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, unint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  Class isa;
  void *v66;
  void (*v67)(char *, unint64_t);
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  double v76;
  uint64_t v77;
  _BYTE v78[16];
  uint64_t v79[3];
  char v80[24];

  v9 = sub_71B4(&qword_29F018);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v68 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v68 - v16;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v70 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v71 = (char *)&v68 - v23;
  v24 = __chkstk_darwin(v22);
  v74 = (char *)&v68 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v68 - v26;
  v72 = a1;
  v73 = a2;
  v28 = a2;
  v30 = v29;
  v31 = (void *)sub_1E3D1C(a1, v28, a3);
  sub_10EDD4(a4, (uint64_t)v17);
  v32 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v19 + 48);
  if (v32(v17, 1, v30) == 1)
  {
    v33 = sub_88F50((uint64_t)v17, &qword_29F018);
    v34 = (void *)Tracker.bridgedTracker.getter(v33);
    objc_msgSend(v34, "timeRawEvent:", v31);

    return;
  }
  v69 = v31;
  v35 = *(void (**)(char *, char *, unint64_t))(v19 + 32);
  v75 = v27;
  v35(v27, v17, v30);
  v36 = v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v80, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v36);
  if (Strong)
  {
    v38 = Strong;
    v39 = objc_msgSend(Strong, "sessionStartTime");
    swift_unknownObjectRelease(v38);
    if (v39)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

      v40 = 0;
    }
    else
    {
      v40 = 1;
    }
    v41 = v73;
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v19 + 56))(v12, v40, 1, v30);
    sub_1E41F0((uint64_t)v12, (uint64_t)v15);
    if (v32(v15, 1, v30) != 1)
    {
      v44 = v71;
      v35(v71, v15, v30);
      v43 = v75;
      v45 = v35;
      if ((static Date.> infix(_:_:)(v75, v44) & 1) != 0)
      {
        (*(void (**)(char *, unint64_t))(v19 + 8))(v44, v30);
        v46 = v70;
        (*(void (**)(char *, char *, unint64_t))(v19 + 16))(v70, v43, v30);
      }
      else
      {
        v46 = v70;
        v45(v70, v44, v30);
      }
      v42 = v74;
      v45(v74, v46, v30);
      goto LABEL_14;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v19 + 56))(v15, 1, 1, v30);
    v41 = v73;
  }
  sub_88F50((uint64_t)v15, &qword_29F018);
  v42 = v74;
  v43 = v75;
  (*(void (**)(char *, char *, unint64_t))(v19 + 16))(v74, v75, v30);
LABEL_14:
  v47 = sub_7E10(&qword_2A75E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v30, v47) & 1) == 0)
  {
    v48 = *(void (**)(char *, char *, unint64_t))(v19 + 24);
    v73 = v30;
    v48(v43, v42, v30);
    if (qword_2955E0 != -1)
      swift_once(&qword_2955E0, sub_5C5EC);
    v49 = type metadata accessor for Logger(0);
    sub_705C(v49, (uint64_t)qword_298740);
    v50 = swift_bridgeObjectRetain_n(v41, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v79[0] = v54;
      *(_DWORD *)v53 = 136315138;
      swift_bridgeObjectRetain(v41);
      v77 = sub_EB014(v72, v41, v79);
      v43 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease_n(v41, 3);
      _os_log_impl(&dword_0, v51, v52, "Analytics: Timing %s attempted to use a date earlier than the sessionStartTime.", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      v42 = v74;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v41, 2);
    }
    v30 = v73;
  }
  if (qword_2955E0 != -1)
    swift_once(&qword_2955E0, sub_5C5EC);
  v55 = type metadata accessor for Logger(0);
  sub_705C(v55, (uint64_t)qword_298740);
  v56 = swift_bridgeObjectRetain_n(v41, 2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = swift_slowAlloc(22, -1);
    v60 = swift_slowAlloc(32, -1);
    v79[0] = v60;
    *(_DWORD *)v59 = 136315394;
    swift_bridgeObjectRetain(v41);
    v77 = sub_EB014(v72, v41, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v59 + 4, v59 + 12);
    swift_bridgeObjectRelease_n(v41, 3);
    *(_WORD *)(v59 + 12) = 2048;
    v61 = swift_beginAccess(v75, &v77, 0, 0);
    v76 = Date.timeIntervalSince1970.getter(v61) * 1000.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v59 + 14, v59 + 22);
    _os_log_impl(&dword_0, v57, v58, "Analytics: Timing %s with startTime: %f", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    v62 = v60;
    v43 = v75;
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

    v63 = swift_bridgeObjectRelease_n(v41, 2);
  }
  v64 = (void *)Tracker.bridgedTracker.getter(v63);
  swift_beginAccess(v43, v79, 0, 0);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v66 = v69;
  objc_msgSend(v64, "timeRawEvent:startTime:", v69, isa);

  v67 = *(void (**)(char *, unint64_t))(v19 + 8);
  v67(v42, v30);
  v67(v43, v30);
}

uint64_t BATracker.sessionStartTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *Strong;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v15[24];

  v3 = sub_71B4(&qword_29F018);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = v1 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v6, v15, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = Strong;
    v9 = objc_msgSend(Strong, "sessionStartTime");
    swift_unknownObjectRelease(v8);
    if (v9)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v9);

      v10 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    else
    {
      v13 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
    }
    return sub_1E41F0((uint64_t)v5, a1);
  }
  else
  {
    v11 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

void BATracker.pushRawDataEvent(with:data:traits:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12;
  void *v13;
  void *v14;
  id v15;
  NSString v16;

  v12 = objc_allocWithZone((Class)type metadata accessor for BridgedRawDataEvent(0));
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v13 = (void *)BridgedRawDataEvent.init(name:dictionary:)(a1, a2, a3);
  v14 = (void *)Tracker.bridgedTracker.getter();
  v15 = v13;
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "pushDataEvent:traits:file:line:", v15, a4, v16, a7);

}

void BATracker.submitRawEvent(_:properties:endTime:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void *v33;
  Class isa;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v41;

  v5 = v4;
  v10 = sub_71B4(&qword_29F018);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v36 - v18;
  v20 = (void *)sub_1E3D1C(a1, a2, a3);
  sub_10EDD4(a4, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v21 = sub_88F50((uint64_t)v12, &qword_29F018);
    v22 = (void *)Tracker.bridgedTracker.getter(v21);
    objc_msgSend(v22, "submitRawEvent:", v20);

  }
  else
  {
    v39 = v20;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v12, v13);
    if (qword_2955E0 != -1)
      swift_once(&qword_2955E0, sub_5C5EC);
    v23 = type metadata accessor for Logger(0);
    sub_705C(v23, (uint64_t)qword_298740);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    v24 = swift_bridgeObjectRetain_n(a2, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v38 = v5;
      v28 = v27;
      v37 = swift_slowAlloc(32, -1);
      v41 = v37;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain(a2);
      v40 = COERCE_DOUBLE(sub_EB014(a1, a2, &v41));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v28 + 4, v28 + 12);
      v29 = swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v28 + 12) = 2048;
      v40 = Date.timeIntervalSince1970.getter(v29) * 1000.0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v28 + 14, v28 + 22);
      v30 = *(void (**)(char *, uint64_t))(v14 + 8);
      v30(v17, v13);
      _os_log_impl(&dword_0, v25, v26, "Analytics: Submitting %s with endTime: %f", (uint8_t *)v28, 0x16u);
      v31 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      v30 = *(void (**)(char *, uint64_t))(v14 + 8);
      v30(v17, v13);
    }

    v33 = (void *)Tracker.bridgedTracker.getter(v32);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v35 = v39;
    objc_msgSend(v33, "explicitSubmitRawEvent:submitTime:", v39, isa);

    v30(v19, v13);
  }
}

uint64_t sub_1E204C(BAEventReporter **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BAEventReporter *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t isa;
  uint64_t result;
  _QWORD v14[7];
  char v15;

  v14[0] = a2;
  v14[1] = a4;
  v14[2] = a5;
  v15 = 1;
  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = sub_1DB8EC(0, (int64_t)v6[1].super.isa + 1, 1, v6, v7, v8, v9, v10);
  isa = (unint64_t)v6[1].super.isa;
  v11 = *(_QWORD *)v6[1].dataProviders;
  if (isa >= v11 >> 1)
    v6 = sub_1DB8EC((BAEventReporter *)(v11 > 1), isa + 1, 1, v6, v7, v8, v9, v10);
  v6[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v14, (uint64_t)&v6[4 * isa + 2]);
  *a1 = v6;
  return result;
}

uint64_t sub_1E2110(BAEventReporter **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  BAEventReporter *v11;
  void *v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t isa;
  uint64_t result;
  _QWORD v19[7];
  char v20;

  v19[3] = a4;
  v19[4] = a5;
  v19[5] = a6;
  v10 = sub_16E508(v19);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v10, a2, a4);
  v19[6] = a3;
  v20 = 0;
  v11 = *a1;
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
    v11 = sub_1DB8EC(0, (int64_t)v11[1].super.isa + 1, 1, v11, v12, v13, v14, v15);
  isa = (unint64_t)v11[1].super.isa;
  v16 = *(_QWORD *)v11[1].dataProviders;
  if (isa >= v16 >> 1)
    v11 = sub_1DB8EC((BAEventReporter *)(v16 > 1), isa + 1, 1, v11, v12, v13, v14, v15);
  v11[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v19, (uint64_t)&v11[4 * isa + 2]);
  *a1 = v11;
  return result;
}

void sub_1E2264(BAEventReporter **a1)
{
  BAEventReporter *v1;
  Class isa;
  uint64_t v3;
  BAEventReporter *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  int64_t v20;
  int64_t v21;
  void *v22;
  BAEventReporter *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  BAEventReporter *v30;
  char v31;

  v1 = *a1;
  isa = v1[1].super.isa;
  if (isa)
  {
    v3 = (uint64_t)&v1[2];
    v23 = v1;
    swift_bridgeObjectRetain(v1);
    do
    {
      sub_1E46D0(v3, (uint64_t)&v28);
      if ((v31 & 1) != 0)
      {
        BATracker.pop<A>(type:)(v28, v28, *((uint64_t *)&v28 + 1), v29);
      }
      else
      {
        v4 = v30;
        sub_1D05A0(&v28, &v24);
        v5 = v25;
        v6 = v26;
        v7 = v27;
        v8 = sub_7988(&v24, v25);
        if (!v4)
          v4 = (BAEventReporter *)_swiftEmptyArrayStorage;
        BATracker.push<A>(data:traits:file:line:)((uint64_t)v8, (uint64_t)v4, 0xD00000000000005FLL, 0x8000000000222B80, 157, v5, v6, v7);
        swift_bridgeObjectRelease(v4, v9, v10, v11, v12, v13, v14, v15);
        sub_7DAC(&v24);
      }
      v3 += 64;
      isa = (Class)((char *)isa - 1);
    }
    while (isa);
    swift_bridgeObjectRelease(v23, v16, v17, v18, v19, v20, v21, v22);
  }
}

void BATracker.onSessionChange(with:)(objc_class *a1, uint64_t a2)
{
  BAEventReporter *v4;
  BAEventReporter *v5;
  SEL v6;
  id v7;
  id v8;
  int64_t v9;
  id v10;
  BOOL v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;

  v4 = (BAEventReporter *)swift_allocObject(&unk_28C890, 32, 7);
  v4[1].super.isa = a1;
  *(_QWORD *)v4[1].dataProviders = a2;
  swift_retain(a2);
  v5 = (BAEventReporter *)Tracker.onSessionChange(block:)(sub_1E4238, v4);
  swift_release(v5, v6, v7, v8, v9, v10, v11, v12);
  swift_release(v4, v13, v14, v15, v16, v17, v18, v19);
}

void BATracker.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BATracker", 23, "init()", 6, 0);
  __break(1u);
}

id BATracker.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t BATracker.name.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)Tracker.bridgedTracker.getter();
  v1 = BridgedTracker.name.getter();

  return v1;
}

uint64_t BATracker.path.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  int64_t v7;
  int64_t v8;
  id v9;
  BAEventReporter *v11;

  v11 = (BAEventReporter *)Tracker.path.getter();
  v0 = sub_71B4(&qword_299618);
  v1 = sub_F7668(&qword_2A75E8, &qword_299618, (const char *)&protocol conformance descriptor for [A]);
  v2 = BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v0, v1);
  swift_bridgeObjectRelease(v11, v3, v4, v5, v6, v7, v8, v9);
  return v2;
}

Swift::Void __swiftcall BATracker.timeRawEvent(eventNameValue:propertiesValue:startTimeValue:)(JSValue eventNameValue, JSValue propertiesValue, JSValue startTimeValue)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  BAEventReporter *v18;
  BAEventReporter *v19;
  BAEventReporter *v20;
  BAEventReporter *v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  int64_t v51;
  int64_t v52;
  void *v53;
  BAEventReporter *v54;
  uint64_t v55;
  uint64_t v56;

  v6 = sub_71B4(&qword_29F018);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v56 - v10;
  if (-[objc_class isString](eventNameValue.super.isa, "isString")
    && (v12 = -[objc_class toString](eventNameValue.super.isa, "toString")) != 0)
  {
    v14 = v12;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  if (-[objc_class isObject](propertiesValue.super.isa, "isObject"))
  {
    v18 = (BAEventReporter *)-[objc_class toDictionary](propertiesValue.super.isa, "toDictionary");
    v19 = v18;
    if (v18)
    {
      v20 = (BAEventReporter *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      sub_1E2A8C((uint64_t)v20);
      v19 = v21;
      swift_bridgeObjectRelease(v20, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  else
  {
    v19 = 0;
  }
  if (-[objc_class isDate](startTimeValue.super.isa, "isDate"))
  {
    v29 = -[objc_class toDate](startTimeValue.super.isa, "toDate");
    if (v29)
    {
      v30 = v29;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v29);

      v31 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v9, 0, 1, v31);
    }
    else
    {
      v55 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v9, 1, 1, v55);
    }
    sub_1E41F0((uint64_t)v9, (uint64_t)v11);
    if (!v17)
      goto LABEL_18;
  }
  else
  {
    v32 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v11, 1, 1, v32);
    if (!v17)
    {
LABEL_18:
      sub_88F50((uint64_t)v11, &qword_29F018);
      v54 = v19;
      goto LABEL_19;
    }
  }
  if (v19)
  {
    BATracker.timeRawEvent(_:properties:startTime:)(v15, (uint64_t)v17, (uint64_t)v19, (uint64_t)v11);
    swift_bridgeObjectRelease(v19, v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(v17, v40, v41, v42, v43, v44, v45, v46);
    sub_88F50((uint64_t)v11, &qword_29F018);
    return;
  }
  sub_88F50((uint64_t)v11, &qword_29F018);
  v54 = v17;
LABEL_19:
  swift_bridgeObjectRelease(v54, v47, v48, v49, v50, v51, v52, v53);
}

void sub_1E2A8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BAEventReporter *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  int64_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  BAEventReporter *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  int64_t v38;
  int64_t v39;
  void *v40;
  char *v41;
  BAEventReporter *v42;
  unint64_t v43;
  const char *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  uint64_t *v49;
  Class isa;
  BOOL v51;
  objc_class *v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  int64_t v57;
  int64_t v58;
  void *v59;
  BAEventReporter *v60;
  void *v61;
  BOOL v62;
  void *v63;
  SEL v64;
  id v65;
  id v66;
  int64_t v67;
  id v68;
  BOOL v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  const char *v74;
  BAEventReporter *v75;
  BAEventReporter *v76;
  _BYTE v77[40];
  _OWORD v78[2];
  _OWORD v79[2];
  uint64_t v80;
  _OWORD v81[2];
  _OWORD v82[2];
  uint64_t v83;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_71B4(&qword_2A6EF8);
    v3 = (BAEventReporter *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = (BAEventReporter *)&_swiftEmptyDictionarySingleton;
  }
  v74 = (const char *)(v1 + 64);
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  v71 = ~v5;
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v73 = (unint64_t)(63 - v5) >> 6;
  v7 = (char *)v82 + 8;
  v8 = (char *)v79 + 8;
  swift_bridgeObjectRetain(v1);
  v12 = 0;
  v72 = v1;
  while (1)
  {
    if (v6)
    {
      v25 = (v6 - 1) & v6;
      v26 = __clz(__rbit64(v6)) | ((_QWORD)v12 << 6);
      v27 = (int64_t)v12;
    }
    else
    {
      v28 = (int64_t)(v12 + 1);
      if (__OFADD__(v12, 1))
        goto LABEL_39;
      if (v28 >= v73)
      {
LABEL_36:
        sub_1E46C8(v1, v74, (void *)v71, v12, 0, v9, v10, v11);
        return;
      }
      v29 = *(_QWORD *)&v74[8 * v28];
      v27 = (int64_t)(v12 + 1);
      if (!v29)
      {
        v27 = (int64_t)(v12 + 2);
        if ((uint64_t)(v12 + 2) >= v73)
          goto LABEL_36;
        v29 = *(_QWORD *)&v74[8 * v27];
        if (!v29)
        {
          v27 = (int64_t)(v12 + 3);
          if ((uint64_t)(v12 + 3) >= v73)
            goto LABEL_36;
          v29 = *(_QWORD *)&v74[8 * v27];
          if (!v29)
          {
            v27 = (int64_t)(v12 + 4);
            if ((uint64_t)(v12 + 4) >= v73)
              goto LABEL_36;
            v29 = *(_QWORD *)&v74[8 * v27];
            if (!v29)
            {
              v30 = v12 + 5;
              if ((uint64_t)(v12 + 5) >= v73)
                goto LABEL_36;
              v29 = *(_QWORD *)&v74[8 * (_QWORD)v30];
              if (!v29)
              {
                while (1)
                {
                  v27 = (int64_t)(v30 + 1);
                  if (__OFADD__(v30, 1))
                    goto LABEL_40;
                  if (v27 >= v73)
                    goto LABEL_36;
                  v29 = *(_QWORD *)&v74[8 * v27];
                  ++v30;
                  if (v29)
                    goto LABEL_26;
                }
              }
              v27 = (int64_t)(v12 + 5);
            }
          }
        }
      }
LABEL_26:
      v25 = (v29 - 1) & v29;
      v26 = __clz(__rbit64(v29)) + (v27 << 6);
    }
    sub_E1B4(*(_QWORD *)(v1 + 48) + 40 * v26, (uint64_t)v81);
    sub_3A870(*(_QWORD *)(v1 + 56) + 32 * v26, (uint64_t)v7);
    v79[0] = v82[0];
    v79[1] = v82[1];
    v80 = v83;
    v78[0] = v81[0];
    v78[1] = v81[1];
    sub_E1B4((uint64_t)v78, (uint64_t)v77);
    if (!swift_dynamicCast(&v75, v77, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v75 = 0;
      v76 = 0;
      sub_88F50((uint64_t)v78, &qword_2A7618);
      v60 = v76;
LABEL_35:
      swift_bridgeObjectRelease(v60, v53, v54, v55, v56, v57, v58, v59);
      sub_1E46C8(v1, v74, (void *)v71, v12, v6, v61, v62, v63);
      swift_release(v3, v64, v65, v66, v67, v68, v69, v70);
      return;
    }
    v32 = (uint64_t)v75;
    v31 = v76;
    sub_3A870((uint64_t)v8, (uint64_t)v77);
    sub_88F50((uint64_t)v78, &qword_2A7618);
    v33 = sub_71B4(&qword_2A38C8);
    if ((swift_dynamicCast(&v75, v77, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
    {
      v75 = 0;
      swift_bridgeObjectRelease(v31, v34, v35, v36, v37, v38, v39, v40);
      v60 = v75;
      goto LABEL_35;
    }
    v41 = (char *)v27;
    v42 = v75;
    v43 = sub_DF7C(v32, (uint64_t)v31);
    v48 = v43;
    if ((v44 & 1) != 0)
    {
      v13 = v8;
      v14 = v7;
      v15 = (uint64_t)v3[3].super.isa + 16 * v43;
      swift_bridgeObjectRelease(*(BAEventReporter **)(v15 + 8), v44, v45, v46, v47, (int64_t)v9, v10, v11);
      *(_QWORD *)v15 = v32;
      *(_QWORD *)(v15 + 8) = v31;
      v16 = *(_QWORD *)v3[3].dataProviders;
      v17 = 8 * v48;
      swift_bridgeObjectRelease(*(BAEventReporter **)(v16 + v17), v18, v19, v20, v21, v22, v23, v24);
      *(_QWORD *)(v16 + v17) = v42;
      v7 = v14;
      v8 = v13;
      v1 = v72;
      goto LABEL_8;
    }
    if (v3[1].super.isa >= (Class)*(_QWORD *)v3[1].dataProviders)
      break;
    *(Class *)((char *)&v3[4].super.isa + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) = (Class)(*(uint64_t *)((char *)&v3[4].super.isa + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) | (1 << v43));
    v49 = (uint64_t *)((char *)v3[3].super.isa + 16 * v43);
    *v49 = v32;
    v49[1] = (uint64_t)v31;
    *(_QWORD *)(*(_QWORD *)v3[3].dataProviders + 8 * v43) = v42;
    isa = v3[1].super.isa;
    v51 = __OFADD__(isa, 1);
    v52 = (Class)((char *)isa + 1);
    if (v51)
      goto LABEL_38;
    v3[1].super.isa = v52;
LABEL_8:
    v12 = v41;
    v6 = v25;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

Swift::Void __swiftcall BATracker.submitRawEvent(_:properties:)(Swift::String _, Swift::OpaquePointer properties)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v5 = sub_71B4(&qword_29F018);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  BATracker.submitRawEvent(_:properties:endTime:)(countAndFlagsBits, (unint64_t)object, (uint64_t)properties._rawValue, (uint64_t)v7);
  sub_88F50((uint64_t)v7, &qword_29F018);
}

Swift::Void __swiftcall BATracker.submitRawEvent(_:properties:endTimeValue:)(Swift::String _, Swift::OpaquePointer properties, JSValue_optional endTimeValue)
{
  Class isa;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isa = endTimeValue.value.super.isa;
  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v7 = sub_71B4(&qword_29F018);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v18 - v11;
  if (isa && -[objc_class isDate](isa, "isDate"))
  {
    v13 = -[objc_class toDate](isa, "toDate");
    if (v13)
    {
      v14 = v13;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

      v15 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
    }
    else
    {
      v17 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 1, 1, v17);
    }
    sub_1E41F0((uint64_t)v10, (uint64_t)v12);
  }
  else
  {
    v16 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  }
  BATracker.submitRawEvent(_:properties:endTime:)(countAndFlagsBits, (unint64_t)object, (uint64_t)properties._rawValue, (uint64_t)v12);
  sub_88F50((uint64_t)v12, &qword_29F018);
}

Swift::Void __swiftcall BATracker.submitRawEvent(_:properties:onlyIfTimed:)(Swift::String _, Swift::OpaquePointer properties, Swift::Bool onlyIfTimed)
{
  void *v4;
  id v5;

  v4 = (void *)sub_1E3D1C(_._countAndFlagsBits, (uint64_t)_._object, (uint64_t)properties._rawValue);
  v5 = (id)Tracker.bridgedTracker.getter(v4);
  objc_msgSend(v5, "submitRawEvent:onlyIfTimed:", v4, onlyIfTimed);

}

Swift::Void __swiftcall BATracker.pushRawDataEvent(with:data:traitValues:)(Swift::String with, Swift::OpaquePointer data, Swift::OpaquePointer traitValues)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSString v13;

  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  objc_allocWithZone((Class)type metadata accessor for BridgedRawDataEvent(0));
  swift_bridgeObjectRetain(object);
  swift_bridgeObjectRetain(data._rawValue);
  v7 = (void *)BridgedRawDataEvent.init(name:dictionary:)(countAndFlagsBits, object, data._rawValue);
  v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BridgedDataEventTraits(0)), "init");
  if ((sub_1E3578(0x65636E4F796C6E6FLL, 0xE800000000000000, traitValues._rawValue) & 1) != 0)
    dispatch thunk of BridgedDataEventTraits.onlyOnce.setter(1);
  v9 = sub_1E3578(0x657571696E75, 0xE600000000000000, traitValues._rawValue);
  if ((v9 & 1) != 0)
    v9 = dispatch thunk of BridgedDataEventTraits.unique.setter(1);
  v10 = (void *)Tracker.bridgedTracker.getter(v9);
  v11 = v7;
  v12 = v8;
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "pushDataEvent:traits:file:line:", v11, v12, v13, 0);

}

uint64_t sub_1E3578(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall BATracker.popRawDataEvent(with:)(Swift::String with)
{
  void *v1;
  NSString v2;

  v1 = (void *)Tracker.bridgedTracker.getter();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "popDataEventByName:", v2);

}

void BATracker.performAfterPrivateDataFetched(completionHandler:)(uint64_t a1, BAEventReporter *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  void *v8;
  BAEventReporter *v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  _QWORD aBlock[5];
  BAEventReporter *v18;
  char v19[24];

  v5 = v2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v5, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    aBlock[4] = a1;
    v18 = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_124DDC;
    aBlock[3] = &unk_28C8A8;
    v8 = _Block_copy(aBlock);
    v9 = v18;
    swift_retain(a2);
    swift_release(v9, v10, v11, v12, v13, v14, v15, v16);
    objc_msgSend(v7, "performAfterPrivateDataFetchedWithCompletionHandler:", v8);
    swift_unknownObjectRelease(v7);
    _Block_release(v8);
  }
}

id BATracker.newSessionAssertion()()
{
  return sub_1E3A38((SEL *)&selRef_newSessionAssertion);
}

id BATracker.newSessionExtendingAssertion()()
{
  return sub_1E3A38((SEL *)&selRef_newSessionExtendingAssertion);
}

id sub_1E3A38(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  _BYTE v8[24];

  v3 = v1 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v3, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong)
    return 0;
  v5 = Strong;
  v6 = objc_msgSend(Strong, *a1);
  swift_unknownObjectRelease(v5);
  return v6;
}

id sub_1E3AB8(char *a1, uint64_t a2, SEL *a3)
{
  char *v5;
  uint64_t Strong;
  void *v7;
  char *v8;
  id v9;
  char v11[24];

  v5 = &a1[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
  swift_beginAccess(&a1[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate], v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (!Strong)
    return 0;
  v7 = (void *)Strong;
  v8 = a1;
  v9 = objc_msgSend(v7, *a3);

  swift_unknownObjectRelease(v7);
  return v9;
}

unint64_t sub_1E3B48(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1E3D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  int64_t v15;
  BAEventReporter *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BAEventReporter *v24;
  BAEventReporter *v25;
  Class isa;
  const char *v27;
  void *v28;
  void *v29;
  void *v30;
  int64_t v31;
  int64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  SEL v42;
  char v43;
  id v44;
  id v45;
  id v46;
  int64_t v47;
  int64_t v48;
  id v49;
  const char *v50;
  void *v51;
  void *v52;
  void *v53;
  int64_t v54;
  int64_t v55;
  void *v56;
  char v57;
  const char *v58;
  void *v59;
  void *v60;
  void *v61;
  int64_t v62;
  int64_t v63;
  void *v64;
  void *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  int64_t v70;
  int64_t v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  int64_t v77;
  int64_t v78;
  id v79;
  uint64_t v80;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v82;
  unint64_t v83;
  Class v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  const char *v92;
  void *v93;
  void *v94;
  void *v95;
  int64_t v96;
  int64_t v97;
  void *v98;
  char v99;
  uint64_t *v100;
  Class v101;
  BOOL v102;
  objc_class *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  int64_t v108;
  int64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t result;
  uint64_t v117;
  int64_t v118;
  _QWORD v119[2];
  __int128 v120;
  __int128 v121;

  v4 = a3 + 64;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 64);
  v118 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v15 = 0;
  v16 = (BAEventReporter *)&_swiftEmptyDictionarySingleton;
  v117 = v4;
  while (v7)
  {
    v17 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v18 = v17 | (v15 << 6);
LABEL_21:
    v22 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v18);
    v23 = *v22;
    v24 = (BAEventReporter *)v22[1];
    v25 = *(BAEventReporter **)(*(_QWORD *)(a3 + 56) + 8 * v18);
    isa = v25[1].super.isa;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    if (isa
      && (v34 = sub_DF7C(0x6465726975716572, 0xE800000000000000), (v27 & 1) != 0)
      && (sub_3A870(*(_QWORD *)v25[3].dataProviders + 32 * v34, (uint64_t)&v120),
          (swift_dynamicCast(v119, &v120, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      && (v119[0] & 1) != 0)
    {
      v35 = 0;
      if (!v25[1].super.isa)
        goto LABEL_30;
    }
    else
    {
      v35 = 1;
      if (!v25[1].super.isa)
        goto LABEL_30;
    }
    v36 = sub_DF7C(1701869940, 0xE400000000000000);
    if ((v27 & 1) != 0)
    {
      sub_3A870(*(_QWORD *)v25[3].dataProviders + 32 * v36, (uint64_t)&v120);
      goto LABEL_31;
    }
LABEL_30:
    v120 = 0u;
    v121 = 0u;
LABEL_31:
    swift_bridgeObjectRelease(v25, v27, v28, v29, v30, v31, v32, v33);
    if (!*((_QWORD *)&v121 + 1))
    {
      sub_88F50((uint64_t)&v120, &qword_2983D0);
LABEL_35:
      v37 = 0;
      v38 = 0xE000000000000000;
      goto LABEL_36;
    }
    if (!swift_dynamicCast(v119, &v120, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_35;
    v37 = v119[0];
    v38 = v119[1];
LABEL_36:
    v39 = objc_allocWithZone((Class)type metadata accessor for BridgedRawEventProperty(0));
    v40 = BridgedRawEventProperty.init(dataName:requirement:)(v37, v38, v35);
    if (v40)
    {
      v80 = v40;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      *(_QWORD *)&v120 = v16;
      v83 = sub_DF7C(v23, (uint64_t)v24);
      v84 = v16[1].super.isa;
      v85 = (v82 & 1) == 0;
      v86 = (uint64_t)v84 + v85;
      if (__OFADD__(v84, v85))
        goto LABEL_56;
      if (*(_QWORD *)v16[1].dataProviders >= v86)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v16 = (BAEventReporter *)v120;
          if ((v82 & 1) != 0)
            goto LABEL_48;
        }
        else
        {
          v99 = v82;
          sub_1CFDD8();
          v16 = (BAEventReporter *)v120;
          if ((v99 & 1) != 0)
            goto LABEL_48;
        }
      }
      else
      {
        v87 = v82;
        sub_1CF2F4(v86, isUniquelyReferenced_nonNull_native);
        v88 = sub_DF7C(v23, (uint64_t)v24);
        if ((v87 & 1) != (v89 & 1))
          goto LABEL_58;
        v83 = v88;
        v90 = v87;
        v16 = (BAEventReporter *)v120;
        if ((v90 & 1) != 0)
        {
LABEL_48:
          v91 = *(_QWORD *)v16[3].dataProviders;

          *(_QWORD *)(v91 + 8 * v83) = v80;
          goto LABEL_52;
        }
      }
      *((_QWORD *)&v16[4].super.isa + (v83 >> 6)) |= 1 << v83;
      v100 = (uint64_t *)((char *)v16[3].super.isa + 16 * v83);
      *v100 = v23;
      v100[1] = (uint64_t)v24;
      *(_QWORD *)(*(_QWORD *)v16[3].dataProviders + 8 * v83) = v80;
      v101 = v16[1].super.isa;
      v102 = __OFADD__(v101, 1);
      v103 = (Class)((char *)v101 + 1);
      if (v102)
        goto LABEL_57;
      v16[1].super.isa = v103;
      swift_bridgeObjectRetain(v24);
LABEL_52:
      swift_bridgeObjectRelease(v24, v92, v93, v94, v95, v96, v97, v98);
      swift_bridgeObjectRelease((BAEventReporter *)0x8000000000000000, v104, v105, v106, v107, v108, v109, v110);
      v4 = v117;
    }
    else
    {
      swift_bridgeObjectRetain(v16);
      v41 = sub_DF7C(v23, (uint64_t)v24);
      v43 = (char)v42;
      swift_bridgeObjectRelease(v16, v42, v44, v45, v46, v47, v48, v49);
      if ((v43 & 1) != 0)
      {
        v57 = swift_isUniquelyReferenced_nonNull_native(v16);
        *(_QWORD *)&v120 = v16;
        if ((v57 & 1) == 0)
        {
          sub_1CFDD8();
          v16 = (BAEventReporter *)v120;
        }
        swift_bridgeObjectRelease(*((BAEventReporter **)v16[3].super.isa + 2 * v41 + 1), v58, v59, v60, v61, v62, v63, v64);
        v65 = *(void **)(*(_QWORD *)v16[3].dataProviders + 8 * v41);
        sub_1E3B48(v41, (uint64_t)v16);

        swift_bridgeObjectRelease(v24, v66, v67, v68, v69, v70, v71, v72);
        swift_bridgeObjectRelease((BAEventReporter *)0x8000000000000000, v73, v74, v75, v76, v77, v78, v79);
      }
      else
      {
        swift_bridgeObjectRelease(v24, v50, v51, v52, v53, v54, v55, v56);
      }
    }
  }
  v19 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_55;
  }
  if (v19 >= v118)
    goto LABEL_53;
  v20 = *(_QWORD *)(v4 + 8 * v19);
  ++v15;
  if (v20)
    goto LABEL_20;
  v15 = v19 + 1;
  if (v19 + 1 >= v118)
    goto LABEL_53;
  v20 = *(_QWORD *)(v4 + 8 * v15);
  if (v20)
    goto LABEL_20;
  v15 = v19 + 2;
  if (v19 + 2 >= v118)
    goto LABEL_53;
  v20 = *(_QWORD *)(v4 + 8 * v15);
  if (v20)
  {
LABEL_20:
    v7 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
    goto LABEL_21;
  }
  v21 = v19 + 3;
  if (v21 >= v118)
  {
LABEL_53:
    swift_release((BAEventReporter *)a3, v8, v9, v10, v11, v12, v13, v14);
    type metadata accessor for BridgedSessionGroup(0);
    v111 = swift_bridgeObjectRetain(a2);
    v112 = static BridgedSessionGroup.default.getter(v111);
    v113 = objc_allocWithZone((Class)type metadata accessor for BridgedRawEvent(0));
    return BridgedRawEvent.init(name:sessionGroup:timestampGranularity:properties:)(a1, a2, v112, 2, v16);
  }
  v20 = *(_QWORD *)(v4 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v118)
      goto LABEL_53;
    v20 = *(_QWORD *)(v4 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1E41F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_29F018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E4238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t sub_1E425C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

void sub_1E426C(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  swift_release(*(BAEventReporter **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1E4274@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v3, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_1E42C8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(v3, v5, 1, 0);
  return swift_unknownObjectWeakAssign(v3, v2);
}

uint64_t type metadata accessor for BATracker()
{
  return objc_opt_self(_TtC13BookAnalytics9BATracker);
}

uint64_t method lookup function for BATracker(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BATracker);
}

uint64_t dispatch thunk of BATracker.__allocating_init(tracker:sessionOperationDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void destroy for Operation(uint64_t a1)
{
  unsigned int v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  int64_t v7;
  int64_t v8;
  id v9;

  v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 != 1)
  {
    sub_7DAC((_QWORD *)a1);
    swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 48), v3, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t initializeWithCopy for Operation(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a2 + 56);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v9;
    swift_bridgeObjectRetain(v9);
    v6 = 0;
  }
  *(_BYTE *)(a1 + 56) = v6;
  return a1;
}

uint64_t assignWithCopy for Operation(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  int64_t v9;
  int64_t v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
    {
      sub_7DAC((_QWORD *)a1);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 48), v5, v6, v7, v8, v9, v10, v11);
    }
    v12 = *(unsigned __int8 *)(a2 + 56);
    if (v12 >= 2)
      v12 = *(_DWORD *)a2 + 2;
    if (v12 == 1)
    {
      v13 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v13;
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v14;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
      v15 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v15;
      *(_BYTE *)(a1 + 56) = 0;
      swift_bridgeObjectRetain(v15);
    }
  }
  return a1;
}

uint64_t assignWithTake for Operation(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  int64_t v9;
  int64_t v10;
  id v11;
  unsigned int v12;
  char v13;
  __int128 v14;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
    {
      sub_7DAC((_QWORD *)a1);
      swift_bridgeObjectRelease(*(BAEventReporter **)(a1 + 48), v5, v6, v7, v8, v9, v10, v11);
    }
    v12 = *(unsigned __int8 *)(a2 + 56);
    if (v12 >= 2)
      v12 = *(_DWORD *)a2 + 2;
    if (v12 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    *(_BYTE *)(a1 + 56) = v13;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Operation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_1E4630(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1E464C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Operation()
{
  return &type metadata for Operation;
}

uint64_t sub_1E4688()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1E46AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1E46B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_1E46C8(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  swift_release((BAEventReporter *)(a1 & 0x7FFFFFFFFFFFFFFFLL), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1E46D0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Operation(a2, a1);
  return a2;
}

uint64_t sub_1E4714(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A7620, &enum case for SessionGroup.default(_:));
}

uint64_t static HideBookEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D20, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A7620, a1);
}

uint64_t sub_1E4754(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A7638, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static HideBookEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D28, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A7638, a1);
}

uint64_t HideBookEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HideBookEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for HideBookEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A76C0, (uint64_t)&nominal type descriptor for HideBookEvent);
}

uint64_t HideBookEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HideBookEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*HideBookEvent.eventData.modify())()
{
  type metadata accessor for HideBookEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t HideBookEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for HideBookEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t HideBookEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HideBookEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for HideBookEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A7750, (uint64_t)&nominal type descriptor for HideBookEvent.Model);
}

uint64_t HideBookEvent.Model.init(contentData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  char v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_WORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 60);
  v11 = *(_BYTE *)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 68);
  v13 = *(_BYTE *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 77);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  *(_WORD *)(a3 + 56) = v9;
  *(_DWORD *)(a3 + 60) = v10;
  *(_BYTE *)(a3 + 64) = v11;
  *(_DWORD *)(a3 + 68) = v12;
  *(_BYTE *)(a3 + 72) = v13;
  *(_DWORD *)(a3 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a3 + 77) = v14;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 80);
  v15 = a3 + *(int *)(type metadata accessor for HideBookEvent.Model(0) + 20);
  v16 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a2, v16);
}

uint64_t sub_1E49EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E4BF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E4A14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E4BF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HideBookEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  int v41;
  char v42;
  __int128 v43;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A7650);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1E4BF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HideBookEvent.Model.CodingKeys, &type metadata for HideBookEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v31[0] = *(_QWORD *)v4;
  v31[1] = v13;
  v32 = v14;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = v19;
  v38 = v20;
  v39 = v21;
  v40 = v22;
  v41 = *(_DWORD *)(v4 + 73);
  v42 = v23;
  v43 = *(_OWORD *)(v4 + 80);
  v30 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v30, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = v4 + *(int *)(type metadata accessor for HideBookEvent.Model(0) + 20);
    LOBYTE(v31[0]) = 1;
    v26 = type metadata accessor for EventData(0);
    v27 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, v31, v6, v26, v27);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1E4BF8()
{
  unint64_t result;

  result = qword_2A7658;
  if (!qword_2A7658)
  {
    result = swift_getWitnessTable("\r\r\a", &type metadata for HideBookEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7658);
  }
  return result;
}

void HideBookEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  char v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;
  char v50;

  v32 = a2;
  v33 = type metadata accessor for EventData(0);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = sub_71B4(&qword_2A7660);
  v5 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HideBookEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_1E4BF8();
  v34 = v7;
  v14 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HideBookEvent.Model.CodingKeys, &type metadata for HideBookEvent.Model.CodingKeys, v13, v12, v11);
  if (v14)
  {
    sub_7DAC(a1);
  }
  else
  {
    v36 = v8;
    v15 = v33;
    v50 = 0;
    v16 = sub_1779C();
    v17 = v34;
    v18 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, &type metadata for ContentData, &v50, v35, &type metadata for ContentData, v16);
    v19 = v37[1];
    v20 = v38;
    v21 = v39;
    v22 = v40;
    v23 = v41;
    v24 = v42;
    v25 = v43;
    v26 = v44;
    v27 = v45;
    v28 = v46;
    v29 = v48;
    *(_QWORD *)v10 = v37[0];
    *((_QWORD *)v10 + 1) = v19;
    v10[16] = v20;
    *(_OWORD *)(v10 + 24) = v21;
    *((_QWORD *)v10 + 5) = v22;
    *((_QWORD *)v10 + 6) = v23;
    *((_WORD *)v10 + 28) = v24;
    *((_DWORD *)v10 + 15) = v25;
    v10[64] = v26;
    *((_DWORD *)v10 + 17) = v27;
    v10[72] = v28;
    *(_DWORD *)(v10 + 73) = v47;
    v10[77] = v29;
    *((_OWORD *)v10 + 5) = v49;
    LOBYTE(v37[0]) = 1;
    v30 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v15, v37, v18, v15, v30);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v31 + 32))(&v10[*(int *)(v36 + 20)], v4, v15);
    sub_1E4F08((uint64_t)v10, v32);
    sub_7DAC(a1);
    sub_1E4F4C((uint64_t)v10);
  }
}

uint64_t sub_1E4F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HideBookEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E4F4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HideBookEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1E4F88(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  HideBookEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1E4F9C(_QWORD *a1)
{
  return HideBookEvent.Model.encode(to:)(a1);
}

uint64_t sub_1E4FB0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D20, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A7620, (uint64_t)sub_1E4714, a1);
}

uint64_t sub_1E4FD4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D28, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A7638, (uint64_t)sub_1E4754, a1);
}

uint64_t getEnumTagSinglePayload for HideBookEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E5004);
}

uint64_t sub_1E5004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for HideBookEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E508C);
}

uint64_t sub_1E508C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for HideBookEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E511C);
}

uint64_t sub_1E511C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HideBookEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E51A4);
}

uint64_t sub_1E51A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1E5218(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HideBookEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1E52D8 + 4 * byte_21BC5D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1E530C + 4 * asc_21BC58[v4]))();
}

uint64_t sub_1E530C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E5314(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E531CLL);
  return result;
}

uint64_t sub_1E5328(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E5330);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1E5334(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E533C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HideBookEvent.Model.CodingKeys()
{
  return &type metadata for HideBookEvent.Model.CodingKeys;
}

unint64_t sub_1E535C()
{
  unint64_t result;

  result = qword_2A7788;
  if (!qword_2A7788)
  {
    result = swift_getWitnessTable("%\r\a", &type metadata for HideBookEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7788);
  }
  return result;
}

unint64_t sub_1E53A4()
{
  unint64_t result;

  result = qword_2A7790;
  if (!qword_2A7790)
  {
    result = swift_getWitnessTable("m\r\a", &type metadata for HideBookEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7790);
  }
  return result;
}

unint64_t sub_1E53EC()
{
  unint64_t result;

  result = qword_2A7798;
  if (!qword_2A7798)
  {
    result = swift_getWitnessTable("U\r\a", &type metadata for HideBookEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7798);
  }
  return result;
}

uint64_t sub_1E5430(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A77A0, &enum case for SessionGroup.default(_:));
}

uint64_t static PortraitOrientationLockEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D30, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A77A0, a1);
}

uint64_t sub_1E5470(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A77B8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PortraitOrientationLockEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D38, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A77B8, a1);
}

uint64_t sub_1E54B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E5608();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E54D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E5608();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PortraitOrientationLockEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_71B4(&qword_2A77D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1E5608();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PortraitOrientationLockEvent.Model.CodingKeys, &type metadata for PortraitOrientationLockEvent.Model.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for EventData(0);
  v12 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1E5608()
{
  unint64_t result;

  result = qword_2A77D8;
  if (!qword_2A77D8)
  {
    result = swift_getWitnessTable(aY_14, &type metadata for PortraitOrientationLockEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A77D8);
  }
  return result;
}

uint64_t PortraitOrientationLockEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for EventData(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_71B4(&qword_2A77E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PortraitOrientationLockEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_1E5608();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PortraitOrientationLockEvent.Model.CodingKeys, &type metadata for PortraitOrientationLockEvent.Model.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_1E581C((uint64_t)v11, v20);
  }
  return sub_7DAC(a1);
}

uint64_t type metadata accessor for PortraitOrientationLockEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A78D0, (uint64_t)&nominal type descriptor for PortraitOrientationLockEvent.Model);
}

uint64_t sub_1E581C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PortraitOrientationLockEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E5860@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PortraitOrientationLockEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1E5874@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D30, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A77A0, (uint64_t)sub_1E5430, a1);
}

uint64_t sub_1E5898@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D38, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A77B8, (uint64_t)sub_1E5470, a1);
}

uint64_t getEnumTagSinglePayload for PortraitOrientationLockEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E58C8);
}

uint64_t sub_1E58C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PortraitOrientationLockEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E5914);
}

uint64_t sub_1E5914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PortraitOrientationLockEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A7840, (uint64_t)&nominal type descriptor for PortraitOrientationLockEvent);
}

uint64_t getEnumTagSinglePayload for PortraitOrientationLockEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E5978);
}

uint64_t sub_1E5978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PortraitOrientationLockEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E59C0);
}

uint64_t sub_1E59C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PortraitOrientationLockEvent.Model.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1E5A40 + 4 * byte_21BE60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1E5A60 + 4 * byte_21BE65[v4]))();
}

_BYTE *sub_1E5A40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1E5A60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1E5A68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1E5A70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1E5A78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1E5A80(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PortraitOrientationLockEvent.Model.CodingKeys()
{
  return &type metadata for PortraitOrientationLockEvent.Model.CodingKeys;
}

unint64_t sub_1E5AA0()
{
  unint64_t result;

  result = qword_2A7908;
  if (!qword_2A7908)
  {
    result = swift_getWitnessTable(byte_21BFD0, &type metadata for PortraitOrientationLockEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7908);
  }
  return result;
}

unint64_t sub_1E5AE8()
{
  unint64_t result;

  result = qword_2A7910;
  if (!qword_2A7910)
  {
    result = swift_getWitnessTable(byte_21BF40, &type metadata for PortraitOrientationLockEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7910);
  }
  return result;
}

unint64_t sub_1E5B30()
{
  unint64_t result;

  result = qword_2A7918;
  if (!qword_2A7918)
  {
    result = swift_getWitnessTable(byte_21BF68, &type metadata for PortraitOrientationLockEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7918);
  }
  return result;
}

uint64_t sub_1E5B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_71B4(&qword_2A7940);
  sub_9260(v0, qword_2A7920);
  v1 = sub_705C(v0, (uint64_t)qword_2A7920);
  v2 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_1E5BDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_295D40 != -1)
    swift_once(&qword_295D40, sub_1E5B74);
  v2 = sub_71B4(&qword_2A7940);
  v3 = sub_705C(v2, (uint64_t)qword_2A7920);
  return sub_1E5E00(v3, a1);
}

_QWORD *EnvironmentValues.pageMetrics.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1E5C70();
  return EnvironmentValues.subscript.getter(a1, &type metadata for PageMetricsKey, &type metadata for PageMetricsKey, v2);
}

unint64_t sub_1E5C70()
{
  unint64_t result;

  result = qword_2A7938;
  if (!qword_2A7938)
  {
    result = swift_getWitnessTable(asc_21C05C, &type metadata for PageMetricsKey);
    atomic_store(result, (unint64_t *)&qword_2A7938);
  }
  return result;
}

uint64_t sub_1E5CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_71B4(&qword_2A7940);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v10 - v6;
  sub_1E5E00(a1, (uint64_t)&v10 - v6);
  sub_1E5E00((uint64_t)v7, (uint64_t)v5);
  v8 = sub_1E5C70();
  EnvironmentValues.subscript.setter(v5, &type metadata for PageMetricsKey, &type metadata for PageMetricsKey, v8);
  return sub_1E5E48((uint64_t)v7);
}

uint64_t EnvironmentValues.pageMetrics.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v7;

  v2 = sub_71B4(&qword_2A7940);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E5E00(a1, (uint64_t)v4);
  v5 = sub_1E5C70();
  EnvironmentValues.subscript.setter(v4, &type metadata for PageMetricsKey, &type metadata for PageMetricsKey, v5);
  return sub_1E5E48(a1);
}

uint64_t sub_1E5E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_2A7940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E5E48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_2A7940);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*EnvironmentValues.pageMetrics.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  unint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_71B4(&qword_2A7940) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v5 = malloc(v4);
  v3[3] = v5;
  v6 = sub_1E5C70();
  v3[4] = v6;
  EnvironmentValues.subscript.getter(v5, &type metadata for PageMetricsKey, &type metadata for PageMetricsKey, v6);
  return sub_1E5F28;
}

void sub_1E5F28(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = *a1;
  sub_1E5E00((*a1)[3], (*a1)[2]);
  v4 = (void *)v3[3];
  v5 = v3[4];
  v6 = (void *)v3[1];
  v7 = (void *)v3[2];
  if ((a2 & 1) != 0)
  {
    sub_1E5E00(v3[2], v3[1]);
    EnvironmentValues.subscript.setter(v6, &type metadata for PageMetricsKey, &type metadata for PageMetricsKey, v5);
    sub_1E5E48((uint64_t)v7);
  }
  else
  {
    EnvironmentValues.subscript.setter(v3[2], &type metadata for PageMetricsKey, &type metadata for PageMetricsKey, v3[4]);
  }
  sub_1E5E48((uint64_t)v4);
  free(v4);
  free(v7);
  free(v6);
  free(v3);
}

_QWORD *sub_1E5FE4@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1E5C70();
  return EnvironmentValues.subscript.getter(a1, &type metadata for PageMetricsKey, &type metadata for PageMetricsKey, v2);
}

ValueMetadata *type metadata accessor for PageMetricsKey()
{
  return &type metadata for PageMetricsKey;
}

unint64_t sub_1E6034()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0xD000000000000013;
}

uint64_t sub_1E6074@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1E6578(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1E6098(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E6208();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E60C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E6208();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingGoalsDurationData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_71B4(&qword_2A7948);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1E6208();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingGoalsDurationData.CodingKeys, &type metadata for ReadingGoalsDurationData.CodingKeys, v11, v9, v10);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v16, v4);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v15, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1E6208()
{
  unint64_t result;

  result = qword_2A7950;
  if (!qword_2A7950)
  {
    result = swift_getWitnessTable(asc_21C24C, &type metadata for ReadingGoalsDurationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7950);
  }
  return result;
}

uint64_t ReadingGoalsDurationData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_71B4(&qword_2A7958);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1E6208();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingGoalsDurationData.CodingKeys, &type metadata for ReadingGoalsDurationData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1E639C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReadingGoalsDurationData.init(from:)(a1, a2);
}

uint64_t sub_1E63B0(_QWORD *a1)
{
  return ReadingGoalsDurationData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ReadingGoalsDurationData()
{
  return &type metadata for ReadingGoalsDurationData;
}

uint64_t storeEnumTagSinglePayload for ReadingGoalsDurationData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1E6420 + 4 * byte_21C0A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1E6454 + 4 * byte_21C0A0[v4]))();
}

uint64_t sub_1E6454(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E645C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E6464);
  return result;
}

uint64_t sub_1E6470(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E6478);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1E647C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E6484(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingGoalsDurationData.CodingKeys()
{
  return &type metadata for ReadingGoalsDurationData.CodingKeys;
}

unint64_t sub_1E64A4()
{
  unint64_t result;

  result = qword_2A7960;
  if (!qword_2A7960)
  {
    result = swift_getWitnessTable(asc_21C224, &type metadata for ReadingGoalsDurationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7960);
  }
  return result;
}

unint64_t sub_1E64EC()
{
  unint64_t result;

  result = qword_2A7968;
  if (!qword_2A7968)
  {
    result = swift_getWitnessTable(byte_21C194, &type metadata for ReadingGoalsDurationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7968);
  }
  return result;
}

unint64_t sub_1E6534()
{
  unint64_t result;

  result = qword_2A7970;
  if (!qword_2A7970)
  {
    result = swift_getWitnessTable(byte_21C1BC, &type metadata for ReadingGoalsDurationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7970);
  }
  return result;
}

uint64_t sub_1E6578(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x8000000000222D00;
    if (a2 == 0x8000000000222D00)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000222D00, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000000222D20)
  {
    swift_bridgeObjectRelease(0x8000000000222D20);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222D20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::BackgroundColor_optional __swiftcall BackgroundColor.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::BackgroundColor_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2695B0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 11;
  if (v5 < 0xB)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t BackgroundColor.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1E66E8 + 4 * byte_21C29C[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1E66E8()
{
  return 0x6574696877;
}

uint64_t sub_1E66FC()
{
  return 0x6169706573;
}

uint64_t sub_1E6710()
{
  return 2036691559;
}

uint64_t sub_1E6720()
{
  return 0x6B63616C62;
}

uint64_t sub_1E6734()
{
  return 0x6C616E696769726FLL;
}

uint64_t sub_1E674C()
{
  return 0x7465697571;
}

uint64_t sub_1E6760()
{
  return 0x7265706170;
}

uint64_t sub_1E6774()
{
  return 0x7375636F66;
}

uint64_t sub_1E6788()
{
  return 1684828002;
}

uint64_t sub_1E6798()
{
  return 1835819363;
}

unint64_t sub_1E67AC()
{
  unint64_t result;

  result = qword_2A7978;
  if (!qword_2A7978)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BackgroundColor, &type metadata for BackgroundColor);
    atomic_store(result, (unint64_t *)&qword_2A7978);
  }
  return result;
}

Swift::Int sub_1E67F0()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_1ECC3C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1E6834(uint64_t a1)
{
  char *v1;

  sub_1ECC3C(a1, *v1);
}

Swift::Int sub_1E683C(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1ECC3C((uint64_t)v4, v2);
  return Hasher._finalize()();
}

BookAnalytics::BackgroundColor_optional sub_1E687C(Swift::String *a1)
{
  return BackgroundColor.init(rawValue:)(*a1);
}

uint64_t sub_1E6888@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = BackgroundColor.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1E68AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1E6A20();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1E6908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1E6A20();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for BackgroundColor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1E69A0 + 4 * byte_21C2AC[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1E69D4 + 4 * byte_21C2A7[v4]))();
}

uint64_t sub_1E69D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E69DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E69E4);
  return result;
}

uint64_t sub_1E69F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E69F8);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1E69FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E6A04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundColor()
{
  return &type metadata for BackgroundColor;
}

unint64_t sub_1E6A20()
{
  unint64_t result;

  result = qword_2A7980;
  if (!qword_2A7980)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BackgroundColor, &type metadata for BackgroundColor);
    atomic_store(result, (unint64_t *)&qword_2A7980);
  }
  return result;
}

uint64_t ActionModel.instrumentingAppAnalyticsClickEvent(using:refId:dataStack:sizeProvider:clickData:additionalData:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  id v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[40];
  _BYTE v47[40];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v44 = a8;
  v43 = a6;
  v16 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ClosureAction(0);
  __chkstk_darwin(v19);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a3;
  v24 = a5[1];
  v48 = *a5;
  v49 = v24;
  v25 = a5[3];
  v50 = a5[2];
  v51 = v25;
  if (a1)
  {
    v42 = v20;
    v26 = a1;
    static ActionMetrics.notInstrumented.getter();
    sub_3A82C(a4, (uint64_t)v47, &qword_296200);
    sub_3A82C(a2, (uint64_t)v46, &qword_2A7988);
    v27 = swift_allocObject(&unk_28CFF8, 184, 7);
    *(_QWORD *)(v27 + 16) = v26;
    v28 = v49;
    *(_OWORD *)(v27 + 24) = v48;
    *(_OWORD *)(v27 + 40) = v28;
    v29 = v51;
    *(_OWORD *)(v27 + 56) = v50;
    *(_OWORD *)(v27 + 72) = v29;
    *(_QWORD *)(v27 + 88) = v23;
    sub_1B1BC((uint64_t)v47, v27 + 96, &qword_296200);
    v30 = v43;
    *(_QWORD *)(v27 + 136) = v43;
    sub_1B1BC((uint64_t)v46, v27 + 144, &qword_2A7988);
    v31 = v26;
    sub_1E6F30(&v48);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v30);
    ClosureAction.init(actionMetrics:body:)(v18, sub_1E6F04, v27);
    v33 = v44;
    v32 = v45;
    dispatch thunk of ActionModel.actionMetrics.getter(a7, v44);
    v34 = sub_71B4(&qword_2A7990);
    v35 = swift_allocObject(v34, 112, 7);
    *(_OWORD *)(v35 + 16) = xmmword_1F4480;
    *(_QWORD *)(v35 + 56) = v19;
    *(_QWORD *)(v35 + 64) = &protocol witness table for ClosureAction;
    v36 = sub_16E508((_QWORD *)(v35 + 32));
    v37 = v42;
    (*(void (**)(_QWORD *, char *, uint64_t))(v42 + 16))(v36, v22, v19);
    *(_QWORD *)(v35 + 96) = a7;
    *(_QWORD *)(v35 + 104) = v33;
    v38 = sub_16E508((_QWORD *)(v35 + 72));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v38, v32, a7);
    a9[3] = type metadata accessor for CompoundAction(0);
    a9[4] = &protocol witness table for CompoundAction;
    sub_16E508(a9);
    CompoundAction.init(actionMetrics:subactions:)(v18, v35);

    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v22, v19);
  }
  else
  {
    v40 = v44;
    a9[3] = a7;
    a9[4] = v40;
    v41 = sub_16E508(a9);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v41, v45, a7);
  }
}

void sub_1E6D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;
  _BYTE v31[40];
  _BYTE v32[40];

  v11 = BATracker.copy()();
  if (v11)
  {
    v12 = v11;
    sub_3A82C(a4, (uint64_t)v32, &qword_296200);
    sub_3A82C(a6, (uint64_t)v31, &qword_2A7988);
    v13 = swift_allocObject(&unk_28D020, 176, 7);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v13 + 32) = v14;
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v13 + 64) = v15;
    *(_QWORD *)(v13 + 80) = a3;
    sub_1B1BC((uint64_t)v32, v13 + 88, &qword_296200);
    *(_QWORD *)(v13 + 128) = a5;
    sub_1B1BC((uint64_t)v31, v13 + 136, &qword_2A7988);
    v16 = (BAEventReporter *)swift_allocObject(&unk_28D048, 32, 7);
    v16[1].super.isa = (Class)sub_1E740C;
    *(_QWORD *)v16[1].dataProviders = v13;
    sub_1E6F30((_QWORD *)a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_retain(v13);
    Tracker.transaction(block:)(sub_53E94, v16);
    swift_release((BAEventReporter *)v13, v17, v18, v19, v20, v21, v22, v23);

    swift_release(v16, v24, v25, v26, v27, v28, v29, v30);
  }
}

uint64_t sub_1E6E98()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  int64_t v5;
  int64_t v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  int64_t v33;
  int64_t v34;
  void *v35;

  swift_bridgeObjectRelease(*(BAEventReporter **)(v0 + 32), v1, v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease(*(BAEventReporter **)(v0 + 56), v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(*(BAEventReporter **)(v0 + 80), v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(*(BAEventReporter **)(v0 + 88), v22, v23, v24, v25, v26, v27, v28);
  if (*(_QWORD *)(v0 + 120))
    sub_7DAC((_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(BAEventReporter **)(v0 + 136), v29, v30, v31, v32, v33, v34, v35);
  if (*(_QWORD *)(v0 + 168))
    sub_7DAC((_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 184, 7);
}

void sub_1E6F04()
{
  uint64_t *v0;

  sub_1E6D40(v0[2], (uint64_t)(v0 + 3), v0[11], (uint64_t)(v0 + 12), v0[17], (uint64_t)(v0 + 18));
}

_QWORD *sub_1E6F30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[4];
  swift_bridgeObjectRetain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1E6F78(uint64_t a1, __int128 *a2, BAEventReporter *a3, uint64_t a4, BAEventReporter *a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  Class isa;
  BAEventReporter *v34;
  uint64_t v35;
  Class v36;
  _QWORD *v37;
  uint64_t v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  const char *v46;
  void *v47;
  void *v48;
  void *v49;
  int64_t v50;
  int64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  __int128 *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  BAEventReporter *v71;
  void (*v73)(__int128 *, __int128 *, uint64_t, uint64_t);
  uint64_t v74;
  void (*v75)(uint64_t);
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v9 = a2[1];
  v88 = *a2;
  v89 = v9;
  v10 = a2[3];
  v90 = a2[2];
  v91 = v10;
  v11 = sub_71B4(&qword_299FD0);
  v12 = type metadata accessor for DataEventTrait(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 32) & ~v14;
  v77 = v14 | 7;
  v78 = v15 + *(_QWORD *)(v13 + 72);
  v16 = swift_allocObject(v11, v78, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  v76 = enum case for DataEventTrait.onlyOnce(_:);
  v75 = *(void (**)(uint64_t))(v13 + 104);
  v75(v16 + v15);
  v17 = sub_1BE718();
  AccessTracker.push<A>(data:traits:file:line:)(&v88, v16, 0xD00000000000006FLL, 0x8000000000222D40, 37, &type metadata for ClickData, v17);
  swift_bridgeObjectRelease((BAEventReporter *)v16, v18, v19, v20, v21, v22, v23, v24);
  v74 = a4;
  v25 = swift_bridgeObjectRetain(a3);
  sub_1E7448(v25, (void (*)(_QWORD *, uint64_t))sub_1DBE0C);
  swift_bridgeObjectRelease(a3, v26, v27, v28, v29, v30, v31, v32);
  isa = a5[1].super.isa;
  if (isa)
  {
    v34 = a5 + 2;
    v71 = a5;
    swift_bridgeObjectRetain(a5);
    while (1)
    {
      sub_1D055C((uint64_t)v34, (uint64_t)&v88);
      v53 = sub_71B4(&qword_2A6F00);
      v54 = sub_71B4(&qword_2A6F08);
      if (swift_dynamicCast(&v82, &v88, v53, v54, 6))
      {
        sub_8929C(&v82, (uint64_t)v85);
        sub_3A82C(v74, (uint64_t)&v82, &qword_296200);
        if (*((_QWORD *)&v83 + 1))
        {
          sub_8929C(&v82, (uint64_t)&v88);
          sub_3A82C(a6, (uint64_t)&v79, &qword_2A7988);
          if (*((_QWORD *)&v80 + 1))
          {
            v82 = v79;
            v83 = v80;
            v84 = v81;
            v55 = v86;
            v56 = v87;
            sub_7988(v85, v86);
            v73 = *(void (**)(__int128 *, __int128 *, uint64_t, uint64_t))(v56 + 24);
            *((_QWORD *)&v80 + 1) = v55;
            v81 = v56;
            v57 = sub_16E508(&v79);
            v73(&v82, &v88, v55, v56);
            v58 = swift_allocObject(v11, v78, v77);
            *(_OWORD *)(v58 + 16) = xmmword_1F5FF0;
            ((void (*)(uint64_t, _QWORD, uint64_t))v75)(v58 + v15, v76, v12);
            AccessTracker.push<A>(data:traits:file:line:)(v57, v58, 0xD00000000000006FLL, 0x8000000000222D40, 61, v55, *(_QWORD *)(v56 + 8));
            swift_bridgeObjectRelease((BAEventReporter *)v58, v59, v60, v61, v62, v63, v64, v65);
            sub_E1F0((uint64_t)&v82);
            sub_7DAC(&v88);
            sub_7DAC(&v79);
            sub_7DAC(v85);
            goto LABEL_5;
          }
          sub_7DAC(&v88);
          v66 = &v79;
          v67 = &qword_2A7988;
        }
        else
        {
          v66 = &v82;
          v67 = &qword_296200;
        }
        sub_88F50((uint64_t)v66, v67);
        sub_7DAC(v85);
      }
      else
      {
        v84 = 0;
        v82 = 0u;
        v83 = 0u;
        sub_88F50((uint64_t)&v82, &qword_2A6F10);
      }
      v35 = *(_QWORD *)v34[1].dataProviders;
      v36 = v34[2].super.isa;
      v37 = sub_7988(v34, v35);
      v38 = swift_allocObject(v11, v78, v77);
      *(_OWORD *)(v38 + 16) = xmmword_1F5FF0;
      ((void (*)(uint64_t, _QWORD, uint64_t))v75)(v38 + v15, v76, v12);
      AccessTracker.push<A>(data:traits:file:line:)(v37, v38, 0xD00000000000006FLL, 0x8000000000222D40, 63, v35, v36);
      swift_bridgeObjectRelease((BAEventReporter *)v38, v39, v40, v41, v42, v43, v44, v45);
LABEL_5:
      v34 += 3;
      isa = (Class)((char *)isa - 1);
      if (!isa)
      {
        swift_bridgeObjectRelease(v71, v46, v47, v48, v49, v50, v51, v52);
        break;
      }
    }
  }
  v68 = type metadata accessor for ClickEvent(0);
  v69 = sub_1E75E4();
  v88 = 0u;
  v89 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v68, 0, &v88, 0, 0, v68, v69);
  return sub_88F50((uint64_t)&v88, &qword_2983D0);
}

uint64_t sub_1E73A8(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  const char *v30;
  void *v31;
  void *v32;
  void *v33;
  int64_t v34;
  int64_t v35;
  void *v36;

  swift_bridgeObjectRelease(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(BAEventReporter **)(v8 + 48), v9, v10, v11, v12, v13, v14, v15);
  swift_bridgeObjectRelease(*(BAEventReporter **)(v8 + 72), v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(*(BAEventReporter **)(v8 + 80), v23, v24, v25, v26, v27, v28, v29);
  if (*(_QWORD *)(v8 + 112))
    sub_7DAC((_QWORD *)(v8 + 88));
  swift_bridgeObjectRelease(*(BAEventReporter **)(v8 + 128), v30, v31, v32, v33, v34, v35, v36);
  if (*(_QWORD *)(v8 + 160))
    sub_7DAC((_QWORD *)(v8 + 136));
  return swift_deallocObject(v8, 176, 7);
}

uint64_t sub_1E740C(uint64_t a1)
{
  uint64_t v1;

  return sub_1E6F78(a1, (__int128 *)(v1 + 16), *(BAEventReporter **)(v1 + 80), v1 + 88, *(BAEventReporter **)(v1 + 128), v1 + 136);
}

uint64_t sub_1E7424(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

void sub_1E7448(uint64_t a1, void (*a2)(_QWORD *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  const char *v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  BOOL v14;
  void *v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD v25[3];

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v16 = 0;
  while (1)
  {
    if (v7)
    {
      v17 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_5;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v8)
      goto LABEL_23;
    v23 = *(_QWORD *)(v4 + 8 * v22);
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v8)
        goto LABEL_23;
      v23 = *(_QWORD *)(v4 + 8 * v16);
      if (!v23)
      {
        v16 = v22 + 2;
        if (v22 + 2 >= v8)
          goto LABEL_23;
        v23 = *(_QWORD *)(v4 + 8 * v16);
        if (!v23)
        {
          v16 = v22 + 3;
          if (v22 + 3 >= v8)
            goto LABEL_23;
          v23 = *(_QWORD *)(v4 + 8 * v16);
          if (!v23)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_5:
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v18);
    v20 = v19[1];
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18);
    v25[0] = *v19;
    v25[1] = v20;
    v25[2] = v21;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    a2(v25, v21);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
  }
  v24 = v22 + 4;
  if (v24 >= v8)
  {
LABEL_23:
    swift_release((BAEventReporter *)a1, v9, v10, v11, v12, v13, v14, v15);
    return;
  }
  v23 = *(_QWORD *)(v4 + 8 * v24);
  if (v23)
  {
    v16 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v8)
      goto LABEL_23;
    v23 = *(_QWORD *)(v4 + 8 * v16);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

unint64_t sub_1E75E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2A6680;
  if (!qword_2A6680)
  {
    v1 = type metadata accessor for ClickEvent(255);
    result = swift_getWitnessTable(protocol conformance descriptor for ClickEvent, v1);
    atomic_store(result, (unint64_t *)&qword_2A6680);
  }
  return result;
}

uint64_t sub_1E762C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A7998, &enum case for SessionGroup.default(_:));
}

uint64_t static DislikeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D48, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A7998, a1);
}

uint64_t sub_1E766C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A79B0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static DislikeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295D50, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A79B0, a1);
}

uint64_t DislikeEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DislikeEvent(0) + 20);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DislikeEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A7A38, (uint64_t)&nominal type descriptor for DislikeEvent);
}

uint64_t DislikeEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DislikeEvent(0) + 20);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DislikeEvent.suggestionData.modify())()
{
  type metadata accessor for DislikeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DislikeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DislikeEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DislikeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DislikeEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DislikeEvent.eventData.modify())()
{
  type metadata accessor for DislikeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DislikeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for DislikeEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
}

uint64_t DislikeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DislikeEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DislikeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A7AD0, (uint64_t)&nominal type descriptor for DislikeEvent.Model);
}

uint64_t DislikeEvent.Model.init(contentData:suggestionData:eventData:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  v16 = *a2;
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_BYTE *)(a4 + 96) = v16;
  v17 = a4 + *(int *)(type metadata accessor for DislikeEvent.Model(0) + 24);
  v18 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a3, v18);
}

uint64_t sub_1E7A18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E7C64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E7A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E7C64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DislikeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;
  char v41;
  int v42;
  char v43;
  __int128 v44;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A79C8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1E7C64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DislikeEvent.Model.CodingKeys, &type metadata for DislikeEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v32[0] = *(_QWORD *)v4;
  v32[1] = v13;
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v40 = v21;
  v41 = v22;
  v42 = *(_DWORD *)(v4 + 73);
  v43 = v23;
  v44 = *(_OWORD *)(v4 + 80);
  v31 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v31, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    LOBYTE(v32[0]) = *(_BYTE *)(v4 + 96);
    v31 = 1;
    v25 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v6, &type metadata for SuggestionData, v25);
    v26 = v4 + *(int *)(type metadata accessor for DislikeEvent.Model(0) + 24);
    LOBYTE(v32[0]) = 2;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v32, v6, v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1E7C64()
{
  unint64_t result;

  result = qword_2A79D0;
  if (!qword_2A79D0)
  {
    result = swift_getWitnessTable(byte_21C5B4, &type metadata for DislikeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A79D0);
  }
  return result;
}

void DislikeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[2];
  char v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  __int128 v53;
  char v54;

  v35 = a2;
  v36 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_71B4(&qword_2A79D8);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DislikeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v39 = a1;
  sub_7988(a1, v12);
  v14 = sub_1E7C64();
  v37 = v8;
  v15 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DislikeEvent.Model.CodingKeys, &type metadata for DislikeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v39);
  }
  else
  {
    v40 = v9;
    v16 = v6;
    v17 = v5;
    v18 = v36;
    v54 = 0;
    v19 = sub_1779C();
    v21 = v37;
    v20 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, &type metadata for ContentData, &v54, v38, &type metadata for ContentData, v19);
    v22 = v41[1];
    v23 = v42;
    v24 = v43;
    v25 = v44;
    v26 = v45;
    v27 = v46;
    v28 = v47;
    v29 = v48;
    v30 = v49;
    v31 = v50;
    v32 = v52;
    *(_QWORD *)v11 = v41[0];
    *((_QWORD *)v11 + 1) = v22;
    v11[16] = v23;
    *(_OWORD *)(v11 + 24) = v24;
    *((_QWORD *)v11 + 5) = v25;
    *((_QWORD *)v11 + 6) = v26;
    *((_WORD *)v11 + 28) = v27;
    *((_DWORD *)v11 + 15) = v28;
    v11[64] = v29;
    *((_DWORD *)v11 + 17) = v30;
    v11[72] = v31;
    *(_DWORD *)(v11 + 73) = v51;
    v11[77] = v32;
    *((_OWORD *)v11 + 5) = v53;
    v54 = 1;
    v33 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, &type metadata for SuggestionData, &v54, v20, &type metadata for SuggestionData, v33);
    v11[96] = v41[0];
    LOBYTE(v41[0]) = 2;
    v34 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v41, v20, v18, v34);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v40 + 24)], v17, v18);
    sub_1E7FCC((uint64_t)v11, v35);
    sub_7DAC(v39);
    sub_1E8010((uint64_t)v11);
  }
}

uint64_t sub_1E7FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DislikeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E8010(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DislikeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1E804C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DislikeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1E8060(_QWORD *a1)
{
  return DislikeEvent.Model.encode(to:)(a1);
}

uint64_t sub_1E8074@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D48, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A7998, (uint64_t)sub_1E762C, a1);
}

uint64_t sub_1E8098@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295D50, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A79B0, (uint64_t)sub_1E766C, a1);
}

uint64_t getEnumTagSinglePayload for DislikeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E80C8);
}

uint64_t sub_1E80C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296F78);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for DislikeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E8178);
}

uint64_t sub_1E8178(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296F78);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for DislikeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E8230);
}

uint64_t sub_1E8230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DislikeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E82B8);
}

uint64_t sub_1E82B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1E832C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_21C4D8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DislikeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1E83F4 + 4 * byte_21C3ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1E8428 + 4 * byte_21C3E8[v4]))();
}

uint64_t sub_1E8428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E8430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E8438);
  return result;
}

uint64_t sub_1E8444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E844CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1E8450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E8458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DislikeEvent.Model.CodingKeys()
{
  return &type metadata for DislikeEvent.Model.CodingKeys;
}

unint64_t sub_1E8478()
{
  unint64_t result;

  result = qword_2A7B10;
  if (!qword_2A7B10)
  {
    result = swift_getWitnessTable(byte_21C58C, &type metadata for DislikeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B10);
  }
  return result;
}

unint64_t sub_1E84C0()
{
  unint64_t result;

  result = qword_2A7B18;
  if (!qword_2A7B18)
  {
    result = swift_getWitnessTable(a5_6, &type metadata for DislikeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B18);
  }
  return result;
}

unint64_t sub_1E8508()
{
  unint64_t result;

  result = qword_2A7B20;
  if (!qword_2A7B20)
  {
    result = swift_getWitnessTable(byte_21C524, &type metadata for DislikeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B20);
  }
  return result;
}

BookAnalytics::AudioPlaybackSpeedData __swiftcall AudioPlaybackSpeedData.init(playbackSpeed:previousPlaybackSpeed:)(Swift::Float playbackSpeed, Swift::Float previousPlaybackSpeed)
{
  Swift::Float *v2;
  BookAnalytics::AudioPlaybackSpeedData result;

  *v2 = playbackSpeed;
  v2[1] = previousPlaybackSpeed;
  result.previousPlaybackSpeed = previousPlaybackSpeed;
  result.playbackSpeed = playbackSpeed;
  return result;
}

BOOL static AudioPlaybackSpeedData.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

unint64_t sub_1E8580()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001CLL;
  else
    return 0xD00000000000001ELL;
}

uint64_t sub_1E85C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1E8B10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1E85E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E8750();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E860C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E8750();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ScrollData.encode(to:)(_QWORD *a1)
{
  float *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_71B4(&qword_2A7B28);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1E8750();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScrollData.CodingKeys, &type metadata for ScrollData.CodingKeys, v12, v10, v11);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v16, v4, v9);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v15, v4, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1E8750()
{
  unint64_t result;

  result = qword_2A7B30;
  if (!qword_2A7B30)
  {
    result = swift_getWitnessTable(byte_21C7A0, &type metadata for ScrollData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B30);
  }
  return result;
}

uint64_t ScrollData.init(from:)@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_71B4(&qword_2A7B38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1E8750();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScrollData.CodingKeys, &type metadata for ScrollData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1E88EC@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  return ScrollData.init(from:)(a1, a2);
}

uint64_t sub_1E8900(_QWORD *a1)
{
  return ScrollData.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for ScrollData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScrollData()
{
  return &type metadata for ScrollData;
}

uint64_t storeEnumTagSinglePayload for ScrollData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1E89B8 + 4 * byte_21C609[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1E89EC + 4 * byte_21C604[v4]))();
}

uint64_t sub_1E89EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E89F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E89FCLL);
  return result;
}

uint64_t sub_1E8A08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E8A10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1E8A14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E8A1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollData.CodingKeys()
{
  return &type metadata for ScrollData.CodingKeys;
}

unint64_t sub_1E8A3C()
{
  unint64_t result;

  result = qword_2A7B40;
  if (!qword_2A7B40)
  {
    result = swift_getWitnessTable(byte_21C778, &type metadata for ScrollData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B40);
  }
  return result;
}

unint64_t sub_1E8A84()
{
  unint64_t result;

  result = qword_2A7B48;
  if (!qword_2A7B48)
  {
    result = swift_getWitnessTable(aA_12, &type metadata for ScrollData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B48);
  }
  return result;
}

unint64_t sub_1E8ACC()
{
  unint64_t result;

  result = qword_2A7B50;
  if (!qword_2A7B50)
  {
    result = swift_getWitnessTable(asc_21C710, &type metadata for ScrollData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B50);
  }
  return result;
}

uint64_t sub_1E8B10(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD00000000000001ELL)
  {
    v4 = 0x8000000000222DB0;
    if (a2 == 0x8000000000222DB0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000000222DB0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000000222DD0)
  {
    swift_bridgeObjectRelease(0x8000000000222DD0);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000000222DD0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_BYTE *MessageData.init(messageType:messageIdentifier:hasActionable:actionIdentifier:placementName:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_BYTE *)a8 = *result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_BYTE *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  return result;
}

uint64_t MessageData.hasActionable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t MessageData.hasActionable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t sub_1E8C28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1E8C64 + 4 * byte_21C7F0[a1]))(0x546567617373656DLL, 0xEB00000000657079);
}

unint64_t sub_1E8C64()
{
  return 0xD000000000000011;
}

uint64_t sub_1E8C84()
{
  return 0x6F69746341736168;
}

unint64_t sub_1E8CA8()
{
  return 0xD000000000000010;
}

uint64_t sub_1E8CC4()
{
  return 0x6E656D6563616C70;
}

uint64_t sub_1E8CE8()
{
  unsigned __int8 *v0;

  return sub_1E8C28(*v0);
}

uint64_t sub_1E8CF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1E9834(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1E8D14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E93BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E8D3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E93BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MessageData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v4 = sub_71B4(&qword_2A7B58);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v26 = *((_QWORD *)v1 + 2);
  v27 = v9;
  v25 = v1[24];
  v10 = *((_QWORD *)v1 + 4);
  v22 = *((_QWORD *)v1 + 5);
  v23 = *((_QWORD *)v1 + 6);
  v24 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_1E93BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MessageData.CodingKeys, &type metadata for MessageData.CodingKeys, v13, v11, v12);
  v34 = v8;
  v33 = 0;
  v14 = sub_1E9400();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v4, &type metadata for MessageType, v14);
  if (!v2)
  {
    v15 = v25;
    v16 = v23;
    v17 = v24;
    v32 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v26, &v32, v4);
    v31 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v31, v4);
    v28 = v17;
    v30 = 3;
    v18 = sub_71B4(&qword_299618);
    v19 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, &v30, v4, v18, v19);
    v29 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v16, &v29, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void MessageData.init(from:)(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  BAEventReporter *v22;
  BAEventReporter *v23;
  uint64_t v24;
  uint64_t v25;
  BAEventReporter *v26;
  uint64_t v27;
  BAEventReporter *v28;
  BAEventReporter *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  _BYTE *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  int64_t v51;
  int64_t v52;
  void *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  BAEventReporter *v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;

  v5 = sub_71B4(&qword_2A7B70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1E93BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MessageData.CodingKeys, &type metadata for MessageData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v23 = 0;
    v26 = 0;
    sub_7DAC(a1);
  }
  else
  {
    v62 = 0;
    v12 = sub_1E9444();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for MessageType, &v62, v5, &type metadata for MessageType, v12);
    v13 = v63;
    v61 = 1;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v5);
    v23 = v22;
    v55 = v14;
    v56 = v13;
    v60 = 2;
    swift_bridgeObjectRetain(v22);
    LOBYTE(v13) = KeyedDecodingContainer.decode(_:forKey:)(&v60, v5);
    v24 = sub_71B4(&qword_299618);
    v59 = 3;
    v25 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v57, v24, &v59, v5, v24, v25);
    v54 = a2;
    v26 = v57;
    v58 = 4;
    swift_bridgeObjectRetain(v57);
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v5);
    v29 = v28;
    v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v31 = v27;
    v30(v8, v5);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v23, v32, v33, v34, v35, v36, v37, v38);
    v39 = v54;
    *v54 = v56;
    *((_QWORD *)v39 + 1) = v55;
    *((_QWORD *)v39 + 2) = v23;
    v39[24] = v13 & 1;
    *((_QWORD *)v39 + 4) = v26;
    *((_QWORD *)v39 + 5) = v31;
    *((_QWORD *)v39 + 6) = v29;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v29, v40, v41, v42, v43, v44, v45, v46);
  }
  swift_bridgeObjectRelease(v26, v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease(v23, v15, v16, v17, v18, v19, v20, v21);
}

void sub_1E9250(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  MessageData.init(from:)(a1, a2);
}

uint64_t sub_1E9264(_QWORD *a1)
{
  return MessageData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics11MessageDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a2 + 24);
  v9 = *(_QWORD **)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  sub_2B43C(*(_BYTE *)a1);
  if ((v12 & 1) == 0)
    return 0;
  if (!v16)
  {
    result = 0;
    if (v7)
      return result;
    goto LABEL_11;
  }
  if (!v7)
    return 0;
  if (v15 != v6 || v16 != v7)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v6, v7, 0);
    result = 0;
    if ((v14 & 1) == 0)
      return result;
LABEL_11:
    if (((v2 ^ v8) & 1) != 0)
      return result;
    goto LABEL_12;
  }
  if (v2 != v8)
    return 0;
LABEL_12:
  if (!v4)
  {
    if (!v9)
      goto LABEL_15;
    return 0;
  }
  if (!v9 || (sub_66274(v4, v9) & 1) == 0)
    return 0;
LABEL_15:
  if (v3 == v10 && v5 == v11)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v10, v11, 0);
}

unint64_t sub_1E93BC()
{
  unint64_t result;

  result = qword_2A7B60;
  if (!qword_2A7B60)
  {
    result = swift_getWitnessTable(byte_21C9A0, &type metadata for MessageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B60);
  }
  return result;
}

unint64_t sub_1E9400()
{
  unint64_t result;

  result = qword_2A7B68;
  if (!qword_2A7B68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_2A7B68);
  }
  return result;
}

unint64_t sub_1E9444()
{
  unint64_t result;

  result = qword_2A7B78;
  if (!qword_2A7B78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_2A7B78);
  }
  return result;
}

uint64_t initializeWithCopy for MessageData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for MessageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for MessageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageData()
{
  return &type metadata for MessageData;
}

uint64_t storeEnumTagSinglePayload for MessageData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1E96DC + 4 * byte_21C7FA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1E9710 + 4 * byte_21C7F5[v4]))();
}

uint64_t sub_1E9710(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E9718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E9720);
  return result;
}

uint64_t sub_1E972C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E9734);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1E9738(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E9740(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageData.CodingKeys()
{
  return &type metadata for MessageData.CodingKeys;
}

unint64_t sub_1E9760()
{
  unint64_t result;

  result = qword_2A7B80;
  if (!qword_2A7B80)
  {
    result = swift_getWitnessTable("y\v\a", &type metadata for MessageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B80);
  }
  return result;
}

unint64_t sub_1E97A8()
{
  unint64_t result;

  result = qword_2A7B88;
  if (!qword_2A7B88)
  {
    result = swift_getWitnessTable(a9_5, &type metadata for MessageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B88);
  }
  return result;
}

unint64_t sub_1E97F0()
{
  unint64_t result;

  result = qword_2A7B90;
  if (!qword_2A7B90)
  {
    result = swift_getWitnessTable(asc_21C910, &type metadata for MessageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7B90);
  }
  return result;
}

uint64_t sub_1E9834(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x546567617373656DLL && a2 == 0xEB00000000657079)
  {
    v5 = 0xEB00000000657079;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x546567617373656DLL, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000000222DF0;
    if (a2 == 0x8000000000222DF0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222DF0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6F69746341736168 && a2 == 0xED0000656C62616ELL)
  {
    v8 = 0xED0000656C62616ELL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746341736168, 0xED0000656C62616ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000000222E10;
    if (a2 == 0x8000000000222E10)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222E10, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x6E656D6563616C70 && a2 == 0xED0000656D614E74)
  {
    swift_bridgeObjectRelease(0xED0000656D614E74);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D6563616C70, 0xED0000656D614E74, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1E9AA0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x6B63616279616C70;
}

uint64_t sub_1E9AEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1E9FF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1E9B10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E9C7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1E9B38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1E9C7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AudioPlaybackSpeedData.encode(to:)(_QWORD *a1)
{
  float *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_71B4(&qword_2A7B98);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1E9C7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AudioPlaybackSpeedData.CodingKeys, &type metadata for AudioPlaybackSpeedData.CodingKeys, v12, v10, v11);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v16, v4, v9);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v15, v4, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1E9C7C()
{
  unint64_t result;

  result = qword_2A7BA0;
  if (!qword_2A7BA0)
  {
    result = swift_getWitnessTable(byte_21CB9C, &type metadata for AudioPlaybackSpeedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BA0);
  }
  return result;
}

uint64_t AudioPlaybackSpeedData.init(from:)@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_71B4(&qword_2A7BA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1E9C7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AudioPlaybackSpeedData.CodingKeys, &type metadata for AudioPlaybackSpeedData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1E9E18@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  return AudioPlaybackSpeedData.init(from:)(a1, a2);
}

uint64_t sub_1E9E2C(_QWORD *a1)
{
  return AudioPlaybackSpeedData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AudioPlaybackSpeedData()
{
  return &type metadata for AudioPlaybackSpeedData;
}

uint64_t storeEnumTagSinglePayload for AudioPlaybackSpeedData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1E9E9C + 4 * byte_21C9F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1E9ED0 + 4 * byte_21C9F0[v4]))();
}

uint64_t sub_1E9ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E9ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E9EE0);
  return result;
}

uint64_t sub_1E9EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E9EF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1E9EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E9F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioPlaybackSpeedData.CodingKeys()
{
  return &type metadata for AudioPlaybackSpeedData.CodingKeys;
}

unint64_t sub_1E9F20()
{
  unint64_t result;

  result = qword_2A7BB0;
  if (!qword_2A7BB0)
  {
    result = swift_getWitnessTable("e\v\a", &type metadata for AudioPlaybackSpeedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BB0);
  }
  return result;
}

unint64_t sub_1E9F68()
{
  unint64_t result;

  result = qword_2A7BB8;
  if (!qword_2A7BB8)
  {
    result = swift_getWitnessTable(asc_21CAE4, &type metadata for AudioPlaybackSpeedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BB8);
  }
  return result;
}

unint64_t sub_1E9FB0()
{
  unint64_t result;

  result = qword_2A7BC0;
  if (!qword_2A7BC0)
  {
    result = swift_getWitnessTable(asc_21CB0C, &type metadata for AudioPlaybackSpeedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BC0);
  }
  return result;
}

uint64_t sub_1E9FF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6B63616279616C70 && a2 == 0xED00006465657053)
  {
    v5 = 0xED00006465657053;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B63616279616C70, 0xED00006465657053, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000000222E30)
  {
    swift_bridgeObjectRelease(0x8000000000222E30);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000000222E30, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1EA108()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001DLL;
  else
    return 0xD000000000000020;
}

uint64_t sub_1EA148@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1EA920(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1EA16C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EA5D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1EA194(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EA5D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CellularData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_2A7BC8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1EA5D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CellularData.CodingKeys, &type metadata for CellularData.CodingKeys, v11, v9, v10);
  v19 = v8;
  v18 = 0;
  v12 = sub_14F2EC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v4, &type metadata for CellularRadioAccessTechnology, v12);
  if (!v2)
  {
    v17 = v15;
    v16 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v4, &type metadata for CellularRadioAccessTechnology, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CellularData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v5 = sub_71B4(&qword_2A7BD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1EA5D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CellularData.CodingKeys, &type metadata for CellularData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v18) = 0;
    v12 = sub_14F440();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v18 + 2), &type metadata for CellularRadioAccessTechnology, (char *)&v18 + 1, v5, &type metadata for CellularRadioAccessTechnology, v12);
    v13 = BYTE2(v18);
    v17 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for CellularRadioAccessTechnology, &v17, v5, &type metadata for CellularRadioAccessTechnology, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v18;
    *a2 = v13;
    a2[1] = v14;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1EA484@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CellularData.init(from:)(a1, a2);
}

uint64_t sub_1EA498(_QWORD *a1)
{
  return CellularData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics12CellularDataV2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0;
  BAEventReporter *v1;
  BAEventReporter *v2;
  uint64_t v3;
  BAEventReporter *v4;
  BAEventReporter *v6;
  char v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  BAEventReporter *v24;
  BAEventReporter *v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  int64_t v30;
  int64_t v31;
  void *v32;
  BAEventReporter *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  int64_t v38;
  int64_t v39;
  id v40;

  v0 = CellularRadioAccessTechnology.rawValue.getter();
  v2 = v1;
  v3 = CellularRadioAccessTechnology.rawValue.getter();
  if (v0 == v3 && v2 == v4)
  {
    swift_bridgeObjectRelease_n(v2, 2);
  }
  else
  {
    v6 = v4;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
    swift_bridgeObjectRelease(v2, v8, v9, v10, v11, v12, v13, v14);
    swift_bridgeObjectRelease(v6, v15, v16, v17, v18, v19, v20, v21);
    v22 = 0;
    if ((v7 & 1) == 0)
      return v22 & 1;
  }
  v23 = CellularRadioAccessTechnology.rawValue.getter();
  v25 = v24;
  v27 = (void *)CellularRadioAccessTechnology.rawValue.getter();
  v33 = (BAEventReporter *)v26;
  if ((void *)v23 == v27 && v25 == (BAEventReporter *)v26)
  {
    v22 = 1;
    v33 = v25;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0);
  }
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
  return v22 & 1;
}

unint64_t sub_1EA5D0()
{
  unint64_t result;

  result = qword_2A7BD0;
  if (!qword_2A7BD0)
  {
    result = swift_getWitnessTable(byte_21CD94, &type metadata for CellularData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CellularData(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 65295 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65295 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65295;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65295;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65295;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CellularData(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65295 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65295 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1EA6FC + 4 * byte_21CBF1[v4]))();
  *a1 = a2 - 241;
  return ((uint64_t (*)(void))((char *)sub_1EA730 + 4 * byte_21CBEC[v4]))();
}

uint64_t sub_1EA730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1EA738(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1EA740);
  return result;
}

uint64_t sub_1EA74C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1EA754);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1EA758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1EA760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CellularData()
{
  return &type metadata for CellularData;
}

uint64_t storeEnumTagSinglePayload for CellularData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1EA7C8 + 4 * byte_21CBFB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1EA7FC + 4 * byte_21CBF6[v4]))();
}

uint64_t sub_1EA7FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1EA80CLL);
  return result;
}

uint64_t sub_1EA818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1EA820);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1EA824(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA82C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CellularData.CodingKeys()
{
  return &type metadata for CellularData.CodingKeys;
}

unint64_t sub_1EA84C()
{
  unint64_t result;

  result = qword_2A7BE0;
  if (!qword_2A7BE0)
  {
    result = swift_getWitnessTable("U\v\a", &type metadata for CellularData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BE0);
  }
  return result;
}

unint64_t sub_1EA894()
{
  unint64_t result;

  result = qword_2A7BE8;
  if (!qword_2A7BE8)
  {
    result = swift_getWitnessTable(byte_21CCDC, &type metadata for CellularData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BE8);
  }
  return result;
}

unint64_t sub_1EA8DC()
{
  unint64_t result;

  result = qword_2A7BF0;
  if (!qword_2A7BF0)
  {
    result = swift_getWitnessTable(byte_21CD04, &type metadata for CellularData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7BF0);
  }
  return result;
}

uint64_t sub_1EA920(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000020 && a2 == 0x8000000000222E50)
  {
    v4 = 0x8000000000222E50;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000000222E50, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000000002222A0)
  {
    swift_bridgeObjectRelease(0x80000000002222A0);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000000002222A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::OsInstallVariant_optional __swiftcall OsInstallVariant.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::OsInstallVariant_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2696D8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t OsInstallVariant.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C616E7265746E69;
  if (*v0 != 1)
    v1 = 0x6C616E7265747865;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_1EAAB4(char *a1, unsigned __int8 *a2)
{
  return sub_2986C(*a1, *a2);
}

unint64_t sub_1EAAC4()
{
  unint64_t result;

  result = qword_2A7BF8;
  if (!qword_2A7BF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OsInstallVariant, &type metadata for OsInstallVariant);
    atomic_store(result, (unint64_t *)&qword_2A7BF8);
  }
  return result;
}

Swift::Int sub_1EAB08()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 0x6C616E7265746E69;
  if (v1 != 1)
    v2 = 0x6C616E7265747865;
  if (v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v1)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1EAB9C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0x6C616E7265746E69;
  if (*v1 != 1)
    v2 = 0x6C616E7265747865;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (*v1)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1EAC0C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 0x6C616E7265746E69;
  if (v2 != 1)
    v3 = 0x6C616E7265747865;
  if (v2)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v2)
    v5 = 0xE800000000000000;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

BookAnalytics::OsInstallVariant_optional sub_1EAC9C(Swift::String *a1)
{
  return OsInstallVariant.init(rawValue:)(*a1);
}

void sub_1EACA8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x6C616E7265746E69;
  if (v2 != 1)
    v4 = 0x6C616E7265747865;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6E776F6E6B6E75;
  if (!v5)
    v3 = 0xE800000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1EACFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1EAE70();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1EAD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1EAE70();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for OsInstallVariant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1EADF0 + 4 * byte_21CDF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1EAE24 + 4 * byte_21CDF0[v4]))();
}

uint64_t sub_1EAE24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EAE2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1EAE34);
  return result;
}

uint64_t sub_1EAE40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1EAE48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1EAE4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EAE54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OsInstallVariant()
{
  return &type metadata for OsInstallVariant;
}

unint64_t sub_1EAE70()
{
  unint64_t result;

  result = qword_2A7C00;
  if (!qword_2A7C00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OsInstallVariant, &type metadata for OsInstallVariant);
    atomic_store(result, (unint64_t *)&qword_2A7C00);
  }
  return result;
}

void __swiftcall SectionData.init(sectionType:exposureIndex:name:cellSize:componentContained:subSectionID:subSectionName:subSectionPosition:sectionID:)(BookAnalytics::SectionData *__return_ptr retstr, BookAnalytics::SectionType sectionType, Swift::Int32 exposureIndex, Swift::String name, Swift::String cellSize, Swift::String componentContained, Swift::String_optional subSectionID, Swift::String_optional subSectionName, Swift::Int32_optional subSectionPosition, Swift::String sectionID)
{
  retstr->sectionType = *(_BYTE *)sectionType;
  retstr->exposureIndex = exposureIndex;
  retstr->name = name;
  retstr->cellSize = cellSize;
  retstr->componentContained = componentContained;
  retstr->subSectionID = subSectionID;
  retstr->subSectionName = subSectionName;
  retstr->subSectionPosition.value = subSectionPosition.value;
  retstr->subSectionPosition.is_nil = subSectionPosition.is_nil;
  retstr->sectionID = sectionID;
}

uint64_t sub_1EAEFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1EAF38 + 4 * byte_21CF10[a1]))(0x546E6F6974636573, 0xEB00000000657079);
}

uint64_t sub_1EAF38()
{
  return 0x657275736F707865;
}

uint64_t sub_1EAF5C()
{
  return 1701667182;
}

uint64_t sub_1EAF6C()
{
  return 0x657A69536C6C6563;
}

unint64_t sub_1EAF84()
{
  return 0xD000000000000012;
}

uint64_t sub_1EAFE0()
{
  return 0x496E6F6974636573;
}

uint64_t sub_1EAFFC()
{
  unsigned __int8 *v0;

  return sub_1EAEFC(*v0);
}

uint64_t sub_1EB004@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1EC17C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1EB028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EBB88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1EB050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1EBB88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SectionData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE v43[4];
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v4 = sub_71B4(&qword_2A7C08);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v42 = *((_DWORD *)v1 + 1);
  v9 = *((_QWORD *)v1 + 1);
  v40 = *((_QWORD *)v1 + 2);
  v41 = v9;
  v10 = *((_QWORD *)v1 + 3);
  v11 = *((_QWORD *)v1 + 4);
  v12 = *((_QWORD *)v1 + 5);
  v36 = *((_QWORD *)v1 + 6);
  v37 = v11;
  v13 = *((_QWORD *)v1 + 7);
  v34 = *((_QWORD *)v1 + 8);
  v35 = v12;
  v14 = *((_QWORD *)v1 + 9);
  v32 = *((_QWORD *)v1 + 10);
  v33 = v13;
  v30 = *((unsigned int *)v1 + 22);
  v31 = v14;
  v29 = v1[92];
  v15 = *((_QWORD *)v1 + 13);
  v38 = *((_QWORD *)v1 + 12);
  v39 = v10;
  v17 = a1[3];
  v16 = a1[4];
  v18 = a1;
  v20 = v19;
  sub_7988(v18, v17);
  v21 = sub_1EBB88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SectionData.CodingKeys, &type metadata for SectionData.CodingKeys, v21, v17, v16);
  v52 = v8;
  v51 = 0;
  v22 = sub_1EBBCC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v52, &v51, v20, &type metadata for SectionType, v22);
  if (!v2)
  {
    v23 = v40;
    v24 = v41;
    v28 = v15;
    v25 = v38;
    v26 = v39;
    v50 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v42, &v50, v20);
    v49 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v23, &v49, v20);
    v48 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v37, &v48, v20);
    v47 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v47, v20);
    v46 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v46, v20);
    v45 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v45, v20);
    v44 = 7;
    v43[1] = v29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30 | ((unint64_t)v29 << 32), &v44, v20);
    v43[0] = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v28, v43, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v20);
}

void SectionData.init(from:)(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  BAEventReporter *v22;
  BAEventReporter *v23;
  uint64_t v24;
  BAEventReporter *v25;
  BAEventReporter *v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  BAEventReporter *v29;
  uint64_t v30;
  BAEventReporter *v31;
  BAEventReporter *v32;
  uint64_t v33;
  BAEventReporter *v34;
  BAEventReporter *v35;
  BAEventReporter *v36;
  BAEventReporter *v37;
  BAEventReporter *v38;
  BAEventReporter *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  int64_t v65;
  int64_t v66;
  id v67;
  _BYTE *v68;
  char v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  int64_t v74;
  int64_t v75;
  id v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  int64_t v81;
  int64_t v82;
  id v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  int64_t v88;
  int64_t v89;
  id v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  SEL v98;
  id v99;
  id v100;
  id v101;
  int64_t v102;
  int64_t v103;
  id v104;
  const char *v105;
  void *v106;
  void *v107;
  void *v108;
  int64_t v109;
  int64_t v110;
  void *v111;
  BAEventReporter *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  BAEventReporter *v124;
  BAEventReporter *v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  uint64_t v135;

  v5 = sub_71B4(&qword_2A7C20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1EBB88();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SectionData.CodingKeys, &type metadata for SectionData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v15, v16, v17, v18, v19, v20, v21);
    v112 = 0;
  }
  else
  {
    v134 = 0;
    v12 = sub_1EBC10();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v135, &type metadata for SectionType, &v134, v5, &type metadata for SectionType, v12);
    v13 = v135;
    v133 = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v133, v5);
    v132 = 2;
    v122 = KeyedDecodingContainer.decode(_:forKey:)(&v132, v5);
    v123 = v14;
    v131 = 3;
    v23 = v22;
    swift_bridgeObjectRetain(v22);
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v131, v5);
    v125 = v23;
    v120 = v24;
    v121 = v13;
    v130 = 4;
    v26 = v25;
    swift_bridgeObjectRetain(v25);
    v118 = KeyedDecodingContainer.decode(_:forKey:)(&v130, v5);
    v119 = a2;
    v27 = v26;
    v129 = 5;
    v29 = v28;
    swift_bridgeObjectRetain(v28);
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v5);
    v124 = v29;
    v32 = v31;
    v117 = v30;
    v128 = 6;
    swift_bridgeObjectRetain(v31);
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v128, v5);
    v35 = v34;
    v116 = v33;
    v127 = 7;
    swift_bridgeObjectRetain(v34);
    v115 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v127, v5);
    v126 = 8;
    v114 = KeyedDecodingContainer.decode(_:forKey:)(&v126, v5);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v38 = v125;
    swift_bridgeObjectRetain(v125);
    swift_bridgeObjectRetain(v27);
    v39 = v124;
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(v38, v40, v41, v42, v43, v44, v45, v46);
    swift_bridgeObjectRelease(v27, v47, v48, v49, v50, v51, v52, v53);
    swift_bridgeObjectRelease(v39, v54, v55, v56, v57, v58, v59, v60);
    swift_bridgeObjectRelease(v32, v61, v62, v63, v64, v65, v66, v67);
    v68 = v119;
    *v119 = v121;
    *((_DWORD *)v68 + 1) = v123;
    *((_QWORD *)v68 + 1) = v122;
    *((_QWORD *)v68 + 2) = v38;
    *((_QWORD *)v68 + 3) = v120;
    *((_QWORD *)v68 + 4) = v27;
    *((_QWORD *)v68 + 5) = v118;
    *((_QWORD *)v68 + 6) = v39;
    *((_QWORD *)v68 + 7) = v117;
    *((_QWORD *)v68 + 8) = v32;
    *((_QWORD *)v68 + 9) = v116;
    *((_QWORD *)v68 + 10) = v35;
    v69 = BYTE4(v115);
    *((_DWORD *)v68 + 22) = v115;
    v68[92] = v69 & 1;
    *((_QWORD *)v68 + 12) = v114;
    *((_QWORD *)v68 + 13) = v37;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v37, v70, v71, v72, v73, v74, v75, v76);
    swift_bridgeObjectRelease(v35, v77, v78, v79, v80, v81, v82, v83);
    swift_bridgeObjectRelease(v32, v84, v85, v86, v87, v88, v89, v90);
    swift_bridgeObjectRelease(v39, v91, v92, v93, v94, v95, v96, v97);
    swift_bridgeObjectRelease(v27, v98, v99, v100, v101, v102, v103, v104);
    v112 = v38;
  }
  swift_bridgeObjectRelease(v112, v105, v106, v107, v108, v109, v110, v111);
}

void sub_1EB894(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  SectionData.init(from:)(a1, a2);
}

uint64_t sub_1EB8A8(_QWORD *a1)
{
  return SectionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics11SectionDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v40 = *(_QWORD *)(a1 + 40);
  v38 = *(_QWORD *)(a1 + 48);
  v32 = *(_QWORD *)(a1 + 56);
  v36 = *(_QWORD *)(a1 + 64);
  v30 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(a1 + 80);
  v23 = *(_DWORD *)(a1 + 88);
  v28 = *(_BYTE *)(a1 + 92);
  v7 = *(_DWORD *)(a2 + 4);
  v9 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v39 = *(_QWORD *)(a2 + 40);
  v37 = *(_QWORD *)(a2 + 48);
  v31 = *(_QWORD *)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(a2 + 80);
  v21 = *(_DWORD *)(a2 + 88);
  v27 = *(unsigned __int8 *)(a2 + 92);
  v25 = *(_QWORD *)(a2 + 104);
  v26 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a1 + 96);
  v24 = *(_QWORD *)(a1 + 104);
  sub_2B0C4(*(_BYTE *)a1);
  v13 = v12;
  result = 0;
  if ((v13 & 1) != 0 && v2 == v7)
  {
    if (v4 == v9 && v3 == v8
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v9, v8, 0), result = 0, (v15 & 1) != 0))
    {
      if (v5 == v11 && v6 == v10
        || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v11, v10, 0), result = 0, (v16 & 1) != 0))
      {
        if (v40 == v39 && v38 == v37
          || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v38, v39, v37, 0), result = 0, (v17 & 1) != 0))
        {
          if (v36)
          {
            if (!v35)
              return 0;
            if (v32 != v31 || v36 != v35)
            {
              v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v36, v31, v35, 0);
              result = 0;
              if ((v18 & 1) == 0)
                return result;
            }
          }
          else if (v35)
          {
            return 0;
          }
          if (v34)
          {
            if (v33)
            {
              if (v30 != v29 || v34 != v33)
              {
                v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v34, v29, v33, 0);
                result = 0;
                if ((v19 & 1) == 0)
                  return result;
              }
LABEL_26:
              if ((v28 & 1) != 0)
              {
                if (!v27)
                  return 0;
              }
              else
              {
                v20 = v27;
                if (v23 != v21)
                  v20 = 1;
                if ((v20 & 1) != 0)
                  return 0;
              }
              if (v22 == v26 && v24 == v25)
                return 1;
              else
                return _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v25, 0);
            }
          }
          else if (!v33)
          {
            goto LABEL_26;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1EBB88()
{
  unint64_t result;

  result = qword_2A7C10;
  if (!qword_2A7C10)
  {
    result = swift_getWitnessTable("u\v\a", &type metadata for SectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7C10);
  }
  return result;
}

unint64_t sub_1EBBCC()
{
  unint64_t result;

  result = qword_2A7C18;
  if (!qword_2A7C18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SectionType, &type metadata for SectionType);
    atomic_store(result, (unint64_t *)&qword_2A7C18);
  }
  return result;
}

unint64_t sub_1EBC10()
{
  unint64_t result;

  result = qword_2A7C28;
  if (!qword_2A7C28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SectionType, &type metadata for SectionType);
    atomic_store(result, (unint64_t *)&qword_2A7C28);
  }
  return result;
}

uint64_t destroy for SectionData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for SectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for SectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

__n128 initializeWithTake for SectionData(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for SectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionData()
{
  return &type metadata for SectionData;
}

uint64_t storeEnumTagSinglePayload for SectionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1EC024 + 4 * byte_21CF1E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1EC058 + 4 * byte_21CF19[v4]))();
}

uint64_t sub_1EC058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EC060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1EC068);
  return result;
}

uint64_t sub_1EC074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1EC07CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1EC080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EC088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SectionData.CodingKeys()
{
  return &type metadata for SectionData.CodingKeys;
}

unint64_t sub_1EC0A8()
{
  unint64_t result;

  result = qword_2A7C30;
  if (!qword_2A7C30)
  {
    result = swift_getWitnessTable("%\v\a", &type metadata for SectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7C30);
  }
  return result;
}

unint64_t sub_1EC0F0()
{
  unint64_t result;

  result = qword_2A7C38;
  if (!qword_2A7C38)
  {
    result = swift_getWitnessTable(byte_21D01C, &type metadata for SectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7C38);
  }
  return result;
}

unint64_t sub_1EC138()
{
  unint64_t result;

  result = qword_2A7C40;
  if (!qword_2A7C40)
  {
    result = swift_getWitnessTable(byte_21D044, &type metadata for SectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A7C40);
  }
  return result;
}

uint64_t sub_1EC17C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x546E6F6974636573 && a2 == 0xEB00000000657079)
  {
    v5 = 0xEB00000000657079;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x546E6F6974636573, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xED00007865646E49)
  {
    v7 = 0xED00007865646E49;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xED00007865646E49, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x657A69536C6C6563 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A69536C6C6563, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000012)
  {
    v10 = 0x8000000000222E80;
    if (a2 == 0x8000000000222E80)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000222E80, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x6974636553627573 && a2 == 0xEC00000044496E6FLL)
  {
    v11 = 0xEC00000044496E6FLL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974636553627573, 0xEC00000044496E6FLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x6974636553627573 && a2 == 0xEE00656D614E6E6FLL)
  {
    v12 = 0xEE00656D614E6E6FLL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974636553627573, 0xEE00656D614E6E6FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000012)
  {
    v13 = 0x800000000021F2A0;
    if (a2 == 0x800000000021F2A0)
      goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F2A0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0x496E6F6974636573 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease(0xE900000000000044);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496E6F6974636573, 0xE900000000000044, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

void sub_1EC57C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1EC5C8(uint64_t a1)
{
  String.hash(into:)(a1, 0x6D61536F69647561, 0xEB00000000656C70);
  return swift_bridgeObjectRelease(0xEB00000000656C70);
}

void sub_1EC6C8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1EC708(uint64_t a1)
{
  String.hash(into:)(a1, 0x6F6F527265707573, 0xE90000000000006DLL);
  return swift_bridgeObjectRelease(0xE90000000000006DLL);
}

void sub_1EC7B4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1EC7F4(uint64_t a1)
{
  String.hash(into:)(a1, 0x7070416E69, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_1EC8A8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1EC8E8(uint64_t a1)
{
  String.hash(into:)(a1, 0x746E65636572, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1EC99C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1EC9DC(uint64_t a1)
{
  String.hash(into:)(a1, 28271, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_1ECA4C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ECA94(uint64_t a1)
{
  String.hash(into:)(a1, 0x65536E497478656ELL, 0xEC00000073656972);
  return swift_bridgeObjectRelease(0xEC00000073656972);
}

void sub_1ECB50(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ECB90(uint64_t a1)
{
  String.hash(into:)(a1, 0x656369766564, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1ECC3C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ECC7C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6574696877, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_1ECD50(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ECD90(uint64_t a1)
{
  String.hash(into:)(a1, 0x746E65636572, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1ECE34(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ECE74(uint64_t a1)
{
  String.hash(into:)(a1, 0x696C43656C746974, 0xEA00000000006B63);
  return swift_bridgeObjectRelease(0xEA00000000006B63);
}

void sub_1ECEFC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ECF3C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6573616863727570, 0xE900000000000064);
  return swift_bridgeObjectRelease(0xE900000000000064);
}

void sub_1ED00C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ED04C(uint64_t a1)
{
  String.hash(into:)(a1, 0x7542686372616573, 0xEF7061546E6F7474);
  return swift_bridgeObjectRelease(0xEF7061546E6F7474);
}

void sub_1ED11C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ED15C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C616E7265747865, 0xEC0000006B6E694CLL);
  return swift_bridgeObjectRelease(0xEC0000006B6E694CLL);
}

void sub_1ED240(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ED280(uint64_t a1)
{
  String.hash(into:)(a1, 0x68736F6F7773, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1ED318(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ED358(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000015, 0x800000000021DB70);
  return swift_bridgeObjectRelease(0x800000000021DB70);
}

void sub_1ED400(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ED448(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x6552736569726573, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1ED4DC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1ED51C(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000013, 0x800000000021E7F0);
  return swift_bridgeObjectRelease(0x800000000021E7F0);
}

BookAnalytics::DialogType_optional __swiftcall DialogType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DialogType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_269740, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 10;
  if (v5 < 0xA)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DialogType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ED6D8 + 4 * byte_21D1A8[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

unint64_t sub_1ED6D8()
{
  return 0xD000000000000013;
}

uint64_t sub_1ED6F4()
{
  return 0x76616E556B6F6F62;
}

uint64_t sub_1ED718()
{
  return 0x6C70704177656976;
}

uint64_t sub_1ED738()
{
  return 0x63694E7265746E65;
}

uint64_t sub_1ED75C()
{
  return 0x6976655274726F73;
}

unint64_t sub_1ED77C()
{
  return 0xD000000000000015;
}

uint64_t sub_1ED7D4()
{
  return 0x6F53736569726573;
}

unint64_t sub_1ED7FC()
{
  unint64_t result;

  result = qword_2A7C48;
  if (!qword_2A7C48)
  {
    result = swift_getWitnessTable("U\v\a", &type metadata for DialogType);
    atomic_store(result, (unint64_t *)&qword_2A7C48);
  }
  return result;
}

Swift::Int sub_1ED840()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_1ED4DC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1ED884(uint64_t a1)
{
  char *v1;

  sub_1ED4DC(a1, *v1);
}

Swift::Int sub_1ED88C(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1ED4DC((uint64_t)v4, v2);
  return Hasher._finalize()();
}

BookAnalytics::DialogType_optional sub_1ED8CC(Swift::String *a1)
{
  return DialogType.init(rawValue:)(*a1);
}

uint64_t sub_1ED8D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DialogType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1ED8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1EDA70();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1ED958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1EDA70();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for DialogType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1ED9F0 + 4 * byte_21D1B7[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1EDA24 + 4 * byte_21D1B2[v4]))();
}

uint64_t sub_1EDA24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EDA2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1EDA34);
  return result;
}

uint64_t sub_1EDA40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1EDA48);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1EDA4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EDA54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogType()
{
  return &type metadata for DialogType;
}

unint64_t sub_1EDA70()
{
  unint64_t result;

  result = qword_2A7C50;
  if (!qword_2A7C50)
  {
    result = swift_getWitnessTable("%\v\a", &type metadata for DialogType);
    atomic_store(result, (unint64_t *)&qword_2A7C50);
  }
  return result;
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_base64EncodedDataWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedDataWithOptions:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventBody");
}

id objc_msgSend_fetchPrivateDataForKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPrivateDataForKey:completion:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isStarting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStarting");
}

id objc_msgSend_last(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "last");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_privateDataChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateDataChanged:");
}

id objc_msgSend_publisherFromStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publisherFromStartTime:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setUserDataValue_forKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDataValue:forKey:completion:");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_userDataManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDataManager");
}

id objc_msgSend_userDatumForKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDatumForKey:completion:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_workQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workQueue");
}
