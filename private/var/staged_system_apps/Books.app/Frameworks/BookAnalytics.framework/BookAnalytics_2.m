unint64_t sub_EA93C@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = 0x2000503040100uLL >> (8 * result);
  if (result >= 7)
    LOBYTE(v2) = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_EA964@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _BYTE v37[40];

  v36 = a2;
  v35 = type metadata accessor for LibraryPDFInfo(0);
  v31 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v34 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LibraryBookInfo.BookType(0);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_71B4(&qword_29DB80);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LibraryBookInfo(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LibraryAudiobookInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_89258(a1, (uint64_t)v37);
  v18 = sub_71B4(&qword_29DB88);
  if (swift_dynamicCast(v17, v37, v18, v14, 6))
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v20 = 2;
  }
  else
  {
    sub_89258(a1, (uint64_t)v37);
    v21 = swift_dynamicCast(v9, v37, v18, v10, 6);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    if (v21)
    {
      v22(v9, 0, 1, v10);
      v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      LibraryBookInfo.type.getter(v23);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v25 = v32;
      v24 = v33;
      v26 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v6, v33);
      v27 = enum case for LibraryBookInfo.BookType.epub(_:);
      result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v24);
      if (v26 == v27)
        v20 = 1;
      else
        v20 = 5;
    }
    else
    {
      v22(v9, 1, 1, v10);
      sub_EB7F8((uint64_t)v9);
      sub_89258(a1, (uint64_t)v37);
      v29 = v34;
      v28 = v35;
      result = swift_dynamicCast(v34, v37, v18, v35, 6);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v29, v28);
        v20 = 3;
      }
      else
      {
        v20 = 0;
      }
    }
  }
  *v36 = v20;
  return result;
}

uint64_t sub_EAC40()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "orientation");

  if (sub_EB838((uint64_t)v1))
    return 2;
  else
    return 1;
}

uint64_t sub_EACA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v6[3];

  result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 16718;
      break;
    case 2:
      result = 0x6964616552626F65;
      break;
    case 3:
      result = 0x4E676E6964616572;
      break;
    default:
      v6[1] = v1;
      v6[2] = v2;
      v6[0] = a1;
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedUpSellLocation, v6, &type metadata for BridgedUpSellLocation, &type metadata for Int);
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_EAE20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[3];

  switch(a1)
  {
    case 0:
      return 0x6E776F6E6B6E75;
    case 2:
      return 0x6F6F42664F646E65;
    case 1:
      return 0x6E6F43664F646E65;
  }
  v4[1] = v1;
  v4[2] = v2;
  v4[0] = a1;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedUpSellVariant, v4, &type metadata for BridgedUpSellVariant, &type metadata for Int);
  __break(1u);
  return result;
}

id Utilities.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Utilities();
  return objc_msgSendSuper2(&v2, "init");
}

id Utilities.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Utilities();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_EB014(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_EB0E4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_3A870((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_3A870((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_7DAC(v12);
  return v7;
}

uint64_t sub_EB0E4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_EB29C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_EB29C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_EB330(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_EB4A4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_EB4A4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_EB330(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_12E5EC(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_EB4A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_71B4(&qword_2A02D0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_EB5F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;
  BOOL v7;

  if (a1 == 0x50656D6568544D49 && a2 == 0xEF79617247656761
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x50656D6568544D49, 0xEF79617247656761, a1, a2, 0) & 1) != 0)
  {
    return 2;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000000221390
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000221390, a1, a2, 0) & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000000002213B0)
    return 0;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002213B0, a1, a2, 0);
  result = 0;
  v7 = a1 == 0x50656D6568544D49 && a2 == 0xEB00000000656761;
  if ((v5 & 1) == 0 && !v7)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x50656D6568544D49, 0xEB00000000656761, a1, a2, 0) & 1) != 0)
      return 0;
    if (a1 == 0xD000000000000010 && a2 == 0x80000000002213D0)
    {
      return 1;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002213D0, a1, a2, 0) & 1) != 0)
    {
      return 1;
    }
    else
    {
      return 4;
    }
  }
  return result;
}

uint64_t sub_EB7CC(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 4)
    return 2 * (a1 == 6);
  else
    return qword_2036F8[a1 - 1];
}

uint64_t sub_EB7F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_29DB80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_EB838(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

uint64_t type metadata accessor for Utilities()
{
  return objc_opt_self(BAUtilities);
}

uint64_t method lookup function for Utilities(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Utilities);
}

uint64_t dispatch thunk of static Utilities.backgroundColor(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static Utilities.contentType(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static Utilities.deviceOrientationFromCurrentOrientation()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static Utilities.stringFromUpSellLocation(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of static Utilities.stringFromUpSellVariant(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void EventReporter.emitAnnotationActionEvent(using:contentData:viewData:)(uint64_t a1, _OWORD *a2, char *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;
  char v9;
  id v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = a2[3];
  v33 = a2[2];
  v34 = v4;
  v5 = a2[5];
  v35 = a2[4];
  v36 = v5;
  v6 = a2[1];
  v32[0] = *a2;
  v32[1] = v6;
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection", v32[0], v6, v33, v34, v35, v36);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, "isDiagnosticSubmissionAllowed");

    if (v12)
    {
      v13 = swift_allocObject(&unk_278D78, 115, 7);
      v14 = a2[3];
      *(_OWORD *)(v13 + 48) = a2[2];
      *(_OWORD *)(v13 + 64) = v14;
      v15 = a2[5];
      *(_OWORD *)(v13 + 80) = a2[4];
      *(_OWORD *)(v13 + 96) = v15;
      v16 = a2[1];
      *(_OWORD *)(v13 + 16) = *a2;
      *(_OWORD *)(v13 + 32) = v16;
      *(_BYTE *)(v13 + 112) = v7;
      *(_BYTE *)(v13 + 113) = v8;
      *(_BYTE *)(v13 + 114) = v9;
      v17 = (BAEventReporter *)swift_allocObject(&unk_278DA0, 32, 7);
      v17[1].super.isa = (Class)sub_ED1F0;
      *(_QWORD *)v17[1].dataProviders = v13;
      sub_53FBC(v32);
      swift_retain(v13);
      Tracker.transaction(block:)(sub_53E94, v17);
      swift_release((BAEventReporter *)v13, v18, v19, v20, v21, v22, v23, v24);
      swift_release(v17, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_EBA68(uint64_t a1, __int128 *a2, unsigned int a3)
{
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v3 = a3;
  v4 = a2[3];
  v37 = a3 >> 8;
  v38 = HIWORD(a3);
  v41 = a2[2];
  v42 = v4;
  v5 = a2[5];
  v43 = a2[4];
  v44 = v5;
  v6 = a2[1];
  v39 = *a2;
  v40 = v6;
  v36 = sub_71B4(&qword_299FD0);
  v7 = type metadata accessor for DataEventTrait(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 72);
  v12 = v9 | 7;
  v13 = swift_allocObject(v36, v11, v9 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1F5FF0;
  v14 = enum case for DataEventTrait.onlyOnce(_:);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104);
  v15(v13 + v10, enum case for DataEventTrait.onlyOnce(_:), v7);
  v16 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v39, v13, 0xD00000000000006DLL, 0x8000000000221430, 21, &type metadata for ContentData, v16);
  swift_bridgeObjectRelease((BAEventReporter *)v13, v17, v18, v19, v20, v21, v22, v23);
  LOBYTE(v39) = v3;
  BYTE1(v39) = v37;
  BYTE2(v39) = v38;
  v24 = swift_allocObject(v36, v11, v12);
  *(_OWORD *)(v24 + 16) = xmmword_1F5FF0;
  v15(v24 + v10, v14, v7);
  v25 = sub_ED770();
  AccessTracker.push<A>(data:traits:file:line:)(&v39, v24, 0xD00000000000006DLL, 0x8000000000221430, 22, &type metadata for ViewData, v25);
  swift_bridgeObjectRelease((BAEventReporter *)v24, v26, v27, v28, v29, v30, v31, v32);
  v33 = type metadata accessor for AnnotationActionEvent(0);
  v34 = sub_7E10(&qword_29DC18, type metadata accessor for AnnotationActionEvent, (uint64_t)&protocol conformance descriptor for AnnotationActionEvent);
  v39 = 0u;
  v40 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v33, 0, &v39, 0, 0, v33, v34);
  return sub_54960((uint64_t)&v39);
}

uint64_t EventReporter.emitExitLinkTapEvent(using:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_278DC8, v7 + v5, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v9 = swift_allocObject(&unk_278DF0, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_ED1F8;
  *(_QWORD *)(v9 + 24) = v8;
  swift_retain(v8);
  Tracker.transaction(block:)(sub_54CC0, v9);
  swift_release(v8);
  return swift_release(v9);
}

uint64_t sub_EBD7C()
{
  uint64_t v0;
  BAEventReporter *v1;
  BAEventReporter *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  int64_t v14;
  int64_t v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[2];

  v0 = URL.absoluteString.getter();
  v2 = v1;
  *(_QWORD *)&v27[0] = v0;
  *((_QWORD *)&v27[0] + 1) = v1;
  v3 = sub_71B4(&qword_299FD0);
  v4 = type metadata accessor for DataEventTrait(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v3, v7 + *(_QWORD *)(v5 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8 + v7, enum case for DataEventTrait.onlyOnce(_:), v4);
  v9 = sub_ED72C();
  AccessTracker.push<A>(data:traits:file:line:)(v27, v8, 0xD00000000000006DLL, 0x8000000000221430, 30, &type metadata for ExternalLinkData, v9);
  swift_bridgeObjectRelease(v2, v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease((BAEventReporter *)v8, v17, v18, v19, v20, v21, v22, v23);
  v24 = type metadata accessor for ExitLinkTapEvent(0);
  v25 = sub_7E10(&qword_29DC08, type metadata accessor for ExitLinkTapEvent, (uint64_t)&protocol conformance descriptor for ExitLinkTapEvent);
  memset(v27, 0, sizeof(v27));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v24, 0, v27, 0, 0, v24, v25);
  return sub_54960((uint64_t)v27);
}

void EventReporter.emitGetStartedActionEvent(using:for:)(uint64_t a1, objc_class *a2)
{
  BAEventReporter *v3;
  BAEventReporter *v4;
  SEL v5;
  id v6;
  id v7;
  int64_t v8;
  id v9;
  BOOL v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;

  v3 = (BAEventReporter *)swift_allocObject(&unk_278E18, 24, 7);
  v3[1].super.isa = a2;
  v4 = (BAEventReporter *)swift_allocObject(&unk_278E40, 32, 7);
  v4[1].super.isa = (Class)sub_ED20C;
  *(_QWORD *)v4[1].dataProviders = v3;
  swift_retain(v3);
  Tracker.transaction(block:)(sub_54CC0, v4);
  swift_release(v3, v5, v6, v7, v8, v9, v10, v11);
  swift_release(v4, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_EC0E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t StartedActionEvent;
  uint64_t v17;
  uint64_t result;
  _OWORD v19[2];

  if (a2 >= 3)
  {
    *(_QWORD *)&v19[0] = a2;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedGetStartedActionType, v19, &type metadata for BridgedGetStartedActionType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    LOBYTE(v19[0]) = a2;
    v2 = sub_71B4(&qword_299FD0);
    v3 = type metadata accessor for DataEventTrait(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(unsigned __int8 *)(v4 + 80);
    v6 = (v5 + 32) & ~v5;
    v7 = swift_allocObject(v2, v6 + *(_QWORD *)(v4 + 72), v5 | 7);
    *(_OWORD *)(v7 + 16) = xmmword_1F5FF0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v7 + v6, enum case for DataEventTrait.onlyOnce(_:), v3);
    v8 = sub_ED6E8();
    AccessTracker.push<A>(data:traits:file:line:)(v19, v7, 0xD00000000000006DLL, 0x8000000000221430, 38, &type metadata for GetStartedActionData, v8);
    swift_bridgeObjectRelease((BAEventReporter *)v7, v9, v10, v11, v12, v13, v14, v15);
    StartedActionEvent = type metadata accessor for GetStartedActionEvent(0);
    v17 = sub_7E10(&qword_29DBF8, type metadata accessor for GetStartedActionEvent, (uint64_t)&protocol conformance descriptor for GetStartedActionEvent);
    memset(v19, 0, sizeof(v19));
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(StartedActionEvent, 0, v19, 0, 0, StartedActionEvent, v17);
    return sub_54960((uint64_t)v19);
  }
  return result;
}

void EventReporter.emitNotificationEngagementEvent(using:for:with:)(uint64_t a1, void *a2, objc_class *a3)
{
  BAEventReporter *v5;
  BAEventReporter *v6;
  objc_class *v7;
  id v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;

  v5 = (BAEventReporter *)swift_allocObject(&unk_278E68, 32, 7);
  v5[1].super.isa = a3;
  *(_QWORD *)v5[1].dataProviders = a2;
  v6 = (BAEventReporter *)swift_allocObject(&unk_278E90, 32, 7);
  v6[1].super.isa = (Class)sub_ED264;
  *(_QWORD *)v6[1].dataProviders = v5;
  v7 = a3;
  v8 = a2;
  swift_retain(v5);
  Tracker.transaction(block:)(sub_54CC0, v6);
  swift_release(v5, v9, v10, v11, v12, v13, v14, v15);
  swift_release(v6, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_EC3B8()
{
  BAEventReporter *v0;
  BAEventReporter *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  int64_t v14;
  int64_t v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  int64_t v56;
  int64_t v57;
  id v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  int64_t v66;
  int64_t v67;
  id v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  BAEventReporter *v86;
  BAEventReporter *v87;
  BAEventReporter *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BAEventReporter *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  BAEventReporter *v97;
  uint64_t v98;
  __int128 v99;
  BAEventReporter *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  BAEventReporter *v105;
  uint64_t v106;
  __int128 v107;
  BAEventReporter *v108;

  sub_B09B8((uint64_t)&v101);
  v0 = (BAEventReporter *)v102;
  v1 = v105;
  v92 = v108;
  v88 = (BAEventReporter *)v101;
  v93 = v101;
  *(_QWORD *)&v94 = v102;
  WORD4(v94) = WORD4(v102);
  BYTE10(v94) = BYTE10(v102);
  v95 = v103;
  v86 = (BAEventReporter *)v104;
  v96 = v104;
  v97 = v105;
  v98 = v106;
  v87 = (BAEventReporter *)v107;
  v99 = v107;
  v100 = v108;
  v91 = sub_71B4(&qword_299FD0);
  v2 = type metadata accessor for DataEventTrait(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v89 = v4 | 7;
  v90 = v5 + *(_QWORD *)(v3 + 72);
  v6 = swift_allocObject(v91, v90, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1F5FF0;
  v7 = enum case for DataEventTrait.onlyOnce(_:);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  v8(v6 + v5, enum case for DataEventTrait.onlyOnce(_:), v2);
  v9 = sub_ED660();
  AccessTracker.push<A>(data:traits:file:line:)(&v93, v6, 0xD00000000000006DLL, 0x8000000000221430, 48, &type metadata for NotificationData, v9);
  swift_bridgeObjectRelease(v1, v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(v0, v17, v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease((BAEventReporter *)v6, v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(v88, v31, v32, v33, v34, v35, v36, v37);
  swift_bridgeObjectRelease(v86, v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(v87, v45, v46, v47, v48, v49, v50, v51);
  swift_bridgeObjectRelease(v92, v52, v53, v54, v55, v56, v57, v58);
  sub_B0DE4((uint64_t)&v101);
  v59 = v102;
  LOBYTE(v93) = v101;
  *((_QWORD *)&v93 + 1) = *((_QWORD *)&v101 + 1);
  v94 = v102;
  LOBYTE(v95) = v103;
  v60 = swift_allocObject(v91, v90, v89);
  *(_OWORD *)(v60 + 16) = xmmword_1F5FF0;
  v8(v60 + v5, v7, v2);
  v61 = sub_ED6A4();
  AccessTracker.push<A>(data:traits:file:line:)(&v93, v60, 0xD00000000000006DLL, 0x8000000000221430, 49, &type metadata for NotificationEngagementData, v61);
  swift_bridgeObjectRelease((BAEventReporter *)v59, v62, v63, v64, v65, v66, v67, v68);
  swift_bridgeObjectRelease((BAEventReporter *)v60, v69, v70, v71, v72, v73, v74, v75);
  swift_bridgeObjectRelease(*((BAEventReporter **)&v59 + 1), v76, v77, v78, v79, v80, v81, v82);
  v83 = type metadata accessor for NotificationEngagementEvent(0);
  v84 = sub_7E10(&qword_29DBE8, type metadata accessor for NotificationEngagementEvent, (uint64_t)&protocol conformance descriptor for NotificationEngagementEvent);
  v101 = 0u;
  v102 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v83, 0, &v101, 0, 0, v83, v84);
  return sub_54960((uint64_t)&v101);
}

void EventReporter.emitScrubEvent(using:contentData:readingSettingsData:startPosition:endPosition:totalLength:)(uint64_t a1, __int128 *a2, _OWORD *a3, int a4, int a5, int a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  id v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  int64_t v34;
  id v35;
  BOOL v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v11 = a2[3];
  v40 = a2[2];
  v41 = v11;
  v12 = a2[5];
  v42 = a2[4];
  v43 = v12;
  v13 = a2[1];
  v38 = *a2;
  v39 = v13;
  v14 = a3[1];
  v15 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection", v38, v39, v40, v41, v42, v43, *a3, v14);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, "isDiagnosticSubmissionAllowed");

    if (v17)
    {
      v18 = swift_allocObject(&unk_278EB8, 156, 7);
      v19 = a2[3];
      *(_OWORD *)(v18 + 48) = a2[2];
      *(_OWORD *)(v18 + 64) = v19;
      v20 = a2[5];
      *(_OWORD *)(v18 + 80) = a2[4];
      *(_OWORD *)(v18 + 96) = v20;
      v21 = a2[1];
      *(_OWORD *)(v18 + 16) = *a2;
      *(_OWORD *)(v18 + 32) = v21;
      v22 = a3[1];
      *(_OWORD *)(v18 + 112) = *a3;
      *(_OWORD *)(v18 + 128) = v22;
      *(_DWORD *)(v18 + 144) = a4;
      *(_DWORD *)(v18 + 148) = a5;
      *(_DWORD *)(v18 + 152) = a6;
      v23 = (BAEventReporter *)swift_allocObject(&unk_278EE0, 32, 7);
      v23[1].super.isa = (Class)sub_ED3FC;
      *(_QWORD *)v23[1].dataProviders = v18;
      sub_53FBC(&v38);
      sub_ED410((uint64_t)&v44);
      swift_retain(v18);
      Tracker.transaction(block:)(sub_54CC0, v23);
      swift_release((BAEventReporter *)v18, v24, v25, v26, v27, v28, v29, v30);
      swift_release(v23, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_EC968(uint64_t a1, __int128 *a2, __int128 *a3, unsigned int a4, unsigned int a5, int a6)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v50 = __PAIR64__(a5, a4);
  v7 = a2[3];
  v54 = a2[2];
  v55 = v7;
  v8 = a2[5];
  v56 = a2[4];
  v57 = v8;
  v9 = a2[1];
  v52 = *a2;
  v53 = v9;
  v49 = sub_71B4(&qword_299FD0);
  v10 = type metadata accessor for DataEventTrait(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = v13 + *(_QWORD *)(v11 + 72);
  v15 = v12 | 7;
  v16 = swift_allocObject(v49, v14, v12 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  v17 = enum case for DataEventTrait.onlyOnce(_:);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  v18(v16 + v13, enum case for DataEventTrait.onlyOnce(_:), v10);
  v19 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v52, v16, 0xD00000000000006DLL, 0x8000000000221430, 77, &type metadata for ContentData, v19);
  swift_bridgeObjectRelease((BAEventReporter *)v16, v20, v21, v22, v23, v24, v25, v26);
  v27 = a3[1];
  v52 = *a3;
  v53 = v27;
  v28 = swift_allocObject(v49, v14, v15);
  *(_OWORD *)(v28 + 16) = xmmword_1F5FF0;
  v18(v28 + v13, v17, v10);
  v29 = sub_9D98C();
  AccessTracker.push<A>(data:traits:file:line:)(&v52, v28, 0xD00000000000006DLL, 0x8000000000221430, 78, &type metadata for ReadingSettingsData, v29);
  swift_bridgeObjectRelease((BAEventReporter *)v28, v30, v31, v32, v33, v34, v35, v36);
  *(_QWORD *)&v52 = v50;
  DWORD2(v52) = a6;
  v37 = swift_allocObject(v49, v14, v15);
  *(_OWORD *)(v37 + 16) = xmmword_1F5FF0;
  v18(v37 + v13, v17, v10);
  v38 = sub_ED5AC();
  AccessTracker.push<A>(data:traits:file:line:)(&v52, v37, 0xD00000000000006DLL, 0x8000000000221430, 79, &type metadata for ScrubData, v38);
  swift_bridgeObjectRelease((BAEventReporter *)v37, v39, v40, v41, v42, v43, v44, v45);
  v46 = type metadata accessor for ScrubEvent(0);
  v47 = sub_7E10(&qword_29DBD0, type metadata accessor for ScrubEvent, (uint64_t)&protocol conformance descriptor for ScrubEvent);
  v52 = 0u;
  v53 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v46, 0, &v52, 0, 0, v46, v47);
  return sub_54960((uint64_t)&v52);
}

uint64_t EventReporter.emitUnifiedMessageActionEvent(using:with:messageType:messageIdentifier:hasActionable:actionIdentifier:placementName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = swift_allocObject(&unk_278F08, 88, 7);
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a5;
  v17 = a3;
  *(_QWORD *)(v16 + 48) = a6;
  *(_BYTE *)(v16 + 56) = a7;
  *(_QWORD *)(v16 + 64) = a8;
  *(_QWORD *)(v16 + 72) = a9;
  *(_QWORD *)(v16 + 80) = a10;
  v18 = swift_allocObject(&unk_278F30, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_ED43C;
  *(_QWORD *)(v18 + 24) = v16;
  swift_bridgeObjectRetain(a8);
  swift_bridgeObjectRetain(a10);
  swift_retain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a6);
  Tracker.transaction(block:)(sub_54CC0, v18);
  swift_release(v16);
  return swift_release(v18);
}

uint64_t sub_ECCDC(uint64_t a1, unint64_t a2, uint64_t a3, BAEventReporter *a4, uint64_t a5, BAEventReporter *a6, char a7, BAEventReporter *a8, uint64_t a9, BAEventReporter *a10)
{
  char v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  unint64_t v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  int64_t v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  int64_t v47;
  int64_t v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  __int128 v62;
  __int128 v63;
  BAEventReporter *v64;
  uint64_t v65;
  BAEventReporter *v66;

  v10 = a2;
  if (a2 >= 7)
  {
    *(_QWORD *)&v62 = a2;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedMessageType, &v62, &type metadata for BridgedMessageType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v62 = a3;
    *((_QWORD *)&v62 + 1) = a4;
    v14 = sub_71B4(&qword_299FD0);
    v15 = type metadata accessor for DataEventTrait(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned __int8 *)(v16 + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = swift_allocObject(v14, v18 + *(_QWORD *)(v16 + 72), v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_1F5FF0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v19 + v18, enum case for DataEventTrait.onlyOnce(_:), v15);
    v20 = sub_ED568();
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    AccessTracker.push<A>(data:traits:file:line:)(&v62, v19, 0xD00000000000006DLL, 0x8000000000221430, 103, &type metadata for ActionData, v20);
    swift_bridgeObjectRelease(a4, v21, v22, v23, v24, v25, v26, v27);
    swift_bridgeObjectRelease((BAEventReporter *)v19, v28, v29, v30, v31, v32, v33, v34);
    LOBYTE(v62) = v10;
    *((_QWORD *)&v62 + 1) = a5;
    *(_QWORD *)&v63 = a6;
    BYTE8(v63) = a7 & 1;
    v64 = a8;
    v65 = a9;
    v66 = a10;
    v35 = sub_A2688();
    AccessTracker.push<A>(data:traits:file:line:)(&v62, _swiftEmptyArrayStorage, 0xD00000000000006DLL, 0x8000000000221430, 104, &type metadata for MessageData, v35);
    swift_bridgeObjectRelease(a10, v36, v37, v38, v39, v40, v41, v42);
    swift_bridgeObjectRelease(a8, v43, v44, v45, v46, v47, v48, v49);
    swift_bridgeObjectRelease(a6, v50, v51, v52, v53, v54, v55, v56);
    v57 = type metadata accessor for UnifiedMessageActionEvent(0);
    v58 = sub_7E10(&qword_29DBC0, type metadata accessor for UnifiedMessageActionEvent, (uint64_t)&protocol conformance descriptor for UnifiedMessageActionEvent);
    v62 = 0u;
    v63 = 0u;
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v57, 0, &v62, 0, 0, v57, v58);
    return sub_54960((uint64_t)&v62);
  }
  return result;
}

_QWORD *_s13BookAnalytics13EventReporterC020emitAnnotationActionC05using11contentData04viewJ0yAA9BATrackerC_AA014BridgedContentJ0CAA0m4ViewJ0CtF_0()
{
  char v0;
  char v1;
  char v2;
  _QWORD *result;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  _BYTE v25[3];
  _OWORD v26[6];

  sub_AF27C((uint64_t)v26);
  sub_B2778(v25);
  v0 = v25[0];
  v1 = v25[1];
  v2 = v25[2];
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "isDiagnosticSubmissionAllowed");

    if (v5)
    {
      v6 = swift_allocObject(&unk_2790E8, 115, 7);
      v7 = v26[3];
      *(_OWORD *)(v6 + 48) = v26[2];
      *(_OWORD *)(v6 + 64) = v7;
      v8 = v26[5];
      *(_OWORD *)(v6 + 80) = v26[4];
      *(_OWORD *)(v6 + 96) = v8;
      v9 = v26[1];
      *(_OWORD *)(v6 + 16) = v26[0];
      *(_OWORD *)(v6 + 32) = v9;
      *(_BYTE *)(v6 + 112) = v0;
      *(_BYTE *)(v6 + 113) = v1;
      *(_BYTE *)(v6 + 114) = v2;
      v10 = (BAEventReporter *)swift_allocObject(&unk_279110, 32, 7);
      v10[1].super.isa = (Class)sub_ED1F0;
      *(_QWORD *)v10[1].dataProviders = v6;
      sub_53FBC(v26);
      swift_retain(v6);
      Tracker.transaction(block:)(sub_54CC0, v10);
      swift_release((BAEventReporter *)v6, v11, v12, v13, v14, v15, v16, v17);
      swift_release(v10, v18, v19, v20, v21, v22, v23, v24);
    }
    return sub_54654(v26);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_ED1FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_ED20C(uint64_t a1)
{
  uint64_t v1;

  return sub_EC0E8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_ED214(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

uint64_t sub_ED238()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_ED264()
{
  return sub_EC3B8();
}

_QWORD *_s13BookAnalytics13EventReporterC09emitScrubC05using11contentData015readingSettingsI013startPosition03endM011totalLengthyAA9BATrackerC_AA014BridgedContentI0CAA0r7ReadingkI0CSo8NSNumberCA2RtF_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *result;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  BAEventReporter *v20;
  SEL v21;
  id v22;
  id v23;
  int64_t v24;
  id v25;
  BOOL v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  _OWORD v35[6];
  _OWORD v36[2];

  sub_AF27C((uint64_t)v35);
  sub_B1998((uint64_t)v36);
  v9 = objc_msgSend(a4, "intValue");
  v10 = objc_msgSend(a5, "intValue");
  v11 = objc_msgSend(a6, "intValue");
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v13 = result;
    v14 = objc_msgSend(result, "isDiagnosticSubmissionAllowed");

    if (v14)
    {
      v15 = swift_allocObject(&unk_279098, 156, 7);
      v16 = v35[3];
      *(_OWORD *)(v15 + 48) = v35[2];
      *(_OWORD *)(v15 + 64) = v16;
      v17 = v35[5];
      *(_OWORD *)(v15 + 80) = v35[4];
      *(_OWORD *)(v15 + 96) = v17;
      v18 = v35[1];
      *(_OWORD *)(v15 + 16) = v35[0];
      *(_OWORD *)(v15 + 32) = v18;
      v19 = v36[1];
      *(_OWORD *)(v15 + 112) = v36[0];
      *(_OWORD *)(v15 + 128) = v19;
      *(_DWORD *)(v15 + 144) = v9;
      *(_DWORD *)(v15 + 148) = v10;
      *(_DWORD *)(v15 + 152) = v11;
      v20 = (BAEventReporter *)swift_allocObject(&unk_2790C0, 32, 7);
      v20[1].super.isa = (Class)sub_ED83C;
      *(_QWORD *)v20[1].dataProviders = v15;
      sub_53FBC(v35);
      sub_ED410((uint64_t)v36);
      swift_retain(v15);
      Tracker.transaction(block:)(sub_54CC0, v20);
      swift_release((BAEventReporter *)v15, v21, v22, v23, v24, v25, v26, v27);
      swift_release(v20, v28, v29, v30, v31, v32, v33, v34);
    }
    sub_ED5F0((uint64_t)v36);
    return sub_54654(v35);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_ED3FC(uint64_t a1)
{
  uint64_t v1;

  return sub_EC968(a1, (__int128 *)(v1 + 16), (__int128 *)(v1 + 112), *(_DWORD *)(v1 + 144), *(_DWORD *)(v1 + 148), *(_DWORD *)(v1 + 152));
}

uint64_t sub_ED410(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_ED444()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_ED480(uint64_t a1)
{
  uint64_t v1;

  return sub_ECCDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(BAEventReporter **)(v1 + 32), *(_QWORD *)(v1 + 40), *(BAEventReporter **)(v1 + 48), *(_BYTE *)(v1 + 56), *(BAEventReporter **)(v1 + 64), *(_QWORD *)(v1 + 72), *(BAEventReporter **)(v1 + 80));
}

uint64_t sub_ED4B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_ED4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_ED52C()
{
  type metadata accessor for URL(0);
  return sub_EBD7C();
}

unint64_t sub_ED568()
{
  unint64_t result;

  result = qword_29DBB8;
  if (!qword_29DBB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ActionData, &type metadata for ActionData);
    atomic_store(result, (unint64_t *)&qword_29DBB8);
  }
  return result;
}

unint64_t sub_ED5AC()
{
  unint64_t result;

  result = qword_29DBC8;
  if (!qword_29DBC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ScrubData, &type metadata for ScrubData);
    atomic_store(result, (unint64_t *)&qword_29DBC8);
  }
  return result;
}

uint64_t sub_ED5F0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_ED61C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocObject(v0, 156, 7);
}

unint64_t sub_ED660()
{
  unint64_t result;

  result = qword_29DBD8;
  if (!qword_29DBD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NotificationData, &type metadata for NotificationData);
    atomic_store(result, (unint64_t *)&qword_29DBD8);
  }
  return result;
}

unint64_t sub_ED6A4()
{
  unint64_t result;

  result = qword_29DBE0;
  if (!qword_29DBE0)
  {
    result = swift_getWitnessTable("a|\a", &type metadata for NotificationEngagementData);
    atomic_store(result, (unint64_t *)&qword_29DBE0);
  }
  return result;
}

unint64_t sub_ED6E8()
{
  unint64_t result;

  result = qword_29DBF0;
  if (!qword_29DBF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for GetStartedActionData, &type metadata for GetStartedActionData);
    atomic_store(result, (unint64_t *)&qword_29DBF0);
  }
  return result;
}

unint64_t sub_ED72C()
{
  unint64_t result;

  result = qword_29DC00;
  if (!qword_29DC00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ExternalLinkData, &type metadata for ExternalLinkData);
    atomic_store(result, (unint64_t *)&qword_29DC00);
  }
  return result;
}

unint64_t sub_ED770()
{
  unint64_t result;

  result = qword_29DC10;
  if (!qword_29DC10)
  {
    result = swift_getWitnessTable("͕\a", &type metadata for ViewData);
    atomic_store(result, (unint64_t *)&qword_29DC10);
  }
  return result;
}

uint64_t sub_ED7B8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 115, 7);
}

uint64_t sub_ED7F4(uint64_t a1)
{
  uint64_t v1;

  return sub_EBA68(a1, (__int128 *)(v1 + 16), *(unsigned __int16 *)(v1 + 112) | (*(unsigned __int8 *)(v1 + 114) << 16));
}

BookAnalytics::ClearType_optional __swiftcall ClearType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BookAnalytics::ClearType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267BE8, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t ClearType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x796C746E65636572;
  else
    return 0x6553746E65636572;
}

uint64_t sub_ED8F8(char *a1, char *a2)
{
  return sub_252B4(*a1, *a2);
}

unint64_t sub_ED908()
{
  unint64_t result;

  result = qword_29DC20;
  if (!qword_29DC20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ClearType, &type metadata for ClearType);
    atomic_store(result, (unint64_t *)&qword_29DC20);
  }
  return result;
}

Swift::Int sub_ED94C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x796C746E65636572;
  else
    v2 = 0x6553746E65636572;
  if (v1)
    v3 = 0xEE00646577656956;
  else
    v3 = 0xEE00736568637261;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_ED9E4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x796C746E65636572;
  else
    v2 = 0x6553746E65636572;
  if (*v1)
    v3 = 0xEE00646577656956;
  else
    v3 = 0xEE00736568637261;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_EDA58(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x796C746E65636572;
  else
    v3 = 0x6553746E65636572;
  if (v2)
    v4 = 0xEE00646577656956;
  else
    v4 = 0xEE00736568637261;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookAnalytics::ClearType_optional sub_EDAEC(Swift::String *a1)
{
  return ClearType.init(rawValue:)(*a1);
}

void sub_EDAF8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6553746E65636572;
  if (*v1)
    v2 = 0x796C746E65636572;
  v3 = 0xEE00736568637261;
  if (*v1)
    v3 = 0xEE00646577656956;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_EDB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_EDCC4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_EDBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_EDCC4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ClearType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_EDC44 + 4 * byte_20371D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_EDC78 + 4 * byte_203718[v4]))();
}

uint64_t sub_EDC78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_EDC80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xEDC88);
  return result;
}

uint64_t sub_EDC94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xEDC9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_EDCA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_EDCA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClearType()
{
  return &type metadata for ClearType;
}

unint64_t sub_EDCC4()
{
  unint64_t result;

  result = qword_29DC28;
  if (!qword_29DC28)
  {
    result = swift_getWitnessTable("eZ\a", &type metadata for ClearType);
    atomic_store(result, (unint64_t *)&qword_29DC28);
  }
  return result;
}

void static LibrarySortData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_EDD5C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_EDDC4 + 4 * byte_203831[a1]))(0x746E65636572);
}

uint64_t sub_EDDC4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E65636572 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E65636572, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_EDE78()
{
  return 0x6570795474726F73;
}

uint64_t sub_EDE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6570795474726F73 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6570795474726F73, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_EDF24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_EE1C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_EDF4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_EE1C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibrarySortData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29DC30);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_EE1C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibrarySortData.CodingKeys, &type metadata for LibrarySortData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_EE204();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for SortType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t LibrarySortData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29DC48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_EE1C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibrarySortData.CodingKeys, &type metadata for LibrarySortData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_EE248();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for SortType, v13, v5, &type metadata for SortType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

void sub_EE18C(char *a1)
{
  sub_25820(*a1);
}

uint64_t sub_EE198@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return LibrarySortData.init(from:)(a1, a2);
}

uint64_t sub_EE1AC(_QWORD *a1)
{
  return LibrarySortData.encode(to:)(a1);
}

unint64_t sub_EE1C0()
{
  unint64_t result;

  result = qword_29DC38;
  if (!qword_29DC38)
  {
    result = swift_getWitnessTable(byte_2039E0, &type metadata for LibrarySortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DC38);
  }
  return result;
}

unint64_t sub_EE204()
{
  unint64_t result;

  result = qword_29DC40;
  if (!qword_29DC40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortType, &type metadata for SortType);
    atomic_store(result, (unint64_t *)&qword_29DC40);
  }
  return result;
}

unint64_t sub_EE248()
{
  unint64_t result;

  result = qword_29DC50;
  if (!qword_29DC50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortType, &type metadata for SortType);
    atomic_store(result, (unint64_t *)&qword_29DC50);
  }
  return result;
}

unint64_t sub_EE290()
{
  unint64_t result;

  result = qword_29DC58;
  if (!qword_29DC58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LibrarySortData, &type metadata for LibrarySortData);
    atomic_store(result, (unint64_t *)&qword_29DC58);
  }
  return result;
}

unint64_t sub_EE2D8()
{
  unint64_t result;

  result = qword_29DC60;
  if (!qword_29DC60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LibrarySortData, &type metadata for LibrarySortData);
    atomic_store(result, (unint64_t *)&qword_29DC60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LibrarySortData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_EE368 + 4 * byte_20383B[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_EE39C + 4 * byte_203836[v4]))();
}

uint64_t sub_EE39C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_EE3A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xEE3ACLL);
  return result;
}

uint64_t sub_EE3B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xEE3C0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_EE3C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_EE3CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibrarySortData()
{
  return &type metadata for LibrarySortData;
}

uint64_t storeEnumTagSinglePayload for LibrarySortData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_EE428 + 4 * byte_203840[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_EE448 + 4 * byte_203845[v4]))();
}

_BYTE *sub_EE428(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_EE448(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_EE450(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_EE458(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_EE460(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_EE468(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LibrarySortData.CodingKeys()
{
  return &type metadata for LibrarySortData.CodingKeys;
}

unint64_t sub_EE488()
{
  unint64_t result;

  result = qword_29DC68;
  if (!qword_29DC68)
  {
    result = swift_getWitnessTable(byte_2039B8, &type metadata for LibrarySortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DC68);
  }
  return result;
}

unint64_t sub_EE4D0()
{
  unint64_t result;

  result = qword_29DC70;
  if (!qword_29DC70)
  {
    result = swift_getWitnessTable("qZ\a", &type metadata for LibrarySortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DC70);
  }
  return result;
}

unint64_t sub_EE518()
{
  unint64_t result;

  result = qword_29DC78;
  if (!qword_29DC78)
  {
    result = swift_getWitnessTable("YZ\a", &type metadata for LibrarySortData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DC78);
  }
  return result;
}

BookAnalytics::DealType_optional __swiftcall DealType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DealType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267C38, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DealType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701147238;
  if (*v0 != 1)
    v1 = 0x6E776F6E6B6E75;
  if (*v0)
    return v1;
  else
    return 0x6F72446563697270;
}

uint64_t sub_EE60C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24CFC(*a1, *a2);
}

unint64_t sub_EE61C()
{
  unint64_t result;

  result = qword_29DC80;
  if (!qword_29DC80)
  {
    result = swift_getWitnessTable("mZ\a", &type metadata for DealType);
    atomic_store(result, (unint64_t *)&qword_29DC80);
  }
  return result;
}

Swift::Int sub_EE660()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE400000000000000;
  v3 = 1701147238;
  if (v1 != 1)
  {
    v3 = 0x6E776F6E6B6E75;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6F72446563697270;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE900000000000070;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_EE6FC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE400000000000000;
  v3 = 1701147238;
  if (*v1 != 1)
  {
    v3 = 0x6E776F6E6B6E75;
    v2 = 0xE700000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6F72446563697270;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE900000000000070;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_EE774(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE400000000000000;
  v4 = 1701147238;
  if (v2 != 1)
  {
    v4 = 0x6E776F6E6B6E75;
    v3 = 0xE700000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6F72446563697270;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE900000000000070;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::DealType_optional sub_EE80C(Swift::String *a1)
{
  return DealType.init(rawValue:)(*a1);
}

void sub_EE818(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000070;
  v4 = 0xE400000000000000;
  v5 = 1701147238;
  if (v2 != 1)
  {
    v5 = 0x6E776F6E6B6E75;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6F72446563697270;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_EE874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_EE9E8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_EE8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_EE9E8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for DealType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_EE968 + 4 * byte_203A35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_EE99C + 4 * byte_203A30[v4]))();
}

uint64_t sub_EE99C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_EE9A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xEE9ACLL);
  return result;
}

uint64_t sub_EE9B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xEE9C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_EE9C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_EE9CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DealType()
{
  return &type metadata for DealType;
}

unint64_t sub_EE9E8()
{
  unint64_t result;

  result = qword_29DC88;
  if (!qword_29DC88)
  {
    result = swift_getWitnessTable("=Z\a", &type metadata for DealType);
    atomic_store(result, (unint64_t *)&qword_29DC88);
  }
  return result;
}

void static FormatFilterData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_EEAA0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_EEAFC + 4 * byte_203B54[a1]))(0x6573616863727570);
}

void sub_EEAFC(uint64_t a1)
{
  char v1;
  BAEventReporter *v2;
  char v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  int64_t v8;
  int64_t v9;
  id v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;

  if (a1 == 0x6573616863727570 && v2 == (BAEventReporter *)0xE900000000000064)
  {
    swift_bridgeObjectRelease_n(0xE900000000000064, 2);
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, 0x6573616863727570, 0xE900000000000064, 0);
    swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
    swift_bridgeObjectRelease((BAEventReporter *)0xE900000000000064, v11, v12, v13, v14, v15, v16, v17);
    if ((v3 & 1) == 0)
      return;
  }
  sub_26598(v1);
}

uint64_t sub_EEBCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x794274726F73;
  else
    return 0x79547265746C6966;
}

uint64_t sub_EEC08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_EF49C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_EEC2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_EEFB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_EEC54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_EEFB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FormatFilterData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = sub_71B4(&qword_29DC90);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v16 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_EEFB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FormatFilterData.CodingKeys, &type metadata for FormatFilterData.CodingKeys, v11, v9, v10);
  v20 = v8;
  v19 = 0;
  v12 = sub_EEFF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v4, &type metadata for FilterType, v12);
  if (!v2)
  {
    v18 = v16;
    v17 = 1;
    v13 = sub_EF03C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, &type metadata for SortBy, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FormatFilterData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = sub_71B4(&qword_29DCB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_EEFB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FormatFilterData.CodingKeys, &type metadata for FormatFilterData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v19) = 0;
    v12 = sub_EF080();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v19 + 2), &type metadata for FilterType, (char *)&v19 + 1, v5, &type metadata for FilterType, v12);
    v13 = BYTE2(v19);
    v18 = 1;
    v14 = sub_EF0C4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for SortBy, &v18, v5, &type metadata for SortBy, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v19;
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

void sub_EEF44(char *a1)
{
  char v1;
  char v2;

  v1 = a1[1];
  sub_29AB0(*a1);
  if ((v2 & 1) != 0)
    sub_26598(v1);
}

uint64_t sub_EEF8C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatFilterData.init(from:)(a1, a2);
}

uint64_t sub_EEFA0(_QWORD *a1)
{
  return FormatFilterData.encode(to:)(a1);
}

unint64_t sub_EEFB4()
{
  unint64_t result;

  result = qword_29DC98;
  if (!qword_29DC98)
  {
    result = swift_getWitnessTable(byte_203D04, &type metadata for FormatFilterData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DC98);
  }
  return result;
}

unint64_t sub_EEFF8()
{
  unint64_t result;

  result = qword_29DCA0;
  if (!qword_29DCA0)
  {
    result = swift_getWitnessTable("-%\a", &type metadata for FilterType);
    atomic_store(result, (unint64_t *)&qword_29DCA0);
  }
  return result;
}

unint64_t sub_EF03C()
{
  unint64_t result;

  result = qword_29DCA8;
  if (!qword_29DCA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortBy, &type metadata for SortBy);
    atomic_store(result, (unint64_t *)&qword_29DCA8);
  }
  return result;
}

unint64_t sub_EF080()
{
  unint64_t result;

  result = qword_29DCB8;
  if (!qword_29DCB8)
  {
    result = swift_getWitnessTable("E%\a", &type metadata for FilterType);
    atomic_store(result, (unint64_t *)&qword_29DCB8);
  }
  return result;
}

unint64_t sub_EF0C4()
{
  unint64_t result;

  result = qword_29DCC0;
  if (!qword_29DCC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortBy, &type metadata for SortBy);
    atomic_store(result, (unint64_t *)&qword_29DCC0);
  }
  return result;
}

unint64_t sub_EF10C()
{
  unint64_t result;

  result = qword_29DCC8;
  if (!qword_29DCC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FormatFilterData, &type metadata for FormatFilterData);
    atomic_store(result, (unint64_t *)&qword_29DCC8);
  }
  return result;
}

unint64_t sub_EF154()
{
  unint64_t result;

  result = qword_29DCD0;
  if (!qword_29DCD0)
  {
    result = swift_getWitnessTable("}Z\a", &type metadata for FormatFilterData);
    atomic_store(result, (unint64_t *)&qword_29DCD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFilterData(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 65283 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65283 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65283;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65283;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65283;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatFilterData(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65283 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65283 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_EF278 + 4 * byte_203B5D[v4]))();
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_EF2AC + 4 * byte_203B58[v4]))();
}

uint64_t sub_EF2AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_EF2B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0xEF2BCLL);
  return result;
}

uint64_t sub_EF2C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0xEF2D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_EF2D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_EF2DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatFilterData()
{
  return &type metadata for FormatFilterData;
}

uint64_t storeEnumTagSinglePayload for FormatFilterData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_EF344 + 4 * byte_203B67[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_EF378 + 4 * byte_203B62[v4]))();
}

uint64_t sub_EF378(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_EF380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xEF388);
  return result;
}

uint64_t sub_EF394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xEF39CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_EF3A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_EF3A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatFilterData.CodingKeys()
{
  return &type metadata for FormatFilterData.CodingKeys;
}

unint64_t sub_EF3C8()
{
  unint64_t result;

  result = qword_29DCD8;
  if (!qword_29DCD8)
  {
    result = swift_getWitnessTable("}Y\a", &type metadata for FormatFilterData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DCD8);
  }
  return result;
}

unint64_t sub_EF410()
{
  unint64_t result;

  result = qword_29DCE0;
  if (!qword_29DCE0)
  {
    result = swift_getWitnessTable("=Z\a", &type metadata for FormatFilterData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DCE0);
  }
  return result;
}

unint64_t sub_EF458()
{
  unint64_t result;

  result = qword_29DCE8;
  if (!qword_29DCE8)
  {
    result = swift_getWitnessTable("%Z\a", &type metadata for FormatFilterData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DCE8);
  }
  return result;
}

uint64_t sub_EF49C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x79547265746C6966 && a2 == 0xEA00000000006570)
  {
    v5 = 0xEA00000000006570;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79547265746C6966, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x794274726F73 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x794274726F73, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::ScrubData __swiftcall ScrubData.init(startPosition:endPosition:totalLength:)(Swift::Int32 startPosition, Swift::Int32 endPosition, Swift::Int32 totalLength)
{
  Swift::Int32 *v3;
  BookAnalytics::ScrubData result;

  *v3 = startPosition;
  v3[1] = endPosition;
  v3[2] = totalLength;
  result.totalLength = endPosition;
  result.startPosition = startPosition;
  return result;
}

uint64_t ScrubData.endPosition.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t ScrubData.endPosition.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*ScrubData.endPosition.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

BOOL static ScrubData.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_EF5EC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E756F4365746F6ELL;
  if (*v0 != 1)
    v1 = 0x6867696C68676968;
  if (*v0)
    return v1;
  else
    return 0x6B72616D6B6F6F62;
}

uint64_t sub_EF664@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_EFBC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_EF688(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_EF82C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_EF6B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_EF82C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentSettingsData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_29DCF0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v16 = v1[1];
  v15 = v1[2];
  v10 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v10);
  v11 = sub_EF82C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentSettingsData.CodingKeys, &type metadata for ContentSettingsData.CodingKeys, v11, v10, v9);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v19, v4);
  if (!v2)
  {
    v12 = v15;
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v18, v4);
    v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v12, &v17, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_EF82C()
{
  unint64_t result;

  result = qword_29DCF8;
  if (!qword_29DCF8)
  {
    result = swift_getWitnessTable(byte_203F08, &type metadata for ContentSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DCF8);
  }
  return result;
}

uint64_t ContentSettingsData.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v5 = sub_71B4(&qword_29DD00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_EF82C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentSettingsData.CodingKeys, &type metadata for ContentSettingsData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v19 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
    v18 = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5);
    v17 = 2;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_EF9EC@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return ContentSettingsData.init(from:)(a1, a2);
}

uint64_t sub_EFA00(_QWORD *a1)
{
  return ContentSettingsData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ContentSettingsData()
{
  return &type metadata for ContentSettingsData;
}

uint64_t storeEnumTagSinglePayload for ContentSettingsData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_EFA70 + 4 * byte_203D65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_EFAA4 + 4 * byte_203D60[v4]))();
}

uint64_t sub_EFAA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_EFAAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xEFAB4);
  return result;
}

uint64_t sub_EFAC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xEFAC8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_EFACC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_EFAD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentSettingsData.CodingKeys()
{
  return &type metadata for ContentSettingsData.CodingKeys;
}

unint64_t sub_EFAF4()
{
  unint64_t result;

  result = qword_29DD08;
  if (!qword_29DD08)
  {
    result = swift_getWitnessTable("iY\a", &type metadata for ContentSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DD08);
  }
  return result;
}

unint64_t sub_EFB3C()
{
  unint64_t result;

  result = qword_29DD10;
  if (!qword_29DD10)
  {
    result = swift_getWitnessTable(")Z\a", &type metadata for ContentSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DD10);
  }
  return result;
}

unint64_t sub_EFB84()
{
  unint64_t result;

  result = qword_29DD18;
  if (!qword_29DD18)
  {
    result = swift_getWitnessTable(byte_203E78, &type metadata for ContentSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DD18);
  }
  return result;
}

uint64_t sub_EFBC8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6B72616D6B6F6F62 && a2 == 0xED0000746E756F43)
  {
    v5 = 0xED0000746E756F43;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B72616D6B6F6F62, 0xED0000746E756F43, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E756F4365746F6ELL && a2 == 0xE900000000000074)
  {
    v7 = 0xE900000000000074;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F4365746F6ELL, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6867696C68676968 && a2 == 0xEE00746E756F4374)
  {
    swift_bridgeObjectRelease(0xEE00746E756F4374);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6867696C68676968, 0xEE00746E756F4374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_EFD70(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29DD20, &enum case for SessionGroup.default(_:));
}

uint64_t static LibraryDataEditEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295878, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29DD20, a1);
}

uint64_t sub_EFDB0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29DD38, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static LibraryDataEditEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295880, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29DD38, a1);
}

uint64_t LibraryDataEditEvent.libraryEditData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29DD50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t LibraryDataEditEvent.libraryEditData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29DD50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t LibraryDataEditEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryDataEditEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for LibraryDataEditEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29DDC8, (uint64_t)&nominal type descriptor for LibraryDataEditEvent);
}

uint64_t LibraryDataEditEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryDataEditEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LibraryDataEditEvent.eventData.modify())()
{
  type metadata accessor for LibraryDataEditEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LibraryDataEditEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29DD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for LibraryDataEditEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t LibraryDataEditEvent.Model.libraryEditData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  __int16 v3;

  v2 = *v1;
  v3 = *((_WORD *)v1 + 4);
  *(_QWORD *)a1 = *v1;
  *(_WORD *)(a1 + 8) = v3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t LibraryDataEditEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LibraryDataEditEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for LibraryDataEditEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29DE60, (uint64_t)&nominal type descriptor for LibraryDataEditEvent.Model);
}

uint64_t LibraryDataEditEvent.Model.init(libraryEditData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_WORD *)(a1 + 8);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_WORD *)(a3 + 8) = v4;
  v5 = a3 + *(int *)(type metadata accessor for LibraryDataEditEvent.Model(0) + 20);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_F0084()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x457972617262696CLL;
}

uint64_t sub_F00D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F1184(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F00F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F02B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F011C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F02B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibraryDataEditEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  __int16 v22;

  v3 = v1;
  v5 = sub_71B4(&qword_29DD58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_F02B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibraryDataEditEvent.Model.CodingKeys, &type metadata for LibraryDataEditEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_WORD *)v3 + 4);
  v21 = *v3;
  v22 = v12;
  v20 = 0;
  v13 = sub_8A64C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for LibraryEditData, v13);
  if (!v2)
  {
    v14 = (uint64_t)v3 + *(int *)(type metadata accessor for LibraryDataEditEvent.Model(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_F02B0()
{
  unint64_t result;

  result = qword_29DD60;
  if (!qword_29DD60)
  {
    result = swift_getWitnessTable(byte_20410C, &type metadata for LibraryDataEditEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DD60);
  }
  return result;
}

void LibraryDataEditEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;

  v24 = a2;
  v26 = type metadata accessor for EventData(0);
  v23 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_71B4(&qword_29DD68);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LibraryDataEditEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_F02B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibraryDataEditEvent.Model.CodingKeys, &type metadata for LibraryDataEditEvent.Model.CodingKeys, v13, v12, v11);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v22 = a1;
    v14 = v5;
    v15 = (uint64_t)v10;
    v16 = v25;
    v17 = v26;
    v31 = 0;
    v18 = sub_8A604();
    v19 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for LibraryEditData, &v31, v27, &type metadata for LibraryEditData, v18);
    v20 = v29;
    *(_QWORD *)v15 = v28;
    *(_WORD *)(v15 + 8) = v20;
    v30 = 1;
    v21 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, &v30, v19, v17, v21);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v19);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v23 + 32))(v15 + *(int *)(v8 + 20), v16, v17);
    sub_F055C(v15, v24);
    sub_7DAC(v22);
    sub_F05A0(v15);
  }
}

uint64_t sub_F055C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LibraryDataEditEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_F05A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LibraryDataEditEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_F05DC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  LibraryDataEditEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_F05F0(_QWORD *a1)
{
  return LibraryDataEditEvent.Model.encode(to:)(a1);
}

uint64_t sub_F0604@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295878, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29DD20, (uint64_t)sub_EFD70, a1);
}

uint64_t sub_F0628@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295880, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29DD38, (uint64_t)sub_EFDB0, a1);
}

uint64_t sub_F064C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29DD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for LibraryDataEditEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_29DD50);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for LibraryDataEditEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_29DD50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for LibraryDataEditEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29DD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for LibraryDataEditEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29DD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for LibraryDataEditEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29DD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LibraryDataEditEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29DD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryDataEditEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F09FC);
}

uint64_t sub_F09FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_29DD50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for LibraryDataEditEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F0A84);
}

uint64_t sub_F0A84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_29DD50);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_F0B08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_F0B8C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_F0B8C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29DDD8)
  {
    v2 = sub_8A604();
    v3 = sub_8A64C();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for LibraryEditData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29DDD8);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for LibraryDataEditEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v6 = *(int *)(a3 + 20);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for EventData(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for LibraryDataEditEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for LibraryDataEditEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t)a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for LibraryDataEditEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for LibraryDataEditEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t)a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryDataEditEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F0E70);
}

uint64_t sub_F0E70(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LibraryDataEditEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F0EF8);
}

char *sub_F0EF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_F0F6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\n";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LibraryDataEditEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_F102C + 4 * byte_203F65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_F1060 + 4 * byte_203F60[v4]))();
}

uint64_t sub_F1060(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F1068(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF1070);
  return result;
}

uint64_t sub_F107C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF1084);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_F1088(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F1090(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryDataEditEvent.Model.CodingKeys()
{
  return &type metadata for LibraryDataEditEvent.Model.CodingKeys;
}

unint64_t sub_F10B0()
{
  unint64_t result;

  result = qword_29DE98;
  if (!qword_29DE98)
  {
    result = swift_getWitnessTable("-Y\a", &type metadata for LibraryDataEditEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DE98);
  }
  return result;
}

unint64_t sub_F10F8()
{
  unint64_t result;

  result = qword_29DEA0;
  if (!qword_29DEA0)
  {
    result = swift_getWitnessTable("uY\a", &type metadata for LibraryDataEditEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DEA0);
  }
  return result;
}

unint64_t sub_F1140()
{
  unint64_t result;

  result = qword_29DEA8;
  if (!qword_29DEA8)
  {
    result = swift_getWitnessTable("]Y\a", &type metadata for LibraryDataEditEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DEA8);
  }
  return result;
}

uint64_t sub_F1184(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x457972617262696CLL && a2 == 0xEF61746144746964)
  {
    v5 = 0xEF61746144746964;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x457972617262696CLL, 0xEF61746144746964, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_F12A4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29DEB0, &enum case for SessionGroup.default(_:));
}

uint64_t static PageViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295888, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29DEB0, a1);
}

uint64_t sub_F12E4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29DEC8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PageViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295890, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29DEC8, a1);
}

uint64_t PageViewEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PageViewEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t PageViewEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PageViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29DF50, (uint64_t)&nominal type descriptor for PageViewEvent);
}

uint64_t PageViewEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PageViewEvent.linkData.modify())()
{
  type metadata accessor for PageViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PageViewEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 24);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PageViewEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 24);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PageViewEvent.contentData.modify())()
{
  type metadata accessor for PageViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PageViewEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 28);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PageViewEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 28);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PageViewEvent.upSellData.modify())()
{
  type metadata accessor for PageViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PageViewEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 32);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PageViewEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 32);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PageViewEvent.seriesData.modify())()
{
  type metadata accessor for PageViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PageViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 36);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PageViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent(0) + 36);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PageViewEvent.eventData.modify())()
{
  type metadata accessor for PageViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PageViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PageViewEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v6, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v6, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v2, v15);
}

uint64_t PageViewEvent.Model.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v3 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

_QWORD *PageViewEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[19];

  sub_406FC(v1 + 32, (uint64_t)v4);
  sub_406FC((uint64_t)v4, a1);
  return sub_41240(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AF4C);
}

uint64_t PageViewEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[23];
  v3 = v1[24];
  v4 = v1[25];
  v5 = v1[26];
  v6 = v1[27];
  v7 = v1[28];
  v8 = v1[29];
  v9 = v1[30];
  v10 = v1[31];
  v11 = v1[32];
  v12 = v1[33];
  v13 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t PageViewEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 296);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 280);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t PageViewEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[38];
  v3 = v1[39];
  v4 = v1[40];
  v5 = v1[41];
  v6 = v1[42];
  v7 = v1[43];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t PageViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageViewEvent.Model(0) + 36);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PageViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29DFF0, (uint64_t)&nominal type descriptor for PageViewEvent.Model);
}

uint64_t PageViewEvent.Model.init(pageData:linkData:contentData:upSellData:seriesData:eventData:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[152];

  v28 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  v13 = *((_QWORD *)a1 + 3);
  sub_406FC(a2, (uint64_t)v32);
  v26 = a3[1];
  v27 = *a3;
  v24 = a3[3];
  v25 = a3[2];
  v23 = a3[4];
  v15 = *((_QWORD *)a3 + 10);
  v14 = *((_QWORD *)a3 + 11);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v30 = *a5;
  v31 = v16;
  v29 = a5[1];
  v19 = *((_QWORD *)a5 + 4);
  v18 = *((_QWORD *)a5 + 5);
  *(_OWORD *)a7 = v28;
  *(_QWORD *)(a7 + 16) = v12;
  *(_QWORD *)(a7 + 24) = v13;
  sub_406FC((uint64_t)v32, a7 + 32);
  *(_OWORD *)(a7 + 184) = v27;
  *(_OWORD *)(a7 + 200) = v26;
  *(_OWORD *)(a7 + 216) = v25;
  *(_OWORD *)(a7 + 232) = v24;
  *(_OWORD *)(a7 + 248) = v23;
  *(_QWORD *)(a7 + 264) = v15;
  *(_QWORD *)(a7 + 272) = v14;
  *(_OWORD *)(a7 + 280) = v31;
  *(_QWORD *)(a7 + 296) = v17;
  *(_OWORD *)(a7 + 304) = v30;
  *(_OWORD *)(a7 + 320) = v29;
  *(_QWORD *)(a7 + 336) = v19;
  *(_QWORD *)(a7 + 344) = v18;
  v20 = a7 + *(int *)(type metadata accessor for PageViewEvent.Model(0) + 36);
  v21 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a6, v21);
}

uint64_t sub_F1B6C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F1B9C + 4 * byte_204160[*v0]))(0x6174614465676170, 0xE800000000000000);
}

uint64_t sub_F1B9C()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_F1BB0()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_F1BD0()
{
  return 0x61446C6C65537075;
}

uint64_t sub_F1BFC()
{
  return 0x746144746E657665;
}

uint64_t sub_F1C18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F4604(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F1C3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F1F40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F1C64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F1F40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageViewEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[159];
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v4 = sub_71B4(&qword_29DEE0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_F1F40();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageViewEvent.Model.CodingKeys, &type metadata for PageViewEvent.Model.CodingKeys, v10, v8, v9);
  v11 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  v39 = *v2;
  v40 = v11;
  v41 = v12;
  v38 = 0;
  v13 = sub_1B7AC();
  v14 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v38, v4, &type metadata for PageData, v13);
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_406FC((uint64_t)(v2 + 2), (uint64_t)v37);
  sub_406FC((uint64_t)v37, (uint64_t)&v31);
  v30 = 1;
  v15 = sub_1B7F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v30, v4, &type metadata for LinkData, v15);
  v16 = *(__int128 *)((char *)v2 + 200);
  v31 = *(__int128 *)((char *)v2 + 184);
  v32 = v16;
  v17 = *(__int128 *)((char *)v2 + 232);
  v33 = *(__int128 *)((char *)v2 + 216);
  v34 = v17;
  v18 = *(__int128 *)((char *)v2 + 264);
  v35 = *(__int128 *)((char *)v2 + 248);
  v36 = v18;
  v30 = 2;
  v19 = sub_17118();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v30, v4, &type metadata for ContentData, v19);
  v20 = *((_QWORD *)v2 + 37);
  v31 = *(__int128 *)((char *)v2 + 280);
  *(_QWORD *)&v32 = v20;
  v30 = 3;
  v21 = sub_2E6E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v30, v4, &type metadata for UpSellData, v21);
  v23 = v2[20];
  v31 = v2[19];
  v32 = v23;
  v33 = v2[21];
  v30 = 4;
  v24 = sub_10AD0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v30, v4, &type metadata for SeriesData, v24);
  v25 = v5;
  v26 = (uint64_t)v2 + *(int *)(type metadata accessor for PageViewEvent.Model(0) + 36);
  LOBYTE(v31) = 5;
  v27 = type metadata accessor for EventData(0);
  v28 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v31, v4, v27, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v7, v4);
}

unint64_t sub_F1F40()
{
  unint64_t result;

  result = qword_29DEE8;
  if (!qword_29DEE8)
  {
    result = swift_getWitnessTable(byte_20439C, &type metadata for PageViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DEE8);
  }
  return result;
}

void PageViewEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[159];
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v37 = a2;
  v39 = type metadata accessor for EventData(0);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (uint64_t *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_71B4(&qword_29DEF0);
  v4 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PageViewEvent.Model(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v11);
  v12 = sub_F1F40();
  v40 = v6;
  v13 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageViewEvent.Model.CodingKeys, &type metadata for PageViewEvent.Model.CodingKeys, v12, v11, v10);
  if (v13)
  {
    sub_7DAC(a1);
  }
  else
  {
    v54 = v7;
    v14 = v4;
    v15 = (uint64_t)v9;
    v49[0] = 0;
    v16 = sub_1C028();
    v17 = v40;
    v18 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for PageData, v49, v41, &type metadata for PageData, v16);
    v19 = v52;
    v20 = v53;
    *(_OWORD *)v15 = v51;
    *(_QWORD *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = v20;
    v50 = 1;
    v21 = sub_1C06C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for LinkData, &v50, v18, &type metadata for LinkData, v21);
    sub_406FC((uint64_t)&v51, (uint64_t)v49);
    sub_406FC((uint64_t)v49, v15 + 32);
    v42 = 2;
    v22 = sub_1779C();
    v35 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for ContentData, &v42, v18, &type metadata for ContentData, v22);
    v23 = a1;
    v24 = v14;
    v25 = v44;
    *(_OWORD *)(v15 + 184) = v43;
    *(_OWORD *)(v15 + 200) = v25;
    v26 = v46;
    *(_OWORD *)(v15 + 216) = v45;
    *(_OWORD *)(v15 + 232) = v26;
    v27 = v48;
    *(_OWORD *)(v15 + 248) = v47;
    *(_OWORD *)(v15 + 264) = v27;
    v42 = 3;
    v28 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for UpSellData, &v42, v18, &type metadata for UpSellData, v28);
    v29 = v44;
    *(_OWORD *)(v15 + 280) = v43;
    *(_QWORD *)(v15 + 296) = v29;
    v42 = 4;
    v30 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for SeriesData, &v42, v18, &type metadata for SeriesData, v30);
    v31 = v44;
    *(_OWORD *)(v15 + 304) = v43;
    *(_OWORD *)(v15 + 320) = v31;
    *(_OWORD *)(v15 + 336) = v45;
    LOBYTE(v43) = 5;
    v32 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v33 = v38;
    v34 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v39, &v43, v18, v39, v32);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v18);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v36 + 32))(v15 + *(int *)(v54 + 36), v33, v34);
    sub_F248C(v15, v37);
    sub_7DAC(v23);
    sub_F24D0(v15);
  }
}

uint64_t sub_F248C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_F24D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PageViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_F250C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PageViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_F2520(_QWORD *a1)
{
  return PageViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_F2534@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295888, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29DEB0, (uint64_t)sub_F12A4, a1);
}

uint64_t sub_F2558@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295890, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29DEC8, (uint64_t)sub_F12E4, a1);
}

uint64_t sub_F257C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v7, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v7, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v4, v16);
}

uint64_t *initializeBufferWithCopyOfBuffer for PageViewEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = sub_71B4(&qword_296A08);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for PageViewEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for PageViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t assignWithCopy for PageViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for PageViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for PageViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F2E80);
}

uint64_t sub_F2E80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_71B4(&qword_296A08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A10);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296760);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296F68);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296310);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v8 = sub_71B4(&qword_295D70);
            v12 = *(_QWORD *)(v8 - 8);
            v13 = a3[9];
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PageViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F2FA8);
}

uint64_t sub_F2FA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_71B4(&qword_296A08);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A10);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296760);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296F68);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296310);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v10 = sub_71B4(&qword_295D70);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[9];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_F30CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];

  sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_8734(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PageViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
    return a1;
  }
  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (!v8)
  {
    v21 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v21;
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_QWORD *)(a1 + 176) = a2[22];
    v22 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v22;
    v23 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v23;
    v24 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v24;
    v16 = a2[24];
    if (v16)
      goto LABEL_4;
LABEL_7:
    v25 = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 232) = v25;
    v26 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v26;
    v27 = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 200) = v27;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v8;
  v36 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v36;
  v9 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v10 = a2[12];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v10;
  v11 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v11;
  v12 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v12;
  v13 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v13;
  v14 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v14;
  v15 = a2[22];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = v15;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  v16 = a2[24];
  if (!v16)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_QWORD *)(a1 + 192) = v16;
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  v17 = a2[27];
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = v17;
  v18 = a2[29];
  *(_QWORD *)(a1 + 224) = a2[28];
  *(_QWORD *)(a1 + 232) = v18;
  *(_WORD *)(a1 + 240) = *((_WORD *)a2 + 120);
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  *(_DWORD *)(a1 + 244) = *((_DWORD *)a2 + 61);
  *(_DWORD *)(a1 + 252) = *((_DWORD *)a2 + 63);
  *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
  *(_DWORD *)(a1 + 257) = *(_DWORD *)((char *)a2 + 257);
  *(_BYTE *)(a1 + 261) = *((_BYTE *)a2 + 261);
  v19 = a2[34];
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = v19;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
LABEL_8:
  *(_WORD *)(a1 + 280) = *((_WORD *)a2 + 140);
  v28 = a2[37];
  *(_QWORD *)(a1 + 288) = a2[36];
  *(_QWORD *)(a1 + 296) = v28;
  v29 = a2[43];
  swift_bridgeObjectRetain(v28);
  if (v29 == 1)
  {
    v30 = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
    *(_OWORD *)(a1 + 320) = v30;
    *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  }
  else
  {
    *(_QWORD *)(a1 + 304) = a2[38];
    *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
    *(_QWORD *)(a1 + 320) = a2[40];
    *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
    *(_WORD *)(a1 + 329) = *(_WORD *)((char *)a2 + 329);
    *(_QWORD *)(a1 + 336) = a2[42];
    *(_QWORD *)(a1 + 344) = v29;
    swift_bridgeObjectRetain(v29);
  }
  v31 = *(int *)(a3 + 36);
  v32 = a1 + v31;
  v33 = (uint64_t)a2 + v31;
  v34 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  return a1;
}

uint64_t destroy for PageViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = a1[5];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[12]);
    swift_bridgeObjectRelease(a1[14]);
    swift_bridgeObjectRelease(a1[16]);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[20]);
    swift_bridgeObjectRelease(a1[22]);
  }
  v5 = a1[24];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[27]);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[34]);
  }
  swift_bridgeObjectRelease(a1[37]);
  v6 = a1[43];
  if (v6 != 1)
    swift_bridgeObjectRelease(v6);
  v7 = (char *)a1 + *(int *)(a2 + 36);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for PageViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    v34 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v34;
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v9 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v9;
    v10 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v10;
    v11 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v11;
    v12 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v12;
    v13 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v13;
    v14 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v14;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    v15 = *(_QWORD *)(a2 + 192);
    if (v15)
    {
LABEL_3:
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v15;
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      v16 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v16;
      v17 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v17;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
      *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_DWORD *)(a1 + 257) = *(_DWORD *)(a2 + 257);
      *(_BYTE *)(a1 + 261) = *(_BYTE *)(a2 + 261);
      v18 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v20;
    v21 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v21;
    v22 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v22;
    v15 = *(_QWORD *)(a2 + 192);
    if (v15)
      goto LABEL_3;
  }
  v23 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v23;
  v24 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v24;
  v25 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v25;
LABEL_6:
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  v26 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v26;
  v27 = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRetain(v26);
  if (v27 == 1)
  {
    v28 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v28;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  }
  else
  {
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
    *(_WORD *)(a1 + 329) = *(_WORD *)(a2 + 329);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v27;
    swift_bridgeObjectRetain(v27);
  }
  v29 = *(int *)(a3 + 36);
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  return a1;
}

uint64_t assignWithCopy for PageViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  _OWORD *v24;
  _OWORD *v25;
  BAEventReporter *v26;
  uint64_t v27;
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  BAEventReporter *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  uint64_t v72;
  BAEventReporter *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  int64_t v78;
  int64_t v79;
  id v80;
  uint64_t v81;
  BAEventReporter *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  int64_t v87;
  int64_t v88;
  id v89;
  uint64_t v90;
  BAEventReporter *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  int64_t v96;
  int64_t v97;
  id v98;
  uint64_t v99;
  BAEventReporter *v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  int64_t v105;
  int64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _OWORD *v132;
  _OWORD *v133;
  BAEventReporter *v134;
  uint64_t v135;
  uint64_t v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  int64_t v141;
  int64_t v142;
  id v143;
  uint64_t v144;
  BAEventReporter *v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  int64_t v150;
  int64_t v151;
  id v152;
  uint64_t v153;
  BAEventReporter *v154;
  SEL v155;
  id v156;
  id v157;
  id v158;
  int64_t v159;
  int64_t v160;
  id v161;
  int v162;
  int v163;
  uint64_t v164;
  BAEventReporter *v165;
  SEL v166;
  id v167;
  id v168;
  id v169;
  int64_t v170;
  int64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  BAEventReporter *v188;
  SEL v189;
  id v190;
  id v191;
  id v192;
  int64_t v193;
  int64_t v194;
  id v195;
  __int128 *v196;
  __int128 *v197;
  BAEventReporter *v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  SEL v206;
  id v207;
  id v208;
  id v209;
  int64_t v210;
  int64_t v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v218;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  v24 = (_OWORD *)(a1 + 32);
  v25 = (_OWORD *)(a2 + 32);
  v26 = *(BAEventReporter **)(a1 + 40);
  v27 = *(_QWORD *)(a2 + 40);
  if (v26)
  {
    if (v27)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v28 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v26, v29, v30, v31, v32, v33, v34, v35);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v36 = *(_QWORD *)(a2 + 56);
      v37 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v45 = *(_QWORD *)(a2 + 72);
      v46 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v54 = *(_QWORD *)(a2 + 96);
      v55 = *(BAEventReporter **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v63 = *(_QWORD *)(a2 + 112);
      v64 = *(BAEventReporter **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v72 = *(_QWORD *)(a2 + 128);
      v73 = *(BAEventReporter **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v72;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v81 = *(_QWORD *)(a2 + 144);
      v82 = *(BAEventReporter **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v90 = *(_QWORD *)(a2 + 160);
      v91 = *(BAEventReporter **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v90;
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v99 = *(_QWORD *)(a2 + 176);
      v100 = *(BAEventReporter **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v99;
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      sub_1E060((_QWORD *)(a1 + 32));
      v118 = *(_OWORD *)(a2 + 48);
      *v24 = *v25;
      *(_OWORD *)(a1 + 48) = v118;
      v119 = *(_OWORD *)(a2 + 112);
      v121 = *(_OWORD *)(a2 + 64);
      v120 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v119;
      *(_OWORD *)(a1 + 64) = v121;
      *(_OWORD *)(a1 + 80) = v120;
      v123 = *(_OWORD *)(a2 + 144);
      v122 = *(_OWORD *)(a2 + 160);
      v124 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 144) = v123;
      *(_OWORD *)(a1 + 160) = v122;
      *(_OWORD *)(a1 + 128) = v124;
    }
  }
  else if (v27)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v108 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v108;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v109 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v109;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v110 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v110;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v218 = a3;
    v111 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v111;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v112 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v112;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v113 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v113;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v114 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v114;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v115 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v115;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v116 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v116;
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v110);
    v117 = v111;
    a3 = v218;
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v116);
  }
  else
  {
    v125 = *(_OWORD *)(a2 + 48);
    *v24 = *v25;
    *(_OWORD *)(a1 + 48) = v125;
    v126 = *(_OWORD *)(a2 + 64);
    v127 = *(_OWORD *)(a2 + 80);
    v128 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v128;
    *(_OWORD *)(a1 + 64) = v126;
    *(_OWORD *)(a1 + 80) = v127;
    v129 = *(_OWORD *)(a2 + 128);
    v130 = *(_OWORD *)(a2 + 144);
    v131 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 144) = v130;
    *(_OWORD *)(a1 + 160) = v131;
    *(_OWORD *)(a1 + 128) = v129;
  }
  v132 = (_OWORD *)(a1 + 184);
  v133 = (_OWORD *)(a2 + 184);
  v134 = *(BAEventReporter **)(a1 + 192);
  v135 = *(_QWORD *)(a2 + 192);
  if (v134)
  {
    if (v135)
    {
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v136 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 192) = v136;
      swift_bridgeObjectRetain(v136);
      swift_bridgeObjectRelease(v134, v137, v138, v139, v140, v141, v142, v143);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v144 = *(_QWORD *)(a2 + 216);
      v145 = *(BAEventReporter **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v144;
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRelease(v145, v146, v147, v148, v149, v150, v151, v152);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v153 = *(_QWORD *)(a2 + 232);
      v154 = *(BAEventReporter **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v153;
      swift_bridgeObjectRetain(v153);
      swift_bridgeObjectRelease(v154, v155, v156, v157, v158, v159, v160, v161);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
      v162 = *(_DWORD *)(a2 + 244);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_DWORD *)(a1 + 244) = v162;
      v163 = *(_DWORD *)(a2 + 252);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_DWORD *)(a1 + 252) = v163;
      *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
      *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
      *(_BYTE *)(a1 + 259) = *(_BYTE *)(a2 + 259);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      *(_BYTE *)(a1 + 261) = *(_BYTE *)(a2 + 261);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v164 = *(_QWORD *)(a2 + 272);
      v165 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v164;
      swift_bridgeObjectRetain(v164);
      swift_bridgeObjectRelease(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 184));
      v179 = *(_OWORD *)(a2 + 200);
      *v132 = *v133;
      *(_OWORD *)(a1 + 200) = v179;
      v180 = *(_OWORD *)(a2 + 264);
      v182 = *(_OWORD *)(a2 + 216);
      v181 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v180;
      *(_OWORD *)(a1 + 216) = v182;
      *(_OWORD *)(a1 + 232) = v181;
    }
  }
  else if (v135)
  {
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v173 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v173;
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v174 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v174;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v175 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v175;
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
    v176 = *(_DWORD *)(a2 + 244);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_DWORD *)(a1 + 244) = v176;
    v177 = *(_DWORD *)(a2 + 252);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_DWORD *)(a1 + 252) = v177;
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
    *(_BYTE *)(a1 + 259) = *(_BYTE *)(a2 + 259);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    *(_BYTE *)(a1 + 261) = *(_BYTE *)(a2 + 261);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v178 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v178;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRetain(v174);
    swift_bridgeObjectRetain(v175);
    swift_bridgeObjectRetain(v178);
  }
  else
  {
    v183 = *(_OWORD *)(a2 + 200);
    *v132 = *v133;
    *(_OWORD *)(a1 + 200) = v183;
    v184 = *(_OWORD *)(a2 + 216);
    v185 = *(_OWORD *)(a2 + 232);
    v186 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v186;
    *(_OWORD *)(a1 + 216) = v184;
    *(_OWORD *)(a1 + 232) = v185;
  }
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v187 = *(_QWORD *)(a2 + 296);
  v188 = *(BAEventReporter **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v187;
  swift_bridgeObjectRetain(v187);
  swift_bridgeObjectRelease(v188, v189, v190, v191, v192, v193, v194, v195);
  v196 = (__int128 *)(a1 + 304);
  v197 = (__int128 *)(a2 + 304);
  v198 = *(BAEventReporter **)(a1 + 344);
  v199 = *(_QWORD *)(a2 + 344);
  if (v198 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v199 == 1)
    {
      v200 = *v197;
      v201 = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = v201;
      *v196 = v200;
    }
    else
    {
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
      *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      v204 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 344) = v204;
      swift_bridgeObjectRetain(v204);
    }
  }
  else if (v199 == 1)
  {
    sub_19008(a1 + 304);
    v203 = *(_OWORD *)(a2 + 320);
    v202 = *(_OWORD *)(a2 + 336);
    *v196 = *v197;
    *(_OWORD *)(a1 + 320) = v203;
    *(_OWORD *)(a1 + 336) = v202;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
    *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
    *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    v205 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 344) = v205;
    swift_bridgeObjectRetain(v205);
    swift_bridgeObjectRelease(v198, v206, v207, v208, v209, v210, v211, v212);
  }
  v213 = *(int *)(a3 + 36);
  v214 = a1 + v213;
  v215 = a2 + v213;
  v216 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v216 - 8) + 24))(v214, v215, v216);
  return a1;
}

uint64_t initializeWithTake for PageViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v9 = *(_OWORD *)(a2 + 304);
  v10 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v10;
  v11 = *(int *)(a3 + 36);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)(a1 + 304) = v9;
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PageViewEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  int64_t v26;
  int64_t v27;
  void *v28;
  BAEventReporter *v29;
  uint64_t v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  uint64_t v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  uint64_t v85;
  BAEventReporter *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  BAEventReporter *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  BAEventReporter *v107;
  uint64_t v108;
  uint64_t v109;
  BAEventReporter *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  int64_t v115;
  int64_t v116;
  id v117;
  uint64_t v118;
  BAEventReporter *v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  int64_t v124;
  int64_t v125;
  id v126;
  uint64_t v127;
  BAEventReporter *v128;
  SEL v129;
  id v130;
  id v131;
  id v132;
  int64_t v133;
  int64_t v134;
  id v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  BAEventReporter *v140;
  const char *v141;
  void *v142;
  void *v143;
  void *v144;
  int64_t v145;
  int64_t v146;
  void *v147;
  BAEventReporter *v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v29 = *(BAEventReporter **)(a1 + 40);
  if (v29)
  {
    v30 = *(_QWORD *)(a2 + 40);
    if (v30)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v30;
      swift_bridgeObjectRelease(v29, v22, v23, v24, v25, v26, v27, v28);
      v31 = *(_QWORD *)(a2 + 56);
      v32 = *(BAEventReporter **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v31;
      swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
      v40 = *(_QWORD *)(a2 + 72);
      v41 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v40;
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      v49 = *(_QWORD *)(a2 + 96);
      v50 = *(BAEventReporter **)(a1 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v49;
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      v58 = *(_QWORD *)(a2 + 112);
      v59 = *(BAEventReporter **)(a1 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 128);
      v68 = *(BAEventReporter **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      v76 = *(_QWORD *)(a2 + 144);
      v77 = *(BAEventReporter **)(a1 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v76;
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      v85 = *(_QWORD *)(a2 + 160);
      v86 = *(BAEventReporter **)(a1 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v85;
      swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
      v94 = *(_QWORD *)(a2 + 176);
      v95 = *(BAEventReporter **)(a1 + 176);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v94;
      swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
      goto LABEL_6;
    }
    sub_1E060((_QWORD *)(a1 + 32));
  }
  v103 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v103;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v104 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v104;
  v105 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v105;
  v106 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v106;
LABEL_6:
  v107 = *(BAEventReporter **)(a1 + 192);
  if (v107)
  {
    v108 = *(_QWORD *)(a2 + 192);
    if (v108)
    {
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v108;
      swift_bridgeObjectRelease(v107, v22, v23, v24, v25, v26, v27, v28);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      v109 = *(_QWORD *)(a2 + 216);
      v110 = *(BAEventReporter **)(a1 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v109;
      swift_bridgeObjectRelease(v110, v111, v112, v113, v114, v115, v116, v117);
      v118 = *(_QWORD *)(a2 + 232);
      v119 = *(BAEventReporter **)(a1 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v118;
      swift_bridgeObjectRelease(v119, v120, v121, v122, v123, v124, v125, v126);
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_DWORD *)(a1 + 257) = *(_DWORD *)(a2 + 257);
      *(_BYTE *)(a1 + 261) = *(_BYTE *)(a2 + 261);
      v127 = *(_QWORD *)(a2 + 272);
      v128 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v127;
      swift_bridgeObjectRelease(v128, v129, v130, v131, v132, v133, v134, v135);
      goto LABEL_11;
    }
    sub_4E9F4((_QWORD *)(a1 + 184));
  }
  v136 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v136;
  v137 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v137;
  v138 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v138;
LABEL_11:
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  v139 = *(_QWORD *)(a2 + 296);
  v140 = *(BAEventReporter **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v139;
  swift_bridgeObjectRelease(v140, v22, v23, v24, v25, v26, v27, v28);
  v148 = *(BAEventReporter **)(a1 + 344);
  if (v148 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v149 = *(_QWORD *)(a2 + 344);
    if (v149 != 1)
    {
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      *(_WORD *)(a1 + 329) = *(_WORD *)(a2 + 329);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = v149;
      swift_bridgeObjectRelease(v148, v141, v142, v143, v144, v145, v146, v147);
      goto LABEL_16;
    }
    sub_19008(a1 + 304);
  }
  v150 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v150;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_16:
  v151 = a3[9];
  v152 = a1 + v151;
  v153 = a2 + v151;
  v154 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 40))(v152, v153, v154);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F42C8);
}

uint64_t sub_F42C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PageViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F4350);
}

uint64_t sub_F4350(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_F43C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = " ";
  v4[1] = &unk_204278;
  v4[2] = &unk_204290;
  v4[3] = &unk_2042A8;
  v4[4] = &unk_2042C0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PageViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_F44AC + 4 * byte_20416B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_F44E0 + 4 * byte_204166[v4]))();
}

uint64_t sub_F44E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F44E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF44F0);
  return result;
}

uint64_t sub_F44FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF4504);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_F4508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F4510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageViewEvent.Model.CodingKeys()
{
  return &type metadata for PageViewEvent.Model.CodingKeys;
}

unint64_t sub_F4530()
{
  unint64_t result;

  result = qword_29E038;
  if (!qword_29E038)
  {
    result = swift_getWitnessTable(byte_204374, &type metadata for PageViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E038);
  }
  return result;
}

unint64_t sub_F4578()
{
  unint64_t result;

  result = qword_29E040;
  if (!qword_29E040)
  {
    result = swift_getWitnessTable("EX\a", &type metadata for PageViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E040);
  }
  return result;
}

unint64_t sub_F45C0()
{
  unint64_t result;

  result = qword_29E048;
  if (!qword_29E048)
  {
    result = swift_getWitnessTable("-X\a", &type metadata for PageViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E048);
  }
  return result;
}

uint64_t sub_F4604(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v8 = 0xEB00000000617461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v9 = 0xEA00000000006174;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v10 = 0xEA00000000006174;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t RemoteConfigNamespaceData.treatmentIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t RemoteConfigNamespaceData.treatmentIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t OptionListData.init(optionIdentifier:optionSelected:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

BOOL static UserEmbedding.== infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a2[1];
  v8 = a2[2];
  v9 = v4 == *a2 && v5 == v7;
  return (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v7, 0) & 1) != 0) && sub_66C60(v6, v8);
}

uint64_t sub_F495C()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 1701667182;
}

uint64_t sub_F498C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F51F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F49B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F4B6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F49D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F4B6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserFeature.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = sub_71B4(&qword_29E050);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v16 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_F4B6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserFeature.CodingKeys, &type metadata for UserFeature.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v20, v4);
  if (!v2)
  {
    v18 = v16;
    v19 = 1;
    v12 = sub_71B4(&qword_29E060);
    v13 = sub_F4D90(&qword_29E068, (uint64_t)&protocol witness table for Float, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

unint64_t sub_F4B6C()
{
  unint64_t result;

  result = qword_29E058;
  if (!qword_29E058)
  {
    result = swift_getWitnessTable(byte_20458C, &type metadata for UserFeature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E058);
  }
  return result;
}

void UserFeature.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  BAEventReporter *v33;
  char v34;
  char v35;

  v5 = sub_71B4(&qword_29E070);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_F4B6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserFeature.CodingKeys, &type metadata for UserFeature.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v35 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v14 = v13;
    v15 = sub_71B4(&qword_29E060);
    v34 = 1;
    v16 = sub_F4D90(&qword_29E078, (uint64_t)&protocol witness table for Float, (const char *)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, v15, &v34, v5, v15, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v33;
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    a2[2] = (uint64_t)v17;
    swift_bridgeObjectRetain(v17);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(v14, v25, v26, v27, v28, v29, v30, v31);
  }
}

uint64_t sub_F4D90(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_29E060);
    v8 = a2;
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_F4DF4()
{
  unint64_t result;

  result = qword_29E080;
  if (!qword_29E080)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UserFeature, &type metadata for UserFeature);
    atomic_store(result, (unint64_t *)&qword_29E080);
  }
  return result;
}

unint64_t sub_F4E3C()
{
  unint64_t result;

  result = qword_29E088;
  if (!qword_29E088)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UserFeature, &type metadata for UserFeature);
    atomic_store(result, (unint64_t *)&qword_29E088);
  }
  return result;
}

void sub_F4E80(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  UserFeature.init(from:)(a1, a2);
}

uint64_t sub_F4E94(_QWORD *a1)
{
  return UserFeature.encode(to:)(a1);
}

uint64_t destroy for UserFeature(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s13BookAnalytics11UserFeatureVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for UserFeature(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for UserFeature(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserFeature(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserFeature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserFeature()
{
  return &type metadata for UserFeature;
}

uint64_t storeEnumTagSinglePayload for UserFeature.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_F509C + 4 * byte_2043F1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_F50D0 + 4 * byte_2043EC[v4]))();
}

uint64_t sub_F50D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F50D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF50E0);
  return result;
}

uint64_t sub_F50EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF50F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_F50F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F5100(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserFeature.CodingKeys()
{
  return &type metadata for UserFeature.CodingKeys;
}

unint64_t sub_F5120()
{
  unint64_t result;

  result = qword_29E090;
  if (!qword_29E090)
  {
    result = swift_getWitnessTable(byte_204564, &type metadata for UserFeature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E090);
  }
  return result;
}

unint64_t sub_F5168()
{
  unint64_t result;

  result = qword_29E098;
  if (!qword_29E098)
  {
    result = swift_getWitnessTable("MX\a", &type metadata for UserFeature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E098);
  }
  return result;
}

unint64_t sub_F51B0()
{
  unint64_t result;

  result = qword_29E0A0;
  if (!qword_29E0A0)
  {
    result = swift_getWitnessTable("5X\a", &type metadata for UserFeature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E0A0);
  }
  return result;
}

uint64_t sub_F51F4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::ContentSource_optional __swiftcall ContentSource.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ContentSource_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267CA0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ContentSource.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F5354 + 4 * byte_2045DC[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_F5354()
{
  return 0x6573616863727570;
}

uint64_t sub_F5370()
{
  return 0x64616F6C65646973;
}

uint64_t sub_F538C()
{
  return 0x726564726F657270;
}

uint64_t sub_F53A4()
{
  return 0x656C706D6173;
}

uint64_t sub_F53B8()
{
  return 0x5364656E776F6E75;
}

uint64_t sub_F53D8()
{
  return 0x7550796C696D6166;
}

uint64_t sub_F53FC()
{
  return 0x646567616E616DLL;
}

void sub_F5410(char *a1)
{
  sub_2A818(*a1);
}

unint64_t sub_F5420()
{
  unint64_t result;

  result = qword_29E0A8;
  if (!qword_29E0A8)
  {
    result = swift_getWitnessTable("9X\a", &type metadata for ContentSource);
    atomic_store(result, (unint64_t *)&qword_29E0A8);
  }
  return result;
}

void sub_F5464()
{
  char *v0;

  sub_1D3468(0, *v0);
}

void sub_F5470(uint64_t a1)
{
  char *v1;

  sub_1ECEFC(a1, *v1);
}

void sub_F5478(uint64_t a1)
{
  char *v1;

  sub_1D3468(a1, *v1);
}

BookAnalytics::ContentSource_optional sub_F5480(Swift::String *a1)
{
  return ContentSource.init(rawValue:)(*a1);
}

uint64_t sub_F548C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_F54BC + 4 * byte_2045E4[*v0]))();
}

void sub_F54BC(_QWORD *a1@<X8>)
{
  *a1 = 0x6573616863727570;
  a1[1] = 0xE900000000000064;
}

void sub_F54DC(_QWORD *a1@<X8>)
{
  *a1 = 0x64616F6C65646973;
  a1[1] = 0xEA00000000006465;
}

void sub_F54FC(_QWORD *a1@<X8>)
{
  *a1 = 0x726564726F657270;
  a1[1] = 0xE800000000000000;
}

void sub_F5518(_QWORD *a1@<X8>)
{
  *a1 = 0x656C706D6173;
  a1[1] = 0xE600000000000000;
}

void sub_F5530(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "unownedStore");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_F5554(char *a1@<X8>)
{
  strcpy(a1, "familyPurchase");
  a1[15] = -18;
}

void sub_F557C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x646567616E616DLL;
  a1[1] = v1;
}

uint64_t sub_F5594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_F5708();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_F55F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_F5708();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ContentSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_F5688 + 4 * byte_2045F1[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_F56BC + 4 * byte_2045EC[v4]))();
}

uint64_t sub_F56BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F56C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF56CCLL);
  return result;
}

uint64_t sub_F56D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF56E0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_F56E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F56EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentSource()
{
  return &type metadata for ContentSource;
}

unint64_t sub_F5708()
{
  unint64_t result;

  result = qword_29E0B0;
  if (!qword_29E0B0)
  {
    result = swift_getWitnessTable("\tX\a", &type metadata for ContentSource);
    atomic_store(result, (unint64_t *)&qword_29E0B0);
  }
  return result;
}

BookAnalytics::HostingControllerVisibilityStateManager::State_optional __swiftcall HostingControllerVisibilityStateManager.State.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_267D80;
  return (BookAnalytics::HostingControllerVisibilityStateManager::State_optional)sub_F5A54(rawValue, v2, v1);
}

uint64_t HostingControllerVisibilityStateManager.State.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6564646968;
  else
    return 0x656C6269736976;
}

uint64_t sub_F5790(char *a1, char *a2)
{
  return sub_26A1C(*a1, *a2);
}

Swift::Int sub_F579C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6E6564646968;
  else
    v2 = 0x656C6269736976;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_F5818(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6E6564646968;
  else
    v2 = 0x656C6269736976;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_F5870(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6E6564646968;
  else
    v3 = 0x656C6269736976;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookAnalytics::HostingControllerVisibilityStateManager::State_optional sub_F58E8(Swift::String *a1)
{
  return HostingControllerVisibilityStateManager.State.init(rawValue:)(*a1);
}

void sub_F58F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656C6269736976;
  if (*v1)
    v2 = 0x6E6564646968;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

BookAnalytics::HostingControllerVisibilityStateManager::HostingControllerLifeCycleEvent_optional __swiftcall HostingControllerVisibilityStateManager.HostingControllerLifeCycleEvent.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_267DD0;
  return (BookAnalytics::HostingControllerVisibilityStateManager::HostingControllerLifeCycleEvent_optional)sub_F5A54(rawValue, v2, v1);
}

unint64_t HostingControllerVisibilityStateManager.HostingControllerLifeCycleEvent.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0xD000000000000011;
}

uint64_t sub_F597C(char *a1, char *a2)
{
  return sub_26974(*a1, *a2);
}

Swift::Int sub_F5988()
{
  char *v0;

  return sub_195654(*v0);
}

uint64_t sub_F5990(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0xD000000000000011;
  if (*v1)
    v3 = 0x800000000021E0C0;
  else
    v3 = 0x800000000021E0A0;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_F59F0(uint64_t a1)
{
  char *v1;

  return sub_1D3EFC(a1, *v1);
}

BookAnalytics::HostingControllerVisibilityStateManager::HostingControllerLifeCycleEvent_optional sub_F59F8(Swift::String *a1)
{
  return HostingControllerVisibilityStateManager.HostingControllerLifeCycleEvent.init(rawValue:)(*a1);
}

void sub_F5A04(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0xD000000000000011;
  v3 = 0x800000000021E0A0;
  if (*v1)
    v3 = 0x800000000021E0C0;
  *a1 = v2;
  a1[1] = v3;
}

BookAnalytics::HostingControllerVisibilityStateManager::SwiftUILifeCycleEvent_optional __swiftcall HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_267E20;
  return (BookAnalytics::HostingControllerVisibilityStateManager::SwiftUILifeCycleEvent_optional)sub_F5A54(rawValue, v2, v1);
}

uint64_t sub_F5A54@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v7 == 1)
    v9 = 1;
  else
    v9 = 2;
  if (!v7)
    v9 = 0;
  *a3 = v9;
  return result;
}

uint64_t HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7070617369446E6FLL;
  else
    return 0x7261657070416E6FLL;
}

uint64_t sub_F5AF4(char *a1, char *a2)
{
  return sub_268C8(*a1, *a2);
}

Swift::Int sub_F5B00()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x7070617369446E6FLL;
  else
    v2 = 0x7261657070416E6FLL;
  if (v1)
    v3 = 0xEB00000000726165;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_F5B88(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7070617369446E6FLL;
  else
    v2 = 0x7261657070416E6FLL;
  if (*v1)
    v3 = 0xEB00000000726165;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_F5BEC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x7070617369446E6FLL;
  else
    v3 = 0x7261657070416E6FLL;
  if (v2)
    v4 = 0xEB00000000726165;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookAnalytics::HostingControllerVisibilityStateManager::SwiftUILifeCycleEvent_optional sub_F5C70(Swift::String *a1)
{
  return HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent.init(rawValue:)(*a1);
}

void sub_F5C7C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7261657070416E6FLL;
  if (*v1)
    v2 = 0x7070617369446E6FLL;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEB00000000726165;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t HostingControllerVisibilityStateManager.state.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 0, 0);
  *a1 = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t HostingControllerVisibilityStateManager.hostingControllerEventPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_71B4(&qword_29E0C0);
  v1 = sub_F7668(&qword_29E0C8, &qword_29E0C0, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t HostingControllerVisibilityStateManager.swiftUIEventPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_71B4(&qword_29E0D0);
  v1 = sub_F7668(&qword_29E0D8, &qword_29E0D0, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t HostingControllerVisibilityStateManager.statePublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_71B4(&qword_29E0E0);
  v1 = sub_F7668(&qword_29E0E8, &qword_29E0E0, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t HostingControllerVisibilityStateManager.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_allocObject(v0, 50, 7);
  v2 = sub_71B4(&qword_29E0C0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()();
  v3 = sub_71B4(&qword_29E0D0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 32) = PassthroughSubject.init()();
  v4 = sub_71B4(&qword_29E0E0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v1 + 40) = PassthroughSubject.init()();
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 16) = 1;
  return v1;
}

uint64_t HostingControllerVisibilityStateManager.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_71B4(&qword_29E0C0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()();
  v2 = sub_71B4(&qword_29E0D0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 32) = PassthroughSubject.init()();
  v3 = sub_71B4(&qword_29E0E0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 40) = PassthroughSubject.init()();
  *(_WORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 16) = 1;
  return v0;
}

Swift::Void __swiftcall HostingControllerVisibilityStateManager.signal(event:)(BookAnalytics::HostingControllerVisibilityStateManager::HostingControllerLifeCycleEvent event)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(unsigned __int8 *)event;
  *(_BYTE *)(v1 + 49) = v2 ^ 1;
  sub_F6144();
  LOBYTE(v19) = v2;
  PassthroughSubject.send(_:)(&v19);
  if (qword_295610 != -1)
    swift_once(&qword_295610, sub_5C7D4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_705C(v3, (uint64_t)qword_2987D0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v19 = v8;
    *(_DWORD *)v7 = 136315138;
    if (v2)
      v9 = 0xD000000000000014;
    else
      v9 = 0xD000000000000011;
    if (v2)
      v10 = (BAEventReporter *)0x800000000021E0C0;
    else
      v10 = (BAEventReporter *)0x800000000021E0A0;
    v18 = sub_EB014(v9, (unint64_t)v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    _os_log_impl(&dword_0, v5, v6, "Did signal HostingControllerLifeCycleEvent.%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

}

void sub_F6144()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  int v32;
  SEL v33;
  id v34;
  id v35;
  int64_t v36;
  id v37;
  BOOL v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  int64_t v43;
  id v44;
  BOOL v45;
  id v46;
  uint64_t v47;
  BAEventReporter *v48;
  char v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  char v64;
  uint64_t v65;
  uint64_t v66[3];

  v1 = v0;
  v2 = *(_BYTE *)(v0 + 48) != 1 || (*(_BYTE *)(v0 + 49) & 1) == 0;
  if (qword_295610 != -1)
    swift_once(&qword_295610, sub_5C7D4);
  v3 = type metadata accessor for Logger(0);
  sub_705C(v3, (uint64_t)qword_2987D0);
  v4 = swift_retain_n(v0, 4);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(24, -1);
    v8 = swift_slowAlloc(32, -1);
    v66[0] = v8;
    *(_DWORD *)v7 = 136315650;
    if (v2)
      v9 = 0x6E6564646968;
    else
      v9 = 0x656C6269736976;
    if (v2)
      v10 = (BAEventReporter *)0xE600000000000000;
    else
      v10 = (BAEventReporter *)0xE700000000000000;
    v64 = v2;
    v65 = sub_EB014(v9, (unint64_t)v10, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    *(_WORD *)(v7 + 12) = 1024;
    v2 = *(unsigned __int8 *)(v1 + 48);
    swift_release((BAEventReporter *)v1, v18, v19, v20, v21, v22, v23, v24);
    LODWORD(v65) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v7 + 14, v7 + 18);
    swift_release((BAEventReporter *)v1, v25, v26, v27, v28, v29, v30, v31);
    *(_WORD *)(v7 + 18) = 1024;
    v32 = *(unsigned __int8 *)(v1 + 49);
    swift_release((BAEventReporter *)v1, v33, v34, v35, v36, v37, v38, v39);
    LODWORD(v65) = v32;
    LOBYTE(v2) = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v7 + 20, v7 + 24);
    swift_release((BAEventReporter *)v1, v40, v41, v42, v43, v44, v45, v46);
    _os_log_impl(&dword_0, v5, v6, "Did recompute state: %s, swiftUIViewIsVisible: %{BOOL}d, hostingControllerViewIsVisible:%{BOOL}d", (uint8_t *)v7, 0x18u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v0, 4);
    if (v2)
      v9 = 0x6E6564646968;
    else
      v9 = 0x656C6269736976;
    if (v2)
      v10 = (BAEventReporter *)0xE600000000000000;
    else
      v10 = (BAEventReporter *)0xE700000000000000;
  }
  swift_beginAccess(v1 + 16, v66, 1, 0);
  if (*(_BYTE *)(v1 + 16))
    v47 = 0x6E6564646968;
  else
    v47 = 0x656C6269736976;
  if (*(_BYTE *)(v1 + 16))
    v48 = (BAEventReporter *)0xE600000000000000;
  else
    v48 = (BAEventReporter *)0xE700000000000000;
  if (v9 == v47 && v10 == v48)
  {
    swift_bridgeObjectRelease_n(v10, 2);
  }
  else
  {
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v47, v48, 0);
    swift_bridgeObjectRelease(v10, v50, v51, v52, v53, v54, v55, v56);
    swift_bridgeObjectRelease(v48, v57, v58, v59, v60, v61, v62, v63);
    if ((v49 & 1) == 0)
    {
      *(_BYTE *)(v1 + 16) = v2;
      LOBYTE(v65) = v2;
      PassthroughSubject.send(_:)(&v65);
    }
  }
}

Swift::Void __swiftcall HostingControllerVisibilityStateManager.signal(event:)(BookAnalytics::HostingControllerVisibilityStateManager::SwiftUILifeCycleEvent event)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(unsigned __int8 *)event;
  *(_BYTE *)(v1 + 48) = v2 ^ 1;
  sub_F6144();
  LOBYTE(v19) = v2;
  PassthroughSubject.send(_:)(&v19);
  if (qword_295610 != -1)
    swift_once(&qword_295610, sub_5C7D4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_705C(v3, (uint64_t)qword_2987D0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v19 = v8;
    if (v2)
      v9 = 0x7070617369446E6FLL;
    else
      v9 = 0x7261657070416E6FLL;
    if (v2)
      v10 = (BAEventReporter *)0xEB00000000726165;
    else
      v10 = (BAEventReporter *)0xE800000000000000;
    v18 = sub_EB014(v9, (unint64_t)v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    _os_log_impl(&dword_0, v5, v6, "Did signal SwiftUILifeCycleEvent.%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

}

BAEventReporter **HostingControllerVisibilityStateManager.deinit(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  BAEventReporter **v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;

  swift_release(v8[3], a2, a3, a4, a5, a6, a7, a8);
  swift_release(v8[4], v9, v10, v11, v12, v13, v14, v15);
  swift_release(v8[5], v16, v17, v18, v19, v20, v21, v22);
  return v8;
}

uint64_t HostingControllerVisibilityStateManager.__deallocating_deinit(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  BAEventReporter **v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;

  swift_release(v8[3], a2, a3, a4, a5, a6, a7, a8);
  swift_release(v8[4], v9, v10, v11, v12, v13, v14, v15);
  swift_release(v8[5], v16, v17, v18, v19, v20, v21, v22);
  return swift_deallocClassInstance(v8, 50, 7);
}

uint64_t sub_F666C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = type metadata accessor for HostingControllerVisibilityStateManager();
  v1 = swift_allocObject(v0, 50, 7);
  v2 = sub_71B4(&qword_29E0C0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()();
  v3 = sub_71B4(&qword_29E0D0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 32) = PassthroughSubject.init()();
  v4 = sub_71B4(&qword_29E0E0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = PassthroughSubject.init()();
  *(_QWORD *)(v1 + 40) = result;
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 16) = 1;
  qword_29E0B8 = v1;
  return result;
}

uint64_t sub_F6718@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_295898 != -1)
    swift_once(&qword_295898, sub_F666C);
  v2 = qword_29E0B8;
  *a1 = qword_29E0B8;
  return swift_retain(v2);
}

uint64_t EnvironmentValues.analyticsVisibilityManager.getter()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_F6D9C();
  EnvironmentValues.subscript.getter(&v2, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, v0);
  return v2;
}

_QWORD *sub_F67A0@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_F6D9C();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_F67EC(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_F6D9C();
  swift_retain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, v1);
}

uint64_t EnvironmentValues.analyticsVisibilityManager.setter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = sub_F6D9C();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, v1);
}

void (*EnvironmentValues.analyticsVisibilityManager.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  unint64_t v3;

  a1[2] = v1;
  v3 = sub_F6D9C();
  a1[3] = v3;
  EnvironmentValues.subscript.getter(a1, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, v3);
  return sub_F68CC;
}

void sub_F68CC(uint64_t a1, char a2)
{
  BAEventReporter *v3;
  uint64_t v4;
  SEL v5;
  id v6;
  id v7;
  int64_t v8;
  id v9;
  BOOL v10;
  id v11;

  v3 = *(BAEventReporter **)a1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_retain(v3);
    EnvironmentValues.subscript.setter(a1 + 8, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, v4);
    swift_release(*(BAEventReporter **)a1, v5, v6, v7, v8, v9, v10, v11);
  }
  else
  {
    EnvironmentValues.subscript.setter(a1 + 8, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, *(_QWORD *)(a1 + 24));
  }
}

void View.observeAnalyticsVisibility()(uint64_t a1, uint64_t a2)
{
  BAEventReporter *KeyPath;
  SEL v5;
  id v6;
  id v7;
  int64_t v8;
  id v9;
  BOOL v10;
  id v11;
  BAEventReporter *v12;
  char v13;

  KeyPath = (BAEventReporter *)swift_getKeyPath(&unk_204740);
  v12 = KeyPath;
  v13 = 0;
  View.modifier<A>(_:)(&v12, a1, &type metadata for ObserveAnalyticsVisibilityViewModifier, a2);
  swift_release(KeyPath, v5, v6, v7, v8, v9, v10, v11);
}

void View.analyticsVisibilityState(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  BAEventReporter *KeyPath;
  SEL v7;
  id v8;
  id v9;
  int64_t v10;
  id v11;
  BOOL v12;
  id v13;
  BAEventReporter *v14;
  char v15;
  char v16;

  v5 = *a1;
  KeyPath = (BAEventReporter *)swift_getKeyPath(&unk_204740);
  v14 = KeyPath;
  v15 = 0;
  v16 = v5;
  View.modifier<A>(_:)(&v14, a2, &type metadata for SetAnalyticsVisibilityStateViewModifier, a3);
  swift_release(KeyPath, v7, v8, v9, v10, v11, v12, v13);
}

void sub_F6A44(BAEventReporter *a1, char a2, char a3)
{
  char v5;
  BAEventReporter *v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  int64_t v11;
  id v12;
  BOOL v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  int64_t v18;
  id v19;
  BOOL v20;
  id v21;
  char v22;

  v5 = a2 & 1;
  v6 = (BAEventReporter *)swift_retain(a1);
  v7 = (BAEventReporter *)sub_D38C(v6, v5);
  swift_release(a1, v8, v9, v10, v11, v12, v13, v14);
  v22 = a3;
  HostingControllerVisibilityStateManager.signal(event:)((BookAnalytics::HostingControllerVisibilityStateManager::SwiftUILifeCycleEvent)&v22);
  swift_release(v7, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_F6AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)();
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v5 = sub_71B4(&qword_29E1E8);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = *((_BYTE *)v2 + 8);
  v10 = swift_allocObject(&unk_27A198, 25, 7);
  *(_QWORD *)(v10 + 16) = v8;
  *(_BYTE *)(v10 + 24) = v9;
  v11 = sub_71B4(&qword_29E1F0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, a1, v11);
  v12 = (void (**)())&v7[*(int *)(v5 + 36)];
  *v12 = sub_F7460;
  v12[1] = (void (*)())v10;
  v12[2] = 0;
  v12[3] = 0;
  v13 = swift_allocObject(&unk_27A1C0, 25, 7);
  *(_QWORD *)(v13 + 16) = v8;
  *(_BYTE *)(v13 + 24) = v9;
  sub_F74A0((uint64_t)v7, a2);
  v14 = (_QWORD *)(a2 + *(int *)(sub_71B4(&qword_29E1F8) + 36));
  *v14 = 0;
  v14[1] = 0;
  v14[2] = sub_F7480;
  v14[3] = v13;
  swift_retain_n(v8, 2);
  return sub_F74E8((uint64_t)v7);
}

void sub_F6BEC(uint64_t a1, uint64_t a2, BAEventReporter *a3, __int16 a4)
{
  char v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  int64_t v11;
  id v12;
  BOOL v13;
  id v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  int64_t v19;
  int64_t v20;
  void *v21;
  BAEventReporter *v22;
  char v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;
  char v31;

  v6 = a4 & 1;
  swift_retain(a3);
  v7 = (BAEventReporter *)sub_D38C(a3, v6);
  swift_release(a3, v8, v9, v10, v11, v12, v13, v14);
  if ((a4 & 0x100) != 0)
  {
    v23 = 1;
    v22 = (BAEventReporter *)0xE600000000000000;
  }
  else
  {
    v22 = (BAEventReporter *)0xE700000000000000;
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C6269736976, 0xE700000000000000, 0x6E6564646968, 0xE600000000000000, 0);
  }
  swift_bridgeObjectRelease(v22, v15, v16, v17, v18, v19, v20, v21);
  v31 = v23 & 1;
  HostingControllerVisibilityStateManager.signal(event:)((BookAnalytics::HostingControllerVisibilityStateManager::SwiftUILifeCycleEvent)&v31);
  swift_release(v7, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t sub_F6CA0()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

void sub_F6CB8()
{
  uint64_t v0;
  objc_class *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  BAEventReporter *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  SEL v8;
  id v9;
  id v10;
  int64_t v11;
  id v12;
  BOOL v13;
  id v14;
  unsigned __int8 v15;

  v1 = *(objc_class **)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 9);
  v15 = v3;
  v4 = (BAEventReporter *)swift_allocObject(&unk_27A1E8, 26, 7);
  v4[1].super.isa = v1;
  v4[1].dataProviders[0] = v2;
  v4[1].dataProviders[1] = v3;
  swift_retain(v1);
  v5 = sub_71B4(&qword_29E200);
  v6 = sub_F7668(&qword_29E208, &qword_29E200, (const char *)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v7 = sub_F6E34();
  View.onChange<A>(of:initial:_:)(&v15, 0, sub_F754C, v4, v5, &type metadata for HostingControllerVisibilityStateManager.State, v6, v7);
  swift_release(v4, v8, v9, v10, v11, v12, v13, v14);
}

unint64_t sub_F6D9C()
{
  unint64_t result;

  result = qword_29E0F0;
  if (!qword_29E0F0)
  {
    result = swift_getWitnessTable("MW\a", &type metadata for HostingControllerVisibilityStateManagerKey);
    atomic_store(result, (unint64_t *)&qword_29E0F0);
  }
  return result;
}

_QWORD *sub_F6DE0@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_F6D9C();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for HostingControllerVisibilityStateManagerKey, &type metadata for HostingControllerVisibilityStateManagerKey, v2);
  *a1 = v4;
  return result;
}

unint64_t sub_F6E34()
{
  unint64_t result;

  result = qword_29E0F8;
  if (!qword_29E0F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HostingControllerVisibilityStateManager.State, &type metadata for HostingControllerVisibilityStateManager.State);
    atomic_store(result, (unint64_t *)&qword_29E0F8);
  }
  return result;
}

unint64_t sub_F6E7C()
{
  unint64_t result;

  result = qword_29E100;
  if (!qword_29E100)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HostingControllerVisibilityStateManager.HostingControllerLifeCycleEvent, &type metadata for HostingControllerVisibilityStateManager.HostingControllerLifeCycleEvent);
    atomic_store(result, (unint64_t *)&qword_29E100);
  }
  return result;
}

unint64_t sub_F6EC4()
{
  unint64_t result;

  result = qword_29E108;
  if (!qword_29E108)
  {
    result = swift_getWitnessTable("YY\a", &type metadata for HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent);
    atomic_store(result, (unint64_t *)&qword_29E108);
  }
  return result;
}

uint64_t type metadata accessor for HostingControllerVisibilityStateManager()
{
  return objc_opt_self(_TtC13BookAnalytics39HostingControllerVisibilityStateManager);
}

uint64_t method lookup function for HostingControllerVisibilityStateManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HostingControllerVisibilityStateManager);
}

ValueMetadata *type metadata accessor for HostingControllerVisibilityStateManager.State()
{
  return &type metadata for HostingControllerVisibilityStateManager.State;
}

ValueMetadata *type metadata accessor for HostingControllerVisibilityStateManager.HostingControllerLifeCycleEvent()
{
  return &type metadata for HostingControllerVisibilityStateManager.HostingControllerLifeCycleEvent;
}

uint64_t _s13BookAnalytics39HostingControllerVisibilityStateManagerC5StateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_F6FA8 + 4 * byte_204735[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_F6FDC + 4 * byte_204730[v4]))();
}

uint64_t sub_F6FDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F6FE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF6FECLL);
  return result;
}

uint64_t sub_F6FF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF7000);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_F7004(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F700C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent()
{
  return &type metadata for HostingControllerVisibilityStateManager.SwiftUILifeCycleEvent;
}

uint64_t sub_F7028(_QWORD *a1)
{
  return sub_F7094(a1, (uint64_t)&type metadata for ObserveAnalyticsVisibilityViewModifier, (uint64_t (*)(void))sub_F703C);
}

unint64_t sub_F703C()
{
  unint64_t result;

  result = qword_29E1D8;
  if (!qword_29E1D8)
  {
    result = swift_getWitnessTable("eW\a", &type metadata for ObserveAnalyticsVisibilityViewModifier);
    atomic_store(result, (unint64_t *)&qword_29E1D8);
  }
  return result;
}

uint64_t sub_F7080(_QWORD *a1)
{
  return sub_F7094(a1, (uint64_t)&type metadata for SetAnalyticsVisibilityStateViewModifier, (uint64_t (*)(void))sub_F70F0);
}

uint64_t sub_F7094(_QWORD *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, a2);
  v7[0] = v4;
  v7[1] = a3();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

unint64_t sub_F70F0()
{
  unint64_t result;

  result = qword_29E1E0;
  if (!qword_29E1E0)
  {
    result = swift_getWitnessTable(byte_204AAC, &type metadata for SetAnalyticsVisibilityStateViewModifier);
    atomic_store(result, (unint64_t *)&qword_29E1E0);
  }
  return result;
}

void destroy for SetAnalyticsVisibilityStateViewModifier(BAEventReporter **a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  swift_release(*a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _s13BookAnalytics39SetAnalyticsVisibilityStateViewModifierVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for SetAnalyticsVisibilityStateViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  BAEventReporter *v6;
  SEL v7;
  id v8;
  id v9;
  int64_t v10;
  id v11;
  BOOL v12;
  id v13;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(BAEventReporter **)a1;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6, v7, v8, v9, v10, v11, v12, v13);
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t assignWithTake for SetAnalyticsVisibilityStateViewModifier(uint64_t a1, uint64_t a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  char v10;
  BAEventReporter *v11;

  v10 = *(_BYTE *)(a2 + 8);
  v11 = *(BAEventReporter **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v10;
  swift_release(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetAnalyticsVisibilityStateViewModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SetAnalyticsVisibilityStateViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetAnalyticsVisibilityStateViewModifier()
{
  return &type metadata for SetAnalyticsVisibilityStateViewModifier;
}

uint64_t initializeBufferWithCopyOfBuffer for ObserveAnalyticsVisibilityViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for ObserveAnalyticsVisibilityViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  BAEventReporter *v5;
  SEL v6;
  id v7;
  id v8;
  int64_t v9;
  id v10;
  BOOL v11;
  id v12;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(BAEventReporter **)a1;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain(v3);
  swift_release(v5, v6, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for ObserveAnalyticsVisibilityViewModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ObserveAnalyticsVisibilityViewModifier(uint64_t a1, uint64_t a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  char v9;
  BAEventReporter *v10;

  v9 = *(_BYTE *)(a2 + 8);
  v10 = *(BAEventReporter **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v9;
  swift_release(v10, (SEL)a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObserveAnalyticsVisibilityViewModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ObserveAnalyticsVisibilityViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObserveAnalyticsVisibilityViewModifier()
{
  return &type metadata for ObserveAnalyticsVisibilityViewModifier;
}

ValueMetadata *type metadata accessor for HostingControllerVisibilityStateManagerKey()
{
  return &type metadata for HostingControllerVisibilityStateManagerKey;
}

uint64_t sub_F741C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_230670, 1);
}

uint64_t sub_F742C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_230648, 1);
}

uint64_t sub_F743C(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 16), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 25, 7);
}

void sub_F7460()
{
  uint64_t v0;

  sub_F6A44(*(BAEventReporter **)(v0 + 16), *(_BYTE *)(v0 + 24), 0);
}

void sub_F7480()
{
  uint64_t v0;

  sub_F6A44(*(BAEventReporter **)(v0 + 16), *(_BYTE *)(v0 + 24), 1);
}

uint64_t sub_F74A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_29E1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_F74E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_29E1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_F7528(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 16), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 26, 7);
}

void sub_F754C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 25))
    v3 = 256;
  else
    v3 = 0;
  sub_F6BEC(a1, a2, *(BAEventReporter **)(v2 + 16), v3 | *(unsigned __int8 *)(v2 + 24));
}

unint64_t sub_F7578()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_29E210;
  if (!qword_29E210)
  {
    v1 = sub_679EC(&qword_29E1F8);
    v2[0] = sub_F75E4();
    v2[1] = &protocol witness table for _AppearanceActionModifier;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_29E210);
  }
  return result;
}

unint64_t sub_F75E4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_29E218;
  if (!qword_29E218)
  {
    v1 = sub_679EC(&qword_29E1E8);
    v2[0] = sub_F7668(&qword_29E220, &qword_29E1F0, (const char *)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v2[1] = &protocol witness table for _AppearanceActionModifier;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_29E218);
  }
  return result;
}

uint64_t sub_F7668(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_679EC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_F76A8()
{
  _QWORD v1[4];

  v1[0] = sub_679EC(&qword_29E200);
  v1[1] = &type metadata for HostingControllerVisibilityStateManager.State;
  v1[2] = sub_F7668(&qword_29E208, &qword_29E200, (const char *)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v1[3] = sub_F6E34();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

BookAnalytics::BrightnessData __swiftcall BrightnessData.init(brightnessLevel:)(BookAnalytics::BrightnessData brightnessLevel)
{
  BookAnalytics::BrightnessData *v1;

  v1->brightnessLevel = brightnessLevel.brightnessLevel;
  return brightnessLevel;
}

BOOL static BrightnessData.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_F7754()
{
  return 0x656E746867697262;
}

uint64_t sub_F7778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x656E746867697262 && a2 == 0xEF6C6576654C7373)
  {
    result = swift_bridgeObjectRelease(0xEF6C6576654C7373);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E746867697262, 0xEF6C6576654C7373, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_F7830(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7968();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F7858(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7968();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BrightnessData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_71B4(&qword_29E228);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_F7968();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BrightnessData.CodingKeys, &type metadata for BrightnessData.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_F7968()
{
  unint64_t result;

  result = qword_29E230;
  if (!qword_29E230)
  {
    result = swift_getWitnessTable(byte_204D20, &type metadata for BrightnessData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E230);
  }
  return result;
}

uint64_t BrightnessData.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;

  v5 = sub_71B4(&qword_29E238);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_F7968();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BrightnessData.CodingKeys, &type metadata for BrightnessData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
  }
  return sub_7DAC(a1);
}

unint64_t sub_F7AB4()
{
  unint64_t result;

  result = qword_29E240;
  if (!qword_29E240)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BrightnessData, &type metadata for BrightnessData);
    atomic_store(result, (unint64_t *)&qword_29E240);
  }
  return result;
}

unint64_t sub_F7AFC()
{
  unint64_t result;

  result = qword_29E248;
  if (!qword_29E248)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BrightnessData, &type metadata for BrightnessData);
    atomic_store(result, (unint64_t *)&qword_29E248);
  }
  return result;
}

uint64_t sub_F7B40@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return BrightnessData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for BrightnessData()
{
  return &type metadata for BrightnessData;
}

uint64_t storeEnumTagSinglePayload for BrightnessData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_F7BA4 + 4 * byte_204B84[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_F7BC4 + 4 * byte_204B89[v4]))();
}

_BYTE *sub_F7BA4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_F7BC4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_F7BCC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_F7BD4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_F7BDC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_F7BE4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrightnessData.CodingKeys()
{
  return &type metadata for BrightnessData.CodingKeys;
}

unint64_t sub_F7C04()
{
  unint64_t result;

  result = qword_29E250;
  if (!qword_29E250)
  {
    result = swift_getWitnessTable(byte_204CF8, &type metadata for BrightnessData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E250);
  }
  return result;
}

unint64_t sub_F7C4C()
{
  unint64_t result;

  result = qword_29E258;
  if (!qword_29E258)
  {
    result = swift_getWitnessTable("aW\a", &type metadata for BrightnessData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E258);
  }
  return result;
}

unint64_t sub_F7C94()
{
  unint64_t result;

  result = qword_29E260;
  if (!qword_29E260)
  {
    result = swift_getWitnessTable("IW\a", &type metadata for BrightnessData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E260);
  }
  return result;
}

uint64_t sub_F7CD8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29E268, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingFontChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E268, a1);
}

uint64_t sub_F7D18(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29E280, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingFontChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E280, a1);
}

uint64_t ReadingFontChangeEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingFontChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29E310, (uint64_t)&nominal type descriptor for ReadingFontChangeEvent);
}

uint64_t ReadingFontChangeEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingFontChangeEvent.contentData.modify())()
{
  type metadata accessor for ReadingFontChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingFontChangeEvent.fontData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_29E298);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingFontChangeEvent.fontData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_29E298);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingFontChangeEvent.fontData.modify())()
{
  type metadata accessor for ReadingFontChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingFontChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingFontChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingFontChangeEvent.eventData.modify())()
{
  type metadata accessor for ReadingFontChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingFontChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ReadingFontChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_29E298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

uint64_t ReadingFontChangeEvent.Model.fontData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 120);
  *a1 = *(_QWORD *)(v1 + 112);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t ReadingFontChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingFontChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingFontChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29E3B0, (uint64_t)&nominal type descriptor for ReadingFontChangeEvent.Model);
}

uint64_t ReadingFontChangeEvent.Model.init(readingSessionData:contentData:fontData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 12);
  v11 = *((_BYTE *)a1 + 13);
  v12 = *((_BYTE *)a1 + 14);
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v18 = a2[5];
  v17 = a2[6];
  v19 = *((_WORD *)a2 + 28);
  v20 = *((_DWORD *)a2 + 15);
  v21 = *((_BYTE *)a2 + 64);
  v22 = *((_DWORD *)a2 + 17);
  v23 = *((_BYTE *)a2 + 72);
  v24 = *((_BYTE *)a2 + 77);
  v26 = *a3;
  v25 = a3[1];
  *(_DWORD *)a5 = v7;
  *(_BYTE *)(a5 + 4) = v8;
  *(_DWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 12) = v10;
  *(_BYTE *)(a5 + 13) = v11;
  *(_BYTE *)(a5 + 14) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v17;
  *(_WORD *)(a5 + 72) = v19;
  *(_DWORD *)(a5 + 76) = v20;
  *(_BYTE *)(a5 + 80) = v21;
  *(_DWORD *)(a5 + 84) = v22;
  *(_BYTE *)(a5 + 88) = v23;
  *(_DWORD *)(a5 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a5 + 93) = v24;
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a2 + 5);
  *(_QWORD *)(a5 + 112) = v26;
  *(_QWORD *)(a5 + 120) = v25;
  v27 = a5 + *(int *)(type metadata accessor for ReadingFontChangeEvent.Model(0) + 28);
  v28 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v27, a4, v28);
}

uint64_t sub_F81E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_F8214 + 4 * byte_204D70[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_F8214()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_F8234()
{
  return 0x61746144746E6F66;
}

uint64_t sub_F824C()
{
  return 0x746144746E657665;
}

uint64_t sub_F8268@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F9C88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F828C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F8540();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F82B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F8540();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingFontChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  char v45;
  int v46;
  char v47;
  int v48;
  char v49;
  __int128 v50;
  char v51;

  v3 = v1;
  v5 = sub_71B4(&qword_29E2A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_F8540();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingFontChangeEvent.Model.CodingKeys, &type metadata for ReadingFontChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v37) = *(_DWORD *)v3;
  BYTE4(v37) = v12;
  LODWORD(v38) = v13;
  BYTE4(v38) = v14;
  BYTE5(v38) = v15;
  BYTE6(v38) = v16;
  v51 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v51, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    v37 = *(_QWORD *)(v3 + 16);
    v38 = v18;
    v39 = v19;
    v40 = v20;
    v41 = v21;
    v42 = v22;
    v43 = v23;
    v44 = v24;
    v45 = v25;
    v46 = v26;
    v47 = v27;
    v48 = *(_DWORD *)(v3 + 89);
    v49 = v28;
    v50 = *(_OWORD *)(v3 + 96);
    v51 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v51, v5, &type metadata for ContentData, v29);
    v30 = *(_QWORD *)(v3 + 120);
    v37 = *(_QWORD *)(v3 + 112);
    v38 = v30;
    v51 = 2;
    v31 = sub_3FE7C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v51, v5, &type metadata for FontData, v31);
    v32 = v3 + *(int *)(type metadata accessor for ReadingFontChangeEvent.Model(0) + 28);
    LOBYTE(v37) = 3;
    v33 = type metadata accessor for EventData(0);
    v34 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v37, v5, v33, v34);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_F8540()
{
  unint64_t result;

  result = qword_29E2A8;
  if (!qword_29E2A8)
  {
    result = swift_getWitnessTable(byte_204F6C, &type metadata for ReadingFontChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E2A8);
  }
  return result;
}

void ReadingFontChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  int v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  char v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD v47[4];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  char v64;
  int v65;
  char v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  v49 = a2;
  v50 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v5 = (_QWORD *)((char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_71B4(&qword_29E2B0);
  v6 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingFontChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v53 = a1;
  sub_7988(a1, v12);
  v14 = sub_F8540();
  v51 = v8;
  v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingFontChangeEvent.Model.CodingKeys, &type metadata for ReadingFontChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v53);
  }
  else
  {
    v48 = v9;
    v54 = v5;
    v16 = v11;
    v17 = v3;
    v18 = v50;
    v71 = 0;
    v19 = sub_71AEC();
    v21 = v51;
    v20 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ReadingSessionData, &v71, v52, &type metadata for ReadingSessionData, v19);
    v22 = BYTE4(v55);
    v23 = v56;
    v24 = BYTE4(v56);
    v25 = BYTE5(v56);
    v26 = BYTE6(v56);
    v27 = (uint64_t)v16;
    *(_DWORD *)v16 = v55;
    v16[4] = v22;
    *((_DWORD *)v16 + 2) = v23;
    v16[12] = v24;
    v16[13] = v25;
    v16[14] = v26;
    v71 = 1;
    v28 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ContentData, &v71, v20, &type metadata for ContentData, v28);
    v29 = v56;
    v30 = v57;
    v32 = v58;
    v31 = v59;
    v34 = v60;
    v33 = v61;
    v35 = v62;
    v36 = v63;
    v37 = v64;
    v38 = v65;
    v39 = v66;
    v40 = v68;
    v42 = v69;
    v41 = v70;
    *(_QWORD *)(v27 + 16) = v55;
    *(_QWORD *)(v27 + 24) = v29;
    *(_BYTE *)(v27 + 32) = v30;
    *(_QWORD *)(v27 + 40) = v32;
    *(_QWORD *)(v27 + 48) = v31;
    v47[3] = v31;
    *(_QWORD *)(v27 + 56) = v34;
    *(_QWORD *)(v27 + 64) = v33;
    v47[1] = v33;
    *(_WORD *)(v27 + 72) = v35;
    *(_DWORD *)(v27 + 76) = v36;
    *(_BYTE *)(v27 + 80) = v37;
    *(_DWORD *)(v27 + 84) = v38;
    *(_BYTE *)(v27 + 88) = v39;
    *(_DWORD *)(v27 + 89) = v67;
    *(_BYTE *)(v27 + 93) = v40;
    *(_QWORD *)(v27 + 96) = v42;
    *(_QWORD *)(v27 + 104) = v41;
    v47[2] = v41;
    v71 = 2;
    v43 = sub_3FE34();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for FontData, &v71, v20, &type metadata for FontData, v43);
    v44 = v56;
    *(_QWORD *)(v27 + 112) = v55;
    *(_QWORD *)(v27 + 120) = v44;
    LOBYTE(v55) = 3;
    v45 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v46 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v18, &v55, v20, v18, v45);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v27 + *(int *)(v48 + 28), v46, v18);
    sub_F8954(v27, v49);
    sub_7DAC(v53);
    sub_F8998(v27);
  }
}

uint64_t sub_F8954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingFontChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_F8998(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingFontChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_F89D4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingFontChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_F89E8(_QWORD *a1)
{
  return ReadingFontChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_F89FC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E268, (uint64_t)sub_F7CD8, a1);
}

uint64_t sub_F8A20@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E280, (uint64_t)sub_F7D18, a1);
}

uint64_t sub_F8A44@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_29E298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingFontChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29E298);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ReadingFontChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29E298);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ReadingFontChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ReadingFontChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ReadingFontChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReadingFontChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingFontChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F90AC);
}

uint64_t sub_F90AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29E298);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingFontChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F9184);
}

uint64_t sub_F9184(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29E298);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_F9258(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_29E320, (uint64_t (*)(void))sub_3FE34, (uint64_t (*)(void))sub_3FE7C, (uint64_t)&type metadata for FontData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadingFontChangeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 7) = *(uint64_t *)((char *)a2 + 7);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v6;
    v7 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v7;
    *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)a2 + 89);
    *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
    v8 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v8;
    v9 = a2[15];
    v10 = *(int *)(a3 + 28);
    v11 = (uint64_t)a2 + v10;
    v12 = a1 + v10;
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v9;
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v12, v11, v13);
  }
  return v3;
}

uint64_t destroy for ReadingFontChangeEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ReadingFontChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(int *)(a3 + 28);
  v10 = a2 + v9;
  v11 = a1 + v9;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v11, v10, v12);
  return a1;
}

uint64_t assignWithCopy for ReadingFontChangeEvent.Model(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v14 = a2[19];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v14;
  v15 = a2[21];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_DWORD *)(a1 + 84) = v15;
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v16 = *((_QWORD *)a2 + 13);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  v18 = *((_QWORD *)a2 + 15);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(int *)(a3 + 28);
  v21 = a1 + v20;
  v22 = (uint64_t)a2 + v20;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

uint64_t initializeWithTake for ReadingFontChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ReadingFontChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingFontChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F9960);
}

uint64_t sub_F9960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingFontChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F99E8);
}

uint64_t sub_F99E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_F9A5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_204E60;
  v4[1] = &unk_204E78;
  v4[2] = &unk_204E90;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingFontChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_F9B30 + 4 * byte_204D79[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_F9B64 + 4 * byte_204D74[v4]))();
}

uint64_t sub_F9B64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F9B6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF9B74);
  return result;
}

uint64_t sub_F9B80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF9B88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_F9B8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F9B94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingFontChangeEvent.Model.CodingKeys()
{
  return &type metadata for ReadingFontChangeEvent.Model.CodingKeys;
}

unint64_t sub_F9BB4()
{
  unint64_t result;

  result = qword_29E3F0;
  if (!qword_29E3F0)
  {
    result = swift_getWitnessTable(byte_204F44, &type metadata for ReadingFontChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E3F0);
  }
  return result;
}

unint64_t sub_F9BFC()
{
  unint64_t result;

  result = qword_29E3F8;
  if (!qword_29E3F8)
  {
    result = swift_getWitnessTable("eV\a", &type metadata for ReadingFontChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E3F8);
  }
  return result;
}

unint64_t sub_F9C44()
{
  unint64_t result;

  result = qword_29E400;
  if (!qword_29E400)
  {
    result = swift_getWitnessTable("MV\a", &type metadata for ReadingFontChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E400);
  }
  return result;
}

uint64_t sub_F9C88(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x61746144746E6F66 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61746144746E6F66, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t RemoteConfigNamespaceData.init(name:treatmentIDs:segmentIDs:segmentSetIDs:previousTreatmentIDs:previousSegmentIDs:previousSegmentSetIDs:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t RemoteConfigNamespaceData.previousTreatmentIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t RemoteConfigNamespaceData.previousTreatmentIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t RemoteConfigNamespaceData.previousSegmentIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t RemoteConfigNamespaceData.previousSegmentIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t RemoteConfigNamespaceData.previousSegmentSetIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
}

uint64_t RemoteConfigNamespaceData.previousSegmentSetIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t sub_F9F08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F9F34 + 4 * byte_204FC0[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_F9F34()
{
  return 0x6E656D7461657274;
}

uint64_t sub_F9F54()
{
  return 0x49746E656D676573;
}

uint64_t sub_F9F70()
{
  return 0x53746E656D676573;
}

unint64_t sub_F9F94()
{
  return 0xD000000000000014;
}

uint64_t sub_F9FE8()
{
  unsigned __int8 *v0;

  return sub_F9F08(*v0);
}

uint64_t sub_F9FF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_FAF78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FA014(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FA9E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FA03C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FA9E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RemoteConfigNamespaceData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v3 = sub_71B4(&qword_29E408);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v25 = v1[3];
  v26 = v9;
  v10 = v1[4];
  v23 = v1[5];
  v24 = v10;
  v11 = v1[6];
  v21 = v1[7];
  v22 = v11;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_FA9E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteConfigNamespaceData.CodingKeys, &type metadata for RemoteConfigNamespaceData.CodingKeys, v14, v12, v13);
  LOBYTE(v29) = 0;
  v15 = v27;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v7, &v29, v3);
  if (!v15)
  {
    v16 = v24;
    v17 = v25;
    v29 = v26;
    v28 = 1;
    v18 = sub_71B4(&qword_299618);
    v19 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v3, v18, v19);
    v29 = v17;
    v28 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v3, v18, v19);
    v29 = v16;
    v28 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v3, v18, v19);
    v29 = v23;
    v28 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v3, v18, v19);
    v29 = v22;
    v28 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v3, v18, v19);
    v29 = v21;
    v28 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v3, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void RemoteConfigNamespaceData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  int64_t v16;
  int64_t v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  BAEventReporter *v55;
  BAEventReporter *v56;
  uint64_t v57;
  uint64_t v58;
  BAEventReporter *v59;
  BAEventReporter *v60;
  BAEventReporter *v61;
  uint64_t v62;
  BAEventReporter *v63;
  BAEventReporter *v64;
  BAEventReporter *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  int64_t v70;
  int64_t v71;
  id v72;
  uint64_t *v73;
  BAEventReporter *v74;
  BAEventReporter *v75;
  BAEventReporter *v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  int64_t v89;
  int64_t v90;
  id v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  int64_t v96;
  int64_t v97;
  id v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  int64_t v103;
  int64_t v104;
  id v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  int64_t v110;
  int64_t v111;
  id v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  int64_t v117;
  int64_t v118;
  id v119;
  const char *v120;
  void *v121;
  void *v122;
  void *v123;
  int64_t v124;
  int64_t v125;
  void *v126;
  BAEventReporter *v127;
  uint64_t v128;
  BAEventReporter *v129;
  BAEventReporter *v130;
  BAEventReporter *v131;
  BAEventReporter *v132;
  uint64_t *v133;
  uint64_t v134;
  char v135;
  BAEventReporter *v136;

  v5 = sub_71B4(&qword_29E418);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_FA9E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteConfigNamespaceData.CodingKeys, &type metadata for RemoteConfigNamespaceData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(0, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(0, v26, v27, v28, v29, v30, v31, v32);
    swift_bridgeObjectRelease(0, v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(0, v40, v41, v42, v43, v44, v45, v46);
    swift_bridgeObjectRelease(0, v47, v48, v49, v50, v51, v52, v53);
    v127 = 0;
  }
  else
  {
    LOBYTE(v136) = 0;
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v136, v5);
    v56 = v55;
    v133 = a2;
    v57 = sub_71B4(&qword_299618);
    v135 = 1;
    v58 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v56);
    v134 = v58;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v136, v57, &v135, v5, v57, v58);
    v132 = v56;
    v59 = v136;
    v135 = 2;
    swift_bridgeObjectRetain(v136);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v136, v57, &v135, v5, v57, v134);
    v131 = v59;
    v60 = v136;
    v135 = 3;
    swift_bridgeObjectRetain(v136);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v136, v57, &v135, v5, v57, v134);
    v130 = v60;
    v61 = v136;
    v135 = 4;
    swift_bridgeObjectRetain(v136);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v136, v57, &v135, v5, v57, v134);
    v129 = v61;
    v62 = v57;
    v63 = v136;
    v135 = 5;
    swift_bridgeObjectRetain(v136);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v136, v62, &v135, v5, v62, v134);
    v128 = v54;
    v64 = v136;
    v135 = 6;
    swift_bridgeObjectRetain(v136);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v136, v62, &v135, v5, v62, v134);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v65 = v136;
    swift_bridgeObjectRetain(v136);
    swift_bridgeObjectRelease(0, v66, v67, v68, v69, v70, v71, v72);
    v74 = v132;
    v73 = v133;
    v75 = v129;
    *v133 = v128;
    v73[1] = (uint64_t)v74;
    v76 = v130;
    v77 = v131;
    v73[2] = (uint64_t)v131;
    v73[3] = (uint64_t)v76;
    v73[4] = (uint64_t)v75;
    v73[5] = (uint64_t)v63;
    v73[6] = (uint64_t)v64;
    v73[7] = (uint64_t)v65;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v65, v78, v79, v80, v81, v82, v83, v84);
    swift_bridgeObjectRelease(v64, v85, v86, v87, v88, v89, v90, v91);
    swift_bridgeObjectRelease(v63, v92, v93, v94, v95, v96, v97, v98);
    swift_bridgeObjectRelease(v75, v99, v100, v101, v102, v103, v104, v105);
    swift_bridgeObjectRelease(v76, v106, v107, v108, v109, v110, v111, v112);
    swift_bridgeObjectRelease(v77, v113, v114, v115, v116, v117, v118, v119);
    v127 = v74;
  }
  swift_bridgeObjectRelease(v127, v120, v121, v122, v123, v124, v125, v126);
}

void sub_FA844(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  RemoteConfigNamespaceData.init(from:)(a1, a2);
}

uint64_t sub_FA858(_QWORD *a1)
{
  return RemoteConfigNamespaceData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics25RemoteConfigNamespaceDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  _QWORD *v18;
  _QWORD *v19;

  v3 = a1[1];
  v4 = (_QWORD *)a1[2];
  v6 = (_QWORD *)a1[3];
  v5 = (_QWORD *)a1[4];
  v8 = (_QWORD *)a1[5];
  v7 = (_QWORD *)a1[6];
  v9 = a2[1];
  v10 = (_QWORD *)a2[2];
  v12 = (_QWORD *)a2[3];
  v11 = (_QWORD *)a2[4];
  v14 = (_QWORD *)a2[5];
  v13 = (_QWORD *)a2[6];
  if (!v3)
  {
    v18 = (_QWORD *)a2[7];
    v19 = (_QWORD *)a1[7];
    if (v9)
      return 0;
    goto LABEL_8;
  }
  if (!v9)
    return 0;
  v18 = (_QWORD *)a2[7];
  v19 = (_QWORD *)a1[7];
  v15 = *a1;
  if (v15 == *a2 && v3 == v9
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v3, *a2, v9, 0), result = 0, (v16 & 1) != 0))
  {
LABEL_8:
    if (v4)
    {
      if (!v10 || (sub_66274(v4, v10) & 1) == 0)
        return 0;
    }
    else if (v10)
    {
      return 0;
    }
    if (v6)
    {
      if (!v12 || (sub_66274(v6, v12) & 1) == 0)
        return 0;
    }
    else if (v12)
    {
      return 0;
    }
    if (v5)
    {
      if (!v11 || (sub_66274(v5, v11) & 1) == 0)
        return 0;
    }
    else if (v11)
    {
      return 0;
    }
    if (v8)
    {
      if (!v14 || (sub_66274(v8, v14) & 1) == 0)
        return 0;
    }
    else if (v14)
    {
      return 0;
    }
    if (v7)
    {
      if (!v13 || (sub_66274(v7, v13) & 1) == 0)
        return 0;
    }
    else if (v13)
    {
      return 0;
    }
    if (v19)
    {
      if (v18 && (sub_66274(v19, v18) & 1) != 0)
        return 1;
    }
    else if (!v18)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_FA9E0()
{
  unint64_t result;

  result = qword_29E410;
  if (!qword_29E410)
  {
    result = swift_getWitnessTable(byte_205190, &type metadata for RemoteConfigNamespaceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E410);
  }
  return result;
}

unint64_t sub_FAA28()
{
  unint64_t result;

  result = qword_29E420;
  if (!qword_29E420)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RemoteConfigNamespaceData, &type metadata for RemoteConfigNamespaceData);
    atomic_store(result, (unint64_t *)&qword_29E420);
  }
  return result;
}

unint64_t sub_FAA70()
{
  unint64_t result;

  result = qword_29E428;
  if (!qword_29E428)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RemoteConfigNamespaceData, &type metadata for RemoteConfigNamespaceData);
    atomic_store(result, (unint64_t *)&qword_29E428);
  }
  return result;
}

uint64_t destroy for RemoteConfigNamespaceData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

_QWORD *initializeWithCopy for RemoteConfigNamespaceData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[4];
  v7 = a2[5];
  a1[4] = v6;
  a1[5] = v7;
  v8 = a2[6];
  v9 = a2[7];
  a1[6] = v8;
  a1[7] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithCopy for RemoteConfigNamespaceData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = a1[5];
  v13 = a2[5];
  a1[5] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  v14 = a1[6];
  v15 = a2[6];
  a1[6] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  v16 = a1[7];
  v17 = a2[7];
  a1[7] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  return a1;
}

__n128 initializeWithTake for ExposureData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for RemoteConfigNamespaceData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[5]);
  v6 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  v7 = a1[7];
  a1[7] = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteConfigNamespaceData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteConfigNamespaceData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteConfigNamespaceData()
{
  return &type metadata for RemoteConfigNamespaceData;
}

uint64_t storeEnumTagSinglePayload for RemoteConfigNamespaceData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_FAE20 + 4 * byte_204FCC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_FAE54 + 4 * byte_204FC7[v4]))();
}

uint64_t sub_FAE54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FAE5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFAE64);
  return result;
}

uint64_t sub_FAE70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFAE78);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_FAE7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FAE84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteConfigNamespaceData.CodingKeys()
{
  return &type metadata for RemoteConfigNamespaceData.CodingKeys;
}

unint64_t sub_FAEA4()
{
  unint64_t result;

  result = qword_29E430;
  if (!qword_29E430)
  {
    result = swift_getWitnessTable(byte_205168, &type metadata for RemoteConfigNamespaceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E430);
  }
  return result;
}

unint64_t sub_FAEEC()
{
  unint64_t result;

  result = qword_29E438;
  if (!qword_29E438)
  {
    result = swift_getWitnessTable("QV\a", &type metadata for RemoteConfigNamespaceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E438);
  }
  return result;
}

unint64_t sub_FAF34()
{
  unint64_t result;

  result = qword_29E440;
  if (!qword_29E440)
  {
    result = swift_getWitnessTable("9V\a", &type metadata for RemoteConfigNamespaceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E440);
  }
  return result;
}

uint64_t sub_FAF78(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E656D7461657274 && a2 == 0xEC00000073444974)
  {
    v7 = 0xEC00000073444974;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D7461657274, 0xEC00000073444974, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x49746E656D676573 && a2 == 0xEA00000000007344)
  {
    v8 = 0xEA00000000007344;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746E656D676573, 0xEA00000000007344, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x53746E656D676573 && a2 == 0xED00007344497465)
  {
    v9 = 0xED00007344497465;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53746E656D676573, 0xED00007344497465, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000000220A20)
  {
    v10 = 0x8000000000220A20;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000220A20, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000012)
  {
    v11 = 0x8000000000220A40;
    if (a2 == 0x8000000000220A40)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000220A40, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000000220A60)
  {
    swift_bridgeObjectRelease(0x8000000000220A60);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000000220A60, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void __swiftcall ContentData.init(contentID:contentType:contentPrivateID:contentUserID:contentAcquisitionType:contentSubType:contentLength:supplementalContentCount:seriesType:productionType:mangaFlag:isUnified:isAccoladedContent:contentKind:)(BookAnalytics::ContentData *__return_ptr retstr, Swift::String contentID, BookAnalytics::ContentType contentType, Swift::String contentPrivateID, Swift::String contentUserID, BookAnalytics::ContentAcquisitionType_optional contentAcquisitionType, BookAnalytics::ContentSubType_optional contentSubType, Swift::Int32_optional contentLength, Swift::Int32_optional supplementalContentCount, BookAnalytics::SeriesType_optional seriesType, BookAnalytics::ProductionType_optional productionType, BookAnalytics::MangaFlag_optional mangaFlag, Swift::Bool_optional isUnified, Swift::Bool_optional isAccoladedContent, Swift::String_optional contentKind)
{
  BookAnalytics::ContentType v15;
  BookAnalytics::ContentAcquisitionType v16;
  BookAnalytics::ContentSubType v17;
  BookAnalytics::SeriesType v18;
  BookAnalytics::ProductionType v19;
  BookAnalytics::MangaFlag v20;
  __int16 v21;
  uint64_t v22;
  void *v23;

  v15 = *(_BYTE *)contentType;
  v16 = *(_BYTE *)contentAcquisitionType.value;
  v17 = *(_BYTE *)contentSubType.value;
  v18 = *(_BYTE *)seriesType.value;
  v19 = *(_BYTE *)contentKind.value._countAndFlagsBits;
  v20 = *(_BYTE *)contentKind.value._object;
  retstr->contentID = contentID;
  retstr->contentType = v15;
  retstr->contentPrivateID = contentPrivateID;
  retstr->contentUserID = contentUserID;
  retstr->contentAcquisitionType.value = v16;
  retstr->contentSubType.value = v17;
  retstr->contentLength.value = contentLength.value;
  retstr->contentLength.is_nil = contentLength.is_nil;
  retstr->supplementalContentCount.value = supplementalContentCount.value;
  retstr->supplementalContentCount.is_nil = supplementalContentCount.is_nil;
  retstr->seriesType.value = v18;
  retstr->productionType.value = v19;
  retstr->mangaFlag.value = v20;
  *(_WORD *)&retstr->isUnified.value = v21;
  retstr->contentKind.value._countAndFlagsBits = v22;
  retstr->contentKind.value._object = v23;
}

void AltContentTypeExposureData.productionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

_BYTE *AltContentTypeExposureData.productionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = *result;
  return result;
}

void ContentData.contentSubType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 57);
}

_BYTE *ContentData.contentSubType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = *result;
  return result;
}

uint64_t (*ListeningSessionData.isSnoozeTimeReached.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

unint64_t ContentData.contentLength.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60) | ((unint64_t)*(unsigned __int8 *)(v0 + 64) << 32);
}

uint64_t ContentData.contentLength.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 60) = result;
  *(_BYTE *)(v1 + 64) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ContentData.contentLength.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

unint64_t ContentData.supplementalContentCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 68) | ((unint64_t)*(unsigned __int8 *)(v0 + 72) << 32);
}

uint64_t ContentData.supplementalContentCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 68) = result;
  *(_BYTE *)(v1 + 72) = BYTE4(result) & 1;
  return result;
}

uint64_t (*SessionData.onDevicePersonalization.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void ContentData.seriesType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 73);
}

_BYTE *ContentData.seriesType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 73) = *result;
  return result;
}

void ContentData.productionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 74);
}

_BYTE *ContentData.productionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 74) = *result;
  return result;
}

void ContentData.mangaFlag.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 75);
}

_BYTE *ContentData.mangaFlag.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 75) = *result;
  return result;
}

uint64_t (*ContentData.mangaFlag.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentData.isUnified.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 76);
}

uint64_t ContentData.isUnified.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 76) = result;
  return result;
}

uint64_t (*ContentData.isUnified.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentData.isAccoladedContent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 77);
}

uint64_t ContentData.isAccoladedContent.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 77) = result;
  return result;
}

uint64_t (*ContentData.isAccoladedContent.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t sub_FB44C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_FB484 + 4 * byte_2051E0[a1]))(0x49746E65746E6F63, 0xE900000000000044);
}

uint64_t sub_FB484()
{
  return 0x54746E65746E6F63;
}

unint64_t sub_FB4A4()
{
  return 0xD000000000000010;
}

uint64_t sub_FB4C0()
{
  return 0x55746E65746E6F63;
}

unint64_t sub_FB4E4()
{
  return 0xD000000000000016;
}

uint64_t sub_FB5F0()
{
  return 0x4B746E65746E6F63;
}

uint64_t sub_FB610()
{
  unsigned __int8 *v0;

  return sub_FB44C(*v0);
}

uint64_t sub_FB618@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_FCF40(a1, a2);
  *a3 = result;
  return result;
}

void sub_FB63C(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_FB648(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FC77C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FB670(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FC77C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[3];
  char v49;

  v3 = sub_71B4(&qword_29E448);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v47 = *((unsigned __int8 *)v1 + 16);
  v9 = v1[3];
  v44 = v1[4];
  v45 = v9;
  v10 = v1[5];
  v42 = v1[6];
  v43 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 56);
  v40 = *((unsigned __int8 *)v1 + 57);
  v41 = v10;
  v39 = *((unsigned int *)v1 + 15);
  v38 = *((unsigned __int8 *)v1 + 64);
  v37 = *((unsigned int *)v1 + 17);
  LODWORD(v10) = *((unsigned __int8 *)v1 + 72);
  v35 = *((unsigned __int8 *)v1 + 73);
  v36 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 74);
  v33 = *((unsigned __int8 *)v1 + 75);
  v34 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 76);
  v31 = *((unsigned __int8 *)v1 + 77);
  v32 = v10;
  v11 = v1[10];
  v29 = v1[11];
  v30 = v11;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_FC77C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentData.CodingKeys, &type metadata for ContentData.CodingKeys, v14, v12, v13);
  v49 = 0;
  v15 = v6;
  v16 = v46;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v7, &v49, v3);
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v18 = v44;
  v17 = v45;
  v19 = v42;
  v20 = v43;
  v21 = v41;
  v49 = v47;
  v48[0] = 1;
  v22 = sub_FBF0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, v48, v3, &type metadata for ContentType, v22);
  v49 = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v49, v3);
  v46 = v4;
  v49 = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v20, v19, &v49, v3);
  v49 = v21;
  v48[0] = 4;
  v23 = sub_FC7C0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, v48, v3, &type metadata for ContentAcquisitionType, v23);
  v49 = v40;
  v48[0] = 5;
  v24 = sub_FC804();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, v48, v3, &type metadata for ContentSubType, v24);
  v49 = 6;
  v48[0] = v38;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39 | ((unint64_t)v38 << 32), &v49, v3);
  v49 = 7;
  v48[0] = v36;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37 | ((unint64_t)v36 << 32), &v49, v3);
  v49 = v35;
  v48[0] = 8;
  v25 = sub_FC848();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, v48, v3, &type metadata for SeriesType, v25);
  v49 = v34;
  v48[0] = 9;
  v26 = sub_FC88C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, v48, v3, &type metadata for ProductionType, v26);
  v49 = v33;
  v48[0] = 10;
  v27 = sub_FC8D0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, v48, v3, &type metadata for MangaFlag, v27);
  v49 = 11;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, &v49, v3);
  v49 = 12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, &v49, v3);
  v49 = 13;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v29, &v49, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v15, v3);
}

void ContentData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  unint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  uint64_t v18;
  BAEventReporter *v19;
  BAEventReporter *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BAEventReporter *v26;
  BAEventReporter *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  BAEventReporter *v35;
  BAEventReporter *v36;
  char v37;
  char v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  int64_t v57;
  int64_t v58;
  id v59;
  const char *v60;
  void *v61;
  void *v62;
  void *v63;
  int64_t v64;
  int64_t v65;
  void *v66;
  BAEventReporter *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BAEventReporter *v81;
  BAEventReporter *v82;
  int v83;
  char v84;
  uint64_t v85;

  v5 = sub_71B4(&qword_29E480);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_FC77C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentData.CodingKeys, &type metadata for ContentData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v67 = 0;
  }
  else
  {
    LOBYTE(v85) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v85, v5);
    v14 = v13;
    v84 = 1;
    v15 = sub_FC34();
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v85, &type metadata for ContentType, &v84, v5, &type metadata for ContentType, v15);
    v81 = v14;
    LODWORD(v14) = v85;
    LOBYTE(v85) = 2;
    v79 = KeyedDecodingContainer.decode(_:forKey:)(&v85, v5);
    v80 = v12;
    v83 = (int)v14;
    LOBYTE(v85) = 3;
    v17 = v16;
    swift_bridgeObjectRetain(v16);
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v85, v5);
    v82 = v17;
    v78 = v18;
    v84 = 4;
    v20 = v19;
    v21 = sub_FC914();
    swift_bridgeObjectRetain(v20);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v85, &type metadata for ContentAcquisitionType, &v84, v5, &type metadata for ContentAcquisitionType, v21);
    v77 = v85;
    v84 = 5;
    v22 = sub_FC958();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v85, &type metadata for ContentSubType, &v84, v5, &type metadata for ContentSubType, v22);
    v76 = v85;
    LOBYTE(v85) = 6;
    v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v85, v5);
    LOBYTE(v85) = 7;
    v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v85, v5);
    v84 = 8;
    v23 = sub_FC99C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v85, &type metadata for SeriesType, &v84, v5, &type metadata for SeriesType, v23);
    v73 = v85;
    v84 = 9;
    v24 = sub_FC9E0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v85, &type metadata for ProductionType, &v84, v5, &type metadata for ProductionType, v24);
    v72 = v85;
    v84 = 10;
    v25 = sub_FCA24();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v85, &type metadata for MangaFlag, &v84, v5, &type metadata for MangaFlag, v25);
    v71 = v85;
    LOBYTE(v85) = 11;
    v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v85, v5);
    LOBYTE(v85) = 12;
    v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v85, v5);
    LOBYTE(v85) = 13;
    v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v85, v5);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(0, v28, v29, v30, v31, v32, v33, v34);
    v35 = v81;
    *(_QWORD *)a2 = v80;
    *(_QWORD *)(a2 + 8) = v35;
    *(_BYTE *)(a2 + 16) = v83;
    v36 = v82;
    *(_QWORD *)(a2 + 24) = v79;
    *(_QWORD *)(a2 + 32) = v36;
    *(_QWORD *)(a2 + 40) = v78;
    *(_QWORD *)(a2 + 48) = v20;
    *(_BYTE *)(a2 + 56) = v77;
    *(_BYTE *)(a2 + 57) = v76;
    v37 = BYTE4(v75);
    *(_DWORD *)(a2 + 60) = v75;
    *(_BYTE *)(a2 + 64) = v37 & 1;
    v38 = BYTE4(v74);
    *(_DWORD *)(a2 + 68) = v74;
    *(_BYTE *)(a2 + 72) = v38 & 1;
    *(_BYTE *)(a2 + 73) = v73;
    *(_BYTE *)(a2 + 74) = v72;
    *(_BYTE *)(a2 + 75) = v71;
    *(_BYTE *)(a2 + 76) = v70;
    *(_BYTE *)(a2 + 77) = v69;
    *(_QWORD *)(a2 + 80) = v68;
    *(_QWORD *)(a2 + 88) = v27;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v27, v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v20, v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(v36, v53, v54, v55, v56, v57, v58, v59);
    v67 = v35;
  }
  swift_bridgeObjectRelease(v67, v60, v61, v62, v63, v64, v65, v66);
}

void sub_FC0C0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ContentData.init(from:)(a1, a2);
}

uint64_t sub_FC0D4(_QWORD *a1)
{
  return ContentData.encode(to:)(a1);
}

BOOL _s13BookAnalytics11ContentDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BOOL8 result;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  char v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  BAEventReporter *v46;
  BAEventReporter *v47;
  char v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  uint64_t v65;
  BAEventReporter *v66;
  char v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  int64_t v72;
  int64_t v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  int64_t v79;
  int64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  char v101;
  int v102;
  char v103;
  int v104;
  int v105;
  int v106;
  int v107;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_BYTE *)a1 + 16);
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v105 = *((unsigned __int8 *)a1 + 57);
  v106 = *((unsigned __int8 *)a1 + 56);
  v100 = *((_DWORD *)a1 + 15);
  v103 = *((_BYTE *)a1 + 64);
  v101 = *((_BYTE *)a1 + 72);
  v96 = *((_DWORD *)a1 + 17);
  v97 = *((unsigned __int8 *)a1 + 73);
  v93 = *((unsigned __int8 *)a1 + 74);
  v89 = *((unsigned __int8 *)a1 + 76);
  v90 = *((unsigned __int8 *)a1 + 75);
  v87 = *((unsigned __int8 *)a1 + 77);
  v83 = a1[10];
  v85 = a1[11];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v107 = *(unsigned __int8 *)(a2 + 56);
  v104 = *(unsigned __int8 *)(a2 + 57);
  v102 = *(unsigned __int8 *)(a2 + 64);
  v98 = *(unsigned __int8 *)(a2 + 72);
  v99 = *(_DWORD *)(a2 + 60);
  v94 = *(unsigned __int8 *)(a2 + 73);
  v95 = *(_DWORD *)(a2 + 68);
  v91 = *(unsigned __int8 *)(a2 + 75);
  v92 = *(unsigned __int8 *)(a2 + 74);
  v88 = *(unsigned __int8 *)(a2 + 76);
  v86 = *(unsigned __int8 *)(a2 + 77);
  v82 = *(_QWORD *)(a2 + 80);
  v84 = *(_QWORD *)(a2 + 88);
  if (v4 == *(_QWORD *)a2 && v5 == v11
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v11, 0), result = 0, (v16 & 1) != 0))
  {
    sub_26C28(v6);
    if ((v18 & 1) == 0)
      return 0;
    if (v7 == v12 && v8 == v13
      || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v12, v13, 0), result = 0, (v19 & 1) != 0))
    {
      if (v9 == v14 && v10 == v15
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v14, v15, 0), result = 0, (v20 & 1) != 0))
      {
        if (v106 == 3)
        {
          if (v107 != 3)
            return 0;
        }
        else
        {
          if (v107 == 3)
            return 0;
          v21 = 0x6E776F6E6B6E75;
          if (v106)
          {
            if (v106 == 1)
            {
              v22 = 0x756F4265726F7473;
              v23 = (BAEventReporter *)0xEB00000000746867;
            }
            else
            {
              v22 = 0x65726F74536E6F6ELL;
              v23 = (BAEventReporter *)0xEE00746867756F42;
            }
          }
          else
          {
            v23 = (BAEventReporter *)0xE700000000000000;
            v22 = 0x6E776F6E6B6E75;
          }
          if (v107)
          {
            if (v107 == 1)
            {
              v21 = 0x756F4265726F7473;
              v24 = (BAEventReporter *)0xEB00000000746867;
            }
            else
            {
              v21 = 0x65726F74536E6F6ELL;
              v24 = (BAEventReporter *)0xEE00746867756F42;
            }
          }
          else
          {
            v24 = (BAEventReporter *)0xE700000000000000;
          }
          if (v22 == v21 && v23 == v24)
          {
            swift_bridgeObjectRelease_n(v23, 2);
          }
          else
          {
            v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v21, v24, 0);
            swift_bridgeObjectRelease(v23, v26, v27, v28, v29, v30, v31, v32);
            swift_bridgeObjectRelease(v24, v33, v34, v35, v36, v37, v38, v39);
            result = 0;
            if ((v25 & 1) == 0)
              return result;
          }
        }
        if (v105 == 4)
        {
          if (v104 != 4)
            return 0;
        }
        else
        {
          if (v104 == 4)
            return 0;
          sub_2B74C(v105);
          if ((v40 & 1) == 0)
            return 0;
        }
        if ((v103 & 1) != 0)
        {
          if (!v102)
            return 0;
        }
        else
        {
          v41 = v102;
          if (v100 != v99)
            v41 = 1;
          if ((v41 & 1) != 0)
            return 0;
        }
        if ((v101 & 1) != 0)
        {
          if (!v98)
            return 0;
        }
        else
        {
          v42 = v98;
          if (v96 != v95)
            v42 = 1;
          if ((v42 & 1) != 0)
            return 0;
        }
        if (v97 == 4)
        {
          if (v94 != 4)
            return 0;
        }
        else
        {
          if (v94 == 4)
            return 0;
          sub_2B9F4(v97);
          if ((v43 & 1) == 0)
            return 0;
        }
        if (v93 == 3)
        {
          if (v92 != 3)
            return 0;
        }
        else
        {
          if (v92 == 3)
            return 0;
          v44 = 0x6E776F6E6B6E75;
          if (v93)
          {
            if (v93 == 1)
            {
              v45 = 0x6375646F72506773;
              v46 = (BAEventReporter *)0xEC0000006E6F6974;
            }
            else
            {
              v45 = 0x6F725047536E6F6ELL;
              v46 = (BAEventReporter *)0xEF6E6F6974637564;
            }
          }
          else
          {
            v46 = (BAEventReporter *)0xE700000000000000;
            v45 = 0x6E776F6E6B6E75;
          }
          if (v92)
          {
            if (v92 == 1)
            {
              v44 = 0x6375646F72506773;
              v47 = (BAEventReporter *)0xEC0000006E6F6974;
            }
            else
            {
              v44 = 0x6F725047536E6F6ELL;
              v47 = (BAEventReporter *)0xEF6E6F6974637564;
            }
          }
          else
          {
            v47 = (BAEventReporter *)0xE700000000000000;
          }
          if (v45 == v44 && v46 == v47)
          {
            swift_bridgeObjectRelease_n(v46, 2);
          }
          else
          {
            v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v44, v47, 0);
            swift_bridgeObjectRelease(v46, v49, v50, v51, v52, v53, v54, v55);
            swift_bridgeObjectRelease(v47, v56, v57, v58, v59, v60, v61, v62);
            result = 0;
            if ((v48 & 1) == 0)
              return result;
          }
        }
        if (v90 == 3)
        {
          if (v91 != 3)
            return 0;
        }
        else
        {
          if (v91 == 3)
            return 0;
          v63 = 7562617;
          if (v90)
          {
            if (v90 == 1)
            {
              v64 = (BAEventReporter *)0xE200000000000000;
              v65 = 28526;
            }
            else
            {
              v64 = (BAEventReporter *)0xE700000000000000;
              v65 = 0x6E776F6E6B6E75;
            }
          }
          else
          {
            v64 = (BAEventReporter *)0xE300000000000000;
            v65 = 7562617;
          }
          if (v91)
          {
            if (v91 == 1)
            {
              v66 = (BAEventReporter *)0xE200000000000000;
              v63 = 28526;
            }
            else
            {
              v66 = (BAEventReporter *)0xE700000000000000;
              v63 = 0x6E776F6E6B6E75;
            }
          }
          else
          {
            v66 = (BAEventReporter *)0xE300000000000000;
          }
          if (v65 == v63 && v64 == v66)
          {
            swift_bridgeObjectRelease_n(v64, 2);
          }
          else
          {
            v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v64, v63, v66, 0);
            swift_bridgeObjectRelease(v64, v68, v69, v70, v71, v72, v73, v74);
            swift_bridgeObjectRelease(v66, v75, v76, v77, v78, v79, v80, v81);
            result = 0;
            if ((v67 & 1) == 0)
              return result;
          }
        }
        if (v89 == 2)
        {
          if (v88 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v88 == 2 || ((((v89 & 1) == 0) ^ v88) & 1) == 0)
            return result;
        }
        if (v87 == 2)
        {
          if (v86 != 2)
            return 0;
          goto LABEL_97;
        }
        result = 0;
        if (v86 != 2 && ((((v87 & 1) == 0) ^ v86) & 1) != 0)
        {
LABEL_97:
          if (v85)
            return v84
                && (v83 == v82 && v85 == v84
                 || (_stringCompareWithSmolCheck(_:_:expecting:)(v83, v85, v82, v84, 0) & 1) != 0);
          return !v84;
        }
      }
    }
  }
  return result;
}

unint64_t sub_FC77C()
{
  unint64_t result;

  result = qword_29E450;
  if (!qword_29E450)
  {
    result = swift_getWitnessTable(byte_2053BC, &type metadata for ContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E450);
  }
  return result;
}

unint64_t sub_FC7C0()
{
  unint64_t result;

  result = qword_29E458;
  if (!qword_29E458)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentAcquisitionType, &type metadata for ContentAcquisitionType);
    atomic_store(result, (unint64_t *)&qword_29E458);
  }
  return result;
}

unint64_t sub_FC804()
{
  unint64_t result;

  result = qword_29E460;
  if (!qword_29E460)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentSubType, &type metadata for ContentSubType);
    atomic_store(result, (unint64_t *)&qword_29E460);
  }
  return result;
}

unint64_t sub_FC848()
{
  unint64_t result;

  result = qword_29E468;
  if (!qword_29E468)
  {
    result = swift_getWitnessTable("5O\a", &type metadata for SeriesType);
    atomic_store(result, (unint64_t *)&qword_29E468);
  }
  return result;
}

unint64_t sub_FC88C()
{
  unint64_t result;

  result = qword_29E470;
  if (!qword_29E470)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ProductionType, &type metadata for ProductionType);
    atomic_store(result, (unint64_t *)&qword_29E470);
  }
  return result;
}

unint64_t sub_FC8D0()
{
  unint64_t result;

  result = qword_29E478;
  if (!qword_29E478)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MangaFlag, &type metadata for MangaFlag);
    atomic_store(result, (unint64_t *)&qword_29E478);
  }
  return result;
}

unint64_t sub_FC914()
{
  unint64_t result;

  result = qword_29E488;
  if (!qword_29E488)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentAcquisitionType, &type metadata for ContentAcquisitionType);
    atomic_store(result, (unint64_t *)&qword_29E488);
  }
  return result;
}

unint64_t sub_FC958()
{
  unint64_t result;

  result = qword_29E490;
  if (!qword_29E490)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ContentSubType, &type metadata for ContentSubType);
    atomic_store(result, (unint64_t *)&qword_29E490);
  }
  return result;
}

unint64_t sub_FC99C()
{
  unint64_t result;

  result = qword_29E498;
  if (!qword_29E498)
  {
    result = swift_getWitnessTable("MO\a", &type metadata for SeriesType);
    atomic_store(result, (unint64_t *)&qword_29E498);
  }
  return result;
}

unint64_t sub_FC9E0()
{
  unint64_t result;

  result = qword_29E4A0;
  if (!qword_29E4A0)
  {
    result = swift_getWitnessTable("5O\a", &type metadata for ProductionType);
    atomic_store(result, (unint64_t *)&qword_29E4A0);
  }
  return result;
}

unint64_t sub_FCA24()
{
  unint64_t result;

  result = qword_29E4A8;
  if (!qword_29E4A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MangaFlag, &type metadata for MangaFlag);
    atomic_store(result, (unint64_t *)&qword_29E4A8);
  }
  return result;
}

uint64_t destroy for ContentData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for ContentData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v6;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for ContentData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v10 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v10;
  v11 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v11;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for ContentData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

ValueMetadata *type metadata accessor for ContentData()
{
  return &type metadata for ContentData;
}

uint64_t getEnumTagSinglePayload for ContentData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_FCDE8 + 4 * byte_2051F3[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_FCE1C + 4 * byte_2051EE[v4]))();
}

uint64_t sub_FCE1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FCE24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFCE2CLL);
  return result;
}

uint64_t sub_FCE38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFCE40);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_FCE44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FCE4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentData.CodingKeys()
{
  return &type metadata for ContentData.CodingKeys;
}

unint64_t sub_FCE6C()
{
  unint64_t result;

  result = qword_29E4B0;
  if (!qword_29E4B0)
  {
    result = swift_getWitnessTable("}U\a", &type metadata for ContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E4B0);
  }
  return result;
}

unint64_t sub_FCEB4()
{
  unint64_t result;

  result = qword_29E4B8;
  if (!qword_29E4B8)
  {
    result = swift_getWitnessTable("=V\a", &type metadata for ContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E4B8);
  }
  return result;
}

unint64_t sub_FCEFC()
{
  unint64_t result;

  result = qword_29E4C0;
  if (!qword_29E4C0)
  {
    result = swift_getWitnessTable("%V\a", &type metadata for ContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E4C0);
  }
  return result;
}

uint64_t sub_FCF40(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0x49746E65746E6F63 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746E65746E6F63, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079)
  {
    v7 = 0xEB00000000657079;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E65746E6F63, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x800000000021EBA0;
    if (a2 == 0x800000000021EBA0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EBA0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x55746E65746E6F63 && a2 == 0xED00004449726573)
  {
    v9 = 0xED00004449726573;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55746E65746E6F63, 0xED00004449726573, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000000220300)
  {
    v10 = 0x8000000000220300;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000000220300, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x53746E65746E6F63 && a2 == 0xEE00657079546275)
  {
    v11 = 0xEE00657079546275;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53746E65746E6F63, 0xEE00657079546275, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x4C746E65746E6F63 && a2 == 0xED00006874676E65)
  {
    v12 = 0xED00006874676E65;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C746E65746E6F63, 0xED00006874676E65, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000000220340)
  {
    v13 = 0x8000000000220340;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000000220340, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x7954736569726573 && a2 == 0xEA00000000006570)
  {
    v14 = 0xEA00000000006570;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954736569726573, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x69746375646F7270 && a2 == 0xEE00657079546E6FLL)
  {
    v15 = 0xEE00657079546E6FLL;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746375646F7270, 0xEE00657079546E6FLL, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x616C4661676E616DLL && a2 == 0xE900000000000067)
  {
    v16 = 0xE900000000000067;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616C4661676E616DLL, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x656966696E557369 && a2 == 0xE900000000000064)
  {
    v17 = 0xE900000000000064;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656966696E557369, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000000220380)
  {
    v18 = 0x8000000000220380;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000220380, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x4B746E65746E6F63 && a2 == 0xEB00000000646E69)
  {
    swift_bridgeObjectRelease(0xEB00000000646E69);
    return 13;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4B746E65746E6F63, 0xEB00000000646E69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

void static NotificationOptInTypeData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_FD5C0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_FD660 + 4 * byte_205416[a1]))(0x6C61626F6C67);
}

uint64_t sub_FD660(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C61626F6C67 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C61626F6C67, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_FD754()
{
  return 1701869940;
}

uint64_t sub_FD764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_FD7E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FD934();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FD810(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FD934();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NotificationOptInTypeData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29E4C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_FD934();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationOptInTypeData.CodingKeys, &type metadata for NotificationOptInTypeData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_FD978();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for ModelType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_FD934()
{
  unint64_t result;

  result = qword_29E4D0;
  if (!qword_29E4D0)
  {
    result = swift_getWitnessTable(byte_2055D0, &type metadata for NotificationOptInTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E4D0);
  }
  return result;
}

unint64_t sub_FD978()
{
  unint64_t result;

  result = qword_29E4D8;
  if (!qword_29E4D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ModelType, &type metadata for ModelType);
    atomic_store(result, (unint64_t *)&qword_29E4D8);
  }
  return result;
}

uint64_t NotificationOptInTypeData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29E4E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_FD934();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationOptInTypeData.CodingKeys, &type metadata for NotificationOptInTypeData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_FDAD8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for ModelType, v13, v5, &type metadata for ModelType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_FDAD8()
{
  unint64_t result;

  result = qword_29E4E8;
  if (!qword_29E4E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ModelType, &type metadata for ModelType);
    atomic_store(result, (unint64_t *)&qword_29E4E8);
  }
  return result;
}

uint64_t sub_FDB24@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NotificationOptInTypeData.init(from:)(a1, a2);
}

uint64_t sub_FDB38(_QWORD *a1)
{
  return NotificationOptInTypeData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for NotificationOptInTypeData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_FDB98 + 4 * byte_205421[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_FDBCC + 4 * byte_20541C[v4]))();
}

uint64_t sub_FDBCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FDBD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFDBDCLL);
  return result;
}

uint64_t sub_FDBE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFDBF0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_FDBF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FDBFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationOptInTypeData()
{
  return &type metadata for NotificationOptInTypeData;
}

uint64_t storeEnumTagSinglePayload for NotificationOptInTypeData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_FDC58 + 4 * byte_205426[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_FDC78 + 4 * byte_20542B[v4]))();
}

_BYTE *sub_FDC58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_FDC78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_FDC80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_FDC88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_FDC90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_FDC98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotificationOptInTypeData.CodingKeys()
{
  return &type metadata for NotificationOptInTypeData.CodingKeys;
}

unint64_t sub_FDCB8()
{
  unint64_t result;

  result = qword_29E4F0;
  if (!qword_29E4F0)
  {
    result = swift_getWitnessTable("QU\a", &type metadata for NotificationOptInTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E4F0);
  }
  return result;
}

unint64_t sub_FDD00()
{
  unint64_t result;

  result = qword_29E4F8;
  if (!qword_29E4F8)
  {
    result = swift_getWitnessTable(byte_205518, &type metadata for NotificationOptInTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E4F8);
  }
  return result;
}

unint64_t sub_FDD48()
{
  unint64_t result;

  result = qword_29E500;
  if (!qword_29E500)
  {
    result = swift_getWitnessTable(byte_205540, &type metadata for NotificationOptInTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E500);
  }
  return result;
}

uint64_t sub_FDD8C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29E508, &enum case for SessionGroup.default(_:));
}

uint64_t static ListenEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E508, a1);
}

uint64_t sub_FDDCC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29E520, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ListenEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E520, a1);
}

uint64_t ListenEvent.listeningSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ListenEvent.listeningSessionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ListenEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ListenEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29E5A8, (uint64_t)&nominal type descriptor for ListenEvent);
}

uint64_t ListenEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ListenEvent.contentData.modify())()
{
  type metadata accessor for ListenEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ListenEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ListenEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ListenEvent.upSellData.modify())()
{
  type metadata accessor for ListenEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ListenEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ListenEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ListenEvent.eventData.modify())()
{
  type metadata accessor for ListenEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ListenEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ListenEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ListenEvent.timedData.modify())()
{
  type metadata accessor for ListenEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ListenEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ListenEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t ListenEvent.Model.listeningSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  char v11;
  char v12;
  int v13;
  char v14;
  char v15;

  v2 = *(_BYTE *)(v1 + 4);
  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 12);
  v5 = *(_DWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 40);
  v9 = *(_BYTE *)(v1 + 41);
  v10 = *(_DWORD *)(v1 + 44);
  v11 = *(_BYTE *)(v1 + 48);
  v12 = *(_BYTE *)(v1 + 49);
  v13 = *(_DWORD *)(v1 + 52);
  v14 = *(_BYTE *)(v1 + 56);
  v15 = *(_BYTE *)(v1 + 57);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 41) = v9;
  *(_DWORD *)(a1 + 44) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 49) = v12;
  *(_DWORD *)(a1 + 52) = v13;
  *(_BYTE *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 57) = v15;
  return swift_bridgeObjectRetain(v6);
}

uint64_t ListenEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 176);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 160);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t ListenEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ListenEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29E648, (uint64_t)&nominal type descriptor for ListenEvent.Model);
}

uint64_t ListenEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ListenEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ListenEvent.Model.init(listeningSessionData:contentData:upSellData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  char v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_BYTE *)(a1 + 4);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 41);
  v14 = *(_DWORD *)(a1 + 44);
  v15 = *(_BYTE *)(a1 + 48);
  v16 = *(_BYTE *)(a1 + 49);
  v17 = *(_DWORD *)(a1 + 52);
  v18 = *(_BYTE *)(a1 + 56);
  v19 = *(_BYTE *)(a1 + 57);
  v20 = *a2;
  v21 = a2[1];
  v22 = *((_BYTE *)a2 + 16);
  v23 = *(_OWORD *)(a2 + 3);
  v24 = a2[5];
  v25 = a2[6];
  v26 = *((_WORD *)a2 + 28);
  v27 = *((_DWORD *)a2 + 15);
  v28 = *((_BYTE *)a2 + 64);
  v29 = *((_DWORD *)a2 + 17);
  v30 = *((_BYTE *)a2 + 72);
  v31 = *((_BYTE *)a2 + 77);
  v32 = *((_QWORD *)a3 + 2);
  *(_DWORD *)a6 = *(_DWORD *)a1;
  *(_BYTE *)(a6 + 4) = v8;
  *(_DWORD *)(a6 + 8) = v9;
  *(_BYTE *)(a6 + 12) = v10;
  *(_DWORD *)(a6 + 16) = v11;
  *(_OWORD *)(a6 + 24) = *(_OWORD *)(a1 + 24);
  *(_BYTE *)(a6 + 40) = v12;
  *(_BYTE *)(a6 + 41) = v13;
  *(_DWORD *)(a6 + 44) = v14;
  *(_BYTE *)(a6 + 48) = v15;
  *(_BYTE *)(a6 + 49) = v16;
  *(_DWORD *)(a6 + 52) = v17;
  *(_BYTE *)(a6 + 56) = v18;
  *(_BYTE *)(a6 + 57) = v19;
  *(_QWORD *)(a6 + 64) = v20;
  *(_QWORD *)(a6 + 72) = v21;
  *(_BYTE *)(a6 + 80) = v22;
  *(_OWORD *)(a6 + 88) = v23;
  *(_QWORD *)(a6 + 104) = v24;
  *(_QWORD *)(a6 + 112) = v25;
  *(_WORD *)(a6 + 120) = v26;
  *(_DWORD *)(a6 + 124) = v27;
  *(_BYTE *)(a6 + 128) = v28;
  *(_DWORD *)(a6 + 132) = v29;
  *(_BYTE *)(a6 + 136) = v30;
  *(_DWORD *)(a6 + 137) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a6 + 141) = v31;
  v33 = *a3;
  *(_OWORD *)(a6 + 144) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a6 + 160) = v33;
  *(_QWORD *)(a6 + 176) = v32;
  v34 = type metadata accessor for ListenEvent.Model(0);
  v35 = a6 + *(int *)(v34 + 28);
  v36 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v35, a4, v36);
  v37 = a6 + *(int *)(v34 + 32);
  v38 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v37, a5, v38);
}

uint64_t sub_FE564()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_FE598 + 4 * byte_205620[*v0]))(0xD000000000000014, 0x800000000021F050);
}

uint64_t sub_FE598()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_FE5B8()
{
  return 0x61446C6C65537075;
}

uint64_t sub_FE5D4()
{
  return 0x746144746E657665;
}

uint64_t sub_FE600@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10079C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FE624(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FE98C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FE64C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FE98C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListenEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  char v15;
  int v16;
  char v17;
  char v18;
  int v19;
  char v20;
  char v21;
  int v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  char v33;
  int v34;
  char v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  char v55;
  int v56;
  char v57;
  int v58;
  char v59;
  __int128 v60;
  char v61;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29E538);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_FE98C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ListenEvent.Model.CodingKeys, &type metadata for ListenEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_BYTE *)(v4 + 4);
  v14 = *(_DWORD *)(v4 + 8);
  v15 = *(_BYTE *)(v4 + 12);
  v16 = *(_DWORD *)(v4 + 16);
  v17 = *(_BYTE *)(v4 + 40);
  v18 = *(_BYTE *)(v4 + 41);
  v19 = *(_DWORD *)(v4 + 44);
  v20 = *(_BYTE *)(v4 + 48);
  v21 = *(_BYTE *)(v4 + 49);
  v22 = *(_DWORD *)(v4 + 52);
  v23 = *(_BYTE *)(v4 + 56);
  v24 = *(_BYTE *)(v4 + 57);
  LODWORD(v48) = *(_DWORD *)v4;
  BYTE4(v48) = v13;
  DWORD2(v48) = v14;
  BYTE12(v48) = v15;
  LODWORD(v49) = v16;
  v50 = *(_OWORD *)(v4 + 24);
  LOBYTE(v51) = v17;
  BYTE1(v51) = v18;
  HIDWORD(v51) = v19;
  LOBYTE(v52) = v20;
  BYTE1(v52) = v21;
  HIDWORD(v52) = v22;
  LOBYTE(v53) = v23;
  HIBYTE(v53) = v24;
  v61 = 0;
  v25 = sub_46970();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v48, &v61, v6, &type metadata for ListeningSessionData, v25);
  if (!v3)
  {
    v26 = *(_QWORD *)(v4 + 72);
    v27 = *(_BYTE *)(v4 + 80);
    v28 = *(_OWORD *)(v4 + 88);
    v29 = *(_QWORD *)(v4 + 104);
    v30 = *(_QWORD *)(v4 + 112);
    v31 = *(_WORD *)(v4 + 120);
    v32 = *(_DWORD *)(v4 + 124);
    v33 = *(_BYTE *)(v4 + 128);
    v34 = *(_DWORD *)(v4 + 132);
    v35 = *(_BYTE *)(v4 + 136);
    v36 = *(_BYTE *)(v4 + 141);
    *(_QWORD *)&v48 = *(_QWORD *)(v4 + 64);
    *((_QWORD *)&v48 + 1) = v26;
    LOBYTE(v49) = v27;
    v50 = v28;
    v51 = v29;
    v52 = v30;
    v53 = v31;
    v54 = v32;
    v55 = v33;
    v56 = v34;
    v57 = v35;
    v58 = *(_DWORD *)(v4 + 137);
    v59 = v36;
    v60 = *(_OWORD *)(v4 + 144);
    v61 = 1;
    v37 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v48, &v61, v6, &type metadata for ContentData, v37);
    v38 = *(_QWORD *)(v4 + 176);
    v48 = *(_OWORD *)(v4 + 160);
    v49 = v38;
    v61 = 2;
    v39 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v48, &v61, v6, &type metadata for UpSellData, v39);
    v40 = type metadata accessor for ListenEvent.Model(0);
    v41 = v4 + *(int *)(v40 + 28);
    LOBYTE(v48) = 3;
    v42 = type metadata accessor for EventData(0);
    v43 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v41, &v48, v6, v42, v43);
    v44 = v4 + *(int *)(v40 + 32);
    LOBYTE(v48) = 4;
    v45 = type metadata accessor for TimedData(0);
    v46 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v44, &v48, v6, v45, v46);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_FE98C()
{
  unint64_t result;

  result = qword_29E540;
  if (!qword_29E540)
  {
    result = swift_getWitnessTable(byte_205824, &type metadata for ListenEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E540);
  }
  return result;
}

void ListenEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  int v25;
  char v26;
  char v27;
  int v28;
  char v29;
  char v30;
  int v31;
  char v32;
  char v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  char v43;
  int v44;
  char v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _DWORD *v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  char v76;
  int v77;
  char v78;
  int v79;
  char v80;
  __int128 v81;
  char v82;

  v61 = a2;
  v62 = type metadata accessor for TimedData(0);
  v60 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v63 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = sub_71B4(&qword_29E548);
  v7 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ListenEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_FE98C();
  v66 = v9;
  v16 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListenEvent.Model.CodingKeys, &type metadata for ListenEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(a1);
  }
  else
  {
    v58 = v6;
    v17 = v7;
    v68 = v12;
    v18 = a1;
    v59 = v10;
    v19 = v65;
    v82 = 0;
    v20 = sub_4724C();
    v21 = v67;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v69, &type metadata for ListeningSessionData, &v82, v67, &type metadata for ListeningSessionData, v20);
    v22 = BYTE4(v69);
    v23 = DWORD2(v69);
    v24 = BYTE12(v69);
    v25 = v70;
    v26 = v72;
    v27 = BYTE1(v72);
    v28 = HIDWORD(v72);
    v29 = v73;
    v30 = BYTE1(v73);
    v31 = HIDWORD(v73);
    v32 = v74;
    v33 = HIBYTE(v74);
    v34 = v68;
    *v68 = v69;
    *((_BYTE *)v34 + 4) = v22;
    v34[2] = v23;
    *((_BYTE *)v34 + 12) = v24;
    v34[4] = v25;
    *(_OWORD *)(v34 + 6) = v71;
    *((_BYTE *)v34 + 40) = v26;
    *((_BYTE *)v34 + 41) = v27;
    v34[11] = v28;
    *((_BYTE *)v34 + 48) = v29;
    *((_BYTE *)v34 + 49) = v30;
    v34[13] = v31;
    *((_BYTE *)v34 + 56) = v32;
    *((_BYTE *)v34 + 57) = v33;
    v82 = 1;
    v35 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v69, &type metadata for ContentData, &v82, v21, &type metadata for ContentData, v35);
    v36 = *((_QWORD *)&v69 + 1);
    v37 = v70;
    v38 = v71;
    v39 = v72;
    v40 = v73;
    v41 = v74;
    v42 = v75;
    v43 = v76;
    v44 = v77;
    v45 = v78;
    v46 = v80;
    *((_QWORD *)v34 + 8) = v69;
    *((_QWORD *)v34 + 9) = v36;
    *((_BYTE *)v34 + 80) = v37;
    *(_OWORD *)(v34 + 22) = v38;
    *((_QWORD *)v34 + 13) = v39;
    *((_QWORD *)v34 + 14) = v40;
    *((_WORD *)v34 + 60) = v41;
    v34[31] = v42;
    *((_BYTE *)v34 + 128) = v43;
    v34[33] = v44;
    *((_BYTE *)v34 + 136) = v45;
    *(_DWORD *)((char *)v34 + 137) = v79;
    *((_BYTE *)v34 + 141) = v46;
    *((_OWORD *)v34 + 9) = v81;
    v82 = 2;
    v47 = sub_2F26C();
    v57 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v69, &type metadata for UpSellData, &v82, v21, &type metadata for UpSellData, v47);
    v48 = v70;
    *((_OWORD *)v34 + 10) = v69;
    *((_QWORD *)v34 + 22) = v48;
    LOBYTE(v69) = 3;
    v49 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v50 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v58, v19, &v69, v21, v19, v49);
    v51 = v59;
    (*(void (**)(char *, _QWORD *, uint64_t))(v64 + 32))((char *)v34 + *(int *)(v59 + 28), v50, v19);
    LOBYTE(v69) = 4;
    v52 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v53 = v63;
    v54 = v21;
    v55 = (uint64_t)v34;
    v56 = v62;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v63, v62, &v69, v54, v62, v52);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v66, v67);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v60 + 32))(v55 + *(int *)(v51 + 32), v53, v56);
    sub_FEF50(v55, v61);
    sub_7DAC(v18);
    sub_FEF94(v55);
  }
}

uint64_t sub_FEF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListenEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_FEF94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ListenEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_FEFD0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ListenEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_FEFE4(_QWORD *a1)
{
  return ListenEvent.Model.encode(to:)(a1);
}

uint64_t sub_FEFF8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E508, (uint64_t)sub_FDD8C, a1);
}

uint64_t sub_FF01C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E520, (uint64_t)sub_FDDCC, a1);
}

uint64_t sub_FF040@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for ListenEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_297DE8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for ListenEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for ListenEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for ListenEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for ListenEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for ListenEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListenEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_FF800);
}

uint64_t sub_FF800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_297DE8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296F68);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ListenEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_FF900);
}

uint64_t sub_FF900(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_297DE8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296F68);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_FF9FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, &qword_297EB0, (uint64_t (*)(void))sub_4724C, (uint64_t (*)(void))sub_46970, (uint64_t)&type metadata for ListeningSessionData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ListenEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v23 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v23;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v7 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v7;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v8 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v8;
    v9 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v9;
    *(_WORD *)(a1 + 120) = *((_WORD *)a2 + 60);
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
    *(_DWORD *)(a1 + 137) = *(_DWORD *)((char *)a2 + 137);
    *(_BYTE *)(a1 + 141) = *((_BYTE *)a2 + 141);
    v10 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v10;
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    *(_BYTE *)(a1 + 161) = *((_BYTE *)a2 + 161);
    v11 = a2[22];
    v12 = *(int *)(a3 + 28);
    v21 = (uint64_t)a2 + v12;
    v22 = a1 + v12;
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v11;
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    v14(v22, v21, v13);
    v15 = *(int *)(a3 + 32);
    v16 = (char *)v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v4;
}

uint64_t destroy for ListenEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[22]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for ListenEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v21 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v21;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)(a2 + 137);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v8;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v9 = *(_QWORD *)(a2 + 176);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v19 = a2 + v10;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v9;
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v11, v19, v12);
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for ListenEvent.Model(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = a2[4];
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)a2 + 4);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  v10 = a2[11];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_DWORD *)(a1 + 44) = v10;
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  v11 = a2[13];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_DWORD *)(a1 + 52) = v11;
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v12 = *((_QWORD *)a2 + 9);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 12);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  v16 = *((_QWORD *)a2 + 14);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_BYTE *)(a1 + 121) = *((_BYTE *)a2 + 121);
  v18 = a2[31];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_DWORD *)(a1 + 124) = v18;
  v19 = a2[33];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v19;
  *(_BYTE *)(a1 + 137) = *((_BYTE *)a2 + 137);
  *(_BYTE *)(a1 + 138) = *((_BYTE *)a2 + 138);
  *(_BYTE *)(a1 + 139) = *((_BYTE *)a2 + 139);
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 140);
  *(_BYTE *)(a1 + 141) = *((_BYTE *)a2 + 141);
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  v20 = *((_QWORD *)a2 + 19);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_BYTE *)(a1 + 161) = *((_BYTE *)a2 + 161);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  v22 = *((_QWORD *)a2 + 22);
  v23 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = *(int *)(a3 + 28);
  v25 = a1 + v24;
  v26 = (uint64_t)a2 + v24;
  v27 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = *(int *)(a3 + 32);
  v29 = a1 + v28;
  v30 = (uint64_t)a2 + v28;
  v31 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  return a1;
}

uint64_t initializeWithTake for ListenEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for ListenEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  swift_bridgeObjectRelease(v13);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)(a2 + 137);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  v14 = *(_QWORD *)(a2 + 152);
  v15 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  swift_bridgeObjectRelease(v15);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  v16 = *(_QWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = *(int *)(a3 + 32);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListenEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10040C);
}

uint64_t sub_10040C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ListenEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004B8);
}

uint64_t sub_1004B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_100554(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = ":";
  v5[1] = &unk_205730;
  v5[2] = &unk_205748;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ListenEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100644 + 4 * byte_20562A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100678 + 4 * byte_205625[v4]))();
}

uint64_t sub_100678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100688);
  return result;
}

uint64_t sub_100694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10069CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1006A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListenEvent.Model.CodingKeys()
{
  return &type metadata for ListenEvent.Model.CodingKeys;
}

unint64_t sub_1006C8()
{
  unint64_t result;

  result = qword_29E690;
  if (!qword_29E690)
  {
    result = swift_getWitnessTable(byte_2057FC, &type metadata for ListenEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E690);
  }
  return result;
}

unint64_t sub_100710()
{
  unint64_t result;

  result = qword_29E698;
  if (!qword_29E698)
  {
    result = swift_getWitnessTable("\rU\a", &type metadata for ListenEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E698);
  }
  return result;
}

unint64_t sub_100758()
{
  unint64_t result;

  result = qword_29E6A0;
  if (!qword_29E6A0)
  {
    result = swift_getWitnessTable(byte_205794, &type metadata for ListenEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E6A0);
  }
  return result;
}

uint64_t sub_10079C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x800000000021F050;
    if (a2 == 0x800000000021F050)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F050, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t static SearchResultsData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_66CCC(*a1, *a2);
}

unint64_t sub_1009FC()
{
  return 0xD000000000000014;
}

uint64_t sub_100A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100FD8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchResultsData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_29E6A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_100BB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchResultsData.CodingKeys, &type metadata for SearchResultsData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_29E6B8);
  v12 = sub_100D78(&qword_29E6C0, (uint64_t (*)(void))sub_100BF4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100BB0()
{
  unint64_t result;

  result = qword_29E6B0;
  if (!qword_29E6B0)
  {
    result = swift_getWitnessTable("9T\a", &type metadata for SearchResultsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E6B0);
  }
  return result;
}

unint64_t sub_100BF4()
{
  unint64_t result;

  result = qword_29E6C8;
  if (!qword_29E6C8)
  {
    result = swift_getWitnessTable("=P\a", &type metadata for SearchResultsItemTypeData);
    atomic_store(result, (unint64_t *)&qword_29E6C8);
  }
  return result;
}

uint64_t SearchResultsData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_29E6D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_100BB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchResultsData.CodingKeys, &type metadata for SearchResultsData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_29E6B8);
    v13 = sub_100D78(&qword_29E6D8, (uint64_t (*)(void))sub_100DE0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_100D78(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_29E6B8);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100DE0()
{
  unint64_t result;

  result = qword_29E6E0;
  if (!qword_29E6E0)
  {
    result = swift_getWitnessTable("UP\a", &type metadata for SearchResultsItemTypeData);
    atomic_store(result, (unint64_t *)&qword_29E6E0);
  }
  return result;
}

uint64_t sub_100E2C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SearchResultsData.init(from:)(a1, a2);
}

uint64_t sub_100E40(_QWORD *a1)
{
  return SearchResultsData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for SearchResultsData()
{
  return &type metadata for SearchResultsData;
}

uint64_t storeEnumTagSinglePayload for SearchResultsData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100EA4 + 4 * byte_205880[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100EC4 + 4 * byte_205885[v4]))();
}

_BYTE *sub_100EA4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100EC4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100ECC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100ED4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100EDC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100EE4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SearchResultsData.CodingKeys()
{
  return &type metadata for SearchResultsData.CodingKeys;
}

unint64_t sub_100F04()
{
  unint64_t result;

  result = qword_29E6E8;
  if (!qword_29E6E8)
  {
    result = swift_getWitnessTable(byte_205A00, &type metadata for SearchResultsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E6E8);
  }
  return result;
}

unint64_t sub_100F4C()
{
  unint64_t result;

  result = qword_29E6F0;
  if (!qword_29E6F0)
  {
    result = swift_getWitnessTable(byte_205970, &type metadata for SearchResultsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E6F0);
  }
  return result;
}

unint64_t sub_100F94()
{
  unint64_t result;

  result = qword_29E6F8;
  if (!qword_29E6F8)
  {
    result = swift_getWitnessTable(byte_205998, &type metadata for SearchResultsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E6F8);
  }
  return result;
}

uint64_t sub_100FD8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000014 && a2 == 0x8000000000221580)
  {
    swift_bridgeObjectRelease(0x8000000000221580);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000221580, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_10105C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29E700, &enum case for SessionGroup.default(_:));
}

uint64_t static ViewSupplementalContentEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E700, a1);
}

uint64_t sub_10109C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29E718, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ViewSupplementalContentEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E718, a1);
}

uint64_t ViewSupplementalContentEvent.viewSourceData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ViewSupplementalContentEvent(0) + 20);
  v4 = sub_71B4(&qword_29E730);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ViewSupplementalContentEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29E7B8, (uint64_t)&nominal type descriptor for ViewSupplementalContentEvent);
}

uint64_t ViewSupplementalContentEvent.viewSourceData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ViewSupplementalContentEvent(0) + 20);
  v4 = sub_71B4(&qword_29E730);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ViewSupplementalContentEvent.viewSourceData.modify())()
{
  type metadata accessor for ViewSupplementalContentEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ViewSupplementalContentEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ViewSupplementalContentEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ViewSupplementalContentEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ViewSupplementalContentEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ViewSupplementalContentEvent.eventData.modify())()
{
  type metadata accessor for ViewSupplementalContentEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ViewSupplementalContentEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ViewSupplementalContentEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_29E730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
}

uint64_t ViewSupplementalContentEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ViewSupplementalContentEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ViewSupplementalContentEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29E858, (uint64_t)&nominal type descriptor for ViewSupplementalContentEvent.Model);
}

uint64_t ViewSupplementalContentEvent.Model.init(contentData:viewSourceData:eventData:)@<X0>(_OWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v7;
  v8 = a1[3];
  *(_OWORD *)(a4 + 32) = a1[2];
  *(_OWORD *)(a4 + 48) = v8;
  v9 = a1[5];
  *(_OWORD *)(a4 + 64) = a1[4];
  *(_OWORD *)(a4 + 80) = v9;
  *(_BYTE *)(a4 + 96) = v6;
  v10 = a4 + *(int *)(type metadata accessor for ViewSupplementalContentEvent.Model(0) + 24);
  v11 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

uint64_t sub_1013F8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x72756F5377656976;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_10146C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_102C68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_101490(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_101694();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1014B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_101694();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ViewSupplementalContentEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  _OWORD v23[6];

  v3 = v1;
  v5 = sub_71B4(&qword_29E738);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_101694();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewSupplementalContentEvent.Model.CodingKeys, &type metadata for ViewSupplementalContentEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v23[0] = *(_OWORD *)v3;
  v23[1] = v12;
  v13 = *(_OWORD *)(v3 + 48);
  v23[2] = *(_OWORD *)(v3 + 32);
  v23[3] = v13;
  v14 = *(_OWORD *)(v3 + 80);
  v23[4] = *(_OWORD *)(v3 + 64);
  v23[5] = v14;
  v22 = 0;
  v15 = sub_17118();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v22, v5, &type metadata for ContentData, v15);
  if (!v2)
  {
    LOBYTE(v23[0]) = *(_BYTE *)(v3 + 96);
    v22 = 1;
    v16 = sub_1016D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v22, v5, &type metadata for ViewSourceData, v16);
    v17 = v3 + *(int *)(type metadata accessor for ViewSupplementalContentEvent.Model(0) + 24);
    LOBYTE(v23[0]) = 2;
    v18 = type metadata accessor for EventData(0);
    v19 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, v23, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_101694()
{
  unint64_t result;

  result = qword_29E740;
  if (!qword_29E740)
  {
    result = swift_getWitnessTable("eS\a", &type metadata for ViewSupplementalContentEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E740);
  }
  return result;
}

unint64_t sub_1016D8()
{
  unint64_t result;

  result = qword_29E748;
  if (!qword_29E748)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewSourceData, &type metadata for ViewSourceData);
    atomic_store(result, (unint64_t *)&qword_29E748);
  }
  return result;
}

uint64_t ViewSupplementalContentEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[6];
  char v39;

  v32 = a2;
  v3 = type metadata accessor for EventData(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_71B4(&qword_29E750);
  v6 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ViewSupplementalContentEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_101694();
  v35 = v8;
  v15 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewSupplementalContentEvent.Model.CodingKeys, &type metadata for ViewSupplementalContentEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(a1);
  v31 = v9;
  v37 = v6;
  v16 = v11;
  v17 = v5;
  v19 = v33;
  v18 = v34;
  v39 = 0;
  v20 = sub_1779C();
  v21 = v35;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &type metadata for ContentData, &v39, v36, &type metadata for ContentData, v20);
  v22 = v38[1];
  v23 = (uint64_t)v16;
  *(_OWORD *)v16 = v38[0];
  *((_OWORD *)v16 + 1) = v22;
  v24 = v38[3];
  *((_OWORD *)v16 + 2) = v38[2];
  *((_OWORD *)v16 + 3) = v24;
  v25 = v38[5];
  *((_OWORD *)v16 + 4) = v38[4];
  *((_OWORD *)v16 + 5) = v25;
  v39 = 1;
  v26 = sub_101A08();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, &type metadata for ViewSourceData, &v39, v36, &type metadata for ViewSourceData, v26);
  v16[96] = v38[0];
  LOBYTE(v38[0]) = 2;
  v27 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  v28 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v38, v36, v18, v27);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v28);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v19 + 32))(v23 + *(int *)(v31 + 24), v17, v18);
  sub_101A4C(v23, v32);
  sub_7DAC(a1);
  return sub_101A90(v23);
}

unint64_t sub_101A08()
{
  unint64_t result;

  result = qword_29E758;
  if (!qword_29E758)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewSourceData, &type metadata for ViewSourceData);
    atomic_store(result, (unint64_t *)&qword_29E758);
  }
  return result;
}

uint64_t sub_101A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ViewSupplementalContentEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_101A90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ViewSupplementalContentEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_101ACC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ViewSupplementalContentEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_101AE0(_QWORD *a1)
{
  return ViewSupplementalContentEvent.Model.encode(to:)(a1);
}

uint64_t sub_101AF4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E700, (uint64_t)sub_10105C, a1);
}

uint64_t sub_101B18@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E718, (uint64_t)sub_10109C, a1);
}

uint64_t sub_101B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_29E730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewSupplementalContentEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29E730);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ViewSupplementalContentEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_29E730);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ViewSupplementalContentEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ViewSupplementalContentEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ViewSupplementalContentEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ViewSupplementalContentEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewSupplementalContentEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10206C);
}

uint64_t sub_10206C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29E730);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ViewSupplementalContentEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10211C);
}

uint64_t sub_10211C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29E730);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1021C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_29E7C8, (uint64_t (*)(void))sub_101A08, (uint64_t (*)(void))sub_1016D8, (uint64_t)&type metadata for ViewSourceData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ViewSupplementalContentEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      v8 = a2[4];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = v8;
      v9 = a2[6];
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v9;
      *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
      *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
      *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
      v10 = a2[11];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v10;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v15 = *(int *)(a3 + 24);
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for ViewSupplementalContentEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[11]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for ViewSupplementalContentEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v9;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t assignWithCopy for ViewSupplementalContentEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  BAEventReporter *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  int v34;
  int v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(BAEventReporter **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v25 = *(_QWORD *)(a2 + 48);
      v26 = *(BAEventReporter **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
      v34 = *(_DWORD *)(a2 + 60);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_DWORD *)(a1 + 60) = v34;
      v35 = *(_DWORD *)(a2 + 68);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 68) = v35;
      *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
      *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
      *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
      *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v36 = *(_QWORD *)(a2 + 88);
      v37 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      sub_4E9F4((_QWORD *)a1);
      v51 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v51;
      v52 = *(_OWORD *)(a2 + 80);
      v54 = *(_OWORD *)(a2 + 32);
      v53 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v52;
      *(_OWORD *)(a1 + 32) = v54;
      *(_OWORD *)(a1 + 48) = v53;
    }
  }
  else if (v7)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v45 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v45;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v46 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v46;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v47 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v47;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
    v48 = *(_DWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_DWORD *)(a1 + 60) = v48;
    v49 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 68) = v49;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v50 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v50;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v50);
  }
  else
  {
    v55 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v55;
    v56 = *(_OWORD *)(a2 + 32);
    v57 = *(_OWORD *)(a2 + 48);
    v58 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v58;
    *(_OWORD *)(a1 + 32) = v56;
    *(_OWORD *)(a1 + 48) = v57;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v59 = *(int *)(a3 + 24);
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v60, v61, v62);
  return a1;
}

uint64_t initializeWithTake for ViewSupplementalContentEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

uint64_t assignWithTake for ViewSupplementalContentEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    sub_4E9F4((_QWORD *)a1);
LABEL_5:
    v40 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v40;
    v41 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v41;
    v42 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v42;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v12;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
LABEL_6:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v43 = a3[6];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewSupplementalContentEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_102940);
}

uint64_t sub_102940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ViewSupplementalContentEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1029D4);
}

uint64_t sub_1029D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_102A48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_205B80;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ViewSupplementalContentEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_102B10 + 4 * byte_205A85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_102B44 + 4 * byte_205A80[v4]))();
}

uint64_t sub_102B44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_102B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x102B54);
  return result;
}

uint64_t sub_102B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x102B68);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_102B6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_102B74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewSupplementalContentEvent.Model.CodingKeys()
{
  return &type metadata for ViewSupplementalContentEvent.Model.CodingKeys;
}

unint64_t sub_102B94()
{
  unint64_t result;

  result = qword_29E898;
  if (!qword_29E898)
  {
    result = swift_getWitnessTable("}S\a", &type metadata for ViewSupplementalContentEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E898);
  }
  return result;
}

unint64_t sub_102BDC()
{
  unint64_t result;

  result = qword_29E8A0;
  if (!qword_29E8A0)
  {
    result = swift_getWitnessTable(byte_205BA4, &type metadata for ViewSupplementalContentEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E8A0);
  }
  return result;
}

unint64_t sub_102C24()
{
  unint64_t result;

  result = qword_29E8A8;
  if (!qword_29E8A8)
  {
    result = swift_getWitnessTable(byte_205BCC, &type metadata for ViewSupplementalContentEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E8A8);
  }
  return result;
}

uint64_t sub_102C68(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x72756F5377656976 && a2 == 0xEE00617461446563)
  {
    v7 = 0xEE00617461446563;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756F5377656976, 0xEE00617461446563, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_102E04(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29E8B0, &enum case for SessionGroup.default(_:));
}

uint64_t static SearchEndEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E8B0, a1);
}

uint64_t sub_102E44(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29E8C8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SearchEndEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E8C8, a1);
}

uint64_t SearchEndEvent.searchEndData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEndEvent(0) + 20);
  v4 = sub_71B4(&qword_29E8E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchEndEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29E970, (uint64_t)&nominal type descriptor for SearchEndEvent);
}

uint64_t SearchEndEvent.searchEndData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEndEvent(0) + 20);
  v4 = sub_71B4(&qword_29E8E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchEndEvent.searchEndData.modify())()
{
  type metadata accessor for SearchEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchEndEvent.searchSuggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEndEvent(0) + 24);
  v4 = sub_71B4(&qword_29E8E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchEndEvent.searchSuggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEndEvent(0) + 24);
  v4 = sub_71B4(&qword_29E8E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchEndEvent.searchSuggestionData.modify())()
{
  type metadata accessor for SearchEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchEndEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEndEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchEndEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEndEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchEndEvent.eventData.modify())()
{
  type metadata accessor for SearchEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchEndEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for SearchEndEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_29E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v6, v11);
}

uint64_t SearchCompleteEvent.Model.searchSuggestionData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t SearchEndEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEndEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchEndEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29EA18, (uint64_t)&nominal type descriptor for SearchEndEvent.Model);
}

uint64_t SearchEndEvent.Model.init(searchData:searchEndData:searchSuggestionData:eventData:)@<X0>(_OWORD *a1@<X0>, char *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *a2;
  v8 = a1[1];
  *(_OWORD *)a5 = *a1;
  *(_OWORD *)(a5 + 16) = v8;
  *(_BYTE *)(a5 + 32) = v7;
  *(_OWORD *)(a5 + 40) = *a3;
  v9 = a5 + *(int *)(type metadata accessor for SearchEndEvent.Model(0) + 28);
  v10 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a4, v10);
}

uint64_t sub_103298()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1032CC + 4 * byte_205CB0[*v0]))(0x6144686372616573, 0xEA00000000006174);
}

uint64_t sub_1032CC()
{
  return 0x6E45686372616573;
}

unint64_t sub_1032F0()
{
  return 0xD000000000000014;
}

uint64_t sub_10330C()
{
  return 0x746144746E657665;
}

uint64_t sub_103328@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_104B04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10334C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_103580();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_103374(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_103580();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchEndEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  _OWORD v22[2];

  v3 = v1;
  v5 = sub_71B4(&qword_29E8F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_103580();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchEndEvent.Model.CodingKeys, &type metadata for SearchEndEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v22[0] = *(_OWORD *)v3;
  v22[1] = v12;
  v21 = 0;
  v13 = sub_8B8F4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for SearchData, v13);
  if (!v2)
  {
    LOBYTE(v22[0]) = *(_BYTE *)(v3 + 32);
    v21 = 1;
    v14 = sub_2C934();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, &type metadata for SearchEndData, v14);
    v22[0] = *(_OWORD *)(v3 + 40);
    v21 = 2;
    v15 = sub_1035C4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for SearchSuggestionData, v15);
    v16 = v3 + *(int *)(type metadata accessor for SearchEndEvent.Model(0) + 28);
    LOBYTE(v22[0]) = 3;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v22, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_103580()
{
  unint64_t result;

  result = qword_29E8F8;
  if (!qword_29E8F8)
  {
    result = swift_getWitnessTable("}R\a", &type metadata for SearchEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29E8F8);
  }
  return result;
}

unint64_t sub_1035C4()
{
  unint64_t result;

  result = qword_29E900;
  if (!qword_29E900)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchSuggestionData, &type metadata for SearchSuggestionData);
    atomic_store(result, (unint64_t *)&qword_29E900);
  }
  return result;
}

void SearchEndEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _OWORD v33[2];
  char v34;

  v27 = a2;
  v28 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_71B4(&qword_29E908);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SearchEndEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v31 = a1;
  sub_7988(a1, v12);
  v14 = sub_103580();
  v29 = v8;
  v15 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchEndEvent.Model.CodingKeys, &type metadata for SearchEndEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v31);
  }
  else
  {
    v26 = v9;
    v32 = v5;
    v16 = v28;
    v34 = 0;
    v17 = sub_8BF70();
    v19 = v29;
    v18 = v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &type metadata for SearchData, &v34, v30, &type metadata for SearchData, v17);
    v20 = v33[1];
    *(_OWORD *)v11 = v33[0];
    *((_OWORD *)v11 + 1) = v20;
    v34 = 1;
    v21 = sub_2C8EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v33, &type metadata for SearchEndData, &v34, v18, &type metadata for SearchEndData, v21);
    v11[32] = v33[0];
    v34 = 2;
    v22 = sub_103908();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &type metadata for SearchSuggestionData, &v34, v18, &type metadata for SearchSuggestionData, v22);
    *(_OWORD *)(v11 + 40) = v33[0];
    LOBYTE(v33[0]) = 3;
    v23 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v24 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v16, v33, v18, v16, v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v26 + 28)], v24, v16);
    sub_10394C((uint64_t)v11, v27);
    sub_7DAC(v31);
    sub_103990((uint64_t)v11);
  }
}

unint64_t sub_103908()
{
  unint64_t result;

  result = qword_29E910;
  if (!qword_29E910)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchSuggestionData, &type metadata for SearchSuggestionData);
    atomic_store(result, (unint64_t *)&qword_29E910);
  }
  return result;
}

uint64_t sub_10394C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchEndEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_103990(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchEndEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1039CC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchEndEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1039E0(_QWORD *a1)
{
  return SearchEndEvent.Model.encode(to:)(a1);
}

uint64_t sub_1039F4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29E8B0, (uint64_t)sub_102E04, a1);
}

uint64_t sub_103A18@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29E8C8, (uint64_t)sub_102E44, a1);
}

uint64_t sub_103A3C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_29E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v7, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchEndEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_29A1E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29E8E0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29E8E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for SearchEndEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_29E8E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for SearchEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for SearchEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for SearchEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for SearchEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchEndEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1040B8);
}

uint64_t sub_1040B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29E8E0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29E8E8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchEndEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_104190);
}

uint64_t sub_104190(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_29A1E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29E8E0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29E8E8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_104264(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_29A2C8, (uint64_t (*)(void))sub_8BF70, (uint64_t (*)(void))sub_8B8F4, (uint64_t)&type metadata for SearchData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_29E980, (uint64_t (*)(void))sub_2C8EC, (uint64_t (*)(void))sub_2C934, (uint64_t)&type metadata for SearchEndData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_29E988, (uint64_t (*)(void))sub_103908, (uint64_t (*)(void))sub_1035C4, (uint64_t)&type metadata for SearchSuggestionData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SearchEndEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
    }
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    v11 = a2[6];
    *(_QWORD *)(a1 + 48) = v11;
    v12 = *(int *)(a3 + 28);
    v13 = a1 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for EventData(0);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v11);
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for SearchEndEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[3]);
  }
  swift_bridgeObjectRelease(a1[6]);
  v5 = (char *)a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SearchEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for SearchEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  BAEventReporter *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *(BAEventReporter **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      sub_926C0(a1);
      v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
    }
  }
  else if (v7)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v25 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v26 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v26;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v28;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v29 = *(_QWORD *)(a2 + 48);
  v30 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(int *)(a3 + 28);
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t initializeWithTake for SearchEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SearchEndEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  __int128 v22;
  BAEventReporter *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    sub_926C0(a1);
LABEL_5:
    v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v22;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v12;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v23, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1047D0);
}

uint64_t sub_1047D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for SearchEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_104864);
}

uint64_t sub_104864(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1048D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = " ";
  v4[1] = &unk_205DB0;
  v4[2] = &unk_205DC8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchEndEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1049AC + 4 * byte_205CB9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1049E0 + 4 * byte_205CB4[v4]))();
}

uint64_t sub_1049E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1049E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1049F0);
  return result;
}

uint64_t sub_1049FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x104A04);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_104A08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_104A10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchEndEvent.Model.CodingKeys()
{
  return &type metadata for SearchEndEvent.Model.CodingKeys;
}

unint64_t sub_104A30()
{
  unint64_t result;

  result = qword_29EA58;
  if (!qword_29EA58)
  {
    result = swift_getWitnessTable(byte_205E7C, &type metadata for SearchEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EA58);
  }
  return result;
}

unint64_t sub_104A78()
{
  unint64_t result;

  result = qword_29EA60;
  if (!qword_29EA60)
  {
    result = swift_getWitnessTable(byte_205DEC, &type metadata for SearchEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EA60);
  }
  return result;
}

unint64_t sub_104AC0()
{
  unint64_t result;

  result = qword_29EA68;
  if (!qword_29EA68)
  {
    result = swift_getWitnessTable(byte_205E14, &type metadata for SearchEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EA68);
  }
  return result;
}

uint64_t sub_104B04(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6144686372616573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144686372616573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E45686372616573 && a2 == 0xED00006174614464)
  {
    v7 = 0xED00006174614464;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E45686372616573, 0xED00006174614464, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x80000000002215A0;
    if (a2 == 0x80000000002215A0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000002215A0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_104CF8()
{
  return 0x65756C6156776172;
}

uint64_t sub_104D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_104DA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10513C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_104DCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10513C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Rating.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  uint64_t v14;
  BAEventReporter *v15;
  BOOL v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  BOOL v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  BOOL v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  int64_t v38;
  int64_t v39;
  id v40;
  BOOL v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  BOOL v49;
  const char *v50;
  void *v51;
  void *v52;
  void *v53;
  int64_t v54;
  int64_t v55;
  void *v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  char v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  unint64_t v72;
  uint64_t v73;

  v5 = sub_71B4(&qword_29EA70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_10513C();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Rating.Key, &type metadata for Rating.Key, v11, v9, v10);
  if (!v2)
  {
    v14 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v13;
    v16 = v14 == 0x6E776F6E6B6E75 && v13 == (BAEventReporter *)0xE700000000000000;
    if (v16
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E776F6E6B6E75, 0xE700000000000000, v14, v13, 0) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
      *a2 = 0;
    }
    else
    {
      v25 = v14 == 49 && v15 == (BAEventReporter *)0xE100000000000000;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(49, 0xE100000000000000, v14, v15, 0) & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_bridgeObjectRelease(v15, v26, v27, v28, v29, v30, v31, v32);
        *a2 = 1;
      }
      else
      {
        v33 = v14 == 50 && v15 == (BAEventReporter *)0xE100000000000000;
        if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(50, 0xE100000000000000, v14, v15, 0) & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          swift_bridgeObjectRelease(v15, v34, v35, v36, v37, v38, v39, v40);
          *a2 = 2;
        }
        else
        {
          v41 = v14 == 51 && v15 == (BAEventReporter *)0xE100000000000000;
          if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)(51, 0xE100000000000000, v14, v15, 0) & 1) != 0)
          {
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            swift_bridgeObjectRelease(v15, v42, v43, v44, v45, v46, v47, v48);
            *a2 = 3;
          }
          else
          {
            v49 = v14 == 52 && v15 == (BAEventReporter *)0xE100000000000000;
            if (v49
              || (_stringCompareWithSmolCheck(_:_:expecting:)(52, 0xE100000000000000, v14, v15, 0) & 1) != 0)
            {
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              swift_bridgeObjectRelease(v15, v57, v58, v59, v60, v61, v62, v63);
              *a2 = 4;
            }
            else
            {
              if (v14 == 53 && v15 == (BAEventReporter *)0xE100000000000000)
              {
                swift_bridgeObjectRelease((BAEventReporter *)0xE100000000000000, v50, v51, v52, v53, v54, v55, v56);
              }
              else
              {
                v64 = _stringCompareWithSmolCheck(_:_:expecting:)(53, 0xE100000000000000, v14, v15, 0);
                swift_bridgeObjectRelease(v15, v65, v66, v67, v68, v69, v70, v71);
                if ((v64 & 1) == 0)
                {
                  v72 = sub_105180();
                  swift_allocError(&type metadata for Rating.CodingError, v72, 0, 0);
                  swift_willThrow();
                  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                  return sub_7DAC(a1);
                }
              }
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              *a2 = 5;
            }
          }
        }
      }
    }
  }
  return sub_7DAC(a1);
}

unint64_t sub_10513C()
{
  unint64_t result;

  result = qword_29EA78;
  if (!qword_29EA78)
  {
    result = swift_getWitnessTable("!R\a", &type metadata for Rating.Key);
    atomic_store(result, (unint64_t *)&qword_29EA78);
  }
  return result;
}

unint64_t sub_105180()
{
  unint64_t result;

  result = qword_29EA80;
  if (!qword_29EA80)
  {
    result = swift_getWitnessTable("9R\a", &type metadata for Rating.CodingError);
    atomic_store(result, (unint64_t *)&qword_29EA80);
  }
  return result;
}

void Rating.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = sub_71B4(&qword_29EA88);
  __chkstk_darwin(v3);
  v4 = *v1;
  v5 = a1[3];
  v6 = a1[4];
  sub_7988(a1, v5);
  v7 = sub_10513C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Rating.Key, &type metadata for Rating.Key, v7, v5, v6);
  __asm { BR              X9 }
}

uint64_t sub_105278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  ((void (*)(uint64_t, unint64_t, uint64_t, uint64_t))KeyedEncodingContainer.encode(_:forKey:))(0x6E776F6E6B6E75, 0xE700000000000000, a3, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
}

BookAnalytics::Rating_optional __swiftcall Rating.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::Rating_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267E70, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t Rating.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_105388 + 4 * byte_205EFA[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_105388()
{
  return 6647407;
}

uint64_t sub_105398()
{
  return 7305076;
}

uint64_t sub_1053A8()
{
  return 0x6565726874;
}

uint64_t sub_1053BC()
{
  return 1920298854;
}

uint64_t sub_1053CC()
{
  return 1702259046;
}

void sub_1053DC(char *a1)
{
  sub_26748(*a1);
}

unint64_t sub_1053EC()
{
  unint64_t result;

  result = qword_29EA90;
  if (!qword_29EA90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Rating, &type metadata for Rating);
    atomic_store(result, (unint64_t *)&qword_29EA90);
  }
  return result;
}

void sub_105430()
{
  char *v0;

  sub_1956D8(*v0);
}

void sub_105438()
{
  __asm { BR              X10 }
}

uint64_t sub_105474(uint64_t a1)
{
  String.hash(into:)(a1, 6647407, 0xE300000000000000);
  return swift_bridgeObjectRelease(0xE300000000000000);
}

void sub_1054DC(uint64_t a1)
{
  char *v1;

  sub_1D3F7C(a1, *v1);
}

BookAnalytics::Rating_optional sub_1054E4(Swift::String *a1)
{
  return Rating.init(rawValue:)(*a1);
}

uint64_t sub_1054F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_105520 + 4 * byte_205F06[*v0]))();
}

void sub_105520(_QWORD *a1@<X8>)
{
  *a1 = 6647407;
  a1[1] = 0xE300000000000000;
}

void sub_105534(_QWORD *a1@<X8>)
{
  *a1 = 7305076;
  a1[1] = 0xE300000000000000;
}

void sub_105548(_QWORD *a1@<X8>)
{
  *a1 = 0x6565726874;
  a1[1] = 0xE500000000000000;
}

void sub_105560(_QWORD *a1@<X8>)
{
  *a1 = 1920298854;
  a1[1] = 0xE400000000000000;
}

void sub_105574(_QWORD *a1@<X8>)
{
  *a1 = 1702259046;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_105588@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Rating.init(from:)(a1, a2);
}

void sub_10559C(_QWORD *a1)
{
  Rating.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for Rating(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1055FC + 4 * byte_205F11[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_105630 + 4 * byte_205F0C[v4]))();
}

uint64_t sub_105630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_105638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x105640);
  return result;
}

uint64_t sub_10564C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x105654);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_105658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_105660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Rating()
{
  return &type metadata for Rating;
}

ValueMetadata *type metadata accessor for Rating.CodingError()
{
  return &type metadata for Rating.CodingError;
}

uint64_t _s13BookAnalytics6RatingO11CodingErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1056D4 + 4 * byte_205F16[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1056F4 + 4 * byte_205F1B[v4]))();
}

_BYTE *sub_1056D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1056F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1056FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_105704(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10570C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_105714(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Rating.Key()
{
  return &type metadata for Rating.Key;
}

unint64_t sub_105734()
{
  unint64_t result;

  result = qword_29EA98;
  if (!qword_29EA98)
  {
    result = swift_getWitnessTable("1R\a", &type metadata for Rating.Key);
    atomic_store(result, (unint64_t *)&qword_29EA98);
  }
  return result;
}

unint64_t sub_10577C()
{
  unint64_t result;

  result = qword_29EAA0;
  if (!qword_29EAA0)
  {
    result = swift_getWitnessTable(byte_206140, &type metadata for Rating.CodingError);
    atomic_store(result, (unint64_t *)&qword_29EAA0);
  }
  return result;
}

unint64_t sub_1057C4()
{
  unint64_t result;

  result = qword_29EAA8;
  if (!qword_29EAA8)
  {
    result = swift_getWitnessTable("9S\a", &type metadata for Rating.Key);
    atomic_store(result, (unint64_t *)&qword_29EAA8);
  }
  return result;
}

unint64_t sub_10580C()
{
  unint64_t result;

  result = qword_29EAB0;
  if (!qword_29EAB0)
  {
    result = swift_getWitnessTable("!S\a", &type metadata for Rating.Key);
    atomic_store(result, (unint64_t *)&qword_29EAB0);
  }
  return result;
}

uint64_t OrientationData.windowHeight.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t OrientationData.windowHeight.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*LayoutOptionData.characterSpacing.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

BookAnalytics::OrientationData __swiftcall OrientationData.init(deviceOrientation:screenHeight:screenWidth:windowHeight:windowWidth:)(BookAnalytics::DeviceOrientation deviceOrientation, Swift::Int32 screenHeight, Swift::Int32 screenWidth, Swift::Int32 windowHeight, Swift::Int32 windowWidth)
{
  uint64_t v5;
  BookAnalytics::OrientationData result;

  *(_BYTE *)v5 = *(_BYTE *)deviceOrientation;
  *(_DWORD *)(v5 + 4) = screenHeight;
  *(_DWORD *)(v5 + 8) = screenWidth;
  *(_DWORD *)(v5 + 12) = windowHeight;
  *(_DWORD *)(v5 + 16) = windowWidth;
  result.windowWidth = screenWidth;
  result.screenWidth = screenHeight;
  result.deviceOrientation = deviceOrientation;
  return result;
}

uint64_t sub_10588C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1058C0 + 4 * byte_2061F8[*v0]))(0xD000000000000011, 0x80000000002208B0);
}

uint64_t sub_1058C0()
{
  return 0x65486E6565726373;
}

uint64_t sub_105920@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10619C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_105944(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_105F00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10596C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_105F00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t OrientationData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v4 = sub_71B4(&qword_29EAB8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_DWORD *)v1 + 1);
  v21 = *((_DWORD *)v1 + 2);
  v22 = v9;
  v10 = *((_DWORD *)v1 + 3);
  v19 = *((_DWORD *)v1 + 4);
  v20 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_105F00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OrientationData.CodingKeys, &type metadata for OrientationData.CodingKeys, v13, v11, v12);
  v28 = v8;
  v27 = 0;
  v14 = sub_CF320();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v4, &type metadata for DeviceOrientation, v14);
  if (!v2)
  {
    v15 = v20;
    v16 = v21;
    v17 = v19;
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v26, v4);
    v25 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v25, v4);
    v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v24, v4);
    v23 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v23, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t OrientationData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v5 = sub_71B4(&qword_29EAC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_105F00();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OrientationData.CodingKeys, &type metadata for OrientationData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v25 = 0;
    v12 = sub_CF364();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v26, &type metadata for DeviceOrientation, &v25, v5, &type metadata for DeviceOrientation, v12);
    v13 = v26;
    v24 = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
    v23 = 2;
    v20 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
    v22 = 3;
    v19 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
    v21 = 4;
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v13;
    v17 = v20;
    *(_DWORD *)(a2 + 4) = v14;
    *(_DWORD *)(a2 + 8) = v17;
    *(_DWORD *)(a2 + 12) = v19;
    *(_DWORD *)(a2 + 16) = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_105D48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OrientationData.init(from:)(a1, a2);
}

uint64_t sub_105D5C(_QWORD *a1)
{
  return OrientationData.encode(to:)(a1);
}

BOOL _s13BookAnalytics15OrientationDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL8 result;
  int v20;
  char v21;
  int v22;

  v2 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  v3 = *((_DWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 3);
  v5 = *((_DWORD *)a1 + 4);
  v7 = *(_DWORD *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 16);
  v11 = 0xE800000000000000;
  v12 = 0x7469617274726F70;
  if (v2 != 1)
  {
    v12 = 0x70616373646E616CLL;
    v11 = 0xE900000000000065;
  }
  if (*a1)
    v13 = v12;
  else
    v13 = 0x6E776F6E6B6E75;
  if (v2)
    v14 = v11;
  else
    v14 = 0xE700000000000000;
  v15 = 0xE800000000000000;
  v16 = 0x7469617274726F70;
  if (*(_BYTE *)a2 != 1)
  {
    v16 = 0x70616373646E616CLL;
    v15 = 0xE900000000000065;
  }
  if (*(_BYTE *)a2)
    v17 = v16;
  else
    v17 = 0x6E776F6E6B6E75;
  if (*(_BYTE *)a2)
    v18 = v15;
  else
    v18 = 0xE700000000000000;
  if (v13 == v17 && v14 == v18)
  {
    swift_bridgeObjectRelease_n(v14, 2);
    result = 0;
    if (v4 != v7 || v3 != v8 || v6 != v10)
      return result;
    return v5 == v9;
  }
  v22 = *(_DWORD *)(a2 + 16);
  v20 = v5;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v17, v18, 0);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v18);
  result = 0;
  if ((v21 & 1) != 0 && v4 == v7 && v3 == v8)
  {
    v5 = v20;
    v9 = v22;
    if (v6 == v10)
      return v5 == v9;
  }
  return result;
}

unint64_t sub_105F00()
{
  unint64_t result;

  result = qword_29EAC0;
  if (!qword_29EAC0)
  {
    result = swift_getWitnessTable(byte_2063AC, &type metadata for OrientationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EAC0);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for OrientationData(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OrientationData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[20])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OrientationData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrientationData()
{
  return &type metadata for OrientationData;
}

uint64_t storeEnumTagSinglePayload for OrientationData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_106044 + 4 * byte_206202[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_106078 + 4 * byte_2061FD[v4]))();
}

uint64_t sub_106078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_106080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x106088);
  return result;
}

uint64_t sub_106094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10609CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1060A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1060A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OrientationData.CodingKeys()
{
  return &type metadata for OrientationData.CodingKeys;
}

unint64_t sub_1060C8()
{
  unint64_t result;

  result = qword_29EAD0;
  if (!qword_29EAD0)
  {
    result = swift_getWitnessTable(byte_206384, &type metadata for OrientationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EAD0);
  }
  return result;
}

unint64_t sub_106110()
{
  unint64_t result;

  result = qword_29EAD8;
  if (!qword_29EAD8)
  {
    result = swift_getWitnessTable(byte_2062F4, &type metadata for OrientationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EAD8);
  }
  return result;
}

unint64_t sub_106158()
{
  unint64_t result;

  result = qword_29EAE0;
  if (!qword_29EAE0)
  {
    result = swift_getWitnessTable("mR\a", &type metadata for OrientationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EAE0);
  }
  return result;
}

uint64_t sub_10619C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000000002208B0;
    if (a2 == 0x80000000002208B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000002208B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x65486E6565726373 && a2 == 0xEC00000074686769)
  {
    v6 = 0xEC00000074686769;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65486E6565726373, 0xEC00000074686769, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x69576E6565726373 && a2 == 0xEB00000000687464)
  {
    v7 = 0xEB00000000687464;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69576E6565726373, 0xEB00000000687464, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x6548776F646E6977 && a2 == 0xEC00000074686769)
  {
    v8 = 0xEC00000074686769;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6548776F646E6977, 0xEC00000074686769, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x6957776F646E6977 && a2 == 0xEB00000000687464)
  {
    swift_bridgeObjectRelease(0xEB00000000687464);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6957776F646E6977, 0xEB00000000687464, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_106404(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29EAE8, &enum case for SessionGroup.default(_:));
}

uint64_t static MarkAsFinishedEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958E0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29EAE8, a1);
}

uint64_t sub_106444(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29EB00, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static MarkAsFinishedEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958E8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29EB00, a1);
}

uint64_t MarkAsFinishedEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 20);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for MarkAsFinishedEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29EB90, (uint64_t)&nominal type descriptor for MarkAsFinishedEvent);
}

uint64_t MarkAsFinishedEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 20);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MarkAsFinishedEvent.seriesData.modify())()
{
  type metadata accessor for MarkAsFinishedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MarkAsFinishedEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 24);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MarkAsFinishedEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 24);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MarkAsFinishedEvent.suggestionData.modify())()
{
  type metadata accessor for MarkAsFinishedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MarkAsFinishedEvent.markedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 28);
  v4 = sub_71B4(&qword_29EB18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MarkAsFinishedEvent.markedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 28);
  v4 = sub_71B4(&qword_29EB18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MarkAsFinishedEvent.markedData.modify())()
{
  type metadata accessor for MarkAsFinishedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MarkAsFinishedEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MarkAsFinishedEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MarkAsFinishedEvent.eventData.modify())()
{
  type metadata accessor for MarkAsFinishedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MarkAsFinishedEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for MarkAsFinishedEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_29EB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v6, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t UPPContentBrickExposureEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[12];
  v3 = v1[13];
  v4 = v1[14];
  v5 = v1[15];
  v6 = v1[16];
  v7 = v1[17];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

void MarkAsFinishedEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 144);
}

void MarkAsFinishedEvent.Model.markedData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 145);
}

uint64_t MarkAsFinishedEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsFinishedEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for MarkAsFinishedEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29EC38, (uint64_t)&nominal type descriptor for MarkAsFinishedEvent.Model);
}

uint64_t MarkAsFinishedEvent.Model.init(contentData:seriesData:suggestionData:markedData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 77);
  v18 = *a3;
  v19 = *a4;
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_QWORD *)(a6 + 8) = v7;
  *(_BYTE *)(a6 + 16) = v8;
  *(_OWORD *)(a6 + 24) = v9;
  *(_QWORD *)(a6 + 40) = v10;
  *(_QWORD *)(a6 + 48) = v11;
  *(_WORD *)(a6 + 56) = v12;
  *(_DWORD *)(a6 + 60) = v13;
  *(_BYTE *)(a6 + 64) = v14;
  *(_DWORD *)(a6 + 68) = v15;
  *(_BYTE *)(a6 + 72) = v16;
  *(_DWORD *)(a6 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a6 + 77) = v17;
  v20 = *a2;
  v21 = a2[1];
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a6 + 96) = v20;
  v22 = a2[2];
  *(_OWORD *)(a6 + 112) = v21;
  *(_OWORD *)(a6 + 128) = v22;
  *(_BYTE *)(a6 + 144) = v18;
  *(_BYTE *)(a6 + 145) = v19;
  v23 = a6 + *(int *)(type metadata accessor for MarkAsFinishedEvent.Model(0) + 32);
  v24 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a5, v24);
}

uint64_t sub_106A10()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_106A48 + 4 * byte_206400[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_106A48()
{
  return 0x6144736569726573;
}

uint64_t sub_106A98()
{
  return 0x746144746E657665;
}

uint64_t sub_106AB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_108874(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_106AD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_106DAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_106B00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_106DAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MarkAsFinishedEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  __int128 v35;
  _BYTE v36[32];
  uint64_t v37;
  __int16 v38;
  int v39;
  char v40;
  int v41;
  char v42;
  int v43;
  char v44;
  __int128 v45;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29EB20);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_106DAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MarkAsFinishedEvent.Model.CodingKeys, &type metadata for MarkAsFinishedEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v35 = *(_QWORD *)v4;
  *((_QWORD *)&v35 + 1) = v13;
  v36[0] = v14;
  *(_OWORD *)&v36[8] = v15;
  *(_QWORD *)&v36[24] = v16;
  v37 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = *(_DWORD *)(v4 + 73);
  v44 = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v34 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_OWORD *)(v4 + 112);
    v35 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v36 = v25;
    *(_OWORD *)&v36[16] = *(_OWORD *)(v4 + 128);
    v34 = 1;
    v26 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v35, &v34, v6, &type metadata for SeriesData, v26);
    LOBYTE(v35) = *(_BYTE *)(v4 + 144);
    v34 = 2;
    v27 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v35, &v34, v6, &type metadata for SuggestionData, v27);
    LOBYTE(v35) = *(_BYTE *)(v4 + 145);
    v34 = 3;
    v28 = sub_9121C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v35, &v34, v6, &type metadata for MarkedData, v28);
    v29 = v4 + *(int *)(type metadata accessor for MarkAsFinishedEvent.Model(0) + 32);
    LOBYTE(v35) = 4;
    v30 = type metadata accessor for EventData(0);
    v31 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v35, v6, v30, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_106DAC()
{
  unint64_t result;

  result = qword_29EB28;
  if (!qword_29EB28)
  {
    result = swift_getWitnessTable(byte_206624, &type metadata for MarkAsFinishedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EB28);
  }
  return result;
}

void MarkAsFinishedEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[32];
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  int v50;
  char v51;
  int v52;
  char v53;
  __int128 v54;
  char v55;

  v38 = a2;
  v39 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v5 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_71B4(&qword_29EB30);
  v6 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MarkAsFinishedEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v42 = a1;
  sub_7988(a1, v12);
  v14 = sub_106DAC();
  v40 = v8;
  v15 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MarkAsFinishedEvent.Model.CodingKeys, &type metadata for MarkAsFinishedEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v42);
  }
  else
  {
    v37 = v9;
    v43 = v3;
    v16 = v39;
    v55 = 0;
    v17 = sub_1779C();
    v18 = v40;
    v19 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for ContentData, &v55, v41, &type metadata for ContentData, v17);
    v20 = *((_QWORD *)&v44 + 1);
    v21 = v45[0];
    v22 = *(_OWORD *)&v45[8];
    v23 = *(_QWORD *)&v45[24];
    v24 = v46;
    v25 = v47;
    v26 = v48;
    v27 = v49;
    v28 = v50;
    v29 = v51;
    v30 = v53;
    *(_QWORD *)v11 = v44;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = v52;
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v54;
    v55 = 1;
    v31 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, &type metadata for SeriesData, &v55, v19, &type metadata for SeriesData, v31);
    v32 = *(_OWORD *)v45;
    *((_OWORD *)v11 + 6) = v44;
    *((_OWORD *)v11 + 7) = v32;
    *((_OWORD *)v11 + 8) = *(_OWORD *)&v45[16];
    v55 = 2;
    v33 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, &type metadata for SuggestionData, &v55, v19, &type metadata for SuggestionData, v33);
    v11[144] = v44;
    v55 = 3;
    v34 = sub_911D4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, &type metadata for MarkedData, &v55, v19, &type metadata for MarkedData, v34);
    v11[145] = v44;
    LOBYTE(v44) = 4;
    v35 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v44, v19, v16, v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v19);
    (*(void (**)(char *, _QWORD *, uint64_t))(v43 + 32))(&v11[*(int *)(v37 + 32)], v5, v16);
    sub_1071D8((uint64_t)v11, v38);
    sub_7DAC(v42);
    sub_10721C((uint64_t)v11);
  }
}

uint64_t sub_1071D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MarkAsFinishedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10721C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MarkAsFinishedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_107258(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MarkAsFinishedEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_10726C(_QWORD *a1)
{
  return MarkAsFinishedEvent.Model.encode(to:)(a1);
}

uint64_t sub_107280@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958E0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29EAE8, (uint64_t)sub_106404, a1);
}

uint64_t sub_1072A4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958E8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29EB00, (uint64_t)sub_106444, a1);
}

uint64_t sub_1072C8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_29EB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v7, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for MarkAsFinishedEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_29EB18);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for MarkAsFinishedEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_29EB18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for MarkAsFinishedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for MarkAsFinishedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for MarkAsFinishedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for MarkAsFinishedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for MarkAsFinishedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_107A88);
}

uint64_t sub_107A88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296310);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296F78);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_29EB18);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MarkAsFinishedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_107B88);
}

uint64_t sub_107B88(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296310);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296F78);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_29EB18);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_107C84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_29EBA0, (uint64_t (*)(void))sub_911D4, (uint64_t (*)(void))sub_9121C, (uint64_t)&type metadata for MarkedData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MarkAsFinishedEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[17];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if (v12 == 1)
    {
      v13 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v13;
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    }
    else
    {
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_WORD *)(a1 + 121) = *(_WORD *)((char *)a2 + 121);
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v12;
      swift_bridgeObjectRetain(v12);
    }
    *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
    v15 = *(int *)(a3 + 32);
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for MarkAsFinishedEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = a1[17];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for MarkAsFinishedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v11;
    swift_bridgeObjectRetain(v11);
  }
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v13 = *(int *)(a3 + 32);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t assignWithCopy for MarkAsFinishedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  __int128 *v44;
  __int128 *v45;
  BAEventReporter *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v44 = (__int128 *)(a1 + 96);
  v45 = (__int128 *)(a2 + 96);
  v46 = *(BAEventReporter **)(a1 + 136);
  v47 = *(_QWORD *)(a2 + 136);
  if (v46 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v47 == 1)
    {
      v48 = *v45;
      v49 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v49;
      *v44 = v48;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
      *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v52 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 136) = v52;
      swift_bridgeObjectRetain(v52);
    }
  }
  else if (v47 == 1)
  {
    sub_19008(a1 + 96);
    v51 = *(_OWORD *)(a2 + 112);
    v50 = *(_OWORD *)(a2 + 128);
    *v44 = *v45;
    *(_OWORD *)(a1 + 112) = v51;
    *(_OWORD *)(a1 + 128) = v50;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
    *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v53 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v53;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRelease(v46, v54, v55, v56, v57, v58, v59, v60);
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  v61 = *(int *)(a3 + 32);
  v62 = a1 + v61;
  v63 = a2 + v61;
  v64 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  return a1;
}

uint64_t initializeWithTake for MarkAsFinishedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v8 = *(int *)(a3 + 32);
  v9 = a2 + v8;
  v10 = a1 + v8;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, v9, v11);
  return a1;
}

uint64_t assignWithTake for MarkAsFinishedEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  BAEventReporter *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v47 = *(BAEventReporter **)(a1 + 136);
  if (v47 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v48 = *(_QWORD *)(a2 + 136);
    if (v48 != 1)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v48;
      swift_bridgeObjectRelease(v47, v40, v41, v42, v43, v44, v45, v46);
      goto LABEL_6;
    }
    sub_19008(a1 + 96);
  }
  v49 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v49;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
LABEL_6:
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v50 = a3[8];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for MarkAsFinishedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_108544);
}

uint64_t sub_108544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MarkAsFinishedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1085CC);
}

uint64_t sub_1085CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_108640(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = &unk_206518;
  v4[2] = &unk_206530;
  v4[3] = &unk_206548;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MarkAsFinishedEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10871C + 4 * byte_20640A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_108750 + 4 * byte_206405[v4]))();
}

uint64_t sub_108750(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_108758(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x108760);
  return result;
}

uint64_t sub_10876C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x108774);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_108778(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_108780(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MarkAsFinishedEvent.Model.CodingKeys()
{
  return &type metadata for MarkAsFinishedEvent.Model.CodingKeys;
}

unint64_t sub_1087A0()
{
  unint64_t result;

  result = qword_29EC80;
  if (!qword_29EC80)
  {
    result = swift_getWitnessTable(byte_2065FC, &type metadata for MarkAsFinishedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EC80);
  }
  return result;
}

unint64_t sub_1087E8()
{
  unint64_t result;

  result = qword_29EC88;
  if (!qword_29EC88)
  {
    result = swift_getWitnessTable("]Q\a", &type metadata for MarkAsFinishedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EC88);
  }
  return result;
}

unint64_t sub_108830()
{
  unint64_t result;

  result = qword_29EC90;
  if (!qword_29EC90)
  {
    result = swift_getWitnessTable("EQ\a", &type metadata for MarkAsFinishedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EC90);
  }
  return result;
}

uint64_t sub_108874(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v8 = 0xEE00617461446E6FLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x614464656B72616DLL && a2 == 0xEA00000000006174)
  {
    v9 = 0xEA00000000006174;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614464656B72616DLL, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_108AF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 16, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_108B4C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t ExposureCollector.__allocating_init()()
{
  uint64_t v0;
  uint64_t result;

  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t ExposureCollector.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t ExposureCollector.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t ExposureCollector.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

void sub_108C00(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t EnvironmentValues.exposureCollector.getter()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_108C40();
  EnvironmentValues.subscript.getter(&v2, &type metadata for ExposureCollectorKey, &type metadata for ExposureCollectorKey, v0);
  return v2;
}

unint64_t sub_108C40()
{
  unint64_t result;

  result = qword_29EC98;
  if (!qword_29EC98)
  {
    result = swift_getWitnessTable(byte_2066F8, &type metadata for ExposureCollectorKey);
    atomic_store(result, (unint64_t *)&qword_29EC98);
  }
  return result;
}

_QWORD *sub_108C84@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_108C40();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for ExposureCollectorKey, &type metadata for ExposureCollectorKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_108CD0(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_108C40();
  swift_retain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for ExposureCollectorKey, &type metadata for ExposureCollectorKey, v1);
}

void View.exposureCollecting(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *KeyPath;
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  int64_t v11;
  id v12;
  BOOL v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  int64_t v18;
  id v19;
  BOOL v20;
  id v21;
  BAEventReporter *v22;
  BAEventReporter *v23;

  KeyPath = (BAEventReporter *)swift_getKeyPath(&unk_206680);
  v6 = type metadata accessor for ExposureCollector();
  BaseObjectGraph.inject<A>(_:)(&v23, v6, v6);
  v7 = v23;
  v22 = v23;
  View.environment<A>(_:_:)(KeyPath, &v22, a2, a3);
  swift_release(v7, v8, v9, v10, v11, v12, v13, v14);
  swift_release(KeyPath, v15, v16, v17, v18, v19, v20, v21);
}

_QWORD *sub_108DCC@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_108C40();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for ExposureCollectorKey, &type metadata for ExposureCollectorKey, v2);
  *a1 = v4;
  return result;
}

uint64_t type metadata accessor for ExposureCollector()
{
  return objc_opt_self(_TtC13BookAnalytics17ExposureCollector);
}

uint64_t sub_108E3C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 16, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 16);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t method lookup function for ExposureCollector(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ExposureCollector);
}

uint64_t dispatch thunk of ExposureCollector.storage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t sub_108EA0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_679EC(&qword_29ED60);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v6[0] = v2;
  v6[1] = sub_108F00();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v6);
}

unint64_t sub_108F00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_29ED68;
  if (!qword_29ED68)
  {
    v1 = sub_679EC(&qword_29ED60);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_29ED68);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExposureCollectorKey()
{
  return &type metadata for ExposureCollectorKey;
}

uint64_t sub_108F5C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29ED70, &enum case for SessionGroup.default(_:));
}

uint64_t static SearchCompleteEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29ED70, a1);
}

uint64_t sub_108F9C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29ED88, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SearchCompleteEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2958F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29ED88, a1);
}

uint64_t SearchCompleteEvent.searchMethodData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 20);
  v4 = sub_71B4(&qword_29EDA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchCompleteEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29EE30, (uint64_t)&nominal type descriptor for SearchCompleteEvent);
}

uint64_t SearchCompleteEvent.searchMethodData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 20);
  v4 = sub_71B4(&qword_29EDA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchCompleteEvent.searchMethodData.modify())()
{
  type metadata accessor for SearchCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchCompleteEvent.searchSuggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 24);
  v4 = sub_71B4(&qword_29E8E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchCompleteEvent.searchSuggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 24);
  v4 = sub_71B4(&qword_29E8E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchCompleteEvent.searchSuggestionData.modify())()
{
  type metadata accessor for SearchCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchCompleteEvent.searchSuggestionSelectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 28);
  v4 = sub_71B4(&qword_29EDA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchCompleteEvent.searchSuggestionSelectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 28);
  v4 = sub_71B4(&qword_29EDA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchCompleteEvent.searchSuggestionSelectionData.modify())()
{
  type metadata accessor for SearchCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchCompleteEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchCompleteEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchCompleteEvent.eventData.modify())()
{
  type metadata accessor for SearchCompleteEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchCompleteEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for SearchCompleteEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_29EDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v6, v13);
}

uint64_t SearchCompleteEvent.Model.searchSuggestionSelectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_DWORD *)(v1 + 72);
  v4 = *(_BYTE *)(v1 + 76);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t SearchCompleteEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchCompleteEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchCompleteEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29EEE0, (uint64_t)&nominal type descriptor for SearchCompleteEvent.Model);
}

uint64_t SearchCompleteEvent.Model.init(searchData:searchMethodData:searchSuggestionData:searchSuggestionSelectionData:eventData:)@<X0>(_OWORD *a1@<X0>, char *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  int v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *a2;
  v9 = *(_DWORD *)(a4 + 16);
  v10 = *(_BYTE *)(a4 + 20);
  v11 = a1[1];
  *(_OWORD *)a6 = *a1;
  *(_OWORD *)(a6 + 16) = v11;
  *(_BYTE *)(a6 + 32) = v8;
  *(_OWORD *)(a6 + 40) = *a3;
  *(_OWORD *)(a6 + 56) = *(_OWORD *)a4;
  *(_BYTE *)(a6 + 76) = v10;
  *(_DWORD *)(a6 + 72) = v9;
  v12 = a6 + *(int *)(type metadata accessor for SearchCompleteEvent.Model(0) + 32);
  v13 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a5, v13);
}

uint64_t sub_109504(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10953C + 4 * byte_206730[a1]))(0x6144686372616573, 0xEA00000000006174);
}

unint64_t sub_10953C()
{
  return 0xD000000000000010;
}

unint64_t sub_109558()
{
  return 0xD000000000000014;
}

uint64_t sub_109594()
{
  return 0x746144746E657665;
}

uint64_t sub_1095B0()
{
  unsigned __int8 *v0;

  return sub_109504(*v0);
}

uint64_t sub_1095B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10B10C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1095DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_109860();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_109604(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_109860();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchCompleteEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;

  v3 = v1;
  v5 = sub_71B4(&qword_29EDB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_109860();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchCompleteEvent.Model.CodingKeys, &type metadata for SearchCompleteEvent.Model.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v25 = *v3;
  v26 = v12;
  v24 = 0;
  v13 = sub_8B8F4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v24, v5, &type metadata for SearchData, v13);
  if (!v2)
  {
    LOBYTE(v25) = *((_BYTE *)v3 + 32);
    v24 = 1;
    v14 = sub_B6BE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, &type metadata for SearchMethodData, v14);
    v25 = *(__int128 *)((char *)v3 + 40);
    v24 = 2;
    v15 = sub_1035C4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v24, v5, &type metadata for SearchSuggestionData, v15);
    v16 = *((_DWORD *)v3 + 18);
    v17 = *((_BYTE *)v3 + 76);
    v25 = *(__int128 *)((char *)v3 + 56);
    BYTE4(v26) = v17;
    LODWORD(v26) = v16;
    v24 = 3;
    v18 = sub_1098A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v24, v5, &type metadata for SearchSuggestionSelectionData, v18);
    v19 = (uint64_t)v3 + *(int *)(type metadata accessor for SearchCompleteEvent.Model(0) + 32);
    LOBYTE(v25) = 4;
    v20 = type metadata accessor for EventData(0);
    v21 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v25, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_109860()
{
  unint64_t result;

  result = qword_29EDB8;
  if (!qword_29EDB8)
  {
    result = swift_getWitnessTable(byte_206954, &type metadata for SearchCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EDB8);
  }
  return result;
}

unint64_t sub_1098A4()
{
  unint64_t result;

  result = qword_29EDC0;
  if (!qword_29EDC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchSuggestionSelectionData, &type metadata for SearchSuggestionSelectionData);
    atomic_store(result, (unint64_t *)&qword_29EDC0);
  }
  return result;
}

void SearchCompleteEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;

  v29 = a2;
  v30 = type metadata accessor for EventData(0);
  v28 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v4 = (uint64_t *)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_71B4(&qword_29EDC8);
  v5 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SearchCompleteEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_109860();
  v31 = v7;
  v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchCompleteEvent.Model.CodingKeys, &type metadata for SearchCompleteEvent.Model.CodingKeys, v13, v11, v12);
  if (v14)
  {
    sub_7DAC(a1);
  }
  else
  {
    v33 = v8;
    v15 = v5;
    v16 = v30;
    v17 = (uint64_t)v10;
    v36 = 0;
    v18 = sub_8BF70();
    v19 = v31;
    v20 = v32;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v34, &type metadata for SearchData, &v36, v32, &type metadata for SearchData, v18);
    v21 = v35;
    *(_OWORD *)v17 = v34;
    *(_OWORD *)(v17 + 16) = v21;
    v36 = 1;
    v22 = sub_B6B98();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for SearchMethodData, &v36, v20, &type metadata for SearchMethodData, v22);
    *(_BYTE *)(v17 + 32) = v34;
    v36 = 2;
    v23 = sub_103908();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v34, &type metadata for SearchSuggestionData, &v36, v20, &type metadata for SearchSuggestionData, v23);
    *(_OWORD *)(v17 + 40) = v34;
    v36 = 3;
    v24 = sub_109C80();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v34, &type metadata for SearchSuggestionSelectionData, &v36, v20, &type metadata for SearchSuggestionSelectionData, v24);
    v25 = v35;
    v26 = BYTE4(v35);
    *(_OWORD *)(v17 + 56) = v34;
    *(_BYTE *)(v17 + 76) = v26;
    *(_DWORD *)(v17 + 72) = v25;
    LOBYTE(v34) = 4;
    v27 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v16, &v34, v20, v16, v27);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v32);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v28 + 32))(v17 + *(int *)(v33 + 32), v4, v16);
    sub_109CC4(v17, v29);
    sub_7DAC(a1);
    sub_109D08(v17);
  }
}

unint64_t sub_109C80()
{
  unint64_t result;

  result = qword_29EDD0;
  if (!qword_29EDD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchSuggestionSelectionData, &type metadata for SearchSuggestionSelectionData);
    atomic_store(result, (unint64_t *)&qword_29EDD0);
  }
  return result;
}

uint64_t sub_109CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchCompleteEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_109D08(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchCompleteEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_109D44(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchCompleteEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_109D58(_QWORD *a1)
{
  return SearchCompleteEvent.Model.encode(to:)(a1);
}

uint64_t sub_109D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29ED70, (uint64_t)sub_108F5C, a1);
}

uint64_t sub_109D90@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2958F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29ED88, (uint64_t)sub_108F9C, a1);
}

uint64_t sub_109DB4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_29EDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v7, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchCompleteEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_29A1E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29EDA0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29E8E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_29EDA8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for SearchCompleteEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_29EDA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for SearchCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for SearchCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for SearchCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for SearchCompleteEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29E8E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29EDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCompleteEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10A574);
}

uint64_t sub_10A574(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_29A1E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29EDA0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29E8E8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_29EDA8);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchCompleteEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10A674);
}

uint64_t sub_10A674(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_29A1E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29EDA0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29E8E8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_29EDA8);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10A770(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_29A2C8, (uint64_t (*)(void))sub_8BF70, (uint64_t (*)(void))sub_8B8F4, (uint64_t)&type metadata for SearchData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_29EE40, (uint64_t (*)(void))sub_B6B98, (uint64_t (*)(void))sub_B6BE0, (uint64_t)&type metadata for SearchMethodData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_29E988, (uint64_t (*)(void))sub_103908, (uint64_t (*)(void))sub_1035C4, (uint64_t)&type metadata for SearchSuggestionData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_29EE48, (uint64_t (*)(void))sub_109C80, (uint64_t (*)(void))sub_1098A4, (uint64_t)&type metadata for SearchSuggestionSelectionData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SearchCompleteEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
    }
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    v12 = a2[6];
    v11 = a2[7];
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v11;
    v13 = a2[8];
    *(_QWORD *)(a1 + 64) = v13;
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    LOBYTE(v11) = *((_BYTE *)a2 + 76);
    v14 = *(int *)(a3 + 32);
    v15 = (uint64_t)a2 + v14;
    v16 = a1 + v14;
    *(_BYTE *)(a1 + 76) = v11;
    v17 = type metadata accessor for EventData(0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v18(v16, v15, v17);
  }
  return a1;
}

uint64_t destroy for SearchCompleteEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[3]);
  }
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  v5 = (char *)a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SearchCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  LOBYTE(v9) = *(_BYTE *)(a2 + 76);
  v12 = *(int *)(a3 + 32);
  v13 = a2 + v12;
  v14 = a1 + v12;
  *(_BYTE *)(a1 + 76) = v9;
  v15 = type metadata accessor for EventData(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v16(v14, v13, v15);
  return a1;
}

uint64_t assignWithCopy for SearchCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  BAEventReporter *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  uint64_t v38;
  BAEventReporter *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *(BAEventReporter **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      sub_926C0(a1);
      v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
    }
  }
  else if (v7)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v25 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v26 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v26;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v28;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v29 = *(_QWORD *)(a2 + 48);
  v30 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v38 = *(_QWORD *)(a2 + 64);
  v39 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v47 = *(int *)(a3 + 32);
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  return a1;
}

uint64_t initializeWithTake for SearchCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 32);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_QWORD *)(a1 + 69) = *(_QWORD *)(a2 + 69);
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for SearchCompleteEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  __int128 v22;
  BAEventReporter *v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    sub_926C0(a1);
LABEL_5:
    v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v22;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v12;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v23, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v24 = *(_QWORD *)(a2 + 64);
  v25 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v24;
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v33 = a3[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10ADD0);
}

uint64_t sub_10ADD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for SearchCompleteEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10AE64);
}

uint64_t sub_10AE64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10AED8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = " ";
  v4[1] = &unk_206848;
  v4[2] = &unk_206860;
  v4[3] = &unk_206878;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchCompleteEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10AFB4 + 4 * byte_20673A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10AFE8 + 4 * byte_206735[v4]))();
}

uint64_t sub_10AFE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10AFF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10AFF8);
  return result;
}

uint64_t sub_10B004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10B00CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10B010(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10B018(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchCompleteEvent.Model.CodingKeys()
{
  return &type metadata for SearchCompleteEvent.Model.CodingKeys;
}

unint64_t sub_10B038()
{
  unint64_t result;

  result = qword_29EF28;
  if (!qword_29EF28)
  {
    result = swift_getWitnessTable(byte_20692C, &type metadata for SearchCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF28);
  }
  return result;
}

unint64_t sub_10B080()
{
  unint64_t result;

  result = qword_29EF30;
  if (!qword_29EF30)
  {
    result = swift_getWitnessTable(byte_20689C, &type metadata for SearchCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF30);
  }
  return result;
}

unint64_t sub_10B0C8()
{
  unint64_t result;

  result = qword_29EF38;
  if (!qword_29EF38)
  {
    result = swift_getWitnessTable(byte_2068C4, &type metadata for SearchCompleteEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF38);
  }
  return result;
}

uint64_t sub_10B10C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6144686372616573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144686372616573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000000002215F0;
    if (a2 == 0x80000000002215F0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002215F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000002215A0)
  {
    v8 = 0x80000000002215A0;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000002215A0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000000221610)
  {
    v9 = 0x8000000000221610;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000000221610, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t SearchResultsItemTypeData.positionInSection.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 72);
}

uint64_t SearchResultsItemTypeData.positionInSection.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 72) = result;
  return result;
}

void __swiftcall SearchResultsItemTypeData.init(resultsReturnedStrings:position:contentPrivateID:contentUserID:contentID:positionInSection:section:)(BookAnalytics::SearchResultsItemTypeData *__return_ptr retstr, Swift::String resultsReturnedStrings, Swift::Int32 position, Swift::String contentPrivateID, Swift::String contentUserID, Swift::String contentID, Swift::Int32 positionInSection, Swift::String section)
{
  retstr->resultsReturnedStrings = resultsReturnedStrings;
  retstr->position = position;
  retstr->contentPrivateID = contentPrivateID;
  retstr->contentUserID = contentUserID;
  retstr->contentID = contentID;
  retstr->positionInSection = positionInSection;
  retstr->section = section;
}

uint64_t sub_10B368(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10B3A4 + 4 * byte_2069B0[a1]))(0xD000000000000016, 0x8000000000221630);
}

uint64_t sub_10B3A4()
{
  return 0x6E6F697469736F70;
}

unint64_t sub_10B3BC()
{
  return 0xD000000000000010;
}

uint64_t sub_10B3D8()
{
  return 0x55746E65746E6F63;
}

uint64_t sub_10B3FC()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_10B418()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_10B430()
{
  return 0x6E6F6974636573;
}

uint64_t sub_10B448()
{
  unsigned __int8 *v0;

  return sub_10B368(*v0);
}

uint64_t sub_10B450@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10C0BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10B474(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10BCD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10B49C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10BCD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchResultsItemTypeData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v3 = sub_71B4(&qword_29EF40);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v32 = *((_DWORD *)v1 + 4);
  v9 = v1[3];
  v30 = v1[4];
  v31 = v9;
  v10 = v1[5];
  v28 = v1[6];
  v29 = v10;
  v11 = v1[8];
  v26 = v1[7];
  v27 = v11;
  v25 = *((_DWORD *)v1 + 18);
  v12 = v1[10];
  v23 = v1[11];
  v24 = v12;
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_10BCD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchResultsItemTypeData.CodingKeys, &type metadata for SearchResultsItemTypeData.CodingKeys, v15, v13, v14);
  v40 = 0;
  v16 = v33;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v40, v3);
  if (!v16)
  {
    v17 = v30;
    v18 = v31;
    v20 = v28;
    v19 = v29;
    v39 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v32, &v39, v3);
    v38 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v17, &v38, v3);
    v37 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v37, v3);
    v36 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v36, v3);
    v35 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v35, v3);
    v34 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v23, &v34, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void SearchResultsItemTypeData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  BAEventReporter *v22;
  uint64_t v23;
  BAEventReporter *v24;
  BAEventReporter *v25;
  uint64_t v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  void (*v29)(char *, uint64_t);
  BAEventReporter *v30;
  BAEventReporter *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  BAEventReporter *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  int64_t v65;
  int64_t v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  int64_t v72;
  int64_t v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  int64_t v79;
  int64_t v80;
  id v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BAEventReporter *v87;
  uint64_t v88;
  BAEventReporter *v89;
  BAEventReporter *v90;
  int v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;

  v5 = sub_71B4(&qword_29EF50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_10BCD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchResultsItemTypeData.CodingKeys, &type metadata for SearchResultsItemTypeData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v98 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v98, v5);
    v14 = v13;
    v97 = 1;
    swift_bridgeObjectRetain(v13);
    v91 = KeyedDecodingContainer.decode(_:forKey:)(&v97, v5);
    v96 = 2;
    v88 = KeyedDecodingContainer.decode(_:forKey:)(&v96, v5);
    v95 = 3;
    v90 = v22;
    swift_bridgeObjectRetain(v22);
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v95, v5);
    v89 = v24;
    v85 = v23;
    v94 = 4;
    swift_bridgeObjectRetain(v24);
    v86 = 0;
    v84 = KeyedDecodingContainer.decode(_:forKey:)(&v94, v5);
    v93 = 5;
    v87 = v25;
    swift_bridgeObjectRetain(v25);
    v83 = KeyedDecodingContainer.decode(_:forKey:)(&v93, v5);
    v92 = 6;
    v26 = KeyedDecodingContainer.decode(_:forKey:)(&v92, v5);
    v28 = v27;
    v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    v86 = v26;
    v29(v8, v5);
    swift_bridgeObjectRetain(v14);
    v30 = v90;
    swift_bridgeObjectRetain(v90);
    v31 = v89;
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v14, v32, v33, v34, v35, v36, v37, v38);
    swift_bridgeObjectRelease(v30, v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v31, v46, v47, v48, v49, v50, v51, v52);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v91;
    v53 = v87;
    *(_QWORD *)(a2 + 24) = v88;
    *(_QWORD *)(a2 + 32) = v30;
    *(_QWORD *)(a2 + 40) = v85;
    *(_QWORD *)(a2 + 48) = v31;
    *(_QWORD *)(a2 + 56) = v84;
    *(_QWORD *)(a2 + 64) = v53;
    *(_DWORD *)(a2 + 72) = v83;
    *(_QWORD *)(a2 + 80) = v86;
    *(_QWORD *)(a2 + 88) = v28;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v28, v54, v55, v56, v57, v58, v59, v60);
    swift_bridgeObjectRelease(v53, v61, v62, v63, v64, v65, v66, v67);
    swift_bridgeObjectRelease(v31, v68, v69, v70, v71, v72, v73, v74);
    swift_bridgeObjectRelease(v30, v75, v76, v77, v78, v79, v80, v81);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

void sub_10BAE4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchResultsItemTypeData.init(from:)(a1, a2);
}

uint64_t sub_10BAF8(_QWORD *a1)
{
  return SearchResultsItemTypeData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics25SearchResultsItemTypeDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v24 = a1[11];
  v25 = a1[10];
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 80);
  v26 = *(_DWORD *)(a2 + 72);
  v27 = *((_DWORD *)a1 + 18);
  v30 = a1[8];
  v31 = a1[7];
  v28 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 56);
  if (v4 == *(_QWORD *)a2 && v5 == v11)
  {
    if (v6 != v12)
      return 0;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v11, 0);
    result = 0;
    if ((v17 & 1) == 0 || v6 != v12)
      return result;
  }
  if (v8 == v14 && v7 == v13
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v14, v13, 0), result = 0, (v19 & 1) != 0))
  {
    if (v9 == v16 && v10 == v15
      || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v16, v15, 0), result = 0, (v20 & 1) != 0))
    {
      if (v31 == v29 && v30 == v28)
      {
        if (v27 != v26)
          return 0;
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v30, v29, v28, 0);
        result = 0;
        if ((v21 & 1) == 0 || v27 != v26)
          return result;
      }
      if (v25 == v23 && v24 == v22)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, v23, v22, 0);
    }
  }
  return result;
}

unint64_t sub_10BCD0()
{
  unint64_t result;

  result = qword_29EF48;
  if (!qword_29EF48)
  {
    result = swift_getWitnessTable("iO\a", &type metadata for SearchResultsItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF48);
  }
  return result;
}

uint64_t initializeWithCopy for SearchResultsItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for SearchResultsItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for SearchResultsItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

ValueMetadata *type metadata accessor for SearchResultsItemTypeData()
{
  return &type metadata for SearchResultsItemTypeData;
}

uint64_t storeEnumTagSinglePayload for SearchResultsItemTypeData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10BF64 + 4 * byte_2069BC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10BF98 + 4 * byte_2069B7[v4]))();
}

uint64_t sub_10BF98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10BFA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10BFA8);
  return result;
}

uint64_t sub_10BFB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10BFBCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10BFC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10BFC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchResultsItemTypeData.CodingKeys()
{
  return &type metadata for SearchResultsItemTypeData.CodingKeys;
}

unint64_t sub_10BFE8()
{
  unint64_t result;

  result = qword_29EF58;
  if (!qword_29EF58)
  {
    result = swift_getWitnessTable(byte_206B58, &type metadata for SearchResultsItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF58);
  }
  return result;
}

unint64_t sub_10C030()
{
  unint64_t result;

  result = qword_29EF60;
  if (!qword_29EF60)
  {
    result = swift_getWitnessTable(byte_206AC8, &type metadata for SearchResultsItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF60);
  }
  return result;
}

unint64_t sub_10C078()
{
  unint64_t result;

  result = qword_29EF68;
  if (!qword_29EF68)
  {
    result = swift_getWitnessTable(byte_206AF0, &type metadata for SearchResultsItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF68);
  }
  return result;
}

uint64_t sub_10C0BC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0xD000000000000016)
  {
    v4 = 0x8000000000221630;
    if (a2 == 0x8000000000221630)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000000221630, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697469736F70, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021EBA0;
    if (a2 == 0x800000000021EBA0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EBA0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x55746E65746E6F63 && a2 == 0xED00004449726573)
  {
    v8 = 0xED00004449726573;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55746E65746E6F63, 0xED00004449726573, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x49746E65746E6F63 && a2 == 0xE900000000000044)
  {
    v9 = 0xE900000000000044;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746E65746E6F63, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021ECA0)
  {
    v10 = 0x800000000021ECA0;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021ECA0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0x6E6F6974636573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6974636573, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_10C3B8()
{
  return 0xD000000000000011;
}

uint64_t sub_10C3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10C8C0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10C3FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10C538();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10C424(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10C538();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShareContextData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_71B4(&qword_29EF70);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_10C538();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareContextData.CodingKeys, &type metadata for ShareContextData.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10C538()
{
  unint64_t result;

  result = qword_29EF78;
  if (!qword_29EF78)
  {
    result = swift_getWitnessTable("]O\a", &type metadata for ShareContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF78);
  }
  return result;
}

uint64_t ShareContextData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_71B4(&qword_29EF80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_10C538();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShareContextData.CodingKeys, &type metadata for ShareContextData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

unint64_t sub_10C69C()
{
  unint64_t result;

  result = qword_29EF88;
  if (!qword_29EF88)
  {
    result = swift_getWitnessTable("%P\a", &type metadata for ShareContextData);
    atomic_store(result, (unint64_t *)&qword_29EF88);
  }
  return result;
}

unint64_t sub_10C6E4()
{
  unint64_t result;

  result = qword_29EF90;
  if (!qword_29EF90)
  {
    result = swift_getWitnessTable("\rP\a", &type metadata for ShareContextData);
    atomic_store(result, (unint64_t *)&qword_29EF90);
  }
  return result;
}

uint64_t sub_10C728@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ShareContextData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for ShareContextData()
{
  return &type metadata for ShareContextData;
}

uint64_t storeEnumTagSinglePayload for ShareContextData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10C78C + 4 * byte_206BD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10C7AC + 4 * byte_206BD5[v4]))();
}

_BYTE *sub_10C78C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10C7AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10C7B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10C7BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10C7C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10C7CC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ShareContextData.CodingKeys()
{
  return &type metadata for ShareContextData.CodingKeys;
}

unint64_t sub_10C7EC()
{
  unint64_t result;

  result = qword_29EF98;
  if (!qword_29EF98)
  {
    result = swift_getWitnessTable("\rO\a", &type metadata for ShareContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EF98);
  }
  return result;
}

unint64_t sub_10C834()
{
  unint64_t result;

  result = qword_29EFA0;
  if (!qword_29EFA0)
  {
    result = swift_getWitnessTable(byte_206CBC, &type metadata for ShareContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EFA0);
  }
  return result;
}

unint64_t sub_10C87C()
{
  unint64_t result;

  result = qword_29EFA8;
  if (!qword_29EFA8)
  {
    result = swift_getWitnessTable(byte_206CE4, &type metadata for ShareContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29EFA8);
  }
  return result;
}

uint64_t sub_10C8C0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000000221650)
  {
    swift_bridgeObjectRelease(0x8000000000221650);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000221650, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t static Defaults.analyticsJitterSettingsEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_71B4(&qword_29EFF8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_295900 != -1)
    swift_once(&qword_295900, sub_10CBBC);
  v4 = sub_705C(v0, (uint64_t)qword_29EFB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  UserDefault.wrappedValue.getter(&v7, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v7;
}

uint64_t static Defaults.analyticsJitterSettingsEnabled.setter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v2 = sub_71B4(&qword_29EFF8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_295900 != -1)
    swift_once(&qword_295900, sub_10CBBC);
  v6 = sub_705C(v2, (uint64_t)qword_29EFB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v9 = a1 & 1;
  UserDefault.wrappedValue.setter(&v9, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void (*static Defaults.analyticsJitterSettingsEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_71B4(&qword_29EFF8);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_295900 != -1)
    swift_once(&qword_295900, sub_10CBBC);
  v6 = sub_705C(v3, (uint64_t)qword_29EFB0);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_10CBB8;
}

uint64_t sub_10CBBC()
{
  uint64_t v0;
  id v1;
  char v3;

  v0 = sub_71B4(&qword_29EFF8);
  sub_9260(v0, qword_29EFB0);
  sub_705C(v0, (uint64_t)qword_29EFB0);
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = 0;
  return UserDefault.init(_:defaults:defaultValue:)(0xD000000000000020, 0x80000000002216C0, v1, &v3, &type metadata for Bool);
}

uint64_t static Defaults.analyticsJitterLowBoundValue.getter()
{
  return sub_10CDA4(&qword_295908, (uint64_t)qword_29EFC8, (uint64_t)sub_10CD60);
}

uint64_t static Defaults.analyticsJitterLowBoundValue.setter(uint64_t a1)
{
  return sub_10CE94(a1, &qword_295908, (uint64_t)qword_29EFC8, (uint64_t)sub_10CD60);
}

void (*static Defaults.analyticsJitterLowBoundValue.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_71B4((uint64_t *)&unk_2A0340);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_295908 != -1)
    swift_once(&qword_295908, sub_10CD60);
  v6 = sub_705C(v3, (uint64_t)qword_29EFC8);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_10CBB8;
}

uint64_t sub_10CD60(uint64_t a1)
{
  return sub_10D0BC(a1, qword_29EFC8, -600, 0xD00000000000001ELL, 0x80000000002216A0);
}

uint64_t static Defaults.analyticsJitterUpperBoundValue.getter()
{
  return sub_10CDA4(&qword_295910, (uint64_t)qword_29EFE0, (uint64_t)sub_10D094);
}

uint64_t sub_10CDA4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4((uint64_t *)&unk_2A0340);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != -1)
    swift_once(a1, a3);
  v10 = sub_705C(v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  UserDefault.wrappedValue.getter(&v13, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

uint64_t static Defaults.analyticsJitterUpperBoundValue.setter(uint64_t a1)
{
  return sub_10CE94(a1, &qword_295910, (uint64_t)qword_29EFE0, (uint64_t)sub_10D094);
}

uint64_t sub_10CE94(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4((uint64_t *)&unk_2A0340);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a2 != -1)
    swift_once(a2, a4);
  v12 = sub_705C(v8, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v15 = a1;
  UserDefault.wrappedValue.setter(&v15, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void (*static Defaults.analyticsJitterUpperBoundValue.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_71B4((uint64_t *)&unk_2A0340);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_295910 != -1)
    swift_once(&qword_295910, sub_10D094);
  v6 = sub_705C(v3, (uint64_t)qword_29EFE0);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_10CBB8;
}

void sub_10D040(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t sub_10D094(uint64_t a1)
{
  return sub_10D0BC(a1, qword_29EFE0, 600, 0xD000000000000020, 0x8000000000221670);
}

uint64_t sub_10D0BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  id v10;
  uint64_t v12;

  v9 = sub_71B4((uint64_t *)&unk_2A0340);
  sub_9260(v9, a2);
  sub_705C(v9, (uint64_t)a2);
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v12 = a3;
  return UserDefault.init(_:defaults:defaultValue:)(a4, a5, v10, &v12, &type metadata for Int);
}

ValueMetadata *type metadata accessor for Defaults()
{
  return &type metadata for Defaults;
}

BookAnalytics::TabType_optional __swiftcall TabType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::TabType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267F20, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t TabType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10D200 + 4 * asc_206DD0[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_10D200()
{
  return 0x4E676E6964616572;
}

uint64_t sub_10D224()
{
  return 0x7972617262696CLL;
}

uint64_t sub_10D238()
{
  return 0x726F74736B6F6F62;
}

uint64_t sub_10D254()
{
  return 0x6F6F626F69647561;
}

uint64_t sub_10D270()
{
  return 0x686372616573;
}

uint64_t sub_10D284()
{
  return 0x61676E616DLL;
}

void static TabData.== infix(_:_:)(char *a1)
{
  sub_26270(*a1);
}

unint64_t sub_10D2A8()
{
  unint64_t result;

  result = qword_29F000;
  if (!qword_29F000)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TabType, &type metadata for TabType);
    atomic_store(result, (unint64_t *)&qword_29F000);
  }
  return result;
}

void sub_10D2EC()
{
  char *v0;

  sub_1D4044(0, *v0);
}

void sub_10D2F8()
{
  __asm { BR              X10 }
}

uint64_t sub_10D334(uint64_t a1)
{
  String.hash(into:)(a1, 0x4E676E6964616572, 0xEA0000000000776FLL);
  return swift_bridgeObjectRelease(0xEA0000000000776FLL);
}

void sub_10D3E0(uint64_t a1)
{
  char *v1;

  sub_1D4044(a1, *v1);
}

BookAnalytics::TabType_optional sub_10D3E8(Swift::String *a1)
{
  return TabType.init(rawValue:)(*a1);
}

uint64_t sub_10D3F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10D424 + 4 * byte_206DDE[*v0]))();
}

void sub_10D424(_QWORD *a1@<X8>)
{
  *a1 = 0x4E676E6964616572;
  a1[1] = 0xEA0000000000776FLL;
}

void sub_10D44C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7972617262696CLL;
  a1[1] = v1;
}

void sub_10D464(_QWORD *a1@<X8>)
{
  *a1 = 0x726F74736B6F6F62;
  a1[1] = 0xE900000000000065;
}

void sub_10D484(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6F626F69647561;
  a1[1] = 0xEA0000000000736BLL;
}

void sub_10D4A4(_QWORD *a1@<X8>)
{
  *a1 = 0x686372616573;
  a1[1] = 0xE600000000000000;
}

void sub_10D4BC(_QWORD *a1@<X8>)
{
  *a1 = 0x61676E616DLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_10D4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10D648();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10D530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10D648();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for TabType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10D5C8 + 4 * byte_206DEA[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10D5FC + 4 * byte_206DE5[v4]))();
}

uint64_t sub_10D5FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10D604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10D60CLL);
  return result;
}

uint64_t sub_10D618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10D620);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10D624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10D62C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabType()
{
  return &type metadata for TabType;
}

unint64_t sub_10D648()
{
  unint64_t result;

  result = qword_29F008;
  if (!qword_29F008)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TabType, &type metadata for TabType);
    atomic_store(result, (unint64_t *)&qword_29F008);
  }
  return result;
}

Swift::Void __swiftcall BATracker.popOrientationData()()
{
  uint64_t v0;
  uint64_t v1;
  SEL v2;
  id v3;
  id v4;
  int64_t v5;
  id v6;
  BOOL v7;
  id v8;
  unint64_t v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  swift_retain(v1);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_10E81C((BAEventReporter **)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release((BAEventReporter *)v1, v2, v3, v4, v5, v6, v7, v8);
  v9 = sub_10E8F4();
  Tracker.pop<A>(type:)(&type metadata for OrientationData, &type metadata for OrientationData, v9);
}

Swift::Void __swiftcall BATracker.popSessionListeningData()()
{
  uint64_t v0;
  uint64_t v1;
  SEL v2;
  id v3;
  id v4;
  int64_t v5;
  id v6;
  BOOL v7;
  id v8;
  unint64_t v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  swift_retain(v1);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_10E938((BAEventReporter **)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release((BAEventReporter *)v1, v2, v3, v4, v5, v6, v7, v8);
  v9 = sub_10EA10();
  Tracker.pop<A>(type:)(&type metadata for SessionListeningData, &type metadata for SessionListeningData, v9);
}

Swift::Void __swiftcall BATracker.popSessionReadingData()()
{
  uint64_t v0;
  uint64_t v1;
  SEL v2;
  id v3;
  id v4;
  int64_t v5;
  id v6;
  BOOL v7;
  id v8;
  unint64_t v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  swift_retain(v1);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_10EA54((BAEventReporter **)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release((BAEventReporter *)v1, v2, v3, v4, v5, v6, v7, v8);
  v9 = sub_10EB2C();
  Tracker.pop<A>(type:)(&type metadata for SessionReadingData, &type metadata for SessionReadingData, v9);
}

_QWORD *BATracker.pushLinkData(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  unint64_t v16;
  _OWORD v18[9];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[9];
  uint64_t v31;

  sub_B02A0((uint64_t)&v20);
  v18[6] = v26;
  v18[7] = v27;
  v18[8] = v28;
  v19 = v29;
  v18[2] = v22;
  v18[3] = v23;
  v18[4] = v24;
  v18[5] = v25;
  v18[0] = v20;
  v18[1] = v21;
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  swift_retain(v8);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  v30[6] = v26;
  v30[7] = v27;
  v30[8] = v28;
  v31 = v29;
  v30[2] = v22;
  v30[3] = v23;
  v30[4] = v24;
  v30[5] = v25;
  v30[0] = v20;
  v30[1] = v21;
  sub_12DF98((BAEventReporter **)(v8 + 16), (uint64_t)v30, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
  swift_release((BAEventReporter *)v8, v9, v10, v11, v12, v13, v14, v15);
  v16 = sub_A2754();
  Tracker.push<A>(data:traits:file:line:)(v18, _swiftEmptyArrayStorage, a2, a3, a4, &type metadata for LinkData, v16);
  return sub_2F180(&v20);
}

Swift::Void __swiftcall BATracker.pushOrientationData(file:line:)(Swift::String file, Swift::Int line)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  id v17;
  id v18;
  _BOOL4 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  unint64_t v30;
  _QWORD v31[3];
  char v32[4];
  int v33;
  unint64_t v34;
  int v35;

  object = file._object;
  countAndFlagsBits = file._countAndFlagsBits;
  v6 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v6, "bounds");
  v8 = v7;
  v10 = v9;

  v11 = objc_msgSend((id)objc_opt_self(UIWindow), "_applicationKeyWindow");
  v12 = v10;
  v13 = v8;
  if (v11)
  {
    v14 = v11;
    objc_msgSend(v11, "bounds");
    v13 = v15;
    v12 = v16;

  }
  v17 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v18 = objc_msgSend(v17, "orientation");

  if (v10 <= -2147483650.0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v10 >= 2147483650.0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 <= -2147483650.0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v8 >= 2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v12 <= -2147483650.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v12 >= 2147483650.0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((*(_QWORD *)&v10 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v8 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v12 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v13 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_28;
  }
  if (v13 <= -2147483650.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= 2147483650.0)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v19 = sub_EB838((uint64_t)v18);
  v31[1] = v31;
  if (v19)
    v20 = 2;
  else
    v20 = 1;
  v32[0] = v20;
  v33 = (int)v10;
  LODWORD(v34) = (int)v8;
  HIDWORD(v34) = (int)v12;
  v35 = (int)v13;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
  if (v19)
    v22 = 2;
  else
    v22 = 1;
  swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory));
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 24));
  sub_12E0D0((BAEventReporter **)(v21 + 16), v22 | ((unint64_t)(int)v10 << 32), v34, (int)v13, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 24));
  swift_release((BAEventReporter *)v21, v23, v24, v25, v26, v27, v28, v29);
  v30 = sub_10E8F4();
  Tracker.push<A>(data:traits:file:line:)(v32, _swiftEmptyArrayStorage, countAndFlagsBits, object, line, &type metadata for OrientationData, v30);
}

uint64_t BATracker.pushSessionEndReasonData(with:file:line:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;

  v5 = a1;
  if (a1 >= 4)
  {
    v19 = a1;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedEndReasonType, &v19, &type metadata for BridgedEndReasonType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    LOBYTE(v19) = a1;
    v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
    swift_retain(v9);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
    sub_12E1D8((BAEventReporter **)(v9 + 16), v5, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
    swift_release((BAEventReporter *)v9, v10, v11, v12, v13, v14, v15, v16);
    v17 = sub_10EC48();
    return Tracker.push<A>(data:traits:file:line:)(&v19, _swiftEmptyArrayStorage, a2, a3, a4, &type metadata for SessionEndReasonData, v17);
  }
  return result;
}

uint64_t BATracker.pushSessionListeningData(_:file:line:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;

  v5 = *(_QWORD *)(result + OBJC_IVAR___BASessionListeningData_uniqueAudiobooksListened);
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v5 <= 0x7FFFFFFF)
  {
    v18 = *(_QWORD *)(result + OBJC_IVAR___BASessionListeningData_timeSpentListening);
    v19 = v5;
    v20 = 0;
    v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
    swift_retain(v9);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
    v21 = 0;
    sub_12E204((BAEventReporter **)(v9 + 16), v18, v5, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
    swift_release((BAEventReporter *)v9, v10, v11, v12, v13, v14, v15, v16);
    v17 = sub_10EA10();
    return Tracker.push<A>(data:traits:file:line:)(&v18, _swiftEmptyArrayStorage, a2, a3, a4, &type metadata for SessionListeningData, v17);
  }
  __break(1u);
  return result;
}

uint64_t BATracker.pushSessionReadingData(_:file:line:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v5 = *(_QWORD *)(result + OBJC_IVAR___BASessionReadingData_uniqueBooksRead);
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v5 <= 0x7FFFFFFF)
  {
    v18 = *(_QWORD *)(result + OBJC_IVAR___BASessionReadingData_timeSpentReading);
    v19 = v5;
    v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
    swift_retain(v9);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
    sub_12E2FC((BAEventReporter **)(v9 + 16), v18, v5, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
    swift_release((BAEventReporter *)v9, v10, v11, v12, v13, v14, v15, v16);
    v17 = sub_10EB2C();
    return Tracker.push<A>(data:traits:file:line:)(&v18, _swiftEmptyArrayStorage, a2, a3, a4, &type metadata for SessionReadingData, v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_10E27C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(id, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4, a2);
  v12 = v11;
  v13 = a3;
  v14 = a1;
  a6(v13, v10, v12, a5);

  return swift_bridgeObjectRelease(v12);
}

uint64_t BATracker.pushTabData(with:file:line:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;

  v5 = a1;
  if (a1 >= 7)
  {
    v19 = a1;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedTabType, &v19, &type metadata for BridgedTabType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    LOBYTE(v19) = a1;
    v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory);
    swift_retain(v9);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
    sub_12E3EC((BAEventReporter **)(v9 + 16), v5, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
    swift_release((BAEventReporter *)v9, v10, v11, v12, v13, v14, v15, v16);
    v17 = sub_10EC8C();
    return Tracker.push<A>(data:traits:file:line:)(&v19, _swiftEmptyArrayStorage, a2, a3, a4, &type metadata for TabData, v17);
  }
  return result;
}

uint64_t sub_10E40C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4, a2);
  v12 = v11;
  v13 = a1;
  a6(a3, v10, v12, a5);

  return swift_bridgeObjectRelease(v12);
}

Swift::Void __swiftcall BATracker.submitAppSessionStartEvent()()
{
  uint64_t started;
  uint64_t v1;

  started = type metadata accessor for AppSessionStartEvent(0);
  v1 = sub_7E10(&qword_29F010, type metadata accessor for AppSessionStartEvent, (uint64_t)&protocol conformance descriptor for AppSessionStartEvent);
  Tracker.submit<A>(_:onlyIfTimed:completion:)(started, 0, 0, 0, started, v1);
}

Swift::Void __swiftcall BATracker.timeAppSessionEndEvent()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_71B4(&qword_29F018);
  __chkstk_darwin(v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  sub_10E5F8((uint64_t)v2);
  sub_10ECD0((uint64_t)v2);
}

uint64_t sub_10E5F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_71B4(&qword_29F018);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AppSessionEndEvent(0);
  sub_10EDD4(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10ECD0((uint64_t)v4);
    v10 = sub_7E10(&qword_29F030, type metadata accessor for AppSessionEndEvent, (uint64_t)&protocol conformance descriptor for AppSessionEndEvent);
    return Tracker.time<A>(_:submitAndRestartWithSession:)(v9, 1, v9, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v12 = sub_7E10(&qword_29F030, type metadata accessor for AppSessionEndEvent, (uint64_t)&protocol conformance descriptor for AppSessionEndEvent);
    Tracker.explicitTime<A>(_:startTime:)(v9, v8, v9, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_10E81C(BAEventReporter **a1)
{
  BAEventReporter *v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t isa;
  uint64_t result;
  _QWORD v10[7];
  char v11;

  v10[0] = &type metadata for OrientationData;
  v10[1] = sub_10E8F4();
  v10[2] = sub_10EEA4();
  v11 = 1;
  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1DB8EC(0, (int64_t)v2[1].super.isa + 1, 1, v2, v3, v4, v5, v6);
  isa = (unint64_t)v2[1].super.isa;
  v7 = *(_QWORD *)v2[1].dataProviders;
  if (isa >= v7 >> 1)
    v2 = sub_1DB8EC((BAEventReporter *)(v7 > 1), isa + 1, 1, v2, v3, v4, v5, v6);
  v2[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v10, (uint64_t)&v2[4 * isa + 2]);
  *a1 = v2;
  return result;
}

unint64_t sub_10E8F4()
{
  unint64_t result;

  result = qword_2A0390;
  if (!qword_2A0390)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OrientationData, &type metadata for OrientationData);
    atomic_store(result, (unint64_t *)&qword_2A0390);
  }
  return result;
}

uint64_t sub_10E938(BAEventReporter **a1)
{
  BAEventReporter *v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t isa;
  uint64_t result;
  _QWORD v10[7];
  char v11;

  v10[0] = &type metadata for SessionListeningData;
  v10[1] = sub_10EA10();
  v10[2] = sub_10EE60();
  v11 = 1;
  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1DB8EC(0, (int64_t)v2[1].super.isa + 1, 1, v2, v3, v4, v5, v6);
  isa = (unint64_t)v2[1].super.isa;
  v7 = *(_QWORD *)v2[1].dataProviders;
  if (isa >= v7 >> 1)
    v2 = sub_1DB8EC((BAEventReporter *)(v7 > 1), isa + 1, 1, v2, v3, v4, v5, v6);
  v2[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v10, (uint64_t)&v2[4 * isa + 2]);
  *a1 = v2;
  return result;
}

unint64_t sub_10EA10()
{
  unint64_t result;

  result = qword_2A0370;
  if (!qword_2A0370)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionListeningData, &type metadata for SessionListeningData);
    atomic_store(result, (unint64_t *)&qword_2A0370);
  }
  return result;
}

uint64_t sub_10EA54(BAEventReporter **a1)
{
  BAEventReporter *v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t isa;
  uint64_t result;
  _QWORD v10[7];
  char v11;

  v10[0] = &type metadata for SessionReadingData;
  v10[1] = sub_10EB2C();
  v10[2] = sub_10EE1C();
  v11 = 1;
  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1DB8EC(0, (int64_t)v2[1].super.isa + 1, 1, v2, v3, v4, v5, v6);
  isa = (unint64_t)v2[1].super.isa;
  v7 = *(_QWORD *)v2[1].dataProviders;
  if (isa >= v7 >> 1)
    v2 = sub_1DB8EC((BAEventReporter *)(v7 > 1), isa + 1, 1, v2, v3, v4, v5, v6);
  v2[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v10, (uint64_t)&v2[4 * isa + 2]);
  *a1 = v2;
  return result;
}

unint64_t sub_10EB2C()
{
  unint64_t result;

  result = qword_2A0360;
  if (!qword_2A0360)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionReadingData, &type metadata for SessionReadingData);
    atomic_store(result, (unint64_t *)&qword_2A0360);
  }
  return result;
}

uint64_t sub_10EB70(BAEventReporter **a1)
{
  BAEventReporter *v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t isa;
  uint64_t result;
  _QWORD v10[7];
  char v11;

  v10[0] = &type metadata for BooksTreatmentData;
  v10[1] = sub_10ED10();
  v10[2] = sub_10ED54();
  v11 = 1;
  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1DB8EC(0, (int64_t)v2[1].super.isa + 1, 1, v2, v3, v4, v5, v6);
  isa = (unint64_t)v2[1].super.isa;
  v7 = *(_QWORD *)v2[1].dataProviders;
  if (isa >= v7 >> 1)
    v2 = sub_1DB8EC((BAEventReporter *)(v7 > 1), isa + 1, 1, v2, v3, v4, v5, v6);
  v2[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v10, (uint64_t)&v2[4 * isa + 2]);
  *a1 = v2;
  return result;
}

unint64_t sub_10EC48()
{
  unint64_t result;

  result = qword_2A0380;
  if (!qword_2A0380)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionEndReasonData, &type metadata for SessionEndReasonData);
    atomic_store(result, (unint64_t *)&qword_2A0380);
  }
  return result;
}

unint64_t sub_10EC8C()
{
  unint64_t result;

  result = qword_2A0350;
  if (!qword_2A0350)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TabData, &type metadata for TabData);
    atomic_store(result, (unint64_t *)&qword_2A0350);
  }
  return result;
}

uint64_t sub_10ECD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_29F018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10ED10()
{
  unint64_t result;

  result = qword_29F020;
  if (!qword_29F020)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BooksTreatmentData, &type metadata for BooksTreatmentData);
    atomic_store(result, (unint64_t *)&qword_29F020);
  }
  return result;
}

unint64_t sub_10ED54()
{
  unint64_t result;

  result = qword_29F028;
  if (!qword_29F028)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BooksTreatmentData, &type metadata for BooksTreatmentData);
    atomic_store(result, (unint64_t *)&qword_29F028);
  }
  return result;
}

uint64_t sub_10ED98(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AltContentTypeExposureData(a2, a1);
  return a2;
}

uint64_t sub_10EDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_29F018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10EE1C()
{
  unint64_t result;

  result = qword_29F038;
  if (!qword_29F038)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionReadingData, &type metadata for SessionReadingData);
    atomic_store(result, (unint64_t *)&qword_29F038);
  }
  return result;
}

unint64_t sub_10EE60()
{
  unint64_t result;

  result = qword_29F040;
  if (!qword_29F040)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionListeningData, &type metadata for SessionListeningData);
    atomic_store(result, (unint64_t *)&qword_29F040);
  }
  return result;
}

unint64_t sub_10EEA4()
{
  unint64_t result;

  result = qword_29F048;
  if (!qword_29F048)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OrientationData, &type metadata for OrientationData);
    atomic_store(result, (unint64_t *)&qword_29F048);
  }
  return result;
}

BookAnalytics::SeriesType_optional __swiftcall SeriesType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SeriesType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267FE8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SeriesType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10EF78 + 4 * byte_206F0C[*v0]))(0x65697265536E6F6ELL, 0xE900000000000073);
}

uint64_t sub_10EF78()
{
  return 0x6465726564726FLL;
}

uint64_t sub_10EF90()
{
  return 0x65726564724F6E75;
}

uint64_t sub_10EFAC()
{
  return 0x6E776F6E6B6E75;
}

void sub_10EFC4(char *a1)
{
  sub_2B9F4(*a1);
}

unint64_t sub_10EFD4()
{
  unint64_t result;

  result = qword_29F050;
  if (!qword_29F050)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SeriesType, &type metadata for SeriesType);
    atomic_store(result, (unint64_t *)&qword_29F050);
  }
  return result;
}

void sub_10F018()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10F06C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6465726564726FLL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_10F0E0()
{
  __asm { BR              X10 }
}

uint64_t sub_10F124(uint64_t a1)
{
  String.hash(into:)(a1, 0x6465726564726FLL, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_10F184(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10F1D4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6465726564726FLL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

BookAnalytics::SeriesType_optional sub_10F248(Swift::String *a1)
{
  return SeriesType.init(rawValue:)(*a1);
}

uint64_t sub_10F254()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10F28C + 4 * byte_206F1C[*v0]))();
}

void sub_10F28C(_QWORD *a1@<X8>)
{
  *a1 = 0x6465726564726FLL;
  a1[1] = 0xE700000000000000;
}

void sub_10F2A8(_QWORD *a1@<X8>)
{
  *a1 = 0x65726564724F6E75;
  a1[1] = 0xE900000000000064;
}

void sub_10F2C8(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_10F2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10F458();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10F340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10F458();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SeriesType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10F3D8 + 4 * byte_206F25[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10F40C + 4 * byte_206F20[v4]))();
}

uint64_t sub_10F40C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10F414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10F41CLL);
  return result;
}

uint64_t sub_10F428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10F430);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10F434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10F43C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesType()
{
  return &type metadata for SeriesType;
}

unint64_t sub_10F458()
{
  unint64_t result;

  result = qword_29F058;
  if (!qword_29F058)
  {
    result = swift_getWitnessTable("eO\a", &type metadata for SeriesType);
    atomic_store(result, (unint64_t *)&qword_29F058);
  }
  return result;
}

BookAnalytics::ProductionType_optional __swiftcall ProductionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ProductionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268068, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ProductionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6375646F72506773;
  if (*v0 != 1)
    v1 = 0x6F725047536E6F6ELL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_10F564(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_278C4(*a1, *a2);
}

unint64_t sub_10F574()
{
  unint64_t result;

  result = qword_29F060;
  if (!qword_29F060)
  {
    result = swift_getWitnessTable("}O\a", &type metadata for ProductionType);
    atomic_store(result, (unint64_t *)&qword_29F060);
  }
  return result;
}

Swift::Int sub_10F5B8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEC0000006E6F6974;
  v3 = 0x6375646F72506773;
  if (v1 != 1)
  {
    v3 = 0x6F725047536E6F6ELL;
    v2 = 0xEF6E6F6974637564;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10F66C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEC0000006E6F6974;
  v3 = 0x6375646F72506773;
  if (*v1 != 1)
  {
    v3 = 0x6F725047536E6F6ELL;
    v2 = 0xEF6E6F6974637564;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10F6FC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEC0000006E6F6974;
  v4 = 0x6375646F72506773;
  if (v2 != 1)
  {
    v4 = 0x6F725047536E6F6ELL;
    v3 = 0xEF6E6F6974637564;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::ProductionType_optional sub_10F7AC(Swift::String *a1)
{
  return ProductionType.init(rawValue:)(*a1);
}

void sub_10F7B8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEC0000006E6F6974;
  v5 = 0x6375646F72506773;
  if (v2 != 1)
  {
    v5 = 0x6F725047536E6F6ELL;
    v4 = 0xEF6E6F6974637564;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10F82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10F9A0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10F888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10F9A0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ProductionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10F920 + 4 * byte_207045[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10F954 + 4 * byte_207040[v4]))();
}

uint64_t sub_10F954(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10F95C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10F964);
  return result;
}

uint64_t sub_10F970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10F978);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10F97C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10F984(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProductionType()
{
  return &type metadata for ProductionType;
}

unint64_t sub_10F9A0()
{
  unint64_t result;

  result = qword_29F068;
  if (!qword_29F068)
  {
    result = swift_getWitnessTable("MO\a", &type metadata for ProductionType);
    atomic_store(result, (unint64_t *)&qword_29F068);
  }
  return result;
}

uint64_t sub_10F9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_10FDE4();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.tracker.getter()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_10FA6C();
  EnvironmentValues.subscript.getter(&v2, &type metadata for TrackerKey, &type metadata for TrackerKey, v0);
  return v2;
}

unint64_t sub_10FA6C()
{
  unint64_t result;

  result = qword_29F070;
  if (!qword_29F070)
  {
    result = swift_getWitnessTable(byte_20719C, &type metadata for TrackerKey);
    atomic_store(result, (unint64_t *)&qword_29F070);
  }
  return result;
}

_QWORD *sub_10FAB0@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_10FA6C();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TrackerKey, &type metadata for TrackerKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10FAFC(id *a1)
{
  unint64_t v1;
  id v2;
  id v4;

  v4 = *a1;
  v1 = sub_10FA6C();
  v2 = v4;
  return EnvironmentValues.subscript.setter(&v4, &type metadata for TrackerKey, &type metadata for TrackerKey, v1);
}

uint64_t EnvironmentValues.tracker.setter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = sub_10FA6C();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for TrackerKey, &type metadata for TrackerKey, v1);
}

void (*EnvironmentValues.tracker.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  unint64_t v3;

  a1[2] = v1;
  v3 = sub_10FA6C();
  a1[3] = v3;
  EnvironmentValues.subscript.getter(a1, &type metadata for TrackerKey, &type metadata for TrackerKey, v3);
  return sub_10FBD8;
}

void sub_10FBD8(uint64_t a1, char a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v2 = *(id *)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 24);
  if ((a2 & 1) != 0)
  {
    v6 = v2;
    EnvironmentValues.subscript.setter(v3, &type metadata for TrackerKey, &type metadata for TrackerKey, v4);

  }
  else
  {
    EnvironmentValues.subscript.setter(a1 + 8, &type metadata for TrackerKey, &type metadata for TrackerKey, v4);
  }
}

void View.tracker(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *KeyPath;
  id v7;
  SEL v8;
  id v9;
  id v10;
  int64_t v11;
  id v12;
  BOOL v13;
  id v14;
  void *v15;

  KeyPath = (BAEventReporter *)swift_getKeyPath(&unk_207160);
  v15 = a1;
  v7 = a1;
  View.environment<A>(_:_:)(KeyPath, &v15, a2, a3);

  swift_release(KeyPath, v8, v9, v10, v11, v12, v13, v14);
}

_QWORD *sub_10FCD8@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_10FA6C();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for TrackerKey, &type metadata for TrackerKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10FD28(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_679EC(&qword_29F078);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v6[0] = v2;
  v6[1] = sub_10FD88();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v6);
}

unint64_t sub_10FD88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_29F080;
  if (!qword_29F080)
  {
    v1 = sub_679EC(&qword_29F078);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_29F080);
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackerKey()
{
  return &type metadata for TrackerKey;
}

unint64_t sub_10FDE4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_29F088;
  if (!qword_29F088)
  {
    v1 = sub_679EC(&qword_29F090);
    v2 = sub_10FE48();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_29F088);
  }
  return result;
}

unint64_t sub_10FE48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_29F098;
  if (!qword_29F098)
  {
    v1 = type metadata accessor for BATracker();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_29F098);
  }
  return result;
}

BookAnalytics::DoNotDisturbStatus_optional __swiftcall DoNotDisturbStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DoNotDisturbStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2680D0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

unint64_t sub_10FEEC()
{
  unint64_t result;

  result = qword_29F0A0;
  if (!qword_29F0A0)
  {
    result = swift_getWitnessTable("=O\a", &type metadata for DoNotDisturbStatus);
    atomic_store(result, (unint64_t *)&qword_29F0A0);
  }
  return result;
}

BookAnalytics::DoNotDisturbStatus_optional sub_10FF30(Swift::String *a1)
{
  return DoNotDisturbStatus.init(rawValue:)(*a1);
}

uint64_t sub_10FF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1100B0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10FF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1100B0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for DoNotDisturbStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_110030 + 4 * byte_2071E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_110064 + 4 * byte_2071E0[v4]))();
}

uint64_t sub_110064(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11006C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x110074);
  return result;
}

uint64_t sub_110080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x110088);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_11008C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_110094(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DoNotDisturbStatus()
{
  return &type metadata for DoNotDisturbStatus;
}

unint64_t sub_1100B0()
{
  unint64_t result;

  result = qword_29F0A8;
  if (!qword_29F0A8)
  {
    result = swift_getWitnessTable("\rO\a", &type metadata for DoNotDisturbStatus);
    atomic_store(result, (unint64_t *)&qword_29F0A8);
  }
  return result;
}

uint64_t sub_1100F4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29F0B0, &enum case for SessionGroup.default(_:));
}

uint64_t static ScrubEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295918, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F0B0, a1);
}

uint64_t sub_110134(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29F0C8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ScrubEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295920, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F0C8, a1);
}

uint64_t ScrubEvent.readingSettingsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ScrubEvent(0) + 20);
  v4 = sub_71B4(&qword_299200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ScrubEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29F168, (uint64_t)&nominal type descriptor for ScrubEvent);
}

uint64_t ScrubEvent.readingSettingsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ScrubEvent(0) + 20);
  v4 = sub_71B4(&qword_299200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ScrubEvent.readingSettingsData.modify())()
{
  type metadata accessor for ScrubEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ScrubEvent.scrubData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ScrubEvent(0) + 24);
  v4 = sub_71B4(&qword_29F0E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ScrubEvent.scrubData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ScrubEvent(0) + 24);
  v4 = sub_71B4(&qword_29F0E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ScrubEvent.scrubData.modify())()
{
  type metadata accessor for ScrubEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ScrubEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ScrubEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ScrubEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ScrubEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ScrubEvent.eventData.modify())()
{
  type metadata accessor for ScrubEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ScrubEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ScrubEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_29F0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

uint64_t ScrubEvent.Model.readingSettingsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v1 + 98);
  v4 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  *(_WORD *)a1 = *(_WORD *)(v1 + 96);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 120);
  return swift_bridgeObjectRetain(v3);
}

double ScrubEvent.Model.scrubData.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  double result;

  v2 = *(_DWORD *)(v1 + 136);
  result = *(double *)(v1 + 128);
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

uint64_t ScrubEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ScrubEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ScrubEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29F208, (uint64_t)&nominal type descriptor for ScrubEvent.Model);
}

uint64_t ScrubEvent.Model.init(contentData:readingSettingsData:scrubData:eventData:)@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  char v13;
  int v14;
  char v15;
  char v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_WORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 60);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_DWORD *)(a1 + 68);
  v15 = *(_BYTE *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 77);
  v17 = *a2;
  v18 = *((_BYTE *)a2 + 2);
  v19 = *((_QWORD *)a2 + 1);
  v20 = *((_QWORD *)a2 + 2);
  v21 = *((_DWORD *)a3 + 2);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v6;
  *(_BYTE *)(a5 + 16) = v7;
  *(_OWORD *)(a5 + 24) = v8;
  *(_QWORD *)(a5 + 40) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  *(_WORD *)(a5 + 56) = v11;
  *(_DWORD *)(a5 + 60) = v12;
  *(_BYTE *)(a5 + 64) = v13;
  *(_DWORD *)(a5 + 68) = v14;
  *(_BYTE *)(a5 + 72) = v15;
  *(_DWORD *)(a5 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a5 + 77) = v16;
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_WORD *)(a5 + 96) = v17;
  *(_BYTE *)(a5 + 98) = v18;
  *(_QWORD *)(a5 + 104) = v19;
  *(_QWORD *)(a5 + 112) = v20;
  v22 = *a3;
  *(_QWORD *)(a5 + 120) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a5 + 128) = v22;
  *(_DWORD *)(a5 + 136) = v21;
  v23 = a5 + *(int *)(type metadata accessor for ScrubEvent.Model(0) + 28);
  v24 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a4, v24);
}

uint64_t sub_11061C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_110654 + 4 * byte_207300[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_110654()
{
  return 0xD000000000000013;
}

uint64_t sub_110670()
{
  return 0x7461446275726373;
}

uint64_t sub_11069C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_112158(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1106C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11096C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1106E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11096C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ScrubEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  char v45;
  int v46;
  char v47;
  int v48;
  char v49;
  __int128 v50;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29F0E8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_11096C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScrubEvent.Model.CodingKeys, &type metadata for ScrubEvent.Model.CodingKeys, v12, v10, v11);
  v13 = v4[1];
  v14 = *((_BYTE *)v4 + 16);
  v15 = *(_OWORD *)(v4 + 3);
  v16 = v4[5];
  v17 = v4[6];
  v18 = *((_WORD *)v4 + 28);
  v19 = *((_DWORD *)v4 + 15);
  v20 = *((_BYTE *)v4 + 64);
  v21 = *((_DWORD *)v4 + 17);
  v22 = *((_BYTE *)v4 + 72);
  v23 = *((_BYTE *)v4 + 77);
  v37 = *v4;
  v38 = v13;
  LOBYTE(v39) = v14;
  v40 = v15;
  v41 = v16;
  v42 = v17;
  v43 = v18;
  v44 = v19;
  v45 = v20;
  v46 = v21;
  v47 = v22;
  v48 = *(_DWORD *)((char *)v4 + 73);
  v49 = v23;
  v50 = *((_OWORD *)v4 + 5);
  v36 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *((_BYTE *)v4 + 98);
    v26 = v4[13];
    v27 = v4[14];
    LOWORD(v37) = *((_WORD *)v4 + 48);
    BYTE2(v37) = v25;
    v38 = v26;
    v39 = v27;
    *(_QWORD *)&v40 = v4[15];
    v36 = 1;
    v28 = sub_712A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v6, &type metadata for ReadingSettingsData, v28);
    v29 = *((_DWORD *)v4 + 34);
    v37 = v4[16];
    LODWORD(v38) = v29;
    v36 = 2;
    v30 = sub_1109B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v6, &type metadata for ScrubData, v30);
    v31 = (uint64_t)v4 + *(int *)(type metadata accessor for ScrubEvent.Model(0) + 28);
    LOBYTE(v37) = 3;
    v32 = type metadata accessor for EventData(0);
    v33 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v37, v6, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_11096C()
{
  unint64_t result;

  result = qword_29F0F0;
  if (!qword_29F0F0)
  {
    result = swift_getWitnessTable(byte_2074F4, &type metadata for ScrubEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F0F0);
  }
  return result;
}

unint64_t sub_1109B0()
{
  unint64_t result;

  result = qword_29F0F8;
  if (!qword_29F0F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ScrubData, &type metadata for ScrubData);
    atomic_store(result, (unint64_t *)&qword_29F0F8);
  }
  return result;
}

void ScrubEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  char v55;
  int v56;
  char v57;
  int v58;
  char v59;
  __int128 v60;
  char v61;

  v41 = a2;
  v42 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_71B4(&qword_29F100);
  v6 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ScrubEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v45 = a1;
  sub_7988(a1, v12);
  v14 = sub_11096C();
  v43 = v8;
  v15 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScrubEvent.Model.CodingKeys, &type metadata for ScrubEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v45);
  }
  else
  {
    v46 = v9;
    v16 = v6;
    v17 = v5;
    v18 = v3;
    v19 = v42;
    v61 = 0;
    v20 = sub_1779C();
    v21 = v43;
    v22 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for ContentData, &v61, v44, &type metadata for ContentData, v20);
    v23 = v48;
    v24 = v49;
    v25 = v50;
    v26 = v51;
    v27 = v52;
    v28 = v53;
    v29 = v54;
    v30 = v55;
    v31 = v56;
    v32 = v57;
    v33 = v59;
    *(_QWORD *)v11 = v47;
    *((_QWORD *)v11 + 1) = v23;
    v11[16] = v24;
    *(_OWORD *)(v11 + 24) = v25;
    *((_QWORD *)v11 + 5) = v26;
    *((_QWORD *)v11 + 6) = v27;
    *((_WORD *)v11 + 28) = v28;
    *((_DWORD *)v11 + 15) = v29;
    v11[64] = v30;
    *((_DWORD *)v11 + 17) = v31;
    v11[72] = v32;
    *(_DWORD *)(v11 + 73) = v58;
    v11[77] = v33;
    *((_OWORD *)v11 + 5) = v60;
    v61 = 1;
    v34 = sub_71B30();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for ReadingSettingsData, &v61, v22, &type metadata for ReadingSettingsData, v34);
    v35 = BYTE2(v47);
    v36 = v48;
    v37 = v49;
    *((_WORD *)v11 + 48) = v47;
    v11[98] = v35;
    *((_QWORD *)v11 + 13) = v36;
    *((_QWORD *)v11 + 14) = v37;
    *((_QWORD *)v11 + 15) = v50;
    v61 = 2;
    v38 = sub_110DB0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for ScrubData, &v61, v22, &type metadata for ScrubData, v38);
    v39 = v48;
    *((_QWORD *)v11 + 16) = v47;
    *((_DWORD *)v11 + 34) = v39;
    LOBYTE(v47) = 3;
    v40 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v19, &v47, v22, v19, v40);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v44);
    (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v11[*(int *)(v46 + 28)], v17, v19);
    sub_110DF4((uint64_t)v11, v41);
    sub_7DAC(v45);
    sub_110E38((uint64_t)v11);
  }
}

unint64_t sub_110DB0()
{
  unint64_t result;

  result = qword_29F108;
  if (!qword_29F108)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ScrubData, &type metadata for ScrubData);
    atomic_store(result, (unint64_t *)&qword_29F108);
  }
  return result;
}

uint64_t sub_110DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrubEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_110E38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ScrubEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_110E74(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ScrubEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_110E88(_QWORD *a1)
{
  return ScrubEvent.Model.encode(to:)(a1);
}

uint64_t sub_110E9C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295918, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F0B0, (uint64_t)sub_1100F4, a1);
}

uint64_t sub_110EC0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295920, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F0C8, (uint64_t)sub_110134, a1);
}

uint64_t sub_110EE4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_29F0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ScrubEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_299200);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29F0E0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ScrubEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29F0E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ScrubEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29F0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ScrubEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29F0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ScrubEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29F0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ScrubEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29F0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrubEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11154C);
}

uint64_t sub_11154C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_299200);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29F0E0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ScrubEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_111624);
}

uint64_t sub_111624(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_299200);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29F0E0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1116F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2992E0, (uint64_t (*)(void))sub_71B30, (uint64_t (*)(void))sub_712A4, (uint64_t)&type metadata for ReadingSettingsData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_29F178, (uint64_t (*)(void))sub_110DB0, (uint64_t (*)(void))sub_1109B0, (uint64_t)&type metadata for ScrubData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ScrubEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v16);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
    *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
    v10 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
    v11 = *(int *)(a3 + 28);
    v12 = (uint64_t)a2 + v11;
    v13 = a1 + v11;
    *(_QWORD *)(a1 + 128) = a2[16];
    v14 = type metadata accessor for EventData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15(v13, v12, v14);
  }
  return v3;
}

uint64_t destroy for ScrubEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[14]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ScrubEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v10 = *(int *)(a3 + 28);
  v11 = a2 + v10;
  v12 = a1 + v10;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14(v12, v11, v13);
  return a1;
}

uint64_t assignWithCopy for ScrubEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

uint64_t initializeWithTake for ScrubEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)(a1 + 128) = v8;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for ScrubEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v16;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrubEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_111E30);
}

uint64_t sub_111E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ScrubEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_111EB8);
}

uint64_t sub_111EB8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_111F2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_207400;
  v4[2] = &unk_207418;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrubEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_112000 + 4 * byte_207309[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_112034 + 4 * byte_207304[v4]))();
}

uint64_t sub_112034(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11203C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x112044);
  return result;
}

uint64_t sub_112050(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x112058);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_11205C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_112064(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrubEvent.Model.CodingKeys()
{
  return &type metadata for ScrubEvent.Model.CodingKeys;
}

unint64_t sub_112084()
{
  unint64_t result;

  result = qword_29F248;
  if (!qword_29F248)
  {
    result = swift_getWitnessTable(byte_2074CC, &type metadata for ScrubEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F248);
  }
  return result;
}

unint64_t sub_1120CC()
{
  unint64_t result;

  result = qword_29F250;
  if (!qword_29F250)
  {
    result = swift_getWitnessTable("5N\a", &type metadata for ScrubEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F250);
  }
  return result;
}

unint64_t sub_112114()
{
  unint64_t result;

  result = qword_29F258;
  if (!qword_29F258)
  {
    result = swift_getWitnessTable(byte_207464, &type metadata for ScrubEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F258);
  }
  return result;
}

uint64_t sub_112158(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x800000000021F6D0;
    if (a2 == 0x800000000021F6D0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F6D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x7461446275726373 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446275726373, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_112338(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29F260, &enum case for SessionGroup.default(_:));
}

uint64_t static AllInSeriesViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295928, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F260, a1);
}

uint64_t sub_112378(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29F278, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AllInSeriesViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295930, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F278, a1);
}

uint64_t AllInSeriesViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AllInSeriesViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AllInSeriesViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29F300, (uint64_t)&nominal type descriptor for AllInSeriesViewEvent);
}

uint64_t AllInSeriesViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AllInSeriesViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AllInSeriesViewEvent.eventData.modify())()
{
  type metadata accessor for AllInSeriesViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AllInSeriesViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for AllInSeriesViewEvent(0) + 20);
  v5 = enum case for EventProperty.required<A>(_:);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
}

uint64_t AllInSeriesViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AllInSeriesViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AllInSeriesViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29F390, (uint64_t)&nominal type descriptor for AllInSeriesViewEvent.Model);
}

uint64_t AllInSeriesViewEvent.Model.init(singleCollectionData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_DWORD *)(a3 + 16) = v5;
  v6 = a3 + *(int *)(type metadata accessor for AllInSeriesViewEvent.Model(0) + 20);
  v7 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t sub_1125CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_112788();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1125F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_112788();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AllInSeriesViewEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;
  int v21;

  v3 = v1;
  v5 = sub_71B4(&qword_29F290);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_112788();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AllInSeriesViewEvent.Model.CodingKeys, &type metadata for AllInSeriesViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_DWORD *)v3 + 4);
  v20 = *v3;
  v21 = v12;
  v19 = 0;
  v13 = sub_159A4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v20, &v19, v5, &type metadata for SingleCollectionData, v13);
  if (!v2)
  {
    v14 = (uint64_t)v3 + *(int *)(type metadata accessor for AllInSeriesViewEvent.Model(0) + 20);
    LOBYTE(v20) = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v20, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_112788()
{
  unint64_t result;

  result = qword_29F298;
  if (!qword_29F298)
  {
    result = swift_getWitnessTable("-M\a", &type metadata for AllInSeriesViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F298);
  }
  return result;
}

void AllInSeriesViewEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  char v30;

  v24 = a2;
  v26 = type metadata accessor for EventData(0);
  v23 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_71B4(&qword_29F2A0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AllInSeriesViewEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_112788();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AllInSeriesViewEvent.Model.CodingKeys, &type metadata for AllInSeriesViewEvent.Model.CodingKeys, v13, v12, v11);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v22 = a1;
    v14 = v5;
    v15 = (uint64_t)v10;
    v16 = v25;
    v17 = v26;
    v30 = 0;
    v18 = sub_1595C();
    v19 = v27;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v28, &type metadata for SingleCollectionData, &v30, v27, &type metadata for SingleCollectionData, v18);
    v20 = v29;
    *(_OWORD *)v15 = v28;
    *(_DWORD *)(v15 + 16) = v20;
    LOBYTE(v28) = 1;
    v21 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, &v28, v19, v17, v21);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v19);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v23 + 32))(v15 + *(int *)(v8 + 20), v16, v17);
    sub_112A34(v15, v24);
    sub_7DAC(v22);
    sub_112A78(v15);
  }
}

uint64_t sub_112A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AllInSeriesViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_112A78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AllInSeriesViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_112AB4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AllInSeriesViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_112AC8(_QWORD *a1)
{
  return AllInSeriesViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_112ADC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295928, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F260, (uint64_t)sub_112338, a1);
}

uint64_t sub_112B00@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295930, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F278, (uint64_t)sub_112378, a1);
}

uint64_t sub_112B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

uint64_t getEnumTagSinglePayload for AllInSeriesViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_112BBC);
}

uint64_t sub_112BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_299498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AllInSeriesViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_112C44);
}

uint64_t sub_112C44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_299498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for AllInSeriesViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_112CD4);
}

uint64_t sub_112CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for AllInSeriesViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_112D68);
}

uint64_t sub_112D68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_112DDC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_207620;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AllInSeriesViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_112E9C + 4 * byte_207555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_112ED0 + 4 * byte_207550[v4]))();
}

uint64_t sub_112ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_112ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x112EE0);
  return result;
}

uint64_t sub_112EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x112EF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_112EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_112F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AllInSeriesViewEvent.Model.CodingKeys()
{
  return &type metadata for AllInSeriesViewEvent.Model.CodingKeys;
}

unint64_t sub_112F20()
{
  unint64_t result;

  result = qword_29F3C8;
  if (!qword_29F3C8)
  {
    result = swift_getWitnessTable("EM\a", &type metadata for AllInSeriesViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F3C8);
  }
  return result;
}

unint64_t sub_112F68()
{
  unint64_t result;

  result = qword_29F3D0;
  if (!qword_29F3D0)
  {
    result = swift_getWitnessTable(byte_207644, &type metadata for AllInSeriesViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F3D0);
  }
  return result;
}

unint64_t sub_112FB0()
{
  unint64_t result;

  result = qword_29F3D8;
  if (!qword_29F3D8)
  {
    result = swift_getWitnessTable("uM\a", &type metadata for AllInSeriesViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F3D8);
  }
  return result;
}

uint64_t sub_112FF8()
{
  return 0x657079546C616564;
}

uint64_t sub_113010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x657079546C616564 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657079546C616564, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1130A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11346C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1130CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11346C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DealsData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29F3E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_11346C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DealsData.CodingKeys, &type metadata for DealsData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_1134B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v15, v12, v3, &type metadata for DealType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t DealsData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29F3F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_11346C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DealsData.CodingKeys, &type metadata for DealsData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1134F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v16, &type metadata for DealType, v13, v5, &type metadata for DealType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_11330C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DealsData.init(from:)(a1, a2);
}

uint64_t sub_113320(_QWORD *a1)
{
  return DealsData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics9DealsDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3)
      return 1;
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        v4 = 0xE400000000000000;
        v5 = 1701147238;
      }
      else
      {
        v4 = 0xE700000000000000;
        v5 = 0x6E776F6E6B6E75;
      }
    }
    else
    {
      v5 = 0x6F72446563697270;
      v4 = 0xE900000000000070;
    }
    v6 = 0xE400000000000000;
    v7 = 1701147238;
    if (v3 != 1)
    {
      v7 = 0x6E776F6E6B6E75;
      v6 = 0xE700000000000000;
    }
    if (*a2)
      v8 = v7;
    else
      v8 = 0x6F72446563697270;
    if (*a2)
      v9 = v6;
    else
      v9 = 0xE900000000000070;
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n(v4, 2);
      return 1;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v8, v9, 0);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v9);
    if ((v11 & 1) != 0)
      return 1;
  }
  return 0;
}

unint64_t sub_11346C()
{
  unint64_t result;

  result = qword_29F3E8;
  if (!qword_29F3E8)
  {
    result = swift_getWitnessTable("%M\a", &type metadata for DealsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F3E8);
  }
  return result;
}

unint64_t sub_1134B0()
{
  unint64_t result;

  result = qword_29F3F0;
  if (!qword_29F3F0)
  {
    result = swift_getWitnessTable("\rZ\a", &type metadata for DealType);
    atomic_store(result, (unint64_t *)&qword_29F3F0);
  }
  return result;
}

unint64_t sub_1134F4()
{
  unint64_t result;

  result = qword_29F400;
  if (!qword_29F400)
  {
    result = swift_getWitnessTable("%Z\a", &type metadata for DealType);
    atomic_store(result, (unint64_t *)&qword_29F400);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DealsData(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  if (*a1 <= 3u)
    v6 = 3;
  else
    v6 = *a1;
  v7 = v6 - 4;
  if (*a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DealsData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_11362C + 4 * byte_207751[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_113660 + 4 * byte_20774C[v4]))();
}

uint64_t sub_113660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_113668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x113670);
  return result;
}

uint64_t sub_11367C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x113684);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_113688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_113690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DealsData()
{
  return &type metadata for DealsData;
}

uint64_t storeEnumTagSinglePayload for DealsData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1136EC + 4 * byte_207756[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_11370C + 4 * byte_20775B[v4]))();
}

_BYTE *sub_1136EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_11370C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_113714(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_11371C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_113724(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_11372C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DealsData.CodingKeys()
{
  return &type metadata for DealsData.CodingKeys;
}

unint64_t sub_11374C()
{
  unint64_t result;

  result = qword_29F408;
  if (!qword_29F408)
  {
    result = swift_getWitnessTable(byte_2078C4, &type metadata for DealsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F408);
  }
  return result;
}

unint64_t sub_113794()
{
  unint64_t result;

  result = qword_29F410;
  if (!qword_29F410)
  {
    result = swift_getWitnessTable(byte_207834, &type metadata for DealsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F410);
  }
  return result;
}

unint64_t sub_1137DC()
{
  unint64_t result;

  result = qword_29F418;
  if (!qword_29F418)
  {
    result = swift_getWitnessTable("}M\a", &type metadata for DealsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F418);
  }
  return result;
}

uint64_t sub_113824()
{
  _BYTE *v0;

  if (*v0)
    return 0x7574617453646E65;
  else
    return 0x6174537472617473;
}

uint64_t sub_11386C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_114148(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_113890(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_113D70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1138B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_113D70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DoNotDisturbData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_29F420);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_113D70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DoNotDisturbData.CodingKeys, &type metadata for DoNotDisturbData.CodingKeys, v11, v9, v10);
  v19 = v8;
  v18 = 0;
  v12 = sub_113DB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v4, &type metadata for DoNotDisturbStatus, v12);
  if (!v2)
  {
    v17 = v15;
    v16 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v4, &type metadata for DoNotDisturbStatus, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DoNotDisturbData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v5 = sub_71B4(&qword_29F438);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_113D70();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DoNotDisturbData.CodingKeys, &type metadata for DoNotDisturbData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v18) = 0;
    v12 = sub_113DF8();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v18 + 2), &type metadata for DoNotDisturbStatus, (char *)&v18 + 1, v5, &type metadata for DoNotDisturbStatus, v12);
    v13 = BYTE2(v18);
    v17 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for DoNotDisturbStatus, &v17, v5, &type metadata for DoNotDisturbStatus, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v18;
    *a2 = v13;
    a2[1] = v14;
  }
  return sub_7DAC(a1);
}

uint64_t sub_113BA8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DoNotDisturbData.init(from:)(a1, a2);
}

uint64_t sub_113BBC(_QWORD *a1)
{
  return DoNotDisturbData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics16DoNotDisturbDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = 0x6E776F6E6B6E75;
  v3 = *a1;
  v4 = a1[1];
  v5 = a2[1];
  v6 = 0xE200000000000000;
  v7 = 28271;
  if (v3 != 1)
  {
    v7 = 6710895;
    v6 = 0xE300000000000000;
  }
  if (*a1)
    v8 = v7;
  else
    v8 = 0x6E776F6E6B6E75;
  if (v3)
    v9 = v6;
  else
    v9 = 0xE700000000000000;
  v10 = 0xE200000000000000;
  v11 = 28271;
  if (*a2 != 1)
  {
    v11 = 6710895;
    v10 = 0xE300000000000000;
  }
  if (*a2)
    v12 = v11;
  else
    v12 = 0x6E776F6E6B6E75;
  if (*a2)
    v13 = v10;
  else
    v13 = 0xE700000000000000;
  if (v8 == v12 && v9 == v13)
  {
    swift_bridgeObjectRelease_n(v9, 2);
    goto LABEL_21;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v12, v13, 0);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  v15 = 0;
  if ((v14 & 1) != 0)
  {
LABEL_21:
    v16 = 0xE200000000000000;
    v17 = 28271;
    if (v4 != 1)
    {
      v17 = 6710895;
      v16 = 0xE300000000000000;
    }
    if (v4)
      v18 = v17;
    else
      v18 = 0x6E776F6E6B6E75;
    if (v4)
      v19 = v16;
    else
      v19 = 0xE700000000000000;
    if (v5)
    {
      if (v5 == 1)
      {
        v20 = 0xE200000000000000;
        v2 = 28271;
        if (v18 != 28271)
          goto LABEL_38;
      }
      else
      {
        v20 = 0xE300000000000000;
        v2 = 6710895;
        if (v18 != 6710895)
          goto LABEL_38;
      }
    }
    else
    {
      v20 = 0xE700000000000000;
      if (v18 != 0x6E776F6E6B6E75)
        goto LABEL_38;
    }
    if (v19 == v20)
    {
      v15 = 1;
      v20 = v19;
LABEL_39:
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v20);
      return v15 & 1;
    }
LABEL_38:
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v2, v20, 0);
    goto LABEL_39;
  }
  return v15 & 1;
}

unint64_t sub_113D70()
{
  unint64_t result;

  result = qword_29F428;
  if (!qword_29F428)
  {
    result = swift_getWitnessTable(byte_207AF4, &type metadata for DoNotDisturbData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F428);
  }
  return result;
}

unint64_t sub_113DB4()
{
  unint64_t result;

  result = qword_29F430;
  if (!qword_29F430)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DoNotDisturbStatus, &type metadata for DoNotDisturbStatus);
    atomic_store(result, (unint64_t *)&qword_29F430);
  }
  return result;
}

unint64_t sub_113DF8()
{
  unint64_t result;

  result = qword_29F440;
  if (!qword_29F440)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DoNotDisturbStatus, &type metadata for DoNotDisturbStatus);
    atomic_store(result, (unint64_t *)&qword_29F440);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccountData(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DoNotDisturbData(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_113F24 + 4 * byte_207945[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_113F58 + 4 * byte_207940[v4]))();
}

uint64_t sub_113F58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_113F60(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x113F68);
  return result;
}

uint64_t sub_113F74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x113F7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_113F80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_113F88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DoNotDisturbData()
{
  return &type metadata for DoNotDisturbData;
}

uint64_t storeEnumTagSinglePayload for DoNotDisturbData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_113FF0 + 4 * byte_20794F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_114024 + 4 * byte_20794A[v4]))();
}

uint64_t sub_114024(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11402C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x114034);
  return result;
}

uint64_t sub_114040(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x114048);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_11404C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_114054(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DoNotDisturbData.CodingKeys()
{
  return &type metadata for DoNotDisturbData.CodingKeys;
}

unint64_t sub_114074()
{
  unint64_t result;

  result = qword_29F448;
  if (!qword_29F448)
  {
    result = swift_getWitnessTable(byte_207ACC, &type metadata for DoNotDisturbData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F448);
  }
  return result;
}

unint64_t sub_1140BC()
{
  unint64_t result;

  result = qword_29F450;
  if (!qword_29F450)
  {
    result = swift_getWitnessTable("uM\a", &type metadata for DoNotDisturbData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F450);
  }
  return result;
}

unint64_t sub_114104()
{
  unint64_t result;

  result = qword_29F458;
  if (!qword_29F458)
  {
    result = swift_getWitnessTable("]M\a", &type metadata for DoNotDisturbData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F458);
  }
  return result;
}

uint64_t sub_114148(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6174537472617473 && a2 == 0xEB00000000737574)
  {
    v5 = 0xEB00000000737574;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174537472617473, 0xEB00000000737574, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7574617453646E65 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease(0xE900000000000073);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7574617453646E65, 0xE900000000000073, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void static AutoNightThemeSettingData.== infix(_:_:)(char *a1)
{
  sub_27F4C(*a1);
}

unint64_t sub_114268()
{
  return 0xD000000000000014;
}

uint64_t sub_114284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1148D8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1142AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1143F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1142D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1143F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AutoNightThemeSettingData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29F460);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1143F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AutoNightThemeSettingData.CodingKeys, &type metadata for AutoNightThemeSettingData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_11443C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for AutoNightThemeStatus, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1143F8()
{
  unint64_t result;

  result = qword_29F468;
  if (!qword_29F468)
  {
    result = swift_getWitnessTable(byte_207D00, &type metadata for AutoNightThemeSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F468);
  }
  return result;
}

unint64_t sub_11443C()
{
  unint64_t result;

  result = qword_29F470;
  if (!qword_29F470)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AutoNightThemeStatus, &type metadata for AutoNightThemeStatus);
    atomic_store(result, (unint64_t *)&qword_29F470);
  }
  return result;
}

uint64_t AutoNightThemeSettingData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29F478);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1143F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AutoNightThemeSettingData.CodingKeys, &type metadata for AutoNightThemeSettingData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_11459C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for AutoNightThemeStatus, v13, v5, &type metadata for AutoNightThemeStatus, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_11459C()
{
  unint64_t result;

  result = qword_29F480;
  if (!qword_29F480)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AutoNightThemeStatus, &type metadata for AutoNightThemeStatus);
    atomic_store(result, (unint64_t *)&qword_29F480);
  }
  return result;
}

unint64_t sub_1145E4()
{
  unint64_t result;

  result = qword_29F488;
  if (!qword_29F488)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AutoNightThemeSettingData, &type metadata for AutoNightThemeSettingData);
    atomic_store(result, (unint64_t *)&qword_29F488);
  }
  return result;
}

unint64_t sub_11462C()
{
  unint64_t result;

  result = qword_29F490;
  if (!qword_29F490)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AutoNightThemeSettingData, &type metadata for AutoNightThemeSettingData);
    atomic_store(result, (unint64_t *)&qword_29F490);
  }
  return result;
}

uint64_t sub_114670@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AutoNightThemeSettingData.init(from:)(a1, a2);
}

uint64_t sub_114684(_QWORD *a1)
{
  return AutoNightThemeSettingData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for AutoNightThemeSettingData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1146E4 + 4 * byte_207B55[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_114718 + 4 * byte_207B50[v4]))();
}

uint64_t sub_114718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_114720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x114728);
  return result;
}

uint64_t sub_114734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x11473CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_114740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_114748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoNightThemeSettingData()
{
  return &type metadata for AutoNightThemeSettingData;
}

uint64_t storeEnumTagSinglePayload for AutoNightThemeSettingData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1147A4 + 4 * byte_207B5A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1147C4 + 4 * byte_207B5F[v4]))();
}

_BYTE *sub_1147A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1147C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1147CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1147D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1147DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1147E4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AutoNightThemeSettingData.CodingKeys()
{
  return &type metadata for AutoNightThemeSettingData.CodingKeys;
}

unint64_t sub_114804()
{
  unint64_t result;

  result = qword_29F498;
  if (!qword_29F498)
  {
    result = swift_getWitnessTable(byte_207CD8, &type metadata for AutoNightThemeSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F498);
  }
  return result;
}

unint64_t sub_11484C()
{
  unint64_t result;

  result = qword_29F4A0;
  if (!qword_29F4A0)
  {
    result = swift_getWitnessTable("QM\a", &type metadata for AutoNightThemeSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F4A0);
  }
  return result;
}

unint64_t sub_114894()
{
  unint64_t result;

  result = qword_29F4A8;
  if (!qword_29F4A8)
  {
    result = swift_getWitnessTable("9M\a", &type metadata for AutoNightThemeSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F4A8);
  }
  return result;
}

uint64_t sub_1148D8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000014 && a2 == 0x8000000000220990)
  {
    swift_bridgeObjectRelease(0x8000000000220990);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000220990, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_11495C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29F4B0, &enum case for SessionGroup.default(_:));
}

uint64_t static BrowseStoreViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295938, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F4B0, a1);
}

uint64_t sub_11499C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29F4C8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static BrowseStoreViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295940, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F4C8, a1);
}

uint64_t BrowseStoreViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseStoreViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for BrowseStoreViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29F550, (uint64_t)&nominal type descriptor for BrowseStoreViewEvent);
}

uint64_t BrowseStoreViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseStoreViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrowseStoreViewEvent.timedData.modify())()
{
  type metadata accessor for BrowseStoreViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrowseStoreViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for BrowseStoreViewEvent(0) + 20);
  v5 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t BrowseStoreViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseStoreViewEvent.Model(0) + 20);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for BrowseStoreViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29F5E0, (uint64_t)&nominal type descriptor for BrowseStoreViewEvent.Model);
}

uint64_t BrowseStoreViewEvent.Model.init(eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v7 = a3 + *(int *)(type metadata accessor for BrowseStoreViewEvent.Model(0) + 20);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t sub_114C00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_114DD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_114C28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_114DD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BrowseStoreViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_29F4E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_114DD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BrowseStoreViewEvent.Model.CodingKeys, &type metadata for BrowseStoreViewEvent.Model.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for EventData(0);
  v13 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for BrowseStoreViewEvent.Model(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for TimedData(0);
    v16 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_114DD4()
{
  unint64_t result;

  result = qword_29F4E8;
  if (!qword_29F4E8)
  {
    result = swift_getWitnessTable("QL\a", &type metadata for BrowseStoreViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F4E8);
  }
  return result;
}

uint64_t BrowseStoreViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v26 = a2;
  v28 = type metadata accessor for TimedData(0);
  v25 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_71B4(&qword_29F4F0);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseStoreViewEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_114DD4();
  v31 = v8;
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BrowseStoreViewEvent.Model.CodingKeys, &type metadata for BrowseStoreViewEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(a1);
  v16 = v6;
  v17 = (uint64_t)v11;
  v18 = a1;
  v19 = v27;
  v20 = v28;
  v35 = 0;
  v21 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v30, &v35, v32, v30, v21);
  v33 = v4;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v17, v29, v30);
  v34 = 1;
  v22 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, &v34, v32, v20, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v31, v32);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v17 + *(int *)(v9 + 20), v19, v20);
  sub_1150E8(v17, v26);
  sub_7DAC(v18);
  return sub_11512C(v17);
}

uint64_t sub_1150E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseStoreViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_11512C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseStoreViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_115168@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseStoreViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_11517C(_QWORD *a1)
{
  return BrowseStoreViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_115190@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295938, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F4B0, (uint64_t)sub_11495C, a1);
}

uint64_t sub_1151B4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295940, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F4C8, (uint64_t)sub_11499C, a1);
}

uint64_t getEnumTagSinglePayload for BrowseStoreViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1151E4);
}

uint64_t sub_1151E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_295D70);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D78);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for BrowseStoreViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11526C);
}

uint64_t sub_11526C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_295D70);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D78);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for BrowseStoreViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1152FC);
}

uint64_t sub_1152FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for EventData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for TimedData(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for BrowseStoreViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11537C);
}

uint64_t sub_11537C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for EventData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for TimedData(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t storeEnumTagSinglePayload for BrowseStoreViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_115444 + 4 * byte_207D55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_115478 + 4 * byte_207D50[v4]))();
}

uint64_t sub_115478(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_115480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x115488);
  return result;
}

uint64_t sub_115494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x11549CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1154A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1154A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseStoreViewEvent.Model.CodingKeys()
{
  return &type metadata for BrowseStoreViewEvent.Model.CodingKeys;
}

unint64_t sub_1154C8()
{
  unint64_t result;

  result = qword_29F618;
  if (!qword_29F618)
  {
    result = swift_getWitnessTable("iL\a", &type metadata for BrowseStoreViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F618);
  }
  return result;
}

unint64_t sub_115510()
{
  unint64_t result;

  result = qword_29F620;
  if (!qword_29F620)
  {
    result = swift_getWitnessTable(byte_207E38, &type metadata for BrowseStoreViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F620);
  }
  return result;
}

unint64_t sub_115558()
{
  unint64_t result;

  result = qword_29F628;
  if (!qword_29F628)
  {
    result = swift_getWitnessTable(byte_207E60, &type metadata for BrowseStoreViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F628);
  }
  return result;
}

uint64_t sub_11559C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29F630, &enum case for SessionGroup.default(_:));
}

uint64_t static YearInReviewViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295948, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F630, a1);
}

uint64_t sub_1155DC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29F648, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static YearInReviewViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295950, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F648, a1);
}

uint64_t YearInReviewViewEvent.yIRDetailedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29F660);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t YearInReviewViewEvent.yIRDetailedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29F660);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t YearInReviewViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for YearInReviewViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29F6D8, (uint64_t)&nominal type descriptor for YearInReviewViewEvent);
}

uint64_t YearInReviewViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*YearInReviewViewEvent.eventData.modify())()
{
  type metadata accessor for YearInReviewViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YearInReviewViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t YearInReviewViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*YearInReviewViewEvent.timedData.modify())()
{
  type metadata accessor for YearInReviewViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YearInReviewViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29F660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for YearInReviewViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

void YearInReviewViewEvent.Model.yIRDetailedData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
}

uint64_t YearInReviewViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for YearInReviewViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29F778, (uint64_t)&nominal type descriptor for YearInReviewViewEvent.Model);
}

uint64_t YearInReviewViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for YearInReviewViewEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t YearInReviewViewEvent.Model.init(yIRDetailedData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_BYTE *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_BYTE *)(a4 + 24) = v9;
  v10 = type metadata accessor for YearInReviewViewEvent.Model(0);
  v11 = a4 + *(int *)(v10 + 20);
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  v13 = a4 + *(int *)(v10 + 24);
  v14 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a3, v14);
}

uint64_t sub_115A50()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0x6961746544524979;
}

uint64_t sub_115AC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_117004(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_115AE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_115D1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_115B0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_115D1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t YearInReviewViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;

  v3 = v1;
  v5 = sub_71B4(&qword_29F668);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_115D1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for YearInReviewViewEvent.Model.CodingKeys, &type metadata for YearInReviewViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 8);
  v13 = v3[2];
  v14 = *((_BYTE *)v3 + 24);
  v26 = *v3;
  v27 = v12;
  v28 = v13;
  v29 = v14;
  v25 = 0;
  v15 = sub_79568();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for YIRDetailedData, v15);
  if (!v2)
  {
    v16 = type metadata accessor for YearInReviewViewEvent.Model(0);
    v17 = (uint64_t)v3 + *(int *)(v16 + 20);
    LOBYTE(v26) = 1;
    v18 = type metadata accessor for EventData(0);
    v19 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v26, v5, v18, v19);
    v20 = (uint64_t)v3 + *(int *)(v16 + 24);
    LOBYTE(v26) = 2;
    v21 = type metadata accessor for TimedData(0);
    v22 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v26, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_115D1C()
{
  unint64_t result;

  result = qword_29F670;
  if (!qword_29F670)
  {
    result = swift_getWitnessTable(byte_2080FC, &type metadata for YearInReviewViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F670);
  }
  return result;
}

uint64_t YearInReviewViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;

  v31 = a2;
  v33 = type metadata accessor for TimedData(0);
  v30 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (uint64_t *)((char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = sub_71B4(&qword_29F678);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for YearInReviewViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v14);
  v15 = sub_115D1C();
  v36 = v9;
  v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for YearInReviewViewEvent.Model.CodingKeys, &type metadata for YearInReviewViewEvent.Model.CodingKeys, v15, v14, v13);
  if (v16)
    return sub_7DAC(a1);
  v17 = v35;
  v43 = 0;
  v18 = sub_79520();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for YIRDetailedData, &v43, v37, &type metadata for YIRDetailedData, v18);
  v19 = v40;
  v20 = v41;
  v21 = v42;
  *(_QWORD *)v12 = v39;
  v12[8] = v19;
  *((_QWORD *)v12 + 2) = v20;
  v12[24] = v21;
  LOBYTE(v39) = 1;
  v22 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v17, &v39, v37, v17, v22);
  v23 = v10;
  v24 = *(void (**)(void))(v34 + 32);
  v38 = &v12[*(int *)(v10 + 20)];
  v24();
  LOBYTE(v39) = 2;
  v25 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v27 = v32;
  v26 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v33, &v39, v37, v33, v25);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v36, v37);
  (*(void (**)(char *, _QWORD *, uint64_t))(v30 + 32))(&v12[*(int *)(v23 + 24)], v27, v26);
  sub_116084((uint64_t)v12, v31);
  sub_7DAC(a1);
  return sub_1160C8((uint64_t)v12);
}

uint64_t sub_116084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for YearInReviewViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1160C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for YearInReviewViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_116104@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return YearInReviewViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_116118(_QWORD *a1)
{
  return YearInReviewViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_11612C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295948, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F630, (uint64_t)sub_11559C, a1);
}

uint64_t sub_116150@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295950, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F648, (uint64_t)sub_1155DC, a1);
}

uint64_t sub_116174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29F660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for YearInReviewViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_29F660);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for YearInReviewViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_29F660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for YearInReviewViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29F660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for YearInReviewViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29F660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for YearInReviewViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29F660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for YearInReviewViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29F660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for YearInReviewViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_116698);
}

uint64_t sub_116698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_29F660);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for YearInReviewViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_116748);
}

uint64_t sub_116748(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_29F660);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1167F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_116894(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_116894(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29F6E8)
  {
    v2 = sub_79520();
    v3 = sub_79568();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for YIRDetailedData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29F6E8);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for YearInReviewViewEvent.Model(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for EventData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t destroy for YearInReviewViewEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_OWORD *initializeWithCopy for YearInReviewViewEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for YearInReviewViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for YearInReviewViewEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for YearInReviewViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for YearInReviewViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_116CDC);
}

uint64_t sub_116CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for EventData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = type metadata accessor for TimedData(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for YearInReviewViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_116D58);
}

uint64_t sub_116D58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for EventData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = type metadata accessor for TimedData(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_116DD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_208020;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for YearInReviewViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_116EAC + 4 * byte_207F45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_116EE0 + 4 * byte_207F40[v4]))();
}

uint64_t sub_116EE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_116EE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x116EF0);
  return result;
}

uint64_t sub_116EFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x116F04);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_116F08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_116F10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for YearInReviewViewEvent.Model.CodingKeys()
{
  return &type metadata for YearInReviewViewEvent.Model.CodingKeys;
}

unint64_t sub_116F30()
{
  unint64_t result;

  result = qword_29F7B8;
  if (!qword_29F7B8)
  {
    result = swift_getWitnessTable(byte_2080D4, &type metadata for YearInReviewViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F7B8);
  }
  return result;
}

unint64_t sub_116F78()
{
  unint64_t result;

  result = qword_29F7C0;
  if (!qword_29F7C0)
  {
    result = swift_getWitnessTable(byte_208044, &type metadata for YearInReviewViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F7C0);
  }
  return result;
}

unint64_t sub_116FC0()
{
  unint64_t result;

  result = qword_29F7C8;
  if (!qword_29F7C8)
  {
    result = swift_getWitnessTable(byte_20806C, &type metadata for YearInReviewViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F7C8);
  }
  return result;
}

uint64_t sub_117004(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6961746544524979 && a2 == 0xEF6174614464656CLL)
  {
    v5 = 0xEF6174614464656CLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6961746544524979, 0xEF6174614464656CLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v7 = 0xE900000000000061;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_117194(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29F7D0, &enum case for SessionGroup.default(_:));
}

uint64_t static ShareSeriesEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295958, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F7D0, a1);
}

uint64_t sub_1171D4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29F7E8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ShareSeriesEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295960, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F7E8, a1);
}

uint64_t ShareSeriesEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSeriesEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShareSeriesEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29F870, (uint64_t)&nominal type descriptor for ShareSeriesEvent);
}

uint64_t ShareSeriesEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSeriesEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ShareSeriesEvent.eventData.modify())()
{
  type metadata accessor for ShareSeriesEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ShareSeriesEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSeriesEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ShareSeriesEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSeriesEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ShareSeriesEvent.timedData.modify())()
{
  type metadata accessor for ShareSeriesEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ShareSeriesEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ShareSeriesEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t ShareSeriesEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSeriesEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShareSeriesEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29F908, (uint64_t)&nominal type descriptor for ShareSeriesEvent.Model);
}

uint64_t ShareSeriesEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSeriesEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ShareSeriesEvent.Model.init(seriesData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_WORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 26);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_BYTE *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_WORD *)(a4 + 24) = v9;
  *(_BYTE *)(a4 + 26) = v10;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  v11 = type metadata accessor for ShareSeriesEvent.Model(0);
  v12 = a4 + *(int *)(v11 + 20);
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  v14 = a4 + *(int *)(v11 + 24);
  v15 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a3, v15);
}

uint64_t sub_1175BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_117804();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1175E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_117804();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShareSeriesEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  __int128 v32;

  v3 = v1;
  v5 = sub_71B4(&qword_29F800);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_117804();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareSeriesEvent.Model.CodingKeys, &type metadata for ShareSeriesEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 8);
  v13 = v3[2];
  v14 = *((_WORD *)v3 + 12);
  v15 = *((_BYTE *)v3 + 26);
  v27 = *v3;
  v28 = v12;
  v29 = v13;
  v30 = v14;
  v31 = v15;
  v32 = *((_OWORD *)v3 + 2);
  v26 = 0;
  v16 = sub_10AD0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v5, &type metadata for SeriesData, v16);
  if (!v2)
  {
    v17 = type metadata accessor for ShareSeriesEvent.Model(0);
    v18 = (uint64_t)v3 + *(int *)(v17 + 20);
    LOBYTE(v27) = 1;
    v19 = type metadata accessor for EventData(0);
    v20 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v27, v5, v19, v20);
    v21 = (uint64_t)v3 + *(int *)(v17 + 24);
    LOBYTE(v27) = 2;
    v22 = type metadata accessor for TimedData(0);
    v23 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v27, v5, v22, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_117804()
{
  unint64_t result;

  result = qword_29F808;
  if (!qword_29F808)
  {
    result = swift_getWitnessTable(byte_208304, &type metadata for ShareSeriesEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F808);
  }
  return result;
}

void ShareSeriesEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  __int128 v48;
  char v49;

  v35 = a2;
  v36 = type metadata accessor for TimedData(0);
  v34 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v37 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_71B4(&qword_29F810);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ShareSeriesEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v41 = a1;
  sub_7988(a1, v13);
  v15 = sub_117804();
  v40 = v9;
  v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShareSeriesEvent.Model.CodingKeys, &type metadata for ShareSeriesEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(v41);
  }
  else
  {
    v17 = v6;
    v42 = v7;
    v18 = (uint64_t)v12;
    v19 = v4;
    v20 = v38;
    v49 = 0;
    v21 = sub_10EA0();
    v22 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for SeriesData, &v49, v39, &type metadata for SeriesData, v21);
    v23 = v44;
    v24 = v45;
    v25 = v46;
    v26 = v47;
    *(_QWORD *)v18 = v43;
    *(_BYTE *)(v18 + 8) = v23;
    *(_QWORD *)(v18 + 16) = v24;
    *(_WORD *)(v18 + 24) = v25;
    *(_BYTE *)(v18 + 26) = v26;
    *(_OWORD *)(v18 + 32) = v48;
    LOBYTE(v43) = 1;
    v27 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v20, &v43, v22, v20, v27);
    v28 = v22;
    v29 = v10;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v19 + 32))(v18 + *(int *)(v10 + 20), v17, v20);
    LOBYTE(v43) = 2;
    v30 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v32 = v36;
    v31 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v36, &v43, v28, v36, v30);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v39);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v34 + 32))(v18 + *(int *)(v29 + 24), v31, v32);
    sub_117BD4(v18, v35);
    sub_7DAC(v41);
    sub_117C18(v18);
  }
}

uint64_t sub_117BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareSeriesEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_117C18(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShareSeriesEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_117C54(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ShareSeriesEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_117C68(_QWORD *a1)
{
  return ShareSeriesEvent.Model.encode(to:)(a1);
}

uint64_t sub_117C7C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295958, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F7D0, (uint64_t)sub_117194, a1);
}

uint64_t sub_117CA0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295960, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F7E8, (uint64_t)sub_1171D4, a1);
}

uint64_t getEnumTagSinglePayload for ShareSeriesEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_117CD0);
}

uint64_t sub_117CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296310);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ShareSeriesEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_117D80);
}

uint64_t sub_117D80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296310);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for ShareSeriesEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_117E38);
}

uint64_t sub_117E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = type metadata accessor for TimedData(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ShareSeriesEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_117EF0);
}

uint64_t sub_117EF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_117F8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = "0";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ShareSeriesEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_118068 + 4 * byte_208155[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_11809C + 4 * byte_208150[v4]))();
}

uint64_t sub_11809C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1180A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1180ACLL);
  return result;
}

uint64_t sub_1180B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1180C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1180C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1180CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareSeriesEvent.Model.CodingKeys()
{
  return &type metadata for ShareSeriesEvent.Model.CodingKeys;
}

unint64_t sub_1180EC()
{
  unint64_t result;

  result = qword_29F948;
  if (!qword_29F948)
  {
    result = swift_getWitnessTable(byte_2082DC, &type metadata for ShareSeriesEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F948);
  }
  return result;
}

unint64_t sub_118134()
{
  unint64_t result;

  result = qword_29F950;
  if (!qword_29F950)
  {
    result = swift_getWitnessTable("]K\a", &type metadata for ShareSeriesEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F950);
  }
  return result;
}

unint64_t sub_11817C()
{
  unint64_t result;

  result = qword_29F958;
  if (!qword_29F958)
  {
    result = swift_getWitnessTable("EK\a", &type metadata for ShareSeriesEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F958);
  }
  return result;
}

uint64_t sub_1181C0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29F960, &enum case for SessionGroup.default(_:));
}

uint64_t static GiftEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295968, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F960, a1);
}

uint64_t sub_118200(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29F978, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static GiftEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295970, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F978, a1);
}

uint64_t GiftEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GiftEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29FA00, (uint64_t)&nominal type descriptor for GiftEvent);
}

uint64_t GiftEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftEvent.contentStoreData.modify())()
{
  type metadata accessor for GiftEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GiftEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftEvent.contentExposureData.modify())()
{
  type metadata accessor for GiftEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 28);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GiftEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 28);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftEvent.suggestionData.modify())()
{
  type metadata accessor for GiftEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GiftEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftEvent.eventData.modify())()
{
  type metadata accessor for GiftEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for GiftEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v6, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t GiftEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GiftEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29FAA0, (uint64_t)&nominal type descriptor for GiftEvent.Model);
}

uint64_t GiftEvent.Model.init(contentData:contentStoreData:contentExposureData:suggestionData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_WORD *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 60);
  v15 = *(_BYTE *)(a1 + 64);
  v16 = *(_DWORD *)(a1 + 68);
  v17 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_QWORD *)(a6 + 8) = v8;
  *(_BYTE *)(a6 + 16) = v9;
  *(_OWORD *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 40) = v11;
  *(_QWORD *)(a6 + 48) = v12;
  *(_WORD *)(a6 + 56) = v13;
  *(_DWORD *)(a6 + 60) = v14;
  *(_BYTE *)(a6 + 64) = v15;
  *(_DWORD *)(a6 + 68) = v16;
  *(_BYTE *)(a6 + 72) = v17;
  v18 = *(_DWORD *)(a1 + 73);
  v19 = *a2;
  v20 = a2[1];
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a6 + 96) = v19;
  v21 = a2[2];
  v22 = a2[3];
  *(_OWORD *)(a6 + 112) = v20;
  *(_OWORD *)(a6 + 128) = v21;
  *(_OWORD *)(a6 + 144) = v22;
  v23 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a6 + 168) = *(_OWORD *)a3;
  *(_OWORD *)(a6 + 184) = v23;
  v24 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a6 + 200) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a6 + 216) = v24;
  v25 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a6 + 232) = *(_OWORD *)(a3 + 64);
  v26 = *(_BYTE *)(a1 + 77);
  LODWORD(v11) = *((_DWORD *)a2 + 16);
  LOBYTE(v12) = *((_BYTE *)a2 + 68);
  v27 = *(_DWORD *)(a3 + 112);
  LOWORD(v14) = *(_WORD *)(a3 + 116);
  v28 = *a4;
  *(_DWORD *)(a6 + 73) = v18;
  *(_BYTE *)(a6 + 77) = v26;
  *(_BYTE *)(a6 + 164) = v12;
  *(_DWORD *)(a6 + 160) = v11;
  *(_OWORD *)(a6 + 248) = v25;
  *(_OWORD *)(a6 + 264) = *(_OWORD *)(a3 + 96);
  *(_WORD *)(a6 + 284) = v14;
  *(_DWORD *)(a6 + 280) = v27;
  *(_BYTE *)(a6 + 286) = v28;
  v29 = a6 + *(int *)(type metadata accessor for GiftEvent.Model(0) + 32);
  v30 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a5, v30);
}

uint64_t sub_1187E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_118820 + 4 * byte_208358[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_118820()
{
  return 0xD000000000000010;
}

unint64_t sub_11883C()
{
  return 0xD000000000000013;
}

uint64_t sub_11885C()
{
  return 0x6974736567677573;
}

uint64_t sub_118880()
{
  return 0x746144746E657665;
}

uint64_t sub_11889C()
{
  unsigned __int8 *v0;

  return sub_1187E4(*v0);
}

uint64_t sub_1188A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_11A02C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1188C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_118BE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1188F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_118BE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GiftEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int16 v48;
  char v49;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29F990);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_118BE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GiftEvent.Model.CodingKeys, &type metadata for GiftEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v41 = *(_QWORD *)v4;
  *((_QWORD *)&v41 + 1) = v13;
  v42[0] = v14;
  *(_OWORD *)&v42[8] = v15;
  *(_QWORD *)&v42[24] = v16;
  *(_QWORD *)&v43 = v17;
  WORD4(v43) = v18;
  HIDWORD(v43) = v19;
  LOBYTE(v44) = v20;
  DWORD1(v44) = v21;
  BYTE8(v44) = v22;
  *(_DWORD *)((char *)&v44 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v44) = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v49 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v49, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v41 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v42 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 128);
    v43 = v28;
    BYTE4(v44) = v26;
    LODWORD(v44) = v25;
    v49 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v49, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_DWORD *)(v4 + 280);
    v31 = *(_WORD *)(v4 + 284);
    v32 = *(_OWORD *)(v4 + 184);
    v41 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v42 = v32;
    v33 = *(_OWORD *)(v4 + 216);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 200);
    v43 = v33;
    v34 = *(_OWORD *)(v4 + 248);
    v44 = *(_OWORD *)(v4 + 232);
    v45 = v34;
    v46 = *(_OWORD *)(v4 + 264);
    v48 = v31;
    v47 = v30;
    v49 = 2;
    v35 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v49, v6, &type metadata for ContentExposureData, v35);
    LOBYTE(v41) = *(_BYTE *)(v4 + 286);
    v49 = 3;
    v36 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v49, v6, &type metadata for SuggestionData, v36);
    v37 = v4 + *(int *)(type metadata accessor for GiftEvent.Model(0) + 32);
    LOBYTE(v41) = 4;
    v38 = type metadata accessor for EventData(0);
    v39 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v37, &v41, v6, v38, v39);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_118BE4()
{
  unint64_t result;

  result = qword_29F998;
  if (!qword_29F998)
  {
    result = swift_getWitnessTable(byte_20856C, &type metadata for GiftEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29F998);
  }
  return result;
}

void GiftEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  int v32;
  char v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int16 v41;
  _OWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int16 v60;
  char v61;

  v47 = a2;
  v48 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v5 = (uint64_t *)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_71B4(&qword_29F9A0);
  v6 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GiftEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v51 = a1;
  sub_7988(a1, v12);
  v14 = sub_118BE4();
  v49 = v8;
  v15 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GiftEvent.Model.CodingKeys, &type metadata for GiftEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v51);
  }
  else
  {
    v52 = v9;
    v16 = v48;
    v61 = 0;
    v17 = sub_1779C();
    v18 = v49;
    v19 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v53, &type metadata for ContentData, &v61, v50, &type metadata for ContentData, v17);
    v46 = v11 + 264;
    v20 = *((_QWORD *)&v53 + 1);
    v21 = v54[0];
    v22 = *(_OWORD *)&v54[8];
    v23 = *(_QWORD *)&v54[24];
    v24 = v55;
    v25 = WORD4(v55);
    v26 = HIDWORD(v55);
    v27 = v56;
    v28 = DWORD1(v56);
    v29 = BYTE8(v56);
    v30 = BYTE13(v56);
    *(_QWORD *)v11 = v53;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = *(_DWORD *)((char *)&v56 + 9);
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v57;
    v61 = 1;
    v31 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v53, &type metadata for ContentStoreData, &v61, v19, &type metadata for ContentStoreData, v31);
    v32 = v56;
    v33 = BYTE4(v56);
    v34 = *(_OWORD *)v54;
    *((_OWORD *)v11 + 6) = v53;
    *((_OWORD *)v11 + 7) = v34;
    v35 = v55;
    *((_OWORD *)v11 + 8) = *(_OWORD *)&v54[16];
    *((_OWORD *)v11 + 9) = v35;
    v11[164] = v33;
    *((_DWORD *)v11 + 40) = v32;
    v61 = 2;
    v36 = sub_57428();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v53, &type metadata for ContentExposureData, &v61, v19, &type metadata for ContentExposureData, v36);
    v37 = *(_OWORD *)v54;
    *(_OWORD *)(v11 + 168) = v53;
    *(_OWORD *)(v11 + 184) = v37;
    v38 = v55;
    *(_OWORD *)(v11 + 200) = *(_OWORD *)&v54[16];
    *(_OWORD *)(v11 + 216) = v38;
    v39 = v57;
    *(_OWORD *)(v11 + 232) = v56;
    v40 = v59;
    v41 = v60;
    *(_OWORD *)(v11 + 248) = v39;
    v42 = v46;
    *v46 = v58;
    *((_WORD *)v42 + 10) = v41;
    *((_DWORD *)v42 + 4) = v40;
    v61 = 3;
    v43 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v53, &type metadata for SuggestionData, &v61, v19, &type metadata for SuggestionData, v43);
    stru_108.segname[6] = v53;
    LOBYTE(v53) = 4;
    v44 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v53, v19, v16, v44);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v50);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v3 + 32))(*(int *)(v52 + 32), v5, v16);
    sub_1190EC(0, v47);
    sub_7DAC(v51);
    sub_119130(0);
  }
}

uint64_t sub_1190EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GiftEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_119130(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GiftEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_11916C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  GiftEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_119180(_QWORD *a1)
{
  return GiftEvent.Model.encode(to:)(a1);
}

uint64_t sub_119194@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295968, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29F960, (uint64_t)sub_1181C0, a1);
}

uint64_t sub_1191B8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295970, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29F978, (uint64_t)sub_118200, a1);
}

uint64_t sub_1191DC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v7, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for GiftEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2984D0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for GiftEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for GiftEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for GiftEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for GiftEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for GiftEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for GiftEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11999C);
}

uint64_t sub_11999C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984D0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296F78);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GiftEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_119A9C);
}

uint64_t sub_119A9C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984D0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296F78);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_119B98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2985D0, (uint64_t (*)(void))sub_57428, (uint64_t (*)(void))sub_56960, (uint64_t)&type metadata for ContentExposureData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for GiftEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_119CFC);
}

uint64_t sub_119CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GiftEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_119D84);
}

uint64_t sub_119D84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_119DF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = &unk_208460;
  v4[2] = &unk_208478;
  v4[3] = &unk_208490;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GiftEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_119ED4 + 4 * byte_208362[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_119F08 + 4 * byte_20835D[v4]))();
}

uint64_t sub_119F08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_119F10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x119F18);
  return result;
}

uint64_t sub_119F24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x119F2CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_119F30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_119F38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GiftEvent.Model.CodingKeys()
{
  return &type metadata for GiftEvent.Model.CodingKeys;
}

unint64_t sub_119F58()
{
  unint64_t result;

  result = qword_29FAE8;
  if (!qword_29FAE8)
  {
    result = swift_getWitnessTable("\rJ\a", &type metadata for GiftEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FAE8);
  }
  return result;
}

unint64_t sub_119FA0()
{
  unint64_t result;

  result = qword_29FAF0;
  if (!qword_29FAF0)
  {
    result = swift_getWitnessTable("UJ\a", &type metadata for GiftEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FAF0);
  }
  return result;
}

unint64_t sub_119FE8()
{
  unint64_t result;

  result = qword_29FAF8;
  if (!qword_29FAF8)
  {
    result = swift_getWitnessTable("=J\a", &type metadata for GiftEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FAF8);
  }
  return result;
}

uint64_t sub_11A02C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021F220)
  {
    v8 = 0x800000000021F220;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F220, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v9 = 0xEE00617461446E6FLL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::UpSellLocation_optional __swiftcall UpSellLocation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::UpSellLocation_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268138, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t UpSellLocation.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_11A30C + 4 * byte_2085BC[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_11A30C()
{
  return 16718;
}

uint64_t sub_11A318()
{
  return 0x6964616552626F65;
}

uint64_t sub_11A334()
{
  return 0x4E676E6964616572;
}

void sub_11A350(char *a1)
{
  sub_2A130(*a1);
}

unint64_t sub_11A360()
{
  unint64_t result;

  result = qword_29FB00;
  if (!qword_29FB00)
  {
    result = swift_getWitnessTable("MJ\a", &type metadata for UpSellLocation);
    atomic_store(result, (unint64_t *)&qword_29FB00);
  }
  return result;
}

void sub_11A3A4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_11A3F0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 16718, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_11A45C()
{
  __asm { BR              X10 }
}

uint64_t sub_11A498(uint64_t a1)
{
  String.hash(into:)(a1, 16718, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_11A4F0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_11A538()
{
  uint64_t v1;

  String.hash(into:)(&v1, 16718, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

BookAnalytics::UpSellLocation_optional sub_11A5A4(Swift::String *a1)
{
  return UpSellLocation.init(rawValue:)(*a1);
}

uint64_t sub_11A5B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_11A5E0 + 4 * byte_2085CC[*v0]))();
}

void sub_11A5E0(_QWORD *a1@<X8>)
{
  *a1 = 16718;
  a1[1] = 0xE200000000000000;
}

void sub_11A5F0(_QWORD *a1@<X8>)
{
  *a1 = 0x6964616552626F65;
  a1[1] = 0xEA0000000000676ELL;
}

void sub_11A610(_QWORD *a1@<X8>)
{
  *a1 = 0x4E676E6964616572;
  a1[1] = 0xEA0000000000776FLL;
}

uint64_t sub_11A630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_11A7A4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_11A68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_11A7A4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for UpSellLocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_11A724 + 4 * byte_2085D5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_11A758 + 4 * byte_2085D0[v4]))();
}

uint64_t sub_11A758(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11A760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x11A768);
  return result;
}

uint64_t sub_11A774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x11A77CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_11A780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_11A788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UpSellLocation()
{
  return &type metadata for UpSellLocation;
}

unint64_t sub_11A7A4()
{
  unint64_t result;

  result = qword_29FB08;
  if (!qword_29FB08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UpSellLocation, &type metadata for UpSellLocation);
    atomic_store(result, (unint64_t *)&qword_29FB08);
  }
  return result;
}

id sub_11A7E8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AppManager(0)), "init");
  qword_29FB10 = (uint64_t)result;
  return result;
}

id static AppManager.shared.getter()
{
  if (qword_295978 != -1)
    swift_once(&qword_295978, sub_11A7E8);
  return (id)qword_29FB10;
}

uint64_t AppManager.appSessionManager.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR___BAAppManager_appSessionManager));
}

id AppManager.client.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___BAAppManager_client);
}

uint64_t sub_11A8B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR___BAAppManager_applicationGroupIdentifier);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = v4[1];
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t AppManager.sharedContainerIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR___BAAppManager_applicationGroupIdentifier);
  swift_beginAccess(v0 + OBJC_IVAR___BAAppManager_applicationGroupIdentifier, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void sub_11A974(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *sub_11A9D4()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig);
  swift_beginAccess(v0 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

id sub_11AA20()
{
  char *v0;
  char *v1;
  void *v2;
  char *v3;
  id v4;
  BAEventReporter *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;
  _QWORD v17[5];

  v1 = &v0[OBJC_IVAR___BAAppManager_applicationGroupIdentifier];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR___BAAppManager_uploadBatchEventConfig] = 0;
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = v0;
  v4 = objc_msgSend(v2, "standardUserDefaults");
  LODWORD(v2) = objc_msgSend(v4, "BOOLForKey:", CFSTR("BAAppAnalyticsUseDebugProcessor"));

  v5 = 0;
  if ((_DWORD)v2)
  {
    v6 = type metadata accessor for DebugEventProcessor();
    swift_allocObject(v6, 40, 7);
    v5 = sub_17BE74();
  }
  *(_QWORD *)&v3[OBJC_IVAR___BAAppManager_debugProcessor] = v5;
  v3[OBJC_IVAR___BAAppManager_enableUploads] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___BAAppManager_flushManager] = 0;
  v7 = &v3[OBJC_IVAR___BAAppManager_targetURL];
  v8 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for TrackingConsent(0);
  v9 = static TrackingConsent.shared.getter();
  type metadata accessor for AccessQueue(0);
  v10 = static AccessQueue.background.getter();
  v17[3] = type metadata accessor for CrashDetector(0);
  v17[4] = &protocol witness table for CrashDetector;
  v17[0] = static CrashDetector.shared.getter();
  v11 = type metadata accessor for AppSessionManager(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)&v3[OBJC_IVAR___BAAppManager_appSessionManager] = AppSessionManager.init(accessQueue:trackingConsent:crashDetector:)(v10, v9, v17);
  type metadata accessor for Client(0);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  *(_QWORD *)&v3[OBJC_IVAR___BAAppManager_client] = Client.__allocating_init(bundle:)(v12);

  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for AppManager(0);
  v13 = objc_msgSendSuper2(&v16, "init");
  sub_11D1A8();
  v14 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v14, "addObserver:selector:name:object:", v13, "privacyAcknowledgementNotification:", CFSTR("BAPrivacyAcknowledgementChanged"), 0);

  return v13;
}

void sub_11AC8C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  _BYTE v14[24];

  v4 = v3;
  v5 = OBJC_IVAR___BAAppManager_enableUploads;
  *(_BYTE *)(v3 + OBJC_IVAR___BAAppManager_enableUploads) = a3;
  sub_11ADB4(a1, a2);
  if (*(_BYTE *)(v3 + v5) == 1)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "BOOLForKey:", v7);

    type metadata accessor for UploadBatchEventConfig(0);
    v9 = (void *)static UploadBatchEventConfig.default.getter();
    v10 = (void *)UploadBatchEventConfig.with(debuggingEnabled:)(v8);

    v11 = UploadBatchEventConfig.with(maxEventsPerSessionBatch:)(50);
    v12 = (void **)(v4 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig);
    swift_beginAccess(v4 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig, v14, 1, 0);
    v13 = *v12;
    *v12 = (void *)v11;

  }
  sub_11AF54();
  AppSessionManager.startAppSession()();
}

void sub_11ADB4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  BAEventReporter *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  int64_t v29;
  id v30;
  BOOL v31;
  id v32;
  _BYTE v33[24];
  char v34[24];

  v5 = sub_71B4(&qword_29AAB0);
  __chkstk_darwin(v5);
  v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_71B4(&qword_29FB40);
  __chkstk_darwin(v8);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = &v2[OBJC_IVAR___BAAppManager_applicationGroupIdentifier];
  swift_beginAccess(&v2[OBJC_IVAR___BAAppManager_applicationGroupIdentifier], v34, 1, 0);
  v12 = (BAEventReporter *)*((_QWORD *)v11 + 1);
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  v20 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  v21 = (uint64_t)&v2[OBJC_IVAR___BAAppManager_targetURL];
  swift_beginAccess(&v2[OBJC_IVAR___BAAppManager_targetURL], v33, 33, 0);
  sub_11D56C((uint64_t)v10, v21);
  swift_endAccess(v33);
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 1, 1, v22);
  v23 = (_QWORD *)swift_allocObject(&unk_27D198, 40, 7);
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = v2;
  v24 = v2;
  v25 = (BAEventReporter *)sub_17BB50((uint64_t)v7, (uint64_t)&unk_29FBD0, (uint64_t)v23);
  swift_release(v25, v26, v27, v28, v29, v30, v31, v32);
}

void sub_11AF54()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  _QWORD v18[5];
  _BYTE v19[24];

  if (*(_BYTE *)(v0 + OBJC_IVAR___BAAppManager_enableUploads) == 1)
  {
    v1 = v0;
    v2 = (void **)(v0 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig);
    swift_beginAccess(v2, v19, 0, 0);
    v3 = *v2;
    if (*v2)
    {
      type metadata accessor for FlushManager(0);
      v4 = *(_QWORD *)(v1 + OBJC_IVAR___BAAppManager_appSessionManager);
      v5 = *(void **)(v1 + OBJC_IVAR___BAAppManager_client);
      v6 = type metadata accessor for URLSessionUploadClientFactory(0);
      swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
      v7 = v3;
      swift_retain(v4);
      v8 = v5;
      v18[3] = v6;
      v18[4] = &protocol witness table for URLSessionUploadClientFactory;
      v18[0] = URLSessionUploadClientFactory.init()();
      swift_unknownObjectRetain(v1);
      v9 = FlushManager.__allocating_init(appSessionManager:client:endpoint:contentType:config:clientFactory:)(v4, v8, v1, 0, v7, v18);
      v10 = *(BAEventReporter **)(v1 + OBJC_IVAR___BAAppManager_flushManager);
      *(_QWORD *)(v1 + OBJC_IVAR___BAAppManager_flushManager) = v9;

      swift_release(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
}

void sub_11B0D8()
{
  AppSessionManager.appSessionDidTerminate(timeout:)(1.0);
}

uint64_t sub_11B144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = v0;
  v2 = sub_71B4(&qword_29FB40);
  *(_QWORD *)(v1 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_11B1A0, 0, 0);
}

uint64_t sub_11B1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40) + OBJC_IVAR___BAAppManager_targetURL;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_11CD58(v2, v1);
  v3 = type metadata accessor for URL(0);
  LODWORD(v2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v1, 1, v3);
  sub_11CDA0(v1);
  if ((_DWORD)v2 == 1)
  {
    v4 = (_QWORD *)swift_task_alloc(dword_29FBB4);
    *(_QWORD *)(v0 + 56) = v4;
    *v4 = v0;
    v4[1] = sub_11B2F4;
    return sub_11B4F4();
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR___BAAppManager_flushManager);
    *(_QWORD *)(v0 + 80) = v6;
    if (v6)
    {
      v7 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
      swift_retain(v6);
      v8 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 88) = v8;
      *v8 = v0;
      v8[1] = sub_11B468;
      return withCheckedContinuation<A>(isolation:function:_:)();
    }
    else
    {
      swift_task_dealloc(*(_QWORD *)(v0 + 48));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_11B2F4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_11B348, 0, 0);
}

uint64_t sub_11B348()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[5];
  v2 = swift_task_alloc(32);
  v0[8] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_11B3DC;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_11B3DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_11B438, 0, 0);
}

uint64_t sub_11B438()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_11B468()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_11B4BC, 0, 0);
}

uint64_t sub_11B4BC(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 80), a2, a3, a4, a5, a6, a7, a8);
  swift_task_dealloc(*(_QWORD *)(v8 + 48));
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_11B4F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1[7] = v0;
  v2 = type metadata accessor for URL(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v4 = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[10] = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_29FBBC);
  v1[11] = v5;
  *v5 = v1;
  v5[1] = sub_11B570;
  return sub_11BC1C(v4);
}

uint64_t sub_11B570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_11B79C;
  else
    v3 = sub_11B5D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_11B5D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSURL *v5;
  void *v6;
  void *v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setURL:forKey:", v7, v8);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v9 = v0[7];
  v10 = swift_task_alloc(32);
  v0[13] = v10;
  *(_QWORD *)(v10 + 16) = v9;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v11;
  *v11 = v0;
  v11[1] = sub_11B710;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_11B710()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_11B76C, 0, 0);
}

uint64_t sub_11B76C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_11B79C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BAEventReporter *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  if (qword_2955F0 != -1)
    swift_once(&qword_2955F0, sub_5C6D4);
  v1 = v0[12];
  v2 = type metadata accessor for Logger(0);
  sub_705C(v2, (uint64_t)qword_298770);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[12];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v24 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 5, v0 + 2);
    v10 = Error.localizedDescription.getter(v0[3], v0[4]);
    v12 = (BAEventReporter *)v11;
    v0[6] = sub_EB014(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "No URL found for Upload Session Processor: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v0[12]);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v20 = v0[7];
  v21 = swift_task_alloc(32);
  v0[13] = v21;
  *(_QWORD *)(v21 + 16) = v20;
  v22 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v22;
  *v22 = v0;
  v22[1] = sub_11B710;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

void sub_11B9FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  int64_t v11;
  id v12;
  BOOL v13;
  id v14;
  uint64_t v15;

  v2 = sub_71B4(&qword_29AB38);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = (BAEventReporter *)swift_allocObject(&unk_27D108, v6 + v4, v5 | 7);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))((char *)v7 + v6, (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  dispatch thunk of FlushManager.flush(_:)(sub_11D494, v7);
  swift_release(v7, v8, v9, v10, v11, v12, v13, v14);
}

id AppManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppManager(uint64_t a1)
{
  uint64_t result;

  result = qword_29FB88;
  if (!qword_29FB88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppManager);
  return result;
}

uint64_t sub_11BBD4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_29FBB4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_9DAA0;
  return sub_11B4F4();
}

uint64_t sub_11BC1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;

  v2[38] = a1;
  v2[39] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_71B4(&qword_29FB40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v3);
  v2[41] = swift_task_alloc(v3);
  v2[42] = swift_task_alloc(v3);
  v2[43] = swift_task_alloc(v3);
  v2[44] = swift_task_alloc(v3);
  v2[45] = swift_task_alloc(v3);
  v2[46] = swift_task_alloc(v3);
  return swift_task_switch(sub_11BCC4, 0, 0);
}

uint64_t sub_11BCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = OBJC_IVAR___BAAppManager_targetURL;
  *(_QWORD *)(v0 + 376) = OBJC_IVAR___BAAppManager_targetURL;
  v4 = v2 + v3;
  swift_beginAccess(v2 + v3, v0 + 144, 0, 0);
  sub_11CD58(v4, v1);
  v5 = type metadata accessor for URL(0);
  *(_QWORD *)(v0 + 384) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v0 + 392) = v6;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v5);
  v8 = *(_QWORD *)(v0 + 368);
  if (v7 == 1)
  {
    sub_11CDA0(v8);
    v9 = (char *)&loc_11BD8C + dword_11C26C[sub_11C59C()];
    __asm { BR              X10 }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v6 + 32))(*(_QWORD *)(v0 + 304), v8, v5);
  v10 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_11C284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 408) = v1;
  if (v1)
    v2 = sub_11C3F0;
  else
    v2 = sub_11C2E4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_11C2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312) + *(_QWORD *)(v0 + 376);
  v6 = *(void **)(v0 + 288);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v4, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v2);
  swift_beginAccess(v5, v0 + 168, 33, 0);
  sub_11D56C(v3, v5);
  swift_endAccess(v0 + 168);

  v7 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_11C3F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 320);
  swift_willThrow();

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_11C490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  uint64_t v30;

  v8 = sub_71B4(&qword_29AB38);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = *(BAEventReporter **)(a2 + OBJC_IVAR___BAAppManager_flushManager);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
    v13 = *(unsigned __int8 *)(v9 + 80);
    v14 = (v13 + 16) & ~v13;
    v15 = (BAEventReporter *)swift_allocObject(a3, v14 + v10, v13 | 7);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))((char *)v15 + v14, (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    swift_retain(v12);
    dispatch thunk of FlushManager.flush(_:)(a4, v15);
    swift_release(v15, v16, v17, v18, v19, v20, v21, v22);
    swift_release(v12, v23, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    CheckedContinuation.resume(returning:)(v11, v8);
  }
}

uint64_t sub_11C59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21[24];

  v1 = v0 + OBJC_IVAR___BAAppManager_applicationGroupIdentifier;
  swift_beginAccess(v1, v21, 0, 0);
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2
    || (v3 = objc_allocWithZone((Class)NSUserDefaults),
        swift_bridgeObjectRetain(v2),
        v4 = String._bridgeToObjectiveC()(),
        swift_bridgeObjectRelease(v2),
        v5 = objc_msgSend(v3, "initWithSuiteName:", v4),
        v4,
        !v5))
  {
    v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  }
  v6 = objc_msgSend(v5, "stringForKey:", CFSTR("BAEnvironment"));
  if (!v6)
  {

    return 0;
  }
  v8 = v6;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);
  v11 = v10;

  if (v9 == 7759204 && v11 == 0xE300000000000000)
  {
    v13 = 0xE300000000000000;
    goto LABEL_14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7759204, 0xE300000000000000, v9, v11, 0) & 1) == 0)
  {
    if (v9 == 24945 && v11 == 0xE200000000000000)
    {
      v16 = 0xE200000000000000;
      goto LABEL_23;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(24945, 0xE200000000000000, v9, v11, 0) & 1) != 0)
    {
      v16 = v11;
LABEL_23:
      swift_bridgeObjectRelease(v16);

      return 2;
    }
    if (v9 == 1953719668 && v11 == 0xE400000000000000)
    {
      v18 = 0xE400000000000000;
      goto LABEL_31;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953719668, 0xE400000000000000, v9, v11, 0) & 1) != 0)
    {
      v18 = v11;
LABEL_31:
      swift_bridgeObjectRelease(v18);

      return 3;
    }
    if (v9 == 0x676E6967617473 && v11 == 0xE700000000000000)
    {
      v19 = 0xE700000000000000;
LABEL_37:
      swift_bridgeObjectRelease(v19);

      return 4;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6967617473, 0xE700000000000000, v9, v11, 0) & 1) != 0)
    {
      v19 = v11;
      goto LABEL_37;
    }
    if (v9 == 1685025392 && v11 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease(0xE400000000000000);

      return 5;
    }
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(1685025392, 0xE400000000000000, v9, v11, 0);
    swift_bridgeObjectRelease(v11);

    if ((v20 & 1) != 0)
      return 5;
    return 0;
  }
  v13 = v11;
LABEL_14:
  swift_bridgeObjectRelease(v13);

  return 1;
}

uint64_t sub_11C870(uint64_t result, void *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(result + 32);
  if (a4)
  {
    v6 = sub_71B4(&qword_29FBC0);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else if (a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
    *(_QWORD *)v10 = a2;
    *(_BYTE *)(v10 + 8) = a3;
    v11 = a2;
    return swift_continuation_throwingResume(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_11C900()
{
  uint64_t v0;
  NSString v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;

  v1 = (id)BUOnboardingBooksBundleID();
  if (!v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0, v0);
    v3 = v2;
    v1 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
  }
  v4 = objc_msgSend((id)objc_opt_self(AMSAcknowledgePrivacyTask), "acknowledgementNeededForPrivacyIdentifier:", v1);

  if ((v4 & 1) == 0)
  {
    type metadata accessor for TrackingConsent(0);
    v5 = (id)static TrackingConsent.shared.getter();
    TrackingConsent.allow()();

  }
}

uint64_t AppManager.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  id v18;
  NSString v19;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  BAEventReporter *v25;
  BAEventReporter *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  _BYTE v35[24];

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_71B4(&qword_29FB40);
  v8 = __chkstk_darwin(v7);
  v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = __chkstk_darwin(v8);
  v13 = &v35[-v12 - 8];
  __chkstk_darwin(v11);
  v15 = &v35[-v14 - 8];
  v16 = v1 + OBJC_IVAR___BAAppManager_targetURL;
  swift_beginAccess(v16, v35, 0, 0);
  sub_11CD58(v16, (uint64_t)v15);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v17(v15, 1, v3) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v15, v3);
  sub_11CDA0((uint64_t)v15);
  v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "URLForKey:", v19);

  if (v20)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v21 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v21(v13, v6, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    if (v17(v13, 1, v3) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a1, v13, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
  }
  sub_11CDA0((uint64_t)v13);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("https://books-analytics-events.apple.com/analyticseventsv2/async"), v23);
  v26 = v25;
  URL.init(string:)(v24);
  swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)(v10, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v10, v3);
  __break(1u);
  return result;
}

uint64_t sub_11CD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_29FB40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_11CDA0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_29FB40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AppManager.name.getter()
{
  int v0;
  uint64_t v1;

  v0 = sub_11C59C();
  v1 = 0x61622D736B6F6F62;
  if (v0 == 2)
    v1 = 0x61712D736B6F6F62;
  if (v0 == 1)
    return 0x65642D736B6F6F62;
  else
    return v1;
}

uint64_t sub_11CF78@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___BAAppManager_applicationGroupIdentifier);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

id sub_11CFD0@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;
  _BYTE v6[24];

  v3 = (void **)(*a1 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_11D024()
{
  return type metadata accessor for AppManager(0);
}

void sub_11D02C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_208738;
  v4[3] = &unk_208750;
  v4[4] = &unk_208750;
  v4[5] = &unk_208768;
  v4[6] = &unk_208750;
  sub_11D154(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

uint64_t method lookup function for AppManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AppManager);
}

uint64_t dispatch thunk of AppManager.applicationGroupIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AppManager.uploadBatchEventConfig.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AppManager.startAppSession(with:enableUploads:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of AppManager.appSessionDidTerminate()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.size + (swift_isaMask & *v0)))();
}

void sub_11D154(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_29FBA0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_29FBA0);
  }
}

uint64_t sub_11D1A8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_CB2E4();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  v11 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_11C900;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_124DDC;
  aBlock[3] = &unk_27D0D0;
  v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_11D3CC();
  v14 = sub_71B4(&qword_29FBA8);
  v15 = sub_11D414();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v0, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v2, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v2, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_11D3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

void sub_11D3C4(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  swift_release(*(BAEventReporter **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_11D3CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2A0070;
  if (!qword_2A0070)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_2A0070);
  }
  return result;
}

unint64_t sub_11D414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2A0080;
  if (!qword_2A0080)
  {
    v1 = sub_679EC(&qword_29FBA8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_2A0080);
  }
  return result;
}

void sub_11D460(uint64_t a1)
{
  uint64_t v1;

  sub_11C490(a1, *(_QWORD *)(v1 + 16), (uint64_t)&unk_27D130, (uint64_t)sub_11D494);
}

void sub_11D488(uint64_t a1)
{
  sub_11B9FC(a1);
}

void sub_11D49C(uint64_t a1)
{
  uint64_t v1;

  sub_11C490(a1, *(_QWORD *)(v1 + 16), (uint64_t)&unk_27D158, (uint64_t)sub_11D494);
}

uint64_t sub_11D4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_71B4(&qword_29AB38);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_11D52C()
{
  uint64_t v0;

  v0 = sub_71B4(&qword_29AB38);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_11D56C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_29FB40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_11D5B4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_11D5E0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_29FBCC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_88CD4;
  v2 = (_QWORD *)swift_task_alloc(dword_29FBB4);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_9DAA0;
  return sub_11B4F4();
}

uint64_t sub_11D648(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29FBD8, &enum case for SessionGroup.default(_:));
}

uint64_t static PurchaseFailEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295980, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29FBD8, a1);
}

uint64_t sub_11D688(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29FBF0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PurchaseFailEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295988, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29FBF0, a1);
}

uint64_t PurchaseFailEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PurchaseFailEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29FC90, (uint64_t)&nominal type descriptor for PurchaseFailEvent);
}

uint64_t PurchaseFailEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.contentData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 24);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 24);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.contentStoreData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 28);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 28);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.contentExposureData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.prevAltContentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 32);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.prevAltContentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 32);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.prevAltContentExposureData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.purchaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 36);
  v4 = sub_71B4(&qword_2984E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.purchaseData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 36);
  v4 = sub_71B4(&qword_2984E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.purchaseData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.purchaseFailData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 40);
  v4 = sub_71B4(&qword_29FC08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.purchaseFailData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 40);
  v4 = sub_71B4(&qword_29FC08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.purchaseFailData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 44);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 44);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.upSellData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 48);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 48);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.seriesData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 52);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 52);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.suggestionData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 56);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.uppParentContentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 56);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.uppParentContentData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 60);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseFailEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent(0) + 60);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseFailEvent.eventData.modify())()
{
  type metadata accessor for PurchaseFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseFailEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PurchaseFailEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v6, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_29FC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v6, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v2, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
  v24 = a1 + v4[14];
  v25 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v2, v25);
  v26 = a1 + v4[15];
  v27 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v26, v6, v27);
}

uint64_t PurchaseFailEvent.Model.purchaseFailData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(_DWORD *)(v1 + 396);
  v3 = *(_BYTE *)(v1 + 400);
  v4 = *(_QWORD *)(v1 + 408);
  v5 = *(_QWORD *)(v1 + 432);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 392);
  *(_DWORD *)(a1 + 4) = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_OWORD *)(v1 + 416);
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v7 = v6;
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

uint64_t PurchaseFailEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 456);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 440);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t PurchaseFailEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[58];
  v3 = v1[59];
  v4 = v1[60];
  v5 = v1[61];
  v6 = v1[62];
  v7 = v1[63];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

void PurchaseFailEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 512);
}

uint64_t PurchaseFailEvent.Model.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 520);
  v3 = *(_QWORD *)(v1 + 528);
  v4 = *(_QWORD *)(v1 + 536);
  v5 = *(_QWORD *)(v1 + 544);
  v6 = *(_QWORD *)(v1 + 552);
  v7 = *(_QWORD *)(v1 + 560);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v1 + 568);
  return sub_56034(v2, v3, v4, v5, v6, v7);
}

uint64_t PurchaseFailEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseFailEvent.Model(0) + 60);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PurchaseFailEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29FD50, (uint64_t)&nominal type descriptor for PurchaseFailEvent.Model);
}

uint64_t PurchaseFailEvent.Model.init(altContentTypeExposureData:contentData:contentStoreData:contentExposureData:prevAltContentExposureData:purchaseData:purchaseFailData:upSellData:seriesData:suggestionData:uppParentContentData:eventData:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 *a10, _BYTE *a11, uint64_t a12, uint64_t a13)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v13 = *a1;
  v14 = a1[1];
  v15 = a1[2];
  v16 = *((_BYTE *)a1 + 56);
  *(_QWORD *)(a9 + 48) = *((_QWORD *)a1 + 6);
  *(_BYTE *)(a9 + 56) = v16;
  v17 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a9 + 64) = *(_QWORD *)a2;
  *(_QWORD *)(a9 + 72) = v17;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a9 + 104) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a9 + 112) = v18;
  v19 = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a9 + 120) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a9 + 124) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a9 + 132) = *(_DWORD *)(a2 + 68);
  v20 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)a9 = v13;
  *(_OWORD *)(a9 + 16) = v14;
  *(_OWORD *)(a9 + 32) = v15;
  *(_OWORD *)(a9 + 88) = v19;
  *(_BYTE *)(a9 + 136) = v20;
  *(_DWORD *)(a9 + 137) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a9 + 141) = *(_BYTE *)(a2 + 77);
  v21 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a9 + 228) = *((_BYTE *)a3 + 68);
  v22 = *a3;
  v23 = a3[1];
  v24 = a3[2];
  v25 = a3[3];
  *(_DWORD *)(a9 + 224) = *((_DWORD *)a3 + 16);
  *(_WORD *)(a9 + 348) = *((_WORD *)a4 + 58);
  v26 = *a4;
  v27 = a4[1];
  v28 = a4[2];
  v29 = a4[3];
  v30 = a4[4];
  v31 = a4[5];
  v32 = a4[6];
  LOWORD(v18) = *a5;
  *(_DWORD *)(a9 + 344) = *((_DWORD *)a4 + 28);
  *(_WORD *)(a9 + 350) = v18;
  v33 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a9 + 352) = *(_QWORD *)a6;
  *(_QWORD *)(a9 + 360) = v33;
  *(_BYTE *)(a9 + 368) = *(_BYTE *)(a6 + 16);
  *(_BYTE *)(a9 + 369) = *(_BYTE *)(a6 + 17);
  v34 = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a9 + 376) = *(_QWORD *)(a6 + 24);
  *(_QWORD *)(a9 + 384) = v34;
  *(_BYTE *)(a9 + 392) = *(_BYTE *)a7;
  *(_DWORD *)(a9 + 396) = *(_DWORD *)(a7 + 4);
  *(_BYTE *)(a9 + 400) = *(_BYTE *)(a7 + 8);
  v35 = *(_OWORD *)(a7 + 16);
  v36 = *(_OWORD *)(a7 + 32);
  *(_OWORD *)(a9 + 264) = v28;
  *(_OWORD *)(a9 + 280) = v29;
  *(_OWORD *)(a9 + 296) = v30;
  *(_OWORD *)(a9 + 312) = v31;
  *(_OWORD *)(a9 + 328) = v32;
  *(_OWORD *)(a9 + 408) = v35;
  *(_OWORD *)(a9 + 424) = v36;
  *(_OWORD *)(a9 + 440) = *(_OWORD *)a8;
  v37 = *(_OWORD *)(a12 + 16);
  v38 = *(_OWORD *)(a12 + 32);
  *(_OWORD *)(a9 + 520) = *(_OWORD *)a12;
  *(_OWORD *)(a9 + 536) = v37;
  *(_OWORD *)(a9 + 552) = v38;
  v39 = *a10;
  v40 = a10[1];
  v41 = a10[2];
  *(_QWORD *)(a9 + 456) = *(_QWORD *)(a8 + 16);
  *(_BYTE *)(a9 + 512) = *a11;
  *(_BYTE *)(a9 + 568) = *(_BYTE *)(a12 + 48);
  *(_OWORD *)(a9 + 144) = v21;
  *(_OWORD *)(a9 + 160) = v22;
  *(_OWORD *)(a9 + 176) = v23;
  *(_OWORD *)(a9 + 192) = v24;
  *(_OWORD *)(a9 + 208) = v25;
  *(_OWORD *)(a9 + 232) = v26;
  *(_OWORD *)(a9 + 248) = v27;
  *(_OWORD *)(a9 + 464) = v39;
  *(_OWORD *)(a9 + 480) = v40;
  *(_OWORD *)(a9 + 496) = v41;
  v42 = a9 + *(int *)(type metadata accessor for PurchaseFailEvent.Model(0) + 60);
  v43 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v42, a13, v43);
}

uint64_t sub_11E448(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_11E488 + 4 * byte_208780[a1]))(0xD00000000000001ALL, 0x800000000021F1E0);
}

uint64_t sub_11E488()
{
  return 0x44746E65746E6F63;
}

unint64_t sub_11E4A8()
{
  return 0xD000000000000010;
}

uint64_t sub_11E510()
{
  return 0x61446C6C65537075;
}

uint64_t sub_11E53C()
{
  return 0x6974736567677573;
}

void sub_11E560()
{
  JUMPOUT(0x11E56CLL);
}

uint64_t sub_11E578()
{
  return 0x746144746E657665;
}

uint64_t sub_11E594()
{
  unsigned __int8 *v0;

  return sub_11E448(*v0);
}

uint64_t sub_11E59C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_122910(a1, a2);
  *a3 = result;
  return result;
}

void sub_11E5C0(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_11E5CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11EB0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11E5F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_11EB0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PurchaseFailEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  int v33;
  __int16 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  char v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v62;
  _BYTE v63[32];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  __int16 v69;
  char v70;

  v3 = v1;
  v5 = sub_71B4(&qword_29FC10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_11EB0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PurchaseFailEvent.Model.CodingKeys, &type metadata for PurchaseFailEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 6);
  v13 = *((_BYTE *)v3 + 56);
  v14 = v3[1];
  v62 = *v3;
  *(_OWORD *)v63 = v14;
  *(_OWORD *)&v63[16] = v3[2];
  *(_QWORD *)&v64 = v12;
  BYTE8(v64) = v13;
  v70 = 0;
  v15 = sub_568D8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for AltContentTypeExposureData, v15);
  if (!v2)
  {
    v16 = *((_QWORD *)v3 + 9);
    v17 = *((_BYTE *)v3 + 80);
    v18 = *(__int128 *)((char *)v3 + 88);
    v19 = *((_QWORD *)v3 + 13);
    v20 = *((_QWORD *)v3 + 14);
    v21 = *((_WORD *)v3 + 60);
    v22 = *((_DWORD *)v3 + 31);
    v23 = *((_BYTE *)v3 + 128);
    v24 = *((_DWORD *)v3 + 33);
    v25 = *((_BYTE *)v3 + 136);
    v26 = *((unsigned __int8 *)v3 + 141);
    *(_QWORD *)&v62 = *((_QWORD *)v3 + 8);
    *((_QWORD *)&v62 + 1) = v16;
    v63[0] = v17;
    *(_OWORD *)&v63[8] = v18;
    *(_QWORD *)&v63[24] = v19;
    *(_QWORD *)&v64 = v20;
    WORD4(v64) = v21;
    HIDWORD(v64) = v22;
    LOBYTE(v65) = v23;
    DWORD1(v65) = v24;
    BYTE8(v65) = v25;
    *(_DWORD *)((char *)&v65 + 9) = *(_DWORD *)((char *)v3 + 137);
    BYTE13(v65) = v26;
    v66 = v3[9];
    v70 = 1;
    v27 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v70, v5, &type metadata for ContentData, v27);
    v28 = *((_DWORD *)v3 + 56);
    v29 = *((_BYTE *)v3 + 228);
    v30 = v3[11];
    v62 = v3[10];
    *(_OWORD *)v63 = v30;
    v31 = v3[13];
    *(_OWORD *)&v63[16] = v3[12];
    v64 = v31;
    BYTE4(v65) = v29;
    LODWORD(v65) = v28;
    v70 = 2;
    v32 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for ContentStoreData, v32);
    v33 = *((_DWORD *)v3 + 86);
    v34 = *((_WORD *)v3 + 174);
    v35 = *(__int128 *)((char *)v3 + 248);
    v62 = *(__int128 *)((char *)v3 + 232);
    *(_OWORD *)v63 = v35;
    v36 = *(__int128 *)((char *)v3 + 280);
    *(_OWORD *)&v63[16] = *(__int128 *)((char *)v3 + 264);
    v64 = v36;
    v37 = *(__int128 *)((char *)v3 + 312);
    v65 = *(__int128 *)((char *)v3 + 296);
    v66 = v37;
    v67 = *(__int128 *)((char *)v3 + 328);
    v69 = v34;
    v68 = v33;
    v70 = 3;
    v38 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for ContentExposureData, v38);
    LOWORD(v62) = *((_WORD *)v3 + 175);
    v70 = 4;
    v39 = sub_569A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for PrevAltContentExposureData, v39);
    v40 = *((_QWORD *)v3 + 45);
    v41 = *((_BYTE *)v3 + 368);
    v42 = *((_BYTE *)v3 + 369);
    v43 = *((_QWORD *)v3 + 47);
    v44 = *((_QWORD *)v3 + 48);
    *(_QWORD *)&v62 = *((_QWORD *)v3 + 44);
    *((_QWORD *)&v62 + 1) = v40;
    v63[0] = v41;
    v63[1] = v42;
    *(_QWORD *)&v63[8] = v43;
    *(_QWORD *)&v63[16] = v44;
    v70 = 5;
    v45 = sub_34104();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v70, v5, &type metadata for PurchaseData, v45);
    v46 = *((_DWORD *)v3 + 99);
    v47 = *((_BYTE *)v3 + 400);
    LOBYTE(v62) = *((_BYTE *)v3 + 392);
    DWORD1(v62) = v46;
    BYTE8(v62) = v47;
    v48 = *(__int128 *)((char *)v3 + 424);
    *(_OWORD *)v63 = *(__int128 *)((char *)v3 + 408);
    *(_OWORD *)&v63[16] = v48;
    v70 = 6;
    v49 = sub_11EB50();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v70, v5, &type metadata for PurchaseFailData, v49);
    v50 = *((_QWORD *)v3 + 57);
    v62 = *(__int128 *)((char *)v3 + 440);
    *(_QWORD *)v63 = v50;
    v70 = 7;
    v51 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for UpSellData, v51);
    v52 = v3[30];
    v62 = v3[29];
    *(_OWORD *)v63 = v52;
    *(_OWORD *)&v63[16] = v3[31];
    v70 = 8;
    v53 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for SeriesData, v53);
    LOBYTE(v62) = *((_BYTE *)v3 + 512);
    v70 = 9;
    v54 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for SuggestionData, v54);
    v55 = *((_BYTE *)v3 + 568);
    v56 = *(__int128 *)((char *)v3 + 536);
    v62 = *(__int128 *)((char *)v3 + 520);
    *(_OWORD *)v63 = v56;
    *(_OWORD *)&v63[16] = *(__int128 *)((char *)v3 + 552);
    LOBYTE(v64) = v55;
    v70 = 10;
    v57 = sub_569E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v70, v5, &type metadata for UppParentContentData, v57);
    v58 = (uint64_t)v3 + *(int *)(type metadata accessor for PurchaseFailEvent.Model(0) + 60);
    LOBYTE(v62) = 11;
    v59 = type metadata accessor for EventData(0);
    v60 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v58, &v62, v5, v59, v60);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_11EB0C()
{
  unint64_t result;

  result = qword_29FC18;
  if (!qword_29FC18)
  {
    result = swift_getWitnessTable("5H\a", &type metadata for PurchaseFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FC18);
  }
  return result;
}

unint64_t sub_11EB50()
{
  unint64_t result;

  result = qword_29FC20;
  if (!qword_29FC20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PurchaseFailData, &type metadata for PurchaseFailData);
    atomic_store(result, (unint64_t *)&qword_29FC20);
  }
  return result;
}

void PurchaseFailEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  int64_t v26;
  int64_t v27;
  void *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  BAEventReporter *v42;
  int v43;
  BAEventReporter *v44;
  BAEventReporter *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  BAEventReporter *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  int64_t v65;
  int64_t v66;
  id v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  BAEventReporter *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  int64_t v81;
  int64_t v82;
  id v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  char v96;
  int v97;
  char v98;
  char v99;
  unint64_t v100;
  int v101;
  char v102;
  __int128 v103;
  __int128 v104;
  unint64_t v105;
  int v106;
  __int16 v107;
  __int128 v108;
  __int128 v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  char v121;
  char *v122;
  __int128 v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  __int128 v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  char *v133;
  char v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  __int128 v149;
  _BYTE v150[32];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  __int16 v156;
  int v157;
  char v158;

  v141 = a2;
  v142 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v6 = (uint64_t *)((char *)&v139 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v144 = sub_71B4(&qword_29FC28);
  v7 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v9 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PurchaseFailEvent.Model(0);
  __chkstk_darwin(v10);
  v148 = (char *)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = v148 + 264;
  v146 = a1;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_11EB0C();
  v143 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PurchaseFailEvent.Model.CodingKeys, &type metadata for PurchaseFailEvent.Model.CodingKeys, v14, v12, v13);
  if (v2)
  {
    v147 = v2;
    v20 = 0;
    v21 = v148;
    sub_7DAC(v146);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v15 = v10;
    v140 = v6;
    v16 = v7;
    v17 = v142;
    v158 = 0;
    v18 = sub_573A0();
    v19 = v144;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for AltContentTypeExposureData, &v158, v144, &type metadata for AltContentTypeExposureData, v18);
    v84 = v151;
    v85 = BYTE8(v151);
    v86 = *(_OWORD *)v150;
    v87 = v148;
    *(_OWORD *)v148 = v149;
    *((_OWORD *)v87 + 1) = v86;
    *((_OWORD *)v87 + 2) = *(_OWORD *)&v150[16];
    *((_QWORD *)v87 + 6) = v84;
    v87[56] = v85;
    v158 = 1;
    v88 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v149, &type metadata for ContentData, &v158, v19, &type metadata for ContentData, v88);
    v89 = *((_QWORD *)&v149 + 1);
    v90 = v150[0];
    v91 = *(_OWORD *)&v150[8];
    v92 = *(_QWORD *)&v150[24];
    v93 = v151;
    v94 = WORD4(v151);
    v95 = HIDWORD(v151);
    v96 = v152;
    v97 = DWORD1(v152);
    v98 = BYTE8(v152);
    v99 = BYTE13(v152);
    *((_QWORD *)v87 + 8) = v149;
    *((_QWORD *)v87 + 9) = v89;
    v87[80] = v90;
    *(_OWORD *)(v87 + 88) = v91;
    *((_QWORD *)v87 + 13) = v92;
    *((_QWORD *)v87 + 14) = v93;
    *((_WORD *)v87 + 60) = v94;
    *((_DWORD *)v87 + 31) = v95;
    v87[128] = v96;
    *((_DWORD *)v87 + 33) = v97;
    v87[136] = v98;
    *(_DWORD *)(v87 + 137) = *(_DWORD *)((char *)&v152 + 9);
    v87[141] = v99;
    *((_OWORD *)v87 + 9) = v153;
    v158 = 2;
    v100 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for ContentStoreData, &v158, v19, &type metadata for ContentStoreData, v100);
    v101 = v152;
    v102 = BYTE4(v152);
    v103 = *(_OWORD *)v150;
    *((_OWORD *)v87 + 10) = v149;
    *((_OWORD *)v87 + 11) = v103;
    v104 = v151;
    *((_OWORD *)v87 + 12) = *(_OWORD *)&v150[16];
    *((_OWORD *)v87 + 13) = v104;
    v87[228] = v102;
    *((_DWORD *)v87 + 56) = v101;
    v158 = 3;
    v105 = sub_57428();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for ContentExposureData, &v158, v19, &type metadata for ContentExposureData, v105);
    v106 = v155;
    v107 = v156;
    v108 = *(_OWORD *)v150;
    *(_OWORD *)(v87 + 232) = v149;
    *(_OWORD *)(v87 + 248) = v108;
    v109 = v151;
    v110 = v145;
    *(_OWORD *)v145 = *(_OWORD *)&v150[16];
    *((_OWORD *)v110 + 1) = v109;
    v111 = v153;
    *((_OWORD *)v110 + 2) = v152;
    *((_OWORD *)v110 + 3) = v111;
    *((_OWORD *)v110 + 4) = v154;
    *((_WORD *)v110 + 42) = v107;
    *((_DWORD *)v110 + 20) = v106;
    v158 = 4;
    v112 = sub_5746C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for PrevAltContentExposureData, &v158, v19, &type metadata for PrevAltContentExposureData, v112);
    *((_WORD *)v87 + 175) = v149;
    v158 = 5;
    v113 = sub_340BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v149, &type metadata for PurchaseData, &v158, v19, &type metadata for PurchaseData, v113);
    v114 = *((_QWORD *)&v149 + 1);
    v115 = v150[0];
    v116 = v150[1];
    v117 = *(_QWORD *)&v150[8];
    v118 = *(_QWORD *)&v150[16];
    *((_QWORD *)v87 + 44) = v149;
    *((_QWORD *)v87 + 45) = v114;
    v87[368] = v115;
    v87[369] = v116;
    *((_QWORD *)v87 + 47) = v117;
    *((_QWORD *)v87 + 48) = v118;
    v158 = 6;
    v119 = sub_11F4B0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v149, &type metadata for PurchaseFailData, &v158, v19, &type metadata for PurchaseFailData, v119);
    v120 = DWORD1(v149);
    v121 = BYTE8(v149);
    v87[392] = v149;
    *((_DWORD *)v87 + 99) = v120;
    v122 = v145;
    v145[136] = v121;
    v123 = *(_OWORD *)&v150[16];
    *((_OWORD *)v122 + 9) = *(_OWORD *)v150;
    *((_OWORD *)v122 + 10) = v123;
    v158 = 7;
    v124 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for UpSellData, &v158, v19, &type metadata for UpSellData, v124);
    v125 = *(_QWORD *)v150;
    *((_OWORD *)v145 + 11) = v149;
    *((_QWORD *)v87 + 57) = v125;
    v158 = 8;
    v126 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for SeriesData, &v158, v19, &type metadata for SeriesData, v126);
    v157 = 1;
    v127 = *(_OWORD *)v150;
    *((_OWORD *)v87 + 29) = v149;
    *((_OWORD *)v87 + 30) = v127;
    *((_OWORD *)v87 + 31) = *(_OWORD *)&v150[16];
    v158 = 9;
    v128 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for SuggestionData, &v158, v19, &type metadata for SuggestionData, v128);
    v147 = 0;
    v148[512] = v149;
    v158 = 10;
    v129 = sub_574B0();
    v130 = v147;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v149, &type metadata for UppParentContentData, &v158, v144, &type metadata for UppParentContentData, v129);
    v147 = v130;
    if (v130)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v143, v144);
      v131 = 0;
    }
    else
    {
      v133 = v148;
      v134 = v151;
      v135 = *(_OWORD *)v150;
      *(_OWORD *)(v148 + 520) = v149;
      *(_OWORD *)(v133 + 536) = v135;
      *(_OWORD *)(v133 + 552) = *(_OWORD *)&v150[16];
      v133[568] = v134;
      LOBYTE(v149) = 11;
      v136 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
      v137 = v147;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v140, v17, &v149, v144, v17, v136);
      v147 = v137;
      if (!v137)
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v143, v144);
        v138 = (uint64_t)v148;
        (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 32))(&v148[*(int *)(v15 + 60)], v140, v17);
        sub_11F4F4(v138, v141);
        sub_7DAC(v146);
        sub_11F538(v138);
        return;
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v143, v144);
      v131 = 1;
    }
    v21 = v148;
    sub_7DAC(v146);
    v33 = 1;
    v132 = v157;
    sub_57364(*(_QWORD *)v21, *((_QWORD *)v21 + 1), *((_QWORD *)v21 + 2), *((_QWORD *)v21 + 3), *((_QWORD *)v21 + 4), *((_QWORD *)v21 + 5), *((_QWORD *)v21 + 6));
    LODWORD(v146) = 1;
    LODWORD(v148) = v131;
    v42 = (BAEventReporter *)*((_QWORD *)v21 + 9);
    v43 = v132;
    v44 = (BAEventReporter *)*((_QWORD *)v21 + 12);
    v45 = (BAEventReporter *)*((_QWORD *)v21 + 19);
    swift_bridgeObjectRelease(*((BAEventReporter **)v21 + 14), v46, v47, v48, v49, v50, v51, v52);
    v53 = v44;
    v32 = v43;
    v20 = 1;
    v30 = 1;
    v29 = 1;
    swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
    swift_bridgeObjectRelease(v42, v61, v62, v63, v64, v65, v66, v67);
    v68 = v45;
    v31 = (int)v148;
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
    if ((v146 & 1) != 0)
    {
      sub_57314(*((_QWORD *)v21 + 20), *((_QWORD *)v21 + 21), *((_QWORD *)v21 + 22), *((_QWORD *)v21 + 23), *((_QWORD *)v21 + 24), *((_QWORD *)v21 + 25), *((_QWORD *)v21 + 26), *((_QWORD *)v21 + 27));
      goto LABEL_13;
    }
  }
  if (!v29)
  {
    if (!v30)
      goto LABEL_14;
LABEL_6:
    v34 = (BAEventReporter *)*((_QWORD *)v21 + 45);
    swift_bridgeObjectRelease(*((BAEventReporter **)v21 + 48), v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    if ((v20 & 1) != 0)
      goto LABEL_15;
LABEL_7:
    if (!v33)
      goto LABEL_16;
LABEL_8:
    swift_bridgeObjectRelease(*((BAEventReporter **)v21 + 57), v22, v23, v24, v25, v26, v27, v28);
    if ((v32 & 1) != 0)
      goto LABEL_17;
    goto LABEL_9;
  }
LABEL_13:
  sub_572A4(*((_QWORD *)v21 + 29), *((_QWORD *)v21 + 30), *((_QWORD *)v21 + 31), *((_QWORD *)v21 + 32), *((_QWORD *)v21 + 33), *((_QWORD *)v21 + 34), *((_QWORD *)v21 + 35), *((_QWORD *)v21 + 36), *((_QWORD *)v21 + 37), *((_QWORD *)v21 + 38), *((_QWORD *)v21 + 39), *((_QWORD *)v21 + 40), *((_QWORD *)v21 + 41), *((_QWORD *)v21 + 42));
  if ((v30 & 1) != 0)
    goto LABEL_6;
LABEL_14:
  if (!v20)
    goto LABEL_7;
LABEL_15:
  v76 = (BAEventReporter *)*((_QWORD *)v21 + 54);
  swift_bridgeObjectRelease(*((BAEventReporter **)v21 + 52), v22, v23, v24, v25, v26, v27, v28);
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  if ((v33 & 1) != 0)
    goto LABEL_8;
LABEL_16:
  if (v32)
  {
LABEL_17:
    sub_17788(*((_QWORD *)v21 + 58), *((_QWORD *)v21 + 59), *((_QWORD *)v21 + 60), *((_QWORD *)v21 + 61), *((_QWORD *)v21 + 62), *((_QWORD *)v21 + 63));
    if ((v31 & 1) == 0)
      return;
    goto LABEL_18;
  }
LABEL_9:
  if (!v31)
    return;
LABEL_18:
  sub_57268(*((_QWORD *)v21 + 65), *((_QWORD *)v21 + 66), *((_QWORD *)v21 + 67), *((_QWORD *)v21 + 68), *((_QWORD *)v21 + 69), *((_QWORD *)v21 + 70));
}

unint64_t sub_11F4B0()
{
  unint64_t result;

  result = qword_29FC30;
  if (!qword_29FC30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PurchaseFailData, &type metadata for PurchaseFailData);
    atomic_store(result, (unint64_t *)&qword_29FC30);
  }
  return result;
}

uint64_t sub_11F4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PurchaseFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_11F538(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PurchaseFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_11F574(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PurchaseFailEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_11F588(_QWORD *a1)
{
  return PurchaseFailEvent.Model.encode(to:)(a1);
}

uint64_t sub_11F59C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295980, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29FBD8, (uint64_t)sub_11D648, a1);
}

uint64_t sub_11F5C0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295988, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29FBF0, (uint64_t)sub_11D688, a1);
}

uint64_t sub_11F5E4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v7, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_29FC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v7, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v4, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
  v25 = a2 + a1[14];
  v26 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v25, v4, v26);
  v27 = a2 + a1[15];
  v28 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v27, v7, v28);
}

uint64_t *initializeBufferWithCopyOfBuffer for PurchaseFailEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v52 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v52 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v52);
  }
  else
  {
    v7 = sub_71B4(&qword_2984C0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_2984D0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_2984D8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_2984E0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_29FC08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[14];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_71B4(&qword_2984E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = a3[15];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
  }
  return a1;
}

uint64_t destroy for PurchaseFailEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_29FC08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[14];
  v24 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = a1 + a2[15];
  v26 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
}

uint64_t initializeWithCopy for PurchaseFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_29FC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  return a1;
}

uint64_t assignWithCopy for PurchaseFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_29FC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  return a1;
}

uint64_t initializeWithTake for PurchaseFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_29FC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
  return a1;
}

uint64_t assignWithTake for PurchaseFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_29FC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurchaseFailEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_120680);
}

uint64_t sub_120680(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2984C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984C8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_2984D0);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_2984D8);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_2984E0);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_29FC08);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296F68);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_296310);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_296F78);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v22 = sub_71B4(&qword_2984E8);
                      v12 = *(_QWORD *)(v22 - 8);
                      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                      {
                        v8 = v22;
                        v13 = a3[14];
                      }
                      else
                      {
                        v8 = sub_71B4(&qword_295D70);
                        v12 = *(_QWORD *)(v8 - 8);
                        v13 = a3[15];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PurchaseFailEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_120898);
}

uint64_t sub_120898(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = sub_71B4(&qword_2984C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984C8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_2984D0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_2984D8);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_2984E0);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_29FC08);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296F68);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_296310);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_296F78);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v24 = sub_71B4(&qword_2984E8);
                      v14 = *(_QWORD *)(v24 - 8);
                      if (*(_DWORD *)(v14 + 84) == a3)
                      {
                        v10 = v24;
                        v15 = a4[14];
                      }
                      else
                      {
                        v10 = sub_71B4(&qword_295D70);
                        v14 = *(_QWORD *)(v10 - 8);
                        v15 = a4[15];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_120AAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[12];

  sub_B9C8(319, &qword_2985C0, (uint64_t (*)(void))sub_573A0, (uint64_t (*)(void))sub_568D8, (uint64_t)&type metadata for AltContentTypeExposureData);
  if (v3 <= 0x3F)
  {
    v26[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v26[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
      if (v7 <= 0x3F)
      {
        v26[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_2985D0, (uint64_t (*)(void))sub_57428, (uint64_t (*)(void))sub_56960, (uint64_t)&type metadata for ContentExposureData);
        if (v9 <= 0x3F)
        {
          v26[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_2985D8, (uint64_t (*)(void))sub_5746C, (uint64_t (*)(void))sub_569A4, (uint64_t)&type metadata for PrevAltContentExposureData);
          if (v11 <= 0x3F)
          {
            v26[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_2985E0, (uint64_t (*)(void))sub_340BC, (uint64_t (*)(void))sub_34104, (uint64_t)&type metadata for PurchaseData);
            if (v13 <= 0x3F)
            {
              v26[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&unk_29FCA0, (uint64_t (*)(void))sub_11F4B0, (uint64_t (*)(void))sub_11EB50, (uint64_t)&type metadata for PurchaseFailData);
              if (v15 <= 0x3F)
              {
                v26[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
                if (v17 <= 0x3F)
                {
                  v26[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                  if (v19 <= 0x3F)
                  {
                    v26[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
                    if (v21 <= 0x3F)
                    {
                      v26[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_B9C8(319, (unint64_t *)&unk_2985E8, (uint64_t (*)(void))sub_574B0, (uint64_t (*)(void))sub_569E8, (uint64_t)&type metadata for UppParentContentData);
                      if (v23 <= 0x3F)
                      {
                        v26[10] = *(_QWORD *)(v22 - 8) + 64;
                        sub_8734(319);
                        if (v25 <= 0x3F)
                        {
                          v26[11] = *(_QWORD *)(v24 - 8) + 64;
                          swift_initStructMetadata(a1, 256, 12, v26, a1 + 16);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PurchaseFailEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v10);
    return a1;
  }
  v7 = a2[1];
  if (v7)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  v12 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v13 = a2[12];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v13;
  v14 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v14;
  *(_WORD *)(a1 + 120) = *((_WORD *)a2 + 60);
  v15 = *((_DWORD *)a2 + 31);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_DWORD *)(a1 + 124) = v15;
  *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)((char *)a2 + 137);
  *(_BYTE *)(a1 + 141) = *((_BYTE *)a2 + 141);
  v16 = a2[19];
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = v16;
  v17 = a2[25];
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  if (!v17)
  {
    v27 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 208) = v27;
    *(_QWORD *)(a1 + 221) = *(uint64_t *)((char *)a2 + 221);
    v28 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v28;
    v21 = a2[30];
    if (v21)
      goto LABEL_8;
LABEL_10:
    v29 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v29;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_QWORD *)(a1 + 342) = *(uint64_t *)((char *)a2 + 342);
    v30 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v30;
    v31 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 280) = v31;
    goto LABEL_11;
  }
  v18 = a2[21];
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_QWORD *)(a1 + 168) = v18;
  v19 = a2[23];
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_QWORD *)(a1 + 184) = v19;
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = v17;
  v20 = a2[27];
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = v20;
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  v21 = a2[30];
  if (!v21)
    goto LABEL_10;
LABEL_8:
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = v21;
  v22 = a2[32];
  *(_QWORD *)(a1 + 248) = a2[31];
  *(_QWORD *)(a1 + 256) = v22;
  v23 = a2[34];
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = v23;
  v24 = a2[36];
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_QWORD *)(a1 + 288) = v24;
  v25 = a2[38];
  *(_QWORD *)(a1 + 296) = a2[37];
  *(_QWORD *)(a1 + 304) = v25;
  *(_DWORD *)(a1 + 312) = *((_DWORD *)a2 + 78);
  *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 324);
  v26 = a2[42];
  *(_QWORD *)(a1 + 328) = a2[41];
  *(_QWORD *)(a1 + 336) = v26;
  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 + 86);
  *(_WORD *)(a1 + 348) = *((_WORD *)a2 + 174);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
LABEL_11:
  *(_WORD *)(a1 + 350) = *((_WORD *)a2 + 175);
  v32 = a2[45];
  *(_QWORD *)(a1 + 352) = a2[44];
  *(_QWORD *)(a1 + 360) = v32;
  *(_WORD *)(a1 + 368) = *((_WORD *)a2 + 184);
  v33 = a2[48];
  *(_QWORD *)(a1 + 376) = a2[47];
  *(_QWORD *)(a1 + 384) = v33;
  *(_BYTE *)(a1 + 392) = *((_BYTE *)a2 + 392);
  *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
  *(_DWORD *)(a1 + 396) = *((_DWORD *)a2 + 99);
  v34 = a2[52];
  *(_QWORD *)(a1 + 408) = a2[51];
  *(_QWORD *)(a1 + 416) = v34;
  v35 = a2[54];
  *(_QWORD *)(a1 + 424) = a2[53];
  *(_QWORD *)(a1 + 432) = v35;
  *(_WORD *)(a1 + 440) = *((_WORD *)a2 + 220);
  v36 = a2[57];
  *(_QWORD *)(a1 + 448) = a2[56];
  *(_QWORD *)(a1 + 456) = v36;
  v37 = a2[63];
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  if (v37 == 1)
  {
    v38 = *((_OWORD *)a2 + 30);
    *(_OWORD *)(a1 + 464) = *((_OWORD *)a2 + 29);
    *(_OWORD *)(a1 + 480) = v38;
    *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
  }
  else
  {
    *(_QWORD *)(a1 + 464) = a2[58];
    *(_BYTE *)(a1 + 472) = *((_BYTE *)a2 + 472);
    *(_QWORD *)(a1 + 480) = a2[60];
    *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
    *(_WORD *)(a1 + 489) = *(_WORD *)((char *)a2 + 489);
    *(_QWORD *)(a1 + 496) = a2[62];
    *(_QWORD *)(a1 + 504) = v37;
    swift_bridgeObjectRetain(v37);
  }
  *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
  v39 = a2[66];
  if (v39)
  {
    *(_QWORD *)(a1 + 520) = a2[65];
    *(_QWORD *)(a1 + 528) = v39;
    *(_QWORD *)(a1 + 536) = a2[67];
    v40 = a2[68];
    *(_QWORD *)(a1 + 544) = v40;
    *(_QWORD *)(a1 + 552) = a2[69];
    v41 = a2[70];
    *(_QWORD *)(a1 + 560) = v41;
    *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
  }
  else
  {
    v42 = *(_OWORD *)(a2 + 67);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 65);
    *(_OWORD *)(a1 + 536) = v42;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
  }
  v43 = *(int *)(a3 + 60);
  v44 = a1 + v43;
  v45 = (uint64_t)a2 + v43;
  v46 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  return a1;
}

uint64_t destroy for PurchaseFailEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[6]);
  }
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[19]);
  v5 = a1[25];
  if (v5)
  {
    swift_bridgeObjectRelease(a1[21]);
    v6 = a1[23];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[27]);
  }
  v7 = a1[30];
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(a1[32]);
    swift_bridgeObjectRelease(a1[34]);
    swift_bridgeObjectRelease(a1[36]);
    swift_bridgeObjectRelease(a1[38]);
    swift_bridgeObjectRelease(a1[42]);
  }
  swift_bridgeObjectRelease(a1[45]);
  swift_bridgeObjectRelease(a1[48]);
  swift_bridgeObjectRelease(a1[52]);
  swift_bridgeObjectRelease(a1[54]);
  swift_bridgeObjectRelease(a1[57]);
  v8 = a1[63];
  if (v8 != 1)
    swift_bridgeObjectRelease(v8);
  v9 = a1[66];
  if (v9)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a1[68]);
    swift_bridgeObjectRelease(a1[70]);
  }
  v10 = (char *)a1 + *(int *)(a2 + 60);
  v11 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for PurchaseFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  v13 = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = v13;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)(a2 + 137);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  v15 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v16;
    v17 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v17;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v15;
    v18 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v18;
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    v19 = *(_QWORD *)(a2 + 240);
    if (v19)
    {
LABEL_6:
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v19;
      v20 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v20;
      v21 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v21;
      v22 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v22;
      v23 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v23;
      *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
      *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
      v24 = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v24;
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
      *(_WORD *)(a1 + 348) = *(_WORD *)(a2 + 348);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      goto LABEL_9;
    }
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v25;
    *(_QWORD *)(a1 + 221) = *(_QWORD *)(a2 + 221);
    v26 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
    v19 = *(_QWORD *)(a2 + 240);
    if (v19)
      goto LABEL_6;
  }
  v27 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v27;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 342) = *(_QWORD *)(a2 + 342);
  v28 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v28;
  v29 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v29;
LABEL_9:
  *(_WORD *)(a1 + 350) = *(_WORD *)(a2 + 350);
  v30 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v30;
  *(_WORD *)(a1 + 368) = *(_WORD *)(a2 + 368);
  v31 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v31;
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  v32 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v32;
  v33 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v33;
  *(_WORD *)(a1 + 440) = *(_WORD *)(a2 + 440);
  v34 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = v34;
  v35 = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  if (v35 == 1)
  {
    v36 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v36;
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  }
  else
  {
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
    *(_WORD *)(a1 + 489) = *(_WORD *)(a2 + 489);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = v35;
    swift_bridgeObjectRetain(v35);
  }
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  v37 = *(_QWORD *)(a2 + 528);
  if (v37)
  {
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = v37;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    v38 = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 544) = v38;
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    v39 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 560) = v39;
    *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
  }
  else
  {
    v40 = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(a1 + 536) = v40;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  }
  v41 = *(int *)(a3 + 60);
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
  return a1;
}

uint64_t assignWithCopy for PurchaseFailEvent.Model(uint64_t a1, __int128 *a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  BAEventReporter *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  BAEventReporter *v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  uint64_t v52;
  BAEventReporter *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  uint64_t v61;
  BAEventReporter *v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  int v70;
  int v71;
  uint64_t v72;
  BAEventReporter *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  int64_t v78;
  int64_t v79;
  id v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  BAEventReporter *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  int64_t v90;
  int64_t v91;
  id v92;
  uint64_t v93;
  BAEventReporter *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  int64_t v99;
  int64_t v100;
  id v101;
  uint64_t v102;
  BAEventReporter *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  int64_t v108;
  int64_t v109;
  id v110;
  uint64_t v111;
  BAEventReporter *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  int64_t v117;
  int64_t v118;
  id v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _OWORD *v132;
  __int128 *v133;
  BAEventReporter *v134;
  uint64_t v135;
  uint64_t v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  int64_t v141;
  int64_t v142;
  id v143;
  uint64_t v144;
  BAEventReporter *v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  int64_t v150;
  int64_t v151;
  id v152;
  uint64_t v153;
  BAEventReporter *v154;
  SEL v155;
  id v156;
  id v157;
  id v158;
  int64_t v159;
  int64_t v160;
  id v161;
  uint64_t v162;
  BAEventReporter *v163;
  SEL v164;
  id v165;
  id v166;
  id v167;
  int64_t v168;
  int64_t v169;
  id v170;
  uint64_t v171;
  BAEventReporter *v172;
  SEL v173;
  id v174;
  id v175;
  id v176;
  int64_t v177;
  int64_t v178;
  id v179;
  int v180;
  int v181;
  uint64_t v182;
  BAEventReporter *v183;
  SEL v184;
  id v185;
  id v186;
  id v187;
  int64_t v188;
  int64_t v189;
  id v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  BAEventReporter *v214;
  SEL v215;
  id v216;
  id v217;
  id v218;
  int64_t v219;
  int64_t v220;
  id v221;
  uint64_t v222;
  BAEventReporter *v223;
  SEL v224;
  id v225;
  id v226;
  id v227;
  int64_t v228;
  int64_t v229;
  id v230;
  int v231;
  uint64_t v232;
  BAEventReporter *v233;
  SEL v234;
  id v235;
  id v236;
  id v237;
  int64_t v238;
  int64_t v239;
  id v240;
  uint64_t v241;
  BAEventReporter *v242;
  SEL v243;
  id v244;
  id v245;
  id v246;
  int64_t v247;
  int64_t v248;
  id v249;
  uint64_t v250;
  BAEventReporter *v251;
  SEL v252;
  id v253;
  id v254;
  id v255;
  int64_t v256;
  int64_t v257;
  id v258;
  __int128 *v259;
  __int128 *v260;
  BAEventReporter *v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  SEL v269;
  id v270;
  id v271;
  id v272;
  int64_t v273;
  int64_t v274;
  id v275;
  _OWORD *v276;
  __int128 *v277;
  BAEventReporter *v278;
  uint64_t v279;
  uint64_t v280;
  SEL v281;
  id v282;
  id v283;
  id v284;
  int64_t v285;
  int64_t v286;
  id v287;
  uint64_t v288;
  BAEventReporter *v289;
  SEL v290;
  id v291;
  id v292;
  id v293;
  int64_t v294;
  int64_t v295;
  id v296;
  uint64_t v297;
  BAEventReporter *v298;
  SEL v299;
  id v300;
  id v301;
  id v302;
  int64_t v303;
  int64_t v304;
  id v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    if (v7)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v16 = *((_QWORD *)a2 + 4);
      v17 = *(BAEventReporter **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      v25 = *((_QWORD *)a2 + 6);
      v26 = *(BAEventReporter **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    }
    else
    {
      sub_59D0C((_QWORD *)a1);
      v38 = a2[1];
      v37 = a2[2];
      v39 = *a2;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v38;
      *(_OWORD *)(a1 + 32) = v37;
      *(_OWORD *)a1 = v39;
    }
  }
  else if (v7)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v34 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v34;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v35 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v35;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    v36 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 48) = v36;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
  }
  else
  {
    v40 = *a2;
    v41 = a2[1];
    v42 = a2[2];
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *(_OWORD *)(a1 + 16) = v41;
    *(_OWORD *)(a1 + 32) = v42;
    *(_OWORD *)a1 = v40;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v43 = *((_QWORD *)a2 + 9);
  v44 = *(BAEventReporter **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44, v45, v46, v47, v48, v49, v50, v51);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  v52 = *((_QWORD *)a2 + 12);
  v53 = *(BAEventReporter **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  v61 = *((_QWORD *)a2 + 14);
  v62 = *(BAEventReporter **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_BYTE *)(a1 + 121) = *((_BYTE *)a2 + 121);
  v70 = *((_DWORD *)a2 + 31);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_DWORD *)(a1 + 124) = v70;
  v71 = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v71;
  *(_BYTE *)(a1 + 137) = *((_BYTE *)a2 + 137);
  *(_BYTE *)(a1 + 138) = *((_BYTE *)a2 + 138);
  *(_BYTE *)(a1 + 139) = *((_BYTE *)a2 + 139);
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 140);
  *(_BYTE *)(a1 + 141) = *((_BYTE *)a2 + 141);
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  v72 = *((_QWORD *)a2 + 19);
  v73 = *(BAEventReporter **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
  v81 = (_OWORD *)(a1 + 160);
  v82 = a2 + 10;
  v83 = *((_QWORD *)a2 + 25);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v83)
    {
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      v84 = *((_QWORD *)a2 + 21);
      v85 = *(BAEventReporter **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v84;
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
      *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
      v93 = *((_QWORD *)a2 + 23);
      v94 = *(BAEventReporter **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v93;
      swift_bridgeObjectRetain(v93);
      swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
      *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
      v102 = *((_QWORD *)a2 + 25);
      v103 = *(BAEventReporter **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v102;
      swift_bridgeObjectRetain(v102);
      swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
      *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
      v111 = *((_QWORD *)a2 + 27);
      v112 = *(BAEventReporter **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v111;
      swift_bridgeObjectRetain(v111);
      swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
      v120 = *((_DWORD *)a2 + 56);
      *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
      *(_DWORD *)(a1 + 224) = v120;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 160));
      *v81 = *v82;
      v127 = a2[12];
      v126 = a2[13];
      v128 = a2[11];
      *(_QWORD *)(a1 + 221) = *(_QWORD *)((char *)a2 + 221);
      *(_OWORD *)(a1 + 192) = v127;
      *(_OWORD *)(a1 + 208) = v126;
      *(_OWORD *)(a1 + 176) = v128;
    }
  }
  else if (v83)
  {
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    v121 = *((_QWORD *)a2 + 21);
    *(_QWORD *)(a1 + 168) = v121;
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    v122 = *((_QWORD *)a2 + 23);
    *(_QWORD *)(a1 + 184) = v122;
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    v123 = *((_QWORD *)a2 + 25);
    *(_QWORD *)(a1 + 200) = v123;
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    v124 = *((_QWORD *)a2 + 27);
    *(_QWORD *)(a1 + 216) = v124;
    v125 = *((_DWORD *)a2 + 56);
    *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
    *(_DWORD *)(a1 + 224) = v125;
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v124);
  }
  else
  {
    *v81 = *v82;
    v129 = a2[11];
    v130 = a2[12];
    v131 = a2[13];
    *(_QWORD *)(a1 + 221) = *(_QWORD *)((char *)a2 + 221);
    *(_OWORD *)(a1 + 192) = v130;
    *(_OWORD *)(a1 + 208) = v131;
    *(_OWORD *)(a1 + 176) = v129;
  }
  v132 = (_OWORD *)(a1 + 232);
  v133 = (__int128 *)((char *)a2 + 232);
  v134 = *(BAEventReporter **)(a1 + 240);
  v135 = *((_QWORD *)a2 + 30);
  if (v134)
  {
    if (v135)
    {
      *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
      v136 = *((_QWORD *)a2 + 30);
      *(_QWORD *)(a1 + 240) = v136;
      swift_bridgeObjectRetain(v136);
      swift_bridgeObjectRelease(v134, v137, v138, v139, v140, v141, v142, v143);
      *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
      v144 = *((_QWORD *)a2 + 32);
      v145 = *(BAEventReporter **)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v144;
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRelease(v145, v146, v147, v148, v149, v150, v151, v152);
      *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
      v153 = *((_QWORD *)a2 + 34);
      v154 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v153;
      swift_bridgeObjectRetain(v153);
      swift_bridgeObjectRelease(v154, v155, v156, v157, v158, v159, v160, v161);
      *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
      v162 = *((_QWORD *)a2 + 36);
      v163 = *(BAEventReporter **)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v162;
      swift_bridgeObjectRetain(v162);
      swift_bridgeObjectRelease(v163, v164, v165, v166, v167, v168, v169, v170);
      *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
      v171 = *((_QWORD *)a2 + 38);
      v172 = *(BAEventReporter **)(a1 + 304);
      *(_QWORD *)(a1 + 304) = v171;
      swift_bridgeObjectRetain(v171);
      swift_bridgeObjectRelease(v172, v173, v174, v175, v176, v177, v178, v179);
      v180 = *((_DWORD *)a2 + 78);
      *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
      *(_DWORD *)(a1 + 312) = v180;
      v181 = *((_DWORD *)a2 + 80);
      *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 324);
      *(_DWORD *)(a1 + 320) = v181;
      *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
      v182 = *((_QWORD *)a2 + 42);
      v183 = *(BAEventReporter **)(a1 + 336);
      *(_QWORD *)(a1 + 336) = v182;
      swift_bridgeObjectRetain(v182);
      swift_bridgeObjectRelease(v183, v184, v185, v186, v187, v188, v189, v190);
      v191 = *((_DWORD *)a2 + 86);
      *(_BYTE *)(a1 + 348) = *((_BYTE *)a2 + 348);
      *(_DWORD *)(a1 + 344) = v191;
      *(_BYTE *)(a1 + 349) = *((_BYTE *)a2 + 349);
    }
    else
    {
      sub_59D74((_QWORD *)(a1 + 232));
      v201 = *(__int128 *)((char *)a2 + 280);
      v203 = *v133;
      v202 = *(__int128 *)((char *)a2 + 248);
      *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
      *(_OWORD *)(a1 + 280) = v201;
      *v132 = v203;
      *(_OWORD *)(a1 + 248) = v202;
      v205 = *(__int128 *)((char *)a2 + 312);
      v204 = *(__int128 *)((char *)a2 + 328);
      v206 = *(__int128 *)((char *)a2 + 296);
      *(_QWORD *)(a1 + 342) = *(_QWORD *)((char *)a2 + 342);
      *(_OWORD *)(a1 + 312) = v205;
      *(_OWORD *)(a1 + 328) = v204;
      *(_OWORD *)(a1 + 296) = v206;
    }
  }
  else if (v135)
  {
    *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
    v192 = *((_QWORD *)a2 + 30);
    *(_QWORD *)(a1 + 240) = v192;
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
    v193 = *((_QWORD *)a2 + 32);
    *(_QWORD *)(a1 + 256) = v193;
    *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
    v194 = *((_QWORD *)a2 + 34);
    *(_QWORD *)(a1 + 272) = v194;
    *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
    v195 = *((_QWORD *)a2 + 36);
    *(_QWORD *)(a1 + 288) = v195;
    *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
    v196 = *((_QWORD *)a2 + 38);
    *(_QWORD *)(a1 + 304) = v196;
    v197 = *((_DWORD *)a2 + 78);
    *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
    *(_DWORD *)(a1 + 312) = v197;
    v198 = *((_DWORD *)a2 + 80);
    *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 324);
    *(_DWORD *)(a1 + 320) = v198;
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
    v199 = *((_QWORD *)a2 + 42);
    *(_QWORD *)(a1 + 336) = v199;
    v200 = *((_DWORD *)a2 + 86);
    *(_BYTE *)(a1 + 348) = *((_BYTE *)a2 + 348);
    *(_DWORD *)(a1 + 344) = v200;
    *(_BYTE *)(a1 + 349) = *((_BYTE *)a2 + 349);
    swift_bridgeObjectRetain(v192);
    swift_bridgeObjectRetain(v193);
    swift_bridgeObjectRetain(v194);
    swift_bridgeObjectRetain(v195);
    swift_bridgeObjectRetain(v196);
    swift_bridgeObjectRetain(v199);
  }
  else
  {
    v207 = *v133;
    v208 = *(__int128 *)((char *)a2 + 248);
    v209 = *(__int128 *)((char *)a2 + 280);
    *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
    *(_OWORD *)(a1 + 280) = v209;
    *v132 = v207;
    *(_OWORD *)(a1 + 248) = v208;
    v210 = *(__int128 *)((char *)a2 + 296);
    v211 = *(__int128 *)((char *)a2 + 312);
    v212 = *(__int128 *)((char *)a2 + 328);
    *(_QWORD *)(a1 + 342) = *(_QWORD *)((char *)a2 + 342);
    *(_OWORD *)(a1 + 312) = v211;
    *(_OWORD *)(a1 + 328) = v212;
    *(_OWORD *)(a1 + 296) = v210;
  }
  *(_WORD *)(a1 + 350) = *((_WORD *)a2 + 175);
  *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
  v213 = *((_QWORD *)a2 + 45);
  v214 = *(BAEventReporter **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v213;
  swift_bridgeObjectRetain(v213);
  swift_bridgeObjectRelease(v214, v215, v216, v217, v218, v219, v220, v221);
  *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
  *(_BYTE *)(a1 + 369) = *((_BYTE *)a2 + 369);
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  v222 = *((_QWORD *)a2 + 48);
  v223 = *(BAEventReporter **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v222;
  swift_bridgeObjectRetain(v222);
  swift_bridgeObjectRelease(v223, v224, v225, v226, v227, v228, v229, v230);
  *(_BYTE *)(a1 + 392) = *((_BYTE *)a2 + 392);
  v231 = *((_DWORD *)a2 + 99);
  *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
  *(_DWORD *)(a1 + 396) = v231;
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  v232 = *((_QWORD *)a2 + 52);
  v233 = *(BAEventReporter **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233, v234, v235, v236, v237, v238, v239, v240);
  *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
  v241 = *((_QWORD *)a2 + 54);
  v242 = *(BAEventReporter **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v241;
  swift_bridgeObjectRetain(v241);
  swift_bridgeObjectRelease(v242, v243, v244, v245, v246, v247, v248, v249);
  *(_BYTE *)(a1 + 440) = *((_BYTE *)a2 + 440);
  *(_BYTE *)(a1 + 441) = *((_BYTE *)a2 + 441);
  *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
  v250 = *((_QWORD *)a2 + 57);
  v251 = *(BAEventReporter **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v250;
  swift_bridgeObjectRetain(v250);
  swift_bridgeObjectRelease(v251, v252, v253, v254, v255, v256, v257, v258);
  v259 = (__int128 *)(a1 + 464);
  v260 = a2 + 29;
  v261 = *(BAEventReporter **)(a1 + 504);
  v262 = *((_QWORD *)a2 + 63);
  if (v261 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v262 == 1)
    {
      v263 = *v260;
      v264 = a2[31];
      *(_OWORD *)(a1 + 480) = a2[30];
      *(_OWORD *)(a1 + 496) = v264;
      *v259 = v263;
    }
    else
    {
      *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
      *(_BYTE *)(a1 + 472) = *((_BYTE *)a2 + 472);
      *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
      *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
      *(_BYTE *)(a1 + 489) = *((_BYTE *)a2 + 489);
      *(_BYTE *)(a1 + 490) = *((_BYTE *)a2 + 490);
      *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
      v267 = *((_QWORD *)a2 + 63);
      *(_QWORD *)(a1 + 504) = v267;
      swift_bridgeObjectRetain(v267);
    }
  }
  else if (v262 == 1)
  {
    sub_19008(a1 + 464);
    v266 = a2[30];
    v265 = a2[31];
    *v259 = *v260;
    *(_OWORD *)(a1 + 480) = v266;
    *(_OWORD *)(a1 + 496) = v265;
  }
  else
  {
    *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
    *(_BYTE *)(a1 + 472) = *((_BYTE *)a2 + 472);
    *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
    *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
    *(_BYTE *)(a1 + 489) = *((_BYTE *)a2 + 489);
    *(_BYTE *)(a1 + 490) = *((_BYTE *)a2 + 490);
    *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
    v268 = *((_QWORD *)a2 + 63);
    *(_QWORD *)(a1 + 504) = v268;
    swift_bridgeObjectRetain(v268);
    swift_bridgeObjectRelease(v261, v269, v270, v271, v272, v273, v274, v275);
  }
  *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
  v276 = (_OWORD *)(a1 + 520);
  v277 = (__int128 *)((char *)a2 + 520);
  v278 = *(BAEventReporter **)(a1 + 528);
  v279 = *((_QWORD *)a2 + 66);
  if (v278)
  {
    if (v279)
    {
      *(_QWORD *)(a1 + 520) = *((_QWORD *)a2 + 65);
      v280 = *((_QWORD *)a2 + 66);
      *(_QWORD *)(a1 + 528) = v280;
      swift_bridgeObjectRetain(v280);
      swift_bridgeObjectRelease(v278, v281, v282, v283, v284, v285, v286, v287);
      *(_QWORD *)(a1 + 536) = *((_QWORD *)a2 + 67);
      v288 = *((_QWORD *)a2 + 68);
      v289 = *(BAEventReporter **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = v288;
      swift_bridgeObjectRetain(v288);
      swift_bridgeObjectRelease(v289, v290, v291, v292, v293, v294, v295, v296);
      *(_QWORD *)(a1 + 552) = *((_QWORD *)a2 + 69);
      v297 = *((_QWORD *)a2 + 70);
      v298 = *(BAEventReporter **)(a1 + 560);
      *(_QWORD *)(a1 + 560) = v297;
      swift_bridgeObjectRetain(v297);
      swift_bridgeObjectRelease(v298, v299, v300, v301, v302, v303, v304, v305);
      *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
    }
    else
    {
      sub_59DA8((_QWORD *)(a1 + 520));
      v310 = *(__int128 *)((char *)a2 + 536);
      v309 = *(__int128 *)((char *)a2 + 552);
      v311 = *v277;
      *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
      *(_OWORD *)(a1 + 536) = v310;
      *(_OWORD *)(a1 + 552) = v309;
      *v276 = v311;
    }
  }
  else if (v279)
  {
    *(_QWORD *)(a1 + 520) = *((_QWORD *)a2 + 65);
    v306 = *((_QWORD *)a2 + 66);
    *(_QWORD *)(a1 + 528) = v306;
    *(_QWORD *)(a1 + 536) = *((_QWORD *)a2 + 67);
    v307 = *((_QWORD *)a2 + 68);
    *(_QWORD *)(a1 + 544) = v307;
    *(_QWORD *)(a1 + 552) = *((_QWORD *)a2 + 69);
    v308 = *((_QWORD *)a2 + 70);
    *(_QWORD *)(a1 + 560) = v308;
    *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
    swift_bridgeObjectRetain(v306);
    swift_bridgeObjectRetain(v307);
    swift_bridgeObjectRetain(v308);
  }
  else
  {
    v312 = *v277;
    v313 = *(__int128 *)((char *)a2 + 536);
    v314 = *(__int128 *)((char *)a2 + 552);
    *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
    *(_OWORD *)(a1 + 536) = v313;
    *(_OWORD *)(a1 + 552) = v314;
    *v276 = v312;
  }
  v315 = *(int *)(a3 + 60);
  v316 = a1 + v315;
  v317 = (uint64_t)a2 + v315;
  v318 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v318 - 8) + 24))(v316, v317, v318);
  return a1;
}

uint64_t initializeWithTake for PurchaseFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_QWORD *)(a1 + 221) = *(_QWORD *)(a2 + 221);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  v10 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v10;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 342) = *(_QWORD *)(a2 + 342);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v11;
  *(_WORD *)(a1 + 350) = *(_WORD *)(a2 + 350);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v12 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v12;
  v13 = *(_OWORD *)(a2 + 424);
  v14 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 392) = v14;
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  v15 = *(_OWORD *)(a2 + 464);
  v16 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v16;
  *(_OWORD *)(a1 + 464) = v15;
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  v17 = *(_OWORD *)(a2 + 520);
  v18 = *(_OWORD *)(a2 + 536);
  v19 = *(_OWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(_OWORD *)(a1 + 536) = v18;
  *(_OWORD *)(a1 + 552) = v19;
  v20 = *(int *)(a3 + 60);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)(a1 + 520) = v17;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t assignWithTake for PurchaseFailEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  __int128 v31;
  uint64_t v32;
  BAEventReporter *v33;
  uint64_t v34;
  BAEventReporter *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  int64_t v41;
  id v42;
  uint64_t v43;
  BAEventReporter *v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  uint64_t v52;
  BAEventReporter *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  const char *v61;
  void *v62;
  void *v63;
  void *v64;
  int64_t v65;
  int64_t v66;
  void *v67;
  uint64_t v68;
  BAEventReporter *v69;
  uint64_t v70;
  BAEventReporter *v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  uint64_t v79;
  BAEventReporter *v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  int64_t v85;
  int64_t v86;
  id v87;
  uint64_t v88;
  BAEventReporter *v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  int64_t v94;
  int64_t v95;
  id v96;
  __int128 v97;
  __int128 v98;
  BAEventReporter *v99;
  uint64_t v100;
  uint64_t v101;
  BAEventReporter *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  int64_t v107;
  int64_t v108;
  id v109;
  uint64_t v110;
  BAEventReporter *v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  int64_t v116;
  int64_t v117;
  id v118;
  uint64_t v119;
  BAEventReporter *v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  int64_t v125;
  int64_t v126;
  id v127;
  uint64_t v128;
  BAEventReporter *v129;
  SEL v130;
  id v131;
  id v132;
  id v133;
  int64_t v134;
  int64_t v135;
  id v136;
  uint64_t v137;
  BAEventReporter *v138;
  SEL v139;
  id v140;
  id v141;
  id v142;
  int64_t v143;
  int64_t v144;
  id v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  BAEventReporter *v150;
  uint64_t v151;
  BAEventReporter *v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  int64_t v157;
  int64_t v158;
  id v159;
  uint64_t v160;
  BAEventReporter *v161;
  SEL v162;
  id v163;
  id v164;
  id v165;
  int64_t v166;
  int64_t v167;
  id v168;
  uint64_t v169;
  BAEventReporter *v170;
  SEL v171;
  id v172;
  id v173;
  id v174;
  int64_t v175;
  int64_t v176;
  id v177;
  uint64_t v178;
  BAEventReporter *v179;
  SEL v180;
  id v181;
  id v182;
  id v183;
  int64_t v184;
  int64_t v185;
  id v186;
  const char *v187;
  void *v188;
  void *v189;
  void *v190;
  int64_t v191;
  int64_t v192;
  void *v193;
  BAEventReporter *v194;
  uint64_t v195;
  __int128 v196;
  BAEventReporter *v197;
  uint64_t v198;
  BAEventReporter *v199;
  SEL v200;
  id v201;
  id v202;
  id v203;
  int64_t v204;
  int64_t v205;
  id v206;
  BAEventReporter *v207;
  SEL v208;
  id v209;
  id v210;
  id v211;
  int64_t v212;
  int64_t v213;
  id v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if (v12)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = v12;
      swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(BAEventReporter **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v13;
      swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
      v22 = *(_QWORD *)(a2 + 48);
      v23 = *(BAEventReporter **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v22;
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      goto LABEL_6;
    }
    sub_59D0C((_QWORD *)a1);
  }
  v31 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v31;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
LABEL_6:
  v32 = *(_QWORD *)(a2 + 72);
  v33 = *(BAEventReporter **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v32;
  swift_bridgeObjectRelease(v33, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v34 = *(_QWORD *)(a2 + 96);
  v35 = *(BAEventReporter **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v34;
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  v43 = *(_QWORD *)(a2 + 112);
  v44 = *(BAEventReporter **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v43;
  swift_bridgeObjectRelease(v44, v45, v46, v47, v48, v49, v50, v51);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)(a2 + 137);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  v52 = *(_QWORD *)(a2 + 152);
  v53 = *(BAEventReporter **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v52;
  swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
  if (*(_QWORD *)(a1 + 200))
  {
    if (*(_QWORD *)(a2 + 200))
    {
      v68 = *(_QWORD *)(a2 + 168);
      v69 = *(BAEventReporter **)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v68;
      swift_bridgeObjectRelease(v69, v61, v62, v63, v64, v65, v66, v67);
      v70 = *(_QWORD *)(a2 + 184);
      v71 = *(BAEventReporter **)(a1 + 184);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = v70;
      swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
      v79 = *(_QWORD *)(a2 + 200);
      v80 = *(BAEventReporter **)(a1 + 200);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v79;
      swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
      v88 = *(_QWORD *)(a2 + 216);
      v89 = *(BAEventReporter **)(a1 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v88;
      swift_bridgeObjectRelease(v89, v90, v91, v92, v93, v94, v95, v96);
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
      goto LABEL_11;
    }
    sub_59D40((_QWORD *)(a1 + 160));
  }
  v97 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v97;
  *(_QWORD *)(a1 + 221) = *(_QWORD *)(a2 + 221);
  v98 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v98;
LABEL_11:
  v99 = *(BAEventReporter **)(a1 + 240);
  if (v99)
  {
    v100 = *(_QWORD *)(a2 + 240);
    if (v100)
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v100;
      swift_bridgeObjectRelease(v99, v61, v62, v63, v64, v65, v66, v67);
      v101 = *(_QWORD *)(a2 + 256);
      v102 = *(BAEventReporter **)(a1 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v101;
      swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
      v110 = *(_QWORD *)(a2 + 272);
      v111 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v110;
      swift_bridgeObjectRelease(v111, v112, v113, v114, v115, v116, v117, v118);
      v119 = *(_QWORD *)(a2 + 288);
      v120 = *(BAEventReporter **)(a1 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v119;
      swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
      v128 = *(_QWORD *)(a2 + 304);
      v129 = *(BAEventReporter **)(a1 + 304);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v128;
      swift_bridgeObjectRelease(v129, v130, v131, v132, v133, v134, v135, v136);
      *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
      *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
      v137 = *(_QWORD *)(a2 + 336);
      v138 = *(BAEventReporter **)(a1 + 336);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v137;
      swift_bridgeObjectRelease(v138, v139, v140, v141, v142, v143, v144, v145);
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
      *(_WORD *)(a1 + 348) = *(_WORD *)(a2 + 348);
      goto LABEL_16;
    }
    sub_59D74((_QWORD *)(a1 + 232));
  }
  v146 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v146;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 342) = *(_QWORD *)(a2 + 342);
  v147 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v147;
  v148 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v148;
LABEL_16:
  *(_WORD *)(a1 + 350) = *(_WORD *)(a2 + 350);
  v149 = *(_QWORD *)(a2 + 360);
  v150 = *(BAEventReporter **)(a1 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v149;
  swift_bridgeObjectRelease(v150, v61, v62, v63, v64, v65, v66, v67);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_BYTE *)(a1 + 369) = *(_BYTE *)(a2 + 369);
  v151 = *(_QWORD *)(a2 + 384);
  v152 = *(BAEventReporter **)(a1 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v151;
  swift_bridgeObjectRelease(v152, v153, v154, v155, v156, v157, v158, v159);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  v160 = *(_QWORD *)(a2 + 416);
  v161 = *(BAEventReporter **)(a1 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v160;
  swift_bridgeObjectRelease(v161, v162, v163, v164, v165, v166, v167, v168);
  v169 = *(_QWORD *)(a2 + 432);
  v170 = *(BAEventReporter **)(a1 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v169;
  swift_bridgeObjectRelease(v170, v171, v172, v173, v174, v175, v176, v177);
  *(_WORD *)(a1 + 440) = *(_WORD *)(a2 + 440);
  v178 = *(_QWORD *)(a2 + 456);
  v179 = *(BAEventReporter **)(a1 + 456);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = v178;
  swift_bridgeObjectRelease(v179, v180, v181, v182, v183, v184, v185, v186);
  v194 = *(BAEventReporter **)(a1 + 504);
  if (v194 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
LABEL_19:
    v196 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v196;
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    goto LABEL_21;
  }
  v195 = *(_QWORD *)(a2 + 504);
  if (v195 == 1)
  {
    sub_19008(a1 + 464);
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_WORD *)(a1 + 489) = *(_WORD *)(a2 + 489);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = v195;
  swift_bridgeObjectRelease(v194, v187, v188, v189, v190, v191, v192, v193);
LABEL_21:
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  v197 = *(BAEventReporter **)(a1 + 528);
  if (!v197)
  {
LABEL_25:
    v215 = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(a1 + 536) = v215;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
    goto LABEL_26;
  }
  v198 = *(_QWORD *)(a2 + 528);
  if (!v198)
  {
    sub_59DA8((_QWORD *)(a1 + 520));
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = v198;
  swift_bridgeObjectRelease(v197, v187, v188, v189, v190, v191, v192, v193);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v199 = *(BAEventReporter **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease(v199, v200, v201, v202, v203, v204, v205, v206);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v207 = *(BAEventReporter **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRelease(v207, v208, v209, v210, v211, v212, v213, v214);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
LABEL_26:
  v216 = a3[15];
  v217 = a1 + v216;
  v218 = a2 + v216;
  v219 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v219 - 8) + 40))(v217, v218, v219);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurchaseFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_122598);
}

uint64_t sub_122598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PurchaseFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_122620);
}

uint64_t sub_122620(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t sub_122694(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = "9";
  v4[1] = &unk_2088F0;
  v4[2] = &unk_208908;
  v4[3] = &unk_208920;
  v4[4] = &unk_208938;
  v4[5] = &unk_208950;
  v4[6] = &unk_208968;
  v4[7] = &unk_208980;
  v4[8] = &unk_208998;
  v4[9] = &unk_2089B0;
  v4[10] = &unk_2089C8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PurchaseFailEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1227B8 + 4 * byte_208791[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1227EC + 4 * byte_20878C[v4]))();
}

uint64_t sub_1227EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1227F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1227FCLL);
  return result;
}

uint64_t sub_122808(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x122810);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_122814(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12281C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseFailEvent.Model.CodingKeys()
{
  return &type metadata for PurchaseFailEvent.Model.CodingKeys;
}

unint64_t sub_12283C()
{
  unint64_t result;

  result = qword_29FDB0;
  if (!qword_29FDB0)
  {
    result = swift_getWitnessTable("MH\a", &type metadata for PurchaseFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FDB0);
  }
  return result;
}

unint64_t sub_122884()
{
  unint64_t result;

  result = qword_29FDB8;
  if (!qword_29FDB8)
  {
    result = swift_getWitnessTable(byte_2089EC, &type metadata for PurchaseFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FDB8);
  }
  return result;
}

unint64_t sub_1228CC()
{
  unint64_t result;

  result = qword_29FDC0;
  if (!qword_29FDC0)
  {
    result = swift_getWitnessTable("}H\a", &type metadata for PurchaseFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FDC0);
  }
  return result;
}

uint64_t sub_122910(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0xD00000000000001ALL)
  {
    v4 = 0x800000000021F1E0;
    if (a2 == 0x800000000021F1E0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F1E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021F220)
  {
    v8 = 0x800000000021F220;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F220, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v9 = 0x800000000021F240;
    if (a2 == 0x800000000021F240)
      goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F240, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0x6573616863727570 && a2 == 0xEC00000061746144)
  {
    v10 = 0xEC00000061746144;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6573616863727570, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_33;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x8000000000221910;
    if (a2 == 0x8000000000221910)
      goto LABEL_38;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000221910, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v12 = 0xEA00000000006174;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v13 = 0xEA00000000006174;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v14 = 0xEE00617461446E6FLL;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000000021F260)
  {
    v15 = 0x800000000021F260;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F260, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 11;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t static BooksTreatmentData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_66AAC(*a1, *a2);
}

unint64_t sub_122E20()
{
  return 0xD000000000000019;
}

uint64_t sub_122E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1233FC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_122E64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_122FD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_122E8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_122FD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BooksTreatmentData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_29FDC8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_122FD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BooksTreatmentData.CodingKeys, &type metadata for BooksTreatmentData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_29FDD8);
  v12 = sub_123158(&qword_29FDE0, (uint64_t (*)(void))sub_FAA70, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_122FD4()
{
  unint64_t result;

  result = qword_29FDD0;
  if (!qword_29FDD0)
  {
    result = swift_getWitnessTable(byte_208CA8, &type metadata for BooksTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FDD0);
  }
  return result;
}

uint64_t BooksTreatmentData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_29FDE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_122FD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BooksTreatmentData.CodingKeys, &type metadata for BooksTreatmentData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_29FDD8);
    v13 = sub_123158(&qword_29FDF0, (uint64_t (*)(void))sub_FAA28, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_123158(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_29FDD8);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1231C4()
{
  unint64_t result;

  result = qword_29FDF8;
  if (!qword_29FDF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BooksTreatmentData, &type metadata for BooksTreatmentData);
    atomic_store(result, (unint64_t *)&qword_29FDF8);
  }
  return result;
}

unint64_t sub_12320C()
{
  unint64_t result;

  result = qword_29FE00;
  if (!qword_29FE00)
  {
    result = swift_getWitnessTable("uH\a", &type metadata for BooksTreatmentData);
    atomic_store(result, (unint64_t *)&qword_29FE00);
  }
  return result;
}

uint64_t sub_123250@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return BooksTreatmentData.init(from:)(a1, a2);
}

uint64_t sub_123264(_QWORD *a1)
{
  return BooksTreatmentData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for BooksTreatmentData()
{
  return &type metadata for BooksTreatmentData;
}

uint64_t storeEnumTagSinglePayload for BooksTreatmentData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1232C8 + 4 * byte_208B00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1232E8 + 4 * byte_208B05[v4]))();
}

_BYTE *sub_1232C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1232E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1232F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1232F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_123300(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_123308(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BooksTreatmentData.CodingKeys()
{
  return &type metadata for BooksTreatmentData.CodingKeys;
}

unint64_t sub_123328()
{
  unint64_t result;

  result = qword_29FE08;
  if (!qword_29FE08)
  {
    result = swift_getWitnessTable("qG\a", &type metadata for BooksTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FE08);
  }
  return result;
}

unint64_t sub_123370()
{
  unint64_t result;

  result = qword_29FE10;
  if (!qword_29FE10)
  {
    result = swift_getWitnessTable("1H\a", &type metadata for BooksTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FE10);
  }
  return result;
}

unint64_t sub_1233B8()
{
  unint64_t result;

  result = qword_29FE18;
  if (!qword_29FE18)
  {
    result = swift_getWitnessTable(byte_208C18, &type metadata for BooksTreatmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FE18);
  }
  return result;
}

uint64_t sub_1233FC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000019 && a2 == 0x8000000000220200)
  {
    swift_bridgeObjectRelease(0x8000000000220200);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000000220200, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

BookAnalytics::GiftFailureReason_optional __swiftcall GiftFailureReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::GiftFailureReason_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2681B8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

unint64_t sub_1234DC()
{
  unint64_t result;

  result = qword_29FE20;
  if (!qword_29FE20)
  {
    result = swift_getWitnessTable("%H\a", &type metadata for GiftFailureReason);
    atomic_store(result, (unint64_t *)&qword_29FE20);
  }
  return result;
}

BookAnalytics::GiftFailureReason_optional sub_123520(Swift::String *a1)
{
  return GiftFailureReason.init(rawValue:)(*a1);
}

uint64_t sub_12352C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1236A0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_123588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1236A0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for GiftFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_123620 + 4 * byte_208D05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_123654 + 4 * byte_208D00[v4]))();
}

uint64_t sub_123654(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12365C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x123664);
  return result;
}

uint64_t sub_123670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x123678);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_12367C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_123684(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GiftFailureReason()
{
  return &type metadata for GiftFailureReason;
}

unint64_t sub_1236A0()
{
  unint64_t result;

  result = qword_29FE28;
  if (!qword_29FE28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for GiftFailureReason, &type metadata for GiftFailureReason);
    atomic_store(result, (unint64_t *)&qword_29FE28);
  }
  return result;
}

void __swiftcall GenreData.init(genreId:subGenreId:contentType:)(BookAnalytics::GenreData *__return_ptr retstr, Swift::String genreId, Swift::String_optional subGenreId, Swift::String_optional contentType)
{
  retstr->genreId = genreId;
  retstr->subGenreId = subGenreId;
  retstr->contentType = contentType;
}

unint64_t sub_1236F8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x55746E65746E6F63;
  if (*v0 != 1)
    v1 = 0x49746E65746E6F63;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_123768@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_124070(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_12378C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_123C94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1237B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_123C94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibraryEditActionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = sub_71B4(&qword_29FE30);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v21 = v1[3];
  v22 = v9;
  v10 = v1[4];
  v19 = v1[5];
  v20 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_123C94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibraryEditActionData.CodingKeys, &type metadata for LibraryEditActionData.CodingKeys, v13, v11, v12);
  v26 = 0;
  v14 = v23;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v26, v3);
  if (!v14)
  {
    v16 = v19;
    v15 = v20;
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v21, &v25, v3);
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v24, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void LibraryEditActionData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  uint64_t v18;
  BAEventReporter *v19;
  BAEventReporter *v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  BAEventReporter *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  BAEventReporter *v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;

  v5 = sub_71B4(&qword_29FE40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_123C94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibraryEditActionData.CodingKeys, &type metadata for LibraryEditActionData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v57 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v5);
    v14 = v13;
    v54 = v12;
    v56 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v56, v5);
    v17 = v16;
    v52 = v15;
    v55 = 2;
    swift_bridgeObjectRetain(v16);
    v53 = v17;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
    v20 = v19;
    v21 = v18;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v14, v22, v23, v24, v25, v26, v27, v28);
    v29 = v53;
    *a2 = v54;
    a2[1] = (uint64_t)v14;
    a2[2] = v52;
    a2[3] = (uint64_t)v29;
    a2[4] = v21;
    a2[5] = (uint64_t)v20;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v20, v30, v31, v32, v33, v34, v35, v36);
    swift_bridgeObjectRelease(v29, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(v14, v44, v45, v46, v47, v48, v49, v50);
  }
}

void sub_123B80(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  LibraryEditActionData.init(from:)(a1, a2);
}

uint64_t sub_123B94(_QWORD *a1)
{
  return LibraryEditActionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics21LibraryEditActionDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  if (v4 == *a2 && v5 == v10
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v10, 0), result = 0, (v15 & 1) != 0))
  {
    if (v6 == v11 && v8 == v12
      || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v11, v12, 0), result = 0, (v17 & 1) != 0))
    {
      if (v7 == v13 && v9 == v14)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v13, v14, 0);
    }
  }
  return result;
}

unint64_t sub_123C94()
{
  unint64_t result;

  result = qword_29FE38;
  if (!qword_29FE38)
  {
    result = swift_getWitnessTable(byte_208FCC, &type metadata for LibraryEditActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FE38);
  }
  return result;
}

_QWORD *initializeWithCopy for LibraryEditActionData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for LibraryEditActionData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for SeriesData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for LibraryEditActionData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryEditActionData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryEditActionData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryEditActionData()
{
  return &type metadata for LibraryEditActionData;
}

uint64_t storeEnumTagSinglePayload for LibraryEditActionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_123F18 + 4 * byte_208E25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_123F4C + 4 * byte_208E20[v4]))();
}

uint64_t sub_123F4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_123F54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x123F5CLL);
  return result;
}

uint64_t sub_123F68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x123F70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_123F74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_123F7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryEditActionData.CodingKeys()
{
  return &type metadata for LibraryEditActionData.CodingKeys;
}

unint64_t sub_123F9C()
{
  unint64_t result;

  result = qword_29FE48;
  if (!qword_29FE48)
  {
    result = swift_getWitnessTable("EG\a", &type metadata for LibraryEditActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FE48);
  }
  return result;
}

unint64_t sub_123FE4()
{
  unint64_t result;

  result = qword_29FE50;
  if (!qword_29FE50)
  {
    result = swift_getWitnessTable(byte_208F14, &type metadata for LibraryEditActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FE50);
  }
  return result;
}

unint64_t sub_12402C()
{
  unint64_t result;

  result = qword_29FE58;
  if (!qword_29FE58)
  {
    result = swift_getWitnessTable(byte_208F3C, &type metadata for LibraryEditActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FE58);
  }
  return result;
}

uint64_t sub_124070(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x800000000021EBA0;
    if (a2 == 0x800000000021EBA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EBA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x55746E65746E6F63 && a2 == 0xED00004449726573)
  {
    v6 = 0xED00004449726573;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55746E65746E6F63, 0xED00004449726573, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x49746E65746E6F63 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease(0xE900000000000044);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E65746E6F63, 0xE900000000000044, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t NetworkReachability.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  sockaddr address;

  v1 = swift_allocObject(v0, 24, 7);
  *(_QWORD *)&address.sa_data[6] = 0;
  *(_QWORD *)address.sa_data = 0;
  *(_WORD *)&address.sa_len = 528;
  *(_QWORD *)(v1 + 16) = SCNetworkReachabilityCreateWithAddress(0, &address);
  return v1;
}

BookAnalytics::NetworkReachabilityStatus_optional __swiftcall NetworkReachabilityStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::NetworkReachabilityStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268220, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t NetworkReachabilityStatus.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6863616552746F6ELL;
}

uint64_t sub_124338(char *a1, unsigned __int8 *a2)
{
  return sub_27A04(*a1, *a2);
}

Swift::Int sub_124344()
{
  char *v0;

  return sub_1957A4(*v0);
}

uint64_t sub_12434C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0x800000000021E180;
  if (*v1 != 1)
    v2 = 0x800000000021E1A0;
  if (*v1)
    v3 = 0xD000000000000010;
  else
    v3 = 0x6863616552746F6ELL;
  if (*v1)
    v4 = v2;
  else
    v4 = 0xEC000000656C6261;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1243D8(uint64_t a1)
{
  char *v1;

  return sub_1D3E50(a1, *v1);
}

BookAnalytics::NetworkReachabilityStatus_optional sub_1243E0(Swift::String *a1)
{
  return NetworkReachabilityStatus.init(rawValue:)(*a1);
}

void sub_1243EC(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *v1;
  v3 = 0xEC000000656C6261;
  v4 = 0x800000000021E180;
  if (v2 != 1)
    v4 = 0x800000000021E1A0;
  v5 = v2 == 0;
  if (*v1)
    v6 = 0xD000000000000010;
  else
    v6 = 0x6863616552746F6ELL;
  if (!v5)
    v3 = v4;
  *a1 = v6;
  a1[1] = v3;
}

const __SCNetworkReachability *sub_12445C@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  const __SCNetworkReachability *result;
  char v4;
  BOOL v5;
  SCNetworkReachabilityFlags flags;

  result = *(const __SCNetworkReachability **)(v1 + 16);
  if (result)
  {
    flags = 0;
    result = (const __SCNetworkReachability *)SCNetworkReachabilityGetFlags(result, &flags);
    v4 = 0;
    if ((flags & 2) != 0)
    {
      v4 = (flags & 4) == 0;
      v5 = (flags & 0x10) == 0 || (flags & 4) == 0;
      if ((flags & 0x28) != 0)
        v4 = v5;
      if ((flags & 0x40000) != 0)
        v4 = 2;
    }
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t NetworkReachability.init()()
{
  uint64_t v0;
  SCNetworkReachabilityRef v1;
  void *v2;
  sockaddr address;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)&address.sa_data[6] = 0;
  *(_QWORD *)address.sa_data = 0;
  *(_WORD *)&address.sa_len = 528;
  v1 = SCNetworkReachabilityCreateWithAddress(0, &address);
  v2 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = v1;

  return v0;
}

uint64_t NetworkReachability.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NetworkReachability.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

unint64_t sub_1245B8()
{
  unint64_t result;

  result = qword_29FE60;
  if (!qword_29FE60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NetworkReachabilityStatus, &type metadata for NetworkReachabilityStatus);
    atomic_store(result, (unint64_t *)&qword_29FE60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NetworkReachabilityStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_124648 + 4 * byte_209025[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_12467C + 4 * byte_209020[v4]))();
}

uint64_t sub_12467C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_124684(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x12468CLL);
  return result;
}

uint64_t sub_124698(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1246A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1246A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1246AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkReachabilityStatus()
{
  return &type metadata for NetworkReachabilityStatus;
}

uint64_t type metadata accessor for NetworkReachability()
{
  return objc_opt_self(_TtC13BookAnalytics19NetworkReachability);
}

uint64_t method lookup function for NetworkReachability(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for NetworkReachability);
}

uint64_t dispatch thunk of NetworkReachability.status.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_124700()
{
  _BYTE *v0;

  if (*v0)
    return 0x7263736544706974;
  else
    return 0x7574616546706974;
}

uint64_t sub_12474C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_124CBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_124770(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_124ABC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_124798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_124ABC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ToolTipData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_29FF28);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_124ABC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ToolTipData.CodingKeys, &type metadata for ToolTipData.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

void ToolTipData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;

  v5 = sub_71B4(&qword_29FF38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_124ABC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ToolTipData.CodingKeys, &type metadata for ToolTipData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v36 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
    v14 = v13;
    v35 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v17 = v16;
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19 = v15;
    v18(v8, v5);
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    a2[2] = v19;
    a2[3] = (uint64_t)v17;
    swift_bridgeObjectRetain(v17);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v17, v20, v21, v22, v23, v24, v25, v26);
    swift_bridgeObjectRelease(v14, v27, v28, v29, v30, v31, v32, v33);
  }
}

void sub_124A94(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ToolTipData.init(from:)(a1, a2);
}

uint64_t sub_124AA8(_QWORD *a1)
{
  return ToolTipData.encode(to:)(a1);
}

unint64_t sub_124ABC()
{
  unint64_t result;

  result = qword_29FF30;
  if (!qword_29FF30)
  {
    result = swift_getWitnessTable("iG\a", &type metadata for ToolTipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FF30);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolTipData()
{
  return &type metadata for ToolTipData;
}

uint64_t storeEnumTagSinglePayload for ToolTipData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_124B64 + 4 * byte_20912D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_124B98 + 4 * byte_209128[v4]))();
}

uint64_t sub_124B98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_124BA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x124BA8);
  return result;
}

uint64_t sub_124BB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x124BBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_124BC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_124BC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolTipData.CodingKeys()
{
  return &type metadata for ToolTipData.CodingKeys;
}

unint64_t sub_124BE8()
{
  unint64_t result;

  result = qword_29FF40;
  if (!qword_29FF40)
  {
    result = swift_getWitnessTable(byte_2092A0, &type metadata for ToolTipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FF40);
  }
  return result;
}

unint64_t sub_124C30()
{
  unint64_t result;

  result = qword_29FF48;
  if (!qword_29FF48)
  {
    result = swift_getWitnessTable(byte_209210, &type metadata for ToolTipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FF48);
  }
  return result;
}

unint64_t sub_124C78()
{
  unint64_t result;

  result = qword_29FF50;
  if (!qword_29FF50)
  {
    result = swift_getWitnessTable(byte_209238, &type metadata for ToolTipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29FF50);
  }
  return result;
}

uint64_t sub_124CBC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7574616546706974 && a2 == 0xEA00000000006572)
  {
    v5 = 0xEA00000000006572;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7574616546706974, 0xEA00000000006572, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7263736544706974 && a2 == 0xEE006E6F69747069)
  {
    swift_bridgeObjectRelease(0xEE006E6F69747069);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7263736544706974, 0xEE006E6F69747069, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void *sub_124E28()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR___BAAnalyticsController_applicationTracker);
  swift_beginAccess(v0 + OBJC_IVAR___BAAnalyticsController_applicationTracker, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_124ED0(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR___BAAnalyticsController_applicationTracker);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

void sub_124F20(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR___BAAnalyticsController_applicationTracker);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *sub_124F80(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_applicationTracker, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_124FC4(BAEventReporter **a1, _QWORD *a2)
{
  BAEventReporter *v2;
  BAEventReporter **v3;
  BAEventReporter *v4;
  SEL v5;
  id v6;
  id v7;
  int64_t v8;
  id v9;
  BOOL v10;
  id v11;
  _BYTE v12[24];

  v2 = *a1;
  v3 = (BAEventReporter **)(*a2 + OBJC_IVAR___BAAnalyticsController_sessionManager);
  swift_beginAccess(v3, v12, 1, 0);
  v4 = *v3;
  *v3 = v2;
  swift_retain(v2);
  swift_release(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_12502C()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR___BAAnalyticsController_sessionManager);
  swift_beginAccess(v0 + OBJC_IVAR___BAAnalyticsController_sessionManager, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_125080()
{
  return sub_125214(&OBJC_IVAR___BAAnalyticsController_userConfiguration);
}

uint64_t sub_125098(uint64_t a1)
{
  return sub_1252BC(a1, &OBJC_IVAR___BAAnalyticsController_userConfiguration);
}

uint64_t (*sub_1250A4(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___BAAnalyticsController_userConfiguration;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_125114;
}

uint64_t sub_125124()
{
  return sub_125214(&OBJC_IVAR___BAAnalyticsController_delegate);
}

uint64_t sub_12513C(uint64_t a1)
{
  return sub_1252BC(a1, &OBJC_IVAR___BAAnalyticsController_delegate);
}

uint64_t (*sub_125148(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___BAAnalyticsController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_125114;
}

id sub_1251C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + *a3;
  swift_beginAccess(v3, v5, 0, 0);
  return (id)swift_unknownObjectWeakLoadStrong(v3);
}

uint64_t sub_125208()
{
  return sub_125214(&OBJC_IVAR___BAAnalyticsController_configurationProvider);
}

uint64_t sub_125214(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = v1 + *a1;
  swift_beginAccess(v2, v4, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v2);
}

uint64_t sub_125264(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _BYTE v7[24];

  v5 = a1 + *a4;
  swift_beginAccess(v5, v7, 1, 0);
  return swift_unknownObjectWeakAssign(v5, a3);
}

uint64_t sub_1252B0(uint64_t a1)
{
  return sub_1252BC(a1, &OBJC_IVAR___BAAnalyticsController_configurationProvider);
}

uint64_t sub_1252BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[24];

  v4 = v2 + *a2;
  swift_beginAccess(v4, v6, 1, 0);
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*sub_125310(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___BAAnalyticsController_configurationProvider;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_125114;
}

void sub_125380(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_unknownObjectWeakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

void sub_125510(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v4 = v3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_3A82C(v4, a1, &qword_29F018);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_12558C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_3A82C(a1, a2, &qword_29F018);
}

void sub_1255BC(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BAEventReporter *v6;
  BAEventReporter *v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a2, a2);
  v7 = v6;
  v15 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AnalyticsController.LockProtectedData(0) + 20));
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_DF7C(v5, (uint64_t)v7), (v8 & 1) != 0))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v16);
    v19 = *v17;
    v18 = v17[1];
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *a3 = v19;
  a3[1] = v18;
}

char *AnalyticsController.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  char *v34;
  void *v35;
  char *v36;
  id v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  objc_super v51;
  _QWORD *v52;

  v1 = v0;
  v50 = type metadata accessor for AnalyticsController.LockProtectedData(0);
  __chkstk_darwin(v50);
  v49 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v48 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  __chkstk_darwin(v3);
  v47 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR___BAAnalyticsController_applicationTracker] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___BAAnalyticsController_sessionManager] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR___BAAnalyticsController_userConfiguration], 0);
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR___BAAnalyticsController_delegate], 0);
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR___BAAnalyticsController_configurationProvider], 0);
  *(_QWORD *)&v0[OBJC_IVAR___BAAnalyticsController_assertionProvider] = 0;
  v46 = OBJC_IVAR___BAAnalyticsController_workQueue;
  v45 = sub_131130(0, (unint64_t *)&qword_29CAD0, OS_dispatch_queue_ptr);
  v11 = v0;
  static DispatchQoS.unspecified.getter();
  v52 = _swiftEmptyArrayStorage;
  v12 = sub_7E10(&qword_29FFA8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v43 = v12;
  v13 = sub_71B4(&qword_29FFB0);
  v42 = v13;
  v44 = sub_12EF8C(&qword_29FFB8, &qword_29FFB0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v13, v44, v5, v12);
  v14 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v15 = v47;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 104);
  v16(v47, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000000221970, v10, v7, v15, 0);
  *(_QWORD *)&v1[v46] = v17;
  v18 = OBJC_IVAR___BAAnalyticsController_privateDataQueue;
  static DispatchQoS.unspecified.getter();
  v52 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v42, v44, v5, v43);
  v16(v15, v14, v41);
  v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x8000000000221990, v10, v7, v15, 0);
  dispatch_suspend(v19);
  *(_QWORD *)&v11[v18] = v19;
  v11[OBJC_IVAR___BAAnalyticsController_privateDataQueueActive] = 0;
  v20 = OBJC_IVAR___BAAnalyticsController_privateDataSource;
  *(_QWORD *)&v11[v20] = objc_msgSend(objc_allocWithZone((Class)BAPrivateDataSource), "init");
  v21 = OBJC_IVAR___BAAnalyticsController_sessionStateCondition;
  *(_QWORD *)&v11[v21] = objc_msgSend(objc_allocWithZone((Class)NSCondition), "init");
  v11[OBJC_IVAR___BAAnalyticsController_sessionState] = 0;
  v22 = OBJC_IVAR___BAAnalyticsController_lockProtectedData;
  v23 = type metadata accessor for Date(0);
  v24 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v49, 1, 1, v23);
  v25 = (int *)v50;
  *(_QWORD *)(v24 + *(int *)(v50 + 20)) = &_swiftEmptyDictionarySingleton;
  v26 = v24 + v25[6];
  v27 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = (_QWORD *)(v24 + v25[7]);
  *v28 = 0;
  v28[1] = 0;
  v29 = (_OWORD *)(v24 + v25[8]);
  *v29 = 0u;
  v29[1] = 0u;
  v30 = (_OWORD *)(v24 + v25[9]);
  *v30 = xmmword_209320;
  v30[1] = 0u;
  v30[2] = 0u;
  v30[3] = 0u;
  v30[4] = 0u;
  *(_QWORD *)(v24 + v25[10]) = 0;
  *(_QWORD *)(v24 + v25[11]) = 0;
  v31 = sub_71B4(&qword_29FFE8);
  v32 = swift_allocObject(v31, ((*(unsigned int *)(v31 + 48) + 3) & 0x1FFFFFFFCLL) + 4, *(unsigned __int16 *)(v31 + 52) | 3);
  *(_DWORD *)(v32 + ((*(unsigned int *)(*(_QWORD *)v32 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_125BEC(v24, v32 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v32 + 16));
  sub_125C30(v24);
  *(_QWORD *)&v11[v22] = v32;
  v11[OBJC_IVAR___BAAnalyticsController_userIDResetEventPending] = 0;
  v11[OBJC_IVAR___BAAnalyticsController_privateDataCacheIsCurrent] = 0;
  v11[OBJC_IVAR___BAAnalyticsController_launchedFromShortcutItem] = 0;

  v33 = (objc_class *)type metadata accessor for AnalyticsController();
  v51.receiver = v11;
  v51.super_class = v33;
  v34 = (char *)objc_msgSendSuper2(&v51, "init");
  v35 = *(void **)&v34[OBJC_IVAR___BAAnalyticsController_privateDataSource];
  v36 = v34;
  objc_msgSend(v35, "setDelegate:", v36);
  v37 = objc_msgSend(objc_allocWithZone((Class)BUCountingAssertionProvider), "initWithDelegate:", v36);

  v38 = *(void **)&v36[OBJC_IVAR___BAAnalyticsController_assertionProvider];
  *(_QWORD *)&v36[OBJC_IVAR___BAAnalyticsController_assertionProvider] = v37;

  return v36;
}

uint64_t type metadata accessor for AnalyticsController.LockProtectedData(uint64_t a1)
{
  uint64_t result;

  result = qword_2A01D0;
  if (!qword_2A01D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnalyticsController.LockProtectedData);
  return result;
}

uint64_t sub_125BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnalyticsController.LockProtectedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_125C30(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnalyticsController.LockProtectedData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AnalyticsController()
{
  return objc_opt_self(BAAnalyticsController);
}

id AnalyticsController.__deallocating_deinit()
{
  _BYTE *v0;
  objc_super v2;

  if ((v0[OBJC_IVAR___BAAnalyticsController_privateDataQueueActive] & 1) == 0)
    dispatch_resume(*(dispatch_object_t *)&v0[OBJC_IVAR___BAAnalyticsController_privateDataQueue]);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnalyticsController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_125E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t started;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  BAEventReporter *v33;
  SEL v34;
  id v35;
  id v36;
  int64_t v37;
  id v38;
  BOOL v39;
  id v40;
  BAEventReporter *v41;
  uint64_t v42;
  uint64_t v43;
  SEL v44;
  id v45;
  id v46;
  int64_t v47;
  id v48;
  BOOL v49;
  id v50;
  objc_class *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  id v58;
  void **v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[24];
  objc_super v65;
  char v66[24];
  _QWORD v67[3];

  v0 = type metadata accessor for FlushEvents(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimestampJitter(0);
  __chkstk_darwin(v4);
  v6 = (double *)((char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for SessionManager.Options(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SessionManagerConfiguration(0);
  v61 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_71B4(&qword_2A0008);
  v15 = swift_allocObject(v14, ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72), *(unsigned __int8 *)(v8 + 80) | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1F5FF0;
  static SessionManager.Options.gracefulNoSessionEventSubmission.getter();
  v67[0] = v15;
  v16 = sub_7E10(&qword_2A0010, (uint64_t (*)(uint64_t))&type metadata accessor for SessionManager.Options, (uint64_t)&protocol conformance descriptor for SessionManager.Options);
  v17 = sub_71B4(&qword_2A0018);
  v18 = v63;
  v19 = sub_12EF8C(&qword_2A0020, &qword_2A0018);
  dispatch thunk of SetAlgebra.init<A>(_:)(v67, v17, v19, v7, v16);
  sub_1262BC(v6);
  v20 = sub_71B4(&qword_2A0028);
  v21 = swift_allocObject(v20, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 3 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v21 + 16) = xmmword_209330;
  started = static FlushEvents.didStartSession.getter();
  v23 = static FlushEvents.didEndSession.getter(started);
  static FlushEvents.didLeaveGroup.getter(v23);
  v67[0] = v21;
  v24 = sub_7E10(&qword_2A0030, (uint64_t (*)(uint64_t))&type metadata accessor for FlushEvents, (uint64_t)&protocol conformance descriptor for FlushEvents);
  v25 = sub_71B4(&qword_2A0038);
  v26 = sub_12EF8C((unint64_t *)&unk_2A0040, &qword_2A0038);
  dispatch thunk of SetAlgebra.init<A>(_:)(v67, v25, v26, v0, v24);
  v27 = type metadata accessor for FlushProcessor(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = FlushProcessor.init(flushEvents:flushInterval:)(v3, 60.0);
  v29 = type metadata accessor for DisabledPrivacyValidationProvider(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = DisabledPrivacyValidationProvider.init()();
  SessionManagerConfiguration.init(options:flushProcessor:timestampJitter:privacyValidationProvider:)(v10, v28, v6, v30, &protocol witness table for DisabledPrivacyValidationProvider);
  if (qword_295978 != -1)
    swift_once(&qword_295978, sub_11A7E8);
  v31 = AppSessionManager.createSessionManager(with:)(v13);
  v32 = (uint64_t *)(v18 + OBJC_IVAR___BAAnalyticsController_sessionManager);
  swift_beginAccess(v18 + OBJC_IVAR___BAAnalyticsController_sessionManager, v67, 1, 0);
  v33 = (BAEventReporter *)*v32;
  *v32 = v31;
  swift_release(v33, v34, v35, v36, v37, v38, v39, v40);
  v41 = (BAEventReporter *)*v32;
  if (*v32)
  {
    v42 = swift_retain(*v32);
    v43 = SessionManager.tracker.getter(v42);
    swift_release(v41, v44, v45, v46, v47, v48, v49, v50);
    v51 = (objc_class *)type metadata accessor for BATracker();
    v52 = (char *)objc_allocWithZone(v51);
    v53 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
    v54 = sub_71B4(&qword_299F90);
    v55 = swift_allocObject(v54, 28, 7);
    *(_DWORD *)(v55 + 24) = 0;
    *(_QWORD *)(v55 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)&v52[v53] = v55;
    v56 = &v52[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
    v57 = swift_unknownObjectWeakInit(&v52[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate], 0);
    *(_QWORD *)&v52[OBJC_IVAR____TtC13BookAnalytics9BATracker_aaTracker] = v43;
    swift_beginAccess(v57, v66, 1, 0);
    swift_unknownObjectWeakAssign(v56, v18);
    v65.receiver = v52;
    v65.super_class = v51;
    v58 = objc_msgSendSuper2(&v65, "init");
    v59 = (void **)(v18 + OBJC_IVAR___BAAnalyticsController_applicationTracker);
    swift_beginAccess(v18 + OBJC_IVAR___BAAnalyticsController_applicationTracker, v64, 1, 0);
    v60 = *v59;
    *v59 = v58;

    sub_1267B0();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v13, v62);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1262BC@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t Strong;
  void *v14;
  __CFString *v15;
  id v16;
  uint64_t v17;
  id v18;
  double v19;
  uint64_t v20;
  void *v21;
  __CFString *v22;
  id v23;
  uint64_t v24;
  id v25;
  double v26;
  uint64_t v27;
  void *v28;
  __CFString *v29;
  id v30;
  uint64_t v31;
  id v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  double *v51;
  id v52;
  _BYTE v53[24];
  unsigned __int8 v54[32];

  v51 = a1;
  v2 = sub_71B4((uint64_t *)&unk_2A0340);
  v50 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v48 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_71B4(&qword_29EFF8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static Double.defaultJitterDeviation.getter(v6);
  v11 = static Double.defaultJitterDeviation.getter(v10);
  v12 = v1 + OBJC_IVAR___BAAnalyticsController_configurationProvider;
  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_configurationProvider, v53, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v12);
  if (!Strong)
    goto LABEL_4;
  v14 = (void *)Strong;
  v15 = CFSTR("kBAJitterTimestampEnabled");
  v16 = objc_msgSend(v14, "analyticsControllerConfigurationForKey:", v15);

  swift_unknownObjectRelease(v14);
  _bridgeAnyObjectToAny(_:)(v54, v16);
  swift_unknownObjectRelease(v16);
  v17 = sub_131130(0, (unint64_t *)&unk_2A02F0, NSNumber_ptr);
  if ((swift_dynamicCast(&v52, v54, (char *)&type metadata for Any + 8, v17, 6) & 1) != 0)
  {
    v18 = v52;
    v49 = objc_msgSend(v52, "BOOLValue");

  }
  else
  {
LABEL_4:
    v49 = 0;
  }
  v19 = -v9;
  v20 = swift_unknownObjectWeakLoadStrong(v12);
  if (v20)
  {
    v21 = (void *)v20;
    v22 = CFSTR("kBAJitterTimestampLowerBound");
    v23 = objc_msgSend(v21, "analyticsControllerConfigurationForKey:", v22);

    swift_unknownObjectRelease(v21);
    _bridgeAnyObjectToAny(_:)(v54, v23);
    swift_unknownObjectRelease(v23);
    v24 = sub_131130(0, (unint64_t *)&unk_2A02F0, NSNumber_ptr);
    if ((swift_dynamicCast(&v52, v54, (char *)&type metadata for Any + 8, v24, 6) & 1) != 0)
    {
      v25 = v52;
      objc_msgSend(v52, "doubleValue");
      v19 = v26;

    }
  }
  v27 = swift_unknownObjectWeakLoadStrong(v12);
  if (v27)
  {
    v28 = (void *)v27;
    v29 = CFSTR("kBAJitterTimestampUpperBound");
    v30 = objc_msgSend(v28, "analyticsControllerConfigurationForKey:", v29);

    swift_unknownObjectRelease(v28);
    _bridgeAnyObjectToAny(_:)(v54, v30);
    swift_unknownObjectRelease(v30);
    v31 = sub_131130(0, (unint64_t *)&unk_2A02F0, NSNumber_ptr);
    if ((swift_dynamicCast(&v52, v54, (char *)&type metadata for Any + 8, v31, 6) & 1) != 0)
    {
      v32 = v52;
      objc_msgSend(v52, "doubleValue");
      v11 = v33;

    }
  }
  if (qword_295900 != -1)
    swift_once(&qword_295900, sub_10CBBC);
  v34 = sub_705C(v4, (uint64_t)qword_29EFB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v34, v4);
  UserDefault.wrappedValue.getter(v54, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v54[0] == 1)
  {
    if (qword_295908 != -1)
      swift_once(&qword_295908, sub_10CD60);
    v35 = sub_705C(v2, (uint64_t)qword_29EFC8);
    v36 = v50;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
    v38 = v48;
    v37(v48, v35, v2);
    UserDefault.wrappedValue.getter(v54, v2);
    v39 = *(void (**)(char *, uint64_t))(v36 + 8);
    v39(v38, v2);
    v40 = *(_QWORD *)v54;
    if (qword_295910 != -1)
      swift_once(&qword_295910, sub_10D094);
    v19 = (double)v40;
    v41 = sub_705C(v2, (uint64_t)qword_29EFE0);
    v37(v38, v41, v2);
    UserDefault.wrappedValue.getter(v54, v2);
    v39(v38, v2);
    v11 = (double)*(uint64_t *)v54;
    goto LABEL_20;
  }
  if (v49)
  {
LABEL_20:
    v42 = v51;
    *v51 = v19;
    v42[1] = v11;
    v43 = enum case for TimestampJitter.enabled(_:);
    v44 = type metadata accessor for TimestampJitter(0);
    return (*(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v42, v43, v44);
  }
  v46 = enum case for TimestampJitter.disabled(_:);
  v47 = type metadata accessor for TimestampJitter(0);
  return (*(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v51, v46, v47);
}

void sub_1267B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BAEventReporter *v7;
  BAEventReporter **v8;
  BAEventReporter *v9;
  uint64_t v10;
  BAEventReporter *v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  int64_t v30;
  id v31;
  BOOL v32;
  id v33;
  char *v34;
  void **v35;
  void *v36;
  void *v37;
  id v38;
  const char *v39;
  void *v40;
  void *v41;
  int64_t v42;
  void *v43;
  BOOL v44;
  void *v45;
  BAEventReporter *v46;
  BAEventReporter *v47;
  uint64_t v48;
  BAEventReporter *v49;
  SEL v50;
  id v51;
  id v52;
  int64_t v53;
  id v54;
  BOOL v55;
  id v56;
  uint64_t v57;
  SEL v58;
  id v59;
  id v60;
  int64_t v61;
  id v62;
  BOOL v63;
  id v64;
  SEL v65;
  id v66;
  id v67;
  int64_t v68;
  id v69;
  BOOL v70;
  id v71;
  uint64_t v72;
  BAEventReporter *v73;
  uint64_t v74;
  BAEventReporter *v75;
  SEL v76;
  id v77;
  id v78;
  int64_t v79;
  id v80;
  BOOL v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  SEL v85;
  id v86;
  id v87;
  int64_t v88;
  id v89;
  BOOL v90;
  id v91;
  uint64_t v92;
  void *Strong;
  const char *v94;
  void *v95;
  void *v96;
  int64_t v97;
  void *v98;
  BOOL v99;
  void *v100;
  void *v101;
  id v102;
  BAEventReporter *v103;
  const char *v104;
  void *v105;
  void *v106;
  void *v107;
  int64_t v108;
  int64_t v109;
  void *v110;
  Class isa;
  uint64_t v112;
  BAEventReporter *v113;
  uint64_t v114;
  void *v115;
  int64_t v116;
  int64_t v117;
  void *v118;
  unint64_t v119;
  unint64_t v120;
  BAEventReporter v121;
  BAEventReporter *v122;
  const char *v123;
  void *v124;
  void *v125;
  void *v126;
  int64_t v127;
  int64_t v128;
  void *v129;
  Class v130;
  const char *v131;
  void *v132;
  void *v133;
  int64_t v134;
  void *v135;
  BOOL v136;
  void *v137;
  unsigned __int8 *dataProviders;
  BAEventReporter *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BAEventReporter *v143;
  SEL v144;
  id v145;
  id v146;
  int64_t v147;
  id v148;
  BOOL v149;
  id v150;
  SEL v151;
  id v152;
  id v153;
  int64_t v154;
  id v155;
  BOOL v156;
  id v157;
  BAEventReporter v158;
  _BYTE v159[32];
  BAEventReporter v160;
  _QWORD v161[4];
  char v162[24];
  char v163[24];
  char v164[32];

  v1 = v0;
  v2 = type metadata accessor for LoggingEventProcessorFormat(0);
  __chkstk_darwin(v2);
  v4 = (Class *)((char *)&v158.super.isa - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v4 = 1;
  (*(void (**)(_QWORD *, _QWORD))(v5 + 104))(v4, enum case for LoggingEventProcessorFormat.json(_:));
  v6 = type metadata accessor for LoggingEventProcessor(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = (BAEventReporter *)LoggingEventProcessor.init(logFormat:subsystem:)(v4, 0xD000000000000010, 0x800000000021F2C0);
  v8 = (BAEventReporter **)(v0 + OBJC_IVAR___BAAnalyticsController_sessionManager);
  swift_beginAccess(v0 + OBJC_IVAR___BAAnalyticsController_sessionManager, v164, 0, 0);
  v9 = *v8;
  if (*v8)
  {
    v10 = swift_retain(*v8);
    v11 = (BAEventReporter *)SessionManager.processorManager.getter(v10);
    swift_release(v9, v12, v13, v14, v15, v16, v17, v18);
    v19 = swift_retain(v7);
    ProcessorManager.add(eventProcessor:)(v19, &protocol witness table for LoggingEventProcessor);
    swift_release(v11, v20, v21, v22, v23, v24, v25, v26);
    swift_release(v7, v27, v28, v29, v30, v31, v32, v33);
  }
  if (qword_295978 != -1)
    swift_once(&qword_295978, sub_11A7E8);
  v34 = (char *)qword_29FB10;
  v35 = (void **)(qword_29FB10 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig);
  swift_beginAccess(qword_29FB10 + OBJC_IVAR___BAAppManager_uploadBatchEventConfig, v163, 0, 0);
  v36 = *v35;
  if (*v35)
  {
    type metadata accessor for UploadBatchEventProcessor(0);
    v37 = *(void **)&v34[OBJC_IVAR___BAAppManager_client];
    v38 = v36;
    v46 = (BAEventReporter *)UploadBatchEventProcessor.__allocating_init(client:endpoint:contentType:config:)(v37, v34, 0, v38);
    v47 = *v8;
    if (*v8)
    {
      v48 = swift_retain(*v8);
      v49 = (BAEventReporter *)SessionManager.processorManager.getter(v48);
      swift_release(v47, v50, v51, v52, v53, v54, v55, v56);
      v57 = swift_retain(v46);
      ProcessorManager.add(eventProcessor:)(v57, &protocol witness table for UploadBatchEventProcessor);
      swift_release(v49, v58, v59, v60, v61, v62, v63, v64);
      swift_release(v46, v65, v66, v67, v68, v69, v70, v71);
    }
    swift_release(v46, v39, v40, v41, v42, v43, v44, v45);

  }
  v72 = *(_QWORD *)&v34[OBJC_IVAR___BAAppManager_debugProcessor];
  if (v72)
  {
    v73 = *v8;
    if (*v8)
    {
      swift_retain(*(_QWORD *)&v34[OBJC_IVAR___BAAppManager_debugProcessor]);
      v74 = swift_retain(v73);
      v75 = (BAEventReporter *)SessionManager.processorManager.getter(v74);
      swift_release(v73, v76, v77, v78, v79, v80, v81, v82);
      v83 = sub_7E10(&qword_2A0338, (uint64_t (*)(uint64_t))type metadata accessor for DebugEventProcessor, (uint64_t)&unk_210D14);
      v84 = swift_retain(v72);
      ProcessorManager.add(eventProcessor:)(v84, v83);
      swift_release(v75, v85, v86, v87, v88, v89, v90, v91);
      swift_release_n(v72, 2);
    }
  }
  v92 = v1 + OBJC_IVAR___BAAnalyticsController_delegate;
  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_delegate, v162, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v92);
  if (!Strong)
    goto LABEL_32;
  v101 = Strong;
  v102 = objc_msgSend(Strong, "additionalEventProcessors");
  swift_unknownObjectRelease(v101);
  v103 = (BAEventReporter *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v102, (char *)&type metadata for Any + 8);

  isa = v103[1].super.isa;
  if (isa)
  {
    v112 = (uint64_t)&v103[2];
    swift_bridgeObjectRetain(v103);
    v113 = (BAEventReporter *)_swiftEmptyArrayStorage;
    do
    {
      sub_3A870(v112, (uint64_t)v161);
      sub_3A870((uint64_t)v161, (uint64_t)v159);
      v114 = sub_71B4(&qword_2A0330);
      if ((swift_dynamicCast(&v160, v159, (char *)&type metadata for Any + 8, v114, 6) & 1) == 0)
        v160 = (BAEventReporter)0;
      sub_7DAC(v161);
      if (v160.super.isa)
      {
        v158 = v160;
        if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
          v113 = sub_1DB9F8(0, (int64_t)v113[1].super.isa + 1, 1, v113, v115, v116, v117, v118);
        v120 = (unint64_t)v113[1].super.isa;
        v119 = *(_QWORD *)v113[1].dataProviders;
        v121 = v158;
        if (v120 >= v119 >> 1)
        {
          v122 = sub_1DB9F8((BAEventReporter *)(v119 > 1), v120 + 1, 1, v113, v115, v116, v117, v118);
          v121 = v158;
          v113 = v122;
        }
        v113[1].super.isa = (Class)(v120 + 1);
        v113[v120 + 2] = v121;
      }
      v112 += 32;
      isa = (Class)((char *)isa - 1);
    }
    while (isa);
    swift_bridgeObjectRelease_n(v103, 2);
    v130 = v113[1].super.isa;
    if (v130)
      goto LABEL_25;
    goto LABEL_31;
  }
  swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
  v113 = (BAEventReporter *)_swiftEmptyArrayStorage;
  v130 = (Class)_swiftEmptyArrayStorage[2];
  if (!v130)
  {
LABEL_31:
    swift_bridgeObjectRelease(v113, v123, v124, v125, v126, v127, v128, v129);
LABEL_32:
    swift_release(v7, v94, v95, v96, v97, v98, v99, v100);
    return;
  }
LABEL_25:
  swift_bridgeObjectRetain(v113);
  dataProviders = v113[2].dataProviders;
  do
  {
    v139 = *v8;
    if (*v8)
    {
      v141 = *((_QWORD *)dataProviders - 1);
      v140 = *(_QWORD *)dataProviders;
      swift_unknownObjectRetain(v141);
      v142 = swift_retain(v139);
      v143 = (BAEventReporter *)SessionManager.processorManager.getter(v142);
      swift_release(v139, v144, v145, v146, v147, v148, v149, v150);
      ProcessorManager.add(eventProcessor:)(v141, v140);
      swift_unknownObjectRelease(v141);
      swift_release(v143, v151, v152, v153, v154, v155, v156, v157);
    }
    dataProviders += 16;
    v130 = (Class)((char *)v130 - 1);
  }
  while (v130);
  swift_release(v7, v131, v132, v133, v134, v135, v136, v137);
  swift_bridgeObjectRelease_n(v113, 2);
}

uint64_t sub_126CD0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  Swift::String v24;
  uint64_t v25;
  char v26;
  NSURL *v27;
  char *v28;
  id v29;
  BAEventReporter *v30;
  NSString v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  BAEventReporter *v35;
  NSString v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  BAEventReporter *v47;
  void *v48;
  void *v49;
  id v50;
  BAEventReporter *v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  int64_t v56;
  int64_t v57;
  void *v58;
  Class v59;
  unint64_t v60;
  uint64_t *v61;
  BAEventReporter *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  BAEventReporter *v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  const char *v68;
  void *v69;
  void *v70;
  void *v71;
  int64_t v72;
  int64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  Class isa;
  SEL v81;
  id v82;
  id v83;
  id v84;
  int64_t v85;
  int64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BAEventReporter *v96;
  uint64_t v97;
  BAEventReporter *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Class v107;
  unint64_t v108;
  uint64_t v109;
  BAEventReporter *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unsigned int (*v115)(char *, uint64_t, uint64_t);
  unsigned int v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  BAEventReporter *v124;
  BAEventReporter *v125;
  uint64_t v126;
  BAEventReporter *v127;
  uint64_t v128;
  os_unfair_lock_s *v129;
  uint64_t v130;
  BAEventReporter *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  int64_t v136;
  int64_t v137;
  id v138;
  SEL v139;
  id v140;
  id v141;
  id v142;
  int64_t v143;
  int64_t v144;
  id v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  int64_t v150;
  int64_t v151;
  id v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  int64_t v157;
  int64_t v158;
  id v159;
  SEL v160;
  id v161;
  id v162;
  id v163;
  int64_t v164;
  int64_t v165;
  id v166;
  SEL v167;
  id v168;
  id v169;
  id v170;
  int64_t v171;
  int64_t v172;
  id v173;
  unint64_t v175;
  uint64_t *v176;
  unint64_t v177;
  objc_class **v178;
  objc_class *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  BAEventReporter *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196[11];

  v4 = v3;
  v8 = type metadata accessor for URLComponents(0);
  v195 = *(uint64_t **)(v8 - 8);
  __chkstk_darwin(v8);
  v186 = (char *)&v180 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_71B4((uint64_t *)&unk_2A0050);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v180 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v180 - v14;
  v16 = sub_71B4(&qword_29FB40);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v180 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v187 = (char *)&v180 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v180 - v22;
  v24._countAndFlagsBits = 0x6C7070612E6D6F63;
  v24._object = (void *)0xEA00000000002E65;
  v25 = String.hasPrefix(_:)(v24);
  if ((v25 & 1) != 0)
  {
    v25 = swift_bridgeObjectRetain(a3);
  }
  else
  {
    a3 = 0xE500000000000000;
    a2 = 0x726568746FLL;
  }
  v26 = URL.isFileURL.getter(v25);
  v193 = (BAEventReporter *)a3;
  v194 = v4;
  v191 = v23;
  v192 = a2;
  if ((v26 & 1) != 0)
  {
    v28 = v19;
    v29 = objc_allocWithZone((Class)NSString);
    v30 = (BAEventReporter *)0xE800000000000000;
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v29, "initWithString:", v31);

    v33 = a1;
    URL.pathExtension.getter();
    v35 = v34;
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
    v44 = objc_msgSend(v32, "stringByAppendingPathExtension:", v36);

    if (v44)
    {
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44, v45);
      v30 = v47;

    }
    else
    {
      v46 = 0x6465746361646572;
    }
    URLComponents.init(url:resolvingAgainstBaseURL:)(v33, 0);
    v67 = (unsigned int (*)(char *, uint64_t, uint64_t))v195[6];
    if (v67(v13, 1, v8))
    {
      swift_bridgeObjectRelease(v30, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      v77 = (void *)objc_opt_self(NSString);
      v78 = sub_71B4((uint64_t *)&unk_2A0060);
      v79 = swift_allocObject(v78, 80, 7);
      *(_OWORD *)(v79 + 16) = xmmword_209330;
      *(_QWORD *)(v79 + 32) = 47;
      *(_QWORD *)(v79 + 40) = 0xE100000000000000;
      *(_QWORD *)(v79 + 48) = 0x6465746361646572;
      *(_QWORD *)(v79 + 56) = 0xE800000000000000;
      *(_QWORD *)(v79 + 64) = v46;
      *(_QWORD *)(v79 + 72) = v30;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease((BAEventReporter *)v79, v81, v82, v83, v84, v85, v86, v87);
      v88 = objc_msgSend(v77, "pathWithComponents:", isa);

      v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88, v89);
      v92 = v91;

      URLComponents.path.setter(v90, v92);
    }
    if (v67(v13, 1, v8))
    {
      v93 = type metadata accessor for URL(0);
      v94 = (uint64_t)v28;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v28, 1, 1, v93);
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v188 = 0;
      v189 = 0;
      v100 = 0;
      v101 = 0;
      v190 = 0;
    }
    else
    {
      v102 = v195;
      v103 = v186;
      v104 = ((uint64_t (*)(char *, char *, uint64_t))v195[2])(v186, v13, v8);
      v105 = (uint64_t)v28;
      URLComponents.url.getter(v104);
      ((void (*)(char *, uint64_t))v102[1])(v103, v8);
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v188 = 0;
      v189 = 0;
      v100 = 0;
      v101 = 0;
      v190 = 0;
      v94 = v105;
    }
    goto LABEL_34;
  }
  v190 = a1;
  URL._bridgeToObjectiveC()(v27);
  v49 = v48;
  v50 = objc_msgSend(v48, "bu_dictionaryForQueryItems");

  v51 = (BAEventReporter *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v50, &type metadata for String, &type metadata for String, &protocol witness table for String);
  v59 = v51[1].super.isa;
  if (!v59)
  {
    v75 = 0;
    v76 = 0;
    v62 = 0;
    v182 = 0;
LABEL_22:
    v181 = 0;
    v66 = 0;
    goto LABEL_23;
  }
  v60 = sub_DF7C(0x6E676961706D6163, 0xEB0000000064695FLL);
  if ((v52 & 1) != 0)
  {
    v61 = (uint64_t *)(*(_QWORD *)v51[3].dataProviders + 16 * v60);
    v62 = (BAEventReporter *)v61[1];
    v182 = *v61;
    swift_bridgeObjectRetain(v62);
    v59 = v51[1].super.isa;
    if (v59)
      goto LABEL_10;
    goto LABEL_21;
  }
  v182 = 0;
  v62 = 0;
  v59 = v51[1].super.isa;
  if (!v59)
  {
LABEL_21:
    v75 = 0;
    v76 = 0;
    goto LABEL_22;
  }
LABEL_10:
  v63 = sub_DF7C(29795, 0xE200000000000000);
  if ((v52 & 1) != 0)
  {
    v64 = (uint64_t *)(*(_QWORD *)v51[3].dataProviders + 16 * v63);
    v65 = *v64;
    v66 = (BAEventReporter *)v64[1];
    swift_bridgeObjectRetain(v66);
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  v59 = v51[1].super.isa;
  v181 = v65;
  if (!v59)
  {
    v75 = 0;
    v76 = 0;
    goto LABEL_23;
  }
  v175 = sub_DF7C(29793, 0xE200000000000000);
  if ((v52 & 1) == 0)
  {
    v76 = 0;
    v75 = 0;
    v59 = v51[1].super.isa;
    if (v59)
      goto LABEL_42;
LABEL_23:
    v106 = 0;
    goto LABEL_24;
  }
  v176 = (uint64_t *)(*(_QWORD *)v51[3].dataProviders + 16 * v175);
  v76 = *v176;
  v75 = v176[1];
  swift_bridgeObjectRetain(v75);
  v59 = v51[1].super.isa;
  if (!v59)
    goto LABEL_23;
LABEL_42:
  v177 = sub_DF7C(0x7463737469, 0xE500000000000000);
  if ((v52 & 1) == 0)
  {
    v59 = 0;
    goto LABEL_23;
  }
  v178 = (objc_class **)(*(_QWORD *)v51[3].dataProviders + 16 * v177);
  v179 = *v178;
  v106 = (uint64_t)v178[1];
  swift_bridgeObjectRetain(v106);
  v59 = v179;
LABEL_24:
  v183 = (uint64_t)v59;
  v107 = v51[1].super.isa;
  v185 = v76;
  v184 = v106;
  if (v107 && (v108 = sub_DF7C(0x6763737469, 0xE500000000000000), (v52 & 1) != 0))
  {
    v109 = v75;
    v110 = v66;
    v96 = v62;
    v111 = (uint64_t *)(*(_QWORD *)v51[3].dataProviders + 16 * v108);
    v113 = *v111;
    v112 = v111[1];
    swift_bridgeObjectRetain(v112);
  }
  else
  {
    v109 = v75;
    v110 = v66;
    v96 = v62;
    v113 = 0;
    v112 = 0;
  }
  v114 = v15;
  swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v190, 0);
  v115 = (unsigned int (*)(char *, uint64_t, uint64_t))v195[6];
  if (!v115(v114, 1, v8))
    URLComponents.query.setter(0, 0);
  v189 = v113;
  v190 = v112;
  v116 = v115(v114, 1, v8);
  v188 = v109;
  if (v116)
  {
    v117 = type metadata accessor for URL(0);
    v94 = (uint64_t)v187;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v187, 1, 1, v117);
  }
  else
  {
    v118 = v195;
    v119 = v186;
    v120 = ((uint64_t (*)(char *, char *, uint64_t))v195[2])(v186, v114, v8);
    v121 = v187;
    URLComponents.url.getter(v120);
    v122 = v119;
    v94 = (uint64_t)v121;
    ((void (*)(char *, uint64_t))v118[1])(v122, v8);
  }
  v95 = v182;
  v98 = v110;
  v13 = v114;
  v97 = v181;
  v99 = v185;
  v101 = v184;
  v100 = v183;
LABEL_34:
  v123 = (uint64_t)v191;
  sub_1B1BC(v94, (uint64_t)v191, &qword_29FB40);
  sub_88F50((uint64_t)v13, (uint64_t *)&unk_2A0050);
  v195 = &v180;
  v196[0] = v95;
  v196[1] = (uint64_t)v96;
  v196[2] = v97;
  v196[3] = (uint64_t)v98;
  v124 = (BAEventReporter *)v188;
  v196[4] = v99;
  v196[5] = v188;
  v196[6] = v100;
  v196[7] = v101;
  v125 = (BAEventReporter *)v101;
  v126 = *(_QWORD *)(v194 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v127 = (BAEventReporter *)v190;
  v196[8] = v189;
  v196[9] = v190;
  v128 = v126 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v126 + 16);
  v129 = (os_unfair_lock_s *)(v126 + ((*(unsigned int *)(*(_QWORD *)v126 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v129);
  v130 = v128;
  v131 = v193;
  sub_127518(v130, v192, (uint64_t)v193, v123, v196);
  os_unfair_lock_unlock(v129);
  swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
  swift_bridgeObjectRelease(v96, v139, v140, v141, v142, v143, v144, v145);
  swift_bridgeObjectRelease(v98, v146, v147, v148, v149, v150, v151, v152);
  swift_bridgeObjectRelease(v124, v153, v154, v155, v156, v157, v158, v159);
  swift_bridgeObjectRelease(v125, v160, v161, v162, v163, v164, v165, v166);
  swift_bridgeObjectRelease(v127, v167, v168, v169, v170, v171, v172, v173);
  sub_128DC0();
  return sub_88F50(v123, &qword_29FB40);
}

uint64_t sub_127518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t *v19;
  BAEventReporter *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BAEventReporter *v31;
  BAEventReporter *v32;
  unint64_t v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  int64_t v38;
  int64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BAEventReporter *v75;

  v10 = *a5;
  v72 = a5[1];
  v73 = v10;
  v11 = a5[2];
  v70 = a5[3];
  v71 = v11;
  v12 = a5[4];
  v68 = a5[5];
  v69 = v12;
  v13 = a5[6];
  v66 = a5[7];
  v67 = v13;
  v14 = a5[8];
  v64 = a5[9];
  v65 = v14;
  v15 = sub_71B4(&qword_29FB40);
  __chkstk_darwin(v15);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for AnalyticsController.LockProtectedData(0);
  v19 = (uint64_t *)(a1 + v18[7]);
  v20 = (BAEventReporter *)v19[1];
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  *v19 = a2;
  v19[1] = a3;
  sub_131350(a4, a1 + v18[6]);
  sub_3A82C(a4, (uint64_t)v17, &qword_29FB40);
  v28 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v17, 1, v28) == 1)
  {
    sub_88F50((uint64_t)v17, &qword_29FB40);
  }
  else
  {
    v63 = a2;
    v30 = URL.absoluteString.getter();
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v28);
    v74 = v30;
    v75 = v32;
    v33 = sub_130F60();
    if ((Collection.isNotEmpty.getter(&type metadata for String, v33) & 1) != 0)
    {
      v41 = (uint64_t *)(a1 + v18[8]);
      v42 = *v41;
      v62 = v41[1];
      v43 = v41[2];
      v44 = v41[3];
      swift_bridgeObjectRetain(a3);
      sub_1BF00(v42, v62, v43, v44);
      *v41 = v63;
      v41[1] = a3;
      v41[2] = v30;
      v41[3] = (uint64_t)v32;
    }
    else
    {
      swift_bridgeObjectRelease(v32, v34, v35, v36, v37, v38, v39, v40);
    }
  }
  v45 = (uint64_t *)(a1 + v18[9]);
  v46 = *v45;
  v62 = v45[1];
  v63 = v46;
  v47 = v45[3];
  v61 = v45[2];
  v48 = v45[4];
  v49 = v45[5];
  v50 = v45[6];
  v51 = v45[7];
  v52 = v45[8];
  v53 = v45[9];
  sub_131398(a5);
  result = sub_13108C(v63, v62, v61, v47, v48, v49, v50, v51, v52, v53);
  v55 = v72;
  *v45 = v73;
  v45[1] = v55;
  v56 = v70;
  v45[2] = v71;
  v45[3] = v56;
  v57 = v68;
  v45[4] = v69;
  v45[5] = v57;
  v58 = v66;
  v45[6] = v67;
  v45[7] = v58;
  v59 = v64;
  v45[8] = v65;
  v45[9] = v59;
  return result;
}

void sub_12785C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BAEventReporter *v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  BAEventReporter *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  void **v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  int64_t v21;
  int64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  int64_t v40;
  id v41;
  BOOL v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  uint64_t v51;
  BAEventReporter *v52;
  _QWORD v53[4];

  v2 = v1;
  if (a1)
  {
    sub_AE72C(v53);
    v3 = (BAEventReporter *)v53[0];
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v5 = v4 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  v7 = *(int *)(type metadata accessor for AnalyticsController.LockProtectedData(0) + 40);
  v8 = *(BAEventReporter **)(v5 + v7);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v8, v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(v5 + v7) = v3;
  os_unfair_lock_unlock(v6);
  v16 = (void **)(v2 + OBJC_IVAR___BAAnalyticsController_applicationTracker);
  swift_beginAccess(v2 + OBJC_IVAR___BAAnalyticsController_applicationTracker, v53, 0, 0);
  v24 = (char *)*v16;
  if (*v16)
  {
    v25 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
    v26 = *(_QWORD *)&v24[OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory];
    v27 = v24;
    swift_retain(v26);
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
    sub_10EB70((BAEventReporter **)(v26 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
    swift_release((BAEventReporter *)v26, v28, v29, v30, v31, v32, v33, v34);
    v35 = sub_10ED10();
    Tracker.pop<A>(type:)(&type metadata for BooksTreatmentData, &type metadata for BooksTreatmentData, v35);
    if (v3)
    {
      v51 = (uint64_t)&v51;
      v52 = v3;
      v36 = *(_QWORD *)&v24[v25];
      swift_retain(v36);
      os_unfair_lock_lock((os_unfair_lock_t)(v36 + 24));
      sub_12E4FC((BAEventReporter **)(v36 + 16), (uint64_t)v3, 0);
      os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 24));
      swift_release((BAEventReporter *)v36, v37, v38, v39, v40, v41, v42, v43);
      Tracker.push<A>(data:traits:file:line:)(&v52, _swiftEmptyArrayStorage, 0xD000000000000069, 0x80000000002219C0, 210, &type metadata for BooksTreatmentData, v35);
      swift_bridgeObjectRelease(v3, v44, v45, v46, v47, v48, v49, v50);
    }

  }
  else
  {
    swift_bridgeObjectRelease(v3, v17, v18, v19, v20, v21, v22, v23);
  }
  sub_128DC0();
}

void sub_127AD0(objc_class *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v6 = v5 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_127B64(v6, a1, a2);
  os_unfair_lock_unlock(v7);
  sub_128DC0();
}

void sub_127B64(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  unint64_t v9;
  BAEventReporter *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  BAEventReporter *v18;
  BAEventReporter *v19;
  uint64_t isa;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  int64_t v32;
  int64_t v33;
  void *v34;
  Class v35;
  unsigned __int8 *dataProviders;
  uint64_t v37;
  BAEventReporter *v38;
  Swift::String v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  int64_t v51;
  int64_t v52;
  void *v53;
  const char *v54;
  void *v55;
  void *v56;
  void *v57;
  int64_t v58;
  int64_t v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  BAEventReporter *v63;
  unint64_t v64;
  SEL v65;
  char v66;
  id v67;
  id v68;
  id v69;
  int64_t v70;
  int64_t v71;
  id v72;
  const char *v73;
  void *v74;
  void *v75;
  void *v76;
  int64_t v77;
  int64_t v78;
  void *v79;
  BAEventReporter *v80;
  BAEventReporter *v81;
  uint64_t v82;
  objc_class *v83;
  _QWORD v84[4];
  uint64_t v85;

  v6 = *(int *)(type metadata accessor for AnalyticsController.LockProtectedData(0) + 44);
  v7 = *(BAEventReporter **)(a1 + v6);
  if (v7)
    v8 = *(BAEventReporter **)(a1 + v6);
  else
    v8 = (BAEventReporter *)_swiftEmptyArrayStorage;
  v84[2] = a2;
  v84[3] = a3;
  v84[0] = 95;
  v84[1] = 0xE100000000000000;
  v9 = sub_13130C();
  swift_bridgeObjectRetain(v7);
  v10 = (BAEventReporter *)StringProtocol.components<A>(separatedBy:)(v84, &type metadata for String, &type metadata for String, v9, v9);
  v18 = v10;
  if (!v10[1].super.isa)
  {
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    goto LABEL_13;
  }
  v83 = a2;
  v85 = v6;
  isa = (uint64_t)v10[2].super.isa;
  v19 = *(BAEventReporter **)v10[2].dataProviders;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18, v21, v22, v23, v24, v25, v26, v27);
  v35 = v8[1].super.isa;
  if (!v35)
  {
    swift_bridgeObjectRelease(v19, v28, v29, v30, v31, v32, v33, v34);
LABEL_12:
    v6 = v85;
    a2 = v83;
    goto LABEL_13;
  }
  v82 = a1;
  swift_bridgeObjectRetain_n(v8, 2);
  dataProviders = v8[2].dataProviders;
  while (1)
  {
    v37 = *((_QWORD *)dataProviders - 1);
    v38 = *(BAEventReporter **)dataProviders;
    swift_bridgeObjectRetain(*(_QWORD *)dataProviders);
    v39._countAndFlagsBits = isa;
    v39._object = v19;
    if (String.hasPrefix(_:)(v39))
      break;
    dataProviders += 16;
    swift_bridgeObjectRelease(v38, v40, v41, v42, v43, v44, v45, v46);
    v35 = (Class)((char *)v35 - 1);
    if (!v35)
    {
      swift_bridgeObjectRelease(v19, v47, v48, v49, v50, v51, v52, v53);
      swift_bridgeObjectRelease_n(v8, 2);
      a1 = v82;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease(v19, v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease_n(v8, 2);
  v64 = sub_127DE4(v37, (uint64_t)v38, v8);
  v66 = (char)v65;
  swift_bridgeObjectRelease(v38, v65, v67, v68, v69, v70, v71, v72);
  a1 = v82;
  v6 = v85;
  a2 = v83;
  if ((v66 & 1) != 0)
  {
LABEL_13:
    swift_bridgeObjectRetain(a3);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_1DBB04(0, (int64_t)v8[1].super.isa + 1, 1, v8, v57, v58, v59, v60);
    v62 = (unint64_t)v8[1].super.isa;
    v61 = *(_QWORD *)v8[1].dataProviders;
    if (v62 >= v61 >> 1)
      v8 = sub_1DBB04((BAEventReporter *)(v61 > 1), v62 + 1, 1, v8, v57, v58, v59, v60);
    v8[1].super.isa = (Class)(v62 + 1);
    v63 = &v8[v62];
    v63[2].super.isa = a2;
    *(_QWORD *)v63[2].dataProviders = a3;
    goto LABEL_18;
  }
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) != 0)
  {
    if ((v64 & 0x8000000000000000) == 0)
      goto LABEL_22;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v8 = sub_1CE8A4((uint64_t)v8, (uint64_t)v73, (uint64_t)v74, (uint64_t)v75, v76, v77, v78, v79);
  if ((v64 & 0x8000000000000000) != 0)
    goto LABEL_25;
LABEL_22:
  if ((Class)v64 < v8[1].super.isa)
  {
    v80 = &v8[v64];
    v81 = *(BAEventReporter **)v80[2].dataProviders;
    v80[2].super.isa = v83;
    *(_QWORD *)v80[2].dataProviders = a3;
    swift_bridgeObjectRelease(v7, v73, v74, v75, v76, v77, v78, v79);
    v7 = v81;
LABEL_18:
    swift_bridgeObjectRelease(v7, v54, v55, v56, v57, v58, v59, v60);
    *(_QWORD *)(a1 + v6) = v8;
    return;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_127DE4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  v9 = v7 == a1 && v8 == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0) & 1) != 0)
    return 0;
  v11 = 0;
  v12 = a3 + 7;
  v13 = 1;
  while (1)
  {
    if (v3 == v13)
      return 0;
    ++v11;
    v14 = *(v12 - 1);
    v15 = *v12;
    if (v14 == a1 && v15 == a2)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0);
    result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0)
      return result;
  }
  return v11;
}

void sub_127F7C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR___BAAnalyticsController_launchedFromShortcutItem) = 1;
}

void sub_127FA4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR___BAAnalyticsController_launchedFromShortcutItem) = 0;
}

void sub_127FC4(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  BAEventReporter *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  uint64_t v28;
  BAEventReporter *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  _QWORD *v37;
  void *v38;
  id v39;
  BAEventReporter *v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  Class isa;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  BAEventReporter *v56;
  SEL v57;
  id v58;
  id v59;
  int64_t v60;
  id v61;
  BOOL v62;
  id v63;
  void *v64;
  BAEventReporter *v65;
  void *v66;
  id v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  BAEventReporter *v76;
  SEL v77;
  id v78;
  id v79;
  int64_t v80;
  id v81;
  BOOL v82;
  id v83;
  SEL v84;
  id v85;
  id v86;
  int64_t v87;
  id v88;
  BOOL v89;
  id v90;
  _QWORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t aBlock;
  uint64_t v104;
  void (*v105)(uint64_t);
  void *v106;
  void *v107;
  BAEventReporter *v108;

  v94 = a1;
  v95 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v100 = *(_QWORD *)(v3 - 8);
  v101 = v3;
  __chkstk_darwin(v3);
  v99 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v97 = *(_QWORD *)(v5 - 8);
  v98 = v5;
  __chkstk_darwin(v5);
  v96 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2955E0 != -1)
    swift_once(&qword_2955E0, sub_5C5EC);
  v11 = sub_705C(v7, (uint64_t)qword_298740);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  v12 = v2;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    v92 = v14;
    v93 = v8;
    v15 = swift_slowAlloc(22, -1);
    v91 = (_QWORD *)swift_slowAlloc(64, -1);
    v102 = v91;
    *(_DWORD *)v15 = 136315394;
    v16 = *(_QWORD *)&v12[OBJC_IVAR___BAAnalyticsController_lockProtectedData];
    v17 = v16 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v16 + 16);
    v18 = (os_unfair_lock_s *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v18);
    sub_1255BC(v17, &kBAPrivateAnalyticsID, &aBlock);
    os_unfair_lock_unlock(v18);
    if (v104)
      v19 = aBlock;
    else
      v19 = 0x6E776F6E6B6E753CLL;
    if (v104)
      v20 = (BAEventReporter *)v104;
    else
      v20 = (BAEventReporter *)0xE90000000000003ELL;
    aBlock = sub_EB014(v19, (unint64_t)v20, (uint64_t *)&v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v104, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    *(_WORD *)(v15 + 12) = 2080;
    os_unfair_lock_lock(v18);
    sub_1255BC(v17, &kBAPrivateUserSeed, &aBlock);
    os_unfair_lock_unlock(v18);
    if (v104)
      v28 = aBlock;
    else
      v28 = 0x6E776F6E6B6E753CLL;
    if (v104)
      v29 = (BAEventReporter *)v104;
    else
      v29 = (BAEventReporter *)0xE90000000000003ELL;
    aBlock = sub_EB014(v28, (unint64_t)v29, (uint64_t *)&v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v104, v15 + 14, v15 + 22);

    swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    _os_log_impl(&dword_0, v13, (os_log_type_t)v92, "ResetIDBegin: currentAnalyticsID = %s, currentUserPrivateSeed = %s", (uint8_t *)v15, 0x16u);
    v37 = v91;
    swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v93 + 8))(v10, v7);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v38 = *(void **)&v12[OBJC_IVAR___BAAnalyticsController_privateDataSource];
  v39 = objc_msgSend(v38, "generatePrivateData");
  v40 = (BAEventReporter *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v39, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v41 = *(_QWORD *)&v12[OBJC_IVAR___BAAnalyticsController_lockProtectedData];
  v42 = v41 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v41 + 16);
  v43 = (os_unfair_lock_s *)(v41 + ((*(unsigned int *)(*(_QWORD *)v41 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v43);
  sub_12D494(v42, (uint64_t)v40, &aBlock);
  os_unfair_lock_unlock(v43);
  sub_12D38C((uint64_t)v12);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40, v45, v46, v47, v48, v49, v50, v51);
  v52 = swift_allocObject(&unk_27DA78, 32, 7);
  v54 = v94;
  v53 = v95;
  *(_QWORD *)(v52 + 16) = v94;
  *(_QWORD *)(v52 + 24) = v53;
  v107 = sub_12EF10;
  v108 = (BAEventReporter *)v52;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v104 = 1107296256;
  v105 = sub_124DDC;
  v106 = &unk_27DA90;
  v55 = _Block_copy(&aBlock);
  v56 = v108;
  sub_12EF50(v54, v53);
  swift_release(v56, v57, v58, v59, v60, v61, v62, v63);
  objc_msgSend(v38, "syncPrivateData:toCloudWithCompletion:", isa, v55);
  _Block_release(v55);

  v64 = *(void **)&v12[OBJC_IVAR___BAAnalyticsController_workQueue];
  v65 = (BAEventReporter *)swift_allocObject(&unk_27DAC8, 24, 7);
  swift_unknownObjectWeakInit(&v65[1], v12);
  v107 = sub_12EF84;
  v108 = v65;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v104 = 1107296256;
  v105 = sub_124DDC;
  v106 = &unk_27DAE0;
  v66 = _Block_copy(&aBlock);
  v67 = v64;
  v68 = swift_retain(v65);
  v69 = v96;
  static DispatchQoS.unspecified.getter(v68);
  v102 = _swiftEmptyArrayStorage;
  v70 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v71 = sub_71B4(&qword_29FBA8);
  v72 = sub_12EF8C((unint64_t *)&qword_2A0080, &qword_29FBA8);
  v73 = v99;
  v74 = v71;
  v75 = v101;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v102, v74, v72, v101, v70);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v69, v73, v66);
  _Block_release(v66);

  (*(void (**)(char *, uint64_t))(v100 + 8))(v73, v75);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v69, v98);
  v76 = v108;
  swift_release(v65, v77, v78, v79, v80, v81, v82, v83);
  swift_release(v76, v84, v85, v86, v87, v88, v89, v90);
}

void sub_128664(uint64_t a1)
{
  void (*v1)(uint64_t);
  BAEventReporter *v2;
  uint64_t v3;
  SEL v4;
  id v5;
  id v6;
  int64_t v7;
  id v8;
  BOOL v9;
  id v10;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(BAEventReporter **)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  swift_release(v2, v4, v5, v6, v7, v8, v9, v10);
}

void sub_128690(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR___BAAnalyticsController_privateDataCacheIsCurrent) = 1;
    *(_BYTE *)(Strong + OBJC_IVAR___BAAnalyticsController_userIDResetEventPending) = 1;
    sub_1286FC();

  }
}

void sub_1286FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _BYTE v15[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(void **)(v1 + OBJC_IVAR___BAAnalyticsController_workQueue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR___BAAnalyticsController_sessionState) == 1)
    {
      v8 = OBJC_IVAR___BAAnalyticsController_userIDResetEventPending;
      if (*(_BYTE *)(v1 + OBJC_IVAR___BAAnalyticsController_userIDResetEventPending) == 1)
      {
        v9 = (void **)(v1 + OBJC_IVAR___BAAnalyticsController_applicationTracker);
        swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_applicationTracker, v15, 0, 0);
        v10 = *v9;
        if (*v9)
        {
          v11 = type metadata accessor for ResetPrivateIDsEvent(0);
          v12 = sub_7E10(&qword_2A0238, type metadata accessor for ResetPrivateIDsEvent, (uint64_t)&protocol conformance descriptor for ResetPrivateIDsEvent);
          v13 = v10;
          Tracker.submit<A>(_:onlyIfTimed:completion:)(v11, 0, 0, 0, v11, v12);

        }
        *(_BYTE *)(v1 + v8) = 0;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

BOOL sub_128908(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t *v28;
  char *v29;
  int v30;
  id v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  unsigned int v38;
  id v39;
  char *v40;
  char *v41;
  double v42;
  uint64_t (*v43)(char *, uint64_t);
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  char *v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;

  v2 = v1;
  v4 = sub_71B4(&qword_29F018);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v51 - v8;
  v57 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v57 - 8);
  v11 = __chkstk_darwin(v57);
  v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v56 = (char *)&v51 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v51 - v15;
  if (qword_2955E0 != -1)
    swift_once(&qword_2955E0, sub_5C5EC);
  v17 = type metadata accessor for Logger(0);
  v52 = sub_705C(v17, (uint64_t)qword_298740);
  v18 = Logger.logObject.getter(v52);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v20 = 134217984;
    v58 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v20 + 4, v20 + 12);
    _os_log_impl(&dword_0, v18, v19, "waitForSessionEnd timeout is: %f", v20, 0xCu);
    swift_slowDealloc(v20, -1, -1);
  }

  v22 = Date.init()(v21);
  v23 = v57;
  v54 = v16;
  if (a1 <= 0.0)
  {
    v24 = 1;
  }
  else
  {
    Date.init(timeIntervalSinceNow:)(v22, a1);
    v24 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, v24, 1, v23);
  v25 = OBJC_IVAR___BAAnalyticsController_sessionStateCondition;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR___BAAnalyticsController_sessionStateCondition), "lock");
  v26 = OBJC_IVAR___BAAnalyticsController_sessionState;
  v27 = *(_BYTE *)(v2 + OBJC_IVAR___BAAnalyticsController_sessionState) == 0;
  if (*(_BYTE *)(v2 + OBJC_IVAR___BAAnalyticsController_sessionState) && a1 != 0.0)
  {
    v28 = &qword_29F018;
    v55 = v7;
    v29 = v56;
    do
    {
      sub_3A82C((uint64_t)v9, (uint64_t)v7, v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v23) == 1)
      {
        sub_88F50((uint64_t)v7, v28);
        objc_msgSend(*(id *)(v2 + v25), "wait");
        v30 = 0;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v7, v23);
        v31 = *(id *)(v2 + v25);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v33 = v26;
        v34 = v25;
        v35 = v2;
        v36 = v28;
        v37 = v9;
        v38 = objc_msgSend(v31, "waitUntilDate:", isa);

        v23 = v57;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v57);
        v30 = v38 ^ 1;
        v9 = v37;
        v28 = v36;
        v2 = v35;
        v25 = v34;
        v26 = v33;
        v7 = v55;
      }
      v27 = *(_BYTE *)(v2 + v26) == 0;
    }
    while (*(_BYTE *)(v2 + v26) && !v30);
  }
  v39 = objc_msgSend(*(id *)(v2 + v25), "unlock");
  v40 = v53;
  Date.init()(v39);
  v41 = v54;
  v42 = Date.timeIntervalSince(_:)(v54);
  v43 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v44 = v43(v40, v23);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = v9;
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v48 = 134217984;
    v58 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v48 + 4, v48 + 12);
    _os_log_impl(&dword_0, v45, v46, "waitForSessionEnd took: %f", v48, 0xCu);
    v49 = v48;
    v9 = v47;
    swift_slowDealloc(v49, -1, -1);
  }

  sub_88F50((uint64_t)v9, &qword_29F018);
  v43(v41, v57);
  return v27;
}

void sub_128DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  BAEventReporter *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  BAEventReporter *v35;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(v0 + OBJC_IVAR___BAAnalyticsController_workQueue);
  v8 = (BAEventReporter *)swift_allocObject(&unk_27DAC8, 24, 7);
  swift_unknownObjectWeakInit(&v8[1], v0);
  aBlock[4] = sub_12EFCC;
  v35 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_124DDC;
  aBlock[3] = &unk_27DB08;
  v9 = _Block_copy(aBlock);
  v10 = v7;
  v11 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v11);
  v33 = _swiftEmptyArrayStorage;
  v12 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_71B4(&qword_29FBA8);
  v14 = sub_12EF8C((unint64_t *)&qword_2A0080, &qword_29FBA8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v9);
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v31);
  v15 = v35;
  swift_release(v8, v16, v17, v18, v19, v20, v21, v22);
  swift_release(v15, v23, v24, v25, v26, v27, v28, v29);
}

void sub_128FD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t Strong;
  _BYTE *v7;
  void *v8;
  id v9;
  _BYTE v11[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v7 = (_BYTE *)Strong;
    v8 = *(void **)(Strong + OBJC_IVAR___BAAnalyticsController_workQueue);
    *v5 = v8;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
    v9 = v8;
    LOBYTE(v8) = _dispatchPreconditionTest(_:)(v5);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
    if ((v8 & 1) != 0)
    {
      if (v7[OBJC_IVAR___BAAnalyticsController_sessionState] == 1)
        sub_12970C();

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_12910C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id result;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR___BAAnalyticsController_workQueue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR___BAAnalyticsController_sessionStateCondition;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR___BAAnalyticsController_sessionStateCondition), "lock");
    if (*(unsigned __int8 *)(v1 + OBJC_IVAR___BAAnalyticsController_sessionState) != a1)
    {
      *(_BYTE *)(v1 + OBJC_IVAR___BAAnalyticsController_sessionState) = a1;
      objc_msgSend(*(id *)(v1 + v10), "broadcast");
    }
    return objc_msgSend(*(id *)(v1 + v10), "unlock");
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_129218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void (*v17)(_QWORD);
  id v18;
  void (*v19)(_QWORD *, uint64_t);
  uint64_t v20;
  void *Strong;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  BAEventReporter *v25;
  BAEventReporter *v26;
  BAEventReporter **v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  int64_t v32;
  int64_t v33;
  void *v34;
  BAEventReporter *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  int64_t v49;
  id v50;
  BOOL v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  BAEventReporter *v63;
  void *v64;
  SEL v65;
  id v66;
  id v67;
  int64_t v68;
  id v69;
  BOOL v70;
  id v71;
  uint64_t v72;
  void (*v73)(_QWORD *, uint64_t);
  unsigned int v74;
  uint64_t v75;
  void (*v76)(_QWORD *, _QWORD, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD aBlock[5];
  BAEventReporter *v83;
  char v84[24];
  char v85[32];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v2 - 8);
  v81 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Session.Kind(0);
  v78 = *(_QWORD *)(v5 - 8);
  v79 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = OBJC_IVAR___BAAnalyticsController_workQueue;
  v16 = *(void **)(v1 + OBJC_IVAR___BAAnalyticsController_workQueue);
  *v15 = v16;
  v17 = *(void (**)(_QWORD))(v13 + 104);
  v74 = enum case for DispatchPredicate.onQueue(_:);
  v76 = (void (*)(_QWORD *, _QWORD, uint64_t))v17;
  v17(v15);
  v18 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v19 = *(void (**)(_QWORD *, uint64_t))(v13 + 8);
  v77 = v12;
  v73 = v19;
  v19(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v20 = v1 + OBJC_IVAR___BAAnalyticsController_delegate;
  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_delegate, v85, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (Strong)
  {
    v22 = Strong;
    objc_msgSend(Strong, "analyticsControllerWillStartSession:", v1);
    Strong = (void *)swift_unknownObjectRelease(v22);
  }
  v23 = UUID.init()(Strong);
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v27 = (BAEventReporter **)(v1 + OBJC_IVAR___BAAnalyticsController_sessionManager);
  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_sessionManager, v84, 0, 0);
  v35 = *v27;
  if (v35)
  {
    v37 = v78;
    v36 = v79;
    (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v7, enum case for Session.Kind.userEvents(_:), v79);
    v38 = swift_retain(v35);
    Date.init()(v38);
    SessionManager.start(for:identifier:startDate:timestampJitter:)(v7, v24, v26, v4, 0);
    swift_bridgeObjectRelease(v26, v39, v40, v41, v42, v43, v44, v45);
    swift_release(v35, v46, v47, v48, v49, v50, v51, v52);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v4, v81);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v36);
  }
  else
  {
    swift_bridgeObjectRelease(v26, v28, v29, v30, v31, v32, v33, v34);
  }
  v53 = *(_QWORD *)(v1 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v54 = v53 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v53 + 16);
  v55 = (os_unfair_lock_s *)(v53 + ((*(unsigned int *)(*(_QWORD *)v53 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v55);
  sub_12966C(v54);
  os_unfair_lock_unlock(v55);
  v56 = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (v56)
  {
    v57 = v56;
    objc_msgSend(v56, "analyticsControllerDidStartSession:", v1);
    swift_unknownObjectRelease(v57);
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR___BAAnalyticsController_privateDataCacheIsCurrent) != 1)
  {
    v62 = *(void **)(v1 + OBJC_IVAR___BAAnalyticsController_privateDataSource);
    v63 = (BAEventReporter *)swift_allocObject(&unk_27DAC8, 24, 7);
    swift_unknownObjectWeakInit(&v63[1]);
    aBlock[4] = sub_130E48;
    v83 = v63;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_12A8CC;
    aBlock[3] = &unk_27DD78;
    v64 = _Block_copy(aBlock);
    swift_release(v83, v65, v66, v67, v68, v69, v70, v71);
    objc_msgSend(v62, "fetchPrivateData:", v64);
    _Block_release(v64);
    return;
  }
  sub_12970C();
  v58 = *(void **)(v1 + v75);
  *v15 = v58;
  v59 = v77;
  v76(v15, v74, v77);
  v60 = v58;
  LOBYTE(v58) = _dispatchPreconditionTest(_:)(v15);
  v73(v15, v59);
  if ((v58 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v61 = OBJC_IVAR___BAAnalyticsController_privateDataQueueActive;
  if ((*(_BYTE *)(v1 + OBJC_IVAR___BAAnalyticsController_privateDataQueueActive) & 1) == 0)
  {
    dispatch_resume(*(dispatch_object_t *)(v1 + OBJC_IVAR___BAAnalyticsController_privateDataQueue));
    *(_BYTE *)(v1 + v61) = 1;
  }
}

uint64_t sub_12966C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_71B4(&qword_29F018);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v3);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  return sub_1311A0((uint64_t)v5, a1);
}

void sub_12970C()
{
  uint64_t v0;
  uint8x8_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  id v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BAEventReporter **v49;
  uint64_t v50;
  const char *v51;
  void *v52;
  void *v53;
  void *v54;
  int64_t v55;
  int64_t v56;
  void *v57;
  BAEventReporter *v58;
  unint64_t v59;
  char *v60;
  SEL v61;
  id v62;
  id v63;
  int64_t v64;
  id v65;
  BOOL v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BAEventReporter **v74;
  const char *v75;
  void *v76;
  void *v77;
  void *v78;
  int64_t v79;
  int64_t v80;
  void *v81;
  BAEventReporter *v82;
  unint64_t v83;
  char *v84;
  SEL v85;
  id v86;
  id v87;
  int64_t v88;
  id v89;
  BOOL v90;
  id v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  char v98;
  BAEventReporter *v99;
  BAEventReporter **v100;
  char v101;
  const char *v102;
  void *v103;
  void *v104;
  void *v105;
  int64_t v106;
  int64_t v107;
  void *v108;
  BAEventReporter *v109;
  BAEventReporter *v110;
  BAEventReporter *v111;
  BAEventReporter *v112;
  unint64_t v113;
  char *v114;
  SEL v115;
  id v116;
  id v117;
  int64_t v118;
  id v119;
  BOOL v120;
  id v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  int64_t v126;
  int64_t v127;
  id v128;
  SEL v129;
  id v130;
  id v131;
  id v132;
  int64_t v133;
  int64_t v134;
  id v135;
  const char *v136;
  void *v137;
  void *v138;
  void *v139;
  int64_t v140;
  int64_t v141;
  void *v142;
  BAEventReporter *v143;
  BAEventReporter *v144;
  BAEventReporter *v145;
  BAEventReporter **v146;
  BAEventReporter *v147;
  unint64_t v148;
  char *v149;
  SEL v150;
  id v151;
  id v152;
  int64_t v153;
  id v154;
  BOOL v155;
  id v156;
  SEL v157;
  id v158;
  id v159;
  id v160;
  int64_t v161;
  int64_t v162;
  id v163;
  SEL v164;
  id v165;
  id v166;
  id v167;
  int64_t v168;
  int64_t v169;
  id v170;
  const char *v171;
  void *v172;
  void *v173;
  void *v174;
  int64_t v175;
  int64_t v176;
  void *v177;
  BAEventReporter *v178;
  BAEventReporter *v179;
  BAEventReporter *v180;
  BAEventReporter *v181;
  BAEventReporter *v182;
  unint64_t v183;
  char *v184;
  SEL v185;
  id v186;
  id v187;
  int64_t v188;
  id v189;
  BOOL v190;
  id v191;
  char *v192;
  SEL v193;
  id v194;
  id v195;
  id v196;
  int64_t v197;
  int64_t v198;
  id v199;
  SEL v200;
  id v201;
  id v202;
  id v203;
  int64_t v204;
  int64_t v205;
  id v206;
  SEL v207;
  id v208;
  id v209;
  id v210;
  int64_t v211;
  int64_t v212;
  id v213;
  uint64_t v214;
  const char *v215;
  void *v216;
  void *v217;
  void *v218;
  int64_t v219;
  int64_t v220;
  void *v221;
  BAEventReporter *v222;
  uint64_t v223;
  BAEventReporter *v224;
  unint64_t v225;
  const char *v226;
  void *v227;
  void *v228;
  void *v229;
  int64_t v230;
  int64_t v231;
  void *v232;
  Swift::String v233;
  SEL v234;
  id v235;
  id v236;
  id v237;
  int64_t v238;
  int64_t v239;
  id v240;
  BAEventReporter *v241;
  unint64_t v242;
  char *v243;
  SEL v244;
  id v245;
  id v246;
  int64_t v247;
  id v248;
  BOOL v249;
  id v250;
  char *v251;
  BAEventReporter *v252;
  unint64_t v253;
  char *v254;
  SEL v255;
  id v256;
  id v257;
  int64_t v258;
  id v259;
  BOOL v260;
  id v261;
  const char *v262;
  void *v263;
  void *v264;
  void *v265;
  int64_t v266;
  int64_t v267;
  void *v268;
  BAEventReporter *v269;
  BAEventReporter *v270;
  BAEventReporter *v271;
  BAEventReporter *v272;
  unint64_t v273;
  char *v274;
  SEL v275;
  id v276;
  id v277;
  int64_t v278;
  id v279;
  BOOL v280;
  id v281;
  SEL v282;
  id v283;
  id v284;
  id v285;
  int64_t v286;
  int64_t v287;
  id v288;
  SEL v289;
  id v290;
  id v291;
  id v292;
  int64_t v293;
  int64_t v294;
  id v295;
  const char *v296;
  void *v297;
  void *v298;
  void *v299;
  int64_t v300;
  int64_t v301;
  void *v302;
  SEL v303;
  id v304;
  id v305;
  id v306;
  int64_t v307;
  int64_t v308;
  id v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  BAEventReporter *v315;
  BAEventReporter *v316;
  BAEventReporter *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  BAEventReporter *v339;
  BAEventReporter *v340;
  BAEventReporter *v341;
  BAEventReporter *v342;
  BAEventReporter *v343;
  BAEventReporter *v344;
  BAEventReporter *v345;
  BAEventReporter **v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  __int128 v352;
  BAEventReporter *v353;
  BAEventReporter *v354;
  BAEventReporter *v355;
  BAEventReporter *v356;
  BAEventReporter *v357;
  char v358;
  char v359[32];
  uint64_t v360;
  unint64_t v361;
  __int128 v362;
  BAEventReporter *v363;
  BAEventReporter *v364;
  BAEventReporter *v365;
  BAEventReporter *v366;
  BAEventReporter *v367;
  BAEventReporter *v368;
  BAEventReporter *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  BAEventReporter *v373;

  v2 = v0;
  v3 = sub_71B4(&qword_2A0240);
  v338 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v337 = (char *)&v310 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_71B4(&qword_2A0248);
  v324 = *(_QWORD *)(v5 - 8);
  v325 = v5;
  __chkstk_darwin(v5);
  v323 = (char *)&v310 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_71B4(&qword_2A0250);
  v312 = *(_QWORD *)(v7 - 8);
  v313 = v7;
  __chkstk_darwin(v7);
  v311 = (char *)&v310 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_71B4(&qword_2A0258);
  v335 = *(_QWORD *)(v9 - 8);
  v336 = v9;
  __chkstk_darwin(v9);
  v334 = (char *)&v310 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_71B4(&qword_2A0260);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v310 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_71B4(&qword_2A0268);
  v332 = *(_QWORD *)(v15 - 8);
  v333 = v15;
  __chkstk_darwin(v15);
  v331 = (char *)&v310 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_71B4(&qword_2A0270);
  v319 = *(_QWORD *)(v17 - 8);
  v320 = v17;
  __chkstk_darwin(v17);
  v318 = (char *)&v310 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v326 = sub_71B4(&qword_2A0278);
  v322 = *(_QWORD *)(v326 - 8);
  __chkstk_darwin(v326);
  v321 = (char *)&v310 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (uint64_t *)((char *)&v310 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *(void **)(v2 + OBJC_IVAR___BAAnalyticsController_workQueue);
  *v23 = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  v26 = (os_unfair_lock_s *)(*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) != 0)
  {
    v327 = v14;
    v328 = v12;
    v329 = v11;
    v330 = v3;
    v27 = *(_QWORD *)(v2 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
    v28 = v27 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v27 + 16);
    v29 = (os_unfair_lock_s *)(v27 + ((*(unsigned int *)(*(_QWORD *)v27 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v29);
    sub_12ACC4(v28, (uint64_t)&v360);
    os_unfair_lock_unlock(v29);
    v30 = (uint64_t)v363;
    v31 = (uint64_t)v364;
    v32 = (uint64_t)v365;
    v342 = v373;
    v343 = v369;
    v346 = (BAEventReporter **)v366;
    v347 = v2;
    v344 = v368;
    v345 = v367;
    v340 = (BAEventReporter *)v371;
    v341 = (BAEventReporter *)v370;
    v339 = (BAEventReporter *)v372;
    if (*((_QWORD *)&v362 + 1))
    {
      v315 = v365;
      v316 = v364;
      v317 = v363;
      v33 = *((_QWORD *)&v362 + 1);
      v34 = v360;
      v35 = v361;
      v314 = v362;
      v36 = sub_71B4(&qword_299FD0);
      v37 = type metadata accessor for DataEventTrait(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = *(_QWORD *)(v38 + 72);
      v40 = *(unsigned __int8 *)(v38 + 80);
      v41 = (v40 + 32) & ~v40;
      v42 = swift_allocObject(v36, v41 + 2 * v39, v40 | 7);
      *(_OWORD *)(v42 + 16) = xmmword_1F4480;
      v43 = v42 + v41;
      v44 = *(void (**)(uint64_t, _QWORD, uint64_t))(v38 + 104);
      v44(v43, enum case for DataEventTrait.onlyOnce(_:), v37);
      v45 = v43 + v39;
      v46 = v35;
      v47 = v34;
      v48 = v33;
      v44(v45, enum case for DataEventTrait.unique(_:), v37);
      v49 = (BAEventReporter **)(v347 + OBJC_IVAR___BAAnalyticsController_sessionManager);
      v50 = v314;
      swift_beginAccess(v347 + OBJC_IVAR___BAAnalyticsController_sessionManager, &v348, 0, 0);
      v58 = *v49;
      if (v58)
      {
        v360 = v47;
        v361 = v46;
        *(_QWORD *)&v362 = v50;
        *((_QWORD *)&v362 + 1) = v48;
        sub_1AD88(v47, v46, v50, v48);
        v59 = sub_1310EC();
        swift_retain(v58);
        v60 = v321;
        SessionData.init(key:data:)(0x6C61727265666572, 0xEC00000061746144, &v360, &type metadata for ReferralData, v59);
        SessionManager.push<A>(_:traits:file:line:)(v60, v42, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for ReferralData, v59);
        swift_release(v58, v61, v62, v63, v64, v65, v66, v67);
        (*(void (**)(char *, uint64_t))(v322 + 8))(v60, v326);
      }
      swift_bridgeObjectRelease((BAEventReporter *)v42, v51, v52, v53, v54, v55, v56, v57);
      sub_1BF00(v47, v46, v50, v48);
      v2 = v347;
      v31 = (uint64_t)v316;
      v30 = (uint64_t)v317;
      v32 = (uint64_t)v315;
    }
    if (v31 != 1)
    {
      v68 = sub_71B4(&qword_299FD0);
      v69 = type metadata accessor for DataEventTrait(0);
      v70 = *(_QWORD *)(v69 - 8);
      v71 = *(unsigned __int8 *)(v70 + 80);
      v72 = (v71 + 32) & ~v71;
      v73 = swift_allocObject(v68, v72 + *(_QWORD *)(v70 + 72), v71 | 7);
      *(_OWORD *)(v73 + 16) = xmmword_1F5FF0;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v70 + 104))(v73 + v72, enum case for DataEventTrait.onlyOnce(_:), v69);
      v74 = (BAEventReporter **)(v2 + OBJC_IVAR___BAAnalyticsController_sessionManager);
      swift_beginAccess(v2 + OBJC_IVAR___BAAnalyticsController_sessionManager, &v349, 0, 0);
      v82 = *v74;
      if (v82)
      {
        v360 = v30;
        v361 = v31;
        *(_QWORD *)&v362 = v32;
        *((_QWORD *)&v362 + 1) = v346;
        v363 = v345;
        v364 = v344;
        v365 = v343;
        v366 = v341;
        v367 = v340;
        v368 = v339;
        sub_130FE8(v30, v31, v32, (uint64_t)v346, (uint64_t)v345, (uint64_t)v344, (uint64_t)v343, (uint64_t)v341, (uint64_t)v340, (uint64_t)v339);
        v83 = sub_131048();
        swift_retain(v82);
        v84 = v318;
        SessionData.init(key:data:)(0x6E676961706D6163, 0xEC00000061746144, &v360, &type metadata for CampaignData, v83);
        SessionManager.push<A>(_:traits:file:line:)(v84, v73, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for CampaignData, v83);
        swift_release(v82, v85, v86, v87, v88, v89, v90, v91);
        (*(void (**)(char *, uint64_t))(v319 + 8))(v84, v320);
      }
      swift_bridgeObjectRelease((BAEventReporter *)v73, v75, v76, v77, v78, v79, v80, v81);
      sub_13108C(v30, v31, v32, (uint64_t)v346, (uint64_t)v345, (uint64_t)v344, (uint64_t)v343, (uint64_t)v341, (uint64_t)v340, (uint64_t)v339);
    }
    sub_12AD6C((uint64_t)&v360);
    v92 = v360;
    v93 = v361;
    v94 = *((_QWORD *)&v362 + 1);
    v344 = v363;
    v345 = (BAEventReporter *)v362;
    v95 = (char)v364;
    v96 = BYTE1(v364);
    v97 = v2;
    v98 = BYTE2(v364);
    v99 = v365;
    v343 = v366;
    v1.i32[0] = (int)v367;
    LODWORD(v341) = BYTE4(v367);
    LODWORD(v340) = BYTE5(v367);
    LODWORD(v339) = BYTE6(v367);
    LODWORD(v326) = HIBYTE(v367);
    v100 = (BAEventReporter **)(v97 + OBJC_IVAR___BAAnalyticsController_sessionManager);
    v101 = (char)v368;
    swift_beginAccess(v97 + OBJC_IVAR___BAAnalyticsController_sessionManager, v359, 0, 0);
    v346 = v100;
    v109 = *v100;
    if (v109)
    {
      LODWORD(v350) = v92;
      v110 = v345;
      v351 = v93;
      *(_QWORD *)&v352 = v345;
      v111 = v344;
      *((_QWORD *)&v352 + 1) = v94;
      v353 = v344;
      LOBYTE(v354) = v95;
      BYTE1(v354) = v96;
      BYTE2(v354) = v98;
      v355 = v99;
      v112 = v343;
      v356 = v343;
      LODWORD(v357) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
      BYTE4(v357) = (_BYTE)v341;
      BYTE5(v357) = (_BYTE)v340;
      BYTE6(v357) = (_BYTE)v339;
      HIBYTE(v357) = v326;
      v358 = v101;
      v113 = sub_130E50();
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRetain(v111);
      swift_bridgeObjectRetain(v112);
      swift_retain(v109);
      v114 = v331;
      SessionData.init(key:data:)(0x446E6F6973736573, 0xEB00000000617461, &v350, &type metadata for SessionData, v113);
      SessionManager.push<A>(_:traits:file:line:)(v114, _swiftEmptyArrayStorage, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for SessionData, v113);
      swift_release(v109, v115, v116, v117, v118, v119, v120, v121);
      (*(void (**)(char *, uint64_t))(v332 + 8))(v114, v333);
    }
    swift_bridgeObjectRelease(v343, v102, v103, v104, v105, v106, v107, v108);
    swift_bridgeObjectRelease(v344, v122, v123, v124, v125, v126, v127, v128);
    swift_bridgeObjectRelease(v345, v129, v130, v131, v132, v133, v134, v135);
    sub_12BC64(&v360);
    v143 = (BAEventReporter *)v361;
    v144 = v363;
    v145 = v365;
    v146 = v346;
    v147 = *v346;
    if (*v346)
    {
      v350 = v360;
      v351 = v361;
      v352 = v362;
      v353 = v363;
      v354 = v364;
      v355 = v365;
      v148 = sub_130E94();
      swift_bridgeObjectRetain(v143);
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRetain(v145);
      swift_retain(v147);
      v149 = v327;
      SessionData.init(key:data:)(0x61746144707061, 0xE700000000000000, &v350, &type metadata for AppData, v148);
      SessionManager.push<A>(_:traits:file:line:)(v149, _swiftEmptyArrayStorage, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for AppData, v148);
      swift_release(v147, v150, v151, v152, v153, v154, v155, v156);
      (*(void (**)(char *, uint64_t))(v328 + 8))(v149, v329);
    }
    swift_bridgeObjectRelease(v145, v136, v137, v138, v139, v140, v141, v142);
    swift_bridgeObjectRelease(v144, v157, v158, v159, v160, v161, v162, v163);
    swift_bridgeObjectRelease(v143, v164, v165, v166, v167, v168, v169, v170);
    sub_12C2A8((uint64_t)&v360);
    v178 = (BAEventReporter *)v361;
    v179 = (BAEventReporter *)*((_QWORD *)&v362 + 1);
    v180 = v365;
    v181 = v367;
    v182 = *v146;
    if (*v146)
    {
      v350 = v360;
      v351 = v361;
      v352 = v362;
      LOBYTE(v353) = (_BYTE)v363;
      v354 = v364;
      v355 = v365;
      v356 = v366;
      v357 = v367;
      v183 = sub_130ED8();
      swift_bridgeObjectRetain(v178);
      swift_bridgeObjectRetain(v179);
      swift_bridgeObjectRetain(v180);
      swift_bridgeObjectRetain(v181);
      swift_retain(v182);
      v184 = v334;
      SessionData.init(key:data:)(0x6144656369766564, 0xEA00000000006174, &v350, &type metadata for DeviceData, v183);
      SessionManager.push<A>(_:traits:file:line:)(v184, _swiftEmptyArrayStorage, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for DeviceData, v183);
      swift_release(v182, v185, v186, v187, v188, v189, v190, v191);
      v192 = v184;
      v146 = v346;
      (*(void (**)(char *, uint64_t))(v335 + 8))(v192, v336);
    }
    swift_bridgeObjectRelease(v181, v171, v172, v173, v174, v175, v176, v177);
    swift_bridgeObjectRelease(v180, v193, v194, v195, v196, v197, v198, v199);
    swift_bridgeObjectRelease(v179, v200, v201, v202, v203, v204, v205, v206);
    swift_bridgeObjectRelease(v178, v207, v208, v209, v210, v211, v212, v213);
    v214 = sub_12F024();
    v222 = v342;
    if (v215)
    {
      v223 = v214;
      v224 = (BAEventReporter *)v215;
      v360 = v214;
      v361 = (unint64_t)v215;
      v225 = sub_130F60();
      if ((Collection.isNotEmpty.getter(&type metadata for String, v225) & 1) != 0)
      {
        v360 = 0x6C6975625F707061;
        v361 = 0xEA00000000003D64;
        v233._countAndFlagsBits = v223;
        v233._object = v224;
        String.append(_:)(v233);
        swift_bridgeObjectRelease(v224, v234, v235, v236, v237, v238, v239, v240);
        v224 = (BAEventReporter *)v361;
        v241 = *v146;
        if (*v146)
        {
          v242 = sub_130FA4();
          swift_bridgeObjectRetain(v224);
          swift_retain(v241);
          v243 = v311;
          SessionData.init(key:data:)(0x7461446775626564, 0xE900000000000061, &v360, &type metadata for DebugData, v242);
          SessionManager.push<A>(_:traits:file:line:)(v243, _swiftEmptyArrayStorage, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for DebugData, v242);
          swift_release(v241, v244, v245, v246, v247, v248, v249, v250);
          v251 = v243;
          v222 = v342;
          (*(void (**)(char *, uint64_t))(v312 + 8))(v251, v313);
        }
      }
      swift_bridgeObjectRelease(v224, v226, v227, v228, v229, v230, v231, v232);
    }
    if (v222)
    {
      v252 = *v146;
      if (*v146)
      {
        v360 = (uint64_t)v222;
        v253 = sub_10ED10();
        swift_bridgeObjectRetain(v222);
        swift_retain(v252);
        v254 = v323;
        SessionData.init(key:data:)(0xD000000000000012, 0x8000000000221D30, &v360, &type metadata for BooksTreatmentData, v253);
        SessionManager.push<A>(_:traits:file:line:)(v254, _swiftEmptyArrayStorage, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for BooksTreatmentData, v253);
        swift_release(v252, v255, v256, v257, v258, v259, v260, v261);
        (*(void (**)(char *, uint64_t))(v324 + 8))(v254, v325);
      }
      swift_bridgeObjectRelease(v222, v215, v216, v217, v218, v219, v220, v221);
    }
    sub_12C43C(&v360);
    v269 = (BAEventReporter *)v361;
    v271 = (BAEventReporter *)*((_QWORD *)&v362 + 1);
    v270 = v363;
    v272 = *v146;
    if (*v146)
    {
      v350 = v360;
      v351 = v361;
      v352 = v362;
      v353 = v363;
      v273 = sub_130F1C();
      swift_bridgeObjectRetain(v269);
      swift_bridgeObjectRetain(v271);
      swift_bridgeObjectRetain(v270);
      swift_retain(v272);
      v274 = v337;
      SessionData.init(key:data:)(0x6174614472657375, 0xE800000000000000, &v350, &type metadata for UserData, v273);
      SessionManager.push<A>(_:traits:file:line:)(v274, _swiftEmptyArrayStorage, 0xD000000000000069, 0x80000000002219C0, 427, &type metadata for UserData, v273);
      swift_release(v272, v275, v276, v277, v278, v279, v280, v281);
      (*(void (**)(char *, uint64_t))(v338 + 8))(v274, v330);
      swift_bridgeObjectRelease(v270, v282, v283, v284, v285, v286, v287, v288);
      swift_bridgeObjectRelease(v271, v289, v290, v291, v292, v293, v294, v295);
    }
    else
    {
      swift_bridgeObjectRelease(*((BAEventReporter **)&v362 + 1), v262, v263, v264, v265, v266, v267, v268);
      swift_bridgeObjectRelease(v269, v303, v304, v305, v306, v307, v308, v309);
      v269 = v270;
    }
    swift_bridgeObjectRelease(v269, v296, v297, v298, v299, v300, v301, v302);
  }
  else
  {
    __break(1u);
    os_unfair_lock_unlock(v26);
    __break(1u);
  }
}

void sub_12A4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  void *v13;
  BAEventReporter *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  BAEventReporter *v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  int64_t v35;
  id v36;
  BOOL v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  _QWORD aBlock[5];
  BAEventReporter *v44;
  _BYTE v45[24];
  _BYTE v46[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v46, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (Strong)
  {
    v13 = (void *)Strong;
    v41 = *(id *)(Strong + OBJC_IVAR___BAAnalyticsController_workQueue);

    v14 = (BAEventReporter *)swift_allocObject(&unk_27DAC8, 24, 7);
    v40 = v5;
    swift_beginAccess(a2 + 16, v45, 0, 0);
    v15 = (void *)swift_unknownObjectWeakLoadStrong(a2 + 16);
    swift_unknownObjectWeakInit(&v14[1]);

    v16 = swift_allocObject(&unk_27DDB0, 32, 7);
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = a1;
    aBlock[4] = sub_131198;
    v44 = (BAEventReporter *)v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_124DDC;
    aBlock[3] = &unk_27DDC8;
    v17 = _Block_copy(aBlock);
    swift_retain(v14);
    v18 = swift_bridgeObjectRetain(a1);
    static DispatchQoS.unspecified.getter(v18);
    v42 = _swiftEmptyArrayStorage;
    v19 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = v8;
    v21 = sub_71B4(&qword_29FBA8);
    v22 = sub_12EF8C((unint64_t *)&qword_2A0080, &qword_29FBA8);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v21, v22, v4, v19);
    v23 = v41;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v20);
    v24 = v44;
    swift_release(v14, v25, v26, v27, v28, v29, v30, v31);
    swift_release(v24, v32, v33, v34, v35, v36, v37, v38);
  }
}

void sub_12A72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t Strong;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[24];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  a1 += 16;
  swift_beginAccess(a1, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v9 = (_BYTE *)Strong;
    v10 = *(_QWORD *)(Strong + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
    v11 = v10 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v10 + 16);
    v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(_QWORD *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v12);
    sub_12D494(v11, a2, &v17);
    os_unfair_lock_unlock(v12);
    sub_12D38C((uint64_t)v9);
    sub_12970C();
    v9[OBJC_IVAR___BAAnalyticsController_privateDataCacheIsCurrent] = 1;
    v13 = *(void **)&v9[OBJC_IVAR___BAAnalyticsController_workQueue];
    *v7 = v13;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
    v14 = v13;
    LOBYTE(v13) = _dispatchPreconditionTest(_:)(v7);
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
    if ((v13 & 1) != 0)
    {
      v15 = OBJC_IVAR___BAAnalyticsController_privateDataQueueActive;
      if ((v9[OBJC_IVAR___BAAnalyticsController_privateDataQueueActive] & 1) == 0)
      {
        dispatch_resume(*(dispatch_object_t *)&v9[OBJC_IVAR___BAAnalyticsController_privateDataQueue]);
        v9[v15] = 1;
      }

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_12A8CC(uint64_t a1, uint64_t a2)
{
  BAEventReporter *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  SEL v5;
  id v6;
  id v7;
  int64_t v8;
  id v9;
  BOOL v10;
  id v11;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(BAEventReporter **)(a1 + 40);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, &type metadata for String, &protocol witness table for String);
  swift_retain(v2);
  v3(v4);
  swift_release(v2, v5, v6, v7, v8, v9, v10, v11);
  return swift_bridgeObjectRelease(v4);
}

void sub_12A92C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t, uint64_t);
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  BAEventReporter **v20;
  BAEventReporter *v21;
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, uint64_t);
  uint64_t v39;
  void (*v40)(_QWORD *, uint64_t, uint64_t);
  _BYTE v41[24];

  v3 = v2;
  v35 = a1;
  v36 = a2;
  v37 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = OBJC_IVAR___BAAnalyticsController_workQueue;
  v12 = *(void **)(v2 + OBJC_IVAR___BAAnalyticsController_workQueue);
  *v10 = v12;
  v13 = enum case for DispatchPredicate.onQueue(_:);
  v14 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 104);
  v14(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v15 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v10);
  v16 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v16(v10, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v17 = *(void **)(v3 + v11);
  *v10 = v17;
  v14(v10, v13, v7);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v10);
  v16(v10, v7);
  if ((v17 & 1) == 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  v38 = v16;
  v39 = v11;
  v40 = v14;
  v19 = OBJC_IVAR___BAAnalyticsController_privateDataQueueActive;
  if (*(_BYTE *)(v3 + OBJC_IVAR___BAAnalyticsController_privateDataQueueActive) == 1)
  {
    dispatch_suspend(*(dispatch_object_t *)(v3 + OBJC_IVAR___BAAnalyticsController_privateDataQueue));
    *(_BYTE *)(v3 + v19) = 0;
  }
  v20 = (BAEventReporter **)(v3 + OBJC_IVAR___BAAnalyticsController_sessionManager);
  swift_beginAccess(v3 + OBJC_IVAR___BAAnalyticsController_sessionManager, v41, 0, 0);
  v21 = *v20;
  if (v21)
  {
    v22 = swift_retain(v21);
    Date.init()(v22);
    SessionManager.end(endDate:completion:)(v6, v35, v36);
    swift_release(v21, v23, v24, v25, v26, v27, v28, v29);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v37);
  }
  v30 = *(_QWORD *)(v3 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v31 = v30 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v30 + 16);
  v32 = (os_unfair_lock_s *)(v30 + ((*(unsigned int *)(*(_QWORD *)v30 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v32);
  sub_12ABC8(v31);
  os_unfair_lock_unlock(v32);
  v33 = *(void **)(v3 + v39);
  *v10 = v33;
  v40(v10, v13, v7);
  v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)(v10);
  v38(v10, v7);
  if ((v33 & 1) == 0)
    goto LABEL_13;
  if ((*(_BYTE *)(v3 + v19) & 1) == 0)
  {
    dispatch_resume(*(dispatch_object_t *)(v3 + OBJC_IVAR___BAAnalyticsController_privateDataQueue));
    *(_BYTE *)(v3 + v19) = 1;
  }
}

uint64_t sub_12ABC8(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t *v4;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  int64_t v10;
  int64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  sub_88F50(a1, &qword_29F018);
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  v3 = (int *)type metadata accessor for AnalyticsController.LockProtectedData(0);
  v4 = (uint64_t *)(a1 + v3[9]);
  sub_13108C(*v4, v4[1], v4[2], v4[3], v4[4], v4[5], v4[6], v4[7], v4[8], v4[9]);
  *(_OWORD *)v4 = xmmword_209320;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v5 = a1 + v3[7];
  swift_bridgeObjectRelease(*(BAEventReporter **)(v5 + 8), v6, v7, v8, v9, v10, v11, v12);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  v13 = a1 + v3[6];
  sub_88F50(v13, &qword_29FB40);
  v14 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
}

uint64_t sub_12ACC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (int *)type metadata accessor for AnalyticsController.LockProtectedData(0);
  v5 = (__int128 *)(a1 + v4[8]);
  v6 = *v5;
  v7 = v5[1];
  *v5 = 0u;
  v5[1] = 0u;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = (uint64_t *)(a1 + v4[9]);
  v10 = *v8;
  v9 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = v8[4];
  v14 = v8[5];
  v15 = v8[6];
  v16 = v8[7];
  v18 = v8[8];
  v17 = v8[9];
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 72) = v14;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v16;
  *(_QWORD *)(a2 + 96) = v18;
  *(_QWORD *)(a2 + 104) = v17;
  v19 = *(_QWORD *)(a1 + v4[10]);
  *(_QWORD *)(a2 + 112) = v19;
  sub_130FE8(v10, v9, v11, v12, v13, v14, v15, v16, v18, v17);
  return swift_bridgeObjectRetain(v19);
}

uint64_t sub_12AD6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void *Strong;
  void *v22;
  id v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  BAEventReporter *v61;
  uint64_t v62;
  const char *v63;
  void *v64;
  void *v65;
  void *v66;
  int64_t v67;
  int64_t v68;
  void *v69;
  int v70;
  char **v71;
  void *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  void *v76;
  void *v77;
  void *v78;
  int64_t v79;
  int64_t v80;
  void *v81;
  uint64_t v82;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  int64_t v87;
  int64_t v88;
  void *v89;
  char v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  void (*v99)(_BYTE *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char v122;
  char v123;
  _BYTE v124[4];
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  id v130;
  unsigned int v131;
  _BYTE *v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  id v147;
  _BYTE *v148;
  _BYTE *v149;
  __int128 v150;
  __int128 v151;
  _BYTE v152[24];
  __int128 v153;
  __int128 v154;

  v3 = sub_71B4(&qword_2A02D8);
  __chkstk_darwin(v3);
  v135 = &v124[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v144 = type metadata accessor for Locale.Language(0);
  v133 = *(_QWORD *)(v144 - 8);
  v5 = __chkstk_darwin(v144);
  v134 = &v124[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v132 = &v124[-v7];
  v8 = sub_71B4(&qword_2A02E0);
  __chkstk_darwin(v8);
  v143 = (unint64_t)&v124[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v140 = sub_71B4(&qword_2A02E8);
  __chkstk_darwin(v140);
  v11 = (uint64_t *)&v124[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_71B4(&qword_29FB40);
  __chkstk_darwin(v12);
  v148 = &v124[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v137 = type metadata accessor for Locale(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v149 = &v124[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v142 = type metadata accessor for Date(0);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v16 = &v124[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for TimeZone(0);
  v138 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = &v124[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v141 = v1;
  v20 = v1 + OBJC_IVAR___BAAnalyticsController_delegate;
  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_delegate, v152, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (!Strong)
  {
    v153 = 0u;
    v154 = 0u;
LABEL_10:
    sub_88F50((uint64_t)&v153, &qword_2983D0);
    v147 = 0;
    goto LABEL_11;
  }
  v22 = Strong;
  v23 = objc_msgSend(Strong, "analyticsSessionDataForKey:", CFSTR("BASessionDataKeyiCloudLoggedIn"));
  swift_unknownObjectRelease(v22);
  if (v23)
  {
    _bridgeAnyObjectToAny(_:)(&v150, v23);
    swift_unknownObjectRelease(v23);
  }
  else
  {
    v150 = 0u;
    v151 = 0u;
  }
  sub_1B1BC((uint64_t)&v150, (uint64_t)&v153, &qword_2983D0);
  if (!*((_QWORD *)&v154 + 1))
    goto LABEL_10;
  v24 = sub_131130(0, (unint64_t *)&unk_2A02F0, NSNumber_ptr);
  v25 = swift_dynamicCast(&v150, &v153, (char *)&type metadata for Any + 8, v24, 6);
  v26 = (void *)v150;
  if (!v25)
    v26 = 0;
  v147 = v26;
LABEL_11:
  v27 = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (!v27)
  {
    v153 = 0u;
    v154 = 0u;
LABEL_20:
    sub_88F50((uint64_t)&v153, &qword_2983D0);
    v146 = 0;
    goto LABEL_21;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, "analyticsSessionDataForKey:", CFSTR("BASessionDataKeyiTunesLoggedIn"));
  swift_unknownObjectRelease(v28);
  if (v29)
  {
    _bridgeAnyObjectToAny(_:)(&v150, v29);
    swift_unknownObjectRelease(v29);
  }
  else
  {
    v150 = 0u;
    v151 = 0u;
  }
  sub_1B1BC((uint64_t)&v150, (uint64_t)&v153, &qword_2983D0);
  if (!*((_QWORD *)&v154 + 1))
    goto LABEL_20;
  v30 = sub_131130(0, (unint64_t *)&unk_2A02F0, NSNumber_ptr);
  v31 = swift_dynamicCast(&v150, &v153, (char *)&type metadata for Any + 8, v30, 6);
  v32 = (void *)v150;
  if (!v31)
    v32 = 0;
  v146 = v32;
LABEL_21:
  v33 = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (!v33)
  {
    v153 = 0u;
    v154 = 0u;
LABEL_30:
    sub_88F50((uint64_t)&v153, &qword_2983D0);
    v37 = 0;
    goto LABEL_31;
  }
  v34 = v33;
  v35 = objc_msgSend(v33, "analyticsSessionDataForKey:", CFSTR("BASessionDataKeyiCloudDriveOptIn"));
  swift_unknownObjectRelease(v34);
  if (v35)
  {
    _bridgeAnyObjectToAny(_:)(&v150, v35);
    swift_unknownObjectRelease(v35);
  }
  else
  {
    v150 = 0u;
    v151 = 0u;
  }
  sub_1B1BC((uint64_t)&v150, (uint64_t)&v153, &qword_2983D0);
  if (!*((_QWORD *)&v154 + 1))
    goto LABEL_30;
  v36 = sub_131130(0, (unint64_t *)&unk_2A02F0, NSNumber_ptr);
  if (swift_dynamicCast(&v150, &v153, (char *)&type metadata for Any + 8, v36, 6))
    v37 = (void *)v150;
  else
    v37 = 0;
LABEL_31:
  v38 = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (v38)
  {
    v39 = v38;
    v40 = v37;
    v41 = objc_msgSend(v38, "analyticsSessionDataForKey:", CFSTR("BASessionDataKeyHasWidgets"));
    swift_unknownObjectRelease(v39);
    if (v41)
    {
      _bridgeAnyObjectToAny(_:)(&v150, v41);
      swift_unknownObjectRelease(v41);
    }
    else
    {
      v150 = 0u;
      v151 = 0u;
    }
    sub_1B1BC((uint64_t)&v150, (uint64_t)&v153, &qword_2983D0);
    v37 = v40;
    if (*((_QWORD *)&v154 + 1))
    {
      v42 = sub_131130(0, (unint64_t *)&unk_2A02F0, NSNumber_ptr);
      if (swift_dynamicCast(&v150, &v153, (char *)&type metadata for Any + 8, v42, 6))
        v43 = (void *)v150;
      else
        v43 = 0;
      goto LABEL_41;
    }
  }
  else
  {
    v153 = 0u;
    v154 = 0u;
  }
  sub_88F50((uint64_t)&v153, &qword_2983D0);
  v43 = 0;
LABEL_41:
  v44 = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (v44)
  {
    v45 = v44;
    v131 = objc_msgSend(v44, "analyticsSessionDataIsMainWindow");
    swift_unknownObjectRelease(v45);
  }
  else
  {
    v131 = 0;
  }
  v46 = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (v46)
  {
    v47 = v46;
    v129 = objc_msgSend(v46, "analyticsSessionDataIsParallel");
    swift_unknownObjectRelease(v47);
  }
  else
  {
    v129 = 0;
  }
  if (v147)
  {
    v128 = objc_msgSend(v147, "BOOLValue");
    v48 = v146;
    if (v146)
      goto LABEL_49;
LABEL_52:
    v127 = 0;
    if (v43)
      goto LABEL_50;
    goto LABEL_53;
  }
  v128 = 0;
  v48 = v146;
  if (!v146)
    goto LABEL_52;
LABEL_49:
  v127 = objc_msgSend(v48, "BOOLValue");
  if (v43)
  {
LABEL_50:
    v126 = objc_msgSend(v43, "BOOLValue");
    goto LABEL_54;
  }
LABEL_53:
  v126 = 0;
LABEL_54:
  v130 = v43;
  if (v37 && (objc_msgSend(v37, "BOOLValue") & 1) != 0)
    v49 = 1;
  else
    v49 = 2;
  v125 = v49;
  v50 = static TimeZone.current.getter();
  Date.init()(v50);
  v145 = TimeZone.secondsFromGMT(for:)(v16);
  (*(void (**)(_BYTE *, uint64_t))(v139 + 8))(v16, v142);
  v51 = (*(uint64_t (**)(_BYTE *, uint64_t))(v138 + 8))(v19, v17);
  static Locale.current.getter(v51);
  v52 = objc_msgSend((id)objc_opt_self(UNUserNotificationCenter), "currentNotificationCenter");
  v53 = objc_msgSend(v52, "notificationSettings");

  v54 = objc_msgSend(v53, "authorizationStatus");
  v55 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
  v56 = objc_msgSend(v55, "userDefaults");

  LODWORD(v142) = objc_msgSend(v56, "BOOLForKey:", CFSTR("BKReadingGoalsUserDefaultsKey"));
  v57 = v141;
  v58 = *(_QWORD *)(v141 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v59 = v58 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v58 + 16);
  v60 = (os_unfair_lock_s *)(v58 + ((*(unsigned int *)(*(_QWORD *)v58 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v60);
  sub_12DF14(v59, v11);
  os_unfair_lock_unlock(v60);
  v62 = *v11;
  v61 = (BAEventReporter *)v11[1];
  sub_1B1BC((uint64_t)v11 + *(int *)(v140 + 48), (uint64_t)v148, &qword_29FB40);
  if (*(_BYTE *)(v57 + OBJC_IVAR___BAAnalyticsController_launchedFromShortcutItem) == 1)
  {
    swift_bridgeObjectRelease(v61, v63, v64, v65, v66, v67, v68, v69);
    v70 = 3;
    v71 = &selRef_fixedLayout;
    goto LABEL_84;
  }
  if (!v61)
    goto LABEL_79;
  v72 = (void *)0xD000000000000032;
  if (v62 == 0xD000000000000032 && v61 == (BAEventReporter *)0x8000000000221DE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, 0xD000000000000032, 0x8000000000221DE0, 0) & 1) != 0
    || (v62 == 0xD000000000000014 && v61 == (BAEventReporter *)0x8000000000221DC0
     || (_stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, 0xD000000000000014, 0x8000000000221DC0, 0) & 1) != 0)
    && (v73 = type metadata accessor for URL(0),
        (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v148, 1, v73) != 1))
  {
    swift_bridgeObjectRelease(v61, v63, v72, v65, v66, v67, v68, v69);
    v70 = 6;
    goto LABEL_73;
  }
  v74 = (void *)0xD00000000000002BLL;
  if (v62 == 0xD00000000000002BLL && v61 == (BAEventReporter *)0x8000000000221D90
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, 0xD00000000000002BLL, 0x8000000000221D90, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v61, v63, v74, v65, v66, v67, v68, v69);
    v70 = 5;
LABEL_73:
    v71 = &selRef_fixedLayout;
    goto LABEL_84;
  }
  if (v62 == 0xD00000000000001CLL && v61 == (BAEventReporter *)0x8000000000221D70)
  {
    swift_bridgeObjectRelease(v61, v63, (id)0xD00000000000001CLL, v65, v66, v67, v68, v69);
    v70 = 7;
    goto LABEL_73;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, 0xD00000000000001CLL, 0x8000000000221D70, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v61, v75, v76, v77, v78, v79, v80, v81);
    v70 = 7;
    v71 = &selRef_fixedLayout;
  }
  else
  {
LABEL_79:
    v82 = type metadata accessor for URL(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v148, 1, v82) == 1)
    {
      v71 = &selRef_fixedLayout;
      if (v61)
      {
        swift_bridgeObjectRelease(v61, v83, v84, v85, v86, v87, v88, v89);
        v70 = 0;
      }
      else
      {
        v70 = 2;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v61, v83, v84, v85, v86, v87, v88, v89);
      v70 = 1;
      v71 = &selRef_fixedLayout;
    }
  }
LABEL_84:
  type metadata accessor for Utilities();
  sub_E9ED8((char *)&v153);
  v90 = v153;
  v91 = (void *)swift_unknownObjectWeakLoadStrong(v20);
  if (!v91)
  {
    v153 = 0u;
    v154 = 0u;
    v94 = v143;
LABEL_93:
    result = sub_88F50((uint64_t)&v153, &qword_2983D0);
    goto LABEL_94;
  }
  v92 = v91;
  v93 = objc_msgSend(v91, v71[82], CFSTR("BASessionDataKeyLaunchType"));
  swift_unknownObjectRelease(v92);
  v94 = v143;
  if (v93)
  {
    _bridgeAnyObjectToAny(_:)(&v150, v93);
    swift_unknownObjectRelease(v93);
  }
  else
  {
    v150 = 0u;
    v151 = 0u;
  }
  sub_1B1BC((uint64_t)&v150, (uint64_t)&v153, &qword_2983D0);
  if (!*((_QWORD *)&v154 + 1))
    goto LABEL_93;
  result = swift_dynamicCast(&v150, &v153, (char *)&type metadata for Any + 8, &type metadata for BridgedLaunchType, 6);
  if ((result & 1) != 0)
  {
    v96 = v150;
    if ((unint64_t)v150 < 3)
      goto LABEL_95;
    *(_QWORD *)&v153 = v150;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedLaunchType, &v153, &type metadata for BridgedLaunchType, &type metadata for Int);
    __break(1u);
    goto LABEL_93;
  }
LABEL_94:
  v96 = 0;
LABEL_95:
  if (v145 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_114;
  }
  if (v145 > 0x7FFFFFFF)
  {
LABEL_114:
    __break(1u);
    return result;
  }
  v140 = v96;
  LODWORD(v141) = v70;
  v143 = (unint64_t)v54;
  v97 = v132;
  v98 = Locale.language.getter(result);
  Locale.Language.region.getter(v98);
  v99 = *(void (**)(_BYTE *, uint64_t))(v133 + 8);
  v99(v97, v144);
  v100 = type metadata accessor for Locale.Region(0);
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v94, 1, v100) == 1)
  {
    v102 = sub_88F50(v94, &qword_2A02E0);
    v139 = 0;
    v103 = 0xE000000000000000;
  }
  else
  {
    v139 = Locale.Region.identifier.getter();
    v104 = v94;
    v103 = v105;
    v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 8))(v104, v100);
  }
  v106 = v90;
  v107 = v134;
  v108 = Locale.language.getter(v102);
  v109 = (uint64_t)v135;
  Locale.Language.languageCode.getter(v108);
  v99(v107, v144);
  v110 = type metadata accessor for Locale.LanguageCode(0);
  v111 = *(_QWORD *)(v110 - 8);
  v112 = v37;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110) == 1)
  {
    sub_88F50(v109, &qword_2A02D8);
    v113 = 0;
    v114 = 0xE000000000000000;
  }
  else
  {
    v113 = Locale.LanguageCode.identifier.getter();
    v114 = v115;
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v109, v110);
  }
  v116 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v117 = objc_msgSend(v116, "bundleIdentifier");

  if (v117)
  {
    v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117, v118);
    v121 = v120;

  }
  else
  {
    v119 = 0;
    v121 = 0xE000000000000000;
  }
  if (v143 >= 4)
    v122 = 0;
  else
    v122 = 0x1010200u >> (8 * v143);

  if ((_DWORD)v142)
    v123 = 1;
  else
    v123 = 2;

  (*(void (**)(_BYTE *, uint64_t))(v136 + 8))(v149, v137);
  *(_DWORD *)a1 = v145;
  *(_QWORD *)(a1 + 8) = v139;
  *(_QWORD *)(a1 + 16) = v103;
  *(_QWORD *)(a1 + 24) = v113;
  *(_QWORD *)(a1 + 32) = v114;
  *(_BYTE *)(a1 + 40) = v128;
  *(_BYTE *)(a1 + 41) = v127;
  *(_BYTE *)(a1 + 42) = v141;
  *(_QWORD *)(a1 + 48) = v119;
  *(_QWORD *)(a1 + 56) = v121;
  *(_BYTE *)(a1 + 64) = v106;
  *(_BYTE *)(a1 + 65) = v125;
  *(_BYTE *)(a1 + 66) = v122;
  *(_BYTE *)(a1 + 67) = v123;
  *(_BYTE *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 69) = v140;
  *(_BYTE *)(a1 + 70) = v129;
  *(_BYTE *)(a1 + 71) = v131;
  *(_BYTE *)(a1 + 72) = v126;
  return sub_88F50((uint64_t)v148, &qword_29FB40);
}

uint64_t sub_12BC64@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  BAEventReporter *v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  BAEventReporter *v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  int64_t v33;
  int64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  BAEventReporter *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *Strong;
  void *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  SEL v70;
  char v71;
  id v72;
  id v73;
  id v74;
  int64_t v75;
  int64_t v76;
  id v77;
  _OWORD v78[2];
  _BYTE v79[24];
  __int128 v80;
  __int128 v81;

  v2 = v1;
  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v6 = objc_msgSend(v5, "infoDictionary");

  if (!v6)
  {
    v80 = 0u;
    v81 = 0u;
    goto LABEL_13;
  }
  v7 = (BAEventReporter *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!v7[1].super.isa || (v15 = sub_DF7C(0xD00000000000001ALL, 0x8000000000221D50), (v8 & 1) == 0))
  {
    v80 = 0u;
    v81 = 0u;
    swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
    goto LABEL_13;
  }
  sub_3A870(*(_QWORD *)v7[3].dataProviders + 32 * v15, (uint64_t)&v80);
  swift_bridgeObjectRelease(v7, v16, v17, v18, v19, v20, v21, v22);
  if (!*((_QWORD *)&v81 + 1))
  {
LABEL_13:
    sub_88F50((uint64_t)&v80, &qword_2983D0);
    v24 = 0;
    v25 = 0;
    goto LABEL_14;
  }
  v23 = swift_dynamicCast(v78, &v80, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (v23)
    v24 = *(_QWORD *)&v78[0];
  else
    v24 = 0;
  if (v23)
    v25 = *((_QWORD *)&v78[0] + 1);
  else
    v25 = 0;
LABEL_14:
  v26 = objc_msgSend(v4, "mainBundle");
  v27 = objc_msgSend(v26, "infoDictionary");

  if (!v27)
  {
    v80 = 0u;
    v81 = 0u;
LABEL_31:
    sub_88F50((uint64_t)&v80, &qword_2983D0);
    goto LABEL_32;
  }
  v28 = (BAEventReporter *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v27, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (v28[1].super.isa && (v36 = sub_DF7C(0x656C646E75424643, 0xEF6E6F6973726556), (v29 & 1) != 0))
  {
    sub_3A870(*(_QWORD *)v28[3].dataProviders + 32 * v36, (uint64_t)&v80);
  }
  else
  {
    v80 = 0u;
    v81 = 0u;
  }
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  if (!*((_QWORD *)&v81 + 1))
    goto LABEL_31;
  result = swift_dynamicCast(v78, &v80, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((result & 1) == 0)
  {
LABEL_32:
    v46 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_33;
  }
  v39 = (BAEventReporter *)*((_QWORD *)&v78[0] + 1);
  v38 = *(_QWORD *)&v78[0];
  v40 = HIBYTE(*((_QWORD *)&v78[0] + 1)) & 0xFLL;
  v41 = *(_QWORD *)&v78[0] & 0xFFFFFFFFFFFFLL;
  if ((*((_QWORD *)&v78[0] + 1) & 0x2000000000000000) != 0)
    v42 = HIBYTE(*((_QWORD *)&v78[0] + 1)) & 0xFLL;
  else
    v42 = *(_QWORD *)&v78[0] & 0xFFFFFFFFFFFFLL;
  if (!v42)
  {
    v46 = 0;
    goto LABEL_33;
  }
  if ((*((_QWORD *)&v78[0] + 1) & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(*((_QWORD *)&v78[0] + 1));
    v69 = sub_12E6C8(v38, (uint64_t)v39, 10);
    v71 = (char)v70;
    swift_bridgeObjectRelease(v39, v70, v72, v73, v74, v75, v76, v77);
    LOBYTE(v40) = v71;
    v44 = (uint64_t)v69;
    goto LABEL_81;
  }
  if ((*((_QWORD *)&v78[0] + 1) & 0x2000000000000000) == 0)
  {
    if ((*(_QWORD *)&v78[0] & 0x1000000000000000) != 0)
      v43 = (unsigned __int8 *)((*((_QWORD *)&v78[0] + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v43 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*(_QWORD *)&v78[0], *((_QWORD *)&v78[0] + 1));
    v44 = (uint64_t)sub_12E7AC(v43, v41, 10);
    LOBYTE(v40) = v45 & 1;
    goto LABEL_81;
  }
  *(_QWORD *)&v80 = *(_QWORD *)&v78[0];
  *((_QWORD *)&v80 + 1) = *((_QWORD *)&v78[0] + 1) & 0xFFFFFFFFFFFFFFLL;
  if (LOBYTE(v78[0]) != 43)
  {
    if (LOBYTE(v78[0]) == 45)
    {
      if (v40)
      {
        if (v40 != 1)
        {
          if ((BYTE1(v78[0]) - 48) > 9u)
            goto LABEL_78;
          if (v40 == 2)
          {
            LOBYTE(v40) = 0;
            v44 = -(uint64_t)(BYTE1(v78[0]) - 48);
            goto LABEL_81;
          }
          if ((BYTE2(v78[0]) - 48) > 9u)
            goto LABEL_78;
          v44 = -10 * (BYTE1(v78[0]) - 48) - (BYTE2(v78[0]) - 48);
          v65 = v40 - 3;
          if (v40 != 3)
          {
            v66 = (unsigned __int8 *)&v80 + 3;
            while (1)
            {
              v67 = *v66 - 48;
              if (v67 > 9)
                goto LABEL_78;
              v68 = 10 * v44;
              if ((unsigned __int128)(v44 * (__int128)10) >> 64 != (10 * v44) >> 63)
                goto LABEL_78;
              v44 = v68 - v67;
              if (__OFSUB__(v68, v67))
                goto LABEL_78;
              LOBYTE(v40) = 0;
              ++v66;
              if (!--v65)
                goto LABEL_81;
            }
          }
          goto LABEL_80;
        }
        goto LABEL_103;
      }
      __break(1u);
LABEL_105:
      __break(1u);
      return result;
    }
    if (!v40 || (LOBYTE(v78[0]) - 48) > 9u)
    {
LABEL_78:
      v44 = 0;
      LOBYTE(v40) = 1;
      goto LABEL_81;
    }
    v44 = (LOBYTE(v78[0]) - 48);
    if (v40 != 1)
    {
      if ((BYTE1(v78[0]) - 48) > 9u)
        goto LABEL_78;
      v44 = 10 * (LOBYTE(v78[0]) - 48) + (BYTE1(v78[0]) - 48);
      v61 = v40 - 2;
      if (v40 != 2)
      {
        v62 = (unsigned __int8 *)&v80 + 2;
        while (1)
        {
          v63 = *v62 - 48;
          if (v63 > 9)
            goto LABEL_78;
          v64 = 10 * v44;
          if ((unsigned __int128)(v44 * (__int128)10) >> 64 != (10 * v44) >> 63)
            goto LABEL_78;
          v44 = v64 + v63;
          if (__OFADD__(v64, v63))
            goto LABEL_78;
          LOBYTE(v40) = 0;
          ++v62;
          if (!--v61)
            goto LABEL_81;
        }
      }
    }
LABEL_80:
    LOBYTE(v40) = 0;
    goto LABEL_81;
  }
  if (!v40)
    goto LABEL_105;
  if (v40 != 1)
  {
    if ((BYTE1(v78[0]) - 48) > 9u)
      goto LABEL_78;
    v44 = (BYTE1(v78[0]) - 48);
    if (v40 != 2)
    {
      if ((BYTE2(v78[0]) - 48) > 9u)
        goto LABEL_78;
      v44 = 10 * (BYTE1(v78[0]) - 48) + (BYTE2(v78[0]) - 48);
      v57 = v40 - 3;
      if (v40 != 3)
      {
        v58 = (unsigned __int8 *)&v80 + 3;
        while (1)
        {
          v59 = *v58 - 48;
          if (v59 > 9)
            goto LABEL_78;
          v60 = 10 * v44;
          if ((unsigned __int128)(v44 * (__int128)10) >> 64 != (10 * v44) >> 63)
            goto LABEL_78;
          v44 = v60 + v59;
          if (__OFADD__(v60, v59))
            goto LABEL_78;
          LOBYTE(v40) = 0;
          ++v58;
          if (!--v57)
            goto LABEL_81;
        }
      }
    }
    goto LABEL_80;
  }
LABEL_103:
  v44 = 0;
LABEL_81:
  if ((v40 & 1) != 0)
    v46 = 0;
  else
    v46 = v44;
LABEL_33:
  v47 = v2 + OBJC_IVAR___BAAnalyticsController_delegate;
  swift_beginAccess(v2 + OBJC_IVAR___BAAnalyticsController_delegate, v79, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v47);
  if (Strong)
  {
    v49 = Strong;
    v50 = objc_msgSend(Strong, "analyticsSessionDataForKey:", CFSTR("BASessionDataKeyJSVersion"));
    swift_unknownObjectRelease(v49);
    if (v50)
    {
      _bridgeAnyObjectToAny(_:)(v78, v50);
      swift_unknownObjectRelease(v50);
    }
    else
    {
      memset(v78, 0, sizeof(v78));
    }
    sub_1B1BC((uint64_t)v78, (uint64_t)&v80, &qword_2983D0);
    if (*((_QWORD *)&v81 + 1))
    {
      result = swift_dynamicCast(v78, &v80, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      v52 = *((_QWORD *)&v78[0] + 1);
      v51 = *(_QWORD *)&v78[0];
      if (!(_DWORD)result)
      {
        v51 = 0;
        v52 = 0;
      }
      goto LABEL_42;
    }
  }
  else
  {
    v80 = 0u;
    v81 = 0u;
  }
  result = sub_88F50((uint64_t)&v80, &qword_2983D0);
  v51 = 0;
  v52 = 0;
LABEL_42:
  if (v25)
    v53 = v24;
  else
    v53 = 0;
  if (v25)
    v54 = v25;
  else
    v54 = 0xE000000000000000;
  if (!v52)
  {
    v51 = 0;
    v52 = 0xE000000000000000;
  }
  *a1 = v53;
  a1[1] = v54;
  if (v39)
    v55 = v38;
  else
    v55 = 0;
  a1[2] = v46;
  a1[3] = v51;
  if (v39)
    v56 = (unint64_t)v39;
  else
    v56 = 0xE000000000000000;
  a1[4] = v52;
  a1[5] = v55;
  a1[6] = v56;
  return result;
}

uint64_t sub_12C2A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  utsname v25;

  bzero(&v25, 0x500uLL);
  uname(&v25);
  v2 = String.init(cString:)(v25.machine);
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(NSString), "bu_osBundleVersionString");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  v9 = v8;

  v10 = (void *)objc_opt_self(UIDevice);
  v11 = objc_msgSend(v10, "currentDevice");
  v12 = objc_msgSend(v11, "systemName");

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
  v16 = v15;

  v17 = objc_msgSend(v10, "currentDevice");
  v18 = objc_msgSend(v17, "systemVersion");

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
  v22 = v21;

  result = static Capabilities.isInternalBuild.getter();
  if ((result & 1) != 0)
    v24 = 1;
  else
    v24 = 2;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v9;
  return result;
}

void sub_12C43C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  _BYTE v16[24];
  __int128 v17;
  __int128 v18;

  v3 = v1 + OBJC_IVAR___BAAnalyticsController_delegate;
  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_delegate, v16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong)
  {
    v17 = 0u;
    v18 = 0u;
LABEL_9:
    sub_88F50((uint64_t)&v17, &qword_2983D0);
    goto LABEL_10;
  }
  v5 = Strong;
  v6 = objc_msgSend(Strong, "analyticsSessionDataForKey:", CFSTR("BASessionDataKeyStoreFrontID"));
  swift_unknownObjectRelease(v5);
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v15, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  sub_1B1BC((uint64_t)v15, (uint64_t)&v17, &qword_2983D0);
  if (!*((_QWORD *)&v18 + 1))
    goto LABEL_9;
  if (swift_dynamicCast(v15, &v17, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    v8 = *((_QWORD *)&v15[0] + 1);
    v7 = *(_QWORD *)&v15[0];
    goto LABEL_11;
  }
LABEL_10:
  v7 = 0;
  v8 = 0xE000000000000000;
LABEL_11:
  v9 = *(_QWORD *)(v1 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v10 = v9 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v9 + 16);
  v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(_QWORD *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_1255BC(v10, &kBAPrivateAnalyticsID, &v17);
  os_unfair_lock_unlock(v11);
  if (*((_QWORD *)&v17 + 1))
    v12 = v17;
  else
    v12 = 0;
  if (*((_QWORD *)&v17 + 1))
    v13 = *((_QWORD *)&v17 + 1);
  else
    v13 = 0xE000000000000000;
  os_unfair_lock_lock(v11);
  v14 = *(_QWORD *)(v10 + *(int *)(type metadata accessor for AnalyticsController.LockProtectedData(0) + 44));
  swift_bridgeObjectRetain(v14);
  os_unfair_lock_unlock(v11);
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v12;
  a1[3] = v13;
  a1[4] = v14;
}

Swift::String_optional __swiftcall AnalyticsController.contentPrivateID(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  Swift::String_optional result;

  v1 = sub_12C638(a1._countAndFlagsBits, (uint64_t)a1._object, &kBAPrivateContentSeed);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

Swift::String_optional __swiftcall AnalyticsController.contentUserID(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  Swift::String_optional result;

  v1 = sub_12C638(a1._countAndFlagsBits, (uint64_t)a1._object, &kBAPrivateUserSeed);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t sub_12C638(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  BAEventReporter *v9;
  NSString v10;
  NSString v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  int64_t v16;
  int64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v22;
  BAEventReporter *v23;

  v5 = *(_QWORD *)(v3 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
  v6 = v5 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1255BC(v6, a3, &v22);
  os_unfair_lock_unlock(v7);
  v8 = v22;
  v9 = v23;
  if (v23)
  {
    v10 = String._bridgeToObjectiveC()();
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
    v19 = BAObfuscateID(v10, v11);

    if (v19)
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

    }
    else
    {
      return 0;
    }
  }
  return v8;
}

id sub_12C75C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3, a2);
  v8 = v7;
  v9 = a1;
  a4(v6, v8);
  v11 = v10;

  swift_bridgeObjectRelease(v8);
  if (v11)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

void AnalyticsController.performAfterPrivateDataFetched(completionHandler:)(objc_class *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  BAEventReporter *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  BAEventReporter *v30;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v2 + OBJC_IVAR___BAAnalyticsController_privateDataQueue);
  v13 = (BAEventReporter *)swift_allocObject(&unk_27DB40, 32, 7);
  v13[1].super.isa = a1;
  *(_QWORD *)v13[1].dataProviders = a2;
  aBlock[4] = sub_12EFF8;
  v30 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_124DDC;
  aBlock[3] = &unk_27DB58;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  v28 = _swiftEmptyArrayStorage;
  v17 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_71B4(&qword_29FBA8);
  v19 = sub_12EF8C((unint64_t *)&qword_2A0080, &qword_29FBA8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release(v30, v20, v21, v22, v23, v24, v25, v26);
}

id AnalyticsController.newSessionAssertion()()
{
  return sub_12CA80((SEL *)&selRef_newAssertion);
}

id AnalyticsController.newSessionExtendingAssertion()()
{
  return sub_12CA80((SEL *)&selRef_newExtendingAssertion);
}

id sub_12CA80(SEL *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + OBJC_IVAR___BAAnalyticsController_assertionProvider))
    return objc_msgSend(*(id *)(v1 + OBJC_IVAR___BAAnalyticsController_assertionProvider), *a1);
  else
    return 0;
}

id sub_12CAC4(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result;

  result = *(id *)(a1 + OBJC_IVAR___BAAnalyticsController_assertionProvider);
  if (result)
    return objc_msgSend(result, *a3);
  return result;
}

Swift::Void __swiftcall AnalyticsController.privateDataChanged(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  BAEventReporter *v10;
  Swift::OpaquePointer *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BAEventReporter *v18;
  SEL v19;
  id v20;
  id v21;
  int64_t v22;
  id v23;
  BOOL v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  int64_t v29;
  id v30;
  BOOL v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  BAEventReporter *v38;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + OBJC_IVAR___BAAnalyticsController_workQueue);
  v10 = (BAEventReporter *)swift_allocObject(&unk_27DAC8, 24, 7);
  swift_unknownObjectWeakInit(&v10[1]);
  v11 = (Swift::OpaquePointer *)swift_allocObject(&unk_27DB90, 32, 7);
  v11[2]._rawValue = v10;
  v11[3]._rawValue = a1._rawValue;
  aBlock[4] = sub_12F01C;
  v38 = (BAEventReporter *)v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_124DDC;
  aBlock[3] = &unk_27DBA8;
  v12 = _Block_copy(aBlock);
  v13 = v9;
  swift_retain(v10);
  v14 = swift_bridgeObjectRetain(a1._rawValue);
  static DispatchQoS.unspecified.getter(v14);
  v36 = _swiftEmptyArrayStorage;
  v15 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_71B4(&qword_29FBA8);
  v17 = sub_12EF8C((unint64_t *)&qword_2A0080, &qword_29FBA8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v34);
  v18 = v38;
  swift_release(v10, v19, v20, v21, v22, v23, v24, v25);
  swift_release(v18, v26, v27, v28, v29, v30, v31, v32);
}

void sub_12CD18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  char v28;
  char v29[24];

  v4 = sub_71B4(&qword_29AAB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v8 = (_BYTE *)Strong;
    v9 = OBJC_IVAR___BAAnalyticsController_lockProtectedData;
    v10 = *(_QWORD *)(Strong + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
    v11 = v10 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v10 + 16);
    v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(_QWORD *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v12);
    sub_12D128(v11, a2, &v28);
    os_unfair_lock_unlock(v12);
    if (v28 == 1)
    {
      if (v8[OBJC_IVAR___BAAnalyticsController_sessionState] == 1)
      {
        v8[OBJC_IVAR___BAAnalyticsController_privateDataCacheIsCurrent] = 0;
        v13 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
        v14 = (_QWORD *)swift_allocObject(&unk_27DE78, 40, 7);
        v14[2] = 0;
        v14[3] = 0;
        v14[4] = v8;
        v15 = v8;
        v16 = (BAEventReporter *)sub_17BC9C((uint64_t)v6, (uint64_t)&unk_2A0318, (uint64_t)v14);

        swift_release(v16, v17, v18, v19, v20, v21, v22, v23);
        return;
      }
      v24 = *(_QWORD *)&v8[v9];
      v25 = v24 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v24 + 16);
      v26 = (os_unfair_lock_s *)(v24 + ((*(unsigned int *)(*(_QWORD *)v24 + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v26);
      sub_12D494(v25, a2, &v28);
      os_unfair_lock_unlock(v26);
      sub_12D38C((uint64_t)v8);
      v8[OBJC_IVAR___BAAnalyticsController_privateDataCacheIsCurrent] = 1;
    }

  }
}

uint64_t sub_12CF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 144) = a1;
  *(_QWORD *)(v4 + 152) = a4;
  return swift_task_switch(sub_12CF40, 0, 0);
}

uint64_t sub_12CF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 152) + OBJC_IVAR___BAAnalyticsController_delegate;
  swift_beginAccess(v1, v0 + 120, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 160) = Strong;
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = v0 + 16;
    v5 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_12D034;
    v6 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v7 = (_QWORD *)(v0 + 80);
    v7[1] = 0x40000000;
    v7[2] = sub_12D0C4;
    v7[3] = &unk_27DE90;
    v7[4] = v6;
    objc_msgSend(v3, "analyticsController:resetSessionWithCompletion:", v5, v7);
    return swift_continuation_await(v4);
  }
  else
  {
    **(_BYTE **)(v0 + 144) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_12D034()
{
  return swift_task_switch(sub_12D080, 0, 0);
}

uint64_t sub_12D080()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 160));
  **(_BYTE **)(v0 + 144) = *(_QWORD *)(v0 + 160) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_12D0C4(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

void sub_12D128(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  BAEventReporter *v23;
  uint64_t *v24;
  BAEventReporter *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  void *v31;
  void *v32;
  int64_t v33;
  void *v34;
  BOOL v35;
  void *v36;
  uint64_t *v37;
  BAEventReporter *v38;
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  char v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  int64_t v74;
  int64_t v75;
  id v76;
  char v77;
  uint64_t v79;
  int64_t v80;

  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v80 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v15 = 0;
  while (1)
  {
    if (v7)
    {
      v16 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_21;
    }
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v18 >= v80)
      goto LABEL_31;
    v19 = *(_QWORD *)(v79 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v80)
        goto LABEL_31;
      v19 = *(_QWORD *)(v79 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v80)
          goto LABEL_31;
        v19 = *(_QWORD *)(v79 + 8 * v15);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v7 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_21:
    v21 = 16 * v17;
    v22 = (uint64_t *)(*(_QWORD *)(a2 + 48) + v21);
    v23 = (BAEventReporter *)v22[1];
    v24 = (uint64_t *)(*(_QWORD *)(a2 + 56) + v21);
    v26 = *v24;
    v25 = (BAEventReporter *)v24[1];
    v27 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AnalyticsController.LockProtectedData(0) + 20));
    if (!*(_QWORD *)(v27 + 16))
      goto LABEL_28;
    v28 = *v22;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    v29 = sub_DF7C(v28, (uint64_t)v23);
    if ((v30 & 1) == 0)
    {
      swift_release((BAEventReporter *)a2, v30, v31, v32, v33, v34, v35, v36);
      swift_bridgeObjectRelease(v25, v63, v64, v65, v66, v67, v68, v69);
      swift_bridgeObjectRelease(v23, v70, v71, v72, v73, v74, v75, v76);
LABEL_30:
      v77 = 1;
LABEL_32:
      *a3 = v77;
      return;
    }
    v37 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v29);
    v39 = *v37;
    v38 = (BAEventReporter *)v37[1];
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRelease(v23, v40, v41, v42, v43, v44, v45, v46);
    if (v39 == v26 && v38 == v25)
    {
      swift_bridgeObjectRelease_n(v25, 2);
    }
    else
    {
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v38, v26, v25, 0);
      swift_bridgeObjectRelease(v38, v49, v50, v51, v52, v53, v54, v55);
      swift_bridgeObjectRelease(v25, v56, v57, v58, v59, v60, v61, v62);
      if ((v48 & 1) == 0)
      {
LABEL_28:
        swift_release((BAEventReporter *)a2, v8, v9, v10, v11, v12, v13, v14);
        goto LABEL_30;
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v80)
  {
LABEL_31:
    swift_release((BAEventReporter *)a2, v8, v9, v10, v11, v12, v13, v14);
    v77 = 0;
    goto LABEL_32;
  }
  v19 = *(_QWORD *)(v79 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v80)
      goto LABEL_31;
    v19 = *(_QWORD *)(v79 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
}

void sub_12D38C(uint64_t a1)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  BAEventReporter *v8;
  NSString v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  int64_t v14;
  int64_t v15;
  id v16;
  uint64_t v17;
  BAEventReporter *v18;
  _BYTE v19[24];

  v2 = a1 + OBJC_IVAR___BAAnalyticsController_userConfiguration;
  swift_beginAccess(a1 + OBJC_IVAR___BAAnalyticsController_userConfiguration, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(_QWORD *)(a1 + OBJC_IVAR___BAAnalyticsController_lockProtectedData);
    v6 = v5 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v5 + 16);
    v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v7);
    sub_1255BC(v6, &kBAPrivateAnalyticsID, &v17);
    os_unfair_lock_unlock(v7);
    v8 = v18;
    if (v18)
    {
      v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      v9 = 0;
    }
    objc_msgSend(v4, "setUserID:", v9);
    swift_unknownObjectRelease(v4);

  }
}

void sub_12D494(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  BOOL v12;
  void *v13;
  int64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  unint64_t v22;
  unint64_t i;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BAEventReporter *v29;
  uint64_t v30;
  uint64_t *v31;
  BAEventReporter *v32;
  uint64_t v33;
  uint64_t v34;
  BAEventReporter *v35;
  Class isa;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  int64_t v41;
  int64_t v42;
  void *v43;
  char v44;
  _QWORD *v45;
  const char *v46;
  BOOL v47;
  BAEventReporter **v48;
  BAEventReporter *v49;
  unint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  int64_t v54;
  int64_t v55;
  void *v56;
  unint64_t v57;
  Class v58;
  _BOOL8 v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  int v63;
  BAEventReporter *v64;
  uint64_t v65;
  const char *v66;
  void *v67;
  void *v68;
  void *v69;
  int64_t v70;
  int64_t v71;
  void *v72;
  uint64_t *v73;
  _QWORD *v74;
  Class v75;
  BOOL v76;
  objc_class *v77;
  BAEventReporter *v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  int64_t v83;
  int64_t v84;
  id v85;
  unsigned int v87;
  unsigned int v88;
  BAEventReporter **v89;
  char v90;
  unsigned int isUniquelyReferenced_nonNull_native;
  uint64_t v92;
  int64_t v93;
  BAEventReporter *v95;

  v92 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v93 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v90 = 0;
  v14 = 0;
  if (v6)
    goto LABEL_6;
LABEL_7:
  v24 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v24 < v93)
    {
      v25 = *(_QWORD *)(v92 + 8 * v24);
      ++v14;
      if (v25)
        goto LABEL_20;
      v14 = v24 + 1;
      if (v24 + 1 >= v93)
        goto LABEL_43;
      v25 = *(_QWORD *)(v92 + 8 * v14);
      if (v25)
        goto LABEL_20;
      v14 = v24 + 2;
      if (v24 + 2 >= v93)
        goto LABEL_43;
      v25 = *(_QWORD *)(v92 + 8 * v14);
      if (v25)
      {
LABEL_20:
        v6 = (v25 - 1) & v25;
        for (i = __clz(__rbit64(v25)) + (v14 << 6); ; i = v22 | (v14 << 6))
        {
          v27 = 16 * i;
          v28 = (uint64_t *)(*(_QWORD *)(a2 + 48) + v27);
          v30 = *v28;
          v29 = (BAEventReporter *)v28[1];
          v31 = (uint64_t *)(*(_QWORD *)(a2 + 56) + v27);
          v33 = *v31;
          v32 = (BAEventReporter *)v31[1];
          v34 = *(int *)(type metadata accessor for AnalyticsController.LockProtectedData(0) + 20);
          v35 = *(BAEventReporter **)(a1 + v34);
          isa = v35[1].super.isa;
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v32);
          if (isa)
          {
            v37 = sub_DF7C(v30, (uint64_t)v29);
            if ((v44 & 1) != 0)
            {
              v45 = (_QWORD *)(*(_QWORD *)v35[3].dataProviders + 16 * v37);
              v46 = (const char *)v45[1];
              v47 = *v45 == v33 && v46 == (const char *)v32;
              if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v45, v46, v33, v32, 0) & 1) != 0)
              {
                swift_bridgeObjectRelease(v32, v46, v38, v39, v40, v41, v42, v43);
                swift_bridgeObjectRelease(v29, v15, v16, v17, v18, v19, v20, v21);
                if (!v6)
                  goto LABEL_7;
                goto LABEL_6;
              }
            }
            v48 = (BAEventReporter **)(a1 + v34);
            v35 = *v48;
          }
          else
          {
            v48 = (BAEventReporter **)(a1 + v34);
          }
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
          v49 = *v48;
          v95 = *v48;
          v89 = v48;
          *v48 = (BAEventReporter *)0x8000000000000000;
          v57 = sub_DF7C(v30, (uint64_t)v29);
          v58 = v49[1].super.isa;
          v59 = (v50 & 1) == 0;
          v60 = (uint64_t)v58 + v59;
          if (__OFADD__(v58, v59))
            goto LABEL_46;
          if (*(_QWORD *)v49[1].dataProviders >= v60)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v64 = v95;
              if ((v50 & 1) != 0)
                goto LABEL_37;
            }
            else
            {
              v88 = v50;
              sub_1CF8B8();
              v50 = v88;
              v64 = v95;
              if ((v88 & 1) != 0)
                goto LABEL_37;
            }
          }
          else
          {
            v87 = v50;
            sub_1CE998(v60, isUniquelyReferenced_nonNull_native);
            v61 = sub_DF7C(v30, (uint64_t)v29);
            v63 = v62 & 1;
            v50 = v87;
            if ((v87 & 1) != v63)
              goto LABEL_48;
            v57 = v61;
            v64 = v95;
            if ((v87 & 1) != 0)
            {
LABEL_37:
              v65 = *(_QWORD *)v64[3].dataProviders + 16 * v57;
              swift_bridgeObjectRelease(*(BAEventReporter **)(v65 + 8), (SEL)v50, v51, v52, v53, v54, v55, v56);
              *(_QWORD *)v65 = v33;
              *(_QWORD *)(v65 + 8) = v32;
              goto LABEL_41;
            }
          }
          *((_QWORD *)&v64[4].super.isa + (v57 >> 6)) |= 1 << v57;
          v73 = (uint64_t *)((char *)v64[3].super.isa + 16 * v57);
          *v73 = v30;
          v73[1] = (uint64_t)v29;
          v74 = (_QWORD *)(*(_QWORD *)v64[3].dataProviders + 16 * v57);
          *v74 = v33;
          v74[1] = v32;
          v75 = v64[1].super.isa;
          v76 = __OFADD__(v75, 1);
          v77 = (Class)((char *)v75 + 1);
          if (v76)
            goto LABEL_47;
          v64[1].super.isa = v77;
          swift_bridgeObjectRetain(v29);
LABEL_41:
          v78 = *v89;
          *v89 = v64;
          swift_bridgeObjectRelease(v29, v66, v67, v68, v69, v70, v71, v72);
          swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
          v90 = 1;
          if (!v6)
            goto LABEL_7;
LABEL_6:
          v22 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v26 = v24 + 3;
      if (v26 < v93)
      {
        v25 = *(_QWORD *)(v92 + 8 * v26);
        if (v25)
        {
          v14 = v26;
          goto LABEL_20;
        }
        while (1)
        {
          v14 = v26 + 1;
          if (__OFADD__(v26, 1))
            goto LABEL_45;
          if (v14 >= v93)
            break;
          v25 = *(_QWORD *)(v92 + 8 * v14);
          ++v26;
          if (v25)
            goto LABEL_20;
        }
      }
    }
LABEL_43:
    swift_release((BAEventReporter *)a2, v7, v8, v9, v10, v11, v12, v13);
    *a3 = v90 & 1;
    return;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_12D834(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    sub_12910C(2u);
    v4 = swift_allocObject(&unk_27DAC8, 24, 7);
    swift_unknownObjectWeakInit(v4 + 16);
    swift_retain(v4);
    sub_12A92C((uint64_t)sub_1311F0, v4);

    return swift_release_n(v4, 2);
  }
  return result;
}

void sub_12D8D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t Strong;
  void *v15;
  BAEventReporter *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  BAEventReporter *v28;
  SEL v29;
  id v30;
  id v31;
  int64_t v32;
  id v33;
  BOOL v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  int64_t v39;
  id v40;
  BOOL v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  BAEventReporter *v45;
  SEL v46;
  id v47;
  id v48;
  int64_t v49;
  id v50;
  BOOL v51;
  id v52;
  id v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  _QWORD aBlock[5];
  BAEventReporter *v58;
  char v59[24];
  char v60[24];

  v2 = sub_71B4(&qword_29AAB0);
  __chkstk_darwin(v2);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1 + 16;
  swift_beginAccess(v13, v60, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v13);
  if (Strong)
  {
    v15 = (void *)Strong;
    v53 = *(id *)(Strong + OBJC_IVAR___BAAnalyticsController_workQueue);

    v16 = (BAEventReporter *)swift_allocObject(&unk_27DAC8, 24, 7);
    v54 = v10;
    swift_beginAccess(v13, v59, 0, 0);
    v17 = (void *)swift_unknownObjectWeakLoadStrong(v13);
    swift_unknownObjectWeakInit(&v16[1]);

    aBlock[4] = sub_1311F8;
    v58 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_124DDC;
    aBlock[3] = &unk_27DE18;
    v18 = _Block_copy(aBlock);
    v19 = swift_retain(v16);
    static DispatchQoS.unspecified.getter(v19);
    v56 = _swiftEmptyArrayStorage;
    v20 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = sub_71B4(&qword_29FBA8);
    v55 = v4;
    v22 = v9;
    v23 = v6;
    v24 = v21;
    v25 = sub_12EF8C((unint64_t *)&qword_2A0080, &qword_29FBA8);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v24, v25, v5, v20);
    v26 = v53;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v5);
    v27 = v22;
    v4 = v55;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v27);
    v28 = v58;
    swift_release(v16, v29, v30, v31, v32, v33, v34, v35);
    swift_release(v28, v36, v37, v38, v39, v40, v41, v42);
  }
  v43 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v4, 1, 1, v43);
  v44 = swift_allocObject(&unk_27DE50, 32, 7);
  *(_QWORD *)(v44 + 16) = 0;
  *(_QWORD *)(v44 + 24) = 0;
  v45 = (BAEventReporter *)sub_17BB50((uint64_t)v4, (uint64_t)&unk_2A0308, v44);
  swift_release(v45, v46, v47, v48, v49, v50, v51, v52);
}

void sub_12DBD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    sub_12910C(0);
    v4 = &v3[OBJC_IVAR___BAAnalyticsController_delegate];
    swift_beginAccess(&v3[OBJC_IVAR___BAAnalyticsController_delegate], &v7, 0, 0);
    v5 = (void *)swift_unknownObjectWeakLoadStrong(v4);
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "analyticsControllerDidEndSession:", v3);

      swift_unknownObjectRelease(v6);
    }
    else
    {

    }
  }
}

uint64_t sub_12DC74()
{
  return swift_task_switch(sub_12DC88, 0, 0);
}

uint64_t sub_12DC88()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_295978 != -1)
    swift_once(&qword_295978, sub_11A7E8);
  v1 = (_QWORD *)swift_task_alloc(dword_29FB9C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_12DCFC;
  return sub_11B144();
}

uint64_t sub_12DCFC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 16));
  return swift_task_switch(sub_12DD50, 0, 0);
}

uint64_t sub_12DD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_2955E0 != -1)
    swift_once(&qword_2955E0, sub_5C5EC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_705C(v1, (uint64_t)qword_298740);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Session flushed", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_12DE7C()
{
  sub_129218();
  sub_12910C(1u);
  sub_1286FC();
}

uint64_t sub_12DEA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_12DF14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (uint64_t)a2 + *(int *)(sub_71B4(&qword_2A02E8) + 48);
  v5 = type metadata accessor for AnalyticsController.LockProtectedData(0);
  v6 = (_QWORD *)(a1 + *(int *)(v5 + 28));
  v7 = v6[1];
  *a2 = *v6;
  a2[1] = v7;
  sub_3A82C(a1 + *(int *)(v5 + 24), v4, &qword_29FB40);
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_12DF98(BAEventReporter **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  BAEventReporter *v11;
  void *v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t isa;
  uint64_t result;
  _QWORD v19[7];
  char v20;

  v19[3] = &type metadata for LinkData;
  v19[4] = sub_A2754();
  v19[5] = sub_131488();
  v6 = swift_allocObject(&unk_27DEB8, 168, 7);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 128) = v7;
  *(_OWORD *)(v6 + 144) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(v6 + 160) = *(_QWORD *)(a2 + 144);
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 64) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 96) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 32) = v10;
  v19[0] = v6;
  v19[6] = a3;
  v20 = 0;
  v11 = *a1;
  sub_2DC18((_QWORD *)a2);
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
    v11 = sub_1DB8EC(0, (int64_t)v11[1].super.isa + 1, 1, v11, v12, v13, v14, v15);
  isa = (unint64_t)v11[1].super.isa;
  v16 = *(_QWORD *)v11[1].dataProviders;
  if (isa >= v16 >> 1)
    v11 = sub_1DB8EC((BAEventReporter *)(v16 > 1), isa + 1, 1, v11, v12, v13, v14, v15);
  v11[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v19, (uint64_t)&v11[4 * isa + 2]);
  *a1 = v11;
  return result;
}

uint64_t sub_12E0D0(BAEventReporter **a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  int v7;
  char v8;
  unint64_t v10;
  unint64_t v11;
  BAEventReporter *v12;
  void *v13;
  int64_t v14;
  int64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t isa;
  uint64_t result;
  _BYTE v20[4];
  int v21;
  int v22;
  int v23;
  int v24;
  ValueMetadata *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;

  v7 = a3;
  v8 = a2;
  v10 = HIDWORD(a2);
  v11 = HIDWORD(a3);
  v25 = &type metadata for OrientationData;
  v26 = sub_10E8F4();
  v20[0] = v8;
  v21 = v10;
  v22 = v7;
  v23 = v11;
  v24 = a4;
  v27 = sub_10EEA4();
  v28 = a5;
  v29 = 0;
  v12 = *a1;
  swift_bridgeObjectRetain(a5);
  if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
    v12 = sub_1DB8EC(0, (int64_t)v12[1].super.isa + 1, 1, v12, v13, v14, v15, v16);
  isa = (unint64_t)v12[1].super.isa;
  v17 = *(_QWORD *)v12[1].dataProviders;
  if (isa >= v17 >> 1)
    v12 = sub_1DB8EC((BAEventReporter *)(v17 > 1), isa + 1, 1, v12, v13, v14, v15, v16);
  v12[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v20, (uint64_t)&v12[4 * isa + 2]);
  *a1 = v12;
  return result;
}

uint64_t sub_12E1D8(BAEventReporter **a1, char a2, uint64_t a3)
{
  return sub_12E418(a1, a2, a3, (uint64_t)&type metadata for SessionEndReasonData, (uint64_t (*)(void))sub_10EC48, (uint64_t (*)(void))sub_131444);
}

uint64_t sub_12E204(BAEventReporter **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BAEventReporter *v8;
  void *v9;
  int64_t v10;
  int64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t isa;
  uint64_t result;
  uint64_t v16;
  int v17;
  char v18;
  ValueMetadata *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;

  v19 = &type metadata for SessionListeningData;
  v20 = sub_10EA10();
  v16 = a2;
  v17 = a3;
  v18 = BYTE4(a3) & 1;
  v21 = sub_10EE60();
  v22 = a4;
  v23 = 0;
  v8 = *a1;
  swift_bridgeObjectRetain(a4);
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
    v8 = sub_1DB8EC(0, (int64_t)v8[1].super.isa + 1, 1, v8, v9, v10, v11, v12);
  isa = (unint64_t)v8[1].super.isa;
  v13 = *(_QWORD *)v8[1].dataProviders;
  if (isa >= v13 >> 1)
    v8 = sub_1DB8EC((BAEventReporter *)(v13 > 1), isa + 1, 1, v8, v9, v10, v11, v12);
  v8[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)&v16, (uint64_t)&v8[4 * isa + 2]);
  *a1 = v8;
  return result;
}

uint64_t sub_12E2FC(BAEventReporter **a1, uint64_t a2, int a3, uint64_t a4)
{
  BAEventReporter *v8;
  void *v9;
  int64_t v10;
  int64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t isa;
  uint64_t result;
  uint64_t v16;
  int v17;
  ValueMetadata *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;

  v18 = &type metadata for SessionReadingData;
  v19 = sub_10EB2C();
  v16 = a2;
  v17 = a3;
  v20 = sub_10EE1C();
  v21 = a4;
  v22 = 0;
  v8 = *a1;
  swift_bridgeObjectRetain(a4);
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
    v8 = sub_1DB8EC(0, (int64_t)v8[1].super.isa + 1, 1, v8, v9, v10, v11, v12);
  isa = (unint64_t)v8[1].super.isa;
  v13 = *(_QWORD *)v8[1].dataProviders;
  if (isa >= v13 >> 1)
    v8 = sub_1DB8EC((BAEventReporter *)(v13 > 1), isa + 1, 1, v8, v9, v10, v11, v12);
  v8[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)&v16, (uint64_t)&v8[4 * isa + 2]);
  *a1 = v8;
  return result;
}

uint64_t sub_12E3EC(BAEventReporter **a1, char a2, uint64_t a3)
{
  return sub_12E418(a1, a2, a3, (uint64_t)&type metadata for TabData, (uint64_t (*)(void))sub_10EC8C, (uint64_t (*)(void))sub_131400);
}

uint64_t sub_12E418(BAEventReporter **a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  BAEventReporter *v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t isa;
  uint64_t result;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v19 = a4;
  v20 = a5();
  v18[0] = a2;
  v21 = a6();
  v22 = a3;
  v23 = 0;
  v10 = *a1;
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    v10 = sub_1DB8EC(0, (int64_t)v10[1].super.isa + 1, 1, v10, v11, v12, v13, v14);
  isa = (unint64_t)v10[1].super.isa;
  v15 = *(_QWORD *)v10[1].dataProviders;
  if (isa >= v15 >> 1)
    v10 = sub_1DB8EC((BAEventReporter *)(v15 > 1), isa + 1, 1, v10, v11, v12, v13, v14);
  v10[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v18, (uint64_t)&v10[4 * isa + 2]);
  *a1 = v10;
  return result;
}

uint64_t sub_12E4FC(BAEventReporter **a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t isa;
  uint64_t result;
  _QWORD v14[7];
  char v15;

  v14[3] = &type metadata for BooksTreatmentData;
  v14[4] = sub_10ED10();
  v14[5] = sub_10ED54();
  v14[6] = a3;
  v14[0] = a2;
  v15 = 0;
  v6 = *a1;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
    v6 = sub_1DB8EC(0, (int64_t)v6[1].super.isa + 1, 1, v6, v7, v8, v9, v10);
  isa = (unint64_t)v6[1].super.isa;
  v11 = *(_QWORD *)v6[1].dataProviders;
  if (isa >= v11 >> 1)
    v6 = sub_1DB8EC((BAEventReporter *)(v11 > 1), isa + 1, 1, v6, v7, v8, v9, v10);
  v6[1].super.isa = (Class)(isa + 1);
  result = sub_10ED98((uint64_t)v14, (uint64_t)&v6[4 * isa + 2]);
  *a1 = v6;
  return result;
}

_QWORD *sub_12E5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_71B4(&qword_2A02D0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_12E650(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_12E6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;
  unsigned __int8 *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v27, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v27 = v6;
    v28 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v27;
    goto LABEL_7;
  }
  v6 = sub_12EA28(v4, v5);
  v11 = (unint64_t)v10;
  swift_bridgeObjectRelease((BAEventReporter *)v7, v10, v12, v13, v14, v15, v16, v17);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v18 = sub_12E7AC(v8, v9, a3);
  swift_bridgeObjectRelease((BAEventReporter *)v7, v19, v20, v21, v22, v23, v24, v25);
  return v18;
}

unsigned __int8 *sub_12E7AC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_12EA28(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BAEventReporter *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  int64_t v14;
  int64_t v15;
  id v16;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = (BAEventReporter *)v5;
  v9 = sub_12EAA4(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6, v10, v11, v12, v13, v14, v15, v16);
  return v9;
}

uint64_t sub_12EAA4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  BAEventReporter *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  int64_t v25;
  id v26;
  BOOL v27;
  id v28;
  _QWORD v29[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_12EBE8(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_12E5EC(v12, 0);
      v5 = sub_12ECD4((unint64_t)v29, v8 + 32, v9, a1, a2, v5, a4);
      v13 = (BAEventReporter *)v29[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v21 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release((BAEventReporter *)v8, v22, v23, v24, v25, v26, v27, v28);
    return v21;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v29[0] = a3;
    v29[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v29 + v8, v9 - v8);
  }
}

unint64_t sub_12EBE8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_12E650(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_12E650(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_12ECD4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_12E650(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_12E650(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_12EEE4(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  if (*(_QWORD *)(v8 + 16))
    swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

uint64_t sub_12EF10()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_12EF38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

void sub_12EF48(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  swift_release(*(BAEventReporter **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_12EF50(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_12EF60()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_12EF84()
{
  uint64_t v0;

  sub_128690(v0);
}

uint64_t sub_12EF8C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_679EC(a2);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_12EFCC()
{
  uint64_t v0;

  sub_128FD4(v0);
}

uint64_t sub_12EFD4(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocObject(v8, 32, 7);
}

uint64_t sub_12EFF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_12F01C()
{
  uint64_t v0;

  sub_12CD18(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_12F024()
{
  uint64_t v0;
  BAEventReporter *v1;
  id v2;
  NSString v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  int64_t v8;
  int64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE v17[24];

  if (qword_295978 != -1)
    swift_once(&qword_295978, sub_11A7E8);
  v0 = qword_29FB10 + OBJC_IVAR___BAAppManager_applicationGroupIdentifier;
  swift_beginAccess(qword_29FB10 + OBJC_IVAR___BAAppManager_applicationGroupIdentifier, v17, 0, 0);
  v1 = *(BAEventReporter **)((char *)&dword_8 + v0);
  if (!v1
    || (v2 = objc_allocWithZone((Class)NSUserDefaults),
        swift_bridgeObjectRetain(v1),
        v3 = String._bridgeToObjectiveC()(),
        swift_bridgeObjectRelease(v1, v4, v5, v6, v7, v8, v9, v10),
        v11 = objc_msgSend(v2, "initWithSuiteName:", v3),
        v3,
        !v11))
  {
    v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  }
  v12 = objc_msgSend(v11, "stringForKey:", CFSTR("BACustomAppBuild"));
  if (v12)
  {
    v14 = v12;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  }
  else
  {

    return 0;
  }
  return v15;
}

void _s13BookAnalytics0B10ControllerC32countingAssertProviderTransition6toZeroySo019BUCountingAssertionF0C_tF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *Strong;
  void *v15;
  void *v16;
  BAEventReporter *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BAEventReporter *v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  int64_t v35;
  id v36;
  BOOL v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[5];
  BAEventReporter *v43;
  _BYTE v44[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2955E0 != -1)
    swift_once(&qword_2955E0, sub_5C5EC);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_705C(v8, (uint64_t)qword_298740);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "Session End", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = v1 + OBJC_IVAR___BAAnalyticsController_delegate;
  swift_beginAccess(v1 + OBJC_IVAR___BAAnalyticsController_delegate, v44, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v13);
  if (Strong)
  {
    v15 = Strong;
    objc_msgSend(Strong, "analyticsControllerWillEndSession:", v1);
    swift_unknownObjectRelease(v15);
  }
  v16 = *(void **)(v1 + OBJC_IVAR___BAAnalyticsController_workQueue);
  v17 = (BAEventReporter *)swift_allocObject(&unk_27DAC8, 24, 7);
  swift_unknownObjectWeakInit(&v17[1]);
  aBlock[4] = sub_1311E8;
  v43 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_124DDC;
  aBlock[3] = &unk_27DDF0;
  v18 = _Block_copy(aBlock);
  v19 = v16;
  v20 = swift_retain(v17);
  static DispatchQoS.unspecified.getter(v20);
  v41 = _swiftEmptyArrayStorage;
  v21 = sub_7E10((unint64_t *)&qword_2A0070, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_71B4(&qword_29FBA8);
  v23 = sub_12EF8C((unint64_t *)&qword_2A0080, &qword_29FBA8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v22, v23, v2, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v39);
  v24 = v43;
  swift_release(v17, v25, v26, v27, v28, v29, v30, v31);
  swift_release(v24, v32, v33, v34, v35, v36, v37, v38);
}

void _s13BookAnalytics0B10ControllerC32countingAssertProviderTransition9toNonZeroySo019BUCountingAssertionF0C_tF_0()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  BAEventReporter *v8;
  BAEventReporter *v9;
  void *v10;
  BAEventReporter *v11;
  NSObject *v12;
  objc_class *v13;
  SEL v14;
  id v15;
  id v16;
  int64_t v17;
  id v18;
  BOOL v19;
  id v20;
  char isEscapingClosureAtFileLocation;
  SEL v22;
  id v23;
  id v24;
  int64_t v25;
  id v26;
  BOOL v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  int64_t v32;
  id v33;
  BOOL v34;
  id v35;
  _QWORD v36[5];
  BAEventReporter *v37;

  v1 = v0;
  if (qword_2955E0 != -1)
    swift_once(&qword_2955E0, sub_5C5EC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_705C(v2, (uint64_t)qword_298740);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "Session Start", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)((char *)v1 + OBJC_IVAR___BAAnalyticsController_workQueue);
  v8 = (BAEventReporter *)swift_allocObject(&unk_27DD10, 24, 7);
  v8[1].super.isa = v1;
  v9 = (BAEventReporter *)swift_allocObject(&unk_27DD38, 32, 7);
  v9[1].super.isa = (Class)sub_130E30;
  *(_QWORD *)v9[1].dataProviders = v8;
  v36[4] = sub_12EFF8;
  v37 = v9;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 1107296256;
  v36[2] = sub_12DEA8;
  v36[3] = &unk_27DD50;
  v10 = _Block_copy(v36);
  v11 = v37;
  v12 = v7;
  v13 = v1;
  swift_retain(v9);
  swift_release(v11, v14, v15, v16, v17, v18, v19, v20);
  dispatch_sync(v12, v10);

  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 105, 599, 24, 1);
  swift_release(v8, v22, v23, v24, v25, v26, v27, v28);
  swift_release(v9, v29, v30, v31, v32, v33, v34, v35);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

id sub_12F65C@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;
  _BYTE v6[24];

  v3 = (void **)(*a1 + OBJC_IVAR___BAAnalyticsController_applicationTracker);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_12F6B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR___BAAnalyticsController_sessionManager);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return swift_retain(v4);
}

uint64_t sub_12F708@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_12F744(a1, &OBJC_IVAR___BAAnalyticsController_userConfiguration, a2);
}

uint64_t sub_12F714(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_12F7A0(a1, a2, a3, a4, &OBJC_IVAR___BAAnalyticsController_userConfiguration);
}

uint64_t sub_12F720@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_12F744(a1, &OBJC_IVAR___BAAnalyticsController_delegate, a2);
}

uint64_t sub_12F72C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_12F7A0(a1, a2, a3, a4, &OBJC_IVAR___BAAnalyticsController_delegate);
}

uint64_t sub_12F738@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_12F744(a1, &OBJC_IVAR___BAAnalyticsController_configurationProvider, a2);
}

uint64_t sub_12F744@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v6[24];

  v4 = *a1 + *a2;
  swift_beginAccess(v4, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  *a3 = result;
  return result;
}

uint64_t sub_12F794(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_12F7A0(a1, a2, a3, a4, &OBJC_IVAR___BAAnalyticsController_configurationProvider);
}

uint64_t sub_12F7A0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = *a1;
  v6 = *a2 + *a5;
  swift_beginAccess(v6, v8, 1, 0);
  return swift_unknownObjectWeakAssign(v6, v5);
}

uint64_t method lookup function for AnalyticsController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AnalyticsController);
}

uint64_t dispatch thunk of AnalyticsController.applicationTracker.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of AnalyticsController.applicationTracker.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of AnalyticsController.applicationTracker.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.sessionManager.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.userConfiguration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.userConfiguration.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of AnalyticsController.userConfiguration.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of AnalyticsController.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of AnalyticsController.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of AnalyticsController.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of AnalyticsController.configurationProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.configurationProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.configurationProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.sessionStartTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.start()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1F8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.setReferral(url:app:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_248.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of AnalyticsController.setTreatmentData(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_248.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of AnalyticsController.append(userExperience:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_248.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of AnalyticsController.setLaunchedFromShortcutItem()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_248.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of AnalyticsController.unsetLaunchedFromShortcutItem()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_248.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of AnalyticsController.resetPrivateData(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_248.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.waitForSessionEnd(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_248.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of AnalyticsController.refreshSessionDataIfActive()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_248.reloff + (swift_isaMask & *v0)))();
}

uint64_t storeEnumTagSinglePayload for SessionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_12FACC + 4 * byte_209355[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_12FB00 + 4 * byte_209350[v4]))();
}

uint64_t sub_12FB00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12FB08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x12FB10);
  return result;
}

uint64_t sub_12FB1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x12FB24);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_12FB28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12FB30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionState()
{
  return &type metadata for SessionState;
}

uint64_t *sub_12FB4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_71B4(&qword_29F018);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = v13;
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v13);
    if (v18(v15, 1, v16))
    {
      v19 = sub_71B4(&qword_29FB40);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (uint64_t *)((char *)a1 + v21);
    v26 = (uint64_t *)((char *)a2 + v21);
    v27 = *(uint64_t *)((char *)a2 + v21 + 24);
    swift_bridgeObjectRetain(v24);
    if (v27)
    {
      v28 = v26[1];
      *v25 = *v26;
      v25[1] = v28;
      v25[2] = v26[2];
      v25[3] = v27;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v27);
    }
    else
    {
      v29 = *((_OWORD *)v26 + 1);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v29;
    }
    v30 = a3[9];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = *((_QWORD *)v32 + 1);
    if (v33 == 1)
    {
      v34 = *((_OWORD *)v32 + 3);
      *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
      *((_OWORD *)v31 + 3) = v34;
      *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
      v35 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v35;
    }
    else
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v36 = *((_QWORD *)v32 + 3);
      *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
      *((_QWORD *)v31 + 3) = v36;
      v37 = *((_QWORD *)v32 + 5);
      *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
      *((_QWORD *)v31 + 5) = v37;
      v38 = *((_QWORD *)v32 + 7);
      *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
      *((_QWORD *)v31 + 7) = v38;
      v39 = *((_QWORD *)v32 + 9);
      *((_QWORD *)v31 + 8) = *((_QWORD *)v32 + 8);
      *((_QWORD *)v31 + 9) = v39;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
    }
    v40 = a3[10];
    v41 = a3[11];
    v42 = *(uint64_t *)((char *)a2 + v40);
    *(uint64_t *)((char *)a1 + v40) = v42;
    v43 = *(uint64_t *)((char *)a2 + v41);
    *(uint64_t *)((char *)a1 + v41) = v43;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
  }
  return a1;
}

uint64_t sub_12FDBC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  v6 = a1 + a2[6];
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v9 = a1 + a2[8];
  if (*(_QWORD *)(v9 + 24))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  }
  v10 = (_QWORD *)(a1 + a2[9]);
  v11 = v10[1];
  if (v11 != 1)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10[3]);
    swift_bridgeObjectRelease(v10[5]);
    swift_bridgeObjectRelease(v10[7]);
    swift_bridgeObjectRelease(v10[9]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
}

char *sub_12FEEC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_71B4(&qword_29F018);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = *(_QWORD *)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain(v11);
  if (v16(v13, 1, v14))
  {
    v17 = sub_71B4(&qword_29FB40);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v23 = &a1[v19];
  v24 = &a2[v19];
  v25 = *(_QWORD *)&a2[v19 + 24];
  swift_bridgeObjectRetain(v22);
  if (v25)
  {
    v26 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v26;
    *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
    *((_QWORD *)v23 + 3) = v25;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v25);
  }
  else
  {
    v27 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v27;
  }
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *((_QWORD *)v30 + 1);
  if (v31 == 1)
  {
    v32 = *((_OWORD *)v30 + 3);
    *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    *((_OWORD *)v29 + 3) = v32;
    *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
    v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v33;
  }
  else
  {
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v34 = *((_QWORD *)v30 + 3);
    *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
    *((_QWORD *)v29 + 3) = v34;
    v35 = *((_QWORD *)v30 + 5);
    *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
    *((_QWORD *)v29 + 5) = v35;
    v36 = *((_QWORD *)v30 + 7);
    *((_QWORD *)v29 + 6) = *((_QWORD *)v30 + 6);
    *((_QWORD *)v29 + 7) = v36;
    v37 = *((_QWORD *)v30 + 9);
    *((_QWORD *)v29 + 8) = *((_QWORD *)v30 + 8);
    *((_QWORD *)v29 + 9) = v37;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
  }
  v38 = a3[10];
  v39 = a3[11];
  v40 = *(_QWORD *)&a2[v38];
  *(_QWORD *)&a1[v38] = v40;
  v41 = *(_QWORD *)&a2[v39];
  *(_QWORD *)&a1[v39] = v41;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  return a1;
}

char *sub_130130(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  BAEventReporter *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  int64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BAEventReporter *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  uint64_t v57;
  BAEventReporter *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  char *v72;
  BAEventReporter *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  BAEventReporter *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;
  uint64_t v103;
  BAEventReporter *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  BAEventReporter *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  int64_t v118;
  int64_t v119;
  id v120;
  uint64_t v121;
  BAEventReporter *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  int64_t v127;
  int64_t v128;
  id v129;
  uint64_t v130;
  BAEventReporter *v131;
  uint64_t v132;
  SEL v133;
  id v134;
  id v135;
  id v136;
  int64_t v137;
  int64_t v138;
  id v139;
  uint64_t v140;
  BAEventReporter *v141;
  uint64_t v142;
  SEL v143;
  id v144;
  id v145;
  id v146;
  int64_t v147;
  int64_t v148;
  id v149;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_71B4(&qword_29F018);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(_QWORD *)&a2[v12];
  v14 = *(BAEventReporter **)&a1[v12];
  *(_QWORD *)&a1[v12] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = a3[6];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_12:
    v30 = sub_71B4(&qword_29FB40);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_13:
  v31 = a3[7];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v34 = *((_QWORD *)v33 + 1);
  v35 = (BAEventReporter *)*((_QWORD *)v32 + 1);
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  v43 = a3[8];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = *(_QWORD *)&a1[v43 + 24];
  v47 = *(_QWORD *)&a2[v43 + 24];
  if (v46)
  {
    if (v47)
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v48 = *((_QWORD *)v45 + 1);
      v49 = (BAEventReporter *)*((_QWORD *)v44 + 1);
      *((_QWORD *)v44 + 1) = v48;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
      *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
      v57 = *((_QWORD *)v45 + 3);
      v58 = (BAEventReporter *)*((_QWORD *)v44 + 3);
      *((_QWORD *)v44 + 3) = v57;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      sub_1305AC((uint64_t)v44);
      v68 = *((_OWORD *)v45 + 1);
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *((_OWORD *)v44 + 1) = v68;
    }
  }
  else if (v47)
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v66 = *((_QWORD *)v45 + 1);
    *((_QWORD *)v44 + 1) = v66;
    *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
    v67 = *((_QWORD *)v45 + 3);
    *((_QWORD *)v44 + 3) = v67;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v67);
  }
  else
  {
    v69 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *((_OWORD *)v44 + 1) = v69;
  }
  v70 = a3[9];
  v71 = &a1[v70];
  v72 = &a2[v70];
  v73 = *(BAEventReporter **)&a1[v70 + 8];
  v74 = *(_QWORD *)&a2[v70 + 8];
  if (v73 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v74 == 1)
    {
      *(_OWORD *)v71 = *(_OWORD *)v72;
      v75 = *((_OWORD *)v72 + 1);
      v76 = *((_OWORD *)v72 + 2);
      v77 = *((_OWORD *)v72 + 4);
      *((_OWORD *)v71 + 3) = *((_OWORD *)v72 + 3);
      *((_OWORD *)v71 + 4) = v77;
      *((_OWORD *)v71 + 1) = v75;
      *((_OWORD *)v71 + 2) = v76;
    }
    else
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      v81 = *((_QWORD *)v72 + 1);
      *((_QWORD *)v71 + 1) = v81;
      *((_QWORD *)v71 + 2) = *((_QWORD *)v72 + 2);
      v82 = *((_QWORD *)v72 + 3);
      *((_QWORD *)v71 + 3) = v82;
      *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
      v83 = *((_QWORD *)v72 + 5);
      *((_QWORD *)v71 + 5) = v83;
      *((_QWORD *)v71 + 6) = *((_QWORD *)v72 + 6);
      v84 = *((_QWORD *)v72 + 7);
      *((_QWORD *)v71 + 7) = v84;
      *((_QWORD *)v71 + 8) = *((_QWORD *)v72 + 8);
      v85 = *((_QWORD *)v72 + 9);
      *((_QWORD *)v71 + 9) = v85;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v85);
    }
  }
  else if (v74 == 1)
  {
    sub_1305E0(v71);
    *(_OWORD *)v71 = *(_OWORD *)v72;
    v78 = *((_OWORD *)v72 + 4);
    v80 = *((_OWORD *)v72 + 1);
    v79 = *((_OWORD *)v72 + 2);
    *((_OWORD *)v71 + 3) = *((_OWORD *)v72 + 3);
    *((_OWORD *)v71 + 4) = v78;
    *((_OWORD *)v71 + 1) = v80;
    *((_OWORD *)v71 + 2) = v79;
  }
  else
  {
    *(_QWORD *)v71 = *(_QWORD *)v72;
    v86 = *((_QWORD *)v72 + 1);
    *((_QWORD *)v71 + 1) = v86;
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRelease(v73, v87, v88, v89, v90, v91, v92, v93);
    *((_QWORD *)v71 + 2) = *((_QWORD *)v72 + 2);
    v94 = *((_QWORD *)v72 + 3);
    v95 = (BAEventReporter *)*((_QWORD *)v71 + 3);
    *((_QWORD *)v71 + 3) = v94;
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
    *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
    v103 = *((_QWORD *)v72 + 5);
    v104 = (BAEventReporter *)*((_QWORD *)v71 + 5);
    *((_QWORD *)v71 + 5) = v103;
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
    *((_QWORD *)v71 + 6) = *((_QWORD *)v72 + 6);
    v112 = *((_QWORD *)v72 + 7);
    v113 = (BAEventReporter *)*((_QWORD *)v71 + 7);
    *((_QWORD *)v71 + 7) = v112;
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
    *((_QWORD *)v71 + 8) = *((_QWORD *)v72 + 8);
    v121 = *((_QWORD *)v72 + 9);
    v122 = (BAEventReporter *)*((_QWORD *)v71 + 9);
    *((_QWORD *)v71 + 9) = v121;
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
  }
  v130 = a3[10];
  v131 = *(BAEventReporter **)&a1[v130];
  v132 = *(_QWORD *)&a2[v130];
  *(_QWORD *)&a1[v130] = v132;
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRelease(v131, v133, v134, v135, v136, v137, v138, v139);
  v140 = a3[11];
  v141 = *(BAEventReporter **)&a1[v140];
  v142 = *(_QWORD *)&a2[v140];
  *(_QWORD *)&a1[v140] = v142;
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRelease(v141, v143, v144, v145, v146, v147, v148, v149);
  return a1;
}

uint64_t sub_1305AC(uint64_t a1)
{
  destroy for ThemesData(a1);
  return a1;
}

_QWORD *sub_1305E0(_QWORD *a1)
{
  destroy for CampaignData(a1);
  return a1;
}

char *sub_130614(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_71B4(&qword_29F018);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_71B4(&qword_29FB40);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = &a1[v19];
  v22 = &a2[v19];
  v23 = *((_OWORD *)v22 + 4);
  v24 = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 4) = v23;
  v25 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v25;
  *((_OWORD *)v21 + 2) = v24;
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  return a1;
}

char *sub_1307AC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  BAEventReporter *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  int64_t v33;
  int64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  BAEventReporter *v42;
  const char *v43;
  void *v44;
  void *v45;
  void *v46;
  int64_t v47;
  int64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  BAEventReporter *v54;
  uint64_t v55;
  BAEventReporter *v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  BAEventReporter *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  BAEventReporter *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  int64_t v78;
  int64_t v79;
  id v80;
  uint64_t v81;
  BAEventReporter *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  int64_t v87;
  int64_t v88;
  id v89;
  uint64_t v90;
  BAEventReporter *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  int64_t v96;
  int64_t v97;
  id v98;
  uint64_t v99;
  BAEventReporter *v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  int64_t v105;
  int64_t v106;
  id v107;
  uint64_t v108;
  BAEventReporter *v109;
  uint64_t v110;
  BAEventReporter *v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  int64_t v116;
  int64_t v117;
  id v118;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v18 = sub_71B4(&qword_29F018);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v19 = a3[5];
  v20 = *(BAEventReporter **)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  swift_bridgeObjectRelease(v20, v11, v12, v13, v14, v15, v16, v17);
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    v36 = sub_71B4(&qword_29FB40);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  v37 = a3[7];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v41 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  v42 = (BAEventReporter *)*((_QWORD *)v38 + 1);
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease(v42, v29, v30, v31, v32, v33, v34, v35);
  v50 = a3[8];
  v51 = &a1[v50];
  v52 = &a2[v50];
  if (*(_QWORD *)&a1[v50 + 24])
  {
    if (*((_QWORD *)v52 + 3))
    {
      v53 = *((_QWORD *)v52 + 1);
      v54 = (BAEventReporter *)*((_QWORD *)v51 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = v53;
      swift_bridgeObjectRelease(v54, v43, v44, v45, v46, v47, v48, v49);
      v55 = *((_QWORD *)v52 + 3);
      v56 = (BAEventReporter *)*((_QWORD *)v51 + 3);
      *((_QWORD *)v51 + 2) = *((_QWORD *)v52 + 2);
      *((_QWORD *)v51 + 3) = v55;
      swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
      goto LABEL_18;
    }
    sub_1305AC((uint64_t)v51);
  }
  v64 = *((_OWORD *)v52 + 1);
  *(_OWORD *)v51 = *(_OWORD *)v52;
  *((_OWORD *)v51 + 1) = v64;
LABEL_18:
  v65 = a3[9];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = *(BAEventReporter **)&a1[v65 + 8];
  if (v68 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v69 = *((_QWORD *)v67 + 1);
    if (v69 != 1)
    {
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = v69;
      swift_bridgeObjectRelease(v68, v43, v44, v45, v46, v47, v48, v49);
      v72 = *((_QWORD *)v67 + 3);
      v73 = (BAEventReporter *)*((_QWORD *)v66 + 3);
      *((_QWORD *)v66 + 2) = *((_QWORD *)v67 + 2);
      *((_QWORD *)v66 + 3) = v72;
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      v81 = *((_QWORD *)v67 + 5);
      v82 = (BAEventReporter *)*((_QWORD *)v66 + 5);
      *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
      *((_QWORD *)v66 + 5) = v81;
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
      v90 = *((_QWORD *)v67 + 7);
      v91 = (BAEventReporter *)*((_QWORD *)v66 + 7);
      *((_QWORD *)v66 + 6) = *((_QWORD *)v67 + 6);
      *((_QWORD *)v66 + 7) = v90;
      swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
      v99 = *((_QWORD *)v67 + 9);
      v100 = (BAEventReporter *)*((_QWORD *)v66 + 9);
      *((_QWORD *)v66 + 8) = *((_QWORD *)v67 + 8);
      *((_QWORD *)v66 + 9) = v99;
      swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
      goto LABEL_23;
    }
    sub_1305E0(v66);
  }
  v70 = *((_OWORD *)v67 + 3);
  *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
  *((_OWORD *)v66 + 3) = v70;
  *((_OWORD *)v66 + 4) = *((_OWORD *)v67 + 4);
  v71 = *((_OWORD *)v67 + 1);
  *(_OWORD *)v66 = *(_OWORD *)v67;
  *((_OWORD *)v66 + 1) = v71;
LABEL_23:
  v108 = a3[10];
  v109 = *(BAEventReporter **)&a1[v108];
  *(_QWORD *)&a1[v108] = *(_QWORD *)&a2[v108];
  swift_bridgeObjectRelease(v109, v43, v44, v45, v46, v47, v48, v49);
  v110 = a3[11];
  v111 = *(BAEventReporter **)&a1[v110];
  *(_QWORD *)&a1[v110] = *(_QWORD *)&a2[v110];
  swift_bridgeObjectRelease(v111, v112, v113, v114, v115, v116, v117, v118);
  return a1;
}

uint64_t sub_130AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_130AC0);
}

uint64_t sub_130AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_71B4(&qword_29F018);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_71B4(&qword_29FB40);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_130B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_130B7C);
}

uint64_t sub_130B7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_71B4(&qword_29F018);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = sub_71B4(&qword_29FB40);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_130C28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  sub_130D00(319, qword_2A01E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_130D00(319, (unint64_t *)&qword_29FBA0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_2093D8;
      v6[4] = &unk_2093F0;
      v6[5] = &unk_209408;
      v6[6] = &unk_209420;
      v6[7] = &unk_209420;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

void sub_130D00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_130D50()
{
  unint64_t result;

  result = qword_2A0230;
  if (!qword_2A0230)
  {
    result = swift_getWitnessTable(byte_209478, &type metadata for SessionState);
    atomic_store(result, (unint64_t *)&qword_2A0230);
  }
  return result;
}

uint64_t sub_130D94()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_130DB8()
{
  uint64_t v0;

  return sub_1E0BB4(*(_QWORD *)(v0 + 16));
}

void sub_130DC0(uint64_t a1, BAEventReporter *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  if (a1)
    swift_release(a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
}

void sub_130DD0(uint64_t a1)
{
  uint64_t v1;

  sub_127B64(a1, *(objc_class **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_130DE8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t sub_130E0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_130E30()
{
  sub_12DE7C();
}

uint64_t sub_130E38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_130E48(uint64_t a1)
{
  uint64_t v1;

  sub_12A4A0(a1, v1);
}

unint64_t sub_130E50()
{
  unint64_t result;

  result = qword_2A0280;
  if (!qword_2A0280)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionData, &type metadata for SessionData);
    atomic_store(result, (unint64_t *)&qword_2A0280);
  }
  return result;
}

unint64_t sub_130E94()
{
  unint64_t result;

  result = qword_2A0288;
  if (!qword_2A0288)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AppData, &type metadata for AppData);
    atomic_store(result, (unint64_t *)&qword_2A0288);
  }
  return result;
}

unint64_t sub_130ED8()
{
  unint64_t result;

  result = qword_2A0290;
  if (!qword_2A0290)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeviceData, &type metadata for DeviceData);
    atomic_store(result, (unint64_t *)&qword_2A0290);
  }
  return result;
}

unint64_t sub_130F1C()
{
  unint64_t result;

  result = qword_2A0298;
  if (!qword_2A0298)
  {
    result = swift_getWitnessTable("9f\a", &type metadata for UserData);
    atomic_store(result, (unint64_t *)&qword_2A0298);
  }
  return result;
}

unint64_t sub_130F60()
{
  unint64_t result;

  result = qword_2A02A0;
  if (!qword_2A02A0)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_2A02A0);
  }
  return result;
}

unint64_t sub_130FA4()
{
  unint64_t result;

  result = qword_2A02A8;
  if (!qword_2A02A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DebugData, &type metadata for DebugData);
    atomic_store(result, (unint64_t *)&qword_2A02A8);
  }
  return result;
}

uint64_t sub_130FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a8);
  }
  return result;
}

unint64_t sub_131048()
{
  unint64_t result;

  result = qword_2A02B8;
  if (!qword_2A02B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CampaignData, &type metadata for CampaignData);
    atomic_store(result, (unint64_t *)&qword_2A02B8);
  }
  return result;
}

uint64_t sub_13108C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

unint64_t sub_1310EC()
{
  unint64_t result;

  result = qword_2A02C0;
  if (!qword_2A02C0)
  {
    result = swift_getWitnessTable("Iw\a", &type metadata for ReferralData);
    atomic_store(result, (unint64_t *)&qword_2A02C0);
  }
  return result;
}

uint64_t sub_131130(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_13116C(uint64_t a1, const char *a2, void *a3, void *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  uint64_t v8;

  swift_release(*(BAEventReporter **)(v8 + 16), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  return swift_deallocObject(v8, 32, 7);
}

void sub_131198()
{
  uint64_t v0;

  sub_12A72C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1311A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_29F018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1311E8()
{
  uint64_t v0;

  return sub_12D834(v0);
}

void sub_1311F0()
{
  uint64_t v0;

  sub_12D8D0(v0);
}

void sub_1311F8()
{
  uint64_t v0;

  sub_12DBD0(v0);
}

uint64_t sub_131200()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_131224()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_2A0304);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_9DAA0;
  return swift_task_switch(sub_12DC88, 0, 0);
}

uint64_t sub_13127C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1312A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_2A0314);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_88CD4;
  v5[18] = a1;
  v5[19] = v4;
  return swift_task_switch(sub_12CF40, 0, 0);
}

unint64_t sub_13130C()
{
  unint64_t result;

  result = qword_2A0320;
  if (!qword_2A0320)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_2A0320);
  }
  return result;
}

uint64_t sub_131350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_29FB40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

_QWORD *sub_131398(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

unint64_t sub_131400()
{
  unint64_t result;

  result = qword_2A0358;
  if (!qword_2A0358)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TabData, &type metadata for TabData);
    atomic_store(result, (unint64_t *)&qword_2A0358);
  }
  return result;
}

unint64_t sub_131444()
{
  unint64_t result;

  result = qword_2A0388;
  if (!qword_2A0388)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionEndReasonData, &type metadata for SessionEndReasonData);
    atomic_store(result, (unint64_t *)&qword_2A0388);
  }
  return result;
}

unint64_t sub_131488()
{
  unint64_t result;

  result = qword_2A03A8;
  if (!qword_2A03A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LinkData, &type metadata for LinkData);
    atomic_store(result, (unint64_t *)&qword_2A03A8);
  }
  return result;
}

uint64_t sub_1314CC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[20]);
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_131580(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A0410, &enum case for SessionGroup.default(_:));
}

uint64_t static PreorderSuccessEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295990, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0410, a1);
}

uint64_t sub_1315C0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A0428, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PreorderSuccessEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295998, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0428, a1);
}

uint64_t PreorderSuccessEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderSuccessEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PreorderSuccessEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A04B0, (uint64_t)&nominal type descriptor for PreorderSuccessEvent);
}

uint64_t PreorderSuccessEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderSuccessEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderSuccessEvent.contentStoreData.modify())()
{
  type metadata accessor for PreorderSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderSuccessEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderSuccessEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PreorderSuccessEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderSuccessEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderSuccessEvent.sectionData.modify())()
{
  type metadata accessor for PreorderSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderSuccessEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderSuccessEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PreorderSuccessEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderSuccessEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderSuccessEvent.eventData.modify())()
{
  type metadata accessor for PreorderSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderSuccessEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PreorderSuccessEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t PreorderSuccessEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderSuccessEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PreorderSuccessEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A0548, (uint64_t)&nominal type descriptor for PreorderSuccessEvent.Model);
}

uint64_t PreorderSuccessEvent.Model.init(contentData:contentStoreData:sectionData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v7;
  *(_BYTE *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 24) = v9;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v11;
  *(_WORD *)(a5 + 56) = v12;
  *(_DWORD *)(a5 + 60) = v13;
  *(_BYTE *)(a5 + 64) = v14;
  *(_DWORD *)(a5 + 68) = v15;
  *(_BYTE *)(a5 + 72) = v16;
  v17 = *(_DWORD *)(a1 + 73);
  v18 = *a2;
  v19 = a2[1];
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 96) = v18;
  v20 = a2[2];
  v21 = a2[3];
  *(_OWORD *)(a5 + 112) = v19;
  *(_OWORD *)(a5 + 128) = v20;
  *(_OWORD *)(a5 + 144) = v21;
  v22 = a3[1];
  *(_OWORD *)(a5 + 168) = *a3;
  *(_OWORD *)(a5 + 184) = v22;
  v23 = a3[3];
  *(_OWORD *)(a5 + 200) = a3[2];
  *(_OWORD *)(a5 + 216) = v23;
  v24 = a3[5];
  *(_OWORD *)(a5 + 232) = a3[4];
  v25 = *(_BYTE *)(a1 + 77);
  LODWORD(v10) = *((_DWORD *)a2 + 16);
  LOBYTE(v11) = *((_BYTE *)a2 + 68);
  *(_DWORD *)(a5 + 73) = v17;
  *(_BYTE *)(a5 + 77) = v25;
  *(_BYTE *)(a5 + 164) = v11;
  *(_DWORD *)(a5 + 160) = v10;
  *(_OWORD *)(a5 + 248) = v24;
  *(_OWORD *)(a5 + 264) = a3[6];
  v26 = a5 + *(int *)(type metadata accessor for PreorderSuccessEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_131AA0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_131AD8 + 4 * byte_2094A0[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_131AD8()
{
  return 0xD000000000000010;
}

uint64_t sub_131AF4()
{
  return 0x446E6F6974636573;
}

uint64_t sub_131B08()
{
  return 0x746144746E657665;
}

uint64_t sub_131B24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_131DE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_131B4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_131DE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PreorderSuccessEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A0440);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_131DE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PreorderSuccessEvent.Model.CodingKeys, &type metadata for PreorderSuccessEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v41 = *(_QWORD *)v4;
  *((_QWORD *)&v41 + 1) = v13;
  v42[0] = v14;
  *(_OWORD *)&v42[8] = v15;
  *(_QWORD *)&v42[24] = v16;
  *(_QWORD *)&v43 = v17;
  WORD4(v43) = v18;
  HIDWORD(v43) = v19;
  LOBYTE(v44) = v20;
  DWORD1(v44) = v21;
  BYTE8(v44) = v22;
  *(_DWORD *)((char *)&v44 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v44) = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v47 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v41 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v42 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 128);
    v43 = v28;
    BYTE4(v44) = v26;
    LODWORD(v44) = v25;
    v47 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_OWORD *)(v4 + 184);
    v31 = *(_OWORD *)(v4 + 200);
    v41 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v42 = v30;
    v32 = *(_OWORD *)(v4 + 216);
    v33 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)&v42[16] = v31;
    v43 = v32;
    v34 = *(_OWORD *)(v4 + 248);
    v35 = *(_OWORD *)(v4 + 264);
    v44 = v33;
    v45 = v34;
    v46 = v35;
    v47 = 2;
    v36 = sub_1B768();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for SectionData, v36);
    v37 = v4 + *(int *)(type metadata accessor for PreorderSuccessEvent.Model(0) + 28);
    LOBYTE(v41) = 3;
    v38 = type metadata accessor for EventData(0);
    v39 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v37, &v41, v6, v38, v39);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_131DE4()
{
  unint64_t result;

  result = qword_2A0448;
  if (!qword_2A0448)
  {
    result = swift_getWitnessTable(byte_20969C, &type metadata for PreorderSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0448);
  }
  return result;
}

void PreorderSuccessEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_2A0450);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PreorderSuccessEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_131DE4();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PreorderSuccessEvent.Model.CodingKeys, &type metadata for PreorderSuccessEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v53 = v9;
    v16 = v6;
    v17 = v5;
    v18 = v3;
    v19 = v49;
    v60 = 0;
    v20 = sub_1779C();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v60, v51, &type metadata for ContentData, v20);
    v23 = *((_QWORD *)&v54 + 1);
    v24 = v55[0];
    v25 = *(_OWORD *)&v55[8];
    v26 = *(_QWORD *)&v55[24];
    v27 = v56;
    v28 = WORD4(v56);
    v29 = HIDWORD(v56);
    v30 = v57;
    v31 = DWORD1(v57);
    v32 = BYTE8(v57);
    v33 = BYTE13(v57);
    *(_QWORD *)v11 = v54;
    *((_QWORD *)v11 + 1) = v23;
    v11[16] = v24;
    *(_OWORD *)(v11 + 24) = v25;
    *((_QWORD *)v11 + 5) = v26;
    *((_QWORD *)v11 + 6) = v27;
    *((_WORD *)v11 + 28) = v28;
    *((_DWORD *)v11 + 15) = v29;
    v11[64] = v30;
    *((_DWORD *)v11 + 17) = v31;
    v11[72] = v32;
    *(_DWORD *)(v11 + 73) = *(_DWORD *)((char *)&v57 + 9);
    v11[77] = v33;
    *((_OWORD *)v11 + 5) = v58;
    v60 = 1;
    v34 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, &type metadata for ContentStoreData, &v60, v22, &type metadata for ContentStoreData, v34);
    v35 = v57;
    v36 = BYTE4(v57);
    v37 = *(_OWORD *)v55;
    *((_OWORD *)v11 + 6) = v54;
    *((_OWORD *)v11 + 7) = v37;
    v38 = v56;
    *((_OWORD *)v11 + 8) = *(_OWORD *)&v55[16];
    *((_OWORD *)v11 + 9) = v38;
    v11[164] = v36;
    *((_DWORD *)v11 + 40) = v35;
    v60 = 2;
    v39 = sub_1BFE4();
    v47[1] = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, &type metadata for SectionData, &v60, v22, &type metadata for SectionData, v39);
    v40 = *(_OWORD *)v55;
    *(_OWORD *)(v11 + 168) = v54;
    v41 = *(_OWORD *)&v55[16];
    v42 = v56;
    *(_OWORD *)(v11 + 184) = v40;
    *(_OWORD *)(v11 + 200) = v41;
    v43 = v57;
    v44 = v58;
    *(_OWORD *)(v11 + 216) = v42;
    *(_OWORD *)(v11 + 232) = v43;
    v45 = v59;
    *(_OWORD *)(v11 + 248) = v44;
    *(_OWORD *)(v11 + 264) = v45;
    LOBYTE(v54) = 3;
    v46 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v19, &v54, v22, v19, v46);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v51);
    (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v11[*(int *)(v53 + 28)], v17, v19);
    sub_132270((uint64_t)v11, v48);
    sub_7DAC(v52);
    sub_1322B4((uint64_t)v11);
  }
}

uint64_t sub_132270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreorderSuccessEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1322B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PreorderSuccessEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1322F0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PreorderSuccessEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_132304(_QWORD *a1)
{
  return PreorderSuccessEvent.Model.encode(to:)(a1);
}

uint64_t sub_132318@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295990, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0410, (uint64_t)sub_131580, a1);
}

uint64_t sub_13233C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295998, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0428, (uint64_t)sub_1315C0, a1);
}

uint64_t getEnumTagSinglePayload for PreorderSuccessEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13236C);
}

uint64_t sub_13236C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PreorderSuccessEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_132444);
}

uint64_t sub_132444(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for PreorderSuccessEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_132524);
}

uint64_t sub_132524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PreorderSuccessEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1325AC);
}

uint64_t sub_1325AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_132620(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_2095A8;
  v4[2] = &unk_2095C0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreorderSuccessEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1326F4 + 4 * byte_2094A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_132728 + 4 * byte_2094A4[v4]))();
}

uint64_t sub_132728(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_132730(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x132738);
  return result;
}

uint64_t sub_132744(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13274CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_132750(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_132758(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreorderSuccessEvent.Model.CodingKeys()
{
  return &type metadata for PreorderSuccessEvent.Model.CodingKeys;
}

unint64_t sub_132778()
{
  unint64_t result;

  result = qword_2A0588;
  if (!qword_2A0588)
  {
    result = swift_getWitnessTable(byte_209674, &type metadata for PreorderSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0588);
  }
  return result;
}

unint64_t sub_1327C0()
{
  unint64_t result;

  result = qword_2A0590;
  if (!qword_2A0590)
  {
    result = swift_getWitnessTable(byte_2095E4, &type metadata for PreorderSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0590);
  }
  return result;
}

unint64_t sub_132808()
{
  unint64_t result;

  result = qword_2A0598;
  if (!qword_2A0598)
  {
    result = swift_getWitnessTable(byte_20960C, &type metadata for PreorderSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0598);
  }
  return result;
}

void __swiftcall ReadingSettingsData.init(scrollViewStatus:autoNightThemeStatus:backgroundColor:font:fontSize:brightnessLevel:)(BookAnalytics::ReadingSettingsData *__return_ptr retstr, BookAnalytics::ScrollViewStatus scrollViewStatus, BookAnalytics::AutoNightThemeStatus autoNightThemeStatus, BookAnalytics::BackgroundColor backgroundColor, Swift::String font, Swift::Float fontSize, Swift::Float brightnessLevel)
{
  BookAnalytics::AutoNightThemeStatus v7;
  BookAnalytics::BackgroundColor v8;

  v7 = *(_BYTE *)autoNightThemeStatus;
  v8 = *(_BYTE *)backgroundColor;
  retstr->scrollViewStatus = *(_BYTE *)scrollViewStatus;
  retstr->autoNightThemeStatus = v7;
  retstr->backgroundColor = v8;
  retstr->font = font;
  retstr->fontSize = fontSize;
  retstr->brightnessLevel = brightnessLevel;
}

float ReadingSettingsData.fontSize.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

void ReadingSettingsData.fontSize.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 24) = a1;
}

float ReadingSettingsData.brightnessLevel.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 28);
}

void ReadingSettingsData.brightnessLevel.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 28) = a1;
}

uint64_t sub_132894(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1328CC + 4 * byte_2096F0[a1]))(0xD000000000000010, 0x8000000000220970);
}

uint64_t sub_1328CC(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_1328E4()
{
  return 0x756F72676B636162;
}

uint64_t sub_132908()
{
  return 1953394534;
}

uint64_t sub_132918()
{
  return 0x657A6953746E6F66;
}

uint64_t sub_132930()
{
  return 0x656E746867697262;
}

uint64_t sub_132954()
{
  unsigned __int8 *v0;

  return sub_132894(*v0);
}

uint64_t sub_13295C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1334AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_132980(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_133098();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1329A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_133098();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingSettingsData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = sub_71B4(&qword_2A05A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v25 = v1[2];
  v26 = v9;
  v10 = *((_QWORD *)v1 + 1);
  v23 = *((_QWORD *)v1 + 2);
  v24 = v10;
  v12 = *((float *)v1 + 6);
  v11 = *((float *)v1 + 7);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_133098();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingSettingsData.CodingKeys, &type metadata for ReadingSettingsData.CodingKeys, v15, v13, v14);
  v35 = v8;
  v34 = 0;
  v16 = sub_CB8E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v4, &type metadata for ScrollViewStatus, v16);
  if (!v2)
  {
    v17 = v25;
    v19 = v23;
    v18 = v24;
    v33 = v26;
    v32 = 1;
    v20 = sub_11443C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v32, v4, &type metadata for AutoNightThemeStatus, v20);
    v31 = v17;
    v30 = 2;
    v21 = sub_1330DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v4, &type metadata for BackgroundColor, v21);
    v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v29, v4);
    v28 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v28, v4, v12);
    v27 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v27, v4, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void ReadingSettingsData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  BAEventReporter *v19;
  BAEventReporter *v20;
  float v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  float v29;
  BAEventReporter *v30;
  BAEventReporter *v31;
  uint64_t v32;
  int v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;

  v5 = sub_71B4(&qword_2A05B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_133098();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingSettingsData.CodingKeys, &type metadata for ReadingSettingsData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    BYTE3(v39) = 0;
    v12 = sub_CB928();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v39 + 4), &type metadata for ScrollViewStatus, (char *)&v39 + 3, v5, &type metadata for ScrollViewStatus, v12);
    v13 = BYTE4(v39);
    BYTE1(v39) = 1;
    v14 = sub_11459C();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v39 + 2), &type metadata for AutoNightThemeStatus, (char *)&v39 + 1, v5, &type metadata for AutoNightThemeStatus, v14);
    v15 = BYTE2(v39);
    v38 = 2;
    v16 = sub_133120();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for BackgroundColor, &v38, v5, &type metadata for BackgroundColor, v16);
    v34 = v15;
    v17 = v39;
    v37 = 3;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
    v20 = v19;
    v32 = v18;
    v33 = v17;
    v36 = 4;
    swift_bridgeObjectRetain(v19);
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
    v31 = v20;
    v35 = 5;
    v29 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v13;
    *(_BYTE *)(a2 + 1) = v34;
    *(_BYTE *)(a2 + 2) = v33;
    v30 = v31;
    *(_QWORD *)(a2 + 8) = v32;
    *(_QWORD *)(a2 + 16) = v30;
    *(float *)(a2 + 24) = v21;
    *(float *)(a2 + 28) = v29;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v30, v22, v23, v24, v25, v26, v27, v28);
  }
}

void sub_132EBC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingSettingsData.init(from:)(a1, a2);
}

uint64_t sub_132ED0(_QWORD *a1)
{
  return ReadingSettingsData.encode(to:)(a1);
}

BOOL _s13BookAnalytics19ReadingSettingsDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BAEventReporter *v19;
  uint64_t v20;
  char v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  _BOOL8 result;
  char v37;
  char v38;
  char v39;
  uint64_t v40;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v8 = *((float *)a1 + 6);
  v7 = *((float *)a1 + 7);
  v9 = *(_QWORD *)(a2 + 8);
  v11 = *(float *)(a2 + 24);
  v10 = *(float *)(a2 + 28);
  v12 = 0xE200000000000000;
  v13 = 28271;
  if (v2 != 1)
  {
    v13 = 6710895;
    v12 = 0xE300000000000000;
  }
  if (*a1)
    v14 = v13;
  else
    v14 = 0x6E776F6E6B6E75;
  if (v2)
    v15 = (BAEventReporter *)v12;
  else
    v15 = (BAEventReporter *)0xE700000000000000;
  v16 = 0xE200000000000000;
  v17 = 28271;
  if (*(_BYTE *)a2 != 1)
  {
    v17 = 6710895;
    v16 = 0xE300000000000000;
  }
  if (*(_BYTE *)a2)
    v18 = v17;
  else
    v18 = 0x6E776F6E6B6E75;
  if (*(_BYTE *)a2)
    v19 = (BAEventReporter *)v16;
  else
    v19 = (BAEventReporter *)0xE700000000000000;
  v40 = *(_QWORD *)(a2 + 16);
  if (v14 == v18 && v15 == v19)
  {
    v20 = v5;
    swift_bridgeObjectRelease_n(v15, 2);
  }
  else
  {
    v20 = v5;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v18, v19, 0);
    swift_bridgeObjectRelease(v15, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(v19, v29, v30, v31, v32, v33, v34, v35);
    result = 0;
    if ((v21 & 1) == 0)
      return result;
  }
  sub_27F4C(v3);
  if ((v37 & 1) == 0)
    return 0;
  sub_28AA8(v4);
  if ((v38 & 1) == 0)
    return 0;
  if (v6 == v9 && v20 == v40)
  {
    if (v8 != v11)
      return 0;
    return v7 == v10;
  }
  v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v20, v9, v40, 0);
  result = 0;
  if ((v39 & 1) != 0 && v8 == v11)
    return v7 == v10;
  return result;
}

unint64_t sub_133098()
{
  unint64_t result;

  result = qword_2A05A8;
  if (!qword_2A05A8)
  {
    result = swift_getWitnessTable(byte_2098A8, &type metadata for ReadingSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A05A8);
  }
  return result;
}

unint64_t sub_1330DC()
{
  unint64_t result;

  result = qword_2A05B0;
  if (!qword_2A05B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BackgroundColor, &type metadata for BackgroundColor);
    atomic_store(result, (unint64_t *)&qword_2A05B0);
  }
  return result;
}

unint64_t sub_133120()
{
  unint64_t result;

  result = qword_2A05C0;
  if (!qword_2A05C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BackgroundColor, &type metadata for BackgroundColor);
    atomic_store(result, (unint64_t *)&qword_2A05C0);
  }
  return result;
}

uint64_t initializeWithCopy for ReadingSettingsData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ReadingSettingsData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for ReadingSettingsData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingSettingsData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadingSettingsData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReadingSettingsData()
{
  return &type metadata for ReadingSettingsData;
}

uint64_t storeEnumTagSinglePayload for ReadingSettingsData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_133354 + 4 * byte_2096FB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_133388 + 4 * byte_2096F6[v4]))();
}

uint64_t sub_133388(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_133390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x133398);
  return result;
}

uint64_t sub_1333A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1333ACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1333B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1333B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingSettingsData.CodingKeys()
{
  return &type metadata for ReadingSettingsData.CodingKeys;
}

unint64_t sub_1333D8()
{
  unint64_t result;

  result = qword_2A05C8;
  if (!qword_2A05C8)
  {
    result = swift_getWitnessTable("1I\a", &type metadata for ReadingSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A05C8);
  }
  return result;
}

unint64_t sub_133420()
{
  unint64_t result;

  result = qword_2A05D0;
  if (!qword_2A05D0)
  {
    result = swift_getWitnessTable(byte_2097F0, &type metadata for ReadingSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A05D0);
  }
  return result;
}

unint64_t sub_133468()
{
  unint64_t result;

  result = qword_2A05D8;
  if (!qword_2A05D8)
  {
    result = swift_getWitnessTable(byte_209818, &type metadata for ReadingSettingsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A05D8);
  }
  return result;
}

uint64_t sub_1334AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000000220970;
    if (a2 == 0x8000000000220970)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220970, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000000220990)
  {
    v6 = 0x8000000000220990;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000220990, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL)
  {
    v7 = 0xEF726F6C6F43646ELL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEF726F6C6F43646ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 1953394534 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953394534, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x657A6953746E6F66 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953746E6F66, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x656E746867697262 && a2 == 0xEF6C6576654C7373)
  {
    swift_bridgeObjectRelease(0xEF6C6576654C7373);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E746867697262, 0xEF6C6576654C7373, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_13375C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A05E0, &enum case for SessionGroup.default(_:));
}

uint64_t static SearchResultsReturnedEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A05E0, a1);
}

uint64_t sub_13379C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A05F8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SearchResultsReturnedEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A05F8, a1);
}

uint64_t SearchResultsReturnedEvent.searchResultsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultsReturnedEvent(0) + 20);
  v4 = sub_71B4(&qword_29A1F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchResultsReturnedEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A0680, (uint64_t)&nominal type descriptor for SearchResultsReturnedEvent);
}

uint64_t SearchResultsReturnedEvent.searchResultsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultsReturnedEvent(0) + 20);
  v4 = sub_71B4(&qword_29A1F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultsReturnedEvent.searchResultsData.modify())()
{
  type metadata accessor for SearchResultsReturnedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultsReturnedEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultsReturnedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchResultsReturnedEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultsReturnedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultsReturnedEvent.eventData.modify())()
{
  type metadata accessor for SearchResultsReturnedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultsReturnedEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for SearchResultsReturnedEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
}

uint64_t SearchResultsReturnedEvent.Model.searchResultsData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t SearchResultsReturnedEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultsReturnedEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchResultsReturnedEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A0718, (uint64_t)&nominal type descriptor for SearchResultsReturnedEvent.Model);
}

uint64_t SearchResultsReturnedEvent.Model.init(searchData:searchResultsData:eventData:)@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  v7 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 32) = v6;
  v8 = a4 + *(int *)(type metadata accessor for SearchResultsReturnedEvent.Model(0) + 24);
  v9 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a3, v9);
}

uint64_t sub_133AF4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x6144686372616573;
}

uint64_t sub_133B5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_135008(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_133B80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_133D74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_133BA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_133D74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchResultsReturnedEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  _OWORD v21[2];

  v3 = v1;
  v5 = sub_71B4(&qword_2A0610);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_133D74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchResultsReturnedEvent.Model.CodingKeys, &type metadata for SearchResultsReturnedEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v21[0] = *(_OWORD *)v3;
  v21[1] = v12;
  v20 = 0;
  v13 = sub_8B8F4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &type metadata for SearchData, v13);
  if (!v2)
  {
    *(_QWORD *)&v21[0] = *(_QWORD *)(v3 + 32);
    v20 = 1;
    v14 = sub_8B97C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v20, v5, &type metadata for SearchResultsData, v14);
    v15 = v3 + *(int *)(type metadata accessor for SearchResultsReturnedEvent.Model(0) + 24);
    LOBYTE(v21[0]) = 2;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v21, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_133D74()
{
  unint64_t result;

  result = qword_2A0618;
  if (!qword_2A0618)
  {
    result = swift_getWitnessTable(byte_209AC4, &type metadata for SearchResultsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0618);
  }
  return result;
}

void SearchResultsReturnedEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _OWORD v35[2];
  char v36;

  v29 = a2;
  v30 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_71B4(&qword_2A0620);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SearchResultsReturnedEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v33 = a1;
  sub_7988(a1, v12);
  v14 = sub_133D74();
  v31 = v8;
  v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchResultsReturnedEvent.Model.CodingKeys, &type metadata for SearchResultsReturnedEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v33);
  }
  else
  {
    v28 = v9;
    v34 = v5;
    v16 = v11;
    v17 = v3;
    v18 = v30;
    v36 = 0;
    v19 = sub_8BF70();
    v21 = v31;
    v20 = v32;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &type metadata for SearchData, &v36, v32, &type metadata for SearchData, v19);
    v22 = v35[1];
    v23 = (uint64_t)v16;
    *(_OWORD *)v16 = v35[0];
    *((_OWORD *)v16 + 1) = v22;
    v36 = 1;
    v24 = sub_8BFF8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &type metadata for SearchResultsData, &v36, v20, &type metadata for SearchResultsData, v24);
    *((_QWORD *)v16 + 4) = *(_QWORD *)&v35[0];
    LOBYTE(v35[0]) = 2;
    v25 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v26 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v18, v35, v20, v18, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v23 + *(int *)(v28 + 24), v26, v18);
    sub_134084(v23, v29);
    sub_7DAC(v33);
    sub_1340C8(v23);
  }
}

uint64_t sub_134084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultsReturnedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1340C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchResultsReturnedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_134104(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchResultsReturnedEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_134118(_QWORD *a1)
{
  return SearchResultsReturnedEvent.Model.encode(to:)(a1);
}

uint64_t sub_13412C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A05E0, (uint64_t)sub_13375C, a1);
}

uint64_t sub_134150@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A05F8, (uint64_t)sub_13379C, a1);
}

uint64_t sub_134174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchResultsReturnedEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_29A1E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29A1F8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for SearchResultsReturnedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SearchResultsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for SearchResultsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for SearchResultsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SearchResultsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResultsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1346A4);
}

uint64_t sub_1346A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_29A1E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29A1F8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchResultsReturnedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_134754);
}

uint64_t sub_134754(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_29A1E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29A1F8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_134800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_29A2C8, (uint64_t (*)(void))sub_8BF70, (uint64_t (*)(void))sub_8B8F4, (uint64_t)&type metadata for SearchData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_29A2D8, (uint64_t (*)(void))sub_8BFF8, (uint64_t (*)(void))sub_8B97C, (uint64_t)&type metadata for SearchResultsData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchResultsReturnedEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v10;
    }
    v11 = a2[4];
    a1[4] = v11;
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for EventData(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v11);
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for SearchResultsReturnedEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[3]);
  }
  swift_bridgeObjectRelease(a1[4]);
  v5 = (char *)a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for SearchResultsReturnedEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  v9 = a2[4];
  a1[4] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  return a1;
}

_QWORD *assignWithCopy for SearchResultsReturnedEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  BAEventReporter *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = (BAEventReporter *)a1[1];
  v7 = a2[1];
  if (v6)
  {
    if (v7)
    {
      *a1 = *a2;
      v8 = a2[1];
      a1[1] = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      a1[2] = a2[2];
      v16 = a2[3];
      v17 = (BAEventReporter *)a1[3];
      a1[3] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      sub_926C0((uint64_t)a1);
      v27 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v27;
    }
  }
  else if (v7)
  {
    *a1 = *a2;
    v25 = a2[1];
    a1[1] = v25;
    a1[2] = a2[2];
    v26 = a2[3];
    a1[3] = v26;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v28 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v28;
  }
  v29 = a2[4];
  v30 = (BAEventReporter *)a1[4];
  a1[4] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(int *)(a3 + 24);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t initializeWithTake for SearchResultsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SearchResultsReturnedEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  __int128 v22;
  BAEventReporter *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    sub_926C0(a1);
LABEL_5:
    v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v22;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v12;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v23 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v23, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v24 = a3[6];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResultsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_134CE8);
}

uint64_t sub_134CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchResultsReturnedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_134D70);
}

uint64_t sub_134D70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_134DE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = " ";
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchResultsReturnedEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_134EB0 + 4 * byte_209905[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_134EE4 + 4 * byte_209900[v4]))();
}

uint64_t sub_134EE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_134EEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x134EF4);
  return result;
}

uint64_t sub_134F00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x134F08);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_134F0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_134F14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchResultsReturnedEvent.Model.CodingKeys()
{
  return &type metadata for SearchResultsReturnedEvent.Model.CodingKeys;
}

unint64_t sub_134F34()
{
  unint64_t result;

  result = qword_2A0758;
  if (!qword_2A0758)
  {
    result = swift_getWitnessTable(byte_209A9C, &type metadata for SearchResultsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0758);
  }
  return result;
}

unint64_t sub_134F7C()
{
  unint64_t result;

  result = qword_2A0760;
  if (!qword_2A0760)
  {
    result = swift_getWitnessTable("%I\a", &type metadata for SearchResultsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0760);
  }
  return result;
}

unint64_t sub_134FC4()
{
  unint64_t result;

  result = qword_2A0768;
  if (!qword_2A0768)
  {
    result = swift_getWitnessTable("\rI\a", &type metadata for SearchResultsReturnedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0768);
  }
  return result;
}

uint64_t sub_135008(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6144686372616573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144686372616573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x800000000021F930;
    if (a2 == 0x800000000021F930)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F930, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_135170()
{
  return 0xD000000000000011;
}

uint64_t sub_13518C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_13584C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1351B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_135538();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1351DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_135538();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WelcomeActionData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A0770);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_135538();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WelcomeActionData.CodingKeys, &type metadata for WelcomeActionData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_13557C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for WelcomeActionType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t WelcomeActionData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A0788);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_135538();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WelcomeActionData.CodingKeys, &type metadata for WelcomeActionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1355C0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for WelcomeActionType, v13, v5, &type metadata for WelcomeActionType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_13541C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return WelcomeActionData.init(from:)(a1, a2);
}

uint64_t sub_135430(_QWORD *a1)
{
  return WelcomeActionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics17WelcomeActionDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE400000000000000;
  v4 = 1885956979;
  if (v2 != 1)
  {
    v4 = 0x65756E69746E6F63;
    v3 = 0xE800000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  v7 = 0xE400000000000000;
  v8 = 1885956979;
  if (*a2 != 1)
  {
    v8 = 0x65756E69746E6F63;
    v7 = 0xE800000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xE700000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_135538()
{
  unint64_t result;

  result = qword_2A0778;
  if (!qword_2A0778)
  {
    result = swift_getWitnessTable(byte_209CC8, &type metadata for WelcomeActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0778);
  }
  return result;
}

unint64_t sub_13557C()
{
  unint64_t result;

  result = qword_2A0780;
  if (!qword_2A0780)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WelcomeActionType, &type metadata for WelcomeActionType);
    atomic_store(result, (unint64_t *)&qword_2A0780);
  }
  return result;
}

unint64_t sub_1355C0()
{
  unint64_t result;

  result = qword_2A0790;
  if (!qword_2A0790)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WelcomeActionType, &type metadata for WelcomeActionType);
    atomic_store(result, (unint64_t *)&qword_2A0790);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WelcomeActionData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_135658 + 4 * byte_209B25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_13568C + 4 * byte_209B20[v4]))();
}

uint64_t sub_13568C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_135694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13569CLL);
  return result;
}

uint64_t sub_1356A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1356B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1356B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1356BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WelcomeActionData()
{
  return &type metadata for WelcomeActionData;
}

uint64_t storeEnumTagSinglePayload for WelcomeActionData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_135718 + 4 * byte_209B2A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_135738 + 4 * byte_209B2F[v4]))();
}

_BYTE *sub_135718(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_135738(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_135740(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_135748(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_135750(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_135758(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WelcomeActionData.CodingKeys()
{
  return &type metadata for WelcomeActionData.CodingKeys;
}

unint64_t sub_135778()
{
  unint64_t result;

  result = qword_2A0798;
  if (!qword_2A0798)
  {
    result = swift_getWitnessTable("YH\a", &type metadata for WelcomeActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0798);
  }
  return result;
}

unint64_t sub_1357C0()
{
  unint64_t result;

  result = qword_2A07A0;
  if (!qword_2A07A0)
  {
    result = swift_getWitnessTable(byte_209C10, &type metadata for WelcomeActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A07A0);
  }
  return result;
}

unint64_t sub_135808()
{
  unint64_t result;

  result = qword_2A07A8;
  if (!qword_2A07A8)
  {
    result = swift_getWitnessTable(byte_209C38, &type metadata for WelcomeActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A07A8);
  }
  return result;
}

uint64_t sub_13584C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000000221F60)
  {
    swift_bridgeObjectRelease(0x8000000000221F60);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000221F60, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1358D0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A07B0, &enum case for SessionGroup.default(_:));
}

uint64_t static UnifiedMessageActionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A07B0, a1);
}

uint64_t sub_135910(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A07C8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static UnifiedMessageActionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A07C8, a1);
}

uint64_t UnifiedMessageActionEvent.messageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A07E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t UnifiedMessageActionEvent.messageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A07E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t UnifiedMessageActionEvent.actionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageActionEvent(0) + 20);
  v4 = sub_71B4(&qword_2A07E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UnifiedMessageActionEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A0880, (uint64_t)&nominal type descriptor for UnifiedMessageActionEvent);
}

uint64_t UnifiedMessageActionEvent.actionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageActionEvent(0) + 20);
  v4 = sub_71B4(&qword_2A07E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UnifiedMessageActionEvent.actionData.modify())()
{
  type metadata accessor for UnifiedMessageActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UnifiedMessageActionEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageActionEvent(0) + 24);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UnifiedMessageActionEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageActionEvent(0) + 24);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UnifiedMessageActionEvent.contentData.modify())()
{
  type metadata accessor for UnifiedMessageActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UnifiedMessageActionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageActionEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UnifiedMessageActionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageActionEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*UnifiedMessageActionEvent.eventData.modify())()
{
  type metadata accessor for UnifiedMessageActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UnifiedMessageActionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for UnifiedMessageActionEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2A07E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t UnifiedMessageExposureEvent.Model.messageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 48);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  v6 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v3);
}

uint64_t UnifiedMessageActionEvent.Model.actionData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 64);
  *a1 = *(_QWORD *)(v1 + 56);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t UnifiedMessageActionEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[9];
  v3 = v1[10];
  v4 = v1[11];
  v5 = v1[12];
  v6 = v1[13];
  v7 = v1[14];
  v8 = v1[15];
  v9 = v1[16];
  v10 = v1[17];
  v11 = v1[18];
  v12 = v1[19];
  v13 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t UnifiedMessageActionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnifiedMessageActionEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UnifiedMessageActionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A0928, (uint64_t)&nominal type descriptor for UnifiedMessageActionEvent.Model);
}

uint64_t UnifiedMessageActionEvent.Model.init(messageData:actionData:contentData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  v6 = a3[1];
  *(_OWORD *)(a5 + 72) = *a3;
  *(_OWORD *)(a5 + 88) = v6;
  v7 = a3[3];
  *(_OWORD *)(a5 + 104) = a3[2];
  *(_OWORD *)(a5 + 120) = v7;
  v8 = a3[5];
  *(_OWORD *)(a5 + 136) = a3[4];
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *a2;
  v12 = a2[1];
  *(_BYTE *)a5 = *(_BYTE *)a1;
  *(_BYTE *)(a5 + 24) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  *(_QWORD *)(a5 + 56) = v11;
  *(_QWORD *)(a5 + 64) = v12;
  *(_OWORD *)(a5 + 152) = v8;
  v13 = a5 + *(int *)(type metadata accessor for UnifiedMessageActionEvent.Model(0) + 28);
  v14 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a4, v14);
}

uint64_t sub_135EC8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_135F00 + 4 * byte_209D20[*v0]))(0x446567617373656DLL, 0xEB00000000617461);
}

uint64_t sub_135F00()
{
  return 0x61446E6F69746361;
}

uint64_t sub_135F1C()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_135F30()
{
  return 0x746144746E657665;
}

uint64_t sub_135F4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_137CC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_135F70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1361E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_135F98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1361E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UnifiedMessageActionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v3 = v1;
  v5 = sub_71B4(&qword_2A07F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1361E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UnifiedMessageActionEvent.Model.CodingKeys, &type metadata for UnifiedMessageActionEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 24);
  v13 = *(_QWORD *)(v3 + 48);
  v25[0] = *(_BYTE *)v3;
  *(_OWORD *)&v25[8] = *(_OWORD *)(v3 + 8);
  v25[24] = v12;
  v26 = *(_OWORD *)(v3 + 32);
  *(_QWORD *)&v27 = v13;
  v30 = 0;
  v14 = sub_136224();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v30, v5, &type metadata for MessageData, v14);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + 64);
    *(_QWORD *)v25 = *(_QWORD *)(v3 + 56);
    *(_QWORD *)&v25[8] = v15;
    v30 = 1;
    v16 = sub_136268();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v30, v5, &type metadata for ActionData, v16);
    v17 = *(_OWORD *)(v3 + 88);
    *(_OWORD *)v25 = *(_OWORD *)(v3 + 72);
    *(_OWORD *)&v25[16] = v17;
    v18 = *(_OWORD *)(v3 + 120);
    v26 = *(_OWORD *)(v3 + 104);
    v27 = v18;
    v19 = *(_OWORD *)(v3 + 152);
    v28 = *(_OWORD *)(v3 + 136);
    v29 = v19;
    v30 = 2;
    v20 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v30, v5, &type metadata for ContentData, v20);
    v21 = v3 + *(int *)(type metadata accessor for UnifiedMessageActionEvent.Model(0) + 28);
    v25[0] = 3;
    v22 = type metadata accessor for EventData(0);
    v23 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, v25, v5, v22, v23);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1361E0()
{
  unint64_t result;

  result = qword_2A07F8;
  if (!qword_2A07F8)
  {
    result = swift_getWitnessTable(byte_209F1C, &type metadata for UnifiedMessageActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A07F8);
  }
  return result;
}

unint64_t sub_136224()
{
  unint64_t result;

  result = qword_2A0800;
  if (!qword_2A0800)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessageData, &type metadata for MessageData);
    atomic_store(result, (unint64_t *)&qword_2A0800);
  }
  return result;
}

unint64_t sub_136268()
{
  unint64_t result;

  result = qword_2A0808;
  if (!qword_2A0808)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ActionData, &type metadata for ActionData);
    atomic_store(result, (unint64_t *)&qword_2A0808);
  }
  return result;
}

void UnifiedMessageActionEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE v37[32];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  v31 = a2;
  v32 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_71B4(&qword_2A0810);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UnifiedMessageActionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v35 = a1;
  sub_7988(a1, v12);
  v14 = sub_1361E0();
  v33 = v8;
  v15 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UnifiedMessageActionEvent.Model.CodingKeys, &type metadata for UnifiedMessageActionEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v35);
  }
  else
  {
    v30 = v9;
    v36 = v3;
    v16 = v32;
    v42 = 0;
    v17 = sub_136668();
    v18 = v33;
    v19 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, &type metadata for MessageData, &v42, v34, &type metadata for MessageData, v17);
    v20 = v37[24];
    v21 = v39;
    *v11 = v37[0];
    *(_OWORD *)(v11 + 8) = *(_OWORD *)&v37[8];
    v11[24] = v20;
    *((_OWORD *)v11 + 2) = v38;
    *((_QWORD *)v11 + 6) = v21;
    v42 = 1;
    v22 = sub_1366AC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, &type metadata for ActionData, &v42, v19, &type metadata for ActionData, v22);
    v23 = *(_QWORD *)&v37[8];
    *((_QWORD *)v11 + 7) = *(_QWORD *)v37;
    *((_QWORD *)v11 + 8) = v23;
    v42 = 2;
    v24 = sub_1779C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &type metadata for ContentData, &v42, v19, &type metadata for ContentData, v24);
    v25 = *(_OWORD *)&v37[16];
    *(_OWORD *)(v11 + 72) = *(_OWORD *)v37;
    *(_OWORD *)(v11 + 88) = v25;
    v26 = v39;
    *(_OWORD *)(v11 + 104) = v38;
    *(_OWORD *)(v11 + 120) = v26;
    v27 = v41;
    *(_OWORD *)(v11 + 136) = v40;
    *(_OWORD *)(v11 + 152) = v27;
    v37[0] = 3;
    v28 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, v37, v19, v16, v28);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v34);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v36 + 32))(*(int *)(v30 + 28), v5, v16);
    sub_1366F0(0, v31);
    sub_7DAC(v35);
    sub_136734(0);
  }
}

unint64_t sub_136668()
{
  unint64_t result;

  result = qword_2A0818;
  if (!qword_2A0818)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessageData, &type metadata for MessageData);
    atomic_store(result, (unint64_t *)&qword_2A0818);
  }
  return result;
}

unint64_t sub_1366AC()
{
  unint64_t result;

  result = qword_2A0820;
  if (!qword_2A0820)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ActionData, &type metadata for ActionData);
    atomic_store(result, (unint64_t *)&qword_2A0820);
  }
  return result;
}

uint64_t sub_1366F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnifiedMessageActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_136734(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnifiedMessageActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_136770(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  UnifiedMessageActionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_136784(_QWORD *a1)
{
  return UnifiedMessageActionEvent.Model.encode(to:)(a1);
}

uint64_t sub_136798@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A07B0, (uint64_t)sub_1358D0, a1);
}

uint64_t sub_1367BC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A07C8, (uint64_t)sub_135910, a1);
}

uint64_t sub_1367E0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2A07E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for UnifiedMessageActionEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2A07E0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A07E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for UnifiedMessageActionEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2A07E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for UnifiedMessageActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A07E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for UnifiedMessageActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A07E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for UnifiedMessageActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A07E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for UnifiedMessageActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2A07E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A07E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnifiedMessageActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_136E5C);
}

uint64_t sub_136E5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A07E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A07E8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296760);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for UnifiedMessageActionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_136F34);
}

uint64_t sub_136F34(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2A07E0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A07E8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296760);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_137008(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2A0890, (uint64_t (*)(void))sub_136668, (uint64_t (*)(void))sub_136224, (uint64_t)&type metadata for MessageData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A0898, (uint64_t (*)(void))sub_1366AC, (uint64_t (*)(void))sub_136268, (uint64_t)&type metadata for ActionData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for UnifiedMessageActionEvent.Model(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v4[24] = *((_BYTE *)a2 + 24);
    v9 = a2[4];
    v8 = a2[5];
    *((_QWORD *)v4 + 4) = v9;
    *((_QWORD *)v4 + 5) = v8;
    v11 = a2[6];
    v10 = a2[7];
    *((_QWORD *)v4 + 6) = v11;
    *((_QWORD *)v4 + 7) = v10;
    v12 = a2[8];
    *((_QWORD *)v4 + 8) = v12;
    v13 = a2[10];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v13)
    {
      *((_QWORD *)v4 + 9) = a2[9];
      *((_QWORD *)v4 + 10) = v13;
      v4[88] = *((_BYTE *)a2 + 88);
      v14 = a2[13];
      *((_QWORD *)v4 + 12) = a2[12];
      *((_QWORD *)v4 + 13) = v14;
      v15 = a2[15];
      *((_QWORD *)v4 + 14) = a2[14];
      *((_QWORD *)v4 + 15) = v15;
      *((_WORD *)v4 + 64) = *((_WORD *)a2 + 64);
      v4[136] = *((_BYTE *)a2 + 136);
      *((_DWORD *)v4 + 33) = *((_DWORD *)a2 + 33);
      *((_DWORD *)v4 + 35) = *((_DWORD *)a2 + 35);
      v4[144] = *((_BYTE *)a2 + 144);
      *(_DWORD *)(v4 + 145) = *(_DWORD *)((char *)a2 + 145);
      v4[149] = *((_BYTE *)a2 + 149);
      v16 = a2[20];
      *((_QWORD *)v4 + 19) = a2[19];
      *((_QWORD *)v4 + 20) = v16;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
    }
    else
    {
      v18 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 120) = v18;
      v19 = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v4 + 152) = v19;
      v20 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v4 + 88) = v20;
    }
    v21 = *(int *)(a3 + 28);
    v22 = &v4[v21];
    v23 = (uint64_t)a2 + v21;
    v24 = type metadata accessor for EventData(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  }
  return v4;
}

uint64_t destroy for UnifiedMessageActionEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  v4 = a1[10];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[13]);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[20]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for UnifiedMessageActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v10 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    v13 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v13;
    v14 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v14;
    *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_DWORD *)(a1 + 145) = *(_DWORD *)(a2 + 145);
    *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
    v15 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v15;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v16;
    v17 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v17;
    v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
  }
  v19 = *(int *)(a3 + 28);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for UnifiedMessageActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  BAEventReporter *v15;
  uint64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  _OWORD *v42;
  _OWORD *v43;
  BAEventReporter *v44;
  uint64_t v45;
  uint64_t v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  BAEventReporter *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  int v72;
  int v73;
  uint64_t v74;
  BAEventReporter *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v15 = *(BAEventReporter **)(a1 + 32);
  v16 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  v42 = (_OWORD *)(a1 + 72);
  v43 = (_OWORD *)(a2 + 72);
  v44 = *(BAEventReporter **)(a1 + 80);
  v45 = *(_QWORD *)(a2 + 80);
  if (v44)
  {
    if (v45)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v46 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v46;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v44, v47, v48, v49, v50, v51, v52, v53);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v54 = *(_QWORD *)(a2 + 104);
      v55 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v63 = *(_QWORD *)(a2 + 120);
      v64 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v72 = *(_DWORD *)(a2 + 132);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_DWORD *)(a1 + 132) = v72;
      v73 = *(_DWORD *)(a2 + 140);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_DWORD *)(a1 + 140) = v73;
      *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
      *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
      *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
      *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
      *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v74 = *(_QWORD *)(a2 + 160);
      v75 = *(BAEventReporter **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 72));
      v89 = *(_OWORD *)(a2 + 88);
      *v42 = *v43;
      *(_OWORD *)(a1 + 88) = v89;
      v90 = *(_OWORD *)(a2 + 152);
      v92 = *(_OWORD *)(a2 + 104);
      v91 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v90;
      *(_OWORD *)(a1 + 104) = v92;
      *(_OWORD *)(a1 + 120) = v91;
    }
  }
  else if (v45)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v83 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v83;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v84 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v84;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v85 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v85;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    v86 = *(_DWORD *)(a2 + 132);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_DWORD *)(a1 + 132) = v86;
    v87 = *(_DWORD *)(a2 + 140);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_DWORD *)(a1 + 140) = v87;
    *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
    *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
    *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
    *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
    *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v88 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v88;
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v88);
  }
  else
  {
    v93 = *(_OWORD *)(a2 + 88);
    *v42 = *v43;
    *(_OWORD *)(a1 + 88) = v93;
    v94 = *(_OWORD *)(a2 + 104);
    v95 = *(_OWORD *)(a2 + 120);
    v96 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v96;
    *(_OWORD *)(a1 + 104) = v94;
    *(_OWORD *)(a1 + 120) = v95;
  }
  v97 = *(int *)(a3 + 28);
  v98 = a1 + v97;
  v99 = a2 + v97;
  v100 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 24))(v98, v99, v100);
  return a1;
}

uint64_t initializeWithTake for UnifiedMessageActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for UnifiedMessageActionEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  BAEventReporter *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;
  uint64_t v21;
  BAEventReporter *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  uint64_t v30;
  BAEventReporter *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  const char *v39;
  void *v40;
  void *v41;
  void *v42;
  int64_t v43;
  int64_t v44;
  void *v45;
  BAEventReporter *v46;
  uint64_t v47;
  uint64_t v48;
  BAEventReporter *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  uint64_t v57;
  BAEventReporter *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  uint64_t v66;
  BAEventReporter *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  int64_t v72;
  int64_t v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v13 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v30 = *(_QWORD *)(a2 + 64);
  v31 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v30;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v46 = *(BAEventReporter **)(a1 + 80);
  if (!v46)
    goto LABEL_5;
  v47 = *(_QWORD *)(a2 + 80);
  if (!v47)
  {
    sub_4E9F4((_QWORD *)(a1 + 72));
LABEL_5:
    v75 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v75;
    v76 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v76;
    v77 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v77;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v47;
  swift_bridgeObjectRelease(v46, v39, v40, v41, v42, v43, v44, v45);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v48 = *(_QWORD *)(a2 + 104);
  v49 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  v57 = *(_QWORD *)(a2 + 120);
  v58 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_DWORD *)(a1 + 145) = *(_DWORD *)(a2 + 145);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  v66 = *(_QWORD *)(a2 + 160);
  v67 = *(BAEventReporter **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
LABEL_6:
  v78 = a3[7];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 40))(v79, v80, v81);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnifiedMessageActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13799C);
}

uint64_t sub_13799C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for UnifiedMessageActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_137A24);
}

uint64_t sub_137A24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_137A98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "8";
  v4[1] = &unk_209E28;
  v4[2] = &unk_209E40;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UnifiedMessageActionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_137B6C + 4 * byte_209D29[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_137BA0 + 4 * byte_209D24[v4]))();
}

uint64_t sub_137BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_137BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x137BB0);
  return result;
}

uint64_t sub_137BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x137BC4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_137BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_137BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnifiedMessageActionEvent.Model.CodingKeys()
{
  return &type metadata for UnifiedMessageActionEvent.Model.CodingKeys;
}

unint64_t sub_137BF0()
{
  unint64_t result;

  result = qword_2A0968;
  if (!qword_2A0968)
  {
    result = swift_getWitnessTable(byte_209EF4, &type metadata for UnifiedMessageActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0968);
  }
  return result;
}

unint64_t sub_137C38()
{
  unint64_t result;

  result = qword_2A0970;
  if (!qword_2A0970)
  {
    result = swift_getWitnessTable(byte_209E64, &type metadata for UnifiedMessageActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0970);
  }
  return result;
}

unint64_t sub_137C80()
{
  unint64_t result;

  result = qword_2A0978;
  if (!qword_2A0978)
  {
    result = swift_getWitnessTable(byte_209E8C, &type metadata for UnifiedMessageActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0978);
  }
  return result;
}

uint64_t sub_137CC4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x446567617373656DLL && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446567617373656DLL, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x61446E6F69746361 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446E6F69746361, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v8 = 0xEB00000000617461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_137EC4()
{
  return 0xD000000000000011;
}

uint64_t sub_137EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1385D0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_137F08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1382BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_137F30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1382BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GiftFailData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_2A0980);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_1382BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GiftFailData.CodingKeys, &type metadata for GiftFailData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_138300();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for GiftFailureReason, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t GiftFailData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2A0998);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1382BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GiftFailData.CodingKeys, &type metadata for GiftFailData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_138344();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for GiftFailureReason, v13, v5, &type metadata for GiftFailureReason, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_138170@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GiftFailData.init(from:)(a1, a2);
}

uint64_t sub_138184(_QWORD *a1)
{
  return GiftFailData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics18RedownloadFailDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x436572756C696166;
  v4 = 0xEC0000003165646FLL;
  if (v2 != 1)
  {
    v3 = 0x6F436572756C6166;
    v4 = 0xEB00000000326564;
  }
  if (*a1)
    v5 = v3;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v4;
  else
    v6 = 0xE700000000000000;
  v7 = 0x436572756C696166;
  v8 = 0xEC0000003165646FLL;
  if (*a2 != 1)
  {
    v7 = 0x6F436572756C6166;
    v8 = 0xEB00000000326564;
  }
  if (*a2)
    v9 = v7;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v8;
  else
    v10 = 0xE700000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_1382BC()
{
  unint64_t result;

  result = qword_2A0988;
  if (!qword_2A0988)
  {
    result = swift_getWitnessTable(byte_20A110, &type metadata for GiftFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0988);
  }
  return result;
}

unint64_t sub_138300()
{
  unint64_t result;

  result = qword_2A0990;
  if (!qword_2A0990)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for GiftFailureReason, &type metadata for GiftFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A0990);
  }
  return result;
}

unint64_t sub_138344()
{
  unint64_t result;

  result = qword_2A09A0;
  if (!qword_2A09A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for GiftFailureReason, &type metadata for GiftFailureReason);
    atomic_store(result, (unint64_t *)&qword_2A09A0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GiftFailData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1383DC + 4 * byte_209F71[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_138410 + 4 * byte_209F6C[v4]))();
}

uint64_t sub_138410(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_138418(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x138420);
  return result;
}

uint64_t sub_13842C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x138434);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_138438(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_138440(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GiftFailData()
{
  return &type metadata for GiftFailData;
}

uint64_t storeEnumTagSinglePayload for GiftFailData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_13849C + 4 * byte_209F76[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1384BC + 4 * byte_209F7B[v4]))();
}

_BYTE *sub_13849C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1384BC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1384C4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1384CC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1384D4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1384DC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GiftFailData.CodingKeys()
{
  return &type metadata for GiftFailData.CodingKeys;
}

unint64_t sub_1384FC()
{
  unint64_t result;

  result = qword_2A09A8;
  if (!qword_2A09A8)
  {
    result = swift_getWitnessTable("YG\a", &type metadata for GiftFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A09A8);
  }
  return result;
}

unint64_t sub_138544()
{
  unint64_t result;

  result = qword_2A09B0;
  if (!qword_2A09B0)
  {
    result = swift_getWitnessTable(byte_20A058, &type metadata for GiftFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A09B0);
  }
  return result;
}

unint64_t sub_13858C()
{
  unint64_t result;

  result = qword_2A09B8;
  if (!qword_2A09B8)
  {
    result = swift_getWitnessTable(byte_20A080, &type metadata for GiftFailData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A09B8);
  }
  return result;
}

uint64_t sub_1385D0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000000221F80)
  {
    swift_bridgeObjectRelease(0x8000000000221F80);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000221F80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

BookAnalytics::SkipDirection_optional __swiftcall SkipDirection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SkipDirection_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268288, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SkipDirection.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x64726177726F66;
  if (*v0 != 1)
    v1 = 1801675106;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_138700(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_25990(*a1, *a2);
}

unint64_t sub_138710()
{
  unint64_t result;

  result = qword_2A09C0;
  if (!qword_2A09C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SkipDirection, &type metadata for SkipDirection);
    atomic_store(result, (unint64_t *)&qword_2A09C0);
  }
  return result;
}

Swift::Int sub_138754()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE700000000000000;
  v3 = 0x64726177726F66;
  if (v1 != 1)
  {
    v3 = 1801675106;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1387EC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x64726177726F66;
  if (*v1 != 1)
  {
    v3 = 1801675106;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_138860(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE700000000000000;
  v4 = 0x64726177726F66;
  if (v2 != 1)
  {
    v4 = 1801675106;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::SkipDirection_optional sub_1388F4(Swift::String *a1)
{
  return SkipDirection.init(rawValue:)(*a1);
}

void sub_138900(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x64726177726F66;
  if (v2 != 1)
  {
    v5 = 1801675106;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_138958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_138ACC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1389B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_138ACC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SkipDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_138A4C + 4 * byte_20A165[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_138A80 + 4 * byte_20A160[v4]))();
}

uint64_t sub_138A80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_138A88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x138A90);
  return result;
}

uint64_t sub_138A9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x138AA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_138AA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_138AB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SkipDirection()
{
  return &type metadata for SkipDirection;
}

unint64_t sub_138ACC()
{
  unint64_t result;

  result = qword_2A09C8;
  if (!qword_2A09C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SkipDirection, &type metadata for SkipDirection);
    atomic_store(result, (unint64_t *)&qword_2A09C8);
  }
  return result;
}

uint64_t sub_138B10(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A09D0, &enum case for SessionGroup.default(_:));
}

uint64_t static AppSessionEndEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A09D0, a1);
}

uint64_t sub_138B50(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A09E8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AppSessionEndEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A09E8, a1);
}

uint64_t AppSessionEndEvent.sessionReadingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A0A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AppSessionEndEvent.sessionReadingData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A0A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AppSessionEndEvent.sessionListeningData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 20);
  v4 = sub_71B4(&qword_2A0A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AppSessionEndEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A0AC8, (uint64_t)&nominal type descriptor for AppSessionEndEvent);
}

uint64_t AppSessionEndEvent.sessionListeningData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 20);
  v4 = sub_71B4(&qword_2A0A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.sessionListeningData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.sessionEndReasonData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 24);
  v4 = sub_71B4(&qword_2A0A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.sessionEndReasonData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 24);
  v4 = sub_71B4(&qword_2A0A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.sessionEndReasonData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.ampTreatmentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 28);
  v4 = sub_71B4(&qword_2A0A18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.ampTreatmentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 28);
  v4 = sub_71B4(&qword_2A0A18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.ampTreatmentData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.booksTreatmentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 32);
  v4 = sub_71B4(&qword_2A0A20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.booksTreatmentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 32);
  v4 = sub_71B4(&qword_2A0A20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.booksTreatmentData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.orientationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 36);
  v4 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.orientationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 36);
  v4 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.orientationData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.userEventStorageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 40);
  v4 = sub_71B4(&qword_2A0A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.userEventStorageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 40);
  v4 = sub_71B4(&qword_2A0A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.userEventStorageData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.eventData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 48);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent(0) + 48);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionEndEvent.timedData.modify())()
{
  type metadata accessor for AppSessionEndEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionEndEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_2A0A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for AppSessionEndEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2A0A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_2A0A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_2A0A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = sub_71B4(&qword_2A0A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v2, v12);
  v13 = a1 + v4[9];
  v14 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v2, v14);
  v15 = a1 + v4[10];
  v16 = sub_71B4(&qword_2A0A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v2, v16);
  v17 = a1 + v4[11];
  v18 = enum case for EventProperty.required<A>(_:);
  v19 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v18, v21);
}

void AppSessionEndEvent.Model.sessionReadingData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 12);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
}

void AppSessionEndEvent.Model.sessionListeningData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  char v4;

  v2 = *(_DWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 28);
  v4 = *(_BYTE *)(v1 + 29);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 13) = v4;
}

void AppSessionEndEvent.Model.sessionEndReasonData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 30);
}

uint64_t AppSessionEndEvent.Model.booksTreatmentData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

__n128 AppSessionEndEvent.Model.orientationData.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = v1[4].n128_u32[0];
  result = v1[3];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  return result;
}

uint64_t AppSessionEndEvent.Model.userEventStorageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[344];

  sub_13949C(v1 + 72, (uint64_t)v4);
  sub_13949C((uint64_t)v4, a1);
  return sub_13A2BC((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1394E4);
}

uint64_t sub_13949C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_2A0A30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1394E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t result;

  if (a34 != 1)
  {
    swift_bridgeObjectRetain(a40);
    return swift_bridgeObjectRetain(a34);
  }
  return result;
}

uint64_t AppSessionEndEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent.Model(0) + 44);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AppSessionEndEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A0BA8, (uint64_t)&nominal type descriptor for AppSessionEndEvent.Model);
}

uint64_t AppSessionEndEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionEndEvent.Model(0) + 48);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppSessionEndEvent.Model.init(sessionReadingData:sessionListeningData:sessionEndReasonData:ampTreatmentData:booksTreatmentData:orientationData:userEventStorageData:eventData:timedData:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BYTE v31[344];

  v11 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v13 = *((_BYTE *)a1 + 12);
  v14 = *a2;
  v29 = *((_DWORD *)a2 + 2);
  v15 = *((_BYTE *)a2 + 12);
  v16 = *((_BYTE *)a2 + 13);
  v17 = *a3;
  v18 = *a4;
  v19 = *a5;
  v26 = a6[1];
  v27 = *a6;
  v28 = *((_DWORD *)a6 + 4);
  sub_13949C(a7, (uint64_t)v31);
  *(_QWORD *)a9 = v11;
  *(_DWORD *)(a9 + 8) = v12;
  *(_BYTE *)(a9 + 12) = v13;
  *(_QWORD *)(a9 + 16) = v14;
  *(_BYTE *)(a9 + 28) = v15;
  *(_DWORD *)(a9 + 24) = v29;
  *(_BYTE *)(a9 + 29) = v16;
  *(_BYTE *)(a9 + 30) = v17;
  *(_QWORD *)(a9 + 32) = v18;
  *(_QWORD *)(a9 + 40) = v19;
  *(_QWORD *)(a9 + 48) = v27;
  *(_QWORD *)(a9 + 56) = v26;
  *(_DWORD *)(a9 + 64) = v28;
  sub_13949C((uint64_t)v31, a9 + 72);
  v20 = type metadata accessor for AppSessionEndEvent.Model(0);
  v21 = a9 + *(int *)(v20 + 44);
  v22 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a8, v22);
  v23 = a9 + *(int *)(v20 + 48);
  v24 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a10, v24);
}

uint64_t sub_139704(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_139740 + 4 * byte_20A280[a1]))(0xD000000000000012, 0x8000000000221FA0);
}

unint64_t sub_139740()
{
  return 0xD000000000000014;
}

uint64_t sub_1397BC()
{
  return 0x746144746E657665;
}

uint64_t sub_1397E8()
{
  unsigned __int8 *v0;

  return sub_139704(*v0);
}

uint64_t sub_1397F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_13C7F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_139814(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_139C04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_13983C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_139C04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppSessionEndEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  int v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  _BYTE v35[336];
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  char v40;
  __int128 v41;
  int v42;

  v3 = v1;
  v5 = sub_71B4(&qword_2A0A38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_139C04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppSessionEndEvent.Model.CodingKeys, &type metadata for AppSessionEndEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_DWORD *)v3 + 2);
  v13 = *((_BYTE *)v3 + 12);
  v36 = *v3;
  v37 = v12;
  v38 = v13;
  v35[0] = 0;
  v14 = sub_8ED64();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, v35, v5, &type metadata for SessionReadingData, v14);
  if (!v2)
  {
    v15 = *((_DWORD *)v3 + 6);
    v16 = *((_BYTE *)v3 + 28);
    v17 = *((_BYTE *)v3 + 29);
    v36 = v3[2];
    v38 = v16;
    v37 = v15;
    v39 = v17;
    v35[0] = 1;
    v18 = sub_C5868();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, v35, v5, &type metadata for SessionListeningData, v18);
    LOBYTE(v36) = *((_BYTE *)v3 + 30);
    v35[0] = 2;
    v19 = sub_139C48();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, v35, v5, &type metadata for SessionEndReasonData, v19);
    v36 = v3[4];
    v35[0] = 3;
    v20 = sub_139C8C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, v35, v5, &type metadata for AmpTreatmentData, v20);
    v36 = v3[5];
    v35[0] = 4;
    v21 = sub_12320C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, v35, v5, &type metadata for BooksTreatmentData, v21);
    v22 = *((_DWORD *)v3 + 16);
    v41 = *((_OWORD *)v3 + 3);
    v42 = v22;
    v40 = 5;
    v23 = sub_7132C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v40, v5, &type metadata for OrientationData, v23);
    sub_13949C((uint64_t)(v3 + 9), (uint64_t)&v36);
    sub_13949C((uint64_t)&v36, (uint64_t)v35);
    v34 = 6;
    v24 = sub_6A720();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v35, &v34, v5, &type metadata for UserEventStorageData, v24);
    v25 = type metadata accessor for AppSessionEndEvent.Model(0);
    v26 = (uint64_t)v3 + *(int *)(v25 + 44);
    v35[0] = 7;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v35, v5, v27, v28);
    v29 = (uint64_t)v3 + *(int *)(v25 + 48);
    v35[0] = 8;
    v30 = type metadata accessor for TimedData(0);
    v31 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, v35, v5, v30, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_139C04()
{
  unint64_t result;

  result = qword_2A0A40;
  if (!qword_2A0A40)
  {
    result = swift_getWitnessTable(byte_20A504, &type metadata for AppSessionEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0A40);
  }
  return result;
}

unint64_t sub_139C48()
{
  unint64_t result;

  result = qword_2A0A48;
  if (!qword_2A0A48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionEndReasonData, &type metadata for SessionEndReasonData);
    atomic_store(result, (unint64_t *)&qword_2A0A48);
  }
  return result;
}

unint64_t sub_139C8C()
{
  unint64_t result;

  result = qword_2A0A50;
  if (!qword_2A0A50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AmpTreatmentData, &type metadata for AmpTreatmentData);
    atomic_store(result, (unint64_t *)&qword_2A0A50);
  }
  return result;
}

void AppSessionEndEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  char v48;
  _BYTE v49[335];
  char v50;
  __int128 v51;
  int v52;
  _QWORD *v53;

  v39 = a2;
  v43 = type metadata accessor for TimedData(0);
  v3 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v5 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = type metadata accessor for EventData(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_71B4(&qword_2A0A58);
  v8 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for AppSessionEndEvent.Model(0);
  __chkstk_darwin(v41);
  v46 = (uint64_t *)((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = a1;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_139C04();
  v45 = v10;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppSessionEndEvent.Model.CodingKeys, &type metadata for AppSessionEndEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v47);
  }
  else
  {
    v53 = v7;
    v16 = v8;
    v37 = v3;
    v38 = v5;
    v17 = v43;
    v49[0] = 0;
    v18 = sub_8ED1C();
    v19 = v44;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for SessionReadingData, v49, v44, &type metadata for SessionReadingData, v18);
    v20 = DWORD2(v51);
    v21 = BYTE12(v51);
    v22 = (uint64_t)v46;
    *v46 = v51;
    *(_DWORD *)(v22 + 8) = v20;
    *(_BYTE *)(v22 + 12) = v21;
    v49[0] = 1;
    v23 = sub_C5820();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for SessionListeningData, v49, v19, &type metadata for SessionListeningData, v23);
    v24 = v47;
    v25 = DWORD2(v51);
    v26 = BYTE12(v51);
    v27 = BYTE13(v51);
    *(_QWORD *)(v22 + 16) = v51;
    *(_BYTE *)(v22 + 28) = v26;
    *(_DWORD *)(v22 + 24) = v25;
    *(_BYTE *)(v22 + 29) = v27;
    v49[0] = 2;
    v28 = sub_13A38C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for SessionEndReasonData, v49, v19, &type metadata for SessionEndReasonData, v28);
    *(_BYTE *)(v22 + 30) = v51;
    v49[0] = 3;
    v29 = sub_13A3D0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for AmpTreatmentData, v49, v19, &type metadata for AmpTreatmentData, v29);
    *(_QWORD *)(v22 + 32) = v51;
    v49[0] = 4;
    v30 = sub_1231C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for BooksTreatmentData, v49, v19, &type metadata for BooksTreatmentData, v30);
    *(_QWORD *)(v22 + 40) = v51;
    v49[0] = 5;
    v31 = sub_71BB8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for OrientationData, v49, v19, &type metadata for OrientationData, v31);
    v32 = v52;
    *(_OWORD *)(v22 + 48) = v51;
    *(_DWORD *)(v22 + 64) = v32;
    v50 = 6;
    v33 = sub_6A6D8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for UserEventStorageData, &v50, v19, &type metadata for UserEventStorageData, v33);
    sub_13949C((uint64_t)&v51, (uint64_t)v49);
    sub_13949C((uint64_t)v49, v22 + 72);
    v48 = 7;
    v34 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v35 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v53, v42, &v48, v19, v42, v34);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v40 + 32))(v22 + *(int *)(v41 + 44), v35, v42);
    v48 = 8;
    v36 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v17, &v48, v19, v17, v36);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v45, v19);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v37 + 32))(v22 + *(int *)(v41 + 48), v38, v17);
    sub_13A414(v22, v39);
    sub_7DAC(v24);
    sub_13A458(v22);
  }
}

uint64_t sub_13A2BC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v9 = *(_BYTE *)(a1 + 328);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    *(_QWORD *)(a1 + 320),
    v9);
  return a1;
}

uint64_t sub_13A350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t result;

  result = a34;
  if (a34 != 1)
  {
    swift_bridgeObjectRelease(a34);
    return swift_bridgeObjectRelease(a40);
  }
  return result;
}

unint64_t sub_13A38C()
{
  unint64_t result;

  result = qword_2A0A60;
  if (!qword_2A0A60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionEndReasonData, &type metadata for SessionEndReasonData);
    atomic_store(result, (unint64_t *)&qword_2A0A60);
  }
  return result;
}

unint64_t sub_13A3D0()
{
  unint64_t result;

  result = qword_2A0A68;
  if (!qword_2A0A68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AmpTreatmentData, &type metadata for AmpTreatmentData);
    atomic_store(result, (unint64_t *)&qword_2A0A68);
  }
  return result;
}

uint64_t sub_13A414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppSessionEndEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_13A458(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppSessionEndEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_13A494(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AppSessionEndEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_13A4A8(_QWORD *a1)
{
  return AppSessionEndEvent.Model.encode(to:)(a1);
}

uint64_t sub_13A4BC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A09D0, (uint64_t)sub_138B10, a1);
}

uint64_t sub_13A4E0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A09E8, (uint64_t)sub_138B50, a1);
}

uint64_t sub_13A504@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_2A0A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2A0A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_2A0A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_2A0A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = sub_71B4(&qword_2A0A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v4, v13);
  v14 = a2 + a1[9];
  v15 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v4, v15);
  v16 = a2 + a1[10];
  v17 = sub_71B4(&qword_2A0A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v4, v17);
  v18 = a2 + a1[11];
  v19 = enum case for EventProperty.required<A>(_:);
  v20 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v19, v22);
}

uint64_t *initializeBufferWithCopyOfBuffer for AppSessionEndEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v40);
  }
  else
  {
    v7 = sub_71B4(&qword_2A0A00);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A0A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A0A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_2A0A18);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_2A0A20);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_299210);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_2A0A28);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  }
  return a1;
}

uint64_t destroy for AppSessionEndEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_71B4(&qword_2A0A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2A0A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A0A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_2A0A18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_2A0A20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_2A0A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
}

uint64_t initializeWithCopy for AppSessionEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_2A0A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A0A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A0A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2A0A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2A0A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  return a1;
}

uint64_t assignWithCopy for AppSessionEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_2A0A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A0A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A0A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2A0A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2A0A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  return a1;
}

uint64_t initializeWithTake for AppSessionEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_2A0A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A0A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A0A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2A0A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2A0A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  return a1;
}

uint64_t assignWithTake for AppSessionEndEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_71B4(&qword_2A0A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A0A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2A0A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2A0A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2A0A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppSessionEndEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13B1CC);
}

uint64_t sub_13B1CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_71B4(&qword_2A0A00);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A0A08);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A0A10);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_2A0A18);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_2A0A20);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_299210);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_2A0A28);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_295D70);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v8 = sub_71B4(&qword_295D78);
                  v12 = *(_QWORD *)(v8 - 8);
                  v13 = a3[12];
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AppSessionEndEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13B36C);
}

uint64_t sub_13B36C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = sub_71B4(&qword_2A0A00);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A0A08);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A0A10);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_2A0A18);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_2A0A20);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_299210);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_2A0A28);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_295D70);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v10 = sub_71B4(&qword_295D78);
                  v14 = *(_QWORD *)(v10 - 8);
                  v15 = a4[12];
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_13B508(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[9];

  sub_B9C8(319, &qword_2A0AD8, (uint64_t (*)(void))sub_8ED1C, (uint64_t (*)(void))sub_8ED64, (uint64_t)&type metadata for SessionReadingData);
  if (v3 <= 0x3F)
  {
    v20[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2A0AE0, (uint64_t (*)(void))sub_C5820, (uint64_t (*)(void))sub_C5868, (uint64_t)&type metadata for SessionListeningData);
    if (v5 <= 0x3F)
    {
      v20[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2A0AE8, (uint64_t (*)(void))sub_13A38C, (uint64_t (*)(void))sub_139C48, (uint64_t)&type metadata for SessionEndReasonData);
      if (v7 <= 0x3F)
      {
        v20[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_2A0AF0, (uint64_t (*)(void))sub_13A3D0, (uint64_t (*)(void))sub_139C8C, (uint64_t)&type metadata for AmpTreatmentData);
        if (v9 <= 0x3F)
        {
          v20[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_2A0AF8, (uint64_t (*)(void))sub_1231C4, (uint64_t (*)(void))sub_12320C, (uint64_t)&type metadata for BooksTreatmentData);
          if (v11 <= 0x3F)
          {
            v20[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, (unint64_t *)&qword_2992F0, (uint64_t (*)(void))sub_71BB8, (uint64_t (*)(void))sub_7132C, (uint64_t)&type metadata for OrientationData);
            if (v13 <= 0x3F)
            {
              v20[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&unk_2A0B00, (uint64_t (*)(void))sub_6A6D8, (uint64_t (*)(void))sub_6A720, (uint64_t)&type metadata for UserEventStorageData);
              if (v15 <= 0x3F)
              {
                v20[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_8734(319);
                if (v17 <= 0x3F)
                {
                  v20[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_87D8(319);
                  if (v19 <= 0x3F)
                  {
                    v20[8] = *(_QWORD *)(v18 - 8) + 64;
                    swift_initStructMetadata(a1, 256, 9, v20, a1 + 16);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AppSessionEndEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 22) = *(uint64_t *)((char *)a2 + 22);
    *(_BYTE *)(a1 + 30) = *((_BYTE *)a2 + 30);
    v7 = a2[4];
    v8 = a2[5];
    *(_QWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v4 + 40) = v8;
    *(_DWORD *)(v4 + 64) = *((_DWORD *)a2 + 16);
    *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
    v9 = a2 + 9;
    v10 = a2[42];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v10 == 1)
    {
      memcpy((void *)(v4 + 72), a2 + 9, 0x149uLL);
    }
    else
    {
      *(_QWORD *)(v4 + 72) = *v9;
      *(_BYTE *)(v4 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(v4 + 88) = a2[11];
      *(_BYTE *)(v4 + 96) = *((_BYTE *)a2 + 96);
      *(_QWORD *)(v4 + 104) = a2[13];
      *(_BYTE *)(v4 + 112) = *((_BYTE *)a2 + 112);
      *(_BYTE *)(v4 + 128) = *((_BYTE *)a2 + 128);
      *(_QWORD *)(v4 + 120) = a2[15];
      v12 = a2[17];
      *(_BYTE *)(v4 + 144) = *((_BYTE *)a2 + 144);
      *(_QWORD *)(v4 + 136) = v12;
      *(_BYTE *)(v4 + 160) = *((_BYTE *)a2 + 160);
      *(_QWORD *)(v4 + 152) = a2[19];
      *(_BYTE *)(v4 + 176) = *((_BYTE *)a2 + 176);
      *(_QWORD *)(v4 + 168) = a2[21];
      *(_BYTE *)(v4 + 192) = *((_BYTE *)a2 + 192);
      *(_QWORD *)(v4 + 184) = a2[23];
      *(_BYTE *)(v4 + 208) = *((_BYTE *)a2 + 208);
      *(_QWORD *)(v4 + 200) = a2[25];
      v13 = a2[27];
      *(_BYTE *)(v4 + 224) = *((_BYTE *)a2 + 224);
      *(_QWORD *)(v4 + 216) = v13;
      v14 = a2[29];
      *(_BYTE *)(v4 + 240) = *((_BYTE *)a2 + 240);
      *(_QWORD *)(v4 + 232) = v14;
      v15 = a2[31];
      *(_BYTE *)(v4 + 256) = *((_BYTE *)a2 + 256);
      *(_QWORD *)(v4 + 248) = v15;
      v16 = a2[33];
      *(_BYTE *)(v4 + 272) = *((_BYTE *)a2 + 272);
      *(_QWORD *)(v4 + 264) = v16;
      v17 = a2[35];
      *(_BYTE *)(v4 + 288) = *((_BYTE *)a2 + 288);
      *(_QWORD *)(v4 + 280) = v17;
      v18 = a2[37];
      *(_BYTE *)(v4 + 304) = *((_BYTE *)a2 + 304);
      *(_QWORD *)(v4 + 296) = v18;
      v19 = a2[39];
      *(_BYTE *)(v4 + 320) = *((_BYTE *)a2 + 320);
      *(_QWORD *)(v4 + 312) = v19;
      *(_QWORD *)(v4 + 328) = a2[41];
      *(_QWORD *)(v4 + 336) = v10;
      v20 = a2[43];
      *(_BYTE *)(v4 + 352) = *((_BYTE *)a2 + 352);
      *(_QWORD *)(v4 + 344) = v20;
      v21 = a2[45];
      *(_BYTE *)(v4 + 368) = *((_BYTE *)a2 + 368);
      *(_QWORD *)(v4 + 360) = v21;
      v22 = a2[48];
      *(_QWORD *)(v4 + 376) = a2[47];
      *(_QWORD *)(v4 + 384) = v22;
      v23 = a2[49];
      *(_BYTE *)(v4 + 400) = *((_BYTE *)a2 + 400);
      *(_QWORD *)(v4 + 392) = v23;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v22);
    }
    v24 = *(int *)(a3 + 44);
    v25 = v4 + v24;
    v26 = (uint64_t)a2 + v24;
    v27 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = *(int *)(a3 + 48);
    v29 = v4 + v28;
    v30 = (uint64_t)a2 + v28;
    v31 = type metadata accessor for TimedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return v4;
}

uint64_t destroy for AppSessionEndEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = a1[42];
  if (v4 != 1)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[48]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 44);
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(a2 + 48);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for AppSessionEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 5) = *(_QWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 22) = *(_QWORD *)(a2 + 22);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v8 = (_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v9 == 1)
  {
    memcpy((void *)(a1 + 72), v8, 0x149uLL);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v8;
    *(_BYTE *)(a1 + 80) = v8[8];
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v10 = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v10;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v11 = *(_QWORD *)(a2 + 216);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = v11;
    v12 = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v12;
    v13 = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = v13;
    v14 = *(_QWORD *)(a2 + 264);
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = v14;
    v15 = *(_QWORD *)(a2 + 280);
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v15;
    v16 = *(_QWORD *)(a2 + 296);
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = v16;
    v17 = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = v17;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = v9;
    v18 = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = v18;
    v19 = *(_QWORD *)(a2 + 360);
    *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
    *(_QWORD *)(a1 + 360) = v19;
    v20 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = v20;
    v21 = *(_QWORD *)(a2 + 392);
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
    *(_QWORD *)(a1 + 392) = v21;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v20);
  }
  v22 = *(int *)(a3 + 44);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  v26 = *(int *)(a3 + 48);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  return a1;
}

uint64_t assignWithCopy for AppSessionEndEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  BAEventReporter *v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  int64_t v14;
  int64_t v15;
  id v16;
  BAEventReporter *v17;
  uint64_t v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t *v28;
  BAEventReporter *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BAEventReporter *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  int64_t v84;
  int64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v6 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 22) = *(uint64_t *)((char *)a2 + 22);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 30) = *((_BYTE *)a2 + 30);
  v8 = *(BAEventReporter **)(a1 + 32);
  v9 = a2[4];
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  v17 = *(BAEventReporter **)(a1 + 40);
  v18 = a2[5];
  *(_QWORD *)(a1 + 40) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v17, v19, v20, v21, v22, v23, v24, v25);
  v26 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  *(_OWORD *)(a1 + 48) = v26;
  v27 = (_QWORD *)(a1 + 72);
  v28 = a2 + 9;
  v29 = *(BAEventReporter **)(a1 + 336);
  v30 = a2[42];
  if (v29 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v30 != 1)
    {
      v52 = *v28;
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *v27 = v52;
      v53 = a2[11];
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      *(_QWORD *)(a1 + 88) = v53;
      v54 = a2[13];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_QWORD *)(a1 + 104) = v54;
      v55 = a2[15];
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *(_QWORD *)(a1 + 120) = v55;
      v56 = a2[17];
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_QWORD *)(a1 + 136) = v56;
      v57 = a2[19];
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      *(_QWORD *)(a1 + 152) = v57;
      v58 = a2[21];
      *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
      *(_QWORD *)(a1 + 168) = v58;
      v59 = a2[23];
      *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
      *(_QWORD *)(a1 + 184) = v59;
      v60 = a2[25];
      *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
      *(_QWORD *)(a1 + 200) = v60;
      v61 = a2[27];
      *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
      *(_QWORD *)(a1 + 216) = v61;
      v62 = a2[29];
      *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
      *(_QWORD *)(a1 + 232) = v62;
      v63 = a2[31];
      *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
      *(_QWORD *)(a1 + 248) = v63;
      v64 = a2[33];
      *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
      *(_QWORD *)(a1 + 264) = v64;
      v65 = a2[35];
      *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
      *(_QWORD *)(a1 + 280) = v65;
      v66 = a2[37];
      *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
      *(_QWORD *)(a1 + 296) = v66;
      v67 = a2[39];
      *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
      *(_QWORD *)(a1 + 312) = v67;
      *(_QWORD *)(a1 + 328) = a2[41];
      v68 = a2[42];
      *(_QWORD *)(a1 + 336) = v68;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease(v29, v69, v70, v71, v72, v73, v74, v75);
      v76 = a2[43];
      *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
      *(_QWORD *)(a1 + 344) = v76;
      v77 = a2[45];
      *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
      *(_QWORD *)(a1 + 360) = v77;
      *(_QWORD *)(a1 + 376) = a2[47];
      v78 = a2[48];
      v79 = *(BAEventReporter **)(a1 + 384);
      *(_QWORD *)(a1 + 384) = v78;
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
      v87 = a2[49];
      *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
      *(_QWORD *)(a1 + 392) = v87;
      goto LABEL_8;
    }
    sub_13C0B0(a1 + 72);
    goto LABEL_6;
  }
  if (v30 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 72), a2 + 9, 0x149uLL);
    goto LABEL_8;
  }
  v31 = *v28;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *v27 = v31;
  v32 = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v32;
  v33 = a2[13];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v33;
  v34 = a2[15];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_QWORD *)(a1 + 120) = v34;
  v35 = a2[17];
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_QWORD *)(a1 + 136) = v35;
  v36 = a2[19];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_QWORD *)(a1 + 152) = v36;
  v37 = a2[21];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_QWORD *)(a1 + 168) = v37;
  v38 = a2[23];
  *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
  *(_QWORD *)(a1 + 184) = v38;
  v39 = a2[25];
  *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
  *(_QWORD *)(a1 + 200) = v39;
  v40 = a2[27];
  *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
  *(_QWORD *)(a1 + 216) = v40;
  v41 = a2[29];
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
  *(_QWORD *)(a1 + 232) = v41;
  v42 = a2[31];
  *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
  *(_QWORD *)(a1 + 248) = v42;
  v43 = a2[33];
  *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
  *(_QWORD *)(a1 + 264) = v43;
  v44 = a2[35];
  *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
  *(_QWORD *)(a1 + 280) = v44;
  v45 = a2[37];
  *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
  *(_QWORD *)(a1 + 296) = v45;
  v46 = a2[39];
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  *(_QWORD *)(a1 + 312) = v46;
  *(_QWORD *)(a1 + 328) = a2[41];
  v47 = a2[42];
  *(_QWORD *)(a1 + 336) = v47;
  v48 = a2[43];
  *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
  *(_QWORD *)(a1 + 344) = v48;
  v49 = a2[45];
  *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
  *(_QWORD *)(a1 + 360) = v49;
  *(_QWORD *)(a1 + 376) = a2[47];
  v50 = a2[48];
  *(_QWORD *)(a1 + 384) = v50;
  v51 = a2[49];
  *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
  *(_QWORD *)(a1 + 392) = v51;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v50);
LABEL_8:
  v88 = *(int *)(a3 + 44);
  v89 = a1 + v88;
  v90 = (uint64_t)a2 + v88;
  v91 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 24))(v89, v90, v91);
  v92 = *(int *)(a3 + 48);
  v93 = a1 + v92;
  v94 = (uint64_t)a2 + v92;
  v95 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 24))(v93, v94, v95);
  return a1;
}

uint64_t sub_13C0B0(uint64_t a1)
{
  destroy for UserEventStorageData(a1);
  return a1;
}

uint64_t initializeWithTake for AppSessionEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 5) = *(_QWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 22) = *(_QWORD *)(a2 + 22);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  memcpy((void *)(a1 + 72), (const void *)(a2 + 72), 0x149uLL);
  v7 = *(int *)(a3 + 44);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 48);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for AppSessionEndEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  BAEventReporter *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  int64_t v24;
  int64_t v25;
  void *v26;
  BAEventReporter *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BAEventReporter *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 5) = *(_QWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 22) = *(_QWORD *)(a2 + 22);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  v11 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v12 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v27 = *(BAEventReporter **)(a1 + 336);
  if (v27 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v28 = *(_QWORD *)(a2 + 336);
    if (v28 != 1)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v29 = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = v29;
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v30 = *(_QWORD *)(a2 + 216);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = v30;
      v31 = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = v31;
      v32 = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = v32;
      v33 = *(_QWORD *)(a2 + 264);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = v33;
      v34 = *(_QWORD *)(a2 + 280);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = v34;
      v35 = *(_QWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v35;
      v36 = *(_QWORD *)(a2 + 312);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_QWORD *)(a1 + 312) = v36;
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v28;
      swift_bridgeObjectRelease(v27, v20, v21, v22, v23, v24, v25, v26);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
      v37 = *(_QWORD *)(a2 + 384);
      v38 = *(BAEventReporter **)(a1 + 384);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = v37;
      swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
      goto LABEL_6;
    }
    sub_13C0B0(a1 + 72);
  }
  memcpy((void *)(a1 + 72), (const void *)(a2 + 72), 0x149uLL);
LABEL_6:
  v46 = a3[11];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 40))(v47, v48, v49);
  v50 = a3[12];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppSessionEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13C438);
}

uint64_t sub_13C438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 44);
    }
    else
    {
      v11 = type metadata accessor for TimedData(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for AppSessionEndEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13C4F0);
}

uint64_t sub_13C4F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 32) = a2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_13C58C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  v5[0] = "\r";
  v5[1] = &unk_20A3C8;
  v5[2] = &unk_20A3E0;
  v5[3] = &unk_20A3F8;
  v5[4] = &unk_20A3F8;
  v5[5] = &unk_20A410;
  v5[6] = &unk_20A428;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[7] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[8] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppSessionEndEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_13C69C + 4 * byte_20A28E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_13C6D0 + 4 * byte_20A289[v4]))();
}

uint64_t sub_13C6D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_13C6D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13C6E0);
  return result;
}

uint64_t sub_13C6EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13C6F4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_13C6F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_13C700(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppSessionEndEvent.Model.CodingKeys()
{
  return &type metadata for AppSessionEndEvent.Model.CodingKeys;
}

unint64_t sub_13C720()
{
  unint64_t result;

  result = qword_2A0C00;
  if (!qword_2A0C00)
  {
    result = swift_getWitnessTable("5F\a", &type metadata for AppSessionEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0C00);
  }
  return result;
}

unint64_t sub_13C768()
{
  unint64_t result;

  result = qword_2A0C08;
  if (!qword_2A0C08)
  {
    result = swift_getWitnessTable("}F\a", &type metadata for AppSessionEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0C08);
  }
  return result;
}

unint64_t sub_13C7B0()
{
  unint64_t result;

  result = qword_2A0C10;
  if (!qword_2A0C10)
  {
    result = swift_getWitnessTable("eF\a", &type metadata for AppSessionEndEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0C10);
  }
  return result;
}

uint64_t sub_13C7F4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x8000000000221FA0;
    if (a2 == 0x8000000000221FA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000221FA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v6 = 0x8000000000221FC0;
    if (a2 == 0x8000000000221FC0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000221FC0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x8000000000221FE0;
    if (a2 == 0x8000000000221FE0)
      goto LABEL_15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000221FE0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_15:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000000222000)
  {
    v8 = 0x8000000000222000;
LABEL_21:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_21;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x8000000000221D30;
    if (a2 == 0x8000000000221D30)
      goto LABEL_26;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000221D30, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0x7461746E6569726FLL && a2 == 0xEF617461446E6F69)
  {
    v10 = 0xEF617461446E6F69;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEF617461446E6F69, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000014)
  {
    v11 = 0x8000000000222020;
    if (a2 == 0x8000000000222020)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000222020, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v12 = 0xE900000000000061;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 8;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_13CB88(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A0C18, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingAutoNightSettingChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0C18, a1);
}

uint64_t sub_13CBC8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A0C30, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingAutoNightSettingChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0C30, a1);
}

uint64_t ReadingAutoNightSettingChangeEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingAutoNightSettingChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A0CC0, (uint64_t)&nominal type descriptor for ReadingAutoNightSettingChangeEvent);
}

uint64_t ReadingAutoNightSettingChangeEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingAutoNightSettingChangeEvent.contentData.modify())()
{
  type metadata accessor for ReadingAutoNightSettingChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingAutoNightSettingChangeEvent.autoNightThemeSettingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A0C48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingAutoNightSettingChangeEvent.autoNightThemeSettingData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_2A0C48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingAutoNightSettingChangeEvent.autoNightThemeSettingData.modify())()
{
  type metadata accessor for ReadingAutoNightSettingChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingAutoNightSettingChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingAutoNightSettingChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingAutoNightSettingChangeEvent.eventData.modify())()
{
  type metadata accessor for ReadingAutoNightSettingChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingAutoNightSettingChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ReadingAutoNightSettingChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_2A0C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

void ReadingScrollViewSettingChangeEvent.Model.scrollViewSettingData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 112);
}

uint64_t ReadingAutoNightSettingChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A0D60, (uint64_t)&nominal type descriptor for ReadingAutoNightSettingChangeEvent.Model);
}

uint64_t ReadingAutoNightSettingChangeEvent.Model.init(readingSessionData:contentData:autoNightThemeSettingData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 12);
  v11 = *((_BYTE *)a1 + 13);
  v12 = *((_BYTE *)a1 + 14);
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v18 = a2[5];
  v17 = a2[6];
  v19 = *((_WORD *)a2 + 28);
  v20 = *((_DWORD *)a2 + 15);
  v21 = *((_BYTE *)a2 + 64);
  v22 = *((_DWORD *)a2 + 17);
  v23 = *((_BYTE *)a2 + 72);
  v24 = *((_BYTE *)a2 + 77);
  v25 = *a3;
  *(_DWORD *)a5 = v7;
  *(_BYTE *)(a5 + 4) = v8;
  *(_DWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 12) = v10;
  *(_BYTE *)(a5 + 13) = v11;
  *(_BYTE *)(a5 + 14) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v17;
  *(_WORD *)(a5 + 72) = v19;
  *(_DWORD *)(a5 + 76) = v20;
  *(_BYTE *)(a5 + 80) = v21;
  *(_DWORD *)(a5 + 84) = v22;
  *(_BYTE *)(a5 + 88) = v23;
  *(_DWORD *)(a5 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a5 + 93) = v24;
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a2 + 5);
  *(_BYTE *)(a5 + 112) = v25;
  v26 = a5 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_13D090()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_13D0C4 + 4 * byte_20A560[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_13D0C4()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_13D0E4(uint64_t a1)
{
  return a1 + 7;
}

uint64_t sub_13D0FC()
{
  return 0x746144746E657665;
}

uint64_t sub_13D118@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_13EADC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_13D13C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13D3F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_13D164(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13D3F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingAutoNightSettingChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;
  char v50;

  v3 = v1;
  v5 = sub_71B4(&qword_2A0C50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_13D3F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys, &type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v36) = *(_DWORD *)v3;
  BYTE4(v36) = v12;
  LODWORD(v37) = v13;
  BYTE4(v37) = v14;
  BYTE5(v37) = v15;
  BYTE6(v37) = v16;
  v50 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    v36 = *(_QWORD *)(v3 + 16);
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = v22;
    v42 = v23;
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v47 = *(_DWORD *)(v3 + 89);
    v48 = v28;
    v49 = *(_OWORD *)(v3 + 96);
    v50 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for ContentData, v29);
    LOBYTE(v36) = *(_BYTE *)(v3 + 112);
    v50 = 2;
    v30 = sub_11462C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v50, v5, &type metadata for AutoNightThemeSettingData, v30);
    v31 = v3 + *(int *)(type metadata accessor for ReadingAutoNightSettingChangeEvent.Model(0) + 28);
    LOBYTE(v36) = 3;
    v32 = type metadata accessor for EventData(0);
    v33 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v36, v5, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_13D3F0()
{
  unint64_t result;

  result = qword_2A0C58;
  if (!qword_2A0C58)
  {
    result = swift_getWitnessTable(byte_20A76C, &type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0C58);
  }
  return result;
}

void ReadingAutoNightSettingChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_2A0C60);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingAutoNightSettingChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_13D3F0();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys, &type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v47 = v9;
    v16 = v6;
    v17 = v11;
    v18 = v5;
    v53 = v3;
    v19 = v49;
    v70 = 0;
    v20 = sub_71AEC();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ReadingSessionData, &v70, v51, &type metadata for ReadingSessionData, v20);
    v23 = BYTE4(v54);
    v24 = v55;
    v25 = BYTE4(v55);
    v26 = BYTE5(v55);
    v27 = BYTE6(v55);
    v28 = (uint64_t)v17;
    *(_DWORD *)v17 = v54;
    v17[4] = v23;
    *((_DWORD *)v17 + 2) = v24;
    v17[12] = v25;
    v17[13] = v26;
    v17[14] = v27;
    v70 = 1;
    v29 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v70, v22, &type metadata for ContentData, v29);
    v30 = v55;
    v31 = v56;
    v32 = v57;
    v33 = v58;
    v35 = v59;
    v34 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v63;
    v39 = v64;
    v40 = v65;
    v41 = v67;
    v43 = v68;
    v42 = v69;
    *(_QWORD *)(v28 + 16) = v54;
    *(_QWORD *)(v28 + 24) = v30;
    *(_BYTE *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v32;
    *(_QWORD *)(v28 + 48) = v33;
    *(_QWORD *)(v28 + 56) = v35;
    *(_QWORD *)(v28 + 64) = v34;
    v46[0] = v34;
    v46[1] = v42;
    *(_WORD *)(v28 + 72) = v36;
    *(_DWORD *)(v28 + 76) = v37;
    *(_BYTE *)(v28 + 80) = v38;
    *(_DWORD *)(v28 + 84) = v39;
    *(_BYTE *)(v28 + 88) = v40;
    *(_DWORD *)(v28 + 89) = v66;
    *(_BYTE *)(v28 + 93) = v41;
    *(_QWORD *)(v28 + 96) = v43;
    *(_QWORD *)(v28 + 104) = v42;
    v70 = 2;
    v44 = sub_1145E4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for AutoNightThemeSettingData, &v70, v22, &type metadata for AutoNightThemeSettingData, v44);
    *(_BYTE *)(v28 + 112) = v54;
    LOBYTE(v54) = 3;
    v45 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, &v54, v22, v19, v45);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v53 + 32))(v28 + *(int *)(v47 + 28), v18, v19);
    sub_13D7E0(v28, v48);
    sub_7DAC(v52);
    sub_13D824(v28);
  }
}

uint64_t sub_13D7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingAutoNightSettingChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_13D824(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingAutoNightSettingChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_13D860(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingAutoNightSettingChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_13D874(_QWORD *a1)
{
  return ReadingAutoNightSettingChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_13D888@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0C18, (uint64_t)sub_13CB88, a1);
}

uint64_t sub_13D8AC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0C30, (uint64_t)sub_13CBC8, a1);
}

uint64_t sub_13D8D0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_2A0C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingAutoNightSettingChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2A0C48);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ReadingAutoNightSettingChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2A0C48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ReadingAutoNightSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ReadingAutoNightSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ReadingAutoNightSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReadingAutoNightSettingChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2A0C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingAutoNightSettingChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13DF38);
}

uint64_t sub_13DF38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2A0C48);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingAutoNightSettingChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13E010);
}

uint64_t sub_13E010(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2A0C48);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_13E0E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2A0CD0, (uint64_t (*)(void))sub_1145E4, (uint64_t (*)(void))sub_11462C, (uint64_t)&type metadata for AutoNightThemeSettingData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 7) = *(uint64_t *)((char *)a2 + 7);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v6;
    v7 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v7;
    *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)a2 + 89);
    *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
    v8 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v8;
    v9 = *(int *)(a3 + 28);
    v10 = (uint64_t)a2 + v9;
    v11 = a1 + v9;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v12 = type metadata accessor for EventData(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for ReadingAutoNightSettingChangeEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[13]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = a2 + v8;
  v10 = a1 + v8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v11 = type metadata accessor for EventData(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v10, v9, v11);
  return a1;
}

uint64_t assignWithCopy for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v14 = a2[19];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v14;
  v15 = a2[21];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_DWORD *)(a1 + 84) = v15;
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v16 = *((_QWORD *)a2 + 13);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = (uint64_t)a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

uint64_t initializeWithTake for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

uint64_t assignWithTake for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13E7B4);
}

uint64_t sub_13E7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingAutoNightSettingChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13E83C);
}

uint64_t sub_13E83C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_13E8B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_20A660;
  v4[1] = &unk_20A678;
  v4[2] = &unk_20A690;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingAutoNightSettingChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_13E984 + 4 * byte_20A569[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_13E9B8 + 4 * byte_20A564[v4]))();
}

uint64_t sub_13E9B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_13E9C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13E9C8);
  return result;
}

uint64_t sub_13E9D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13E9DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_13E9E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_13E9E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingAutoNightSettingChangeEvent.Model.CodingKeys()
{
  return &type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys;
}

unint64_t sub_13EA08()
{
  unint64_t result;

  result = qword_2A0DA0;
  if (!qword_2A0DA0)
  {
    result = swift_getWitnessTable("-E\a", &type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0DA0);
  }
  return result;
}

unint64_t sub_13EA50()
{
  unint64_t result;

  result = qword_2A0DA8;
  if (!qword_2A0DA8)
  {
    result = swift_getWitnessTable("uE\a", &type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0DA8);
  }
  return result;
}

unint64_t sub_13EA98()
{
  unint64_t result;

  result = qword_2A0DB0;
  if (!qword_2A0DB0)
  {
    result = swift_getWitnessTable("]E\a", &type metadata for ReadingAutoNightSettingChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0DB0);
  }
  return result;
}

uint64_t sub_13EADC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000000222040)
  {
    v7 = 0x8000000000222040;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000000222040, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_13ECB0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A0DB8, &enum case for SessionGroup.default(_:));
}

uint64_t static RemoteConfigChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959E0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0DB8, a1);
}

uint64_t sub_13ECF0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A0DD0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RemoteConfigChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959E8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0DD0, a1);
}

uint64_t RemoteConfigChangeEvent.remoteConfigNamespaceData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A0DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t RemoteConfigChangeEvent.remoteConfigNamespaceData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A0DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t RemoteConfigChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoteConfigChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoteConfigChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A0E60, (uint64_t)&nominal type descriptor for RemoteConfigChangeEvent);
}

uint64_t RemoteConfigChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoteConfigChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RemoteConfigChangeEvent.eventData.modify())()
{
  type metadata accessor for RemoteConfigChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RemoteConfigChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_2A0DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for RemoteConfigChangeEvent(0) + 20);
  v5 = enum case for EventProperty.required<A>(_:);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
}

uint64_t RemoteConfigChangeEvent.Model.remoteConfigNamespaceData.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  return sub_13EF28(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_13EF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t RemoteConfigChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RemoteConfigChangeEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RemoteConfigChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A0EF8, (uint64_t)&nominal type descriptor for RemoteConfigChangeEvent.Model);
}

uint64_t RemoteConfigChangeEvent.Model.init(remoteConfigNamespaceData:eventData:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  uint64_t v7;

  v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  v5 = a1[3];
  a3[2] = a1[2];
  a3[3] = v5;
  v6 = (char *)a3 + *(int *)(type metadata accessor for RemoteConfigChangeEvent.Model(0) + 20);
  v7 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t sub_13F060()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0xD000000000000019;
}

uint64_t sub_13F0A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14057C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_13F0C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13F284();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_13F0F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13F284();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RemoteConfigChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  _OWORD v21[4];

  v3 = v1;
  v5 = sub_71B4(&qword_2A0DF0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_13F284();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteConfigChangeEvent.Model.CodingKeys, &type metadata for RemoteConfigChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v21[0] = *v3;
  v21[1] = v12;
  v13 = v3[3];
  v21[2] = v3[2];
  v21[3] = v13;
  v20 = 0;
  v14 = sub_FAA70();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &type metadata for RemoteConfigNamespaceData, v14);
  if (!v2)
  {
    v15 = (char *)v3 + *(int *)(type metadata accessor for RemoteConfigChangeEvent.Model(0) + 20);
    LOBYTE(v21[0]) = 1;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v21, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_13F284()
{
  unint64_t result;

  result = qword_2A0DF8;
  if (!qword_2A0DF8)
  {
    result = swift_getWitnessTable("uD\a", &type metadata for RemoteConfigChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0DF8);
  }
  return result;
}

uint64_t RemoteConfigChangeEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _OWORD v32[4];
  char v33;

  v27 = a2;
  v3 = type metadata accessor for EventData(0);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_71B4(&qword_2A0E00);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RemoteConfigChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_13F284();
  v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteConfigChangeEvent.Model.CodingKeys, &type metadata for RemoteConfigChangeEvent.Model.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_7DAC(a1);
  v26 = v9;
  v16 = v6;
  v31 = a1;
  v17 = v11;
  v18 = v28;
  v19 = v29;
  v33 = 0;
  v20 = sub_FAA28();
  v21 = v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v32, &type metadata for RemoteConfigNamespaceData, &v33, v30, &type metadata for RemoteConfigNamespaceData, v20);
  v22 = v32[1];
  *(_OWORD *)v17 = v32[0];
  *((_OWORD *)v17 + 1) = v22;
  v23 = v32[3];
  *((_OWORD *)v17 + 2) = v32[2];
  *((_OWORD *)v17 + 3) = v23;
  LOBYTE(v32[0]) = 1;
  v24 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v19, v32, v21, v19, v24);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v21);
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v17[*(int *)(v26 + 20)], v5, v19);
  sub_13F5B8((uint64_t)v17, v27);
  sub_7DAC(v31);
  return sub_13F5FC((uint64_t)v17);
}

uint64_t sub_13F538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_13F5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteConfigChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_13F5FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RemoteConfigChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_13F638@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RemoteConfigChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_13F64C(_QWORD *a1)
{
  return RemoteConfigChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_13F660@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959E0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0DB8, (uint64_t)sub_13ECB0, a1);
}

uint64_t sub_13F684@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959E8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0DD0, (uint64_t)sub_13ECF0, a1);
}

uint64_t sub_13F6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_2A0DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteConfigChangeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_2A0DE8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for RemoteConfigChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_2A0DE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for RemoteConfigChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A0DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for RemoteConfigChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A0DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for RemoteConfigChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A0DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for RemoteConfigChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A0DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteConfigChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13FA64);
}

uint64_t sub_13FA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_2A0DE8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RemoteConfigChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13FAEC);
}

uint64_t sub_13FAEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_2A0DE8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_13FB70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_13FBF4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_13FBF4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2A0E70)
  {
    v2 = sub_FAA28();
    v3 = sub_FAA70();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for RemoteConfigNamespaceData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2A0E70);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RemoteConfigChangeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v10);
  }
  else
  {
    v7 = a2[1];
    if (v7 == 1)
    {
      v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      v9 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v9;
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      v11 = a2[2];
      v12 = a2[3];
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v12;
      v13 = a2[4];
      v14 = a2[5];
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = a2[6];
      v16 = a2[7];
      *(_QWORD *)(a1 + 48) = v15;
      *(_QWORD *)(a1 + 56) = v16;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
    }
    v17 = *(int *)(a3 + 20);
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for RemoteConfigChangeEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 != 1)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[2]);
    swift_bridgeObjectRelease(a1[3]);
    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[7]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for RemoteConfigChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  v15 = *(int *)(a3 + 20);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for RemoteConfigChangeEvent.Model(uint64_t a1, __int128 *a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  BAEventReporter *v29;
  uint64_t v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  BAEventReporter *v38;
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  BAEventReporter *v47;
  uint64_t v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  BAEventReporter *v56;
  uint64_t v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  BAEventReporter *v65;
  uint64_t v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  BAEventReporter *v74;
  uint64_t v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *((_QWORD *)a2 + 1);
  if (v6 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v7 == 1)
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v10;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v14 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v14;
      v15 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 16) = v15;
      v16 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v16;
      v17 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v17;
      v18 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 40) = v18;
      v19 = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 48) = v19;
      v20 = *((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 56) = v20;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
    }
  }
  else if (v7 == 1)
  {
    sub_1400BC((_QWORD *)a1);
    v11 = a2[3];
    v13 = *a2;
    v12 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v12;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v21 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v6, v22, v23, v24, v25, v26, v27, v28);
    v29 = *(BAEventReporter **)(a1 + 16);
    v30 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 16) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v29, v31, v32, v33, v34, v35, v36, v37);
    v38 = *(BAEventReporter **)(a1 + 24);
    v39 = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 24) = v39;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v38, v40, v41, v42, v43, v44, v45, v46);
    v47 = *(BAEventReporter **)(a1 + 32);
    v48 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v48;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRelease(v47, v49, v50, v51, v52, v53, v54, v55);
    v56 = *(BAEventReporter **)(a1 + 40);
    v57 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 40) = v57;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRelease(v56, v58, v59, v60, v61, v62, v63, v64);
    v65 = *(BAEventReporter **)(a1 + 48);
    v66 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 48) = v66;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease(v65, v67, v68, v69, v70, v71, v72, v73);
    v74 = *(BAEventReporter **)(a1 + 56);
    v75 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 56) = v75;
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRelease(v74, v76, v77, v78, v79, v80, v81, v82);
  }
  v83 = *(int *)(a3 + 20);
  v84 = a1 + v83;
  v85 = (uint64_t)a2 + v83;
  v86 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 24))(v84, v85, v86);
  return a1;
}

_QWORD *sub_1400BC(_QWORD *a1)
{
  destroy for RemoteConfigNamespaceData(a1);
  return a1;
}

_OWORD *initializeWithTake for RemoteConfigChangeEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for RemoteConfigChangeEvent.Model(_QWORD *a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  BAEventReporter *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  BAEventReporter *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  BAEventReporter *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  BAEventReporter *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  int64_t v52;
  int64_t v53;
  id v54;
  BAEventReporter *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;

  v11 = (BAEventReporter *)a1[1];
  if (v11 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v12 = *(_QWORD *)(a2 + 8);
    if (v12 != 1)
    {
      *a1 = *(_QWORD *)a2;
      a1[1] = v12;
      swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
      v15 = (BAEventReporter *)a1[2];
      a1[2] = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
      v23 = (BAEventReporter *)a1[3];
      a1[3] = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      v31 = (BAEventReporter *)a1[4];
      a1[4] = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
      v39 = (BAEventReporter *)a1[5];
      a1[5] = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
      v47 = (BAEventReporter *)a1[6];
      a1[6] = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
      v55 = (BAEventReporter *)a1[7];
      a1[7] = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      goto LABEL_6;
    }
    sub_1400BC(a1);
  }
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v14;
LABEL_6:
  v63 = a3[5];
  v64 = (char *)a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteConfigChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14025C);
}

uint64_t sub_14025C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 2147483645)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return ((_DWORD)v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RemoteConfigChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1402EC);
}

uint64_t sub_1402EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483645)
  {
    *(_QWORD *)(result + 8) = (a2 + 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_140364(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "@";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RemoteConfigChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_140424 + 4 * byte_20A7C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_140458 + 4 * byte_20A7C0[v4]))();
}

uint64_t sub_140458(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_140460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x140468);
  return result;
}

uint64_t sub_140474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14047CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_140480(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_140488(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteConfigChangeEvent.Model.CodingKeys()
{
  return &type metadata for RemoteConfigChangeEvent.Model.CodingKeys;
}

unint64_t sub_1404A8()
{
  unint64_t result;

  result = qword_2A0F30;
  if (!qword_2A0F30)
  {
    result = swift_getWitnessTable(byte_20A944, &type metadata for RemoteConfigChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F30);
  }
  return result;
}

unint64_t sub_1404F0()
{
  unint64_t result;

  result = qword_2A0F38;
  if (!qword_2A0F38)
  {
    result = swift_getWitnessTable(byte_20A8B4, &type metadata for RemoteConfigChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F38);
  }
  return result;
}

unint64_t sub_140538()
{
  unint64_t result;

  result = qword_2A0F40;
  if (!qword_2A0F40)
  {
    result = swift_getWitnessTable(byte_20A8DC, &type metadata for RemoteConfigChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F40);
  }
  return result;
}

uint64_t sub_14057C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000019)
  {
    v4 = 0x8000000000220200;
    if (a2 == 0x8000000000220200)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000000220200, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t PurchaseFailData.errorCode.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t PurchaseFailData.errorCode.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

unint64_t LayoutOptionData.characterSpacing.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12) | ((unint64_t)*(unsigned __int8 *)(v0 + 16) << 32);
}

uint64_t LayoutOptionData.characterSpacing.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  *(_BYTE *)(v1 + 16) = BYTE4(result) & 1;
  return result;
}

unint64_t OnDevicePersonalizationPropertyData.lockedInCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20) | ((unint64_t)*(unsigned __int8 *)(v0 + 24) << 32);
}

uint64_t OnDevicePersonalizationPropertyData.lockedInCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  *(_BYTE *)(v1 + 24) = BYTE4(result) & 1;
  return result;
}

uint64_t (*OnDevicePersonalizationPropertyData.lockedInCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LayoutOptionData.isFullJustificationEanabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t LayoutOptionData.isFullJustificationEanabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

void __swiftcall LayoutOptionData.init(isCustomized:lineSpacing:characterSpacing:wordSpacing:isFullJustificationEanabled:)(BookAnalytics::LayoutOptionData *__return_ptr retstr, Swift::Bool_optional isCustomized, Swift::Float_optional *lineSpacing, Swift::Float_optional *characterSpacing, Swift::Float_optional *wordSpacing, Swift::Bool_optional isFullJustificationEanabled)
{
  retstr->isCustomized = isCustomized;
  LODWORD(retstr->lineSpacing.value) = (_DWORD)lineSpacing;
  retstr->lineSpacing.is_nil = BYTE4(lineSpacing) & 1;
  LODWORD(retstr->characterSpacing.value) = (_DWORD)characterSpacing;
  retstr->characterSpacing.is_nil = BYTE4(characterSpacing) & 1;
  LODWORD(retstr->wordSpacing.value) = (_DWORD)wordSpacing;
  retstr->wordSpacing.is_nil = BYTE4(wordSpacing) & 1;
  retstr->isFullJustificationEanabled = isFullJustificationEanabled;
}

uint64_t sub_140758(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_140794 + 4 * byte_20A9C0[a1]))(0x6D6F747375437369, 0xEC00000064657A69);
}

uint64_t sub_140794()
{
  return 0x63617053656E696CLL;
}

unint64_t sub_1407DC()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_140800()
{
  unsigned __int8 *v0;

  return sub_140758(*v0);
}

uint64_t sub_140808@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14103C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_14082C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_140D80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_140854(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_140D80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LayoutOptionData.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  char v27;
  _BYTE v28[2];
  char v29;
  char v30;
  char v31;

  v4 = sub_71B4(&qword_2A0F48);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *((unsigned int *)v1 + 1);
  v23 = v1[8];
  v22 = *((unsigned int *)v1 + 3);
  v8 = v1[16];
  v19 = *((unsigned int *)v1 + 5);
  v20 = v1[24];
  v21 = v8;
  v18 = v1[25];
  v9 = a1[3];
  v10 = a1[4];
  v11 = *v1;
  sub_7988(a1, v9);
  v12 = sub_140D80();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LayoutOptionData.CodingKeys, &type metadata for LayoutOptionData.CodingKeys, v12, v9, v10);
  v31 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v11, &v31, v4);
  if (!v2)
  {
    v14 = v20;
    v13 = v21;
    v15 = v22;
    v30 = 1;
    v28[1] = v23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24 | ((unint64_t)v23 << 32), &v30, v4);
    v29 = 2;
    v26 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15 | ((unint64_t)v13 << 32), &v29, v4);
    v28[0] = 3;
    v25 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19 | ((unint64_t)v14 << 32), v28, v4);
    v27 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, &v27, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t LayoutOptionData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v5 = sub_71B4(&qword_2A0F58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_140D80();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LayoutOptionData.CodingKeys, &type metadata for LayoutOptionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v24 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
    v23 = 1;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v23, v5);
    v22 = 2;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v22, v5);
    v21 = 3;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v21, v5);
    v20 = 4;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v20, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v12;
    *(_DWORD *)(a2 + 4) = v13;
    *(_BYTE *)(a2 + 8) = BYTE4(v13) & 1;
    v16 = BYTE4(v19);
    *(_DWORD *)(a2 + 12) = v19;
    *(_BYTE *)(a2 + 16) = v16 & 1;
    v17 = BYTE4(v18);
    *(_DWORD *)(a2 + 20) = v18;
    *(_BYTE *)(a2 + 24) = v17 & 1;
    *(_BYTE *)(a2 + 25) = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_140C64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LayoutOptionData.init(from:)(a1, a2);
}

uint64_t sub_140C78(_QWORD *a1)
{
  return LayoutOptionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics16LayoutOptionDataV2eeoiySbAC_ACtFZ_0(float *a1, float *a2)
{
  int v2;
  float v3;
  unsigned __int8 v4;
  float v5;
  unsigned __int8 v6;
  float v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  _BOOL4 v13;
  char v14;
  char v15;
  char v16;
  _BOOL4 v17;

  v2 = *(unsigned __int8 *)a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[3];
  v6 = *((_BYTE *)a1 + 16);
  v7 = a1[5];
  v8 = *((_BYTE *)a1 + 24);
  v9 = *((unsigned __int8 *)a1 + 25);
  v10 = *(unsigned __int8 *)a2;
  v11 = *((unsigned __int8 *)a2 + 25);
  if (v2 == 2)
  {
    if (v10 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v13 = (v2 & 1) == 0;
    if (v10 == 2 || ((v13 ^ v10) & 1) == 0)
      return result;
  }
  if ((v4 & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 8))
      return 0;
  }
  else
  {
    if (v3 == a2[1])
      v14 = *((_BYTE *)a2 + 8);
    else
      v14 = 1;
    if ((v14 & 1) != 0)
      return 0;
  }
  if ((v6 & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 16))
      return 0;
  }
  else
  {
    if (v5 == a2[3])
      v15 = *((_BYTE *)a2 + 16);
    else
      v15 = 1;
    if ((v15 & 1) != 0)
      return 0;
  }
  if ((v8 & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 24))
      return 0;
  }
  else
  {
    if (v7 == a2[5])
      v16 = *((_BYTE *)a2 + 24);
    else
      v16 = 1;
    if ((v16 & 1) != 0)
      return 0;
  }
  if (v9 == 2)
  {
    if (v11 != 2)
      return 0;
  }
  else
  {
    v17 = (v9 & 1) == 0;
    if (v11 == 2 || ((v17 ^ v11) & 1) == 0)
      return 0;
  }
  return 1;
}

unint64_t sub_140D80()
{
  unint64_t result;

  result = qword_2A0F50;
  if (!qword_2A0F50)
  {
    result = swift_getWitnessTable("eD\a", &type metadata for LayoutOptionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F50);
  }
  return result;
}

__n128 initializeWithCopy for LayoutOptionData(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LayoutOptionData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[26])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutOptionData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutOptionData()
{
  return &type metadata for LayoutOptionData;
}

uint64_t storeEnumTagSinglePayload for LayoutOptionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_140EE4 + 4 * byte_20A9CA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_140F18 + 4 * byte_20A9C5[v4]))();
}

uint64_t sub_140F18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_140F20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x140F28);
  return result;
}

uint64_t sub_140F34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x140F3CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_140F40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_140F48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LayoutOptionData.CodingKeys()
{
  return &type metadata for LayoutOptionData.CodingKeys;
}

unint64_t sub_140F68()
{
  unint64_t result;

  result = qword_2A0F60;
  if (!qword_2A0F60)
  {
    result = swift_getWitnessTable(byte_20AB4C, &type metadata for LayoutOptionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F60);
  }
  return result;
}

unint64_t sub_140FB0()
{
  unint64_t result;

  result = qword_2A0F68;
  if (!qword_2A0F68)
  {
    result = swift_getWitnessTable(byte_20AABC, &type metadata for LayoutOptionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F68);
  }
  return result;
}

unint64_t sub_140FF8()
{
  unint64_t result;

  result = qword_2A0F70;
  if (!qword_2A0F70)
  {
    result = swift_getWitnessTable(byte_20AAE4, &type metadata for LayoutOptionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F70);
  }
  return result;
}

uint64_t sub_14103C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6D6F747375437369 && a2 == 0xEC00000064657A69)
  {
    v5 = 0xEC00000064657A69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6F747375437369, 0xEC00000064657A69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x63617053656E696CLL && a2 == 0xEB00000000676E69)
  {
    v7 = 0xEB00000000676E69;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63617053656E696CLL, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x8000000000222060;
    if (a2 == 0x8000000000222060)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222060, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6361705364726F77 && a2 == 0xEB00000000676E69)
  {
    v9 = 0xEB00000000676E69;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6361705364726F77, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000000222080)
  {
    swift_bridgeObjectRelease(0x8000000000222080);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000000222080, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void SearchSuggestionSelectionData.selectedSuggestionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 20);
}

_BYTE *SearchSuggestionSelectionData.selectedSuggestionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = *result;
  return result;
}

BookAnalytics::SearchSuggestionSelectionData __swiftcall SearchSuggestionSelectionData.init(selectedSuggestionString:selectedSuggestionPosition:selectedSuggestionType:)(Swift::String selectedSuggestionString, Swift::Int32 selectedSuggestionPosition, BookAnalytics::SelectedSuggestionType selectedSuggestionType)
{
  uint64_t v3;
  char v4;
  BookAnalytics::SearchSuggestionSelectionData result;

  v4 = *(_BYTE *)selectedSuggestionType;
  *(Swift::String *)v3 = selectedSuggestionString;
  *(_DWORD *)(v3 + 16) = selectedSuggestionPosition;
  *(_BYTE *)(v3 + 20) = v4;
  result.selectedSuggestionString = selectedSuggestionString;
  result.selectedSuggestionPosition = selectedSuggestionPosition;
  return result;
}

unint64_t sub_1412B8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0x6974736567677573;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_141324@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_141C0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_141348(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14177C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_141370(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14177C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchSuggestionItemTypeData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v3 = sub_71B4(&qword_2A0F78);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v18 = *((_DWORD *)v1 + 4);
  HIDWORD(v16) = *((unsigned __int8 *)v1 + 20);
  v10 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v10);
  v11 = sub_14177C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionItemTypeData.CodingKeys, &type metadata for SearchSuggestionItemTypeData.CodingKeys, v11, v10, v9);
  v22 = 0;
  v12 = v17;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v22, v3);
  if (!v12)
  {
    v13 = BYTE4(v16);
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v21, v3);
    v20 = v13;
    v19 = 2;
    v14 = sub_1417C0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v3, &type metadata for SuggestionType, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void SearchSuggestionItemTypeData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;

  v5 = sub_71B4(&qword_2A0F90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_14177C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchSuggestionItemTypeData.CodingKeys, &type metadata for SearchSuggestionItemTypeData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    BYTE2(v27) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v27 + 2, v5);
    v14 = v13;
    BYTE1(v27) = 1;
    swift_bridgeObjectRetain(v13);
    v25 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v27 + 1, v5);
    v26 = 2;
    v15 = sub_141804();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for SuggestionType, &v26, v5, &type metadata for SuggestionType, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v23 = v27;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v25;
    *(_BYTE *)(a2 + 20) = v23;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
  }
}

void sub_1416D4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchSuggestionItemTypeData.init(from:)(a1, a2);
}

uint64_t sub_1416E8(_QWORD *a1)
{
  return SearchSuggestionItemTypeData.encode(to:)(a1);
}

void _s13BookAnalytics28SearchSuggestionItemTypeDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v7 = *((_BYTE *)a1 + 20);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = v4 == *(_QWORD *)a2 && v5 == v8;
  if ((v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v8, 0) & 1) != 0) && v6 == v9)
    sub_27034(v7);
}

unint64_t sub_14177C()
{
  unint64_t result;

  result = qword_2A0F80;
  if (!qword_2A0F80)
  {
    result = swift_getWitnessTable("ID\a", &type metadata for SearchSuggestionItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0F80);
  }
  return result;
}

unint64_t sub_1417C0()
{
  unint64_t result;

  result = qword_2A0F88;
  if (!qword_2A0F88)
  {
    result = swift_getWitnessTable("A~\a", &type metadata for SuggestionType);
    atomic_store(result, (unint64_t *)&qword_2A0F88);
  }
  return result;
}

unint64_t sub_141804()
{
  unint64_t result;

  result = qword_2A0F98;
  if (!qword_2A0F98)
  {
    result = swift_getWitnessTable("Y~\a", &type metadata for SuggestionType);
    atomic_store(result, (unint64_t *)&qword_2A0F98);
  }
  return result;
}

unint64_t sub_14184C()
{
  unint64_t result;

  result = qword_2A0FA0;
  if (!qword_2A0FA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchSuggestionItemTypeData, &type metadata for SearchSuggestionItemTypeData);
    atomic_store(result, (unint64_t *)&qword_2A0FA0);
  }
  return result;
}

unint64_t sub_141894()
{
  unint64_t result;

  result = qword_2A0FA8;
  if (!qword_2A0FA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SearchSuggestionItemTypeData, &type metadata for SearchSuggestionItemTypeData);
    atomic_store(result, (unint64_t *)&qword_2A0FA8);
  }
  return result;
}

uint64_t sub_1418DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SearchSuggestionItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

__n128 initializeWithTake for SearchSuggestionItemTypeData(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SearchSuggestionItemTypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchSuggestionItemTypeData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 21))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchSuggestionItemTypeData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 21) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchSuggestionItemTypeData()
{
  return &type metadata for SearchSuggestionItemTypeData;
}

uint64_t storeEnumTagSinglePayload for SearchSuggestionItemTypeData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_141AB4 + 4 * byte_20ABD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_141AE8 + 4 * byte_20ABD0[v4]))();
}

uint64_t sub_141AE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_141AF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x141AF8);
  return result;
}

uint64_t sub_141B04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x141B0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_141B10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_141B18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchSuggestionItemTypeData.CodingKeys()
{
  return &type metadata for SearchSuggestionItemTypeData.CodingKeys;
}

unint64_t sub_141B38()
{
  unint64_t result;

  result = qword_2A0FB0;
  if (!qword_2A0FB0)
  {
    result = swift_getWitnessTable(byte_20AD58, &type metadata for SearchSuggestionItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0FB0);
  }
  return result;
}

unint64_t sub_141B80()
{
  unint64_t result;

  result = qword_2A0FB8;
  if (!qword_2A0FB8)
  {
    result = swift_getWitnessTable(byte_20ACC8, &type metadata for SearchSuggestionItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0FB8);
  }
  return result;
}

unint64_t sub_141BC8()
{
  unint64_t result;

  result = qword_2A0FC0;
  if (!qword_2A0FC0)
  {
    result = swift_getWitnessTable(byte_20ACF0, &type metadata for SearchSuggestionItemTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A0FC0);
  }
  return result;
}

uint64_t sub_141C0C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000000002220A0;
    if (a2 == 0x80000000002220A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002220A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000002220C0)
  {
    v6 = 0x80000000002220C0;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000002220C0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00657079546E6FLL)
  {
    swift_bridgeObjectRelease(0xEE00657079546E6FLL);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00657079546E6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_141D7C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A0FC8, &enum case for SessionGroup.default(_:));
}

uint64_t static AccountScreenViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0FC8, a1);
}

uint64_t sub_141DBC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A0FE0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AccountScreenViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2959F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0FE0, a1);
}

uint64_t AccountScreenViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AccountScreenViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1068, (uint64_t)&nominal type descriptor for AccountScreenViewEvent);
}

uint64_t AccountScreenViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AccountScreenViewEvent.timedData.modify())()
{
  type metadata accessor for AccountScreenViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AccountScreenViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for AccountScreenViewEvent(0) + 20);
  v5 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t AccountScreenViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountScreenViewEvent.Model(0) + 20);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AccountScreenViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A10F8, (uint64_t)&nominal type descriptor for AccountScreenViewEvent.Model);
}

uint64_t AccountScreenViewEvent.Model.init(eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v7 = a3 + *(int *)(type metadata accessor for AccountScreenViewEvent.Model(0) + 20);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t sub_142020(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1421F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_142048(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1421F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AccountScreenViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_2A0FF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1421F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccountScreenViewEvent.Model.CodingKeys, &type metadata for AccountScreenViewEvent.Model.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for EventData(0);
  v13 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for AccountScreenViewEvent.Model(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for TimedData(0);
    v16 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1421F4()
{
  unint64_t result;

  result = qword_2A1000;
  if (!qword_2A1000)
  {
    result = swift_getWitnessTable(byte_20AF70, &type metadata for AccountScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1000);
  }
  return result;
}

uint64_t AccountScreenViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v26 = a2;
  v28 = type metadata accessor for TimedData(0);
  v25 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_71B4(&qword_2A1008);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccountScreenViewEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_1421F4();
  v31 = v8;
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccountScreenViewEvent.Model.CodingKeys, &type metadata for AccountScreenViewEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(a1);
  v16 = v6;
  v17 = (uint64_t)v11;
  v18 = a1;
  v19 = v27;
  v20 = v28;
  v35 = 0;
  v21 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v30, &v35, v32, v30, v21);
  v33 = v4;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v17, v29, v30);
  v34 = 1;
  v22 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, &v34, v32, v20, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v31, v32);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v17 + *(int *)(v9 + 20), v19, v20);
  sub_142508(v17, v26);
  sub_7DAC(v18);
  return sub_14254C(v17);
}

uint64_t sub_142508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccountScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_14254C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccountScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_142588@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccountScreenViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_14259C(_QWORD *a1)
{
  return AccountScreenViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_1425B0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A0FC8, (uint64_t)sub_141D7C, a1);
}

uint64_t sub_1425D4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2959F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A0FE0, (uint64_t)sub_141DBC, a1);
}

uint64_t getEnumTagSinglePayload for AccountScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_142604);
}

uint64_t sub_142604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_295D70);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D78);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AccountScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14268C);
}

uint64_t sub_14268C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_295D70);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D78);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for AccountScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14271C);
}

uint64_t sub_14271C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for EventData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for TimedData(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AccountScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14279C);
}

uint64_t sub_14279C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for EventData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for TimedData(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t storeEnumTagSinglePayload for AccountScreenViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_142864 + 4 * byte_20ADD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_142898 + 4 * byte_20ADD0[v4]))();
}

uint64_t sub_142898(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1428A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1428A8);
  return result;
}

uint64_t sub_1428B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1428BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1428C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1428C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountScreenViewEvent.Model.CodingKeys()
{
  return &type metadata for AccountScreenViewEvent.Model.CodingKeys;
}

unint64_t sub_1428E8()
{
  unint64_t result;

  result = qword_2A1130;
  if (!qword_2A1130)
  {
    result = swift_getWitnessTable(byte_20AF48, &type metadata for AccountScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1130);
  }
  return result;
}

unint64_t sub_142930()
{
  unint64_t result;

  result = qword_2A1138;
  if (!qword_2A1138)
  {
    result = swift_getWitnessTable(byte_20AEB8, &type metadata for AccountScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1138);
  }
  return result;
}

unint64_t sub_142978()
{
  unint64_t result;

  result = qword_2A1140;
  if (!qword_2A1140)
  {
    result = swift_getWitnessTable(byte_20AEE0, &type metadata for AccountScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1140);
  }
  return result;
}

uint64_t sub_1429BC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1148, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingGoalChangedEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A00, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1148, a1);
}

uint64_t sub_1429FC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A1160, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingGoalChangedEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A08, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1160, a1);
}

uint64_t ReadingGoalChangedEvent.readingGoalsDurationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A1178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ReadingGoalChangedEvent.readingGoalsDurationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A1178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ReadingGoalChangedEvent.readingGoalYearlyData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalChangedEvent(0) + 20);
  v4 = sub_71B4(&qword_2A1180);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingGoalChangedEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A1218, (uint64_t)&nominal type descriptor for ReadingGoalChangedEvent);
}

uint64_t ReadingGoalChangedEvent.readingGoalYearlyData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalChangedEvent(0) + 20);
  v4 = sub_71B4(&qword_2A1180);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingGoalChangedEvent.readingGoalYearlyData.modify())()
{
  type metadata accessor for ReadingGoalChangedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingGoalChangedEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalChangedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingGoalChangedEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalChangedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingGoalChangedEvent.eventData.modify())()
{
  type metadata accessor for ReadingGoalChangedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingGoalChangedEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_2A1178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ReadingGoalChangedEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_2A1180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
}

__n128 ReadingGoalChangedEvent.Model.readingGoalsDurationData.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ReadingGoalChangedEvent.Model.readingGoalYearlyData.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

uint64_t ReadingGoalChangedEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalChangedEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingGoalChangedEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A12C0, (uint64_t)&nominal type descriptor for ReadingGoalChangedEvent.Model);
}

uint64_t ReadingGoalChangedEvent.Model.init(readingGoalsDurationData:readingGoalYearlyData:eventData:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = *a2;
  v7 = a4 + *(int *)(type metadata accessor for ReadingGoalChangedEvent.Model(0) + 24);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a3, v8);
}

unint64_t sub_142DE8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000015;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0xD000000000000018;
}

uint64_t sub_142E4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14416C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_142E70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14306C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_142E98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14306C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingGoalChangedEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  __int128 v21;
  char v22;

  v3 = v1;
  v5 = sub_71B4(&qword_2A1188);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_14306C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingGoalChangedEvent.Model.CodingKeys, &type metadata for ReadingGoalChangedEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 16);
  v21 = *v3;
  v22 = v12;
  v20 = 0;
  v13 = sub_1430B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v5, &type metadata for ReadingGoalsDurationData, v13);
  if (!v2)
  {
    v21 = *(__int128 *)((char *)v3 + 24);
    v20 = 1;
    v14 = sub_1430F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for ReadingGoalYearlyData, v14);
    v15 = (uint64_t)v3 + *(int *)(type metadata accessor for ReadingGoalChangedEvent.Model(0) + 24);
    LOBYTE(v21) = 2;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v21, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_14306C()
{
  unint64_t result;

  result = qword_2A1190;
  if (!qword_2A1190)
  {
    result = swift_getWitnessTable(byte_20B194, &type metadata for ReadingGoalChangedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1190);
  }
  return result;
}

unint64_t sub_1430B0()
{
  unint64_t result;

  result = qword_2A1198;
  if (!qword_2A1198)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReadingGoalsDurationData, &type metadata for ReadingGoalsDurationData);
    atomic_store(result, (unint64_t *)&qword_2A1198);
  }
  return result;
}

unint64_t sub_1430F4()
{
  unint64_t result;

  result = qword_2A11A0;
  if (!qword_2A11A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReadingGoalYearlyData, &type metadata for ReadingGoalYearlyData);
    atomic_store(result, (unint64_t *)&qword_2A11A0);
  }
  return result;
}

uint64_t ReadingGoalChangedEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  char v34;

  v26 = a2;
  v3 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_71B4(&qword_2A11A8);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingGoalChangedEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_14306C();
  v29 = v8;
  v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingGoalChangedEvent.Model.CodingKeys, &type metadata for ReadingGoalChangedEvent.Model.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v31 = v9;
    v16 = v5;
    v17 = v28;
    v34 = 0;
    v18 = sub_1433B8();
    v19 = v29;
    v20 = v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v32, &type metadata for ReadingGoalsDurationData, &v34, v30, &type metadata for ReadingGoalsDurationData, v18);
    v21 = v33;
    *(_OWORD *)v11 = v32;
    v11[16] = v21;
    v34 = 1;
    v22 = sub_1433FC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for ReadingGoalYearlyData, &v34, v20, &type metadata for ReadingGoalYearlyData, v22);
    *(_OWORD *)(v11 + 24) = v32;
    LOBYTE(v32) = 2;
    v24 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, &v32, v20, v17, v24);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v20);
    v25 = v26;
    (*(void (**)(char *, _QWORD *, uint64_t))(v27 + 32))(&v11[*(int *)(v31 + 24)], v16, v17);
    sub_143440((uint64_t)v11, v25);
  }
  return sub_7DAC(a1);
}

unint64_t sub_1433B8()
{
  unint64_t result;

  result = qword_2A11B0;
  if (!qword_2A11B0)
  {
    result = swift_getWitnessTable("-\r\a", &type metadata for ReadingGoalsDurationData);
    atomic_store(result, (unint64_t *)&qword_2A11B0);
  }
  return result;
}

unint64_t sub_1433FC()
{
  unint64_t result;

  result = qword_2A11B8;
  if (!qword_2A11B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReadingGoalYearlyData, &type metadata for ReadingGoalYearlyData);
    atomic_store(result, (unint64_t *)&qword_2A11B8);
  }
  return result;
}

uint64_t sub_143440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingGoalChangedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_143484@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReadingGoalChangedEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_143498(_QWORD *a1)
{
  return ReadingGoalChangedEvent.Model.encode(to:)(a1);
}

uint64_t sub_1434AC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A00, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1148, (uint64_t)sub_1429BC, a1);
}

uint64_t sub_1434D0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A08, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1160, (uint64_t)sub_1429FC, a1);
}

uint64_t sub_1434F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_2A1178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_2A1180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingGoalChangedEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_2A1178);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A1180);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ReadingGoalChangedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_2A1178);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_2A1180);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ReadingGoalChangedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ReadingGoalChangedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ReadingGoalChangedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ReadingGoalChangedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2A1178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingGoalChangedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_143A24);
}

uint64_t sub_143A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_2A1178);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A1180);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingGoalChangedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_143AD4);
}

uint64_t sub_143AD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_2A1178);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A1180);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_143B80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, &qword_2A1228, (uint64_t (*)(void))sub_1433B8, (uint64_t (*)(void))sub_1430B0, (uint64_t)&type metadata for ReadingGoalsDurationData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A1230, (uint64_t (*)(void))sub_1433FC, (uint64_t (*)(void))sub_1430F4, (uint64_t)&type metadata for ReadingGoalYearlyData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadingGoalChangedEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for ReadingGoalChangedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for ReadingGoalChangedEvent.Model(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for ReadingGoalChangedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ReadingGoalChangedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingGoalChangedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_143EBC);
}

uint64_t sub_143EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for ReadingGoalChangedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_143F08);
}

uint64_t sub_143F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_143F4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_20B0A0;
  v4[1] = &unk_20B0B8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingGoalChangedEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_144014 + 4 * byte_20AFC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_144048 + 4 * byte_20AFC0[v4]))();
}

uint64_t sub_144048(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_144050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x144058);
  return result;
}

uint64_t sub_144064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14406CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_144070(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_144078(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingGoalChangedEvent.Model.CodingKeys()
{
  return &type metadata for ReadingGoalChangedEvent.Model.CodingKeys;
}

unint64_t sub_144098()
{
  unint64_t result;

  result = qword_2A1300;
  if (!qword_2A1300)
  {
    result = swift_getWitnessTable("\rC\a", &type metadata for ReadingGoalChangedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1300);
  }
  return result;
}

unint64_t sub_1440E0()
{
  unint64_t result;

  result = qword_2A1308;
  if (!qword_2A1308)
  {
    result = swift_getWitnessTable("UC\a", &type metadata for ReadingGoalChangedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1308);
  }
  return result;
}

unint64_t sub_144128()
{
  unint64_t result;

  result = qword_2A1310;
  if (!qword_2A1310)
  {
    result = swift_getWitnessTable("=C\a", &type metadata for ReadingGoalChangedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1310);
  }
  return result;
}

uint64_t sub_14416C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000018 && a2 == 0x80000000002220E0)
  {
    v4 = 0x80000000002220E0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000002220E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000015)
  {
    v6 = 0x8000000000222100;
    if (a2 == 0x8000000000222100)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000000222100, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_1442C4()
{
  return 0xD000000000000010;
}

uint64_t sub_1442E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_144744(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_144308(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_144444();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_144330(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_144444();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DialogActionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_71B4(&qword_2A1318);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_144444();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DialogActionData.CodingKeys, &type metadata for DialogActionData.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_144444()
{
  unint64_t result;

  result = qword_2A1320;
  if (!qword_2A1320)
  {
    result = swift_getWitnessTable(byte_20B394, &type metadata for DialogActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1320);
  }
  return result;
}

uint64_t DialogActionData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_71B4(&qword_2A1328);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_144444();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DialogActionData.CodingKeys, &type metadata for DialogActionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_1445AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return DialogActionData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for DialogActionData()
{
  return &type metadata for DialogActionData;
}

uint64_t storeEnumTagSinglePayload for DialogActionData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_144610 + 4 * byte_20B1F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_144630 + 4 * byte_20B1F5[v4]))();
}

_BYTE *sub_144610(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_144630(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_144638(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_144640(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_144648(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_144650(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DialogActionData.CodingKeys()
{
  return &type metadata for DialogActionData.CodingKeys;
}

unint64_t sub_144670()
{
  unint64_t result;

  result = qword_2A1330;
  if (!qword_2A1330)
  {
    result = swift_getWitnessTable(byte_20B36C, &type metadata for DialogActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1330);
  }
  return result;
}

unint64_t sub_1446B8()
{
  unint64_t result;

  result = qword_2A1338;
  if (!qword_2A1338)
  {
    result = swift_getWitnessTable("MC\a", &type metadata for DialogActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1338);
  }
  return result;
}

unint64_t sub_144700()
{
  unint64_t result;

  result = qword_2A1340;
  if (!qword_2A1340)
  {
    result = swift_getWitnessTable("5C\a", &type metadata for DialogActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1340);
  }
  return result;
}

uint64_t sub_144744(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000000222120)
  {
    swift_bridgeObjectRelease(0x8000000000222120);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222120, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1447C8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1348, &enum case for SessionGroup.default(_:));
}

uint64_t static WriteReviewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A10, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1348, a1);
}

uint64_t sub_144808(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A1360, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static WriteReviewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A18, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1360, a1);
}

uint64_t WriteReviewEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WriteReviewEvent(0) + 20);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WriteReviewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A13E8, (uint64_t)&nominal type descriptor for WriteReviewEvent);
}

uint64_t WriteReviewEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WriteReviewEvent(0) + 20);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WriteReviewEvent.upSellData.modify())()
{
  type metadata accessor for WriteReviewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WriteReviewEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WriteReviewEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WriteReviewEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WriteReviewEvent(0) + 24);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WriteReviewEvent.seriesData.modify())()
{
  type metadata accessor for WriteReviewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WriteReviewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WriteReviewEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WriteReviewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WriteReviewEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WriteReviewEvent.eventData.modify())()
{
  type metadata accessor for WriteReviewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WriteReviewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for WriteReviewEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t WriteReviewEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 112);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 96);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t WriteReviewEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[15];
  v3 = v1[16];
  v4 = v1[17];
  v5 = v1[18];
  v6 = v1[19];
  v7 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t WriteReviewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WriteReviewEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WriteReviewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1480, (uint64_t)&nominal type descriptor for WriteReviewEvent.Model);
}

uint64_t WriteReviewEvent.Model.init(contentData:upSellData:seriesData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v7;
  *(_BYTE *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 24) = v9;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v11;
  *(_WORD *)(a5 + 56) = v12;
  *(_DWORD *)(a5 + 60) = v13;
  *(_BYTE *)(a5 + 64) = v14;
  *(_DWORD *)(a5 + 68) = v15;
  *(_BYTE *)(a5 + 72) = v16;
  v17 = *(_DWORD *)(a1 + 73);
  v18 = *a2;
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 96) = v18;
  v19 = a3[1];
  *(_OWORD *)(a5 + 120) = *a3;
  LOBYTE(v7) = *(_BYTE *)(a1 + 77);
  v20 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(a5 + 73) = v17;
  *(_BYTE *)(a5 + 77) = v7;
  *(_QWORD *)(a5 + 112) = v20;
  *(_OWORD *)(a5 + 136) = v19;
  *(_OWORD *)(a5 + 152) = a3[2];
  v21 = a5 + *(int *)(type metadata accessor for WriteReviewEvent.Model(0) + 28);
  v22 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a4, v22);
}

uint64_t sub_144CE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_144D20 + 4 * byte_20B3F0[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_144D20()
{
  return 0x61446C6C65537075;
}

uint64_t sub_144D4C()
{
  return 0x746144746E657665;
}

uint64_t sub_144D68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_146974(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_144D8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14502C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_144DB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14502C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WriteReviewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  __int128 v35;
  _BYTE v36[32];
  uint64_t v37;
  __int16 v38;
  int v39;
  char v40;
  int v41;
  char v42;
  int v43;
  char v44;
  __int128 v45;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A1378);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_14502C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WriteReviewEvent.Model.CodingKeys, &type metadata for WriteReviewEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v35 = *(_QWORD *)v4;
  *((_QWORD *)&v35 + 1) = v13;
  v36[0] = v14;
  *(_OWORD *)&v36[8] = v15;
  *(_QWORD *)&v36[24] = v16;
  v37 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = *(_DWORD *)(v4 + 73);
  v44 = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v34 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_QWORD *)(v4 + 112);
    v35 = *(_OWORD *)(v4 + 96);
    *(_QWORD *)v36 = v25;
    v34 = 1;
    v26 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v35, &v34, v6, &type metadata for UpSellData, v26);
    v27 = *(_OWORD *)(v4 + 136);
    v35 = *(_OWORD *)(v4 + 120);
    *(_OWORD *)v36 = v27;
    *(_OWORD *)&v36[16] = *(_OWORD *)(v4 + 152);
    v34 = 2;
    v28 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v35, &v34, v6, &type metadata for SeriesData, v28);
    v29 = v4 + *(int *)(type metadata accessor for WriteReviewEvent.Model(0) + 28);
    LOBYTE(v35) = 3;
    v30 = type metadata accessor for EventData(0);
    v31 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v35, v6, v30, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_14502C()
{
  unint64_t result;

  result = qword_2A1380;
  if (!qword_2A1380)
  {
    result = swift_getWitnessTable(byte_20B5E4, &type metadata for WriteReviewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1380);
  }
  return result;
}

void WriteReviewEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[32];
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  int v50;
  char v51;
  int v52;
  char v53;
  __int128 v54;
  char v55;

  v38 = a2;
  v39 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v5 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_71B4(&qword_2A1388);
  v6 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WriteReviewEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v42 = a1;
  sub_7988(a1, v12);
  v14 = sub_14502C();
  v40 = v8;
  v15 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WriteReviewEvent.Model.CodingKeys, &type metadata for WriteReviewEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v42);
  }
  else
  {
    v37 = v9;
    v43 = v3;
    v16 = v39;
    v55 = 0;
    v17 = sub_1779C();
    v18 = v40;
    v19 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for ContentData, &v55, v41, &type metadata for ContentData, v17);
    v20 = *((_QWORD *)&v44 + 1);
    v21 = v45[0];
    v22 = *(_OWORD *)&v45[8];
    v23 = *(_QWORD *)&v45[24];
    v24 = v46;
    v25 = v47;
    v26 = v48;
    v27 = v49;
    v28 = v50;
    v29 = v51;
    v30 = v53;
    *(_QWORD *)v11 = v44;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = v52;
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v54;
    v55 = 1;
    v31 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, &type metadata for UpSellData, &v55, v19, &type metadata for UpSellData, v31);
    v32 = *(_QWORD *)v45;
    *((_OWORD *)v11 + 6) = v44;
    *((_QWORD *)v11 + 14) = v32;
    v55 = 2;
    v33 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, &type metadata for SeriesData, &v55, v19, &type metadata for SeriesData, v33);
    v34 = *(_OWORD *)v45;
    *(_OWORD *)(v11 + 120) = v44;
    *(_OWORD *)(v11 + 136) = v34;
    *(_OWORD *)(v11 + 152) = *(_OWORD *)&v45[16];
    LOBYTE(v44) = 3;
    v35 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v44, v19, v16, v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v41);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v43 + 32))(*(int *)(v37 + 28), v5, v16);
    sub_145448(0, v38);
    sub_7DAC(v42);
    sub_14548C(0);
  }
}

uint64_t sub_145448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WriteReviewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_14548C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WriteReviewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1454C8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  WriteReviewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1454DC(_QWORD *a1)
{
  return WriteReviewEvent.Model.encode(to:)(a1);
}

uint64_t sub_1454F0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A10, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1348, (uint64_t)sub_1447C8, a1);
}

uint64_t sub_145514@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A18, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1360, (uint64_t)sub_144808, a1);
}

uint64_t sub_145538@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for WriteReviewEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for WriteReviewEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for WriteReviewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for WriteReviewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for WriteReviewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for WriteReviewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for WriteReviewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_145BB4);
}

uint64_t sub_145BB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296F68);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296310);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WriteReviewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_145C8C);
}

uint64_t sub_145C8C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296F68);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296310);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_145D60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for WriteReviewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
    v12 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v12;
    v13 = a2[20];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v13 == 1)
    {
      v14 = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(a1 + 136) = v14;
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
    }
    else
    {
      *(_QWORD *)(a1 + 120) = a2[15];
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *(_QWORD *)(a1 + 136) = a2[17];
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_WORD *)(a1 + 145) = *(_WORD *)((char *)a2 + 145);
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v13;
      swift_bridgeObjectRetain(v13);
    }
    v16 = *(int *)(a3 + 28);
    v17 = a1 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for WriteReviewEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[14]);
  v4 = a1[20];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for WriteReviewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v12 == 1)
  {
    v13 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v13;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  }
  else
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v12;
    swift_bridgeObjectRetain(v12);
  }
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for WriteReviewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  uint64_t v44;
  BAEventReporter *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  __int128 *v53;
  __int128 *v54;
  BAEventReporter *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v44 = *(_QWORD *)(a2 + 112);
  v45 = *(BAEventReporter **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
  v53 = (__int128 *)(a1 + 120);
  v54 = (__int128 *)(a2 + 120);
  v55 = *(BAEventReporter **)(a1 + 160);
  v56 = *(_QWORD *)(a2 + 160);
  if (v55 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v56 == 1)
    {
      v57 = *v54;
      v58 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v58;
      *v53 = v57;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
      *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v61 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v61;
      swift_bridgeObjectRetain(v61);
    }
  }
  else if (v56 == 1)
  {
    sub_19008(a1 + 120);
    v60 = *(_OWORD *)(a2 + 136);
    v59 = *(_OWORD *)(a2 + 152);
    *v53 = *v54;
    *(_OWORD *)(a1 + 136) = v60;
    *(_OWORD *)(a1 + 152) = v59;
  }
  else
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
    *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v62 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRelease(v55, v63, v64, v65, v66, v67, v68, v69);
  }
  v70 = *(int *)(a3 + 28);
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 24))(v71, v72, v73);
  return a1;
}

uint64_t initializeWithTake for WriteReviewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 120);
  v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v8;
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 120) = v7;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for WriteReviewEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  int64_t v53;
  int64_t v54;
  void *v55;
  BAEventReporter *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v40 = *(_QWORD *)(a2 + 112);
  v41 = *(BAEventReporter **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  v56 = *(BAEventReporter **)(a1 + 160);
  if (v56 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v57 = *(_QWORD *)(a2 + 160);
    if (v57 != 1)
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v57;
      swift_bridgeObjectRelease(v56, v49, v50, v51, v52, v53, v54, v55);
      goto LABEL_6;
    }
    sub_19008(a1 + 120);
  }
  v58 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v58;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
LABEL_6:
  v59 = a3[7];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v60, v61, v62);
  return a1;
}

uint64_t getEnumTagSinglePayload for WriteReviewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14664C);
}

uint64_t sub_14664C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WriteReviewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1466D4);
}

uint64_t sub_1466D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_146748(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_20B4F0;
  v4[2] = &unk_20B508;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WriteReviewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_14681C + 4 * byte_20B3F9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_146850 + 4 * byte_20B3F4[v4]))();
}

uint64_t sub_146850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_146858(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x146860);
  return result;
}

uint64_t sub_14686C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x146874);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_146878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_146880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WriteReviewEvent.Model.CodingKeys()
{
  return &type metadata for WriteReviewEvent.Model.CodingKeys;
}

unint64_t sub_1468A0()
{
  unint64_t result;

  result = qword_2A14C0;
  if (!qword_2A14C0)
  {
    result = swift_getWitnessTable(byte_20B5BC, &type metadata for WriteReviewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A14C0);
  }
  return result;
}

unint64_t sub_1468E8()
{
  unint64_t result;

  result = qword_2A14C8;
  if (!qword_2A14C8)
  {
    result = swift_getWitnessTable("MB\a", &type metadata for WriteReviewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A14C8);
  }
  return result;
}

unint64_t sub_146930()
{
  unint64_t result;

  result = qword_2A14D0;
  if (!qword_2A14D0)
  {
    result = swift_getWitnessTable("5B\a", &type metadata for WriteReviewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A14D0);
  }
  return result;
}

uint64_t sub_146974(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::EndReasonType_optional __swiftcall EndReasonType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::EndReasonType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2682F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t EndReasonType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_146BF0 + 4 * byte_20B634[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_146BF0()
{
  return 0x756F72676B636162;
}

unint64_t sub_146C10()
{
  return 0xD000000000000027;
}

uint64_t sub_146C2C()
{
  return 0x696669746E656469;
}

void sub_146C50(char *a1)
{
  sub_286EC(*a1);
}

unint64_t sub_146C60()
{
  unint64_t result;

  result = qword_2A14D8;
  if (!qword_2A14D8)
  {
    result = swift_getWitnessTable("MB\a", &type metadata for EndReasonType);
    atomic_store(result, (unint64_t *)&qword_2A14D8);
  }
  return result;
}

void sub_146CA4()
{
  char *v0;

  sub_195854(*v0);
}

void sub_146CAC()
{
  __asm { BR              X10 }
}

uint64_t sub_146CE8(uint64_t a1)
{
  String.hash(into:)(a1, 0x756F72676B636162, 0xEC0000006465646ELL);
  return swift_bridgeObjectRelease(0xEC0000006465646ELL);
}

void sub_146D5C(uint64_t a1)
{
  char *v1;

  sub_1D3598(a1, *v1);
}

BookAnalytics::EndReasonType_optional sub_146D64(Swift::String *a1)
{
  return EndReasonType.init(rawValue:)(*a1);
}

uint64_t sub_146D70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_146DA0 + 4 * byte_20B63C[*v0]))();
}

void sub_146DA0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "backgrounded");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_146DC4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000027;
  a1[1] = 0x800000000021E1D0;
}

void sub_146DE4(_QWORD *a1@<X8>)
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEF74657365527265;
}

uint64_t sub_146E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_146F80();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_146E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_146F80();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for EndReasonType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_146F00 + 4 * byte_20B645[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_146F34 + 4 * byte_20B640[v4]))();
}

uint64_t sub_146F34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_146F3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x146F44);
  return result;
}

uint64_t sub_146F50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x146F58);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_146F5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_146F64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EndReasonType()
{
  return &type metadata for EndReasonType;
}

unint64_t sub_146F80()
{
  unint64_t result;

  result = qword_2A14E0;
  if (!qword_2A14E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EndReasonType, &type metadata for EndReasonType);
    atomic_store(result, (unint64_t *)&qword_2A14E0);
  }
  return result;
}

void __swiftcall WidgetData.init(widgetFamily:displayMode:isContentExposed:isStreakExposed:)(BookAnalytics::WidgetData *__return_ptr retstr, Swift::String widgetFamily, Swift::String displayMode, Swift::Bool isContentExposed, Swift::Bool isStreakExposed)
{
  retstr->widgetFamily = widgetFamily;
  retstr->displayMode = displayMode;
  retstr->isContentExposed = isContentExposed;
  retstr->isStreakExposed = isStreakExposed;
}

uint64_t SkipData.isBackgrounded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SkipData.isBackgrounded.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t WidgetData.isStreakExposed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t WidgetData.isStreakExposed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*WidgetData.isStreakExposed.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t sub_14700C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_147044 + 4 * byte_20B760[*v0]))(0x6146746567646977, 0xEC000000796C696DLL);
}

uint64_t sub_147044()
{
  return 0x4D79616C70736964;
}

unint64_t sub_147064()
{
  return 0xD000000000000010;
}

uint64_t sub_147080()
{
  return 0x6B61657274537369;
}

uint64_t sub_1470A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_147A34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1470C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1475F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1470F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1475F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WidgetData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = sub_71B4(&qword_2A14E8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v18 = v1[3];
  v19 = v9;
  v21 = *((unsigned __int8 *)v1 + 32);
  HIDWORD(v17) = *((unsigned __int8 *)v1 + 33);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_1475F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetData.CodingKeys, &type metadata for WidgetData.CodingKeys, v12, v10, v11);
  v25 = 0;
  v13 = v20;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v25, v3);
  if (!v13)
  {
    v14 = v21;
    v15 = HIDWORD(v17);
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v18, &v24, v3);
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v23, v3);
    v22 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v22, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void WidgetData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  char v26;
  BAEventReporter *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  BAEventReporter *v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v5 = sub_71B4(&qword_2A14F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1475F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetData.CodingKeys, &type metadata for WidgetData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v43 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5);
    v14 = v13;
    v38 = v12;
    v42 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v5);
    v17 = v16;
    v36 = v15;
    v41 = 2;
    swift_bridgeObjectRetain(v16);
    v37 = v17;
    v39 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v40 = 3;
    LOBYTE(v17) = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
    v25 = v39 & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v26 = v17 & 1;
    v27 = v37;
    *(_QWORD *)a2 = v38;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v36;
    *(_QWORD *)(a2 + 24) = v27;
    *(_BYTE *)(a2 + 32) = v25;
    *(_BYTE *)(a2 + 33) = v26;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
    swift_bridgeObjectRelease(v14, v18, v19, v20, v21, v22, v23, v24);
  }
}

void sub_1474FC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  WidgetData.init(from:)(a1, a2);
}

uint64_t sub_147510(_QWORD *a1)
{
  return WidgetData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics10WidgetDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  uint64_t result;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *((unsigned __int8 *)a1 + 33);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(unsigned __int8 *)(a2 + 32);
  v14 = *(unsigned __int8 *)(a2 + 33);
  if (v4 == *(_QWORD *)a2 && v5 == v10
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v10, 0), result = 0, (v15 & 1) != 0))
  {
    if (v6 == v11 && v7 == v12)
    {
      if (v8 != v13)
        return 0;
      return v9 ^ v14 ^ 1u;
    }
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v11, v12, 0);
    result = 0;
    if ((v17 & 1) != 0 && ((v8 ^ v13) & 1) == 0)
      return v9 ^ v14 ^ 1u;
  }
  return result;
}

unint64_t sub_1475F8()
{
  unint64_t result;

  result = qword_2A14F0;
  if (!qword_2A14F0)
  {
    result = swift_getWitnessTable(byte_20B908, &type metadata for WidgetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A14F0);
  }
  return result;
}

unint64_t sub_147640()
{
  unint64_t result;

  result = qword_2A1500;
  if (!qword_2A1500)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WidgetData, &type metadata for WidgetData);
    atomic_store(result, (unint64_t *)&qword_2A1500);
  }
  return result;
}

unint64_t sub_147688()
{
  unint64_t result;

  result = qword_2A1508;
  if (!qword_2A1508)
  {
    result = swift_getWitnessTable("qB\a", &type metadata for WidgetData);
    atomic_store(result, (unint64_t *)&qword_2A1508);
  }
  return result;
}

uint64_t initializeWithCopy for WidgetData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for WidgetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 initializeWithTake for WidgetData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WidgetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetData()
{
  return &type metadata for WidgetData;
}

uint64_t storeEnumTagSinglePayload for WidgetData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1478DC + 4 * byte_20B769[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_147910 + 4 * byte_20B764[v4]))();
}

uint64_t sub_147910(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_147918(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x147920);
  return result;
}

uint64_t sub_14792C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x147934);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_147938(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_147940(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetData.CodingKeys()
{
  return &type metadata for WidgetData.CodingKeys;
}

unint64_t sub_147960()
{
  unint64_t result;

  result = qword_2A1510;
  if (!qword_2A1510)
  {
    result = swift_getWitnessTable("qA\a", &type metadata for WidgetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1510);
  }
  return result;
}

unint64_t sub_1479A8()
{
  unint64_t result;

  result = qword_2A1518;
  if (!qword_2A1518)
  {
    result = swift_getWitnessTable("1B\a", &type metadata for WidgetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1518);
  }
  return result;
}

unint64_t sub_1479F0()
{
  unint64_t result;

  result = qword_2A1520;
  if (!qword_2A1520)
  {
    result = swift_getWitnessTable(byte_20B878, &type metadata for WidgetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1520);
  }
  return result;
}

uint64_t sub_147A34(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6146746567646977 && a2 == 0xEC000000796C696DLL)
  {
    v5 = 0xEC000000796C696DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6146746567646977, 0xEC000000796C696DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4D79616C70736964 && a2 == 0xEB0000000065646FLL)
  {
    v7 = 0xEB0000000065646FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4D79616C70736964, 0xEB0000000065646FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x8000000000220C00;
    if (a2 == 0x8000000000220C00)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220C00, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6B61657274537369 && a2 == 0xEF6465736F707845)
  {
    swift_bridgeObjectRelease(0xEF6465736F707845);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B61657274537369, 0xEF6465736F707845, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_147C38()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x7544657A6F6F6E73;
}

uint64_t sub_147C84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1481F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_147CA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_147FF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_147CD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_147FF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AudioSnoozeData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_2A1528);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_147FF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AudioSnoozeData.CodingKeys, &type metadata for AudioSnoozeData.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

void AudioSnoozeData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;

  v5 = sub_71B4(&qword_2A1538);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_147FF4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AudioSnoozeData.CodingKeys, &type metadata for AudioSnoozeData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v36 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
    v14 = v13;
    v35 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v17 = v16;
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19 = v15;
    v18(v8, v5);
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    a2[2] = v19;
    a2[3] = (uint64_t)v17;
    swift_bridgeObjectRetain(v17);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v17, v20, v21, v22, v23, v24, v25, v26);
    swift_bridgeObjectRelease(v14, v27, v28, v29, v30, v31, v32, v33);
  }
}

void sub_147FCC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  AudioSnoozeData.init(from:)(a1, a2);
}

uint64_t sub_147FE0(_QWORD *a1)
{
  return AudioSnoozeData.encode(to:)(a1);
}

unint64_t sub_147FF4()
{
  unint64_t result;

  result = qword_2A1530;
  if (!qword_2A1530)
  {
    result = swift_getWitnessTable(byte_20BAFC, &type metadata for AudioSnoozeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1530);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioSnoozeData()
{
  return &type metadata for AudioSnoozeData;
}

uint64_t storeEnumTagSinglePayload for AudioSnoozeData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_14809C + 4 * byte_20B95D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1480D0 + 4 * byte_20B958[v4]))();
}

uint64_t sub_1480D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1480D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1480E0);
  return result;
}

uint64_t sub_1480EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1480F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1480F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_148100(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioSnoozeData.CodingKeys()
{
  return &type metadata for AudioSnoozeData.CodingKeys;
}

unint64_t sub_148120()
{
  unint64_t result;

  result = qword_2A1540;
  if (!qword_2A1540)
  {
    result = swift_getWitnessTable("eA\a", &type metadata for AudioSnoozeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1540);
  }
  return result;
}

unint64_t sub_148168()
{
  unint64_t result;

  result = qword_2A1548;
  if (!qword_2A1548)
  {
    result = swift_getWitnessTable("%B\a", &type metadata for AudioSnoozeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1548);
  }
  return result;
}

unint64_t sub_1481B0()
{
  unint64_t result;

  result = qword_2A1550;
  if (!qword_2A1550)
  {
    result = swift_getWitnessTable("\rB\a", &type metadata for AudioSnoozeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1550);
  }
  return result;
}

uint64_t sub_1481F4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7544657A6F6F6E73 && a2 == 0xEE006E6F69746172)
  {
    v5 = 0xEE006E6F69746172;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7544657A6F6F6E73, 0xEE006E6F69746172, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000000222140)
  {
    swift_bridgeObjectRelease(0x8000000000222140);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000222140, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_148304(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1558, &enum case for SessionGroup.default(_:));
}

uint64_t static ReportAnIssueCompletionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A20, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1558, a1);
}

uint64_t sub_148344(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A1570, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReportAnIssueCompletionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A28, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1570, a1);
}

uint64_t ReportAnIssueCompletionEvent.optionListData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueCompletionEvent(0) + 20);
  v4 = sub_71B4(&qword_2A1588);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReportAnIssueCompletionEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A1610, (uint64_t)&nominal type descriptor for ReportAnIssueCompletionEvent);
}

uint64_t ReportAnIssueCompletionEvent.optionListData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueCompletionEvent(0) + 20);
  v4 = sub_71B4(&qword_2A1588);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReportAnIssueCompletionEvent.optionListData.modify())()
{
  type metadata accessor for ReportAnIssueCompletionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReportAnIssueCompletionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueCompletionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReportAnIssueCompletionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueCompletionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReportAnIssueCompletionEvent.eventData.modify())()
{
  type metadata accessor for ReportAnIssueCompletionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReportAnIssueCompletionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ReportAnIssueCompletionEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_2A1588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t ReportAnIssueCompletionEvent.Model.optionListData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 112);
  v3 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t ReportAnIssueCompletionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueCompletionEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReportAnIssueCompletionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A16B0, (uint64_t)&nominal type descriptor for ReportAnIssueCompletionEvent.Model);
}

uint64_t ReportAnIssueCompletionEvent.Model.init(contentData:optionListData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  v16 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  v17 = *a2;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 96) = v17;
  *(_QWORD *)(a4 + 112) = v16;
  v18 = a4 + *(int *)(type metadata accessor for ReportAnIssueCompletionEvent.Model(0) + 24);
  v19 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
}

uint64_t sub_148714()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x694C6E6F6974706FLL;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_148788@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_149F64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1487AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_148A00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1487D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_148A00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReportAnIssueCompletionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  char v40;
  int v41;
  char v42;
  int v43;
  char v44;
  __int128 v45;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_2A1590);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_148A00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys, &type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v33 = *(_QWORD *)v4;
  *((_QWORD *)&v33 + 1) = v13;
  LOBYTE(v34) = v14;
  v35 = v15;
  v36 = v16;
  v37 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = *(_DWORD *)(v4 + 73);
  v44 = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v32 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v32, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_QWORD *)(v4 + 112);
    v33 = *(_OWORD *)(v4 + 96);
    v34 = v25;
    v32 = 1;
    v26 = sub_148A44();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v32, v6, &type metadata for OptionListData, v26);
    v27 = v4 + *(int *)(type metadata accessor for ReportAnIssueCompletionEvent.Model(0) + 24);
    LOBYTE(v33) = 2;
    v28 = type metadata accessor for EventData(0);
    v29 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v27, &v33, v6, v28, v29);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_148A00()
{
  unint64_t result;

  result = qword_2A1598;
  if (!qword_2A1598)
  {
    result = swift_getWitnessTable(byte_20BD2C, &type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1598);
  }
  return result;
}

unint64_t sub_148A44()
{
  unint64_t result;

  result = qword_2A15A0;
  if (!qword_2A15A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OptionListData, &type metadata for OptionListData);
    atomic_store(result, (unint64_t *)&qword_2A15A0);
  }
  return result;
}

void ReportAnIssueCompletionEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  char v50;
  int v51;
  char v52;
  int v53;
  char v54;
  __int128 v55;
  char v56;

  v37 = a2;
  v38 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_71B4(&qword_2A15A8);
  v6 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReportAnIssueCompletionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v41 = a1;
  sub_7988(a1, v12);
  v14 = sub_148A00();
  v39 = v8;
  v15 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys, &type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v41);
  }
  else
  {
    v36 = v9;
    v42 = v5;
    v16 = v38;
    v56 = 0;
    v17 = sub_1779C();
    v19 = v39;
    v18 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for ContentData, &v56, v40, &type metadata for ContentData, v17);
    v20 = *((_QWORD *)&v43 + 1);
    v21 = v44;
    v22 = v45;
    v23 = v46;
    v24 = v47;
    v25 = v48;
    v26 = v49;
    v27 = v50;
    v28 = v51;
    v29 = v52;
    v30 = v54;
    *(_QWORD *)v11 = v43;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = v53;
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v55;
    v56 = 1;
    v31 = sub_148DE8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for OptionListData, &v56, v18, &type metadata for OptionListData, v31);
    v32 = v44;
    *((_OWORD *)v11 + 6) = v43;
    *((_QWORD *)v11 + 14) = v32;
    LOBYTE(v43) = 2;
    v33 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v34 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v16, &v43, v18, v16, v33);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v36 + 24)], v34, v16);
    sub_148E2C((uint64_t)v11, v37);
    sub_7DAC(v41);
    sub_148E70((uint64_t)v11);
  }
}

unint64_t sub_148DE8()
{
  unint64_t result;

  result = qword_2A15B0;
  if (!qword_2A15B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OptionListData, &type metadata for OptionListData);
    atomic_store(result, (unint64_t *)&qword_2A15B0);
  }
  return result;
}

uint64_t sub_148E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReportAnIssueCompletionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_148E70(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReportAnIssueCompletionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_148EAC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReportAnIssueCompletionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_148EC0(_QWORD *a1)
{
  return ReportAnIssueCompletionEvent.Model.encode(to:)(a1);
}

uint64_t sub_148ED4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A20, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1558, (uint64_t)sub_148304, a1);
}

uint64_t sub_148EF8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A28, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1570, (uint64_t)sub_148344, a1);
}

uint64_t sub_148F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_2A1588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReportAnIssueCompletionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2A1588);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ReportAnIssueCompletionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_2A1588);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ReportAnIssueCompletionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ReportAnIssueCompletionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ReportAnIssueCompletionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ReportAnIssueCompletionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2A1588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReportAnIssueCompletionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_149440);
}

uint64_t sub_149440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2A1588);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueCompletionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1494F0);
}

uint64_t sub_1494F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2A1588);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_14959C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2A1620, (uint64_t (*)(void))sub_148DE8, (uint64_t (*)(void))sub_148A44, (uint64_t)&type metadata for OptionListData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReportAnIssueCompletionEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v17 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v17 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v17);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    v11 = a2[12];
    v10 = a2[13];
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v10;
    v12 = a2[14];
    v13 = *(int *)(a3 + 24);
    v19 = a1 + v13;
    v14 = (uint64_t)a2 + v13;
    *(_QWORD *)(a1 + 112) = v12;
    v15 = type metadata accessor for EventData(0);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    v16(v19, v14, v15);
  }
  return v3;
}

uint64_t destroy for ReportAnIssueCompletionEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ReportAnIssueCompletionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v10 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v9;
  v11 = *(_QWORD *)(a2 + 112);
  v12 = *(int *)(a3 + 24);
  v17 = a1 + v12;
  v13 = a2 + v12;
  *(_QWORD *)(a1 + 112) = v11;
  v14 = type metadata accessor for EventData(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v15(v17, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ReportAnIssueCompletionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

uint64_t initializeWithTake for ReportAnIssueCompletionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v7 = *(int *)(a3 + 24);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

uint64_t assignWithTake for ReportAnIssueCompletionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReportAnIssueCompletionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_149C48);
}

uint64_t sub_149C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueCompletionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_149CD0);
}

uint64_t sub_149CD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_149D44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_20BC50;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueCompletionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_149E0C + 4 * byte_20BB55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_149E40 + 4 * byte_20BB50[v4]))();
}

uint64_t sub_149E40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_149E48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x149E50);
  return result;
}

uint64_t sub_149E5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x149E64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_149E68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_149E70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReportAnIssueCompletionEvent.Model.CodingKeys()
{
  return &type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys;
}

unint64_t sub_149E90()
{
  unint64_t result;

  result = qword_2A16F0;
  if (!qword_2A16F0)
  {
    result = swift_getWitnessTable(byte_20BD04, &type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A16F0);
  }
  return result;
}

unint64_t sub_149ED8()
{
  unint64_t result;

  result = qword_2A16F8;
  if (!qword_2A16F8)
  {
    result = swift_getWitnessTable("EA\a", &type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A16F8);
  }
  return result;
}

unint64_t sub_149F20()
{
  unint64_t result;

  result = qword_2A1700;
  if (!qword_2A1700)
  {
    result = swift_getWitnessTable("-A\a", &type metadata for ReportAnIssueCompletionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1700);
  }
  return result;
}

uint64_t sub_149F64(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x694C6E6F6974706FLL && a2 == 0xEE00617461447473)
  {
    v7 = 0xEE00617461447473;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x694C6E6F6974706FLL, 0xEE00617461447473, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

float ListeningSessionData.playbackSpeed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void ListeningSessionData.playbackSpeed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t ListeningSessionData.isPreview.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ListeningSessionData.isPreview.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t ListeningSessionData.isStreaming.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t ListeningSessionData.isStreaming.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

uint64_t (*ListeningSessionData.isStreaming.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

unint64_t ListeningSessionData.remainingBufferTime.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

uint64_t ListeningSessionData.remainingBufferTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 44) = result;
  *(_BYTE *)(v1 + 48) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ListeningSessionData.remainingBufferTime.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ListeningSessionData.isBackgrounded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ListeningSessionData.isBackgrounded.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*ListeningSessionData.isBackgrounded.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

unint64_t ListeningSessionData.percentCompletionEnd.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 52) | ((unint64_t)*(unsigned __int8 *)(v0 + 56) << 32);
}

uint64_t ListeningSessionData.percentCompletionEnd.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 52) = result;
  *(_BYTE *)(v1 + 56) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ListeningSessionData.percentCompletionEnd.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ListeningSessionData.isSnoozeTimeReached.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t ListeningSessionData.isSnoozeTimeReached.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = result;
  return result;
}

void __swiftcall ListeningSessionData.init(startTime:endTime:playbackSpeed:listeningID:isPreview:isStreaming:remainingBufferTime:isBackgrounded:percentCompletionEnd:isSnoozeTimeReached:)(BookAnalytics::ListeningSessionData *__return_ptr retstr, Swift::Float_optional *startTime, Swift::Float_optional *endTime, Swift::Float playbackSpeed, Swift::String_optional listeningID, Swift::Bool isPreview, Swift::Bool isStreaming, Swift::Int32_optional remainingBufferTime, Swift::Bool isBackgrounded, Swift::Float_optional *percentCompletionEnd, Swift::Bool_optional isSnoozeTimeReached)
{
  LODWORD(retstr->startTime.value) = (_DWORD)startTime;
  retstr->startTime.is_nil = BYTE4(startTime) & 1;
  LODWORD(retstr->endTime.value) = (_DWORD)endTime;
  retstr->endTime.is_nil = BYTE4(endTime) & 1;
  retstr->playbackSpeed = playbackSpeed;
  retstr->listeningID = listeningID;
  retstr->isPreview = isPreview;
  retstr->isStreaming = isStreaming;
  retstr->remainingBufferTime.value = remainingBufferTime.value;
  retstr->remainingBufferTime.is_nil = remainingBufferTime.is_nil;
  retstr->isBackgrounded = isBackgrounded;
  LODWORD(retstr->percentCompletionEnd.value) = (_DWORD)percentCompletionEnd;
  retstr->percentCompletionEnd.is_nil = BYTE4(percentCompletionEnd) & 1;
  retstr->isSnoozeTimeReached = isSnoozeTimeReached;
}

uint64_t sub_14A248(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14A280 + 4 * byte_20BD80[a1]))(0x6D69547472617473, 0xE900000000000065);
}

uint64_t sub_14A280()
{
  return 0x656D6954646E65;
}

uint64_t sub_14A298()
{
  return 0x6B63616279616C70;
}

uint64_t sub_14A2BC()
{
  return 0x6E696E657473696CLL;
}

uint64_t sub_14A2DC()
{
  return 0x6569766572507369;
}

uint64_t sub_14A2F4()
{
  return 0x6D61657274537369;
}

unint64_t sub_14A314()
{
  return 0xD000000000000013;
}

uint64_t sub_14A380()
{
  unsigned __int8 *v0;

  return sub_14A248(*v0);
}

uint64_t sub_14A388@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14B0F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_14A3AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14AC44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14A3D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14AC44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListeningSessionData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE v33[3];
  char v34;
  _BYTE v35[4];
  char v36;
  char v37;
  char v38;
  char v39;
  _BYTE v40[4];
  _BYTE v41[4];
  char v42;

  v4 = sub_71B4(&qword_2A1708);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = *v1;
  v8 = *((_BYTE *)v1 + 4);
  v32 = v1[2];
  v31 = *((unsigned __int8 *)v1 + 12);
  v9 = *((float *)v1 + 4);
  v10 = *((_QWORD *)v1 + 3);
  v29 = *((_QWORD *)v1 + 4);
  v30 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 40);
  v27 = *((unsigned __int8 *)v1 + 41);
  v28 = v10;
  v26 = v1[11];
  LODWORD(v10) = *((unsigned __int8 *)v1 + 48);
  v24 = *((unsigned __int8 *)v1 + 49);
  v25 = v10;
  v23 = v1[13];
  LODWORD(v10) = *((unsigned __int8 *)v1 + 56);
  v21 = *((unsigned __int8 *)v1 + 57);
  v22 = v10;
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1;
  v14 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_7988(v13, v11);
  v15 = sub_14AC44();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ListeningSessionData.CodingKeys, &type metadata for ListeningSessionData.CodingKeys, v15, v11, v12);
  v42 = 0;
  v41[1] = v8;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7 | ((unint64_t)v8 << 32), &v42, v4);
  if (!v2)
  {
    v17 = v29;
    v16 = v30;
    v19 = v27;
    v18 = v28;
    v41[0] = 1;
    v40[1] = v31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32 | ((unint64_t)v31 << 32), v41, v4);
    v40[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v40, v4, v9);
    v39 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v39, v4);
    v38 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v38, v4);
    v37 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v37, v4);
    v36 = 6;
    v35[1] = v25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26 | ((unint64_t)v25 << 32), &v36, v4);
    v35[0] = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v35, v4);
    v34 = 8;
    v33[1] = v22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23 | ((unint64_t)v22 << 32), &v34, v4);
    v33[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v33, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

void ListeningSessionData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v5 = sub_71B4(&qword_2A1718);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_14AC44();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListeningSessionData.CodingKeys, &type metadata for ListeningSessionData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v24 = 0;
  }
  else
  {
    v48 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    v47 = 1;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
    v46 = 2;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
    v38 = v13;
    v45 = 3;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
    v24 = v23;
    v37 = v15;
    v44 = 4;
    swift_bridgeObjectRetain(v23);
    v36 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
    v43 = 5;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5);
    v42 = 6;
    v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
    v41 = 7;
    HIDWORD(v32) = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v40 = 8;
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    v39 = 9;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v26 = v35;
    v27 = v36 & 1;
    *(_DWORD *)a2 = v12;
    *(_BYTE *)(a2 + 4) = BYTE4(v12) & 1;
    v28 = BYTE4(v32) & 1;
    v29 = BYTE4(v38);
    *(_DWORD *)(a2 + 8) = v38;
    *(_BYTE *)(a2 + 12) = v29 & 1;
    *(float *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v37;
    *(_QWORD *)(a2 + 32) = v24;
    *(_BYTE *)(a2 + 40) = v27;
    *(_BYTE *)(a2 + 41) = v26 & 1;
    v30 = BYTE4(v34);
    *(_DWORD *)(a2 + 44) = v34;
    *(_BYTE *)(a2 + 48) = v30 & 1;
    *(_BYTE *)(a2 + 49) = v28;
    v31 = BYTE4(v33);
    *(_DWORD *)(a2 + 52) = v33;
    *(_BYTE *)(a2 + 56) = v31 & 1;
    *(_BYTE *)(a2 + 57) = v25;
  }
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v24, v16, v17, v18, v19, v20, v21, v22);
}

void sub_14AA34(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ListeningSessionData.init(from:)(a1, a2);
}

uint64_t sub_14AA48(_QWORD *a1)
{
  return ListeningSessionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics20ListeningSessionDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  float v12;
  char v13;
  int v14;
  float v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  float v25;
  int v26;
  int v27;
  char v28;
  int v29;
  uint64_t result;
  char v31;
  char v32;
  int v33;
  char v34;
  int v35;
  int v36;

  v3 = *(float *)(a1 + 8);
  v4 = *(float *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 40);
  v8 = *(unsigned __int8 *)(a1 + 41);
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_BYTE *)(a1 + 48);
  v11 = *(unsigned __int8 *)(a1 + 49);
  v12 = *(float *)(a1 + 52);
  v13 = *(_BYTE *)(a1 + 56);
  v14 = *(unsigned __int8 *)(a1 + 57);
  v15 = *(float *)(a2 + 8);
  v16 = *(unsigned __int8 *)(a2 + 12);
  v17 = *(float *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a2 + 32);
  v20 = *(unsigned __int8 *)(a2 + 40);
  v21 = *(unsigned __int8 *)(a2 + 41);
  v22 = *(_DWORD *)(a2 + 44);
  v23 = *(unsigned __int8 *)(a2 + 48);
  v24 = *(unsigned __int8 *)(a2 + 49);
  v25 = *(float *)(a2 + 52);
  v26 = *(unsigned __int8 *)(a2 + 56);
  v27 = *(unsigned __int8 *)(a2 + 57);
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 4))
      return 0;
  }
  else
  {
    if (*(float *)a1 == *(float *)a2)
      v28 = *(_BYTE *)(a2 + 4);
    else
      v28 = 1;
    if ((v28 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    if (v4 == v17)
      v29 = v16;
    else
      v29 = 0;
    if (v29 != 1)
      return 0;
  }
  else
  {
    if ((v16 & 1) != 0)
      return 0;
    result = 0;
    if (v3 != v15 || v4 != v17)
      return result;
  }
  if (v5)
  {
    if (!v19)
      return 0;
    if (v6 != v18 || v5 != v19)
    {
      v33 = v26;
      v34 = v13;
      v35 = v27;
      v36 = v14;
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v18, v19, 0);
      result = 0;
      if ((v31 & 1) == 0)
        return result;
      if (((v7 ^ v20) & 1) != 0)
        return result;
      v27 = v35;
      v14 = v36;
      v26 = v33;
      v13 = v34;
      if (((v8 ^ v21) & 1) != 0)
        return result;
      goto LABEL_28;
    }
  }
  else if (v19)
  {
    return 0;
  }
  result = 0;
  if (v7 == v20 && ((v8 ^ v21) & 1) == 0)
  {
LABEL_28:
    if ((v10 & 1) != 0)
    {
      result = 0;
      if (!v23)
        return result;
LABEL_33:
      if (((v11 ^ v24) & 1) != 0)
        return result;
      if ((v13 & 1) != 0)
      {
        if (!v26)
          return 0;
      }
      else
      {
        if (v12 == v25)
          v32 = v26;
        else
          v32 = 1;
        if ((v32 & 1) != 0)
          return 0;
      }
      if (v14 == 2)
      {
        if (v27 != 2)
          return 0;
      }
      else if (v27 == 2 || ((((v14 & 1) == 0) ^ v27) & 1) == 0)
      {
        return 0;
      }
      return 1;
    }
    if ((v23 & 1) == 0)
    {
      result = 0;
      if (v9 != v22)
        return result;
      goto LABEL_33;
    }
    return 0;
  }
  return result;
}

unint64_t sub_14AC44()
{
  unint64_t result;

  result = qword_2A1710;
  if (!qword_2A1710)
  {
    result = swift_getWitnessTable(byte_20BF58, &type metadata for ListeningSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1710);
  }
  return result;
}

uint64_t destroy for ListeningSessionData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for ListeningSessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ListeningSessionData(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = a2[4];
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  v6 = *((_QWORD *)a2 + 4);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  v8 = a2[11];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_DWORD *)(a1 + 44) = v8;
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  v9 = a2[13];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_DWORD *)(a1 + 52) = v9;
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  return a1;
}

__n128 initializeWithTake for ListeningSessionData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ListeningSessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListeningSessionData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListeningSessionData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListeningSessionData()
{
  return &type metadata for ListeningSessionData;
}

uint64_t storeEnumTagSinglePayload for ListeningSessionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_14AF9C + 4 * byte_20BD8F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_14AFD0 + 4 * byte_20BD8A[v4]))();
}

uint64_t sub_14AFD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14AFD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14AFE0);
  return result;
}

uint64_t sub_14AFEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14AFF4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_14AFF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14B000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListeningSessionData.CodingKeys()
{
  return &type metadata for ListeningSessionData.CodingKeys;
}

unint64_t sub_14B020()
{
  unint64_t result;

  result = qword_2A1720;
  if (!qword_2A1720)
  {
    result = swift_getWitnessTable("q@\a", &type metadata for ListeningSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1720);
  }
  return result;
}

unint64_t sub_14B068()
{
  unint64_t result;

  result = qword_2A1728;
  if (!qword_2A1728)
  {
    result = swift_getWitnessTable("1A\a", &type metadata for ListeningSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1728);
  }
  return result;
}

unint64_t sub_14B0B0()
{
  unint64_t result;

  result = qword_2A1730;
  if (!qword_2A1730)
  {
    result = swift_getWitnessTable(byte_20BEC8, &type metadata for ListeningSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1730);
  }
  return result;
}

uint64_t sub_14B0F4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D69547472617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D6954646E65, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6B63616279616C70 && a2 == 0xED00006465657053)
  {
    v8 = 0xED00006465657053;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B63616279616C70, 0xED00006465657053, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E696E657473696CLL && a2 == 0xEB00000000444967)
  {
    v9 = 0xEB00000000444967;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696E657473696CLL, 0xEB00000000444967, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6569766572507369 && a2 == 0xE900000000000077)
  {
    v10 = 0xE900000000000077;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6569766572507369, 0xE900000000000077, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6D61657274537369 && a2 == 0xEB00000000676E69)
  {
    v11 = 0xEB00000000676E69;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D61657274537369, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD000000000000013)
  {
    v12 = 0x8000000000222160;
    if (a2 == 0x8000000000222160)
      goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000222160, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x72676B6361427369 && a2 == 0xEE006465646E756FLL)
  {
    v13 = 0xEE006465646E756FLL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72676B6361427369, 0xEE006465646E756FLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000000220880)
  {
    v14 = 0x8000000000220880;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000220880, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000000222180)
  {
    swift_bridgeObjectRelease(0x8000000000222180);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000000222180, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t YIRSourceData.totalReadTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t YIRSourceData.totalReadTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t YIRSourceData.longestPageCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t YIRSourceData.longestPageCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t YIRSourceData.finishedSeries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t YIRSourceData.finishedSeries.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t LinkData.previousGenreID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t LinkData.previousGenreID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 80));
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t LinkData.previousCollectionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  return v1;
}

uint64_t LinkData.previousCollectionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 96));
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t YIRSourceData.totalRatedContent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t YIRSourceData.totalRatedContent.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = result;
  *(_BYTE *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*LinkData.previousAuthorID.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YIRSourceData.finishedBooks.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t YIRSourceData.finishedBooks.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = result;
  *(_BYTE *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*LinkData.previousFlowcaseID.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YIRSourceData.longestStreak.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t YIRSourceData.longestStreak.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = result;
  *(_BYTE *)(v2 + 144) = a2 & 1;
  return result;
}

uint64_t (*LinkData.previousBrickID.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YIRSourceData.readingGoalsReachedDays.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

uint64_t YIRSourceData.readingGoalsReachedDays.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = result;
  *(_BYTE *)(v2 + 160) = a2 & 1;
  return result;
}

uint64_t (*YIRSourceData.readingGoalsReachedDays.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t YIRSourceData.avgReadingTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t YIRSourceData.avgReadingTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 168) = result;
  *(_BYTE *)(v2 + 176) = a2 & 1;
  return result;
}

uint64_t (*YIRSourceData.avgReadingTime.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void __swiftcall YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(BookAnalytics::YIRSourceData *__return_ptr retstr, BookAnalytics::FrameName_optional frameName, BookAnalytics::ReaderType_optional readerType, Swift::Int64_optional totalReadTime, Swift::Int64_optional longestPageCount, Swift::Int64_optional longestAudiobook, Swift::Int64_optional finishedSeries, Swift::String_optional mostContentGenre, Swift::String_optional mostContentAuthor, Swift::Int64_optional totalRatedContent, Swift::Int64_optional finishedBooks, Swift::Int64_optional longestStreak, Swift::Int64_optional readingGoalsReachedDays, Swift::Int64_optional avgReadingTime)
{
  BookAnalytics::ReaderType v14;

  v14 = *(_BYTE *)readerType.value;
  retstr->frameName.value = *(_BYTE *)frameName.value;
  retstr->readerType.value = v14;
  retstr->totalReadTime.value = totalReadTime.value;
  retstr->totalReadTime.is_nil = totalReadTime.is_nil;
  retstr->longestPageCount.value = longestPageCount.value;
  retstr->longestPageCount.is_nil = longestPageCount.is_nil;
  retstr->longestAudiobook.value = longestAudiobook.value;
  retstr->longestAudiobook.is_nil = longestAudiobook.is_nil;
  retstr->finishedSeries.value = finishedSeries.value;
  retstr->finishedSeries.is_nil = finishedSeries.is_nil;
  retstr->mostContentGenre = mostContentGenre;
  retstr->mostContentAuthor = mostContentAuthor;
  retstr->totalRatedContent.value = totalRatedContent.value;
  retstr->totalRatedContent.is_nil = totalRatedContent.is_nil;
  retstr->finishedBooks.value = finishedBooks.value;
  retstr->finishedBooks.is_nil = finishedBooks.is_nil;
  retstr->longestStreak.value = longestStreak.value;
  retstr->longestStreak.is_nil = longestStreak.is_nil;
  retstr->readingGoalsReachedDays.value = readingGoalsReachedDays.value;
  retstr->readingGoalsReachedDays.is_nil = readingGoalsReachedDays.is_nil;
  retstr->avgReadingTime.value = avgReadingTime.value;
  retstr->avgReadingTime.is_nil = avgReadingTime.is_nil;
}

uint64_t sub_14B86C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14B8A4 + 4 * byte_20BFA8[a1]))(0x6D614E656D617266, 0xE900000000000065);
}

uint64_t sub_14B8A4()
{
  return 0x7954726564616572;
}

uint64_t sub_14B8C0()
{
  return 0x6165526C61746F74;
}

unint64_t sub_14B8E4()
{
  return 0xD000000000000010;
}

unint64_t sub_14B92C()
{
  return 0xD000000000000011;
}

unint64_t sub_14B944()
{
  return 0xD000000000000011;
}

uint64_t sub_14B980()
{
  return 0x53747365676E6F6CLL;
}

void sub_14B9A4()
{
  JUMPOUT(0x14B9B8);
}

uint64_t sub_14B9C4()
{
  return 0x6964616552677661;
}

uint64_t sub_14B9E8()
{
  unsigned __int8 *v0;

  return sub_14B86C(*v0);
}

uint64_t sub_14B9F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14D744(a1, a2);
  *a3 = result;
  return result;
}

void sub_14BA14(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_14BA20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14CEB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14BA48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14CEB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t YIRSourceData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54[9];
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;

  v3 = sub_71B4(&qword_2A1738);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v46 = v1[1];
  v45 = *((_QWORD *)v1 + 1);
  v44 = v1[16];
  v43 = *((_QWORD *)v1 + 3);
  v42 = v1[32];
  v41 = *((_QWORD *)v1 + 5);
  v8 = v1[48];
  v9 = *((_QWORD *)v1 + 7);
  v39 = v1[64];
  v40 = v8;
  v10 = *((_QWORD *)v1 + 9);
  v37 = *((_QWORD *)v1 + 10);
  v38 = v9;
  v34 = *((_QWORD *)v1 + 11);
  v35 = *((_QWORD *)v1 + 12);
  v36 = v10;
  v32 = *((_QWORD *)v1 + 13);
  v33 = v1[112];
  v30 = *((_QWORD *)v1 + 15);
  v31 = v1[128];
  v28 = *((_QWORD *)v1 + 17);
  v29 = v1[144];
  v26 = *((_QWORD *)v1 + 19);
  v27 = v1[160];
  v11 = *((_QWORD *)v1 + 21);
  v12 = v1[176];
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1;
  v17 = v16;
  sub_7988(v15, v13);
  v18 = sub_14CEB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for YIRSourceData.CodingKeys, &type metadata for YIRSourceData.CodingKeys, v18, v13, v14);
  v62 = v7;
  v61 = 0;
  v19 = sub_14CEF8();
  v20 = v47;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v61, v17, &type metadata for FrameName, v19);
  if (v20)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v17);
  v21 = v44;
  v22 = v45;
  LODWORD(v47) = v12;
  v60 = v46;
  v59 = 1;
  v23 = sub_14CF3C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v60, &v59, v17, &type metadata for ReaderType, v23);
  v58 = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v21, &v58, v17);
  v57 = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v42, &v57, v17);
  v56 = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v41, v40, &v56, v17);
  v55 = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &v55, v17);
  v54[0] = 6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, v54, v17);
  v53 = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v53, v17);
  v52 = 8;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v52, v17);
  v51 = 9;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, &v51, v17);
  v50 = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v50, v17);
  v49 = 11;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v49, v17);
  v48 = 12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v11, v47, &v48, v17);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 8))(0, v17);
}

uint64_t YIRSourceData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  BAEventReporter *v35;
  uint64_t v36;
  BAEventReporter *v37;
  BAEventReporter *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  char v56;
  int v57;
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  BAEventReporter *v66;
  BAEventReporter *v67;
  uint64_t v68;
  uint64_t v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  int64_t v74;
  int64_t v75;
  id v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  int64_t v81;
  int64_t v82;
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  BAEventReporter *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BAEventReporter *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _BYTE v128[7];
  uint64_t v129;
  char v130;
  _BYTE v131[7];
  uint64_t v132;
  char v133;
  _BYTE v134[7];
  uint64_t v135;
  char v136;
  _BYTE v137[7];
  uint64_t v138;
  BAEventReporter *v139;
  uint64_t v140;
  BAEventReporter *v141;
  uint64_t v142;
  char v143;
  _BYTE v144[7];
  uint64_t v145;
  char v146;
  _BYTE v147[7];
  uint64_t v148;
  char v149;
  _BYTE v150[7];
  uint64_t v151;
  char v152;
  _BYTE v153[7];
  uint64_t v154;
  char v155;
  char v156;
  _BYTE v157[7];
  char v158;
  _BYTE v159[7];
  char v160;
  _BYTE v161[7];
  char v162;
  _BYTE v163[7];
  char v164;
  _BYTE v165[7];
  char v166;
  _BYTE v167[7];
  char v168;
  _BYTE v169[7];
  char v170;
  _BYTE v171[7];
  char v172;
  int v173;
  __int16 v174;
  uint64_t v175;

  v103 = sub_71B4(&qword_2A1758);
  v5 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = 1;
  v170 = 1;
  v168 = 1;
  v166 = 1;
  v164 = 1;
  v162 = 1;
  v160 = 1;
  v158 = 1;
  v156 = 1;
  v8 = a1[3];
  v9 = a1[4];
  v105 = a1;
  sub_7988(a1, v8);
  v10 = sub_14CEB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for YIRSourceData.CodingKeys, &type metadata for YIRSourceData.CodingKeys, v10, v8, v9);
  if (v2)
  {
    v175 = v2;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v106 = 0;
    v107 = 0;
    v104 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 16;
    v20 = 6;
    v21 = v105;
  }
  else
  {
    v11 = v5;
    LOBYTE(v112) = 0;
    v12 = sub_14CFB4();
    v13 = v103;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v125, &type metadata for FrameName, &v112, v103, &type metadata for FrameName, v12);
    v102 = v125;
    LOBYTE(v112) = 1;
    v23 = sub_14CFF8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v125, &type metadata for ReaderType, &v112, v13, &type metadata for ReaderType, v23);
    v101 = v125;
    LOBYTE(v125) = 2;
    v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
    v26 = v25;
    v100 = v24;
    v172 = v25 & 1;
    LOBYTE(v125) = 3;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
    v98 = v26;
    v99 = v27;
    v170 = v28 & 1;
    LOBYTE(v125) = 4;
    v29 = v28;
    v97 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
    v96 = v29;
    v168 = v30 & 1;
    LOBYTE(v125) = 5;
    v31 = v30;
    v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
    v94 = v31;
    v166 = v32 & 1;
    LOBYTE(v125) = 6;
    v33 = v32;
    v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
    v92 = v33;
    v93 = v34;
    LOBYTE(v125) = 7;
    v111 = v35;
    swift_bridgeObjectRetain(v35);
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
    v175 = 0;
    v107 = v36;
    LOBYTE(v125) = 8;
    v38 = v37;
    swift_bridgeObjectRetain(v37);
    v39 = v175;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
    v175 = v39;
    v104 = v38;
    if (!v39)
    {
      v106 = v40;
      v56 = v41;
      v164 = v41 & 1;
      LOBYTE(v125) = 9;
      v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v13);
      v91 = v57;
      v175 = 0;
      v162 = v57 & 1;
      LOBYTE(v125) = 10;
      v109 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v103);
      v90 = v58;
      v175 = 0;
      v160 = v58 & 1;
      LOBYTE(v125) = 11;
      v108 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v125, v103);
      v175 = 0;
      v89 = v59 & 1;
      v158 = v59 & 1;
      v124 = 12;
      v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v124, v103);
      v175 = 0;
      v61 = v60;
      v63 = v62;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v103);
      v64 = v63 & 1;
      v156 = v63 & 1;
      v65 = v101;
      LOBYTE(v112) = v102;
      BYTE1(v112) = v101;
      *((_QWORD *)&v112 + 1) = v100;
      LOBYTE(v113) = v98 & 1;
      *((_QWORD *)&v113 + 1) = v99;
      LOBYTE(v114) = v96 & 1;
      *((_QWORD *)&v114 + 1) = v97;
      LOBYTE(v115) = v94 & 1;
      *((_QWORD *)&v115 + 1) = v95;
      LOBYTE(v116) = v92 & 1;
      v66 = v111;
      *((_QWORD *)&v116 + 1) = v93;
      *(_QWORD *)&v117 = v111;
      *((_QWORD *)&v117 + 1) = v107;
      *(_QWORD *)&v118 = v38;
      v67 = v38;
      *((_QWORD *)&v118 + 1) = v106;
      LOBYTE(v119) = v56 & 1;
      v68 = v109;
      *((_QWORD *)&v119 + 1) = v110;
      LOBYTE(v120) = v91 & 1;
      *((_QWORD *)&v120 + 1) = v109;
      LOBYTE(v121) = v90 & 1;
      v69 = v108;
      *((_QWORD *)&v121 + 1) = v108;
      LOBYTE(v122) = v89;
      *((_QWORD *)&v122 + 1) = v61;
      v123 = v64;
      sub_14D03C((uint64_t)&v112);
      swift_bridgeObjectRelease(v66, v70, v71, v72, v73, v74, v75, v76);
      swift_bridgeObjectRelease(v67, v77, v78, v79, v80, v81, v82, v83);
      v84 = v121;
      *(_OWORD *)(a2 + 128) = v120;
      *(_OWORD *)(a2 + 144) = v84;
      *(_OWORD *)(a2 + 160) = v122;
      *(_BYTE *)(a2 + 176) = v123;
      v85 = v117;
      *(_OWORD *)(a2 + 64) = v116;
      *(_OWORD *)(a2 + 80) = v85;
      v86 = v119;
      *(_OWORD *)(a2 + 96) = v118;
      *(_OWORD *)(a2 + 112) = v86;
      v87 = v113;
      *(_OWORD *)a2 = v112;
      *(_OWORD *)(a2 + 16) = v87;
      v88 = v115;
      *(_OWORD *)(a2 + 32) = v114;
      *(_OWORD *)(a2 + 48) = v88;
      sub_7DAC(v105);
      LOBYTE(v125) = v102;
      BYTE1(v125) = v65;
      *(_DWORD *)((char *)&v125 + 2) = v173;
      HIWORD(v125) = v174;
      v126 = v100;
      v127 = v172;
      *(_DWORD *)v128 = *(_DWORD *)v171;
      *(_DWORD *)&v128[3] = *(_DWORD *)&v171[3];
      v129 = v99;
      v130 = v170;
      *(_DWORD *)v131 = *(_DWORD *)v169;
      *(_DWORD *)&v131[3] = *(_DWORD *)&v169[3];
      v132 = v97;
      v133 = v168;
      *(_DWORD *)v134 = *(_DWORD *)v167;
      *(_DWORD *)&v134[3] = *(_DWORD *)&v167[3];
      v135 = v95;
      v136 = v166;
      *(_DWORD *)v137 = *(_DWORD *)v165;
      *(_DWORD *)&v137[3] = *(_DWORD *)&v165[3];
      v138 = v93;
      v139 = v66;
      v140 = v107;
      v141 = v67;
      v142 = v106;
      v143 = v164;
      *(_DWORD *)&v144[3] = *(_DWORD *)&v163[3];
      *(_DWORD *)v144 = *(_DWORD *)v163;
      v145 = v110;
      v146 = v162;
      *(_DWORD *)&v147[3] = *(_DWORD *)&v161[3];
      *(_DWORD *)v147 = *(_DWORD *)v161;
      v148 = v68;
      v149 = v160;
      *(_DWORD *)v150 = *(_DWORD *)v159;
      *(_DWORD *)&v150[3] = *(_DWORD *)&v159[3];
      v151 = v69;
      v152 = v158;
      *(_DWORD *)&v153[3] = *(_DWORD *)&v157[3];
      *(_DWORD *)v153 = *(_DWORD *)v157;
      v154 = v61;
      goto LABEL_5;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v13);
    swift_bridgeObjectRelease(v111, v42, v43, v44, v45, v46, v47, v48);
    swift_bridgeObjectRelease(v38, v49, v50, v51, v52, v53, v54, v55);
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v106 = 0;
    v21 = v105;
    v20 = v101;
    v19 = v102;
    v17 = v99;
    v18 = v100;
    v16 = v97;
    v15 = v95;
    v14 = v93;
  }
  sub_7DAC(v21);
  LOBYTE(v125) = v19;
  BYTE1(v125) = v20;
  *(_DWORD *)((char *)&v125 + 2) = v173;
  HIWORD(v125) = v174;
  v126 = v18;
  v127 = v172;
  *(_DWORD *)v128 = *(_DWORD *)v171;
  *(_DWORD *)&v128[3] = *(_DWORD *)&v171[3];
  v129 = v17;
  v130 = v170;
  *(_DWORD *)v131 = *(_DWORD *)v169;
  *(_DWORD *)&v131[3] = *(_DWORD *)&v169[3];
  v132 = v16;
  v133 = v168;
  *(_DWORD *)v134 = *(_DWORD *)v167;
  *(_DWORD *)&v134[3] = *(_DWORD *)&v167[3];
  v135 = v15;
  v136 = v166;
  *(_DWORD *)v137 = *(_DWORD *)v165;
  *(_DWORD *)&v137[3] = *(_DWORD *)&v165[3];
  v138 = v14;
  v139 = v111;
  v140 = v107;
  v141 = v104;
  v142 = v106;
  v143 = v164;
  *(_DWORD *)&v144[3] = *(_DWORD *)&v163[3];
  *(_DWORD *)v144 = *(_DWORD *)v163;
  v145 = v110;
  v146 = v162;
  *(_DWORD *)&v147[3] = *(_DWORD *)&v161[3];
  *(_DWORD *)v147 = *(_DWORD *)v161;
  v148 = v109;
  v149 = v160;
  *(_DWORD *)v150 = *(_DWORD *)v159;
  *(_DWORD *)&v150[3] = *(_DWORD *)&v159[3];
  v151 = v108;
  v152 = v158;
  *(_DWORD *)&v153[3] = *(_DWORD *)&v157[3];
  *(_DWORD *)v153 = *(_DWORD *)v157;
  v154 = 0;
LABEL_5:
  v155 = v156;
  return sub_14CF80((uint64_t)&v125);
}

uint64_t sub_14C890@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return YIRSourceData.init(from:)(a1, a2);
}

uint64_t sub_14C8A4(_QWORD *a1)
{
  return YIRSourceData.encode(to:)(a1);
}

BOOL _s13BookAnalytics13YIRSourceDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BAEventReporter *v32;
  BAEventReporter *v33;
  BAEventReporter *v34;
  uint64_t v35;
  BAEventReporter *v36;
  char v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  _BOOL8 result;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 v113;
  char v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  char v155;
  int v156;
  char v157;
  int v158;
  int v159;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v154 = *(_QWORD *)(a1 + 8);
  v157 = *(_BYTE *)(a1 + 16);
  v150 = *(_QWORD *)(a1 + 24);
  v155 = *(_BYTE *)(a1 + 32);
  v147 = *(_QWORD *)(a1 + 40);
  v151 = *(_BYTE *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 120);
  v142 = *(_BYTE *)(a1 + 128);
  v143 = *(_BYTE *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(_BYTE *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 152);
  v13 = *(_BYTE *)(a1 + 160);
  v139 = *(_QWORD *)(a1 + 168);
  v14 = *(_BYTE *)(a1 + 176);
  v15 = *a2;
  v16 = a2[1];
  v152 = *((_QWORD *)a2 + 1);
  v156 = a2[16];
  v149 = *((_QWORD *)a2 + 3);
  v153 = a2[32];
  v145 = *((_QWORD *)a2 + 5);
  v148 = a2[48];
  v144 = *((_QWORD *)a2 + 7);
  v146 = a2[64];
  v17 = *((_QWORD *)a2 + 10);
  v19 = *((_QWORD *)a2 + 11);
  v18 = *((_QWORD *)a2 + 12);
  v20 = *((_QWORD *)a2 + 13);
  v21 = a2[112];
  v22 = *((_QWORD *)a2 + 15);
  v23 = a2[128];
  v141 = *((_QWORD *)a2 + 17);
  v24 = a2[144];
  v25 = *((_QWORD *)a2 + 19);
  v140 = a2[160];
  v138 = *((_QWORD *)a2 + 21);
  v26 = a2[176];
  if (*(_BYTE *)a1 == 16)
  {
    v136 = *(_BYTE *)(a1 + 64);
    v137 = *((_QWORD *)a2 + 9);
    if (v15 != 16)
      return 0;
  }
  else
  {
    if (v15 == 16)
      return 0;
    v136 = *(_BYTE *)(a1 + 64);
    v100 = *(_QWORD *)(a1 + 56);
    v101 = *((_QWORD *)a2 + 10);
    v137 = *((_QWORD *)a2 + 9);
    v110 = *(_QWORD *)(a1 + 80);
    v112 = *(_QWORD *)(a1 + 72);
    v120 = *((_QWORD *)a2 + 12);
    v125 = *(_QWORD *)(a1 + 152);
    v128 = *((_QWORD *)a2 + 13);
    v113 = a2[176];
    v115 = a2[112];
    v123 = *((_QWORD *)a2 + 15);
    v102 = *(_QWORD *)(a1 + 96);
    v103 = *(_QWORD *)(a1 + 120);
    v27 = *(_QWORD *)(a1 + 88);
    v28 = a2[144];
    v29 = *((_QWORD *)a2 + 19);
    v30 = *(_QWORD *)(a1 + 104);
    v104 = *(_BYTE *)(a1 + 144);
    v105 = *(_QWORD *)(a1 + 136);
    v107 = *(_BYTE *)(a1 + 160);
    v132 = *(_BYTE *)(a1 + 176);
    v31 = FrameName.rawValue.getter();
    v33 = v32;
    v35 = FrameName.rawValue.getter();
    v36 = v34;
    if (v31 == v35 && v33 == v34)
    {
      swift_bridgeObjectRelease_n(v33, 2);
      v14 = v132;
      v13 = v107;
      v10 = v105;
      v11 = v104;
      v26 = v113;
      v21 = v115;
      v7 = v102;
      v9 = v103;
      v8 = v30;
      v25 = v29;
      v24 = v28;
      v6 = v27;
      v22 = v123;
      v12 = v125;
      v20 = v128;
      v18 = v120;
      v5 = v110;
      v4 = v112;
      v3 = v100;
      v17 = v101;
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v34, 0);
      swift_bridgeObjectRelease(v33, v38, v39, v40, v41, v42, v43, v44);
      swift_bridgeObjectRelease(v36, v45, v46, v47, v48, v49, v50, v51);
      result = 0;
      v14 = v132;
      v13 = v107;
      v10 = v105;
      v11 = v104;
      v26 = v113;
      v21 = v115;
      v7 = v102;
      v9 = v103;
      v8 = v30;
      v25 = v29;
      v24 = v28;
      v6 = v27;
      v22 = v123;
      v12 = v125;
      v20 = v128;
      v18 = v120;
      v5 = v110;
      v4 = v112;
      v3 = v100;
      v17 = v101;
      if ((v37 & 1) == 0)
        return result;
    }
  }
  if (v2 == 6)
  {
    if (v16 != 6)
      return 0;
  }
  else
  {
    if (v16 == 6)
      return 0;
    v53 = v2;
    v124 = v22;
    v126 = v12;
    v54 = v13;
    v55 = v10;
    v133 = v14;
    v56 = v11;
    v114 = v26;
    v116 = v21;
    v111 = v5;
    v57 = v9;
    v118 = v19;
    v121 = v18;
    v58 = v8;
    v106 = v25;
    v108 = v6;
    v59 = v24;
    v60 = v7;
    v129 = v20;
    v61 = v17;
    v62 = v3;
    sub_2A508(v53);
    v3 = v62;
    v17 = v61;
    v26 = v114;
    v21 = v116;
    v12 = v126;
    v20 = v129;
    v7 = v60;
    v25 = v106;
    v6 = v108;
    v24 = v59;
    v22 = v124;
    v8 = v58;
    v19 = v118;
    v18 = v121;
    v9 = v57;
    v5 = v111;
    v11 = v56;
    v14 = v133;
    v10 = v55;
    v13 = v54;
    if ((v63 & 1) == 0)
      return 0;
  }
  if ((v157 & 1) != 0)
  {
    v64 = v137;
    v65 = v136;
    if (!v156)
      return 0;
  }
  else
  {
    v66 = v156;
    if (v154 != v152)
      v66 = 1;
    v64 = v137;
    v65 = v136;
    if ((v66 & 1) != 0)
      return 0;
  }
  if ((v155 & 1) != 0)
  {
    if (!v153)
      return 0;
  }
  else
  {
    v67 = v153;
    if (v150 != v149)
      v67 = 1;
    if ((v67 & 1) != 0)
      return 0;
  }
  if ((v151 & 1) != 0)
  {
    if (!v148)
      return 0;
  }
  else
  {
    v68 = v148;
    if (v147 != v145)
      v68 = 1;
    if ((v68 & 1) != 0)
      return 0;
  }
  if ((v65 & 1) != 0)
  {
    if (!v146)
      return 0;
  }
  else
  {
    v69 = v146;
    if (v3 != v144)
      v69 = 1;
    if ((v69 & 1) != 0)
      return 0;
  }
  if (!v5)
  {
    if (v17)
      return 0;
LABEL_45:
    if (v7)
    {
      if (!v18)
        return 0;
      if (v6 != v19 || v7 != v18)
      {
        v159 = v24;
        v83 = v19;
        v84 = v18;
        v85 = v12;
        v86 = v13;
        v87 = v10;
        v135 = v14;
        v88 = v11;
        v131 = v20;
        v89 = v26;
        v90 = v9;
        v91 = v8;
        v92 = v25;
        v117 = v21;
        v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v83, v84, 0);
        v21 = v117;
        v24 = v159;
        v25 = v92;
        v8 = v91;
        v9 = v90;
        v26 = v89;
        v20 = v131;
        v11 = v88;
        v14 = v135;
        v10 = v87;
        v13 = v86;
        v12 = v85;
        v94 = v93;
        result = 0;
        if ((v94 & 1) == 0)
          return result;
      }
    }
    else if (v18)
    {
      return 0;
    }
    if ((v143 & 1) != 0)
    {
      if (!v21)
        return 0;
    }
    else
    {
      if (v8 == v20)
        v95 = v21;
      else
        v95 = 1;
      if ((v95 & 1) != 0)
        return 0;
    }
    if ((v142 & 1) != 0)
    {
      if (!v23)
        return 0;
    }
    else
    {
      if (v9 == v22)
        v96 = v23;
      else
        v96 = 1;
      if ((v96 & 1) != 0)
        return 0;
    }
    if ((v11 & 1) != 0)
    {
      if (!v24)
        return 0;
    }
    else
    {
      if (v10 == v141)
        v97 = v24;
      else
        v97 = 1;
      if ((v97 & 1) != 0)
        return 0;
    }
    if ((v13 & 1) != 0)
    {
      if (!v140)
        return 0;
    }
    else
    {
      v98 = v140;
      if (v12 != v25)
        v98 = 1;
      if ((v98 & 1) != 0)
        return 0;
    }
    if ((v14 & 1) == 0)
    {
      if (v139 == v138)
        v99 = v26;
      else
        v99 = 1;
      return (v99 & 1) == 0;
    }
    return (v26 & 1) != 0;
  }
  if (!v17)
    return 0;
  if (v4 == v64 && v5 == v17)
    goto LABEL_45;
  v70 = v4;
  v71 = v5;
  v158 = v24;
  v127 = v12;
  v109 = v6;
  v72 = v13;
  v119 = v19;
  v122 = v18;
  v73 = v10;
  v134 = v14;
  v74 = v11;
  v130 = v20;
  v75 = v26;
  v76 = v9;
  v77 = v8;
  v78 = v25;
  v79 = v7;
  v80 = v21;
  v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v64, v17, 0);
  v21 = v80;
  v7 = v79;
  v6 = v109;
  v24 = v158;
  v25 = v78;
  v8 = v77;
  v9 = v76;
  v19 = v119;
  v26 = v75;
  v12 = v127;
  v20 = v130;
  v11 = v74;
  v14 = v134;
  v10 = v73;
  v18 = v122;
  v13 = v72;
  v82 = v81;
  result = 0;
  if ((v82 & 1) != 0)
    goto LABEL_45;
  return result;
}

unint64_t sub_14CEB4()
{
  unint64_t result;

  result = qword_2A1740;
  if (!qword_2A1740)
  {
    result = swift_getWitnessTable(byte_20C180, &type metadata for YIRSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1740);
  }
  return result;
}

unint64_t sub_14CEF8()
{
  unint64_t result;

  result = qword_2A1748;
  if (!qword_2A1748)
  {
    result = swift_getWitnessTable("Ae\a", &type metadata for FrameName);
    atomic_store(result, (unint64_t *)&qword_2A1748);
  }
  return result;
}

unint64_t sub_14CF3C()
{
  unint64_t result;

  result = qword_2A1750;
  if (!qword_2A1750)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReaderType, &type metadata for ReaderType);
    atomic_store(result, (unint64_t *)&qword_2A1750);
  }
  return result;
}

uint64_t sub_14CF80(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_14CFB4()
{
  unint64_t result;

  result = qword_2A1760;
  if (!qword_2A1760)
  {
    result = swift_getWitnessTable("Ye\a", &type metadata for FrameName);
    atomic_store(result, (unint64_t *)&qword_2A1760);
  }
  return result;
}

unint64_t sub_14CFF8()
{
  unint64_t result;

  result = qword_2A1768;
  if (!qword_2A1768)
  {
    result = swift_getWitnessTable("ْ\a", &type metadata for ReaderType);
    atomic_store(result, (unint64_t *)&qword_2A1768);
  }
  return result;
}

uint64_t sub_14D03C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 96));
  swift_bridgeObjectRetain(v2);
  return a1;
}

unint64_t sub_14D074()
{
  unint64_t result;

  result = qword_2A1770;
  if (!qword_2A1770)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for YIRSourceData, &type metadata for YIRSourceData);
    atomic_store(result, (unint64_t *)&qword_2A1770);
  }
  return result;
}

unint64_t sub_14D0BC()
{
  unint64_t result;

  result = qword_2A1778;
  if (!qword_2A1778)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for YIRSourceData, &type metadata for YIRSourceData);
    atomic_store(result, (unint64_t *)&qword_2A1778);
  }
  return result;
}

uint64_t destroy for YIRSourceData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
}

uint64_t initializeWithCopy for YIRSourceData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v3;
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v5 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v5;
  v6 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for YIRSourceData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v13;
  v14 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v14;
  v15 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v15;
  v16 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v16;
  return a1;
}

__n128 initializeWithTake for YIRSourceData(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for YIRSourceData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v8 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for YIRSourceData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 177))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for YIRSourceData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 177) = 0;
    if (a2)
      *(_QWORD *)(result + 80) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for YIRSourceData()
{
  return &type metadata for YIRSourceData;
}

uint64_t getEnumTagSinglePayload for YIRSourceData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for YIRSourceData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_14D5EC + 4 * byte_20BFBA[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_14D620 + 4 * byte_20BFB5[v4]))();
}

uint64_t sub_14D620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14D628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14D630);
  return result;
}

uint64_t sub_14D63C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14D644);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_14D648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14D650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for YIRSourceData.CodingKeys()
{
  return &type metadata for YIRSourceData.CodingKeys;
}

unint64_t sub_14D670()
{
  unint64_t result;

  result = qword_2A1780;
  if (!qword_2A1780)
  {
    result = swift_getWitnessTable("a@\a", &type metadata for YIRSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1780);
  }
  return result;
}

unint64_t sub_14D6B8()
{
  unint64_t result;

  result = qword_2A1788;
  if (!qword_2A1788)
  {
    result = swift_getWitnessTable("!A\a", &type metadata for YIRSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1788);
  }
  return result;
}

unint64_t sub_14D700()
{
  unint64_t result;

  result = qword_2A1790;
  if (!qword_2A1790)
  {
    result = swift_getWitnessTable("\tA\a", &type metadata for YIRSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1790);
  }
  return result;
}

uint64_t sub_14D744(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  if (a1 == 0x6D614E656D617266 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E656D617266, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7954726564616572 && a2 == 0xEA00000000006570)
  {
    v7 = 0xEA00000000006570;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954726564616572, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6165526C61746F74 && a2 == 0xED0000656D695464)
  {
    v8 = 0xED0000656D695464;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6165526C61746F74, 0xED0000656D695464, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000000002221A0;
    if (a2 == 0x80000000002221A0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002221A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x80000000002221C0;
    if (a2 == 0x80000000002221C0)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002221C0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x64656873696E6966 && a2 == 0xEE00736569726553)
  {
    v11 = 0xEE00736569726553;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656873696E6966, 0xEE00736569726553, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x80000000002221E0;
    if (a2 == 0x80000000002221E0)
      goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002221E0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000011)
  {
    v13 = 0x8000000000222200;
    if (a2 == 0x8000000000222200)
      goto LABEL_46;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222200, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_46:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000011)
  {
    v14 = 0x8000000000222220;
    if (a2 == 0x8000000000222220)
      goto LABEL_51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222220, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0x64656873696E6966 && a2 == 0xED0000736B6F6F42)
  {
    v15 = 0xED0000736B6F6F42;
LABEL_57:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656873696E6966, 0xED0000736B6F6F42, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_57;
  }
  if (a1 == 0x53747365676E6F6CLL && a2 == 0xED00006B61657274)
  {
    v16 = 0xED00006B61657274;
LABEL_63:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53747365676E6F6CLL, 0xED00006B61657274, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_63;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000000222240)
  {
    v17 = 0x8000000000222240;
LABEL_69:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000000222240, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_69;
  }
  if (a1 == 0x6964616552677661 && a2 == 0xEE00656D6954676ELL)
  {
    swift_bridgeObjectRelease(0xEE00656D6954676ELL);
    return 12;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6964616552677661, 0xEE00656D6954676ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

void __swiftcall SessionData.init(utcOffset:countryCode:languageCode:iCloudAccountState:iTunesAccountState:startMethod:productType:cellularRadioAccessTechnology:iCloudDriveStatus:notificationOptInStatus:readingGoal:onDevicePersonalization:launchType:isParallel:isMainWindow:isWidgetInstalled:)(BookAnalytics::SessionData *__return_ptr retstr, Swift::Int32 utcOffset, Swift::String countryCode, Swift::String languageCode, Swift::Bool iCloudAccountState, Swift::Bool iTunesAccountState, BookAnalytics::StartMethod startMethod, Swift::String productType, BookAnalytics::CellularRadioAccessTechnology cellularRadioAccessTechnology, BookAnalytics::ICloudDriveStatus iCloudDriveStatus, BookAnalytics::FeatureEnabled notificationOptInStatus, BookAnalytics::FeatureEnabled readingGoal, Swift::Bool onDevicePersonalization, BookAnalytics::LaunchType launchType, Swift::Bool isParallel, Swift::Bool isMainWindow, Swift::Bool isWidgetInstalled)
{
  BookAnalytics::StartMethod v17;
  BookAnalytics::CellularRadioAccessTechnology v18;
  BookAnalytics::ICloudDriveStatus v19;
  BookAnalytics::FeatureEnabled v20;
  BookAnalytics::FeatureEnabled v21;
  BookAnalytics::LaunchType v22;
  BookAnalytics::FeatureEnabled *v23;
  BookAnalytics::FeatureEnabled *v24;
  Swift::Bool v25;
  BookAnalytics::LaunchType *v26;
  Swift::Bool v27;
  Swift::Bool v28;
  Swift::Bool v29;

  v17 = *(_BYTE *)startMethod;
  v18 = *(_BYTE *)cellularRadioAccessTechnology;
  v19 = *(_BYTE *)isWidgetInstalled;
  v20 = *v23;
  v21 = *v24;
  v22 = *v26;
  retstr->utcOffset = utcOffset;
  retstr->countryCode = countryCode;
  retstr->languageCode = languageCode;
  retstr->iCloudAccountState = iCloudAccountState;
  retstr->iTunesAccountState = iTunesAccountState;
  retstr->startMethod = v17;
  retstr->productType = productType;
  retstr->cellularRadioAccessTechnology = v18;
  retstr->iCloudDriveStatus = v19;
  retstr->notificationOptInStatus = v20;
  retstr->readingGoal = v21;
  retstr->onDevicePersonalization = v25;
  retstr->launchType = v22;
  retstr->isParallel = v27;
  retstr->isMainWindow = v28;
  retstr->isWidgetInstalled = v29;
}

void SessionData.startMethod.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 42);
}

_BYTE *SessionData.startMethod.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 42) = *result;
  return result;
}

uint64_t (*SessionData.startMethod.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void SessionData.cellularRadioAccessTechnology.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 64);
}

_BYTE *SessionData.cellularRadioAccessTechnology.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = *result;
  return result;
}

void SessionData.iCloudDriveStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 65);
}

_BYTE *SessionData.iCloudDriveStatus.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 65) = *result;
  return result;
}

uint64_t (*SessionData.iCloudDriveStatus.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void SessionData.notificationOptInStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 66);
}

_BYTE *SessionData.notificationOptInStatus.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 66) = *result;
  return result;
}

uint64_t (*SessionData.notificationOptInStatus.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void SessionData.readingGoal.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 67);
}

_BYTE *SessionData.readingGoal.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 67) = *result;
  return result;
}

uint64_t (*SessionData.readingGoal.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SessionData.onDevicePersonalization.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 68);
}

uint64_t SessionData.onDevicePersonalization.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 68) = result;
  return result;
}

void SessionData.launchType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 69);
}

_BYTE *SessionData.launchType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 69) = *result;
  return result;
}

uint64_t (*SessionData.launchType.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SessionData.isParallel.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 70);
}

uint64_t SessionData.isParallel.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 70) = result;
  return result;
}

uint64_t (*SessionData.isParallel.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SessionData.isMainWindow.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 71);
}

uint64_t SessionData.isMainWindow.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 71) = result;
  return result;
}

uint64_t (*SessionData.isMainWindow.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t sub_14DECC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14DF04 + 4 * byte_20C1D0[a1]))(0x657366664F637475, 0xE900000000000074);
}

uint64_t sub_14DF04()
{
  return 0x437972746E756F63;
}

uint64_t sub_14DF24()
{
  return 0x65676175676E616CLL;
}

unint64_t sub_14DF44()
{
  return 0xD000000000000012;
}

uint64_t sub_14E034()
{
  return 0x795468636E75616CLL;
}

uint64_t sub_14E050()
{
  return 0x6C6C617261507369;
}

uint64_t sub_14E070()
{
  return 0x69576E69614D7369;
}

uint64_t sub_14E0AC()
{
  unsigned __int8 *v0;

  return sub_14DECC(*v0);
}

uint64_t sub_14E0B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14FA74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_14E0D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14F264();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14E100(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14F264();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SessionData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  char v46;

  v3 = sub_71B4(&qword_2A1798);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v41 = *((_QWORD *)v1 + 2);
  v42 = v8;
  v9 = *((_QWORD *)v1 + 3);
  v39 = *((_QWORD *)v1 + 4);
  v40 = v9;
  v44 = *((unsigned __int8 *)v1 + 40);
  LODWORD(v9) = *((unsigned __int8 *)v1 + 41);
  v37 = *((unsigned __int8 *)v1 + 42);
  v38 = v9;
  v10 = *((_QWORD *)v1 + 7);
  v35 = *((_QWORD *)v1 + 6);
  v36 = v10;
  LODWORD(v9) = *((unsigned __int8 *)v1 + 64);
  v33 = *((unsigned __int8 *)v1 + 65);
  v34 = v9;
  LODWORD(v9) = *((unsigned __int8 *)v1 + 66);
  v31 = *((unsigned __int8 *)v1 + 67);
  v32 = v9;
  LODWORD(v9) = *((unsigned __int8 *)v1 + 68);
  v29 = *((unsigned __int8 *)v1 + 69);
  v30 = v9;
  LODWORD(v9) = *((unsigned __int8 *)v1 + 70);
  v27 = *((unsigned __int8 *)v1 + 71);
  v28 = v9;
  v11 = *((unsigned __int8 *)v1 + 72);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_14F264();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SessionData.CodingKeys, &type metadata for SessionData.CodingKeys, v14, v12, v13);
  v46 = 0;
  v15 = v6;
  v16 = v43;
  KeyedEncodingContainer.encode(_:forKey:)(v7, &v46, v3);
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v18 = v39;
  v17 = v40;
  v19 = v44;
  v20 = v38;
  LODWORD(v43) = v11;
  v46 = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v42, v41, &v46, v3);
  v46 = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v46, v3);
  v46 = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v19, &v46, v3);
  v46 = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v20, &v46, v3);
  v46 = v37;
  v45 = 5;
  v21 = sub_14F2A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v45, v3, &type metadata for StartMethod, v21);
  v46 = 6;
  KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v46, v3);
  v46 = v34;
  v45 = 7;
  v22 = sub_14F2EC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v45, v3, &type metadata for CellularRadioAccessTechnology, v22);
  v46 = v33;
  v45 = 8;
  v23 = sub_14F330();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v45, v3, &type metadata for ICloudDriveStatus, v23);
  v46 = v32;
  v45 = 9;
  v24 = sub_14F374();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v45, v3, &type metadata for FeatureEnabled, v24);
  v46 = v31;
  v45 = 10;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v45, v3, &type metadata for FeatureEnabled, v24);
  v46 = 11;
  KeyedEncodingContainer.encode(_:forKey:)(v30, &v46, v3);
  v46 = v29;
  v45 = 12;
  v25 = sub_14F3B8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v45, v3, &type metadata for LaunchType, v25);
  v46 = 13;
  KeyedEncodingContainer.encode(_:forKey:)(v28, &v46, v3);
  v46 = 14;
  KeyedEncodingContainer.encode(_:forKey:)(v27, &v46, v3);
  v46 = 15;
  KeyedEncodingContainer.encode(_:forKey:)(v43, &v46, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v15, v3);
}

void SessionData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  BAEventReporter *v20;
  BAEventReporter *v21;
  uint64_t v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  int v25;
  unint64_t v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  unint64_t v29;
  BAEventReporter *v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  char v34;
  char v35;
  BAEventReporter *v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  BAEventReporter *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  BAEventReporter *v69;
  BAEventReporter *v70;
  int v71;
  char v72;
  uint64_t v73;

  v5 = sub_71B4(&qword_2A17D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_14F264();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SessionData.CodingKeys, &type metadata for SessionData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    LOBYTE(v73) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    LOBYTE(v73) = 1;
    v68 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    LOBYTE(v73) = 2;
    v21 = v20;
    swift_bridgeObjectRetain(v20);
    v22 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    v70 = v21;
    v67 = v22;
    LOBYTE(v73) = 3;
    v24 = v23;
    swift_bridgeObjectRetain(v23);
    v25 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    v69 = v24;
    v71 = v25;
    LOBYTE(v73) = 4;
    LODWORD(v24) = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    v72 = 5;
    v26 = sub_14F3FC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v73, &type metadata for StartMethod, &v72, v5, &type metadata for StartMethod, v26);
    v66 = v73;
    LOBYTE(v73) = 6;
    v64 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    v72 = 7;
    v28 = v27;
    v29 = sub_14F440();
    v65 = v28;
    swift_bridgeObjectRetain(v28);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v73, &type metadata for CellularRadioAccessTechnology, &v72, v5, &type metadata for CellularRadioAccessTechnology, v29);
    v63 = (int)v24;
    v30 = v65;
    v62 = v73;
    v72 = 8;
    v31 = sub_14F484();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v73, &type metadata for ICloudDriveStatus, &v72, v5, &type metadata for ICloudDriveStatus, v31);
    v60 = v73;
    v72 = 9;
    v61 = sub_14F4C8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v73, &type metadata for FeatureEnabled, &v72, v5, &type metadata for FeatureEnabled, v61);
    v59 = v73;
    v72 = 10;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v73, &type metadata for FeatureEnabled, &v72, v5, &type metadata for FeatureEnabled, v61);
    LODWORD(v61) = v73;
    LOBYTE(v73) = 11;
    v58 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    v72 = 12;
    v32 = sub_14F50C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v73, &type metadata for LaunchType, &v72, v5, &type metadata for LaunchType, v32);
    v57 = v73;
    LOBYTE(v73) = 13;
    v56 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    LOBYTE(v73) = 14;
    v55 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    LOBYTE(v73) = 15;
    LOBYTE(v28) = KeyedDecodingContainer.decode(_:forKey:)(&v73, v5);
    v53 = v63 & 1;
    v54 = v71 & 1;
    v71 = v58 & 1;
    v63 = v56 & 1;
    v33 = *(void (**)(char *, uint64_t))(v6 + 8);
    v34 = v55 & 1;
    v33(v8, v5);
    v35 = v28 & 1;
    *(_DWORD *)a2 = v12;
    v36 = v69;
    v37 = v70;
    *(_QWORD *)(a2 + 8) = v68;
    *(_QWORD *)(a2 + 16) = v37;
    *(_QWORD *)(a2 + 24) = v67;
    *(_QWORD *)(a2 + 32) = v36;
    *(_BYTE *)(a2 + 40) = v54;
    *(_BYTE *)(a2 + 41) = v53;
    *(_BYTE *)(a2 + 42) = v66;
    *(_QWORD *)(a2 + 48) = v64;
    *(_QWORD *)(a2 + 56) = v30;
    *(_BYTE *)(a2 + 64) = v62;
    *(_BYTE *)(a2 + 65) = v60;
    *(_BYTE *)(a2 + 66) = v59;
    *(_BYTE *)(a2 + 67) = v61;
    *(_BYTE *)(a2 + 68) = v71;
    *(_BYTE *)(a2 + 69) = v57;
    *(_BYTE *)(a2 + 70) = v63;
    *(_BYTE *)(a2 + 71) = v34;
    *(_BYTE *)(a2 + 72) = v35;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v30, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(v36, v45, v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease(v37, v13, v14, v15, v16, v17, v18, v19);
  }
}

void sub_14EBF4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SessionData.init(from:)(a1, a2);
}

uint64_t sub_14EC08(_QWORD *a1)
{
  return SessionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics11SessionDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  BAEventReporter *v25;
  uint64_t v26;
  BAEventReporter *v27;
  char v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  int64_t v41;
  id v42;
  uint64_t v43;
  BAEventReporter *v44;
  uint64_t v45;
  BAEventReporter *v46;
  uint64_t v47;
  char v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  uint64_t v65;
  BAEventReporter *v66;
  uint64_t v67;
  char v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  BAEventReporter *v83;
  uint64_t v84;
  BAEventReporter *v85;
  char v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  int64_t v98;
  int64_t v99;
  id v100;
  BAEventReporter *v101;
  uint64_t v102;
  BAEventReporter *v103;
  char v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  int64_t v116;
  int64_t v117;
  id v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned __int8 *)(a1 + 40);
  v9 = *(unsigned __int8 *)(a1 + 41);
  v10 = *(_BYTE *)(a1 + 42);
  v138 = *(_QWORD *)(a1 + 48);
  v136 = *(_QWORD *)(a1 + 56);
  v134 = *(unsigned __int8 *)(a1 + 65);
  v132 = *(unsigned __int8 *)(a1 + 66);
  v130 = *(unsigned __int8 *)(a1 + 67);
  v128 = *(unsigned __int8 *)(a1 + 68);
  v126 = *(unsigned __int8 *)(a1 + 69);
  v124 = *(unsigned __int8 *)(a1 + 70);
  v122 = *(unsigned __int8 *)(a1 + 71);
  v120 = *(unsigned __int8 *)(a1 + 72);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(unsigned __int8 *)(a2 + 40);
  v16 = *(unsigned __int8 *)(a2 + 41);
  v137 = *(_QWORD *)(a2 + 48);
  v135 = *(_QWORD *)(a2 + 56);
  v133 = *(unsigned __int8 *)(a2 + 65);
  v131 = *(unsigned __int8 *)(a2 + 66);
  v129 = *(unsigned __int8 *)(a2 + 67);
  v127 = *(unsigned __int8 *)(a2 + 68);
  v125 = *(unsigned __int8 *)(a2 + 69);
  v123 = *(unsigned __int8 *)(a2 + 70);
  v121 = *(unsigned __int8 *)(a2 + 71);
  v119 = *(unsigned __int8 *)(a2 + 72);
  if (v4 == v11 && v5 == v12
    || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v11, v12, 0), result = 0, (v17 & 1) != 0))
  {
    if (v6 == v13 && v7 == v14)
    {
      result = 0;
      if (v8 != v15)
        return result;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v13, v14, 0);
      result = 0;
      if ((v19 & 1) == 0 || ((v8 ^ v15) & 1) != 0)
        return result;
    }
    if (((v9 ^ v16) & 1) != 0)
      return result;
    sub_2AC54(v10);
    if ((v20 & 1) == 0)
      return 0;
    if (v138 == v137 && v136 == v135
      || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v138, v136, v137, v135, 0), result = 0, (v21 & 1) != 0))
    {
      v22 = CellularRadioAccessTechnology.rawValue.getter();
      v24 = v23;
      v26 = CellularRadioAccessTechnology.rawValue.getter();
      v27 = v25;
      if (v22 == v26 && v24 == v25)
      {
        swift_bridgeObjectRelease_n(v24, 2);
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v25, 0);
        swift_bridgeObjectRelease(v24, v29, v30, v31, v32, v33, v34, v35);
        swift_bridgeObjectRelease(v27, v36, v37, v38, v39, v40, v41, v42);
        result = 0;
        if ((v28 & 1) == 0)
          return result;
      }
      v43 = 0x6E776F6E6B6E75;
      if (v134)
      {
        if (v134 == 1)
        {
          v44 = (BAEventReporter *)0xE200000000000000;
          v45 = 28271;
        }
        else
        {
          v44 = (BAEventReporter *)0xE300000000000000;
          v45 = 6710895;
        }
      }
      else
      {
        v44 = (BAEventReporter *)0xE700000000000000;
        v45 = 0x6E776F6E6B6E75;
      }
      if (v133)
      {
        if (v133 == 1)
        {
          v46 = (BAEventReporter *)0xE200000000000000;
          v47 = 28271;
        }
        else
        {
          v46 = (BAEventReporter *)0xE300000000000000;
          v47 = 6710895;
        }
      }
      else
      {
        v46 = (BAEventReporter *)0xE700000000000000;
        v47 = 0x6E776F6E6B6E75;
      }
      if (v45 == v47 && v44 == v46)
      {
        swift_bridgeObjectRelease_n(v44, 2);
      }
      else
      {
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v44, v47, v46, 0);
        swift_bridgeObjectRelease(v44, v49, v50, v51, v52, v53, v54, v55);
        swift_bridgeObjectRelease(v46, v56, v57, v58, v59, v60, v61, v62);
        result = 0;
        if ((v48 & 1) == 0)
          return result;
      }
      v63 = 0x64656C62616E65;
      if (v132)
      {
        if (v132 == 1)
        {
          v64 = (BAEventReporter *)0xE700000000000000;
          v65 = 0x64656C62616E65;
        }
        else
        {
          v64 = (BAEventReporter *)0xE800000000000000;
          v65 = 0x64656C6261736964;
        }
      }
      else
      {
        v64 = (BAEventReporter *)0xE700000000000000;
        v65 = 0x6E776F6E6B6E75;
      }
      if (v131)
      {
        if (v131 == 1)
        {
          v66 = (BAEventReporter *)0xE700000000000000;
          v67 = 0x64656C62616E65;
        }
        else
        {
          v66 = (BAEventReporter *)0xE800000000000000;
          v67 = 0x64656C6261736964;
        }
      }
      else
      {
        v66 = (BAEventReporter *)0xE700000000000000;
        v67 = 0x6E776F6E6B6E75;
      }
      if (v65 == v67 && v64 == v66)
      {
        swift_bridgeObjectRelease_n(v64, 2);
      }
      else
      {
        v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v64, v67, v66, 0);
        swift_bridgeObjectRelease(v64, v69, v70, v71, v72, v73, v74, v75);
        swift_bridgeObjectRelease(v66, v76, v77, v78, v79, v80, v81, v82);
        result = 0;
        if ((v68 & 1) == 0)
          return result;
      }
      if (v130)
      {
        if (v130 == 1)
        {
          v83 = (BAEventReporter *)0xE700000000000000;
          v84 = 0x64656C62616E65;
        }
        else
        {
          v83 = (BAEventReporter *)0xE800000000000000;
          v84 = 0x64656C6261736964;
        }
      }
      else
      {
        v83 = (BAEventReporter *)0xE700000000000000;
        v84 = 0x6E776F6E6B6E75;
      }
      if (v129)
      {
        if (v129 == 1)
        {
          v85 = (BAEventReporter *)0xE700000000000000;
        }
        else
        {
          v85 = (BAEventReporter *)0xE800000000000000;
          v63 = 0x64656C6261736964;
        }
      }
      else
      {
        v85 = (BAEventReporter *)0xE700000000000000;
        v63 = 0x6E776F6E6B6E75;
      }
      if (v84 == v63 && v83 == v85)
      {
        swift_bridgeObjectRelease_n(v83, 2);
        if (v128 != v127)
          return 0;
      }
      else
      {
        v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, v83, v63, v85, 0);
        swift_bridgeObjectRelease(v83, v87, v88, v89, v90, v91, v92, v93);
        swift_bridgeObjectRelease(v85, v94, v95, v96, v97, v98, v99, v100);
        result = 0;
        if ((v86 & 1) == 0 || ((v128 ^ v127) & 1) != 0)
          return result;
      }
      if (v126)
      {
        v101 = (BAEventReporter *)0xE400000000000000;
        if (v126 == 1)
          v102 = 1684828003;
        else
          v102 = 1836212599;
      }
      else
      {
        v101 = (BAEventReporter *)0xE700000000000000;
        v102 = 0x6E776F6E6B6E75;
      }
      if (v125)
      {
        v103 = (BAEventReporter *)0xE400000000000000;
        if (v125 == 1)
          v43 = 1684828003;
        else
          v43 = 1836212599;
      }
      else
      {
        v103 = (BAEventReporter *)0xE700000000000000;
      }
      if (v102 == v43 && v101 == v103)
      {
        swift_bridgeObjectRelease_n(v101, 2);
        result = 0;
        if (v124 != v123)
          return result;
        goto LABEL_81;
      }
      v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v102, v101, v43, v103, 0);
      swift_bridgeObjectRelease(v101, v105, v106, v107, v108, v109, v110, v111);
      swift_bridgeObjectRelease(v103, v112, v113, v114, v115, v116, v117, v118);
      result = 0;
      if ((v104 & 1) != 0 && ((v124 ^ v123) & 1) == 0)
      {
LABEL_81:
        if (((v122 ^ v121) & 1) == 0)
          return v120 ^ v119 ^ 1u;
      }
    }
  }
  return result;
}

unint64_t sub_14F264()
{
  unint64_t result;

  result = qword_2A17A0;
  if (!qword_2A17A0)
  {
    result = swift_getWitnessTable(byte_20C3B8, &type metadata for SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A17A0);
  }
  return result;
}

unint64_t sub_14F2A8()
{
  unint64_t result;

  result = qword_2A17A8;
  if (!qword_2A17A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for StartMethod, &type metadata for StartMethod);
    atomic_store(result, (unint64_t *)&qword_2A17A8);
  }
  return result;
}

unint64_t sub_14F2EC()
{
  unint64_t result;

  result = qword_2A17B0;
  if (!qword_2A17B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CellularRadioAccessTechnology, &type metadata for CellularRadioAccessTechnology);
    atomic_store(result, (unint64_t *)&qword_2A17B0);
  }
  return result;
}

unint64_t sub_14F330()
{
  unint64_t result;

  result = qword_2A17B8;
  if (!qword_2A17B8)
  {
    result = swift_getWitnessTable("Ք\a", &type metadata for ICloudDriveStatus);
    atomic_store(result, (unint64_t *)&qword_2A17B8);
  }
  return result;
}

unint64_t sub_14F374()
{
  unint64_t result;

  result = qword_2A17C0;
  if (!qword_2A17C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FeatureEnabled, &type metadata for FeatureEnabled);
    atomic_store(result, (unint64_t *)&qword_2A17C0);
  }
  return result;
}

unint64_t sub_14F3B8()
{
  unint64_t result;

  result = qword_2A17C8;
  if (!qword_2A17C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LaunchType, &type metadata for LaunchType);
    atomic_store(result, (unint64_t *)&qword_2A17C8);
  }
  return result;
}

unint64_t sub_14F3FC()
{
  unint64_t result;

  result = qword_2A17D8;
  if (!qword_2A17D8)
  {
    result = swift_getWitnessTable("5#\a", &type metadata for StartMethod);
    atomic_store(result, (unint64_t *)&qword_2A17D8);
  }
  return result;
}

unint64_t sub_14F440()
{
  unint64_t result;

  result = qword_2A17E0;
  if (!qword_2A17E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CellularRadioAccessTechnology, &type metadata for CellularRadioAccessTechnology);
    atomic_store(result, (unint64_t *)&qword_2A17E0);
  }
  return result;
}

unint64_t sub_14F484()
{
  unint64_t result;

  result = qword_2A17E8;
  if (!qword_2A17E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ICloudDriveStatus, &type metadata for ICloudDriveStatus);
    atomic_store(result, (unint64_t *)&qword_2A17E8);
  }
  return result;
}

unint64_t sub_14F4C8()
{
  unint64_t result;

  result = qword_2A17F0;
  if (!qword_2A17F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FeatureEnabled, &type metadata for FeatureEnabled);
    atomic_store(result, (unint64_t *)&qword_2A17F0);
  }
  return result;
}

unint64_t sub_14F50C()
{
  unint64_t result;

  result = qword_2A17F8;
  if (!qword_2A17F8)
  {
    result = swift_getWitnessTable("ل\a", &type metadata for LaunchType);
    atomic_store(result, (unint64_t *)&qword_2A17F8);
  }
  return result;
}

unint64_t sub_14F554()
{
  unint64_t result;

  result = qword_2A1800;
  if (!qword_2A1800)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SessionData, &type metadata for SessionData);
    atomic_store(result, (unint64_t *)&qword_2A1800);
  }
  return result;
}

unint64_t sub_14F59C()
{
  unint64_t result;

  result = qword_2A1808;
  if (!qword_2A1808)
  {
    result = swift_getWitnessTable("}A\a", &type metadata for SessionData);
    atomic_store(result, (unint64_t *)&qword_2A1808);
  }
  return result;
}

uint64_t destroy for SessionData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for SessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for SessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  *(_BYTE *)(a1 + 71) = *(_BYTE *)(a2 + 71);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for SessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  *(_BYTE *)(a1 + 71) = *(_BYTE *)(a2 + 71);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionData()
{
  return &type metadata for SessionData;
}

uint64_t storeEnumTagSinglePayload for SessionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_14F91C + 4 * byte_20C1E5[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_14F950 + 4 * byte_20C1E0[v4]))();
}

uint64_t sub_14F950(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F958(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14F960);
  return result;
}

uint64_t sub_14F96C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14F974);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_14F978(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F980(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionData.CodingKeys()
{
  return &type metadata for SessionData.CodingKeys;
}

unint64_t sub_14F9A0()
{
  unint64_t result;

  result = qword_2A1810;
  if (!qword_2A1810)
  {
    result = swift_getWitnessTable("I@\a", &type metadata for SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1810);
  }
  return result;
}

unint64_t sub_14F9E8()
{
  unint64_t result;

  result = qword_2A1818;
  if (!qword_2A1818)
  {
    result = swift_getWitnessTable("\tA\a", &type metadata for SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1818);
  }
  return result;
}

unint64_t sub_14FA30()
{
  unint64_t result;

  result = qword_2A1820;
  if (!qword_2A1820)
  {
    result = swift_getWitnessTable(byte_20C328, &type metadata for SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1820);
  }
  return result;
}

uint64_t sub_14FA74(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 0x657366664F637475 && a2 == 0xE900000000000074)
  {
    v5 = 0xE900000000000074;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657366664F637475, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL)
  {
    v7 = 0xEB0000000065646FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x437972746E756F63, 0xEB0000000065646FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65676175676E616CLL && a2 == 0xEC00000065646F43)
  {
    v8 = 0xEC00000065646F43;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676175676E616CLL, 0xEC00000065646F43, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x8000000000222260;
    if (a2 == 0x8000000000222260)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000222260, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000012)
  {
    v10 = 0x8000000000222280;
    if (a2 == 0x8000000000222280)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000222280, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x74654D7472617473 && a2 == 0xEB00000000646F68)
  {
    v11 = 0xEB00000000646F68;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D7472617473, 0xEB00000000646F68, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x54746375646F7270 && a2 == 0xEB00000000657079)
  {
    v12 = 0xEB00000000657079;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746375646F7270, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000000002222A0)
  {
    v13 = 0x80000000002222A0;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000000002222A0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0xD000000000000011)
  {
    v14 = 0x80000000002222C0;
    if (a2 == 0x80000000002222C0)
      goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000002222C0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0xD000000000000017)
  {
    v15 = 0x80000000002222E0;
    if (a2 == 0x80000000002222E0)
      goto LABEL_58;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000000002222E0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0x47676E6964616572 && a2 == 0xEB000000006C616FLL)
  {
    v16 = 0xEB000000006C616FLL;
LABEL_64:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x47676E6964616572, 0xEB000000006C616FLL, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_64;
  }
  if (a1 == 0xD000000000000017)
  {
    v17 = 0x8000000000222300;
    if (a2 == 0x8000000000222300)
      goto LABEL_69;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000000222300, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_69:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if (a1 == 0x795468636E75616CLL && a2 == 0xEA00000000006570)
  {
    v18 = 0xEA00000000006570;
LABEL_75:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x795468636E75616CLL, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_75;
  }
  if (a1 == 0x6C6C617261507369 && a2 == 0xEA00000000006C65)
  {
    v19 = 0xEA00000000006C65;
LABEL_81:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C617261507369, 0xEA00000000006C65, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_81;
  }
  if (a1 == 0x69576E69614D7369 && a2 == 0xEC000000776F646ELL)
  {
    v20 = 0xEC000000776F646ELL;
LABEL_87:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69576E69614D7369, 0xEC000000776F646ELL, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_87;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000000222320)
  {
    swift_bridgeObjectRelease(0x8000000000222320);
    return 15;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000222320, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t ClickData.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ClickData.index.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

void __swiftcall ClickData.init(clickID:linkActionType:targetType:index:outBoundURL:)(BookAnalytics::ClickData *__return_ptr retstr, Swift::String_optional clickID, BookAnalytics::LinkActionType linkActionType, Swift::String targetType, Swift::Int64 index, Swift::String_optional outBoundURL)
{
  BookAnalytics::LinkActionType v6;

  v6 = *(_BYTE *)linkActionType;
  retstr->clickID = clickID;
  retstr->linkActionType = v6;
  retstr->targetType = targetType;
  retstr->index = index;
  retstr->outBoundURL = outBoundURL;
}

uint64_t sub_15013C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_15016C + 4 * byte_20C408[*v0]))(0x44496B63696C63, 0xE700000000000000);
}

uint64_t sub_15016C()
{
  return 0x697463416B6E696CLL;
}

uint64_t sub_150190()
{
  return 0x7954746567726174;
}

uint64_t sub_1501AC()
{
  return 0x7865646E69;
}

uint64_t sub_1501C0()
{
  return 0x646E756F4274756FLL;
}

uint64_t sub_1501E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_150D14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_150204(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_150860();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15022C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_150860();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClickData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = sub_71B4(&qword_2A1828);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v26 = *((unsigned __int8 *)v1 + 16);
  v9 = v1[3];
  v24 = v1[4];
  v25 = v9;
  v10 = v1[5];
  v22 = v1[6];
  v23 = v10;
  v21 = v1[7];
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_150860();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ClickData.CodingKeys, &type metadata for ClickData.CodingKeys, v13, v11, v12);
  v33 = 0;
  v14 = v27;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v33, v3);
  if (!v14)
  {
    v16 = v24;
    v15 = v25;
    v17 = v23;
    v32 = v26;
    v31 = 1;
    v18 = sub_1508A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v31, v3, &type metadata for LinkActionType, v18);
    v30 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v30, v3);
    v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v29, v3);
    v28 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v21, &v28, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void ClickData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  int64_t v16;
  int64_t v17;
  id v18;
  uint64_t v19;
  BAEventReporter *v20;
  BAEventReporter *v21;
  unint64_t v22;
  uint64_t v23;
  BAEventReporter *v24;
  BAEventReporter *v25;
  uint64_t v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  int64_t v56;
  int64_t v57;
  void *v58;
  BAEventReporter *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;

  v5 = sub_71B4(&qword_2A1840);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_150860();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClickData.CodingKeys, &type metadata for ClickData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v12, v13, v14, v15, v16, v17, v18);
    v59 = 0;
  }
  else
  {
    BYTE1(v68) = 0;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v68 + 1, v5);
    v21 = v20;
    v67 = 1;
    v22 = sub_1508E8();
    swift_bridgeObjectRetain(v21);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v68, &type metadata for LinkActionType, &v67, v5, &type metadata for LinkActionType, v22);
    v63 = v19;
    v62 = v68;
    v66 = 2;
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v66, v5);
    v25 = v24;
    v61 = v23;
    v65 = 3;
    swift_bridgeObjectRetain(v24);
    v60 = KeyedDecodingContainer.decode(_:forKey:)(&v65, v5);
    v64 = 4;
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v64, v5);
    v28 = v27;
    v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30 = v26;
    v29(v8, v5);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(0, v31, v32, v33, v34, v35, v36, v37);
    *(_QWORD *)a2 = v63;
    *(_QWORD *)(a2 + 8) = v21;
    *(_BYTE *)(a2 + 16) = v62;
    *(_QWORD *)(a2 + 24) = v61;
    *(_QWORD *)(a2 + 32) = v25;
    *(_QWORD *)(a2 + 40) = v60;
    *(_QWORD *)(a2 + 48) = v30;
    *(_QWORD *)(a2 + 56) = v28;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v28, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(v25, v45, v46, v47, v48, v49, v50, v51);
    v59 = v21;
  }
  swift_bridgeObjectRelease(v59, v52, v53, v54, v55, v56, v57, v58);
}

void sub_1506F0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ClickData.init(from:)(a1, a2);
}

uint64_t sub_150704(_QWORD *a1)
{
  return ClickData.encode(to:)(a1);
}

BOOL _s13BookAnalytics9ClickDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BOOL8 result;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[7];
  v9 = a2[1];
  v10 = a2[3];
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[7];
  if (!v3)
  {
    v19 = a2[6];
    v20 = a1[6];
    if (v9)
      return 0;
    goto LABEL_8;
  }
  if (!v9)
    return 0;
  v19 = a2[6];
  v20 = a1[6];
  v14 = *a1;
  if (v14 == *a2 && v3 == v9
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v3, *a2, v9, 0), result = 0, (v15 & 1) != 0))
  {
LABEL_8:
    sub_24E04(v4);
    if ((v17 & 1) != 0)
    {
      if (v5 == v10 && v6 == v11)
      {
        if (v7 != v12)
          return 0;
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v10, v11, 0);
        result = 0;
        if ((v18 & 1) == 0 || v7 != v12)
          return result;
      }
      if (v8)
        return v13
            && (v20 == v19 && v8 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v8, v19, v13, 0) & 1) != 0);
      if (!v13)
        return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_150860()
{
  unint64_t result;

  result = qword_2A1830;
  if (!qword_2A1830)
  {
    result = swift_getWitnessTable(byte_20C5B4, &type metadata for ClickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1830);
  }
  return result;
}

unint64_t sub_1508A4()
{
  unint64_t result;

  result = qword_2A1838;
  if (!qword_2A1838)
  {
    result = swift_getWitnessTable("Q^\a", &type metadata for LinkActionType);
    atomic_store(result, (unint64_t *)&qword_2A1838);
  }
  return result;
}

unint64_t sub_1508E8()
{
  unint64_t result;

  result = qword_2A1848;
  if (!qword_2A1848)
  {
    result = swift_getWitnessTable("i^\a", &type metadata for LinkActionType);
    atomic_store(result, (unint64_t *)&qword_2A1848);
  }
  return result;
}

uint64_t destroy for ClickData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for ClickData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ClickData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for ClickData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClickData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClickData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClickData()
{
  return &type metadata for ClickData;
}

uint64_t storeEnumTagSinglePayload for ClickData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_150BBC + 4 * byte_20C412[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_150BF0 + 4 * byte_20C40D[v4]))();
}

uint64_t sub_150BF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_150BF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x150C00);
  return result;
}

uint64_t sub_150C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x150C14);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_150C18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_150C20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClickData.CodingKeys()
{
  return &type metadata for ClickData.CodingKeys;
}

unint64_t sub_150C40()
{
  unint64_t result;

  result = qword_2A1850;
  if (!qword_2A1850)
  {
    result = swift_getWitnessTable("E@\a", &type metadata for ClickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1850);
  }
  return result;
}

unint64_t sub_150C88()
{
  unint64_t result;

  result = qword_2A1858;
  if (!qword_2A1858)
  {
    result = swift_getWitnessTable(byte_20C4FC, &type metadata for ClickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1858);
  }
  return result;
}

unint64_t sub_150CD0()
{
  unint64_t result;

  result = qword_2A1860;
  if (!qword_2A1860)
  {
    result = swift_getWitnessTable(byte_20C524, &type metadata for ClickData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1860);
  }
  return result;
}

uint64_t sub_150D14(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x44496B63696C63 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496B63696C63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x697463416B6E696CLL && a2 == 0xEE00657079546E6FLL)
  {
    v7 = 0xEE00657079546E6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463416B6E696CLL, 0xEE00657079546E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7954746567726174 && a2 == 0xEA00000000006570)
  {
    v8 = 0xEA00000000006570;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954746567726174, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x646E756F4274756FLL && a2 == 0xEB000000004C5255)
  {
    swift_bridgeObjectRelease(0xEB000000004C5255);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646E756F4274756FLL, 0xEB000000004C5255, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::ViewLocation_optional __swiftcall ViewLocation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ViewLocation_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_268370, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ViewLocation.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x434F546D6F7266;
  if (*v0 != 1)
    v1 = 0x646165526D6F7266;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_15102C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256F8(*a1, *a2);
}

unint64_t sub_15103C()
{
  unint64_t result;

  result = qword_2A1868;
  if (!qword_2A1868)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewLocation, &type metadata for ViewLocation);
    atomic_store(result, (unint64_t *)&qword_2A1868);
  }
  return result;
}

Swift::Int sub_151080()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE700000000000000;
  v3 = 0x434F546D6F7266;
  if (v1 != 1)
  {
    v3 = 0x646165526D6F7266;
    v2 = 0xEB00000000676E69;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_151128(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x434F546D6F7266;
  if (*v1 != 1)
  {
    v3 = 0x646165526D6F7266;
    v2 = 0xEB00000000676E69;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1511AC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE700000000000000;
  v4 = 0x434F546D6F7266;
  if (v2 != 1)
  {
    v4 = 0x646165526D6F7266;
    v3 = 0xEB00000000676E69;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::ViewLocation_optional sub_151250(Swift::String *a1)
{
  return ViewLocation.init(rawValue:)(*a1);
}

void sub_15125C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x434F546D6F7266;
  if (v2 != 1)
  {
    v5 = 0x646165526D6F7266;
    v4 = 0xEB00000000676E69;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1512C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_151438();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_151320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_151438();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ViewLocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1513B8 + 4 * byte_20C609[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1513EC + 4 * byte_20C604[v4]))();
}

uint64_t sub_1513EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1513F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1513FCLL);
  return result;
}

uint64_t sub_151408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x151410);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_151414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15141C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewLocation()
{
  return &type metadata for ViewLocation;
}

unint64_t sub_151438()
{
  unint64_t result;

  result = qword_2A1870;
  if (!qword_2A1870)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ViewLocation, &type metadata for ViewLocation);
    atomic_store(result, (unint64_t *)&qword_2A1870);
  }
  return result;
}

uint64_t sub_15147C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1878, &enum case for SessionGroup.default(_:));
}

uint64_t static AppResignEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A30, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1878, a1);
}

uint64_t sub_1514BC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A1890, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AppResignEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A38, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1890, a1);
}

uint64_t sub_1514FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_151654();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_151524(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_151654();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppResignEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_71B4(&qword_2A18A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_151654();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppResignEvent.Model.CodingKeys, &type metadata for AppResignEvent.Model.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for EventData(0);
  v12 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_151654()
{
  unint64_t result;

  result = qword_2A18B0;
  if (!qword_2A18B0)
  {
    result = swift_getWitnessTable(byte_20C8A0, &type metadata for AppResignEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A18B0);
  }
  return result;
}

uint64_t AppResignEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for EventData(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_71B4(&qword_2A18B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AppResignEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_151654();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppResignEvent.Model.CodingKeys, &type metadata for AppResignEvent.Model.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_151868((uint64_t)v11, v20);
  }
  return sub_7DAC(a1);
}

uint64_t type metadata accessor for AppResignEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A19A8, (uint64_t)&nominal type descriptor for AppResignEvent.Model);
}

uint64_t sub_151868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppResignEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1518AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AppResignEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1518C0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A30, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1878, (uint64_t)sub_15147C, a1);
}

uint64_t sub_1518E4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A38, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1890, (uint64_t)sub_1514BC, a1);
}

uint64_t getEnumTagSinglePayload for AppResignEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_151914);
}

uint64_t sub_151914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AppResignEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_151960);
}

uint64_t sub_151960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AppResignEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1918, (uint64_t)&nominal type descriptor for AppResignEvent);
}

uint64_t sub_1519B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_DF104(a1, a2, a3, (uint64_t (*)(uint64_t))sub_8734);
}

uint64_t getEnumTagSinglePayload for AppResignEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1519D0);
}

uint64_t sub_1519D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AppResignEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_151A18);
}

uint64_t sub_151A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AppResignEvent.Model.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_151A98 + 4 * byte_20C720[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_151AB8 + 4 * byte_20C725[v4]))();
}

_BYTE *sub_151A98(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_151AB8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_151AC0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_151AC8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_151AD0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_151AD8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppResignEvent.Model.CodingKeys()
{
  return &type metadata for AppResignEvent.Model.CodingKeys;
}

unint64_t sub_151AF8()
{
  unint64_t result;

  result = qword_2A19E0;
  if (!qword_2A19E0)
  {
    result = swift_getWitnessTable(")@\a", &type metadata for AppResignEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A19E0);
  }
  return result;
}

unint64_t sub_151B40()
{
  unint64_t result;

  result = qword_2A19E8;
  if (!qword_2A19E8)
  {
    result = swift_getWitnessTable("q@\a", &type metadata for AppResignEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A19E8);
  }
  return result;
}

unint64_t sub_151B88()
{
  unint64_t result;

  result = qword_2A19F0;
  if (!qword_2A19F0)
  {
    result = swift_getWitnessTable("Y@\a", &type metadata for AppResignEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A19F0);
  }
  return result;
}

uint64_t sub_151BD0()
{
  _BYTE *v0;

  if (*v0)
    return 0x54746E65746E6F63;
  else
    return 0x697463656C6C6F63;
}

uint64_t sub_151C1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_15223C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_151C40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15203C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_151C68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15203C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_2A19F8);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_15203C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionData.CodingKeys, &type metadata for CollectionData.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

void CollectionData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  int64_t v38;
  int64_t v39;
  void *v40;
  BAEventReporter *v41;
  uint64_t v42;
  char v43;
  char v44;

  v5 = sub_71B4(&qword_2A1A08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_15203C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionData.CodingKeys, &type metadata for CollectionData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v41 = 0;
  }
  else
  {
    v44 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
    v14 = v13;
    v43 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v5);
    v17 = v16;
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19 = v15;
    v18(v8, v5);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRelease(0, v20, v21, v22, v23, v24, v25, v26);
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    a2[2] = v19;
    a2[3] = (uint64_t)v17;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v17, v27, v28, v29, v30, v31, v32, v33);
    v41 = v14;
  }
  swift_bridgeObjectRelease(v41, v34, v35, v36, v37, v38, v39, v40);
}

void sub_151F78(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  CollectionData.init(from:)(a1, a2);
}

uint64_t sub_151F8C(_QWORD *a1)
{
  return CollectionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics14CollectionDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;
  BOOL v14;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v7)
    {
      if (v9)
      {
        v14 = v6 == v10 && v7 == v9;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v9, 0) & 1) != 0)
          return 1;
      }
    }
    else if (!v9)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_15203C()
{
  unint64_t result;

  result = qword_2A1A00;
  if (!qword_2A1A00)
  {
    result = swift_getWitnessTable("\t@\a", &type metadata for CollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1A00);
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionData()
{
  return &type metadata for CollectionData;
}

uint64_t storeEnumTagSinglePayload for CollectionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1520E4 + 4 * byte_20C8F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_152118 + 4 * byte_20C8F0[v4]))();
}

uint64_t sub_152118(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_152120(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x152128);
  return result;
}

uint64_t sub_152134(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15213CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_152140(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_152148(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionData.CodingKeys()
{
  return &type metadata for CollectionData.CodingKeys;
}

unint64_t sub_152168()
{
  unint64_t result;

  result = qword_2A1A10;
  if (!qword_2A1A10)
  {
    result = swift_getWitnessTable(byte_20CA68, &type metadata for CollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1A10);
  }
  return result;
}

unint64_t sub_1521B0()
{
  unint64_t result;

  result = qword_2A1A18;
  if (!qword_2A1A18)
  {
    result = swift_getWitnessTable("y@\a", &type metadata for CollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1A18);
  }
  return result;
}

unint64_t sub_1521F8()
{
  unint64_t result;

  result = qword_2A1A20;
  if (!qword_2A1A20)
  {
    result = swift_getWitnessTable("a@\a", &type metadata for CollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1A20);
  }
  return result;
}

uint64_t sub_15223C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x697463656C6C6F63 && a2 == 0xEC00000044496E6FLL)
  {
    v5 = 0xEC00000044496E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEC00000044496E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease(0xEB00000000657079);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54746E65746E6F63, 0xEB00000000657079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_15235C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1A28, &enum case for SessionGroup.default(_:));
}

uint64_t static WidgetExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A40, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1A28, a1);
}

uint64_t sub_15239C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A1A40, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static WidgetExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A48, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1A40, a1);
}

uint64_t WidgetEngagementEvent.widgetData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A1A58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t WidgetEngagementEvent.widgetData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2A1A58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t WidgetExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WidgetExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2A1AD0, (uint64_t)&nominal type descriptor for WidgetExposureEvent);
}

uint64_t WidgetExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WidgetExposureEvent.eventData.modify())()
{
  type metadata accessor for WidgetExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WidgetExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for WidgetExposureEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t WidgetEngagementEvent.Model.widgetData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 33);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 33) = v6;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t WidgetExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WidgetExposureEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WidgetExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1B68, (uint64_t)&nominal type descriptor for WidgetExposureEvent.Model);
}

uint64_t WidgetExposureEvent.Model.init(widgetData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 33);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
  *(_BYTE *)(a3 + 32) = v7;
  *(_BYTE *)(a3 + 33) = v8;
  v9 = a3 + *(int *)(type metadata accessor for WidgetExposureEvent.Model(0) + 20);
  v10 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a2, v10);
}

uint64_t sub_1526AC()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x6144746567646977;
}

uint64_t sub_1526F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_153844(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_152714(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1528E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15273C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1528E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WidgetExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_71B4(&qword_2A1A60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_1528E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetExposureEvent.Model.CodingKeys, &type metadata for WidgetExposureEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v14 = *((_BYTE *)v3 + 32);
  v15 = *((_BYTE *)v3 + 33);
  v22 = *v3;
  v23 = v12;
  v24 = v13;
  v25 = v14;
  v26 = v15;
  HIBYTE(v21) = 0;
  v16 = sub_147688();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, &type metadata for WidgetData, v16);
  if (!v2)
  {
    v17 = (uint64_t)v3 + *(int *)(type metadata accessor for WidgetExposureEvent.Model(0) + 20);
    LOBYTE(v22) = 1;
    v18 = type metadata accessor for EventData(0);
    v19 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v22, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1528E0()
{
  unint64_t result;

  result = qword_2A1A68;
  if (!qword_2A1A68)
  {
    result = swift_getWitnessTable("m?\a", &type metadata for WidgetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1A68);
  }
  return result;
}

void WidgetExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  v29 = a2;
  v4 = type metadata accessor for EventData(0);
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  __chkstk_darwin(v4);
  v30 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_71B4(&qword_2A1A70);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetExposureEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_1528E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetExposureEvent.Model.CodingKeys, &type metadata for WidgetExposureEvent.Model.CodingKeys, v14, v13, v12);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v27 = v9;
    v28 = a1;
    v15 = v6;
    v16 = (uint64_t)v11;
    v18 = v30;
    v17 = v31;
    v19 = v32;
    v39 = 0;
    v20 = sub_147640();
    v21 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for WidgetData, &v39, v33, &type metadata for WidgetData, v20);
    v22 = v35;
    v23 = v36;
    v24 = v37;
    v25 = v38;
    *(_OWORD *)v16 = v34;
    *(_QWORD *)(v16 + 16) = v22;
    *(_QWORD *)(v16 + 24) = v23;
    *(_BYTE *)(v16 + 32) = v24;
    *(_BYTE *)(v16 + 33) = v25;
    LOBYTE(v34) = 1;
    v26 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, &v34, v21, v19, v26);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v21);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v16 + *(int *)(v27 + 20), v18, v19);
    sub_152BA8(v16, v29);
    sub_7DAC(v28);
    sub_152BEC(v16);
  }
}

uint64_t sub_152BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_152BEC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_152C28(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  WidgetExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_152C3C(_QWORD *a1)
{
  return WidgetExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_152C50@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A40, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1A28, (uint64_t)sub_15235C, a1);
}

uint64_t sub_152C74@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A48, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1A40, (uint64_t)sub_15239C, a1);
}

uint64_t sub_152C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for WidgetExposureEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_2A1A58);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for WidgetExposureEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for WidgetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for WidgetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for WidgetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for WidgetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2A1A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_153048);
}

uint64_t sub_153048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_2A1A58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WidgetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1530D0);
}

uint64_t sub_1530D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_2A1A58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_153154(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1531D8(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_1531D8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2A1AE0)
  {
    v2 = sub_147640();
    v3 = sub_147688();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for WidgetData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2A1AE0);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for WidgetExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    v10 = type metadata accessor for EventData(0);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t initializeWithCopy for WidgetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for WidgetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for WidgetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WidgetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_153530);
}

uint64_t sub_153530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1535B8);
}

uint64_t sub_1535B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_15362C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\"";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WidgetExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1536EC + 4 * byte_20CAE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_153720 + 4 * byte_20CAE0[v4]))();
}

uint64_t sub_153720(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_153728(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x153730);
  return result;
}

uint64_t sub_15373C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x153744);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_153748(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_153750(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetExposureEvent.Model.CodingKeys()
{
  return &type metadata for WidgetExposureEvent.Model.CodingKeys;
}

unint64_t sub_153770()
{
  unint64_t result;

  result = qword_2A1BA0;
  if (!qword_2A1BA0)
  {
    result = swift_getWitnessTable(byte_20CC64, &type metadata for WidgetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1BA0);
  }
  return result;
}

unint64_t sub_1537B8()
{
  unint64_t result;

  result = qword_2A1BA8;
  if (!qword_2A1BA8)
  {
    result = swift_getWitnessTable(byte_20CBD4, &type metadata for WidgetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1BA8);
  }
  return result;
}

unint64_t sub_153800()
{
  unint64_t result;

  result = qword_2A1BB0;
  if (!qword_2A1BB0)
  {
    result = swift_getWitnessTable(byte_20CBFC, &type metadata for WidgetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1BB0);
  }
  return result;
}

uint64_t sub_153844(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6144746567646977 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144746567646977, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

float SkipData.endTime.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void SkipData.endTime.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

void SkipData.skipDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 13);
}

_BYTE *SkipData.skipDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 13) = *result;
  return result;
}

void __swiftcall SkipData.init(startTime:endTime:skipInterval:skipDirection:skipActionType:listeningID:isBackgrounded:)(BookAnalytics::SkipData *__return_ptr retstr, Swift::Float startTime, Swift::Float endTime, Swift::Float_optional *skipInterval, BookAnalytics::SkipDirection skipDirection, BookAnalytics::SkipActionType skipActionType, Swift::String_optional listeningID, Swift::Bool isBackgrounded)
{
  BookAnalytics::SkipDirection v8;
  BookAnalytics::SkipActionType v9;

  v8 = *(_BYTE *)skipDirection;
  v9 = *(_BYTE *)skipActionType;
  retstr->startTime = startTime;
  retstr->endTime = endTime;
  LODWORD(retstr->skipInterval.value) = (_DWORD)skipInterval;
  retstr->skipInterval.is_nil = BYTE4(skipInterval) & 1;
  retstr->skipDirection = v8;
  retstr->skipActionType = v9;
  retstr->listeningID = listeningID;
  retstr->isBackgrounded = isBackgrounded;
}

uint64_t sub_1539A4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1539D8 + 4 * byte_20CCDC[*v0]))(0x6D69547472617473, 0xE900000000000065);
}

uint64_t sub_1539D8()
{
  return 0x656D6954646E65;
}

uint64_t sub_1539F0()
{
  return 0x65746E4970696B73;
}

uint64_t sub_153A10()
{
  return 0x6572694470696B73;
}

uint64_t sub_153A34()
{
  return 0x6974634170696B73;
}

uint64_t sub_153A58()
{
  return 0x6E696E657473696CLL;
}

uint64_t sub_153A78()
{
  return 0x72676B6361427369;
}

uint64_t sub_153A9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_15471C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_153AC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15421C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_153AE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15421C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SkipData.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  float v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  _BYTE v35[2];
  char v36;
  char v37;
  char v38;

  v4 = sub_71B4(&qword_2A1BB8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(float *)v1;
  v8 = *(float *)(v1 + 4);
  v29 = *(unsigned int *)(v1 + 8);
  v10 = *(unsigned __int8 *)(v1 + 12);
  v27 = *(unsigned __int8 *)(v1 + 13);
  v28 = v10;
  v26 = *(unsigned __int8 *)(v1 + 14);
  v11 = *(_QWORD *)(v1 + 24);
  v24 = *(_QWORD *)(v1 + 16);
  v25 = v11;
  v12 = *(unsigned __int8 *)(v1 + 32);
  v14 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v14);
  v15 = sub_15421C();
  v16 = v14;
  v17 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SkipData.CodingKeys, &type metadata for SkipData.CodingKeys, v15, v16, v13);
  v38 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v38, v4, v9);
  if (!v2)
  {
    v19 = v27;
    v18 = v28;
    v20 = v29;
    v37 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v17, v8);
    v36 = 2;
    v35[1] = v18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20 | ((unint64_t)v18 << 32), &v36, v17);
    v35[0] = v19;
    v34 = 3;
    v21 = sub_154260();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v34, v17, &type metadata for SkipDirection, v21);
    v33 = v26;
    v32 = 4;
    v22 = sub_1542A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v32, v17, &type metadata for SkipActionType, v22);
    v31 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v17);
    v30 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v12, &v30, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v17);
}

void SkipData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  BAEventReporter *v26;
  BAEventReporter *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;

  v5 = sub_71B4(&qword_2A1BD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_15421C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SkipData.CodingKeys, &type metadata for SkipData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v27 = 0;
  }
  else
  {
    BYTE5(v36) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v36 + 5, v5);
    BYTE4(v36) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v36 + 4, v5);
    BYTE3(v36) = 2;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v36 + 3, v5);
    BYTE1(v36) = 3;
    v15 = sub_1542E8();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v36 + 2), &type metadata for SkipDirection, (char *)&v36 + 1, v5, &type metadata for SkipDirection, v15);
    v16 = BYTE2(v36);
    v35 = 4;
    v17 = sub_15432C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, &type metadata for SkipActionType, &v35, v5, &type metadata for SkipActionType, v17);
    v31 = v36;
    v32 = v16;
    v34 = 5;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
    v27 = v26;
    v30 = v18;
    v33 = 6;
    swift_bridgeObjectRetain(v26);
    v28 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(float *)a2 = v12;
    *(float *)(a2 + 4) = v13;
    *(_DWORD *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 12) = BYTE4(v14) & 1;
    *(_BYTE *)(a2 + 13) = v32;
    *(_BYTE *)(a2 + 14) = v31;
    *(_QWORD *)(a2 + 16) = v30;
    *(_QWORD *)(a2 + 24) = v27;
    *(_BYTE *)(a2 + 32) = v28 & 1;
  }
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v27, v19, v20, v21, v22, v23, v24, v25);
}

void sub_154008(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SkipData.init(from:)(a1, a2);
}

uint64_t sub_15401C(_QWORD *a1)
{
  return SkipData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics8SkipDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BAEventReporter *v17;
  uint64_t v18;
  uint64_t v19;
  BAEventReporter *v20;
  char v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  char v36;
  char v37;
  int v38;

  result = 0;
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4))
    return result;
  v4 = *(unsigned __int8 *)(a1 + 13);
  v5 = *(_BYTE *)(a1 + 14);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned __int8 *)(a1 + 32);
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(unsigned __int8 *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 12))
      return 0;
  }
  else
  {
    if (*(float *)(a1 + 8) == *(float *)(a2 + 8))
      v12 = *(_BYTE *)(a2 + 12);
    else
      v12 = 1;
    if ((v12 & 1) != 0)
      return 0;
  }
  v13 = 0xE700000000000000;
  v14 = 0xE700000000000000;
  v15 = 0x64726177726F66;
  if (v4 != 1)
  {
    v15 = 1801675106;
    v14 = 0xE400000000000000;
  }
  if (v4)
    v16 = v15;
  else
    v16 = 0x6E776F6E6B6E75;
  if (v4)
    v17 = (BAEventReporter *)v14;
  else
    v17 = (BAEventReporter *)0xE700000000000000;
  v18 = 0x64726177726F66;
  if (*(_BYTE *)(a2 + 13) != 1)
  {
    v18 = 1801675106;
    v13 = 0xE400000000000000;
  }
  if (*(_BYTE *)(a2 + 13))
    v19 = v18;
  else
    v19 = 0x6E776F6E6B6E75;
  if (*(_BYTE *)(a2 + 13))
    v20 = (BAEventReporter *)v13;
  else
    v20 = (BAEventReporter *)0xE700000000000000;
  v38 = v8;
  if (v16 == v19 && v17 == v20)
  {
    swift_bridgeObjectRelease_n(v17, 2);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v19, v20, 0);
    swift_bridgeObjectRelease(v17, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(v20, v29, v30, v31, v32, v33, v34, v35);
    result = 0;
    if ((v21 & 1) == 0)
      return result;
  }
  sub_25A98(v5);
  if ((v36 & 1) == 0)
    return 0;
  if (!v7)
  {
    if (!v9)
      return v38 ^ v11 ^ 1u;
    return 0;
  }
  if (!v9)
    return 0;
  if (v6 == v10 && v7 == v9)
    return v38 ^ v11 ^ 1u;
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v9, 0);
  result = 0;
  if ((v37 & 1) != 0)
    return v38 ^ v11 ^ 1u;
  return result;
}

unint64_t sub_15421C()
{
  unint64_t result;

  result = qword_2A1BC0;
  if (!qword_2A1BC0)
  {
    result = swift_getWitnessTable("e?\a", &type metadata for SkipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1BC0);
  }
  return result;
}

unint64_t sub_154260()
{
  unint64_t result;

  result = qword_2A1BC8;
  if (!qword_2A1BC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SkipDirection, &type metadata for SkipDirection);
    atomic_store(result, (unint64_t *)&qword_2A1BC8);
  }
  return result;
}

unint64_t sub_1542A4()
{
  unint64_t result;

  result = qword_2A1BD0;
  if (!qword_2A1BD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SkipActionType, &type metadata for SkipActionType);
    atomic_store(result, (unint64_t *)&qword_2A1BD0);
  }
  return result;
}

unint64_t sub_1542E8()
{
  unint64_t result;

  result = qword_2A1BE0;
  if (!qword_2A1BE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SkipDirection, &type metadata for SkipDirection);
    atomic_store(result, (unint64_t *)&qword_2A1BE0);
  }
  return result;
}

unint64_t sub_15432C()
{
  unint64_t result;

  result = qword_2A1BE8;
  if (!qword_2A1BE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SkipActionType, &type metadata for SkipActionType);
    atomic_store(result, (unint64_t *)&qword_2A1BE8);
  }
  return result;
}

uint64_t destroy for SkipData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for SkipData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SkipData(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for SkipData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SkipData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SkipData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SkipData()
{
  return &type metadata for SkipData;
}

uint64_t storeEnumTagSinglePayload for SkipData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1545C4 + 4 * byte_20CCE8[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1545F8 + 4 * byte_20CCE3[v4]))();
}

uint64_t sub_1545F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_154600(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x154608);
  return result;
}

uint64_t sub_154614(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15461CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_154620(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_154628(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SkipData.CodingKeys()
{
  return &type metadata for SkipData.CodingKeys;
}

unint64_t sub_154648()
{
  unint64_t result;

  result = qword_2A1BF0;
  if (!qword_2A1BF0)
  {
    result = swift_getWitnessTable(byte_20CE6C, &type metadata for SkipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1BF0);
  }
  return result;
}

unint64_t sub_154690()
{
  unint64_t result;

  result = qword_2A1BF8;
  if (!qword_2A1BF8)
  {
    result = swift_getWitnessTable(byte_20CDDC, &type metadata for SkipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1BF8);
  }
  return result;
}

unint64_t sub_1546D8()
{
  unint64_t result;

  result = qword_2A1C00;
  if (!qword_2A1C00)
  {
    result = swift_getWitnessTable(byte_20CE04, &type metadata for SkipData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1C00);
  }
  return result;
}

uint64_t sub_15471C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D69547472617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D6954646E65, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65746E4970696B73 && a2 == 0xEC0000006C617672)
  {
    v8 = 0xEC0000006C617672;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E4970696B73, 0xEC0000006C617672, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6572694470696B73 && a2 == 0xED00006E6F697463)
  {
    v9 = 0xED00006E6F697463;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572694470696B73, 0xED00006E6F697463, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6974634170696B73 && a2 == 0xEE00657079546E6FLL)
  {
    v10 = 0xEE00657079546E6FLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974634170696B73, 0xEE00657079546E6FLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6E696E657473696CLL && a2 == 0xEB00000000444967)
  {
    v11 = 0xEB00000000444967;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696E657473696CLL, 0xEB00000000444967, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x72676B6361427369 && a2 == 0xEE006465646E756FLL)
  {
    swift_bridgeObjectRelease(0xEE006465646E756FLL);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72676B6361427369, 0xEE006465646E756FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_154AA8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1C08, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingOrientationChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A50, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1C08, a1);
}

uint64_t sub_154AE8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A1C20, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingOrientationChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A58, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1C20, a1);
}

uint64_t ReadingOrientationChangeEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingOrientationChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1CA8, (uint64_t)&nominal type descriptor for ReadingOrientationChangeEvent);
}

uint64_t ReadingOrientationChangeEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingOrientationChangeEvent.contentData.modify())()
{
  type metadata accessor for ReadingOrientationChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingOrientationChangeEvent.orientationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingOrientationChangeEvent.orientationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingOrientationChangeEvent.orientationData.modify())()
{
  type metadata accessor for ReadingOrientationChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingOrientationChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingOrientationChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingOrientationChangeEvent.eventData.modify())()
{
  type metadata accessor for ReadingOrientationChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingOrientationChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ReadingOrientationChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

__n128 ReadingOrientationChangeEvent.Model.orientationData.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = v1[8].n128_u32[0];
  result = v1[7];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  return result;
}

uint64_t ReadingOrientationChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingOrientationChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1D40, (uint64_t)&nominal type descriptor for ReadingOrientationChangeEvent.Model);
}

uint64_t ReadingOrientationChangeEvent.Model.init(readingSessionData:contentData:orientationData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 12);
  v11 = *((_BYTE *)a1 + 13);
  v12 = *((_BYTE *)a1 + 14);
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v18 = a2[5];
  v17 = a2[6];
  v19 = *((_WORD *)a2 + 28);
  v20 = *((_DWORD *)a2 + 15);
  v21 = *((_BYTE *)a2 + 64);
  v22 = *((_DWORD *)a2 + 17);
  v23 = *((_BYTE *)a2 + 72);
  v24 = *((_BYTE *)a2 + 77);
  v25 = *((_DWORD *)a3 + 4);
  *(_DWORD *)a5 = v7;
  *(_BYTE *)(a5 + 4) = v8;
  *(_DWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 12) = v10;
  *(_BYTE *)(a5 + 13) = v11;
  *(_BYTE *)(a5 + 14) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v17;
  *(_WORD *)(a5 + 72) = v19;
  *(_DWORD *)(a5 + 76) = v20;
  *(_BYTE *)(a5 + 80) = v21;
  *(_DWORD *)(a5 + 84) = v22;
  *(_BYTE *)(a5 + 88) = v23;
  *(_DWORD *)(a5 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a5 + 93) = v24;
  v26 = *a3;
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a5 + 112) = v26;
  *(_DWORD *)(a5 + 128) = v25;
  v27 = a5 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent.Model(0) + 28);
  v28 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v27, a4, v28);
}

uint64_t sub_154FD0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_155004 + 4 * byte_20CEF0[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_155004()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_155024()
{
  return 0x7461746E6569726FLL;
}

uint64_t sub_155048()
{
  return 0x746144746E657665;
}

uint64_t sub_155064@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_156A24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_155088(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_155344();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1550B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_155344();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingOrientationChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  char v43;
  int v44;
  char v45;
  int v46;
  char v47;
  __int128 v48;
  char v49;

  v3 = v1;
  v5 = sub_71B4(&qword_2A1C38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_155344();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingOrientationChangeEvent.Model.CodingKeys, &type metadata for ReadingOrientationChangeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v36) = *(_DWORD *)v3;
  BYTE4(v36) = v12;
  DWORD2(v36) = v13;
  BYTE12(v36) = v14;
  BYTE13(v36) = v15;
  BYTE14(v36) = v16;
  v49 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v49, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    *(_QWORD *)&v36 = *(_QWORD *)(v3 + 16);
    *((_QWORD *)&v36 + 1) = v18;
    LOBYTE(v37) = v19;
    v38 = v20;
    v39 = v21;
    v40 = v22;
    v41 = v23;
    v42 = v24;
    v43 = v25;
    v44 = v26;
    v45 = v27;
    v46 = *(_DWORD *)(v3 + 89);
    v47 = v28;
    v48 = *(_OWORD *)(v3 + 96);
    v49 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v49, v5, &type metadata for ContentData, v29);
    v30 = *(_DWORD *)(v3 + 128);
    v36 = *(_OWORD *)(v3 + 112);
    v37 = v30;
    v49 = 2;
    v31 = sub_7132C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, &v49, v5, &type metadata for OrientationData, v31);
    v32 = v3 + *(int *)(type metadata accessor for ReadingOrientationChangeEvent.Model(0) + 28);
    LOBYTE(v36) = 3;
    v33 = type metadata accessor for EventData(0);
    v34 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v36, v5, v33, v34);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_155344()
{
  unint64_t result;

  result = qword_2A1C40;
  if (!qword_2A1C40)
  {
    result = swift_getWitnessTable("e>\a", &type metadata for ReadingOrientationChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1C40);
  }
  return result;
}

void ReadingOrientationChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v49 = a2;
  v50 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_71B4(&qword_2A1C48);
  v6 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingOrientationChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v53 = a1;
  sub_7988(a1, v12);
  v14 = sub_155344();
  v51 = v8;
  v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingOrientationChangeEvent.Model.CodingKeys, &type metadata for ReadingOrientationChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v53);
  }
  else
  {
    v48 = v9;
    v16 = v6;
    v17 = v11;
    v18 = v5;
    v54 = v3;
    v19 = v50;
    v70 = 0;
    v20 = sub_71AEC();
    v21 = v51;
    v22 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ReadingSessionData, &v70, v52, &type metadata for ReadingSessionData, v20);
    v23 = BYTE4(v55);
    v24 = DWORD2(v55);
    v25 = BYTE12(v55);
    v26 = BYTE13(v55);
    v27 = BYTE14(v55);
    v28 = (uint64_t)v17;
    *(_DWORD *)v17 = v55;
    v17[4] = v23;
    *((_DWORD *)v17 + 2) = v24;
    v17[12] = v25;
    v17[13] = v26;
    v17[14] = v27;
    v70 = 1;
    v29 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ContentData, &v70, v22, &type metadata for ContentData, v29);
    v30 = *((_QWORD *)&v55 + 1);
    v31 = v56;
    v32 = v57;
    v33 = v58;
    v35 = v59;
    v34 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v63;
    v39 = v64;
    v40 = v65;
    v41 = v67;
    v43 = v68;
    v42 = v69;
    *(_QWORD *)(v28 + 16) = v55;
    *(_QWORD *)(v28 + 24) = v30;
    *(_BYTE *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v32;
    *(_QWORD *)(v28 + 48) = v33;
    *(_QWORD *)(v28 + 56) = v35;
    *(_QWORD *)(v28 + 64) = v34;
    v47[1] = v34;
    *(_WORD *)(v28 + 72) = v36;
    *(_DWORD *)(v28 + 76) = v37;
    *(_BYTE *)(v28 + 80) = v38;
    *(_DWORD *)(v28 + 84) = v39;
    *(_BYTE *)(v28 + 88) = v40;
    *(_DWORD *)(v28 + 89) = v66;
    *(_BYTE *)(v28 + 93) = v41;
    *(_QWORD *)(v28 + 96) = v43;
    *(_QWORD *)(v28 + 104) = v42;
    v47[2] = v42;
    v70 = 2;
    v44 = sub_71BB8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for OrientationData, &v70, v22, &type metadata for OrientationData, v44);
    v45 = v56;
    *(_OWORD *)(v28 + 112) = v55;
    *(_DWORD *)(v28 + 128) = v45;
    LOBYTE(v55) = 3;
    v46 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, &v55, v22, v19, v46);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v54 + 32))(v28 + *(int *)(v48 + 28), v18, v19);
    sub_15574C(v28, v49);
    sub_7DAC(v53);
    sub_155790(v28);
  }
}

uint64_t sub_15574C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingOrientationChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_155790(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadingOrientationChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1557CC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReadingOrientationChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1557E0(_QWORD *a1)
{
  return ReadingOrientationChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_1557F4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A50, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1C08, (uint64_t)sub_154AA8, a1);
}

uint64_t sub_155818@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A58, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1C20, (uint64_t)sub_154AE8, a1);
}

uint64_t sub_15583C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingOrientationChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_299210);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ReadingOrientationChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ReadingOrientationChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ReadingOrientationChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ReadingOrientationChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReadingOrientationChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingOrientationChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_155EB8);
}

uint64_t sub_155EB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_299210);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingOrientationChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_155F90);
}

uint64_t sub_155F90(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_299210);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_156064(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_2992F0, (uint64_t (*)(void))sub_71BB8, (uint64_t (*)(void))sub_7132C, (uint64_t)&type metadata for OrientationData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadingOrientationChangeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 7) = *(uint64_t *)((char *)a2 + 7);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v6;
    v7 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v7;
    *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)a2 + 89);
    *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
    v8 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v8;
    *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
    v9 = *(int *)(a3 + 28);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    v12 = type metadata accessor for EventData(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
  }
  return v3;
}

uint64_t initializeWithCopy for ReadingOrientationChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v11 = type metadata accessor for EventData(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for ReadingOrientationChangeEvent.Model(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v14 = a2[19];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v14;
  v15 = a2[21];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_DWORD *)(a1 + 84) = v15;
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v16 = *((_QWORD *)a2 + 13);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *((_OWORD *)a2 + 7);
  *(_DWORD *)(a1 + 128) = a2[32];
  *(_OWORD *)(a1 + 112) = v18;
  v19 = *(int *)(a3 + 28);
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for ReadingOrientationChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 112) = v7;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for ReadingOrientationChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingOrientationChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1566FC);
}

uint64_t sub_1566FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingOrientationChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_156784);
}

uint64_t sub_156784(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1567F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_20CFE8;
  v4[1] = &unk_20D000;
  v4[2] = &unk_20D018;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingOrientationChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1568CC + 4 * byte_20CEF9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_156900 + 4 * byte_20CEF4[v4]))();
}

uint64_t sub_156900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_156908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x156910);
  return result;
}

uint64_t sub_15691C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x156924);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_156928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_156930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingOrientationChangeEvent.Model.CodingKeys()
{
  return &type metadata for ReadingOrientationChangeEvent.Model.CodingKeys;
}

unint64_t sub_156950()
{
  unint64_t result;

  result = qword_2A1D80;
  if (!qword_2A1D80)
  {
    result = swift_getWitnessTable("}>\a", &type metadata for ReadingOrientationChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1D80);
  }
  return result;
}

unint64_t sub_156998()
{
  unint64_t result;

  result = qword_2A1D88;
  if (!qword_2A1D88)
  {
    result = swift_getWitnessTable(byte_20D03C, &type metadata for ReadingOrientationChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1D88);
  }
  return result;
}

unint64_t sub_1569E0()
{
  unint64_t result;

  result = qword_2A1D90;
  if (!qword_2A1D90)
  {
    result = swift_getWitnessTable(byte_20D064, &type metadata for ReadingOrientationChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1D90);
  }
  return result;
}

uint64_t sub_156A24(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x7461746E6569726FLL && a2 == 0xEF617461446E6F69)
  {
    v7 = 0xEF617461446E6F69;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEF617461446E6F69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::UserAction_optional __swiftcall UserAction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::UserAction_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2683D8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t UserAction.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E4974706FLL;
  if (*v0 != 1)
    v1 = 0x74754F74706FLL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_156CCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_27248(*a1, *a2);
}

unint64_t sub_156CDC()
{
  unint64_t result;

  result = qword_2A1D98;
  if (!qword_2A1D98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UserAction, &type metadata for UserAction);
    atomic_store(result, (unint64_t *)&qword_2A1D98);
  }
  return result;
}

Swift::Int sub_156D20()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE500000000000000;
  v3 = 0x6E4974706FLL;
  if (v1 != 1)
  {
    v3 = 0x74754F74706FLL;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_156DB8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE500000000000000;
  v3 = 0x6E4974706FLL;
  if (*v1 != 1)
  {
    v3 = 0x74754F74706FLL;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_156E2C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE500000000000000;
  v4 = 0x6E4974706FLL;
  if (v2 != 1)
  {
    v4 = 0x74754F74706FLL;
    v3 = 0xE600000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::UserAction_optional sub_156EC0(Swift::String *a1)
{
  return UserAction.init(rawValue:)(*a1);
}

void sub_156ECC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x6E4974706FLL;
  if (v2 != 1)
  {
    v5 = 0x74754F74706FLL;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_156F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_157098();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_156F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_157098();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for UserAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_157018 + 4 * byte_20D149[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_15704C + 4 * byte_20D144[v4]))();
}

uint64_t sub_15704C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_157054(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15705CLL);
  return result;
}

uint64_t sub_157068(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x157070);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_157074(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15707C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserAction()
{
  return &type metadata for UserAction;
}

unint64_t sub_157098()
{
  unint64_t result;

  result = qword_2A1DA0;
  if (!qword_2A1DA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UserAction, &type metadata for UserAction);
    atomic_store(result, (unint64_t *)&qword_2A1DA0);
  }
  return result;
}

unint64_t sub_1570E0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0xD000000000000010;
}

uint64_t sub_157120@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_157A30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_157144(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_157664();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15716C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_157664();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PrevAltContentExposureData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = sub_71B4(&qword_2A1DA8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v16 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_157664();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PrevAltContentExposureData.CodingKeys, &type metadata for PrevAltContentExposureData.CodingKeys, v11, v9, v10);
  v20 = v8;
  v19 = 0;
  v12 = sub_1576A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v4, &type metadata for ExposureType, v12);
  if (!v2)
  {
    v18 = v16;
    v17 = 1;
    v13 = sub_1576EC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, &type metadata for ExposureTypeView, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PrevAltContentExposureData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = sub_71B4(&qword_2A1DC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_157664();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PrevAltContentExposureData.CodingKeys, &type metadata for PrevAltContentExposureData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v19) = 0;
    v12 = sub_157730();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v19 + 2), &type metadata for ExposureType, (char *)&v19 + 1, v5, &type metadata for ExposureType, v12);
    v13 = BYTE2(v19);
    v18 = 1;
    v14 = sub_157774();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for ExposureTypeView, &v18, v5, &type metadata for ExposureTypeView, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v19;
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

uint64_t sub_15745C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return PrevAltContentExposureData.init(from:)(a1, a2);
}

uint64_t sub_157470(_QWORD *a1)
{
  return PrevAltContentExposureData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics26PrevAltContentExposureDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = 0x6E776F6E6B6E75;
  v3 = *a1;
  v4 = a1[1];
  v5 = a2[1];
  v6 = 0xE800000000000000;
  v7 = 0x6573616863727570;
  v8 = 0x800000000021D780;
  if (v3 != 1)
  {
    v7 = 0xD000000000000012;
    v6 = 0x800000000021D780;
  }
  if (*a1)
    v9 = v7;
  else
    v9 = 0x6E776F6E6B6E75;
  if (v3)
    v10 = v6;
  else
    v10 = 0xE700000000000000;
  v11 = 0x6573616863727570;
  if (*a2 == 1)
    v8 = 0xE800000000000000;
  else
    v11 = 0xD000000000000012;
  if (*a2)
    v12 = v11;
  else
    v12 = 0x6E776F6E6B6E75;
  if (*a2)
    v13 = v8;
  else
    v13 = 0xE700000000000000;
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n(v10, 2);
    goto LABEL_22;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v12, v13, 0);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v13);
  v15 = 0;
  if ((v14 & 1) != 0)
  {
LABEL_22:
    v16 = 0xE600000000000000;
    v17 = 0x656C676E6973;
    if (v4 != 1)
    {
      v17 = 2037277037;
      v16 = 0xE400000000000000;
    }
    if (v4)
      v18 = v17;
    else
      v18 = 0x6E776F6E6B6E75;
    if (v4)
      v19 = v16;
    else
      v19 = 0xE700000000000000;
    if (v5)
    {
      if (v5 == 1)
      {
        v20 = 0xE600000000000000;
        v2 = 0x656C676E6973;
        if (v18 != 0x656C676E6973)
          goto LABEL_39;
      }
      else
      {
        v20 = 0xE400000000000000;
        v2 = 2037277037;
        if (v18 != 2037277037)
          goto LABEL_39;
      }
    }
    else
    {
      v20 = 0xE700000000000000;
      if (v18 != 0x6E776F6E6B6E75)
        goto LABEL_39;
    }
    if (v19 == v20)
    {
      v15 = 1;
      v20 = v19;
LABEL_40:
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v20);
      return v15 & 1;
    }
LABEL_39:
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v2, v20, 0);
    goto LABEL_40;
  }
  return v15 & 1;
}

unint64_t sub_157664()
{
  unint64_t result;

  result = qword_2A1DB0;
  if (!qword_2A1DB0)
  {
    result = swift_getWitnessTable(")>\a", &type metadata for PrevAltContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1DB0);
  }
  return result;
}

unint64_t sub_1576A8()
{
  unint64_t result;

  result = qword_2A1DB8;
  if (!qword_2A1DB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ExposureType, &type metadata for ExposureType);
    atomic_store(result, (unint64_t *)&qword_2A1DB8);
  }
  return result;
}

unint64_t sub_1576EC()
{
  unint64_t result;

  result = qword_2A1DC0;
  if (!qword_2A1DC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ExposureTypeView, &type metadata for ExposureTypeView);
    atomic_store(result, (unint64_t *)&qword_2A1DC0);
  }
  return result;
}

unint64_t sub_157730()
{
  unint64_t result;

  result = qword_2A1DD0;
  if (!qword_2A1DD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ExposureType, &type metadata for ExposureType);
    atomic_store(result, (unint64_t *)&qword_2A1DD0);
  }
  return result;
}

unint64_t sub_157774()
{
  unint64_t result;

  result = qword_2A1DD8;
  if (!qword_2A1DD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ExposureTypeView, &type metadata for ExposureTypeView);
    atomic_store(result, (unint64_t *)&qword_2A1DD8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PrevAltContentExposureData(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_15780C + 4 * byte_20D265[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_157840 + 4 * byte_20D260[v4]))();
}

uint64_t sub_157840(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_157848(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x157850);
  return result;
}

uint64_t sub_15785C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x157864);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_157868(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_157870(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrevAltContentExposureData()
{
  return &type metadata for PrevAltContentExposureData;
}

uint64_t storeEnumTagSinglePayload for PrevAltContentExposureData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1578D8 + 4 * byte_20D26F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_15790C + 4 * byte_20D26A[v4]))();
}

uint64_t sub_15790C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_157914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15791CLL);
  return result;
}

uint64_t sub_157928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x157930);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_157934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15793C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrevAltContentExposureData.CodingKeys()
{
  return &type metadata for PrevAltContentExposureData.CodingKeys;
}

unint64_t sub_15795C()
{
  unint64_t result;

  result = qword_2A1DE0;
  if (!qword_2A1DE0)
  {
    result = swift_getWitnessTable(byte_20D3F8, &type metadata for PrevAltContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1DE0);
  }
  return result;
}

unint64_t sub_1579A4()
{
  unint64_t result;

  result = qword_2A1DE8;
  if (!qword_2A1DE8)
  {
    result = swift_getWitnessTable(byte_20D368, &type metadata for PrevAltContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1DE8);
  }
  return result;
}

unint64_t sub_1579EC()
{
  unint64_t result;

  result = qword_2A1DF0;
  if (!qword_2A1DF0)
  {
    result = swift_getWitnessTable(byte_20D390, &type metadata for PrevAltContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1DF0);
  }
  return result;
}

uint64_t sub_157A30(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000000222340;
    if (a2 == 0x8000000000222340)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222340, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000000222360)
  {
    swift_bridgeObjectRelease(0x8000000000222360);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000222360, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_157B1C()
{
  _BYTE *v0;

  if (*v0)
    return 0x65536E6F6974706FLL;
  else
    return 0xD000000000000010;
}

uint64_t sub_157B68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1582D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_157B8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_157FC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_157BB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_157FC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t OptionListData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v4 = sub_71B4(&qword_2A1DF8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v17 = v1[2];
  v18 = v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_157FC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OptionListData.CodingKeys, &type metadata for OptionListData.CodingKeys, v12, v10, v11);
  v21 = v9;
  v20 = 0;
  v13 = sub_71B4(&qword_299618);
  v14 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v4, v13, v14);
  if (!v2)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v17, &v19, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void OptionListData.init(from:)(_QWORD *a1@<X0>, BAEventReporter **a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  int64_t v19;
  int64_t v20;
  void *v21;
  uint64_t v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  char v33;
  char v34;
  BAEventReporter *v35;

  v5 = sub_71B4(&qword_2A1E08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_157FC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OptionListData.CodingKeys, &type metadata for OptionListData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v12 = 0;
    sub_7DAC(a1);
  }
  else
  {
    v13 = sub_71B4(&qword_299618);
    v34 = 0;
    v14 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v35, v13, &v34, v5, v13, v14);
    v12 = v35;
    v33 = 1;
    swift_bridgeObjectRetain(v35);
    v22 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = (BAEventReporter *)v22;
    a2[2] = v24;
    swift_bridgeObjectRetain(v24);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
}

void sub_157F18(_QWORD *a1@<X0>, BAEventReporter **a2@<X8>)
{
  OptionListData.init(from:)(a1, a2);
}

uint64_t sub_157F2C(_QWORD *a1)
{
  return OptionListData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics14OptionListDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v7)
      goto LABEL_4;
    return 0;
  }
  if (!v7 || (sub_66274(v4, v7) & 1) == 0)
    return 0;
LABEL_4:
  if (v5 == v8 && v6 == v9)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v8, v9, 0);
}

unint64_t sub_157FC8()
{
  unint64_t result;

  result = qword_2A1E00;
  if (!qword_2A1E00)
  {
    result = swift_getWitnessTable("!>\a", &type metadata for OptionListData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E00);
  }
  return result;
}

uint64_t destroy for OptionListData(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s13BookAnalytics14OptionListDataVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for OptionListData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for OptionListData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for OptionListData()
{
  return &type metadata for OptionListData;
}

uint64_t storeEnumTagSinglePayload for OptionListData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_158180 + 4 * byte_20D475[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1581B4 + 4 * byte_20D470[v4]))();
}

uint64_t sub_1581B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1581BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1581C4);
  return result;
}

uint64_t sub_1581D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1581D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1581DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1581E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OptionListData.CodingKeys()
{
  return &type metadata for OptionListData.CodingKeys;
}

unint64_t sub_158204()
{
  unint64_t result;

  result = qword_2A1E10;
  if (!qword_2A1E10)
  {
    result = swift_getWitnessTable(byte_20D5E8, &type metadata for OptionListData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E10);
  }
  return result;
}

unint64_t sub_15824C()
{
  unint64_t result;

  result = qword_2A1E18;
  if (!qword_2A1E18)
  {
    result = swift_getWitnessTable(byte_20D558, &type metadata for OptionListData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E18);
  }
  return result;
}

unint64_t sub_158294()
{
  unint64_t result;

  result = qword_2A1E20;
  if (!qword_2A1E20)
  {
    result = swift_getWitnessTable("y>\a", &type metadata for OptionListData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E20);
  }
  return result;
}

uint64_t sub_1582D8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000000222380;
    if (a2 == 0x8000000000222380)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000222380, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x65536E6F6974706FLL && a2 == 0xEE0064657463656CLL)
  {
    swift_bridgeObjectRelease(0xEE0064657463656CLL);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65536E6F6974706FLL, 0xEE0064657463656CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AltContentTypeExposureData.altContentID.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t AltContentTypeExposureData.altContentID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

void OnDevicePersonalizationPropertyData.onDevicePersonalizationUserStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *OnDevicePersonalizationPropertyData.onDevicePersonalizationUserStatus.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

void __swiftcall AltContentTypeExposureData.init(altContentType:altContentID:exposureType:exposureTypeView:altPricePoint:altPriceCurrency:productionType:)(BookAnalytics::AltContentTypeExposureData *__return_ptr retstr, BookAnalytics::ContentType altContentType, Swift::OpaquePointer altContentID, BookAnalytics::ExposureType exposureType, BookAnalytics::ExposureTypeView exposureTypeView, Swift::String_optional altPricePoint, Swift::String_optional altPriceCurrency, BookAnalytics::ProductionType_optional productionType)
{
  BookAnalytics::ExposureType v8;
  BookAnalytics::ExposureTypeView v9;
  BookAnalytics::ProductionType v10;

  v8 = *(_BYTE *)exposureType;
  v9 = *(_BYTE *)exposureTypeView;
  v10 = *(_BYTE *)productionType.value;
  retstr->altContentType = *(_BYTE *)altContentType;
  retstr->altContentID = altContentID;
  retstr->exposureType = v8;
  retstr->exposureTypeView = v9;
  retstr->altPricePoint = altPricePoint;
  retstr->altPriceCurrency = altPriceCurrency;
  retstr->productionType.value = v10;
}

uint64_t sub_158468(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1584AC + 4 * byte_20D660[a1]))(0x65746E6F43746C61, 0xEE0065707954746ELL);
}

uint64_t sub_1584BC()
{
  return 0x657275736F707865;
}

unint64_t sub_1584DC()
{
  return 0xD000000000000010;
}

uint64_t sub_158528()
{
  return 0x69746375646F7270;
}

uint64_t sub_15854C()
{
  unsigned __int8 *v0;

  return sub_158468(*v0);
}

uint64_t sub_158554@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1594CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_158578(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15909C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1585A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15909C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AltContentTypeExposureData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v4 = sub_71B4(&qword_2A1E28);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v33 = *((_QWORD *)v1 + 1);
  v35 = v1[16];
  v32 = v1[17];
  v9 = *((_QWORD *)v1 + 3);
  v30 = *((_QWORD *)v1 + 4);
  v31 = v9;
  v10 = *((_QWORD *)v1 + 6);
  v28 = *((_QWORD *)v1 + 5);
  v29 = v10;
  HIDWORD(v27) = v1[56];
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_15909C();
  v14 = v12;
  v15 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AltContentTypeExposureData.CodingKeys, &type metadata for AltContentTypeExposureData.CodingKeys, v13, v11, v14);
  LOBYTE(v34) = v8;
  v36 = 0;
  v16 = sub_FBF0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v36, v4, &type metadata for ContentType, v16);
  if (!v2)
  {
    v17 = v35;
    v18 = v32;
    v20 = v30;
    v19 = v31;
    v34 = v33;
    v36 = 1;
    v21 = sub_71B4(&qword_299618);
    v22 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v36, v15, v21, v22);
    LOBYTE(v34) = v17;
    v36 = 2;
    v23 = sub_1576A8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v36, v15, &type metadata for ExposureType, v23);
    LOBYTE(v34) = v18;
    v36 = 3;
    v24 = sub_1576EC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v36, v15, &type metadata for ExposureTypeView, v24);
    LOBYTE(v34) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v34, v15);
    LOBYTE(v34) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v34, v15);
    LOBYTE(v34) = BYTE4(v27);
    v36 = 6;
    v25 = sub_FC88C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v36, v15, &type metadata for ProductionType, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
}

void AltContentTypeExposureData.init(from:)(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  BAEventReporter *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  uint64_t v29;
  BAEventReporter *v30;
  BAEventReporter *v31;
  unint64_t v32;
  char v33;
  _BYTE *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  int64_t v53;
  int64_t v54;
  void *v55;
  BAEventReporter *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  int v61;
  int v62;
  BAEventReporter *v63;
  int v64;
  char v65;

  v5 = sub_71B4(&qword_2A1E38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_15909C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AltContentTypeExposureData.CodingKeys, &type metadata for AltContentTypeExposureData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v16, v17, v18, v19, v20, v21, v22);
    v56 = 0;
  }
  else
  {
    v65 = 0;
    v12 = sub_FC34();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for ContentType, &v65, v5, &type metadata for ContentType, v12);
    v13 = v63;
    v14 = sub_71B4(&qword_299618);
    v65 = 1;
    v15 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, v14, &v65, v5, v14, v15);
    v23 = v63;
    v65 = 2;
    v24 = sub_157730();
    swift_bridgeObjectRetain(v23);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for ExposureType, &v65, v5, &type metadata for ExposureType, v24);
    v64 = v63;
    v65 = 3;
    v25 = sub_157774();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for ExposureTypeView, &v65, v5, &type metadata for ExposureTypeView, v25);
    v61 = v63;
    v62 = v13;
    LOBYTE(v63) = 4;
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v63, v5);
    v28 = v27;
    v59 = v26;
    v60 = a2;
    LOBYTE(v63) = 5;
    swift_bridgeObjectRetain(v27);
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v63, v5);
    v31 = v30;
    v58 = v29;
    v65 = 6;
    v32 = sub_FC9E0();
    swift_bridgeObjectRetain(v31);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for ProductionType, &v65, v5, &type metadata for ProductionType, v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v33 = (char)v63;
    v34 = v60;
    *v60 = v62;
    *((_QWORD *)v34 + 1) = v23;
    v34[16] = v64;
    v34[17] = v61;
    *((_QWORD *)v34 + 3) = v59;
    *((_QWORD *)v34 + 4) = v28;
    *((_QWORD *)v34 + 5) = v58;
    *((_QWORD *)v34 + 6) = v31;
    v34[56] = v33;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v31, v35, v36, v37, v38, v39, v40, v41);
    swift_bridgeObjectRelease(v28, v42, v43, v44, v45, v46, v47, v48);
    v56 = v23;
  }
  swift_bridgeObjectRelease(v56, v49, v50, v51, v52, v53, v54, v55);
}

void sub_158C40(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  AltContentTypeExposureData.init(from:)(a1, a2);
}

uint64_t sub_158C54(_QWORD *a1)
{
  return AltContentTypeExposureData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics26AltContentTypeExposureDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BAEventReporter *v18;
  unint64_t v19;
  uint64_t v20;
  BAEventReporter *v21;
  char v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  uint64_t result;
  uint64_t v38;
  BAEventReporter *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BAEventReporter *v43;
  char v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  int64_t v56;
  int64_t v57;
  id v58;
  char v59;
  char v60;
  uint64_t v61;
  BAEventReporter *v62;
  BAEventReporter *v63;
  char v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;

  v83 = *(unsigned __int8 *)(a1 + 17);
  v84 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 40);
  v85 = *(_QWORD *)(a1 + 32);
  v86 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned __int8 *)(a1 + 56);
  v87 = *(_QWORD **)(a2 + 8);
  v88 = *(_QWORD **)(a1 + 8);
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 17);
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(unsigned __int8 *)(a2 + 56);
  sub_26C28(*(_BYTE *)a1);
  if ((v12 & 1) == 0)
    return 0;
  v80 = v6;
  v81 = v8;
  v82 = v7;
  v79 = v11;
  if ((sub_66274(v88, v87) & 1) == 0)
    return 0;
  v13 = 0x6E776F6E6B6E75;
  v14 = 0xE800000000000000;
  v15 = 0x6573616863727570;
  v16 = 0x800000000021D780;
  if (v84 != 1)
  {
    v15 = 0xD000000000000012;
    v14 = 0x800000000021D780;
  }
  if (v84)
    v17 = v15;
  else
    v17 = 0x6E776F6E6B6E75;
  if (v84)
    v18 = (BAEventReporter *)v14;
  else
    v18 = (BAEventReporter *)0xE700000000000000;
  v19 = 0x6573616863727570;
  if (v5 == 1)
    v16 = 0xE800000000000000;
  else
    v19 = 0xD000000000000012;
  if (v5)
    v20 = v19;
  else
    v20 = 0x6E776F6E6B6E75;
  if (v5)
    v21 = (BAEventReporter *)v16;
  else
    v21 = (BAEventReporter *)0xE700000000000000;
  if (v17 == v20 && v18 == v21)
  {
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v20, v21, 0);
    swift_bridgeObjectRelease(v18, v23, v24, v25, v26, v27, v28, v29);
    swift_bridgeObjectRelease(v21, v30, v31, v32, v33, v34, v35, v36);
    result = 0;
    if ((v22 & 1) == 0)
      return result;
  }
  if (v83)
  {
    if (v83 == 1)
      v38 = 0x656C676E6973;
    else
      v38 = 2037277037;
    if (v83 == 1)
      v39 = (BAEventReporter *)0xE600000000000000;
    else
      v39 = (BAEventReporter *)0xE400000000000000;
  }
  else
  {
    v39 = (BAEventReporter *)0xE700000000000000;
    v38 = 0x6E776F6E6B6E75;
  }
  v40 = 0xE600000000000000;
  v41 = 0x656C676E6973;
  if (v80 != 1)
  {
    v41 = 2037277037;
    v40 = 0xE400000000000000;
  }
  if (v80)
    v42 = v41;
  else
    v42 = 0x6E776F6E6B6E75;
  if (v80)
    v43 = (BAEventReporter *)v40;
  else
    v43 = (BAEventReporter *)0xE700000000000000;
  if (v38 == v42 && v39 == v43)
  {
    swift_bridgeObjectRelease_n(v39, 2);
  }
  else
  {
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v42, v43, 0);
    swift_bridgeObjectRelease(v39, v45, v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease(v43, v52, v53, v54, v55, v56, v57, v58);
    result = 0;
    if ((v44 & 1) == 0)
      return result;
  }
  if (!v85)
  {
    if (v82)
      return 0;
    goto LABEL_51;
  }
  if (!v82)
    return 0;
  if (v86 == v81 && v85 == v82
    || (v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v85, v81, v82, 0), result = 0, (v59 & 1) != 0))
  {
LABEL_51:
    if (v3)
    {
      if (!v10)
        return 0;
      if (v2 != v9 || v3 != v10)
      {
        v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v9, v10, 0);
        result = 0;
        if ((v60 & 1) == 0)
          return result;
      }
    }
    else if (v10)
    {
      return 0;
    }
    if (v4 == 3)
    {
      if (v79 == 3)
        return 1;
    }
    else if (v79 != 3)
    {
      if (v4)
      {
        if (v4 == 1)
        {
          v61 = 0x6375646F72506773;
          v62 = (BAEventReporter *)0xEC0000006E6F6974;
        }
        else
        {
          v61 = 0x6F725047536E6F6ELL;
          v62 = (BAEventReporter *)0xEF6E6F6974637564;
        }
      }
      else
      {
        v62 = (BAEventReporter *)0xE700000000000000;
        v61 = 0x6E776F6E6B6E75;
      }
      if (v79)
      {
        if (v79 == 1)
        {
          v13 = 0x6375646F72506773;
          v63 = (BAEventReporter *)0xEC0000006E6F6974;
        }
        else
        {
          v13 = 0x6F725047536E6F6ELL;
          v63 = (BAEventReporter *)0xEF6E6F6974637564;
        }
      }
      else
      {
        v63 = (BAEventReporter *)0xE700000000000000;
      }
      if (v61 == v13 && v62 == v63)
      {
        swift_bridgeObjectRelease_n(v62, 2);
        return 1;
      }
      v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, v13, v63, 0);
      swift_bridgeObjectRelease(v62, v65, v66, v67, v68, v69, v70, v71);
      swift_bridgeObjectRelease(v63, v72, v73, v74, v75, v76, v77, v78);
      if ((v64 & 1) != 0)
        return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_15909C()
{
  unint64_t result;

  result = qword_2A1E30;
  if (!qword_2A1E30)
  {
    result = swift_getWitnessTable(byte_20D830, &type metadata for AltContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E30);
  }
  return result;
}

uint64_t initializeWithCopy for AltContentTypeExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AltContentTypeExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for AltContentTypeExposureData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AltContentTypeExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AltContentTypeExposureData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AltContentTypeExposureData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AltContentTypeExposureData()
{
  return &type metadata for AltContentTypeExposureData;
}

uint64_t storeEnumTagSinglePayload for AltContentTypeExposureData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_159374 + 4 * byte_20D66C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1593A8 + 4 * byte_20D667[v4]))();
}

uint64_t sub_1593A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1593B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1593B8);
  return result;
}

uint64_t sub_1593C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1593CCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1593D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1593D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AltContentTypeExposureData.CodingKeys()
{
  return &type metadata for AltContentTypeExposureData.CodingKeys;
}

unint64_t sub_1593F8()
{
  unint64_t result;

  result = qword_2A1E40;
  if (!qword_2A1E40)
  {
    result = swift_getWitnessTable(byte_20D808, &type metadata for AltContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E40);
  }
  return result;
}

unint64_t sub_159440()
{
  unint64_t result;

  result = qword_2A1E48;
  if (!qword_2A1E48)
  {
    result = swift_getWitnessTable("q>\a", &type metadata for AltContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E48);
  }
  return result;
}

unint64_t sub_159488()
{
  unint64_t result;

  result = qword_2A1E50;
  if (!qword_2A1E50)
  {
    result = swift_getWitnessTable("Y>\a", &type metadata for AltContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E50);
  }
  return result;
}

uint64_t sub_1594CC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x65746E6F43746C61 && a2 == 0xEE0065707954746ELL)
  {
    v4 = 0xEE0065707954746ELL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6F43746C61, 0xEE0065707954746ELL, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x65746E6F43746C61 && a2 == 0xEC0000004449746ELL)
  {
    v6 = 0xEC0000004449746ELL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6F43746C61, 0xEC0000004449746ELL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEC00000065707954)
  {
    v7 = 0xEC00000065707954;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000000002223A0;
    if (a2 == 0x80000000002223A0)
      goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002223A0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0x6563697250746C61 && a2 == 0xED0000746E696F50)
  {
    v9 = 0xED0000746E696F50;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697250746C61, 0xED0000746E696F50, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x8000000000220DE0;
    if (a2 == 0x8000000000220DE0)
      goto LABEL_34;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220DE0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0x69746375646F7270 && a2 == 0xEE00657079546E6FLL)
  {
    swift_bridgeObjectRelease(0xEE00657079546E6FLL);
    return 6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69746375646F7270, 0xEE00657079546E6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_159808(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1E58, &enum case for SessionGroup.default(_:));
}

uint64_t static WelcomeScreenViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A60, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1E58, a1);
}

uint64_t sub_159848(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A1E70, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static WelcomeScreenViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A68, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1E70, a1);
}

uint64_t WelcomeScreenViewEvent.welcomeScreenData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2964C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t WelcomeScreenViewEvent.welcomeScreenData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2964C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t WelcomeScreenViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WelcomeScreenViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1EF8, (uint64_t)&nominal type descriptor for WelcomeScreenViewEvent);
}

uint64_t WelcomeScreenViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WelcomeScreenViewEvent.eventData.modify())()
{
  type metadata accessor for WelcomeScreenViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WelcomeScreenViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeScreenViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WelcomeScreenViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeScreenViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WelcomeScreenViewEvent.timedData.modify())()
{
  type metadata accessor for WelcomeScreenViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WelcomeScreenViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for WelcomeScreenViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t WelcomeScreenViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeScreenViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WelcomeScreenViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A1F90, (uint64_t)&nominal type descriptor for WelcomeScreenViewEvent.Model);
}

uint64_t WelcomeScreenViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeScreenViewEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WelcomeScreenViewEvent.Model.init(welcomeScreenData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_DWORD *)(a1 + 4);
  *(_BYTE *)a4 = *(_BYTE *)a1;
  *(_DWORD *)(a4 + 4) = v7;
  v8 = type metadata accessor for WelcomeScreenViewEvent.Model(0);
  v9 = a4 + *(int *)(v8 + 20);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a2, v10);
  v11 = a4 + *(int *)(v8 + 24);
  v12 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a3, v12);
}

unint64_t sub_159C88()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_159CF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_15B134(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_159D14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_159F3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_159D3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_159F3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WelcomeScreenViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _BYTE v23[4];
  int v24;

  v3 = v1;
  v5 = sub_71B4(&qword_2A1E88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_159F3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WelcomeScreenViewEvent.Model.CodingKeys, &type metadata for WelcomeScreenViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_DWORD *)(v3 + 4);
  v23[0] = *(_BYTE *)v3;
  v24 = v12;
  HIBYTE(v22) = 0;
  v13 = sub_129CC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, &type metadata for WelcomeScreenData, v13);
  if (!v2)
  {
    v14 = type metadata accessor for WelcomeScreenViewEvent.Model(0);
    v15 = v3 + *(int *)(v14 + 20);
    BYTE6(v22) = 1;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, (char *)&v22 + 6, v5, v16, v17);
    v18 = v3 + *(int *)(v14 + 24);
    BYTE5(v22) = 2;
    v19 = type metadata accessor for TimedData(0);
    v20 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, (char *)&v22 + 5, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_159F3C()
{
  unint64_t result;

  result = qword_2A1E90;
  if (!qword_2A1E90)
  {
    result = swift_getWitnessTable("U=\a", &type metadata for WelcomeScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1E90);
  }
  return result;
}

uint64_t WelcomeScreenViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;

  v31 = a2;
  v33 = type metadata accessor for TimedData(0);
  v30 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v5 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  v35 = v5;
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = sub_71B4(&qword_2A1E98);
  v8 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WelcomeScreenViewEvent.Model(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v15);
  v16 = sub_159F3C();
  v36 = v10;
  v17 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WelcomeScreenViewEvent.Model.CodingKeys, &type metadata for WelcomeScreenViewEvent.Model.CodingKeys, v16, v15, v14);
  if (v17)
    return sub_7DAC(a1);
  v18 = v13;
  v19 = v34;
  v20 = v35;
  v38 = a1;
  v41 = 0;
  v21 = sub_12DC0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for WelcomeScreenData, &v41, v37, &type metadata for WelcomeScreenData, v21);
  v22 = HIDWORD(v42);
  v23 = (uint64_t)v18;
  *v18 = v42;
  *((_DWORD *)v18 + 1) = v22;
  v40 = 1;
  v24 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v19, &v40, v37, v19, v24);
  v25 = v11;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v20 + 32))(v23 + *(int *)(v11 + 20), v7, v19);
  v39 = 2;
  v26 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v28 = v32;
  v27 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v33, &v39, v37, v33, v26);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v36, v37);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v30 + 32))(v23 + *(int *)(v25 + 24), v28, v27);
  sub_15A2A8(v23, v31);
  sub_7DAC(v38);
  return sub_15A2EC(v23);
}

uint64_t sub_15A2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WelcomeScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_15A2EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WelcomeScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_15A328@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WelcomeScreenViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_15A33C(_QWORD *a1)
{
  return WelcomeScreenViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_15A350@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A60, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1E58, (uint64_t)sub_159808, a1);
}

uint64_t sub_15A374@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A68, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A1E70, (uint64_t)sub_159848, a1);
}

uint64_t sub_15A398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for WelcomeScreenViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_2964C0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for WelcomeScreenViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for WelcomeScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for WelcomeScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for WelcomeScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for WelcomeScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for WelcomeScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15A8BC);
}

uint64_t sub_15A8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_2964C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WelcomeScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15A96C);
}

uint64_t sub_15A96C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_2964C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_15AA18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_15AAB8(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_15AAB8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_296570)
  {
    v2 = sub_12DC0();
    v3 = sub_129CC();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for WelcomeScreenData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_296570);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WelcomeScreenViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for EventData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

_QWORD *initializeWithCopy for WelcomeScreenViewEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for WelcomeScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for WelcomeScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for WelcomeScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15ADC4);
}

uint64_t sub_15ADC4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 251)
  {
    v4 = *a1;
    if (v4 >= 5)
      return v4 - 4;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WelcomeScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15AE68);
}

_BYTE *sub_15AE68(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 251)
  {
    *result = a2 + 4;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_15AF00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = "\b";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WelcomeScreenViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_15AFDC + 4 * byte_20D885[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_15B010 + 4 * byte_20D880[v4]))();
}

uint64_t sub_15B010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15B018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15B020);
  return result;
}

uint64_t sub_15B02C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15B034);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_15B038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15B040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WelcomeScreenViewEvent.Model.CodingKeys()
{
  return &type metadata for WelcomeScreenViewEvent.Model.CodingKeys;
}

unint64_t sub_15B060()
{
  unint64_t result;

  result = qword_2A1FD0;
  if (!qword_2A1FD0)
  {
    result = swift_getWitnessTable("m=\a", &type metadata for WelcomeScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1FD0);
  }
  return result;
}

unint64_t sub_15B0A8()
{
  unint64_t result;

  result = qword_2A1FD8;
  if (!qword_2A1FD8)
  {
    result = swift_getWitnessTable(byte_20D984, &type metadata for WelcomeScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1FD8);
  }
  return result;
}

unint64_t sub_15B0F0()
{
  unint64_t result;

  result = qword_2A1FE0;
  if (!qword_2A1FE0)
  {
    result = swift_getWitnessTable(byte_20D9AC, &type metadata for WelcomeScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A1FE0);
  }
  return result;
}

uint64_t sub_15B134(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x800000000021EBC0;
    if (a2 == 0x800000000021EBC0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021EBC0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v6 = 0xE900000000000061;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_15B29C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A1FE8, &enum case for SessionGroup.default(_:));
}

uint64_t static AppResumeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A70, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1FE8, a1);
}

uint64_t sub_15B2DC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A2000, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AppResumeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A78, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2000, a1);
}

uint64_t sub_15B31C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15B474();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15B344(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15B474();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppResumeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_71B4(&qword_2A2018);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_15B474();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppResumeEvent.Model.CodingKeys, &type metadata for AppResumeEvent.Model.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for EventData(0);
  v12 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_15B474()
{
  unint64_t result;

  result = qword_2A2020;
  if (!qword_2A2020)
  {
    result = swift_getWitnessTable(byte_20DC0C, &type metadata for AppResumeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2020);
  }
  return result;
}

uint64_t AppResumeEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for EventData(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_71B4(&qword_2A2028);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AppResumeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_15B474();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppResumeEvent.Model.CodingKeys, &type metadata for AppResumeEvent.Model.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_15B688((uint64_t)v11, v20);
  }
  return sub_7DAC(a1);
}

uint64_t type metadata accessor for AppResumeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2118, (uint64_t)&nominal type descriptor for AppResumeEvent.Model);
}

uint64_t sub_15B688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppResumeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_15B6CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AppResumeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_15B6E0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A70, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A1FE8, (uint64_t)sub_15B29C, a1);
}

uint64_t sub_15B704@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295A78, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2000, (uint64_t)sub_15B2DC, a1);
}

uint64_t getEnumTagSinglePayload for AppResumeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15B734);
}

uint64_t sub_15B734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AppResumeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15B780);
}

uint64_t sub_15B780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AppResumeEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2088, (uint64_t)&nominal type descriptor for AppResumeEvent);
}

uint64_t getEnumTagSinglePayload for AppResumeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15B7E4);
}

uint64_t sub_15B7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AppResumeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15B82C);
}

uint64_t sub_15B82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AppResumeEvent.Model.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_15B8AC + 4 * byte_20DA8C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_15B8CC + 4 * byte_20DA91[v4]))();
}

_BYTE *sub_15B8AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_15B8CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_15B8D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_15B8DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_15B8E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_15B8EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppResumeEvent.Model.CodingKeys()
{
  return &type metadata for AppResumeEvent.Model.CodingKeys;
}

unint64_t sub_15B90C()
{
  unint64_t result;

  result = qword_2A2150;
  if (!qword_2A2150)
  {
    result = swift_getWitnessTable(byte_20DBE4, &type metadata for AppResumeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2150);
  }
  return result;
}

unint64_t sub_15B954()
{
  unint64_t result;

  result = qword_2A2158;
  if (!qword_2A2158)
  {
    result = swift_getWitnessTable("E=\a", &type metadata for AppResumeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2158);
  }
  return result;
}

unint64_t sub_15B99C()
{
  unint64_t result;

  result = qword_2A2160;
  if (!qword_2A2160)
  {
    result = swift_getWitnessTable("-=\a", &type metadata for AppResumeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2A2160);
  }
  return result;
}

uint64_t sub_15B9E0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2A2168, &enum case for SessionGroup.default(_:));
}

uint64_t static SeriesExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A80, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2A2168, a1);
}

uint64_t sub_15BA20(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2A2180, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SeriesExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295A88, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2A2180, a1);
}

uint64_t SeriesExposureEvent.exposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2A2208, (uint64_t)&nominal type descriptor for SeriesExposureEvent);
}

uint64_t SeriesExposureEvent.exposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesExposureEvent.exposureData.modify())()
{
  type metadata accessor for SeriesExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

