void sub_7BAC8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2992F0)
  {
    v2 = sub_71BB8();
    v3 = sub_7132C();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for OrientationData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2992F0);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for AppSessionStartEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v5 = *(int *)(a3 + 20);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for AppSessionStartEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for AppSessionStartEvent.Model(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for AppSessionStartEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AppSessionStartEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppSessionStartEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7BD58);
}

uint64_t sub_7BD58(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 252)
  {
    if (*a1 <= 3u)
      v4 = 3;
    else
      v4 = *a1;
    v5 = v4 - 3;
    if (*a1 >= 3u)
      return v5;
    else
      return 0;
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for AppSessionStartEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7BDE4);
}

_BYTE *sub_7BDE4(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 252)
  {
    *result = a2 + 3;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_7BE54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1F96C0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppSessionStartEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_7BF14 + 4 * byte_1F95F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_7BF48 + 4 * byte_1F95F0[v4]))();
}

uint64_t sub_7BF48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7BF50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7BF58);
  return result;
}

uint64_t sub_7BF64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7BF6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_7BF70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7BF78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppSessionStartEvent.Model.CodingKeys()
{
  return &type metadata for AppSessionStartEvent.Model.CodingKeys;
}

unint64_t sub_7BF98()
{
  unint64_t result;

  result = qword_2999C8;
  if (!qword_2999C8)
  {
    result = swift_getWitnessTable(&unk_1F9774, &type metadata for AppSessionStartEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2999C8);
  }
  return result;
}

unint64_t sub_7BFE0()
{
  unint64_t result;

  result = qword_2999D0;
  if (!qword_2999D0)
  {
    result = swift_getWitnessTable(&unk_1F96E4, &type metadata for AppSessionStartEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2999D0);
  }
  return result;
}

unint64_t sub_7C028()
{
  unint64_t result;

  result = qword_2999D8;
  if (!qword_2999D8)
  {
    result = swift_getWitnessTable(&unk_1F970C, &type metadata for AppSessionStartEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2999D8);
  }
  return result;
}

uint64_t sub_7C06C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7461746E6569726FLL && a2 == 0xEF617461446E6F69)
  {
    v5 = 0xEF617461446E6F69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEF617461446E6F69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t NotificationEngagementData.targetID.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t NotificationEngagementData.targetID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

_BYTE *NotificationEngagementData.init(actionType:actionUrl:targetID:targetType:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6;

  v6 = *a5;
  *(_BYTE *)a6 = *result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = v6;
  return result;
}

uint64_t sub_7C1DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7C210 + 4 * byte_1F97F0[*v0]))(0x79546E6F69746361, 0xEA00000000006570);
}

uint64_t sub_7C210()
{
  return 0x72556E6F69746361;
}

uint64_t sub_7C22C()
{
  return 0x4449746567726174;
}

uint64_t sub_7C244()
{
  return 0x7954746567726174;
}

uint64_t sub_7C258@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7CE6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7C27C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7C8F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7C2A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7C8F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NotificationEngagementData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v4 = sub_71B4(&qword_2999E0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v23 = *((_QWORD *)v1 + 2);
  v24 = v9;
  v22 = *((_QWORD *)v1 + 3);
  v21 = v1[32];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_7C8F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationEngagementData.CodingKeys, &type metadata for NotificationEngagementData.CodingKeys, v12, v10, v11);
  v31 = v8;
  v30 = 0;
  v13 = sub_7C93C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v4, &type metadata for ActionType, v13);
  if (!v2)
  {
    v14 = v22;
    v15 = v21;
    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v23, &v29, v4);
    v25 = v14;
    v28 = 2;
    v16 = sub_71B4(&qword_299618);
    v17 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v28, v4, v16, v17);
    v27 = v15;
    v26 = 3;
    v18 = sub_7C980();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v4, &type metadata for TargetType, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t NotificationEngagementData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v5 = sub_71B4(&qword_299A00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_7C8F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationEngagementData.CodingKeys, &type metadata for NotificationEngagementData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v24 = 0;
  }
  else
  {
    BYTE3(v30) = 0;
    v12 = sub_7C9C4();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v30 + 4), &type metadata for ActionType, (char *)&v30 + 3, v5, &type metadata for ActionType, v12);
    v13 = BYTE4(v30);
    BYTE2(v30) = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v30 + 2, v5);
    v17 = v16;
    v26 = v14;
    v27 = v13;
    v18 = sub_71B4(&qword_299618);
    BYTE1(v30) = 2;
    v19 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v28, v18, (char *)&v30 + 1, v5, v18, v19);
    v25 = a2;
    v20 = v28;
    v29 = 3;
    v21 = sub_7CA08();
    swift_bridgeObjectRetain(v20);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for TargetType, &v29, v5, &type metadata for TargetType, v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v30;
    v23 = v25;
    *v25 = v27;
    *((_QWORD *)v23 + 1) = v26;
    *((_QWORD *)v23 + 2) = v17;
    *((_QWORD *)v23 + 3) = v20;
    v23[32] = v22;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v20);
    v24 = v17;
  }
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_7C774@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NotificationEngagementData.init(from:)(a1, a2);
}

uint64_t sub_7C788(_QWORD *a1)
{
  return NotificationEngagementData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics26NotificationEngagementDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  char v10;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD **)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  sub_27568(*(_BYTE *)a1);
  if ((v10 & 1) == 0)
    goto LABEL_34;
  if (v2 != v6 || v3 != v7)
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v6, v7, 0);
    v13 = 0;
    if ((v12 & 1) == 0)
      return v13 & 1;
  }
  if (!v4)
  {
    if (!v8)
      goto LABEL_10;
LABEL_34:
    v13 = 0;
    return v13 & 1;
  }
  if (!v8 || (sub_66274(v4, v8) & 1) == 0)
    goto LABEL_34;
LABEL_10:
  v14 = 0xD000000000000012;
  v15 = 0x800000000021E3F0;
  if (v5 == 1)
    v16 = 0xD000000000000012;
  else
    v16 = 0xD00000000000001ALL;
  if (v5 == 1)
    v17 = 0x800000000021E3F0;
  else
    v17 = 0x800000000021E410;
  if (v5)
    v18 = v16;
  else
    v18 = 0x6E776F6E6B6E75;
  if (v5)
    v19 = v17;
  else
    v19 = 0xE700000000000000;
  if (v9 != 1)
  {
    v14 = 0xD00000000000001ALL;
    v15 = 0x800000000021E410;
  }
  if (v9)
    v20 = v14;
  else
    v20 = 0x6E776F6E6B6E75;
  if (v9)
    v21 = v15;
  else
    v21 = 0xE700000000000000;
  if (v18 == v20 && v19 == v21)
  {
    v13 = 1;
    v21 = v19;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0);
  }
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v21);
  return v13 & 1;
}

unint64_t sub_7C8F8()
{
  unint64_t result;

  result = qword_2999E8;
  if (!qword_2999E8)
  {
    result = swift_getWitnessTable(&unk_1F99B0, &type metadata for NotificationEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2999E8);
  }
  return result;
}

unint64_t sub_7C93C()
{
  unint64_t result;

  result = qword_2999F0;
  if (!qword_2999F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_2999F0);
  }
  return result;
}

unint64_t sub_7C980()
{
  unint64_t result;

  result = qword_2999F8;
  if (!qword_2999F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TargetType, &type metadata for TargetType);
    atomic_store(result, (unint64_t *)&qword_2999F8);
  }
  return result;
}

unint64_t sub_7C9C4()
{
  unint64_t result;

  result = qword_299A08;
  if (!qword_299A08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_299A08);
  }
  return result;
}

unint64_t sub_7CA08()
{
  unint64_t result;

  result = qword_299A10;
  if (!qword_299A10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TargetType, &type metadata for TargetType);
    atomic_store(result, (unint64_t *)&qword_299A10);
  }
  return result;
}

unint64_t sub_7CA50()
{
  unint64_t result;

  result = qword_299A18;
  if (!qword_299A18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationEngagementData, &type metadata for NotificationEngagementData);
    atomic_store(result, (unint64_t *)&qword_299A18);
  }
  return result;
}

unint64_t sub_7CA98()
{
  unint64_t result;

  result = qword_299A20;
  if (!qword_299A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationEngagementData, &type metadata for NotificationEngagementData);
    atomic_store(result, (unint64_t *)&qword_299A20);
  }
  return result;
}

uint64_t destroy for NotificationEngagementData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for NotificationEngagementData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for NotificationEngagementData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for ThemesData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NotificationEngagementData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationEngagementData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationEngagementData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationEngagementData()
{
  return &type metadata for NotificationEngagementData;
}

uint64_t storeEnumTagSinglePayload for NotificationEngagementData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_7CD14 + 4 * byte_1F97F9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_7CD48 + 4 * byte_1F97F4[v4]))();
}

uint64_t sub_7CD48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7CD50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7CD58);
  return result;
}

uint64_t sub_7CD64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7CD6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_7CD70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7CD78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationEngagementData.CodingKeys()
{
  return &type metadata for NotificationEngagementData.CodingKeys;
}

unint64_t sub_7CD98()
{
  unint64_t result;

  result = qword_299A28;
  if (!qword_299A28)
  {
    result = swift_getWitnessTable(&unk_1F9988, &type metadata for NotificationEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299A28);
  }
  return result;
}

unint64_t sub_7CDE0()
{
  unint64_t result;

  result = qword_299A30;
  if (!qword_299A30)
  {
    result = swift_getWitnessTable(&unk_1F98F8, &type metadata for NotificationEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299A30);
  }
  return result;
}

unint64_t sub_7CE28()
{
  unint64_t result;

  result = qword_299A38;
  if (!qword_299A38)
  {
    result = swift_getWitnessTable(&unk_1F9920, &type metadata for NotificationEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299A38);
  }
  return result;
}

uint64_t sub_7CE6C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x79546E6F69746361 && a2 == 0xEA00000000006570)
  {
    v5 = 0xEA00000000006570;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79546E6F69746361, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x72556E6F69746361 && a2 == 0xE90000000000006CLL)
  {
    v7 = 0xE90000000000006CLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72556E6F69746361, 0xE90000000000006CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4449746567726174 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449746567726174, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7954746567726174 && a2 == 0xEA00000000006570)
  {
    swift_bridgeObjectRelease(0xEA00000000006570);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7954746567726174, 0xEA00000000006570, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_7D048(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_299A40, &enum case for SessionGroup.default(_:));
}

uint64_t static StreamingBitrateChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299A40, a1);
}

uint64_t sub_7D088(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_299A58, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static StreamingBitrateChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299A58, a1);
}

uint64_t StreamingBitrateChangeEvent.bitRateData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for StreamingBitrateChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_299AE0, (uint64_t)&nominal type descriptor for StreamingBitrateChangeEvent);
}

uint64_t StreamingBitrateChangeEvent.bitRateData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*StreamingBitrateChangeEvent.bitRateData.modify())()
{
  type metadata accessor for StreamingBitrateChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t StreamingBitrateChangeEvent.errorData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StreamingBitrateChangeEvent.errorData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*StreamingBitrateChangeEvent.errorData.modify())()
{
  type metadata accessor for StreamingBitrateChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t StreamingBitrateChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StreamingBitrateChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*StreamingBitrateChangeEvent.eventData.modify())()
{
  type metadata accessor for StreamingBitrateChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t StreamingBitrateChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for StreamingBitrateChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

void StreamingBitrateChangeEvent.Model.bitRateData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 100);
  v3 = *(_DWORD *)(v1 + 104);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 96);
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
}

uint64_t StreamingBitrateChangeEvent.Model.errorData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[15];
  v3 = v1[16];
  v4 = v1[17];
  *a1 = v1[14];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t StreamingBitrateChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for StreamingBitrateChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_299B78, (uint64_t)&nominal type descriptor for StreamingBitrateChangeEvent.Model);
}

uint64_t StreamingBitrateChangeEvent.Model.init(contentData:bitRateData:errorData:eventData:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  char v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_WORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 60);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_DWORD *)(a1 + 68);
  v15 = *(_BYTE *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 77);
  v17 = *a2;
  v18 = *((_BYTE *)a2 + 4);
  v19 = a2[2];
  v20 = *a3;
  v22 = *((_QWORD *)a3 + 2);
  v21 = *((_QWORD *)a3 + 3);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v6;
  *(_BYTE *)(a5 + 16) = v7;
  *(_OWORD *)(a5 + 24) = v8;
  *(_QWORD *)(a5 + 40) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  *(_WORD *)(a5 + 56) = v11;
  *(_DWORD *)(a5 + 60) = v12;
  *(_BYTE *)(a5 + 64) = v13;
  *(_DWORD *)(a5 + 68) = v14;
  *(_BYTE *)(a5 + 72) = v15;
  *(_DWORD *)(a5 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a5 + 77) = v16;
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_DWORD *)(a5 + 96) = v17;
  *(_BYTE *)(a5 + 100) = v18;
  *(_DWORD *)(a5 + 104) = v19;
  *(_OWORD *)(a5 + 112) = v20;
  *(_QWORD *)(a5 + 128) = v22;
  *(_QWORD *)(a5 + 136) = v21;
  v23 = a5 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent.Model(0) + 28);
  v24 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a4, v24);
}

uint64_t sub_7D578()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7D5B0 + 4 * byte_1F9A00[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_7D5B0()
{
  return 0x4465746152746962;
}

uint64_t sub_7D5C4()
{
  return 0x746144726F727265;
}

uint64_t sub_7D5F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7F024(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7D614(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7D8B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7D63C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7D8B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t StreamingBitrateChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  __int128 v49;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_299A70);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_7D8B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for StreamingBitrateChangeEvent.Model.CodingKeys, &type metadata for StreamingBitrateChangeEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v37 = *(_QWORD *)v4;
  *((_QWORD *)&v37 + 1) = v13;
  LOBYTE(v38) = v14;
  v39 = v15;
  v40 = v16;
  v41 = v17;
  v42 = v18;
  v43 = v19;
  v44 = v20;
  v45 = v21;
  v46 = v22;
  v47 = *(_DWORD *)(v4 + 73);
  v48 = v23;
  v49 = *(_OWORD *)(v4 + 80);
  v36 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_BYTE *)(v4 + 100);
    v26 = *(_DWORD *)(v4 + 104);
    LODWORD(v37) = *(_DWORD *)(v4 + 96);
    BYTE4(v37) = v25;
    DWORD2(v37) = v26;
    v36 = 1;
    v27 = sub_171E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v6, &type metadata for BitRateData, v27);
    v28 = *(_QWORD *)(v4 + 128);
    v29 = *(_QWORD *)(v4 + 136);
    v37 = *(_OWORD *)(v4 + 112);
    v38 = v28;
    *(_QWORD *)&v39 = v29;
    v36 = 2;
    v30 = sub_17228();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v6, &type metadata for ErrorData, v30);
    v31 = v4 + *(int *)(type metadata accessor for StreamingBitrateChangeEvent.Model(0) + 28);
    LOBYTE(v37) = 3;
    v32 = type metadata accessor for EventData(0);
    v33 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v37, v6, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_7D8B8()
{
  unint64_t result;

  result = qword_299A78;
  if (!qword_299A78)
  {
    result = swift_getWitnessTable(&unk_1F9C04, &type metadata for StreamingBitrateChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299A78);
  }
  return result;
}

uint64_t StreamingBitrateChangeEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  char v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  char v54;
  int v55;
  char v56;
  int v57;
  char v58;
  __int128 v59;
  char v60;

  v41 = a2;
  v42 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v5 = (uint64_t *)((char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_71B4(&qword_299A80);
  v6 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StreamingBitrateChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v45 = a1;
  sub_7988(a1, v12);
  v14 = sub_7D8B8();
  v43 = v8;
  v15 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StreamingBitrateChangeEvent.Model.CodingKeys, &type metadata for StreamingBitrateChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(v45);
  v40 = v9;
  v46 = v3;
  v16 = v42;
  v60 = 0;
  v17 = sub_1779C();
  v18 = v43;
  v19 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for ContentData, &v60, v44, &type metadata for ContentData, v17);
  v20 = *((_QWORD *)&v47 + 1);
  v21 = v48;
  v22 = v49;
  v23 = v50;
  v24 = v51;
  v25 = v52;
  v26 = v53;
  v27 = v54;
  v28 = v55;
  v29 = v56;
  v30 = v58;
  *(_QWORD *)v11 = v47;
  *((_QWORD *)v11 + 1) = v20;
  v11[16] = v21;
  *(_OWORD *)(v11 + 24) = v22;
  *((_QWORD *)v11 + 5) = v23;
  *((_QWORD *)v11 + 6) = v24;
  *((_WORD *)v11 + 28) = v25;
  *((_DWORD *)v11 + 15) = v26;
  v11[64] = v27;
  *((_DWORD *)v11 + 17) = v28;
  v11[72] = v29;
  *(_DWORD *)(v11 + 73) = v57;
  v11[77] = v30;
  *((_OWORD *)v11 + 5) = v59;
  v60 = 1;
  v31 = sub_17868();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for BitRateData, &v60, v19, &type metadata for BitRateData, v31);
  v32 = BYTE4(v47);
  v33 = DWORD2(v47);
  *((_DWORD *)v11 + 24) = v47;
  v11[100] = v32;
  *((_DWORD *)v11 + 26) = v33;
  v60 = 2;
  v34 = sub_178AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for ErrorData, &v60, v19, &type metadata for ErrorData, v34);
  v35 = v48;
  v36 = v49;
  *((_OWORD *)v11 + 7) = v47;
  *((_QWORD *)v11 + 16) = v35;
  *((_QWORD *)v11 + 17) = v36;
  LOBYTE(v47) = 3;
  v37 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v47, v19, v16, v37);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v44);
  (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 32))(&v11[*(int *)(v40 + 28)], v5, v16);
  sub_7DCB0((uint64_t)v11, v41);
  sub_7DAC(v45);
  return sub_7DCF4((uint64_t)v11);
}

uint64_t sub_7DCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StreamingBitrateChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_7DCF4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StreamingBitrateChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_7DD30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return StreamingBitrateChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_7DD44(_QWORD *a1)
{
  return StreamingBitrateChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_7DD58@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299A40, (uint64_t)sub_7D048, a1);
}

uint64_t sub_7DD7C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299A58, (uint64_t)sub_7D088, a1);
}

uint64_t sub_7DDA0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for StreamingBitrateChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296778);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296780);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for StreamingBitrateChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for StreamingBitrateChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for StreamingBitrateChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for StreamingBitrateChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for StreamingBitrateChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingBitrateChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7E408);
}

uint64_t sub_7E408(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296778);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296780);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for StreamingBitrateChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7E4E0);
}

uint64_t sub_7E4E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296778);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296780);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_7E5B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_296870, (uint64_t (*)(void))sub_17868, (uint64_t (*)(void))sub_171E4, (uint64_t)&type metadata for BitRateData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_296878, (uint64_t (*)(void))sub_178AC, (uint64_t (*)(void))sub_17228, (uint64_t)&type metadata for ErrorData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for StreamingBitrateChangeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v16);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(_QWORD *)(a1 + 96) = a2[12];
    v10 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v10;
    v11 = a2[17];
    v12 = *(int *)(a3 + 28);
    v18 = (uint64_t)a2 + v12;
    v13 = a1 + v12;
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v11;
    v14 = type metadata accessor for EventData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    v15(v13, v18, v14);
  }
  return v3;
}

uint64_t destroy for StreamingBitrateChangeEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for StreamingBitrateChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  v11 = *(int *)(a3 + 28);
  v16 = a2 + v11;
  v12 = a1 + v11;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v14(v12, v16, v13);
  return a1;
}

uint64_t assignWithCopy for StreamingBitrateChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v16;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = *(int *)(a3 + 28);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

uint64_t initializeWithTake for StreamingBitrateChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for StreamingBitrateChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingBitrateChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7ECFC);
}

uint64_t sub_7ECFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StreamingBitrateChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7ED84);
}

uint64_t sub_7ED84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_7EDF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_1F9B10;
  v4[2] = &unk_1F9B28;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StreamingBitrateChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_7EECC + 4 * byte_1F9A09[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_7EF00 + 4 * byte_1F9A04[v4]))();
}

uint64_t sub_7EF00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EF08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7EF10);
  return result;
}

uint64_t sub_7EF1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7EF24);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_7EF28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EF30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StreamingBitrateChangeEvent.Model.CodingKeys()
{
  return &type metadata for StreamingBitrateChangeEvent.Model.CodingKeys;
}

unint64_t sub_7EF50()
{
  unint64_t result;

  result = qword_299BB8;
  if (!qword_299BB8)
  {
    result = swift_getWitnessTable(&unk_1F9BDC, &type metadata for StreamingBitrateChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299BB8);
  }
  return result;
}

unint64_t sub_7EF98()
{
  unint64_t result;

  result = qword_299BC0;
  if (!qword_299BC0)
  {
    result = swift_getWitnessTable(&unk_1F9B4C, &type metadata for StreamingBitrateChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299BC0);
  }
  return result;
}

unint64_t sub_7EFE0()
{
  unint64_t result;

  result = qword_299BC8;
  if (!qword_299BC8)
  {
    result = swift_getWitnessTable(&unk_1F9B74, &type metadata for StreamingBitrateChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299BC8);
  }
  return result;
}

uint64_t sub_7F024(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4465746152746962 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4465746152746962, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144726F727265 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144726F727265, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::ContentEnvironment_optional __swiftcall ContentEnvironment.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ContentEnvironment_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267088, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ContentEnvironment.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7F2A0 + 4 * byte_1F9C60[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_7F2A0()
{
  return 24945;
}

uint64_t sub_7F2AC()
{
  return 0x676E6967617473;
}

uint64_t sub_7F2C0()
{
  return 1685025392;
}

void sub_7F2D0(char *a1)
{
  sub_29030(*a1);
}

unint64_t sub_7F2E0()
{
  unint64_t result;

  result = qword_299BD0;
  if (!qword_299BD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentEnvironment, &type metadata for ContentEnvironment);
    atomic_store(result, (unint64_t *)&qword_299BD0);
  }
  return result;
}

void sub_7F324()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_7F370()
{
  uint64_t v1;

  String.hash(into:)(&v1, 24945, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_7F3C8()
{
  __asm { BR              X10 }
}

uint64_t sub_7F404(uint64_t a1)
{
  String.hash(into:)(a1, 24945, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_7F448(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_7F490()
{
  uint64_t v1;

  String.hash(into:)(&v1, 24945, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

BookAnalytics::ContentEnvironment_optional sub_7F4E8(Swift::String *a1)
{
  return ContentEnvironment.init(rawValue:)(*a1);
}

uint64_t sub_7F4F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_7F524 + 4 * byte_1F9C70[*v0]))();
}

void sub_7F524(_QWORD *a1@<X8>)
{
  *a1 = 24945;
  a1[1] = 0xE200000000000000;
}

void sub_7F534(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x676E6967617473;
  a1[1] = v1;
}

void sub_7F54C(_QWORD *a1@<X8>)
{
  *a1 = 1685025392;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_7F560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_7F6D4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_7F5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_7F6D4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ContentEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_7F654 + 4 * byte_1F9C79[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_7F688 + 4 * byte_1F9C74[v4]))();
}

uint64_t sub_7F688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7F690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7F698);
  return result;
}

uint64_t sub_7F6A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7F6ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_7F6B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7F6B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentEnvironment()
{
  return &type metadata for ContentEnvironment;
}

unint64_t sub_7F6D4()
{
  unint64_t result;

  result = qword_299BD8;
  if (!qword_299BD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentEnvironment, &type metadata for ContentEnvironment);
    atomic_store(result, (unint64_t *)&qword_299BD8);
  }
  return result;
}

uint64_t sub_7F718(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_299BE0, &enum case for SessionGroup.default(_:));
}

uint64_t static RoomViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299BE0, a1);
}

uint64_t sub_7F758(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_299BF8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RoomViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299BF8, a1);
}

uint64_t RoomViewEvent.roomData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299C10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t RoomViewEvent.roomData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299C10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t RoomViewEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RoomViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_299C98, (uint64_t)&nominal type descriptor for RoomViewEvent);
}

uint64_t RoomViewEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RoomViewEvent.linkData.modify())()
{
  type metadata accessor for RoomViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RoomViewEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RoomViewEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RoomViewEvent.upSellData.modify())()
{
  type metadata accessor for RoomViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RoomViewEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 28);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RoomViewEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 28);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RoomViewEvent.suggestionData.modify())()
{
  type metadata accessor for RoomViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RoomViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RoomViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RoomViewEvent.eventData.modify())()
{
  type metadata accessor for RoomViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RoomViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RoomViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RoomViewEvent.timedData.modify())()
{
  type metadata accessor for RoomViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RoomViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_299C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RoomViewEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v8, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v2, v15);
}

uint64_t RoomViewEvent.Model.roomData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

_QWORD *RoomViewEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  uint64_t v12;

  v2 = *(_OWORD *)(v1 + 168);
  v11[6] = *(_OWORD *)(v1 + 152);
  v11[7] = v2;
  v11[8] = *(_OWORD *)(v1 + 184);
  v12 = *(_QWORD *)(v1 + 200);
  v3 = *(_OWORD *)(v1 + 104);
  v11[2] = *(_OWORD *)(v1 + 88);
  v11[3] = v3;
  v4 = *(_OWORD *)(v1 + 136);
  v11[4] = *(_OWORD *)(v1 + 120);
  v11[5] = v4;
  v5 = *(_OWORD *)(v1 + 72);
  v11[0] = *(_OWORD *)(v1 + 56);
  v11[1] = v5;
  v6 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 152);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 184);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 200);
  v7 = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(v1 + 136);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 16) = v9;
  return sub_2DC18(v11);
}

uint64_t RoomViewEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 224);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 208);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

void RoomViewEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 232);
}

uint64_t RoomViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RoomViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_299D40, (uint64_t)&nominal type descriptor for RoomViewEvent.Model);
}

uint64_t RoomViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RoomViewEvent.Model(0) + 36);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RoomViewEvent.Model.init(roomData:linkData:upSellData:suggestionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_OWORD *)(a7 + 40) = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a7 + 152) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a7 + 168) = v10;
  *(_OWORD *)(a7 + 184) = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a7 + 88) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a7 + 104) = v11;
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a7 + 120) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a7 + 136) = v12;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a7 + 56) = *(_OWORD *)a2;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *a4;
  *(_QWORD *)(a7 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a7 + 24) = v14;
  *(_BYTE *)(a7 + 32) = v15;
  *(_QWORD *)(a7 + 200) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a7 + 72) = v13;
  *(_OWORD *)(a7 + 208) = *(_OWORD *)a3;
  *(_QWORD *)(a7 + 224) = v16;
  *(_BYTE *)(a7 + 232) = v17;
  v18 = type metadata accessor for RoomViewEvent.Model(0);
  v19 = a7 + *(int *)(v18 + 32);
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a5, v20);
  v21 = a7 + *(int *)(v18 + 36);
  v22 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a6, v22);
}

uint64_t sub_7FFE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_80018 + 4 * byte_1F9DA8[*v0]))(0x617461446D6F6F72, 0xE800000000000000);
}

uint64_t sub_80018()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_8002C()
{
  return 0x61446C6C65537075;
}

uint64_t sub_80048()
{
  return 0x6974736567677573;
}

uint64_t sub_8006C()
{
  return 0x746144746E657665;
}

uint64_t sub_80098@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_825D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_800BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_80438();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_800E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_80438();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RoomViewEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;

  v3 = v1;
  v5 = sub_71B4(&qword_299C18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_80438();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RoomViewEvent.Model.CodingKeys, &type metadata for RoomViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v14 = *((_BYTE *)v3 + 32);
  v45 = *v3;
  v46 = v12;
  v47 = v13;
  v48 = v14;
  v49 = *(__int128 *)((char *)v3 + 40);
  v44 = 0;
  v15 = sub_8047C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v44, v5, &type metadata for RoomData, v15);
  if (!v2)
  {
    v16 = *(__int128 *)((char *)v3 + 168);
    v40 = *(__int128 *)((char *)v3 + 152);
    v41 = v16;
    v42 = *(__int128 *)((char *)v3 + 184);
    v43 = *((_QWORD *)v3 + 25);
    v17 = *(__int128 *)((char *)v3 + 104);
    v36 = *(__int128 *)((char *)v3 + 88);
    v37 = v17;
    v18 = *(__int128 *)((char *)v3 + 136);
    v38 = *(__int128 *)((char *)v3 + 120);
    v39 = v18;
    v19 = *(__int128 *)((char *)v3 + 72);
    v34 = *(__int128 *)((char *)v3 + 56);
    v35 = v19;
    v33 = 1;
    v20 = sub_1B7F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v5, &type metadata for LinkData, v20);
    v21 = *((_QWORD *)v3 + 28);
    v34 = v3[13];
    *(_QWORD *)&v35 = v21;
    v33 = 2;
    v22 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v33, v5, &type metadata for UpSellData, v22);
    LOBYTE(v34) = *((_BYTE *)v3 + 232);
    v33 = 3;
    v23 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v33, v5, &type metadata for SuggestionData, v23);
    v24 = type metadata accessor for RoomViewEvent.Model(0);
    v25 = (uint64_t)v3 + *(int *)(v24 + 32);
    LOBYTE(v34) = 4;
    v26 = type metadata accessor for EventData(0);
    v27 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v34, v5, v26, v27);
    v28 = (uint64_t)v3 + *(int *)(v24 + 36);
    LOBYTE(v34) = 5;
    v29 = type metadata accessor for TimedData(0);
    v30 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v34, v5, v29, v30);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_80438()
{
  unint64_t result;

  result = qword_299C20;
  if (!qword_299C20)
  {
    result = swift_getWitnessTable(&unk_1F9FD4, &type metadata for RoomViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299C20);
  }
  return result;
}

unint64_t sub_8047C()
{
  unint64_t result;

  result = qword_299C28;
  if (!qword_299C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RoomData, &type metadata for RoomData);
    atomic_store(result, (unint64_t *)&qword_299C28);
  }
  return result;
}

uint64_t RoomViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v43 = a2;
  v44 = type metadata accessor for TimedData(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v45 = (uint64_t *)((char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = sub_71B4(&qword_299C30);
  v7 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RoomViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v49 = a1;
  sub_7988(a1, v13);
  v15 = sub_80438();
  v48 = v9;
  v16 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RoomViewEvent.Model.CodingKeys, &type metadata for RoomViewEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(v49);
  v41 = v6;
  v17 = v12;
  v63 = v4;
  v18 = v46;
  LOBYTE(v51) = 0;
  v19 = sub_80AD0();
  v20 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for RoomData, &v51, v47, &type metadata for RoomData, v19);
  v21 = v55;
  v22 = v56[0];
  v23 = (uint64_t)v17;
  *(_OWORD *)v17 = v54;
  *((_OWORD *)v17 + 1) = v21;
  v17[32] = v22;
  *(_OWORD *)(v17 + 40) = *(_OWORD *)&v56[8];
  v53 = 1;
  v24 = sub_1C06C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for LinkData, &v53, v20, &type metadata for LinkData, v24);
  v25 = v60;
  *(_OWORD *)(v17 + 152) = v59;
  *(_OWORD *)(v17 + 168) = v25;
  *(_OWORD *)(v17 + 184) = v61;
  v26 = *(_OWORD *)&v56[16];
  *(_OWORD *)(v17 + 88) = *(_OWORD *)v56;
  *(_OWORD *)(v17 + 104) = v26;
  v27 = v58;
  *(_OWORD *)(v17 + 120) = v57;
  *(_OWORD *)(v17 + 136) = v27;
  v28 = v55;
  *(_OWORD *)(v17 + 56) = v54;
  *((_QWORD *)v17 + 25) = v62;
  *(_OWORD *)(v17 + 72) = v28;
  v50 = 2;
  v29 = sub_2F26C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for UpSellData, &v50, v20, &type metadata for UpSellData, v29);
  v30 = v52;
  *((_OWORD *)v17 + 13) = v51;
  *((_QWORD *)v17 + 28) = v30;
  v50 = 3;
  v31 = sub_2F2F4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v51, &type metadata for SuggestionData, &v50, v20, &type metadata for SuggestionData, v31);
  LOBYTE(stru_B8.offset) = v51;
  LOBYTE(v51) = 4;
  v32 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v33 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v18, &v51, v20, v18, v32);
  v40 = v10;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v63 + 32))(v23 + *(int *)(v10 + 32), v33, v18);
  LOBYTE(v51) = 5;
  v34 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v35 = v20;
  v36 = v45;
  v37 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v45, v44, &v51, v35, v44, v34);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v48, v47);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v42 + 32))(v23 + *(int *)(v40 + 36), v36, v37);
  sub_80B14(v23, v43);
  sub_7DAC(v49);
  return sub_80B58(v23);
}

unint64_t sub_80AD0()
{
  unint64_t result;

  result = qword_299C38;
  if (!qword_299C38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RoomData, &type metadata for RoomData);
    atomic_store(result, (unint64_t *)&qword_299C38);
  }
  return result;
}

uint64_t sub_80B14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoomViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_80B58(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoomViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_80B94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RoomViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_80BA8(_QWORD *a1)
{
  return RoomViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_80BBC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299BE0, (uint64_t)sub_7F718, a1);
}

uint64_t sub_80BE0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299BF8, (uint64_t)sub_7F758, a1);
}

uint64_t sub_80C04@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_299C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v9, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v4, v16);
}

uint64_t *initializeBufferWithCopyOfBuffer for RoomViewEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = sub_71B4(&qword_299C10);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for RoomViewEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_71B4(&qword_299C10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for RoomViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_299C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t assignWithCopy for RoomViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_299C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for RoomViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_299C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for RoomViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_299C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoomViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_81508);
}

uint64_t sub_81508(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_71B4(&qword_299C10);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A10);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296F68);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296F78);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v8 = sub_71B4(&qword_295D78);
            v12 = *(_QWORD *)(v8 - 8);
            v13 = a3[9];
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RoomViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_81630);
}

uint64_t sub_81630(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_71B4(&qword_299C10);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A10);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296F68);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296F78);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v10 = sub_71B4(&qword_295D78);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[9];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_81754(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];

  sub_B9C8(319, (unint64_t *)&unk_299CA8, (uint64_t (*)(void))sub_80AD0, (uint64_t (*)(void))sub_8047C, (uint64_t)&type metadata for RoomData);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_87D8(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for RoomViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v31 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v31;
    v30 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v30;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v29 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v29;
    v28 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v28;
    v27 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v27;
    v26 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v26;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v7 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v7;
    v25 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v25;
    v8 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v8;
    v9 = a2[21];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_QWORD *)(a1 + 168) = v9;
    v10 = a2[23];
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_QWORD *)(a1 + 184) = v10;
    v11 = a2[25];
    *(_QWORD *)(a1 + 192) = a2[24];
    *(_QWORD *)(a1 + 200) = v11;
    *(_WORD *)(a1 + 208) = *((_WORD *)a2 + 104);
    v12 = a2[27];
    v13 = a2[28];
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    v14 = *(int *)(a3 + 32);
    v23 = (uint64_t)a2 + v14;
    v24 = a1 + v14;
    *(_QWORD *)(a1 + 216) = v12;
    *(_QWORD *)(a1 + 224) = v13;
    v15 = type metadata accessor for EventData(0);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    v22(v24, v23, v15);
    v16 = *(int *)(a3 + 36);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t destroy for RoomViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(a1[28]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 36);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for RoomViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v28;
  v27 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v27;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v26 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v26;
  v25 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v25;
  v24 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v24;
  v23 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v23;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v5;
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v6;
  v7 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v7;
  v8 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v8;
  v9 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v9;
  v10 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v10;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  v11 = *(_QWORD *)(a2 + 216);
  v12 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v13 = *(int *)(a3 + 32);
  v21 = a2 + v13;
  v22 = a1 + v13;
  *(_QWORD *)(a1 + 216) = v11;
  *(_QWORD *)(a1 + 224) = v12;
  v14 = type metadata accessor for EventData(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  v20(v22, v21, v14);
  v15 = *(int *)(a3 + 36);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for RoomViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a2 + 168);
  v25 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v30 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v32 = *(int *)(a3 + 32);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  v36 = *(int *)(a3 + 36);
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
  return a1;
}

uint64_t initializeWithTake for RoomViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 208) = v7;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t assignWithTake for RoomViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 168);
  v25 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v28;
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  v30 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v30;
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v32 = *(int *)(a3 + 32);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
  v36 = *(int *)(a3 + 36);
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoomViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_82238);
}

uint64_t sub_82238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RoomViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_822E4);
}

uint64_t sub_822E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_82380(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = "8";
  v5[1] = &unk_1F9EC8;
  v5[2] = &unk_1F9EE0;
  v5[3] = &unk_1F9EF8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RoomViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_82478 + 4 * byte_1F9DB3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_824AC + 4 * byte_1F9DAE[v4]))();
}

uint64_t sub_824AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_824B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x824BCLL);
  return result;
}

uint64_t sub_824C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x824D0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_824D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_824DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoomViewEvent.Model.CodingKeys()
{
  return &type metadata for RoomViewEvent.Model.CodingKeys;
}

unint64_t sub_824FC()
{
  unint64_t result;

  result = qword_299D88;
  if (!qword_299D88)
  {
    result = swift_getWitnessTable(&unk_1F9FAC, &type metadata for RoomViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299D88);
  }
  return result;
}

unint64_t sub_82544()
{
  unint64_t result;

  result = qword_299D90;
  if (!qword_299D90)
  {
    result = swift_getWitnessTable("Uy\a", &type metadata for RoomViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299D90);
  }
  return result;
}

unint64_t sub_8258C()
{
  unint64_t result;

  result = qword_299D98;
  if (!qword_299D98)
  {
    result = swift_getWitnessTable(&unk_1F9F44, &type metadata for RoomViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299D98);
  }
  return result;
}

uint64_t sub_825D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x617461446D6F6F72 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446D6F6F72, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v9 = 0xEE00617461446E6FLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_82898(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_299DA0, &enum case for SessionGroup.default(_:));
}

uint64_t static SwooshExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299DA0, a1);
}

uint64_t sub_828D8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_299DB8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SwooshExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299DB8, a1);
}

uint64_t SwooshExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SwooshExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_299E40, (uint64_t)&nominal type descriptor for SwooshExposureEvent);
}

uint64_t SwooshExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SwooshExposureEvent.linkData.modify())()
{
  type metadata accessor for SwooshExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SwooshExposureEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SwooshExposureEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SwooshExposureEvent.pageData.modify())()
{
  type metadata accessor for SwooshExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SwooshExposureEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SwooshExposureEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SwooshExposureEvent.upSellData.modify())()
{
  type metadata accessor for SwooshExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SwooshExposureEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SwooshExposureEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SwooshExposureEvent.suggestionData.modify())()
{
  type metadata accessor for SwooshExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SwooshExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SwooshExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SwooshExposureEvent.eventData.modify())()
{
  type metadata accessor for SwooshExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SwooshExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SwooshExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SwooshExposureEvent.timedData.modify())()
{
  type metadata accessor for SwooshExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SwooshExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for SwooshExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = enum case for EventProperty.optional<A>(_:);
  v11 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v10, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v2, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
}

uint64_t SwooshExposureEvent.Model.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 288);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 264);
  v3 = *(_OWORD *)(v1 + 272);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t SwooshExposureEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 312);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 296);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

void SwooshExposureEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 320);
}

uint64_t SwooshExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent.Model(0) + 36);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SwooshExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_299EE8, (uint64_t)&nominal type descriptor for SwooshExposureEvent.Model);
}

uint64_t SwooshExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SwooshExposureEvent.Model(0) + 40);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SwooshExposureEvent.Model.init(sectionData:linkData:pageData:upSellData:suggestionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_OWORD *)(a1 + 8);
  v13 = *(_OWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_DWORD *)(a1 + 88);
  v17 = *(_BYTE *)(a1 + 92);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(a3 + 24);
  v22 = *(_QWORD *)(a4 + 16);
  v23 = *a5;
  *(_BYTE *)a8 = *(_BYTE *)a1;
  *(_DWORD *)(a8 + 4) = v11;
  *(_OWORD *)(a8 + 8) = v12;
  *(_OWORD *)(a8 + 24) = v13;
  *(_QWORD *)(a8 + 40) = v14;
  *(_QWORD *)(a8 + 48) = v15;
  *(_OWORD *)(a8 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a8 + 72) = *(_OWORD *)(a1 + 72);
  *(_DWORD *)(a8 + 88) = v16;
  *(_BYTE *)(a8 + 92) = v17;
  *(_QWORD *)(a8 + 96) = v18;
  *(_QWORD *)(a8 + 104) = v19;
  v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a8 + 208) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a8 + 224) = v24;
  *(_OWORD *)(a8 + 240) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a8 + 256) = *(_QWORD *)(a2 + 144);
  v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a8 + 144) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a8 + 160) = v25;
  v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a8 + 176) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a8 + 192) = v26;
  v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a8 + 112) = *(_OWORD *)a2;
  *(_OWORD *)(a8 + 128) = v27;
  *(_OWORD *)(a8 + 264) = *(_OWORD *)a3;
  *(_QWORD *)(a8 + 280) = v21;
  *(_QWORD *)(a8 + 288) = v20;
  *(_OWORD *)(a8 + 296) = *(_OWORD *)a4;
  *(_QWORD *)(a8 + 312) = v22;
  *(_BYTE *)(a8 + 320) = v23;
  v28 = type metadata accessor for SwooshExposureEvent.Model(0);
  v29 = a8 + *(int *)(v28 + 36);
  v30 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a6, v30);
  v31 = a8 + *(int *)(v28 + 40);
  v32 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v31, a7, v32);
}

uint64_t sub_83160()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_83198 + 4 * byte_1FA030[*v0]))(0x446E6F6974636573, 0xEB00000000617461);
}

uint64_t sub_83198()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_831C0()
{
  return 0x61446C6C65537075;
}

uint64_t sub_831DC()
{
  return 0x6974736567677573;
}

uint64_t sub_83200()
{
  return 0x746144746E657665;
}

uint64_t sub_8322C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_85C44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_83250(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_83624();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_83278(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_83624();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SwooshExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  char v59[4];
  int v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v2 = v1;
  v4 = sub_71B4(&qword_299DD0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v8 = a1[4];
  sub_7988(a1, v9);
  v10 = sub_83624();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SwooshExposureEvent.Model.CodingKeys, &type metadata for SwooshExposureEvent.Model.CodingKeys, v10, v9, v8);
  v11 = *((_DWORD *)v2 + 1);
  v12 = *(_OWORD *)(v2 + 8);
  v13 = *(_OWORD *)(v2 + 24);
  v14 = *((_QWORD *)v2 + 5);
  v15 = *((_QWORD *)v2 + 6);
  v16 = *((_DWORD *)v2 + 22);
  v17 = v2[92];
  v18 = *((_QWORD *)v2 + 12);
  v19 = *((_QWORD *)v2 + 13);
  v59[0] = *v2;
  v60 = v11;
  v61 = v12;
  v62 = v13;
  v63 = v14;
  v64 = v15;
  v65 = *(_OWORD *)(v2 + 56);
  v66 = *(_OWORD *)(v2 + 72);
  v67 = v16;
  v68 = v17;
  v69 = v18;
  v70 = v19;
  v58 = 0;
  v20 = sub_1B768();
  v21 = v71;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v59, &v58, v4, &type metadata for SectionData, v20);
  if (v21)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22 = *((_OWORD *)v2 + 14);
  v54 = *((_OWORD *)v2 + 13);
  v55 = v22;
  v56 = *((_OWORD *)v2 + 15);
  v57 = *((_QWORD *)v2 + 32);
  v23 = *((_OWORD *)v2 + 10);
  v50 = *((_OWORD *)v2 + 9);
  v51 = v23;
  v24 = *((_OWORD *)v2 + 12);
  v52 = *((_OWORD *)v2 + 11);
  v53 = v24;
  v25 = *((_OWORD *)v2 + 8);
  v48 = *((_OWORD *)v2 + 7);
  v49 = v25;
  v47 = 1;
  v26 = sub_1B7F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v48, &v47, v4, &type metadata for LinkData, v26);
  v27 = *((_QWORD *)v2 + 35);
  v28 = *((_QWORD *)v2 + 36);
  v48 = *(_OWORD *)(v2 + 264);
  *(_QWORD *)&v49 = v27;
  *((_QWORD *)&v49 + 1) = v28;
  v47 = 2;
  v29 = sub_1B7AC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v48, &v47, v4, &type metadata for PageData, v29);
  v30 = v5;
  v31 = *((_QWORD *)v2 + 39);
  v48 = *(_OWORD *)(v2 + 296);
  *(_QWORD *)&v49 = v31;
  v47 = 3;
  v32 = sub_2E6E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v48, &v47, v4, &type metadata for UpSellData, v32);
  LOBYTE(v48) = v2[320];
  v47 = 4;
  v33 = sub_2E76C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v48, &v47, v4, &type metadata for SuggestionData, v33);
  v34 = type metadata accessor for SwooshExposureEvent.Model(0);
  v35 = &v2[*(int *)(v34 + 36)];
  LOBYTE(v48) = 5;
  v36 = v7;
  v37 = v4;
  v38 = type metadata accessor for EventData(0);
  v39 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v40 = v35;
  v41 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v40, &v48, v37, v38, v39);
  v42 = &v2[*(int *)(v34 + 40)];
  LOBYTE(v48) = 6;
  v43 = type metadata accessor for TimedData(0);
  v44 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v42, &v48, v41, v43, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v36, v41);
}

unint64_t sub_83624()
{
  unint64_t result;

  result = qword_299DD8;
  if (!qword_299DD8)
  {
    result = swift_getWitnessTable(&unk_1FA28C, &type metadata for SwooshExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299DD8);
  }
  return result;
}

uint64_t SwooshExposureEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v50[2];
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[48];
  _BYTE v66[48];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v53 = a2;
  v54 = type metadata accessor for TimedData(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v55 = (_QWORD *)((char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = type metadata accessor for EventData(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v5 = (_QWORD *)((char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = sub_71B4(&qword_299DE0);
  v6 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SwooshExposureEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_83624();
  v59 = v8;
  v15 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SwooshExposureEvent.Model.CodingKeys, &type metadata for SwooshExposureEvent.Model.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_7DAC(a1);
  v51 = v5;
  v16 = v6;
  v17 = v11;
  v71 = v9;
  LOBYTE(v61) = 0;
  v18 = sub_1BFE4();
  v19 = v58;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v65, &type metadata for SectionData, &v61, v58, &type metadata for SectionData, v18);
  v20 = *(_DWORD *)&v65[4];
  v21 = *(_OWORD *)&v65[8];
  v22 = *(_OWORD *)&v65[24];
  v23 = *(_QWORD *)&v65[40];
  v24 = *(_QWORD *)v66;
  v25 = *(_DWORD *)&v66[40];
  v26 = v66[44];
  v27 = v67;
  *v11 = v65[0];
  *((_DWORD *)v11 + 1) = v20;
  *(_OWORD *)(v11 + 8) = v21;
  *(_OWORD *)(v11 + 24) = v22;
  *((_QWORD *)v11 + 5) = v23;
  *((_QWORD *)v11 + 6) = v24;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)&v66[8];
  *(_OWORD *)(v11 + 72) = *(_OWORD *)&v66[24];
  *((_DWORD *)v11 + 22) = v25;
  v11[92] = v26;
  *((_OWORD *)v11 + 6) = v27;
  v64 = 1;
  v28 = sub_1C06C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v65, &type metadata for LinkData, &v64, v19, &type metadata for LinkData, v28);
  v50[1] = 0;
  v29 = v68;
  v30 = v69;
  v31 = *(_OWORD *)&v66[32];
  *((_OWORD *)v11 + 13) = v67;
  *((_OWORD *)v11 + 14) = v29;
  *((_OWORD *)v11 + 15) = v30;
  *((_QWORD *)v11 + 32) = v70;
  v32 = *(_OWORD *)v66;
  *((_OWORD *)v11 + 9) = *(_OWORD *)&v65[32];
  *((_OWORD *)v11 + 10) = v32;
  *((_OWORD *)v11 + 11) = *(_OWORD *)&v66[16];
  *((_OWORD *)v11 + 12) = v31;
  v33 = *(_OWORD *)&v65[16];
  *((_OWORD *)v11 + 7) = *(_OWORD *)v65;
  *((_OWORD *)v11 + 8) = v33;
  v60 = 2;
  v34 = sub_1C028();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for PageData, &v60, v19, &type metadata for PageData, v34);
  v35 = a1;
  v36 = v62;
  v37 = v63;
  *(_OWORD *)(v17 + 264) = v61;
  *((_QWORD *)v17 + 35) = v36;
  *((_QWORD *)v17 + 36) = v37;
  v60 = 3;
  v38 = sub_2F26C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, &type metadata for UpSellData, &v60, v19, &type metadata for UpSellData, v38);
  v39 = (uint64_t)v17;
  v40 = v62;
  *(_OWORD *)(v17 + 296) = v61;
  *((_QWORD *)v17 + 39) = v40;
  v60 = 4;
  v41 = sub_2F2F4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, &type metadata for SuggestionData, &v60, v19, &type metadata for SuggestionData, v41);
  v17[320] = v61;
  LOBYTE(v61) = 5;
  v42 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v43 = v51;
  v44 = v57;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v57, &v61, v19, v57, v42);
  v45 = v71;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v56 + 32))(v39 + *(int *)(v71 + 36), v43, v44);
  LOBYTE(v61) = 6;
  v46 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v47 = v55;
  v48 = v54;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v54, &v61, v19, v54, v46);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v59, v19);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v52 + 32))(v39 + *(int *)(v45 + 40), v47, v48);
  sub_83D60(v39, v53);
  sub_7DAC(v35);
  return sub_83DA4(v39);
}

uint64_t sub_83D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SwooshExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_83DA4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SwooshExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_83DE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SwooshExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_83DF4(_QWORD *a1)
{
  return SwooshExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_83E08@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299DA0, (uint64_t)sub_82898, a1);
}

uint64_t sub_83E2C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299DB8, (uint64_t)sub_828D8, a1);
}

uint64_t sub_83E50@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = enum case for EventProperty.optional<A>(_:);
  v12 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v11, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v4, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v4, v18);
}

uint64_t *initializeBufferWithCopyOfBuffer for SwooshExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = sub_71B4(&qword_296A00);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return a1;
}

uint64_t destroy for SwooshExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for SwooshExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  return a1;
}

uint64_t assignWithCopy for SwooshExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  return a1;
}

uint64_t initializeWithTake for SwooshExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  return a1;
}

uint64_t assignWithTake for SwooshExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for SwooshExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_84898);
}

uint64_t sub_84898(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_71B4(&qword_296A00);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A10);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A08);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296F68);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296F78);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_295D70);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v8 = sub_71B4(&qword_295D78);
              v12 = *(_QWORD *)(v8 - 8);
              v13 = a3[10];
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SwooshExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_849E8);
}

uint64_t sub_849E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = sub_71B4(&qword_296A00);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A10);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A08);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296F68);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296F78);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_295D70);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v10 = sub_71B4(&qword_295D78);
              v14 = *(_QWORD *)(v10 - 8);
              v15 = a4[10];
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_84B34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[7];

  sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_8734(319);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_87D8(319);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 7, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SwooshExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    v36 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v36;
    v35 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v35;
    v34 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v34;
    v33 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v33;
    v32 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v32;
    *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
    *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
    v31 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v31;
    v30 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v30;
    v29 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v29;
    v28 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v28;
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    v7 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v7;
    v8 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v8;
    v9 = a2[26];
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_QWORD *)(a1 + 208) = v9;
    v27 = a2[28];
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_QWORD *)(a1 + 224) = v27;
    v26 = a2[30];
    *(_QWORD *)(a1 + 232) = a2[29];
    *(_QWORD *)(a1 + 240) = v26;
    v10 = a2[32];
    *(_QWORD *)(a1 + 248) = a2[31];
    *(_QWORD *)(a1 + 256) = v10;
    v11 = a2[34];
    *(_QWORD *)(a1 + 264) = a2[33];
    *(_QWORD *)(a1 + 272) = v11;
    v25 = a2[36];
    *(_QWORD *)(a1 + 280) = a2[35];
    *(_QWORD *)(a1 + 288) = v25;
    *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
    *(_BYTE *)(a1 + 297) = *((_BYTE *)a2 + 297);
    v12 = a2[38];
    v13 = a2[39];
    *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
    v14 = *(int *)(a3 + 36);
    v23 = (uint64_t)a2 + v14;
    v24 = a1 + v14;
    *(_QWORD *)(a1 + 304) = v12;
    *(_QWORD *)(a1 + 312) = v13;
    v15 = type metadata accessor for EventData(0);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v13);
    v22(v24, v23, v15);
    v16 = *(int *)(a3 + 40);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t destroy for SwooshExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[32]);
  swift_bridgeObjectRelease(a1[34]);
  swift_bridgeObjectRelease(a1[36]);
  swift_bridgeObjectRelease(a1[39]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 40);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for SwooshExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v34 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v34;
  v33 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v33;
  v32 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v32;
  v31 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  v30 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v30;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v28 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v28;
  v27 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v27;
  v26 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v26;
  v25 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v25;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v5;
  v6 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v6;
  v7 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v7;
  v8 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v8;
  v24 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v24;
  v23 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v23;
  v9 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v9;
  v10 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v10;
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_BYTE *)(a1 + 297) = *(_BYTE *)(a2 + 297);
  v11 = *(_QWORD *)(a2 + 304);
  v12 = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v13 = *(int *)(a3 + 36);
  v21 = a2 + v13;
  v22 = a1 + v13;
  *(_QWORD *)(a1 + 304) = v11;
  *(_QWORD *)(a1 + 312) = v12;
  v14 = type metadata accessor for EventData(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  v20(v22, v21, v14);
  v15 = *(int *)(a3 + 40);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for SwooshExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v25 = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a2 + 208);
  v30 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v31 = *(_QWORD *)(a2 + 224);
  v32 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v33 = *(_QWORD *)(a2 + 240);
  v34 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v35 = *(_QWORD *)(a2 + 256);
  v36 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v37 = *(_QWORD *)(a2 + 272);
  v38 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v39 = *(_QWORD *)(a2 + 288);
  v40 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_BYTE *)(a1 + 297) = *(_BYTE *)(a2 + 297);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v41 = *(_QWORD *)(a2 + 312);
  v42 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v43 = *(int *)(a3 + 36);
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = *(int *)(a3 + 40);
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  return a1;
}

uint64_t initializeWithTake for SwooshExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = *(_OWORD *)(a2 + 192);
  v14 = *(_OWORD *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 224);
  v16 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  v17 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v17;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v18 = *(int *)(a3 + 36);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v14;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v22 = *(int *)(a3 + 40);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  return a1;
}

uint64_t assignWithTake for SwooshExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v24 = *(_QWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 192);
  v27 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 208);
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 240);
  v33 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(a2 + 256);
  v35 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(a2 + 272);
  v37 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v36;
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(a2 + 288);
  v39 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v38;
  swift_bridgeObjectRelease(v39);
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  v40 = *(_QWORD *)(a2 + 312);
  v41 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v40;
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v42 = *(int *)(a3 + 36);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 40))(v43, v44, v45);
  v46 = *(int *)(a3 + 40);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 40))(v47, v48, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for SwooshExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_858A0);
}

uint64_t sub_858A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SwooshExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8594C);
}

uint64_t sub_8594C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_859E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = "p";
  v5[1] = &unk_1FA168;
  v5[2] = &unk_1FA180;
  v5[3] = &unk_1FA198;
  v5[4] = &unk_1FA1B0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[5] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SwooshExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_85AEC + 4 * byte_1FA03C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_85B20 + 4 * byte_1FA037[v4]))();
}

uint64_t sub_85B20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_85B28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x85B30);
  return result;
}

uint64_t sub_85B3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x85B44);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_85B48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_85B50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SwooshExposureEvent.Model.CodingKeys()
{
  return &type metadata for SwooshExposureEvent.Model.CodingKeys;
}

unint64_t sub_85B70()
{
  unint64_t result;

  result = qword_299F38;
  if (!qword_299F38)
  {
    result = swift_getWitnessTable(&unk_1FA264, &type metadata for SwooshExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299F38);
  }
  return result;
}

unint64_t sub_85BB8()
{
  unint64_t result;

  result = qword_299F40;
  if (!qword_299F40)
  {
    result = swift_getWitnessTable(&unk_1FA1D4, &type metadata for SwooshExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299F40);
  }
  return result;
}

unint64_t sub_85C00()
{
  unint64_t result;

  result = qword_299F48;
  if (!qword_299F48)
  {
    result = swift_getWitnessTable(&unk_1FA1FC, &type metadata for SwooshExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299F48);
  }
  return result;
}

uint64_t sub_85C44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v9 = 0xEA00000000006174;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v10 = 0xEE00617461446E6FLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v11 = 0xE900000000000061;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

id sub_85F88()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EventReporter()), "init");
  qword_299F50 = (uint64_t)result;
  return result;
}

id static EventReporter.shared.getter()
{
  if (qword_2956E0 != -1)
    swift_once(&qword_2956E0, sub_85F88);
  return (id)qword_299F50;
}

double sub_86034()
{
  double result;

  qword_299F78 = 0;
  result = 0.0;
  xmmword_299F58 = 0u;
  *(_OWORD *)algn_299F68 = 0u;
  return result;
}

uint64_t static EventReporter.libraryAnalyticsDataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[24];

  if (qword_2956E8 != -1)
    swift_once(&qword_2956E8, sub_86034);
  swift_beginAccess(&xmmword_299F58, v3, 0, 0);
  return sub_860C0((uint64_t)&xmmword_299F58, a1);
}

uint64_t sub_860C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_299F80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static EventReporter.libraryAnalyticsDataProvider.setter(uint64_t a1)
{
  _BYTE v3[24];

  if (qword_2956E8 != -1)
    swift_once(&qword_2956E8, sub_86034);
  swift_beginAccess(&xmmword_299F58, v3, 33, 0);
  sub_86194(a1, (uint64_t)&xmmword_299F58);
  swift_endAccess(v3);
  return sub_88F50(a1, &qword_299F80);
}

uint64_t sub_86194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_299F80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t (*static EventReporter.libraryAnalyticsDataProvider.modify(uint64_t a1))(_QWORD)
{
  if (qword_2956E8 != -1)
    swift_once(&qword_2956E8, sub_86034);
  swift_beginAccess(&xmmword_299F58, a1, 33, 0);
  return j__swift_endAccess;
}

void sub_8624C(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  char **v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR___BAEventReporter_dataProviders);
  v4 = (char **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_862A8(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_862A8(char **a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  __int128 v7[2];

  sub_89258(a2, (uint64_t)v7);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_1DB6A8(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v5 = *((_QWORD *)v3 + 2);
  v4 = *((_QWORD *)v3 + 3);
  if (v5 >= v4 >> 1)
    v3 = sub_1DB6A8((char *)(v4 > 1), v5 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v5 + 1;
  result = sub_8929C(v7, (uint64_t)&v3[40 * v5 + 32]);
  *a1 = v3;
  return result;
}

uint64_t sub_863D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  if (qword_2956E8 != -1)
    swift_once(&qword_2956E8, sub_86034);
  result = swift_beginAccess(&xmmword_299F58, v14, 0, 0);
  if (qword_299F70)
  {
    sub_89258((uint64_t)&xmmword_299F58, (uint64_t)v11 + 1);
    v7 = v12;
    v8 = v13;
    sub_7988((_QWORD *)((char *)v11 + 1), v12);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(v11, a1, a2, v7, v8);
    v9 = v11[0];
    result = sub_7DAC((_QWORD *)((char *)v11 + 1));
    v10 = 0x404020100uLL >> (8 * v9);
  }
  else
  {
    LOBYTE(v10) = 4;
  }
  *a3 = v10;
  return result;
}

uint64_t sub_86528(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[2];

  LOBYTE(v13[0]) = a2;
  BYTE1(v13[0]) = a3;
  v3 = sub_71B4(&qword_299FD0);
  v4 = type metadata accessor for DataEventTrait(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v3, v7 + *(_QWORD *)(v5 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8 + v7, enum case for DataEventTrait.onlyOnce(_:), v4);
  v9 = sub_89214();
  AccessTracker.push<A>(data:traits:file:line:)(v13, v8, 0xD000000000000066, 0x800000000021F860, 84, &type metadata for AccountData, v9);
  swift_bridgeObjectRelease(v8);
  v10 = type metadata accessor for AccountEvent(0);
  v11 = sub_7E10((unint64_t *)&unk_29A070, type metadata accessor for AccountEvent, (uint64_t)&protocol conformance descriptor for AccountEvent);
  memset(v13, 0, sizeof(v13));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v10, 0, v13, 0, 0, v10, v11);
  return sub_88F50((uint64_t)v13, &qword_2983D0);
}

uint64_t sub_86674(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  _BYTE v22[16];

  v4 = a3;
  v10 = sub_8843C(a2, (uint64_t)v4, (uint64_t)v22, v5, v6, v7, v8, v9);

  *(_QWORD *)&v21[0] = v10;
  v11 = sub_71B4(&qword_299FD0);
  v12 = type metadata accessor for DataEventTrait(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v11, v15 + *(_QWORD *)(v13 + 72), v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v16 + v15, enum case for DataEventTrait.onlyOnce(_:), v12);
  v17 = sub_89160();
  AccessTracker.push<A>(data:traits:file:line:)(v21, v16, 0xD000000000000066, 0x800000000021F860, 99, &type metadata for DragDropData, v17);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v16);
  v18 = type metadata accessor for DragDropEvent(0);
  v19 = sub_7E10(&qword_29A060, type metadata accessor for DragDropEvent, (uint64_t)&protocol conformance descriptor for DragDropEvent);
  memset(v21, 0, sizeof(v21));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v18, 0, v21, 0, 0, v18, v19);
  return sub_88F50((uint64_t)v21, &qword_2983D0);
}

void sub_86830(uint64_t a1, objc_class *a2)
{
  BAEventReporter *v3;
  BAEventReporter *v4;
  objc_class *v5;
  SEL v6;
  id v7;
  id v8;
  int64_t v9;
  id v10;
  BOOL v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;

  v3 = (BAEventReporter *)swift_allocObject(&unk_271A70, 24, 7);
  v3[1].super.isa = a2;
  v4 = (BAEventReporter *)swift_allocObject(&unk_271A98, 32, 7);
  v4[1].super.isa = (Class)sub_88A4C;
  *(_QWORD *)v4[1].dataProviders = v3;
  v5 = a2;
  swift_retain(v3);
  Tracker.transaction(block:)(sub_53E94, v4);
  swift_release(v3, v6, v7, v8, v9, v10, v11, v12);
  swift_release(v4, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_868CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  char v22;
  int v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  char v36;
  int v37;
  char v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  sub_AF27C((uint64_t)&v29);
  v0 = *((_QWORD *)&v29 + 1);
  v1 = v31;
  v2 = v33;
  v3 = v42;
  v14 = v29;
  v15 = v30;
  v16 = *((_QWORD *)&v30 + 1);
  v17 = v31;
  v18 = v32;
  v19 = v33;
  v20 = v34;
  v21 = v35;
  v22 = v36;
  v23 = v37;
  v24 = v38;
  v25 = v39;
  v26 = v40;
  v27 = v41;
  v28 = v42;
  v4 = sub_71B4(&qword_299FD0);
  v5 = type metadata accessor for DataEventTrait(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v4, v8 + *(_QWORD *)(v6 + 72), v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9 + v8, enum case for DataEventTrait.onlyOnce(_:), v5);
  v10 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v14, v9, 0xD000000000000066, 0x800000000021F860, 107, &type metadata for ContentData, v10);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v3);
  v11 = type metadata accessor for HideBookEvent(0);
  v12 = sub_7E10((unint64_t *)&unk_29A040, type metadata accessor for HideBookEvent, (uint64_t)&protocol conformance descriptor for HideBookEvent);
  v29 = 0u;
  v30 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v11, 0, &v29, 0, 0, v11, v12);
  return sub_88F50((uint64_t)&v29, &qword_2983D0);
}

_QWORD *sub_86B7C()
{
  int v0;
  char v1;
  int v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  char v31;
  _OWORD v32[6];

  sub_B15F4((uint64_t)&v26);
  v0 = v26;
  v1 = v27;
  v2 = v28;
  v3 = v29;
  v4 = v30;
  v5 = v31;
  sub_AF27C((uint64_t)v32);
  v6 = swift_allocObject(&unk_271AC0, 128, 7);
  *(_DWORD *)(v6 + 16) = v0;
  *(_BYTE *)(v6 + 20) = v1;
  *(_DWORD *)(v6 + 24) = v2;
  *(_BYTE *)(v6 + 28) = v3;
  *(_BYTE *)(v6 + 29) = v4;
  *(_BYTE *)(v6 + 30) = v5;
  v7 = v32[3];
  *(_OWORD *)(v6 + 64) = v32[2];
  *(_OWORD *)(v6 + 80) = v7;
  v8 = v32[5];
  *(_OWORD *)(v6 + 96) = v32[4];
  *(_OWORD *)(v6 + 112) = v8;
  v9 = v32[1];
  *(_OWORD *)(v6 + 32) = v32[0];
  *(_OWORD *)(v6 + 48) = v9;
  v10 = (BAEventReporter *)swift_allocObject(&unk_271AE8, 32, 7);
  v10[1].super.isa = (Class)sub_88A58;
  *(_QWORD *)v10[1].dataProviders = v6;
  sub_53FBC(v32);
  swift_retain(v6);
  Tracker.transaction(block:)(sub_54CC0, v10);
  swift_release((BAEventReporter *)v6, v11, v12, v13, v14, v15, v16, v17);
  swift_release(v10, v18, v19, v20, v21, v22, v23, v24);
  return sub_54654(v32);
}

void sub_86E08(uint64_t a1, int *a2, _OWORD *a3)
{
  int v4;
  char v5;
  int v6;
  char v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  _OWORD v32[6];

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 4);
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 12);
  v8 = *((_BYTE *)a2 + 13);
  v9 = *((_BYTE *)a2 + 14);
  v10 = a3[3];
  v32[2] = a3[2];
  v32[3] = v10;
  v11 = a3[5];
  v32[4] = a3[4];
  v32[5] = v11;
  v12 = a3[1];
  v32[0] = *a3;
  v32[1] = v12;
  v13 = swift_allocObject(&unk_271B10, 128, 7);
  *(_DWORD *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 20) = v5;
  *(_DWORD *)(v13 + 24) = v6;
  *(_BYTE *)(v13 + 28) = v7;
  *(_BYTE *)(v13 + 29) = v8;
  *(_BYTE *)(v13 + 30) = v9;
  v14 = a3[3];
  *(_OWORD *)(v13 + 64) = a3[2];
  *(_OWORD *)(v13 + 80) = v14;
  v15 = a3[5];
  *(_OWORD *)(v13 + 96) = a3[4];
  *(_OWORD *)(v13 + 112) = v15;
  v16 = a3[1];
  *(_OWORD *)(v13 + 32) = *a3;
  *(_OWORD *)(v13 + 48) = v16;
  v17 = (BAEventReporter *)swift_allocObject(&unk_271B38, 32, 7);
  v17[1].super.isa = (Class)sub_88A58;
  *(_QWORD *)v17[1].dataProviders = v13;
  sub_53FBC(v32);
  swift_retain(v13);
  Tracker.transaction(block:)(sub_54CC0, v17);
  swift_release((BAEventReporter *)v13, v18, v19, v20, v21, v22, v23, v24);
  swift_release(v17, v25, v26, v27, v28, v29, v30, v31);
}

uint64_t sub_86F28(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  LODWORD(v39) = a2;
  BYTE4(v39) = BYTE4(a2) & 1;
  DWORD2(v39) = a3;
  BYTE12(v39) = BYTE4(a3) & 1;
  BYTE13(v39) = BYTE5(a3) & 1;
  BYTE14(v39) = BYTE6(a3);
  v38 = sub_71B4(&qword_299FD0);
  v5 = type metadata accessor for DataEventTrait(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 72);
  v10 = v7 | 7;
  v11 = swift_allocObject(v38, v9, v7 | 7);
  *((_QWORD *)&v37 + 1) = 2;
  *(_OWORD *)(v11 + 16) = xmmword_1F5FF0;
  v12 = enum case for DataEventTrait.onlyOnce(_:);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  v13(v11 + v8, enum case for DataEventTrait.onlyOnce(_:), v5);
  v14 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v39, v11, 0xD000000000000066, 0x800000000021F860, 121, &type metadata for ReadingSessionData, v14);
  swift_bridgeObjectRelease((BAEventReporter *)v11, v15, v16, v17, v18, v19, v20, v21, 1);
  v22 = a4[3];
  v41 = a4[2];
  v42 = v22;
  v23 = a4[5];
  v43 = a4[4];
  v44 = v23;
  v24 = a4[1];
  v39 = *a4;
  v40 = v24;
  v25 = swift_allocObject(v38, v9, v10);
  *(_OWORD *)(v25 + 16) = v37;
  v13(v25 + v8, v12, v5);
  v26 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v39, v25, 0xD000000000000066, 0x800000000021F860, 122, &type metadata for ContentData, v26);
  swift_bridgeObjectRelease((BAEventReporter *)v25, v27, v28, v29, v30, v31, v32, v33, v37);
  v34 = type metadata accessor for InBookSearchEvent(0);
  v35 = sub_7E10(&qword_29A038, type metadata accessor for InBookSearchEvent, (uint64_t)&protocol conformance descriptor for InBookSearchEvent);
  v39 = 0u;
  v40 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v34, 0, &v39, 0, 0, v34, v35);
  return sub_88F50((uint64_t)&v39, &qword_2983D0);
}

void sub_87134(uint64_t a1, uint64_t a2, objc_class **a3, objc_class **a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  objc_class *v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BAEventReporter *v20;
  uint64_t v21;
  BAEventReporter *v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  int64_t v33;
  id v34;
  BOOL v35;
  id v36;
  _QWORD v37[2];

  v37[1] = a1;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a3;
  v14 = *a4;
  v37[0] = *a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (BAEventReporter *)swift_allocObject(&unk_271B60, v19 + 8, v15 | 7);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v20 + v16, v12, v9);
  *(Class *)((char *)&v20->super.isa + v17) = v13;
  *(Class *)((char *)&v20->super.isa + v18) = v14;
  v21 = v37[0];
  *(Class *)((char *)&v20->super.isa + v19) = (Class)v37[0];
  v22 = (BAEventReporter *)swift_allocObject(&unk_271B88, 32, 7);
  v22[1].super.isa = (Class)sub_88AFC;
  *(_QWORD *)v22[1].dataProviders = v20;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v21);
  swift_retain(v20);
  Tracker.transaction(block:)(sub_54CC0, v22);
  swift_release(v20, v23, v24, v25, v26, v27, v28, v29);
  swift_release(v22, v30, v31, v32, v33, v34, v35, v36);
}

uint64_t sub_872B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t Event;
  uint64_t v26;
  _OWORD v27[2];

  Event = type metadata accessor for InitialAppStateQueryEvent(0);
  v26 = sub_7E10((unint64_t *)&unk_29A010, type metadata accessor for InitialAppStateQueryEvent, (uint64_t)&protocol conformance descriptor for InitialAppStateQueryEvent);
  AccessTracker.explicitTime<A>(_:startTime:)(Event, a2, Event, v26);
  *(_QWORD *)&v27[0] = a3;
  v7 = sub_71B4(&qword_299FD0);
  v8 = type metadata accessor for DataEventTrait(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = v11 + *(_QWORD *)(v9 + 72);
  v13 = v10 | 7;
  v14 = swift_allocObject(v7, v12, v10 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1F5FF0;
  v15 = enum case for DataEventTrait.onlyOnce(_:);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v16(v14 + v11, enum case for DataEventTrait.onlyOnce(_:), v8);
  v17 = sub_88FD0();
  AccessTracker.push<A>(data:traits:file:line:)(v27, v14, 0xD000000000000066, 0x800000000021F860, 130, &type metadata for LibraryData, v17);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)&v27[0] = a4;
  v18 = swift_allocObject(v7, v12, v13);
  *(_OWORD *)(v18 + 16) = xmmword_1F5FF0;
  v16(v18 + v11, v15, v8);
  v19 = sub_89014();
  AccessTracker.push<A>(data:traits:file:line:)(v27, v18, 0xD000000000000066, 0x800000000021F860, 131, &type metadata for CollectionSummaryData, v19);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)&v27[0] = a5;
  v20 = swift_allocObject(v7, v12, v13);
  *(_OWORD *)(v20 + 16) = xmmword_1F5FF0;
  v16(v20 + v11, v15, v8);
  v21 = sub_89058();
  AccessTracker.push<A>(data:traits:file:line:)(v27, v20, 0xD000000000000066, 0x800000000021F860, 132, &type metadata for ReadingNowData, v21);
  swift_bridgeObjectRelease(v20);
  memset(v27, 0, sizeof(v27));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(Event, 0, v27, 0, 0, Event, v26);
  return sub_88F50((uint64_t)v27, &qword_2983D0);
}

void sub_87510(void *a1, objc_class *a2, uint64_t a3, objc_class *a4, objc_class *a5, uint64_t a6, objc_class *a7, uint64_t a8)
{
  objc_class *v8;
  id v17;
  BAEventReporter *v18;
  uint64_t v19;
  objc_class *v20;
  BAEventReporter *v21;
  BAEventReporter *v22;
  objc_class *v23;
  objc_class *v24;
  id v25;
  objc_class *v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  SEL v35;
  id v36;
  id v37;
  int64_t v38;
  id v39;
  BOOL v40;
  id v41;

  v17 = a1;
  if (a1 || (v17 = sub_CB320()) != 0)
  {
    v18 = (BAEventReporter *)swift_allocObject(&unk_271BB0, 88, 7);
    v19 = a8;
    v20 = a4;
    v21 = v18;
    v18[1].super.isa = v8;
    *(_QWORD *)v18[1].dataProviders = a3;
    v18[2].super.isa = v20;
    *(_QWORD *)v18[2].dataProviders = a6;
    v18[3].super.isa = a5;
    *(_QWORD *)v18[3].dataProviders = v17;
    v18[4].super.isa = a7;
    *(_QWORD *)v18[4].dataProviders = v19;
    v18[5].super.isa = a2;
    v22 = (BAEventReporter *)swift_allocObject(&unk_271BD8, 32, 7);
    v22[1].super.isa = (Class)sub_88BA8;
    *(_QWORD *)v22[1].dataProviders = v21;
    v23 = a7;
    v24 = a2;
    swift_retain(v21);
    v25 = a1;
    v26 = v8;
    swift_bridgeObjectRetain(v20);
    v27 = v17;
    Tracker.transaction(block:)(sub_54CC0, v22);

    swift_release(v21, v28, v29, v30, v31, v32, v33, v34);
    swift_release(v22, v35, v36, v37, v38, v39, v40, v41);
  }
}

uint64_t sub_87648(int a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, id a8, unint64_t a9, void *a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  uint8x8_t v22;
  uint64_t v23;
  float v24;
  char v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  ValueMetadata *v45;
  uint64_t v46;
  uint64_t v47;
  int16x8_t v48;
  char v49;
  int v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  int v70;
  char v71;
  int v72;
  char v73;
  __int32 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  if (a5 >= 7)
  {
    *(_QWORD *)&v63 = a5;
    v45 = &type metadata for BridgedContentType;
LABEL_22:
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v45, &v63, v45, &type metadata for Int);
    __break(1u);
    return result;
  }
  v62 = a5;
  if (a6 >= 3)
  {
    *(_QWORD *)&v63 = a6;
    v45 = &type metadata for BridgedContentAcquisitionType;
    goto LABEL_22;
  }
  v61 = a6;
  if (a8)
    v14 = objc_msgSend(a8, "intValue");
  else
    v14 = 0;
  sub_863D0(a3, a4, &v60);
  if (a9 >= 3)
  {
    *(_QWORD *)&v63 = a9;
    v45 = &type metadata for BridgedProductionType;
    goto LABEL_22;
  }
  v59 = a9;
  LOBYTE(v63) = a8 == 0;
  sub_CAB80(a3, a4, &v62, &v61, a7, v14 | ((unint64_t)(a8 == 0) << 32), &v60, &v59, (uint64_t)&v63);
  v15 = *((_QWORD *)&v63 + 1);
  v54 = v63;
  v53 = v64;
  v16 = v65;
  v52 = *((_QWORD *)&v64 + 1);
  v18 = v66;
  v17 = v67;
  v19 = v68;
  v20 = v69;
  v21 = v70;
  v50 = v72;
  v51 = v71;
  v49 = v73;
  v22.i32[0] = v74;
  v48 = (int16x8_t)vmovl_u8(v22);
  v56 = v75;
  v23 = v77;
  v55 = v76;
  objc_msgSend(a10, "floatValue");
  if (v24 == 0.2)
  {
    v25 = 1;
  }
  else
  {
    objc_msgSend(a10, "floatValue");
    if (v26 == 0.4)
    {
      v25 = 2;
    }
    else
    {
      objc_msgSend(a10, "floatValue");
      if (v27 == 0.6)
      {
        v25 = 3;
      }
      else
      {
        objc_msgSend(a10, "floatValue");
        if (v28 == 0.8)
        {
          v25 = 4;
        }
        else
        {
          objc_msgSend(a10, "floatValue");
          if (v29 == 1.0)
            v25 = 5;
          else
            v25 = 0;
        }
      }
    }
  }
  v58 = v25;
  *(_QWORD *)&v63 = v54;
  *((_QWORD *)&v63 + 1) = v15;
  v47 = v16;
  LOBYTE(v64) = v53;
  *((_QWORD *)&v64 + 1) = v52;
  v65 = v16;
  v66 = v18;
  v67 = v17;
  v68 = v19;
  v69 = v20;
  v70 = v21;
  v71 = v51;
  v72 = v50;
  v73 = v49;
  v74 = vmovn_s16(v48).u32[0];
  v75 = v56;
  v76 = v55;
  v77 = v23;
  v46 = v23;
  v57 = sub_71B4(&qword_299FD0);
  v30 = type metadata accessor for DataEventTrait(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = v33 + *(_QWORD *)(v31 + 72);
  v35 = v32 | 7;
  v36 = swift_allocObject(v57, v34, v32 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_1F5FF0;
  v37 = enum case for DataEventTrait.onlyOnce(_:);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 104);
  v38(v36 + v33, enum case for DataEventTrait.onlyOnce(_:), v30);
  v39 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v63, v36, 0xD000000000000066, 0x800000000021F860, 173, &type metadata for ContentData, v39);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v46);
  LOBYTE(v63) = v58;
  v40 = swift_allocObject(v57, v34, v35);
  *(_OWORD *)(v40 + 16) = xmmword_1F5FF0;
  v38(v40 + v33, v37, v30);
  v41 = sub_88F8C();
  AccessTracker.push<A>(data:traits:file:line:)(&v63, v40, 0xD000000000000066, 0x800000000021F860, 174, &type metadata for RatingData, v41);
  swift_bridgeObjectRelease(v40);
  v42 = type metadata accessor for RatingEvent(0);
  v43 = sub_7E10(&qword_29A008, type metadata accessor for RatingEvent, (uint64_t)&protocol conformance descriptor for RatingEvent);
  v63 = 0u;
  v64 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v42, 0, &v63, 0, 0, v42, v43);
  return sub_88F50((uint64_t)&v63, &qword_2983D0);
}

void sub_87B74(void *a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  id v6;
  id v7;
  char *v8;
  BAEventReporter *v9;
  char *v10;
  uint64_t Strong;
  objc_class *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  objc_class *v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  objc_class *v29;
  objc_class *v30;
  SEL v31;
  id v32;
  id v33;
  int64_t v34;
  id v35;
  BOOL v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  int64_t v41;
  id v42;
  BOOL v43;
  id v44;
  objc_super v45;
  char v46[24];
  char v47[24];

  v3 = v2;
  v6 = a1;
  if (a1 || (v6 = sub_CB320()) != 0)
  {
    v7 = a1;
    v8 = (char *)v6;
    v9 = (BAEventReporter *)Tracker.chain(name:identifier:)(0x53746E65746E6F43, 0xEC00000065726168, 0, 0);
    v10 = &v8[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
    swift_beginAccess(&v8[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate], v47, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v10);
    v12 = (objc_class *)type metadata accessor for BATracker();
    v13 = (char *)objc_allocWithZone(v12);
    v14 = OBJC_IVAR____TtC13BookAnalytics9BATracker_operationHistory;
    v15 = sub_71B4(&qword_299F90);
    v16 = swift_allocObject(v15, 28, 7);
    *(_DWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 16) = &_swiftEmptyArrayStorage;
    *(_QWORD *)&v13[v14] = v16;
    v17 = &v13[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate];
    v18 = swift_unknownObjectWeakInit(&v13[OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate], 0);
    *(_QWORD *)&v13[OBJC_IVAR____TtC13BookAnalytics9BATracker_aaTracker] = v9;
    swift_beginAccess(v18, v46, 1, 0);
    swift_unknownObjectWeakAssign(v17, Strong);
    v45.receiver = v13;
    v45.super_class = v12;
    swift_retain(v9);
    v19 = (objc_class *)objc_msgSendSuper2(&v45, "init");

    swift_release(v9, v20, v21, v22, v23, v24, v25, v26);
    swift_unknownObjectRelease(Strong);
    v27 = (BAEventReporter *)swift_allocObject(&unk_271C00, 40, 7);
    v27[1].super.isa = v3;
    *(_QWORD *)v27[1].dataProviders = a2;
    v27[2].super.isa = v19;
    v28 = (BAEventReporter *)swift_allocObject(&unk_271C28, 32, 7);
    v28[1].super.isa = (Class)sub_88C10;
    *(_QWORD *)v28[1].dataProviders = v27;
    v29 = v19;
    v30 = v3;
    swift_unknownObjectRetain(a2);
    swift_retain(v27);
    Tracker.transaction(block:)(sub_54CC0, v28);
    swift_release(v27, v31, v32, v33, v34, v35, v36, v37);

    swift_release(v28, v38, v39, v40, v41, v42, v43, v44);
  }
}

uint64_t sub_87D98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  BAEventReporter *v4;
  BAEventReporter *v5;
  BAEventReporter *v6;
  BAEventReporter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  int64_t v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  int64_t v47;
  int64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v53[2];
  BAEventReporter *v54;
  BAEventReporter *v55;
  BAEventReporter *v56;

  sub_CAECC(a3, a4, (uint64_t)v53, *(int64_t *)&v53[0]);
  v4 = (BAEventReporter *)*((_QWORD *)&v53[0] + 1);
  v5 = v54;
  v6 = v55;
  v7 = v56;
  v8 = sub_71B4(&qword_299FD0);
  v9 = type metadata accessor for DataEventTrait(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v8, v12 + *(_QWORD *)(v10 + 72), v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v13 + v12, enum case for DataEventTrait.onlyOnce(_:), v9);
  v14 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(v53, v13, 0xD000000000000066, 0x800000000021F860, 185, &type metadata for ContentData, v14);
  swift_bridgeObjectRelease(v6, v15, v16, v17, v18, v19, v20, v21, *(int64_t *)&v53[0]);
  swift_bridgeObjectRelease(v5, v22, v23, v24, v25, v26, v27, v28, *(int64_t *)&v53[0]);
  swift_bridgeObjectRelease(v4, v29, v30, v31, v32, v33, v34, v35, *(int64_t *)&v53[0]);
  swift_bridgeObjectRelease((BAEventReporter *)v13, v36, v37, v38, v39, v40, v41, v42, *(int64_t *)&v53[0]);
  swift_bridgeObjectRelease(v7, v43, v44, v45, v46, v47, v48, v49, *(int64_t *)&v53[0]);
  v50 = type metadata accessor for ShareEvent(0);
  v51 = sub_7E10(&qword_299FF8, type metadata accessor for ShareEvent, (uint64_t)&protocol conformance descriptor for ShareEvent);
  memset(v53, 0, sizeof(v53));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v50, 0, v53, 0, 0, v50, v51);
  return sub_88F50((uint64_t)v53, &qword_2983D0);
}

void sub_87FF4(uint64_t a1, objc_class *a2)
{
  BAEventReporter *v3;
  BAEventReporter *v4;
  objc_class *v5;
  SEL v6;
  id v7;
  id v8;
  int64_t v9;
  id v10;
  BOOL v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;

  v3 = (BAEventReporter *)swift_allocObject(&unk_271C50, 24, 7);
  v3[1].super.isa = a2;
  v4 = (BAEventReporter *)swift_allocObject(&unk_271C78, 32, 7);
  v4[1].super.isa = (Class)sub_88C1C;
  *(_QWORD *)v4[1].dataProviders = v3;
  v5 = a2;
  swift_retain(v3);
  Tracker.transaction(block:)(sub_54CC0, v4);
  swift_release(v3, v6, v7, v8, v9, v10, v11, v12);
  swift_release(v4, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_88090(uint64_t a1, uint64_t a2)
{
  BAEventReporter *v2;
  char v3;
  uint64_t v4;
  BAEventReporter *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;

  v2 = *(BAEventReporter **)(a2 + OBJC_IVAR___BAWidgetData_widgetFamily + 8);
  v3 = *(_BYTE *)(a2 + OBJC_IVAR___BAWidgetData_isContentExposed);
  v4 = *(_QWORD *)(a2 + OBJC_IVAR___BAWidgetData_displayMode);
  v5 = *(BAEventReporter **)(a2 + OBJC_IVAR___BAWidgetData_displayMode + 8);
  v6 = *(_BYTE *)(a2 + OBJC_IVAR___BAWidgetData_isStreakExposed);
  *(_QWORD *)&v38 = *(_QWORD *)(a2 + OBJC_IVAR___BAWidgetData_widgetFamily);
  *((_QWORD *)&v38 + 1) = v2;
  *(_QWORD *)&v39 = v4;
  *((_QWORD *)&v39 + 1) = v5;
  v40 = v3;
  v41 = v6;
  v7 = sub_71B4(&qword_299FD0);
  v8 = type metadata accessor for DataEventTrait(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v7, v11 + *(_QWORD *)(v9 + 72), v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v12 + v11, enum case for DataEventTrait.onlyOnce(_:), v8);
  v13 = sub_88F0C();
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  AccessTracker.push<A>(data:traits:file:line:)(&v38, v12, 0xD000000000000066, 0x800000000021F860, 193, &type metadata for WidgetData, v13);
  swift_bridgeObjectRelease(v5, v14, v15, v16, v17, v18, v19, v20, v38);
  swift_bridgeObjectRelease(v2, v21, v22, v23, v24, v25, v26, v27, v38);
  swift_bridgeObjectRelease((BAEventReporter *)v12, v28, v29, v30, v31, v32, v33, v34, v38);
  v35 = type metadata accessor for WidgetEngagementEvent(0);
  v36 = sub_7E10((unint64_t *)&unk_299FE0, type metadata accessor for WidgetEngagementEvent, (uint64_t)&protocol conformance descriptor for WidgetEngagementEvent);
  v38 = 0u;
  v39 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v35, 0, &v38, 0, 0, v35, v36);
  return sub_88F50((uint64_t)&v38, &qword_2983D0);
}

id EventReporter.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  v1 = OBJC_IVAR___BAEventReporter_dataProviders;
  v2 = sub_71B4(&qword_299F98);
  v3 = swift_allocObject(v2, 28, 7);
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[v1] = v3;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for EventReporter();
  return objc_msgSendSuper2(&v5, "init");
}

id EventReporter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EventReporter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t *sub_8843C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL a7, void *a8)
{
  int64_t v8;
  unint64_t *v9;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *Strong;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  void *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42[24];
  unint64_t *v43;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v8)
  {
    v43 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_B2D3C(0, v8, 0, a4, a5, a6, a7, a8);
    v9 = (unint64_t *)&_swiftEmptyArrayStorage;
    v12 = a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
    swift_beginAccess(a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v42, 0, 0);
    v13 = (unint64_t *)(a1 + 40);
    v39 = v12;
    do
    {
      v15 = *(v13 - 1);
      v14 = *v13;
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v12);
      swift_bridgeObjectRetain(v14);
      if (Strong
        && (v17 = String._bridgeToObjectiveC()(),
            v18 = objc_msgSend(Strong, "contentPrivateIDForContentID:", v17),
            v17,
            swift_unknownObjectRelease(Strong),
            v18))
      {
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
        v40 = v21;
        v41 = v20;

      }
      else
      {
        v40 = 0xE000000000000000;
        v41 = 0;
      }
      v22 = swift_unknownObjectWeakLoadStrong(v12);
      if (v22
        && (v28 = (void *)v22,
            v29 = String._bridgeToObjectiveC()(),
            v30 = objc_msgSend(v28, "contentUserIDForContentID:", v29),
            v29,
            swift_unknownObjectRelease(v28),
            v30))
      {
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);
        v34 = v33;

      }
      else
      {
        v32 = 0;
        v34 = 0xE000000000000000;
      }
      v43 = v9;
      v36 = v9[2];
      v35 = v9[3];
      if (v36 >= v35 >> 1)
      {
        sub_B2D3C(v35 > 1, v36 + 1, (char *)&dword_0 + 1, v23, v24, v25, v26, v27);
        v9 = v43;
      }
      v13 += 2;
      v9[2] = v36 + 1;
      v37 = &v9[6 * v36];
      v37[4] = v41;
      v37[5] = v40;
      v37[6] = v32;
      v37[7] = v34;
      v37[8] = v15;
      v37[9] = v14;
      --v8;
      v12 = v39;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_88638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (qword_2956E8 != -1)
    swift_once(&qword_2956E8, sub_86034);
  swift_beginAccess(&xmmword_299F58, v11, 0, 0);
  if (!qword_299F70)
    return 0;
  sub_89258((uint64_t)&xmmword_299F58, (uint64_t)v8 + 1);
  v4 = v9;
  v5 = v10;
  sub_7988((_QWORD *)((char *)v8 + 1), v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(v8, a1, a2, v4, v5);
  v6 = SLOBYTE(v8[0]);
  sub_7DAC((_QWORD *)((char *)v8 + 1));
  return qword_1FA338[v6];
}

void sub_88718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  BAEventReporter *v5;
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  int64_t v11;
  id v12;
  BOOL v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  int64_t v18;
  id v19;
  BOOL v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  int64_t v25;
  id v26;
  BOOL v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  int64_t v32;
  id v33;
  BOOL v34;
  id v35;

  if (a2 == 1)
    v3 = 2;
  else
    v3 = a2 == 2;
  switch(a3)
  {
    case 'f':
      v6 = swift_allocObject(&unk_271DE0, 18, 7);
      *(_BYTE *)(v6 + 16) = 2;
      *(_BYTE *)(v6 + 17) = v3;
      v7 = (BAEventReporter *)swift_allocObject(&unk_271E08, 32, 7);
      v7[1].super.isa = (Class)sub_891B4;
      *(_QWORD *)v7[1].dataProviders = v6;
      swift_retain(v6);
      Tracker.transaction(block:)(sub_54CC0, v7);
      swift_release((BAEventReporter *)v6, v8, v9, v10, v11, v12, v13, v14);
      swift_release(v7, v15, v16, v17, v18, v19, v20, v21);
      v4 = swift_allocObject(&unk_271E30, 18, 7);
      *(_BYTE *)(v4 + 16) = 1;
      *(_BYTE *)(v4 + 17) = v3;
      v5 = (BAEventReporter *)swift_allocObject(&unk_271E58, 32, 7);
      v5[1].super.isa = (Class)sub_89300;
      *(_QWORD *)v5[1].dataProviders = v4;
      swift_retain(v4);
      break;
    case 'e':
      v4 = swift_allocObject(&unk_271E80, 18, 7);
      *(_BYTE *)(v4 + 16) = 2;
      *(_BYTE *)(v4 + 17) = v3;
      v5 = (BAEventReporter *)swift_allocObject(&unk_271EA8, 32, 7);
      v5[1].super.isa = (Class)sub_89300;
      *(_QWORD *)v5[1].dataProviders = v4;
      swift_retain(v4);
      break;
    case 'd':
      v4 = swift_allocObject(&unk_271ED0, 18, 7);
      *(_BYTE *)(v4 + 16) = 1;
      *(_BYTE *)(v4 + 17) = v3;
      v5 = (BAEventReporter *)swift_allocObject(&unk_271EF8, 32, 7);
      v5[1].super.isa = (Class)sub_89300;
      *(_QWORD *)v5[1].dataProviders = v4;
      swift_retain(v4);
      break;
    default:
      return;
  }
  Tracker.transaction(block:)(sub_54CC0, v5);
  swift_release((BAEventReporter *)v4, v22, v23, v24, v25, v26, v27, v28);
  swift_release(v5, v29, v30, v31, v32, v33, v34, v35);
}

void sub_8892C(objc_class *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  BAEventReporter *v6;
  BAEventReporter *v7;
  id v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;

  v2 = sub_CB320();
  if (v2)
  {
    v3 = v2;
    v4 = sub_71B4(&qword_299618);
    v5 = sub_890E0();
    if ((Collection.isNotEmpty.getter(v4, v5) & 1) != 0)
    {
      v6 = (BAEventReporter *)swift_allocObject(&unk_271D90, 32, 7);
      v6[1].super.isa = a1;
      *(_QWORD *)v6[1].dataProviders = v3;
      v7 = (BAEventReporter *)swift_allocObject(&unk_271DB8, 32, 7);
      v7[1].super.isa = (Class)sub_89158;
      *(_QWORD *)v7[1].dataProviders = v6;
      swift_bridgeObjectRetain(a1);
      v8 = v3;
      swift_retain(v6);
      Tracker.transaction(block:)(sub_54CC0, v7);

      swift_release(v6, v9, v10, v11, v12, v13, v14, v15);
      swift_release(v7, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {

    }
  }
}

uint64_t sub_88A28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_88A4C()
{
  return sub_868CC();
}

uint64_t sub_88A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t sub_88AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_872B8(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_88B64()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_88BA8(int a1)
{
  uint64_t v1;

  return sub_87648(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(id *)(v1 + 64), *(_QWORD *)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t sub_88BDC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_88C10(uint64_t a1)
{
  uint64_t v1;

  return sub_87D98(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_88C1C(uint64_t a1)
{
  uint64_t v1;

  return sub_88090(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for EventReporter()
{
  return objc_opt_self(BAEventReporter);
}

uint64_t dispatch thunk of EventReporterDataProviding.eventReporter(_:pageCountFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of EventReporterDataProviding.eventReporterUserEmbeddingData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 16);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_88CD4;
  return v12(a1, a2, a3, a4);
}

uint64_t sub_88CD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t method lookup function for EventReporter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for EventReporter);
}

uint64_t dispatch thunk of EventReporter.add(dataProvider:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of EventReporter.seriesType(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_20.nsects + (swift_isaMask & *v0)))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of EventReporter.emitAccountDidChangeEvent(using:with:for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of EventReporter.emitDragDropEvent(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of EventReporter.emitHideBookEvent(using:contentData:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of EventReporter.emitInBookSearchEvent(using:readingSessionData:contentData:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.size + (swift_isaMask & *v0)))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of EventReporter.emitInitialAppStateQueryEvent(using:from:libraryData:collectionSummaryData:readingNowData:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of EventReporter.emitRatingEvent(using:with:for:contentAcquisitionType:contentType:supplementalContentCount:productionType:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of EventReporter.emitShareEvent(using:using:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of EventReporter.emitWidgetEngagementEvent(using:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.sectname[swift_isaMask & *v0])();
}

uint64_t sub_88E7C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[15]);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_88EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x10000000000;
  if (!*(_BYTE *)(v1 + 29))
    v2 = 0;
  return sub_86F28(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | *(unsigned int *)(v1 + 24), (__int128 *)(v1 + 32));
}

unint64_t sub_88F0C()
{
  unint64_t result;

  result = qword_299FD8;
  if (!qword_299FD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetData, &type metadata for WidgetData);
    atomic_store(result, (unint64_t *)&qword_299FD8);
  }
  return result;
}

uint64_t sub_88F50(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_71B4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_88F8C()
{
  unint64_t result;

  result = qword_29A000;
  if (!qword_29A000)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RatingData, &type metadata for RatingData);
    atomic_store(result, (unint64_t *)&qword_29A000);
  }
  return result;
}

unint64_t sub_88FD0()
{
  unint64_t result;

  result = qword_29ADC0;
  if (!qword_29ADC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryData, &type metadata for LibraryData);
    atomic_store(result, (unint64_t *)&qword_29ADC0);
  }
  return result;
}

unint64_t sub_89014()
{
  unint64_t result;

  result = qword_29A020;
  if (!qword_29A020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionSummaryData, &type metadata for CollectionSummaryData);
    atomic_store(result, (unint64_t *)&qword_29A020);
  }
  return result;
}

unint64_t sub_89058()
{
  unint64_t result;

  result = qword_29A028;
  if (!qword_29A028)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingNowData, &type metadata for ReadingNowData);
    atomic_store(result, (unint64_t *)&qword_29A028);
  }
  return result;
}

unint64_t sub_8909C()
{
  unint64_t result;

  result = qword_29A030;
  if (!qword_29A030)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingSessionData, &type metadata for ReadingSessionData);
    atomic_store(result, (unint64_t *)&qword_29A030);
  }
  return result;
}

unint64_t sub_890E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_29A050;
  if (!qword_29A050)
  {
    v1 = sub_679EC(&qword_299618);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_29A050);
  }
  return result;
}

uint64_t sub_8912C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_89158(uint64_t a1)
{
  uint64_t v1;

  return sub_86674(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t sub_89160()
{
  unint64_t result;

  result = qword_29A058;
  if (!qword_29A058)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DragDropData, &type metadata for DragDropData);
    atomic_store(result, (unint64_t *)&qword_29A058);
  }
  return result;
}

uint64_t sub_891A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 18, 7);
}

uint64_t sub_891B4(uint64_t a1)
{
  uint64_t v1;

  return sub_86528(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17));
}

uint64_t sub_891C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 18, 7);
}

uint64_t sub_891D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 18, 7);
}

uint64_t sub_891E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 18, 7);
}

uint64_t sub_891F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_89214()
{
  unint64_t result;

  result = qword_29A068;
  if (!qword_29A068)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountData, &type metadata for AccountData);
    atomic_store(result, (unint64_t *)&qword_29A068);
  }
  return result;
}

uint64_t sub_89258(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_8929C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

float SkipData.startTime.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void SkipData.startTime.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

BookAnalytics::MaxScrollDepthData __swiftcall MaxScrollDepthData.init(maxScrollPosition:)(BookAnalytics::MaxScrollDepthData maxScrollPosition)
{
  BookAnalytics::MaxScrollDepthData *v1;

  v1->maxScrollPosition = maxScrollPosition.maxScrollPosition;
  return maxScrollPosition;
}

BOOL static MaxScrollDepthData.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

unint64_t sub_89330()
{
  return 0xD000000000000011;
}

uint64_t sub_8934C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_89824(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_89374(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_894AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8939C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_894AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MaxScrollDepthData.encode(to:)(_QWORD *a1)
{
  float *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_71B4(&qword_29A0E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_894AC();
  v11 = dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MaxScrollDepthData.CodingKeys, &type metadata for MaxScrollDepthData.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v11, v3, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_894AC()
{
  unint64_t result;

  result = qword_29A0E8;
  if (!qword_29A0E8)
  {
    result = swift_getWitnessTable(&unk_1FA508, &type metadata for MaxScrollDepthData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A0E8);
  }
  return result;
}

uint64_t MaxScrollDepthData.init(from:)@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v15;

  v5 = sub_71B4(&qword_29A0F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_894AC();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MaxScrollDepthData.CodingKeys, &type metadata for MaxScrollDepthData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
  }
  return sub_7DAC(a1);
}

unint64_t sub_89600()
{
  unint64_t result;

  result = qword_29A0F8;
  if (!qword_29A0F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MaxScrollDepthData, &type metadata for MaxScrollDepthData);
    atomic_store(result, (unint64_t *)&qword_29A0F8);
  }
  return result;
}

unint64_t sub_89648()
{
  unint64_t result;

  result = qword_29A100;
  if (!qword_29A100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MaxScrollDepthData, &type metadata for MaxScrollDepthData);
    atomic_store(result, (unint64_t *)&qword_29A100);
  }
  return result;
}

uint64_t sub_8968C@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  return MaxScrollDepthData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for MaxScrollDepthData()
{
  return &type metadata for MaxScrollDepthData;
}

uint64_t storeEnumTagSinglePayload for MaxScrollDepthData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_896F0 + 4 * byte_1FA360[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_89710 + 4 * byte_1FA365[v4]))();
}

_BYTE *sub_896F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_89710(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_89718(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_89720(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_89728(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_89730(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MaxScrollDepthData.CodingKeys()
{
  return &type metadata for MaxScrollDepthData.CodingKeys;
}

unint64_t sub_89750()
{
  unint64_t result;

  result = qword_29A108;
  if (!qword_29A108)
  {
    result = swift_getWitnessTable(&unk_1FA4E0, &type metadata for MaxScrollDepthData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A108);
  }
  return result;
}

unint64_t sub_89798()
{
  unint64_t result;

  result = qword_29A110;
  if (!qword_29A110)
  {
    result = swift_getWitnessTable(&unk_1FA450, &type metadata for MaxScrollDepthData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A110);
  }
  return result;
}

unint64_t sub_897E0()
{
  unint64_t result;

  result = qword_29A118;
  if (!qword_29A118)
  {
    result = swift_getWitnessTable(&unk_1FA478, &type metadata for MaxScrollDepthData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A118);
  }
  return result;
}

uint64_t sub_89824(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F8D0)
  {
    swift_bridgeObjectRelease(0x800000000021F8D0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F8D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

BookAnalytics::AccountType_optional __swiftcall AccountType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::AccountType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267108, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t AccountType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x64756F6C4369;
  if (*v0 != 1)
    v1 = 0x73656E755469;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_89954(char *a1, unsigned __int8 *a2)
{
  return sub_2BB60(*a1, *a2);
}

unint64_t sub_89964()
{
  unint64_t result;

  result = qword_29A120;
  if (!qword_29A120)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountType, &type metadata for AccountType);
    atomic_store(result, (unint64_t *)&qword_29A120);
  }
  return result;
}

Swift::Int sub_899A8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 0x64756F6C4369;
  if (v1 != 1)
    v2 = 0x73656E755469;
  if (v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_89A40(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0x64756F6C4369;
  if (*v1 != 1)
    v2 = 0x73656E755469;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (*v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_89AB4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 0x64756F6C4369;
  if (v2 != 1)
    v3 = 0x73656E755469;
  if (v2)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v2)
    v5 = 0xE600000000000000;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

BookAnalytics::AccountType_optional sub_89B48(Swift::String *a1)
{
  return AccountType.init(rawValue:)(*a1);
}

void sub_89B54(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x64756F6C4369;
  if (v2 != 1)
    v4 = 0x73656E755469;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6E776F6E6B6E75;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_89BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_89D20();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_89C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_89D20();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for AccountType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_89CA0 + 4 * byte_1FA55D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_89CD4 + 4 * byte_1FA558[v4]))();
}

uint64_t sub_89CD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_89CDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x89CE4);
  return result;
}

uint64_t sub_89CF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x89CF8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_89CFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_89D04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountType()
{
  return &type metadata for AccountType;
}

unint64_t sub_89D20()
{
  unint64_t result;

  result = qword_29A128;
  if (!qword_29A128)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountType, &type metadata for AccountType);
    atomic_store(result, (unint64_t *)&qword_29A128);
  }
  return result;
}

BookAnalytics::LibraryEditData __swiftcall LibraryEditData.init(editSummary:editActionType:editActionResult:)(Swift::OpaquePointer editSummary, BookAnalytics::EditActionType editActionType, BookAnalytics::EditActionResult editActionResult)
{
  uint64_t v3;
  char v4;
  char v5;
  BookAnalytics::LibraryEditData result;

  v4 = *(_BYTE *)editActionType;
  v5 = *(_BYTE *)editActionResult;
  *(Swift::OpaquePointer *)v3 = editSummary;
  *(_BYTE *)(v3 + 8) = v4;
  *(_BYTE *)(v3 + 9) = v5;
  result.editSummary = editSummary;
  result.editActionType = editActionType;
  return result;
}

_BYTE *LibraryEditData.editActionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

void LibraryViewEvent.Model.librarySortData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

_BYTE *LibraryEditData.editActionResult.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = *result;
  return result;
}

uint64_t (*LibraryEditData.editActionResult.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t sub_89DB4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6974634174696465;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x6D6D755374696465;
}

uint64_t sub_89E28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_8A9B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_89E4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8A3BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_89E74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8A3BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibraryEditData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v4 = sub_71B4(&qword_29A130);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  v19 = *((unsigned __int8 *)v1 + 9);
  v20 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_8A3BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibraryEditData.CodingKeys, &type metadata for LibraryEditData.CodingKeys, v12, v10, v11);
  v26 = v8;
  v25 = 0;
  v13 = sub_71B4(&qword_29A140);
  v14 = sub_8A4CC(&qword_29A148, (uint64_t (*)(void))sub_8A400, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v4, v13, v14);
  if (!v2)
  {
    v15 = v19;
    v24 = v20;
    v23 = 1;
    v16 = sub_8A444();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v4, &type metadata for EditActionType, v16);
    v22 = v15;
    v21 = 2;
    v17 = sub_8A488();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v4, &type metadata for EditActionResult, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void LibraryEditData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  char v25;
  int64_t v26;
  char v27;
  uint64_t v28;
  BAEventReporter *v29;

  v5 = sub_71B4(&qword_29A168);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_8A3BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibraryEditData.CodingKeys, &type metadata for LibraryEditData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v12 = sub_71B4(&qword_29A140);
    BYTE3(v28) = 0;
    v13 = sub_8A4CC(&qword_29A170, (uint64_t (*)(void))sub_8A534, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, v12, (char *)&v28 + 3, v5, v12, v13);
    v14 = v29;
    BYTE1(v28) = 1;
    v15 = sub_8A578();
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v28 + 2), &type metadata for EditActionType, (char *)&v28 + 1, v5, &type metadata for EditActionType, v15);
    v16 = BYTE2(v28);
    v27 = 2;
    v17 = sub_8A5BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for EditActionResult, &v27, v5, &type metadata for EditActionResult, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v25 = v28;
    *(_QWORD *)a2 = v14;
    *(_BYTE *)(a2 + 8) = v16;
    *(_BYTE *)(a2 + 9) = v25;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v14, v18, v19, v20, v21, v22, v23, v24, v26);
  }
}

void sub_8A274(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  LibraryEditData.init(from:)(a1, a2);
}

uint64_t sub_8A288(_QWORD *a1)
{
  return LibraryEditData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics15LibraryEditDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  int v4;
  const char *v5;
  void *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BAEventReporter *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BAEventReporter *v19;
  char v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  int64_t v25;
  int64_t v26;
  id v27;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = *(unsigned __int8 *)(a2 + 9);
  if ((sub_66EC0(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0 && (sub_29EBC(v2), (v11 & 1) != 0))
  {
    v12 = 0xE700000000000000;
    v13 = 0x73736563637573;
    if (v3 != 1)
    {
      v13 = 0x6C65636E6163;
      v12 = 0xE600000000000000;
    }
    if (v3)
      v14 = v13;
    else
      v14 = 0x6E776F6E6B6E75;
    if (v3)
      v15 = (BAEventReporter *)v12;
    else
      v15 = (BAEventReporter *)0xE700000000000000;
    v16 = 0xE700000000000000;
    v17 = 0x73736563637573;
    if (v4 != 1)
    {
      v17 = 0x6C65636E6163;
      v16 = 0xE600000000000000;
    }
    if (v4)
      v18 = v17;
    else
      v18 = 0x6E776F6E6B6E75;
    if (v4)
      v19 = (BAEventReporter *)v16;
    else
      v19 = (BAEventReporter *)0xE700000000000000;
    if (v14 == v18 && v15 == v19)
    {
      v20 = 1;
      v19 = v15;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v18, v19, 0);
    }
    swift_bridgeObjectRelease(v15, v5, (id)v18, v6, v7, v8, v9, v10);
    swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

unint64_t sub_8A3BC()
{
  unint64_t result;

  result = qword_29A138;
  if (!qword_29A138)
  {
    result = swift_getWitnessTable(&unk_1FA81C, &type metadata for LibraryEditData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A138);
  }
  return result;
}

unint64_t sub_8A400()
{
  unint64_t result;

  result = qword_29A150;
  if (!qword_29A150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryEditActionData, &type metadata for LibraryEditActionData);
    atomic_store(result, (unint64_t *)&qword_29A150);
  }
  return result;
}

unint64_t sub_8A444()
{
  unint64_t result;

  result = qword_29A158;
  if (!qword_29A158)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EditActionType, &type metadata for EditActionType);
    atomic_store(result, (unint64_t *)&qword_29A158);
  }
  return result;
}

unint64_t sub_8A488()
{
  unint64_t result;

  result = qword_29A160;
  if (!qword_29A160)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EditActionResult, &type metadata for EditActionResult);
    atomic_store(result, (unint64_t *)&qword_29A160);
  }
  return result;
}

uint64_t sub_8A4CC(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_29A140);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_8A534()
{
  unint64_t result;

  result = qword_29A178;
  if (!qword_29A178)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryEditActionData, &type metadata for LibraryEditActionData);
    atomic_store(result, (unint64_t *)&qword_29A178);
  }
  return result;
}

unint64_t sub_8A578()
{
  unint64_t result;

  result = qword_29A180;
  if (!qword_29A180)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EditActionType, &type metadata for EditActionType);
    atomic_store(result, (unint64_t *)&qword_29A180);
  }
  return result;
}

unint64_t sub_8A5BC()
{
  unint64_t result;

  result = qword_29A188;
  if (!qword_29A188)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EditActionResult, &type metadata for EditActionResult);
    atomic_store(result, (unint64_t *)&qword_29A188);
  }
  return result;
}

unint64_t sub_8A604()
{
  unint64_t result;

  result = qword_29A190;
  if (!qword_29A190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryEditData, &type metadata for LibraryEditData);
    atomic_store(result, (unint64_t *)&qword_29A190);
  }
  return result;
}

unint64_t sub_8A64C()
{
  unint64_t result;

  result = qword_29A198;
  if (!qword_29A198)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryEditData, &type metadata for LibraryEditData);
    atomic_store(result, (unint64_t *)&qword_29A198);
  }
  return result;
}

uint64_t destroy for LibraryEditData(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t _s13BookAnalytics15LibraryEditDataVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for LibraryEditData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t initializeWithTake for LibraryEditData(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for LibraryEditData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryEditData(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 10))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryEditData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 10) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryEditData()
{
  return &type metadata for LibraryEditData;
}

uint64_t storeEnumTagSinglePayload for LibraryEditData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_8A858 + 4 * byte_1FA679[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_8A88C + 4 * byte_1FA674[v4]))();
}

uint64_t sub_8A88C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8A894(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8A89CLL);
  return result;
}

uint64_t sub_8A8A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8A8B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_8A8B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8A8BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryEditData.CodingKeys()
{
  return &type metadata for LibraryEditData.CodingKeys;
}

unint64_t sub_8A8DC()
{
  unint64_t result;

  result = qword_29A1A0;
  if (!qword_29A1A0)
  {
    result = swift_getWitnessTable(&unk_1FA7F4, &type metadata for LibraryEditData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A1A0);
  }
  return result;
}

unint64_t sub_8A924()
{
  unint64_t result;

  result = qword_29A1A8;
  if (!qword_29A1A8)
  {
    result = swift_getWitnessTable(&unk_1FA764, &type metadata for LibraryEditData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A1A8);
  }
  return result;
}

unint64_t sub_8A96C()
{
  unint64_t result;

  result = qword_29A1B0;
  if (!qword_29A1B0)
  {
    result = swift_getWitnessTable(&unk_1FA78C, &type metadata for LibraryEditData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A1B0);
  }
  return result;
}

uint64_t sub_8A9B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6D6D755374696465 && a2 == 0xEB00000000797261)
  {
    v5 = 0xEB00000000797261;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6D755374696465, 0xEB00000000797261, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6974634174696465 && a2 == 0xEE00657079546E6FLL)
  {
    v7 = 0xEE00657079546E6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974634174696465, 0xEE00657079546E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000000021F8F0)
  {
    swift_bridgeObjectRelease(0x800000000021F8F0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F8F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_8AB3C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29A1B8, &enum case for SessionGroup.default(_:));
}

uint64_t static SearchResultSelectEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A1B8, a1);
}

uint64_t sub_8AB7C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29A1D0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SearchResultSelectEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A1D0, a1);
}

uint64_t SearchSuggestionsReturnedEvent.searchData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29A1E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SearchSuggestionsReturnedEvent.searchData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29A1E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t SearchResultSelectEvent.searchSelectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 20);
  v4 = sub_71B4(&qword_29A1F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchResultSelectEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29A2B8, (uint64_t)&nominal type descriptor for SearchResultSelectEvent);
}

uint64_t SearchResultSelectEvent.searchSelectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 20);
  v4 = sub_71B4(&qword_29A1F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultSelectEvent.searchSelectionData.modify())()
{
  type metadata accessor for SearchResultSelectEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultSelectEvent.searchResultsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 24);
  v4 = sub_71B4(&qword_29A1F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchResultSelectEvent.searchResultsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 24);
  v4 = sub_71B4(&qword_29A1F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultSelectEvent.searchResultsData.modify())()
{
  type metadata accessor for SearchResultSelectEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultSelectEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 28);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchResultSelectEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 28);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultSelectEvent.contentData.modify())()
{
  type metadata accessor for SearchResultSelectEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultSelectEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 32);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchResultSelectEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 32);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultSelectEvent.seriesData.modify())()
{
  type metadata accessor for SearchResultSelectEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultSelectEvent.genreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 36);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchResultSelectEvent.genreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 36);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultSelectEvent.genreData.modify())()
{
  type metadata accessor for SearchResultSelectEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultSelectEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 40);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SearchResultSelectEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent(0) + 40);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchResultSelectEvent.eventData.modify())()
{
  type metadata accessor for SearchResultSelectEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultSelectEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for SearchResultSelectEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_29A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = enum case for EventProperty.optional<A>(_:);
  v11 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v10, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v10, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
}

uint64_t SearchSuggestionsReturnedEvent.Model.searchData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t SearchResultSelectEvent.Model.searchSelectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_WORD *)(v1 + 48);
  v4 = *(_DWORD *)(v1 + 52);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v6);
}

uint64_t SearchResultSelectEvent.Model.searchResultsData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 72);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t SearchResultSelectEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  v5 = v1[13];
  v6 = v1[14];
  v7 = v1[15];
  v8 = v1[16];
  v9 = v1[17];
  v10 = v1[18];
  v11 = v1[19];
  v12 = v1[20];
  v13 = v1[21];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t SearchResultSelectEvent.Model.genreData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[28];
  v3 = v1[29];
  v4 = v1[30];
  v5 = v1[31];
  v6 = v1[32];
  v7 = v1[33];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_8B32C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_8B32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t SearchResultSelectEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchResultSelectEvent.Model(0) + 40);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchResultSelectEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29A380, (uint64_t)&nominal type descriptor for SearchResultSelectEvent.Model);
}

uint64_t SearchResultSelectEvent.Model.init(searchData:searchSelectionData:searchResultsData:contentData:seriesData:genreData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X3>, _OWORD *a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *a2;
  v13 = a2[1];
  v14 = *((_WORD *)a2 + 8);
  v15 = *((_DWORD *)a2 + 5);
  v16 = a2[3];
  v17 = a2[4];
  v18 = *a3;
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(_QWORD *)(a8 + 16) = v10;
  *(_QWORD *)(a8 + 24) = v11;
  *(_QWORD *)(a8 + 32) = v12;
  *(_QWORD *)(a8 + 40) = v13;
  *(_WORD *)(a8 + 48) = v14;
  *(_DWORD *)(a8 + 52) = v15;
  *(_QWORD *)(a8 + 56) = v16;
  *(_QWORD *)(a8 + 64) = v17;
  *(_QWORD *)(a8 + 72) = v18;
  v19 = a4[1];
  *(_OWORD *)(a8 + 80) = *a4;
  *(_OWORD *)(a8 + 96) = v19;
  v20 = a4[3];
  *(_OWORD *)(a8 + 112) = a4[2];
  *(_OWORD *)(a8 + 128) = v20;
  v21 = a4[5];
  *(_OWORD *)(a8 + 144) = a4[4];
  *(_OWORD *)(a8 + 160) = v21;
  v22 = a5[1];
  *(_OWORD *)(a8 + 176) = *a5;
  *(_OWORD *)(a8 + 192) = v22;
  v23 = *a6;
  v24 = a6[1];
  *(_OWORD *)(a8 + 208) = a5[2];
  *(_OWORD *)(a8 + 224) = v23;
  v25 = a6[2];
  *(_OWORD *)(a8 + 240) = v24;
  *(_OWORD *)(a8 + 256) = v25;
  v26 = a8 + *(int *)(type metadata accessor for SearchResultSelectEvent.Model(0) + 40);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a7, v27);
}

uint64_t sub_8B47C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_8B4B4 + 4 * byte_1FA870[a1]))(0x6144686372616573, 0xEA00000000006174);
}

unint64_t sub_8B4B4()
{
  return 0xD000000000000013;
}

unint64_t sub_8B4D4()
{
  return 0xD000000000000011;
}

uint64_t sub_8B4F0()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_8B510()
{
  return 0x6144736569726573;
}

uint64_t sub_8B524()
{
  return 0x74614465726E6567;
}

uint64_t sub_8B550()
{
  unsigned __int8 *v0;

  return sub_8B47C(*v0);
}

uint64_t sub_8B558@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_8E0A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_8B57C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8B8B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8B5A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8B8B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchResultSelectEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;

  v3 = v1;
  v5 = sub_71B4(&qword_29A208);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_8B8B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchResultSelectEvent.Model.CodingKeys, &type metadata for SearchResultSelectEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v34 = *v3;
  *(_QWORD *)&v35 = v12;
  *((_QWORD *)&v35 + 1) = v13;
  v40 = 0;
  v14 = sub_8B8F4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v40, v5, &type metadata for SearchData, v14);
  if (!v2)
  {
    v15 = *((_QWORD *)v3 + 5);
    v16 = *((_WORD *)v3 + 24);
    v17 = *((_DWORD *)v3 + 13);
    v18 = *((_QWORD *)v3 + 7);
    v19 = *((_QWORD *)v3 + 8);
    *(_QWORD *)&v34 = *((_QWORD *)v3 + 4);
    *((_QWORD *)&v34 + 1) = v15;
    LOWORD(v35) = v16;
    DWORD1(v35) = v17;
    *((_QWORD *)&v35 + 1) = v18;
    *(_QWORD *)&v36 = v19;
    v40 = 1;
    v20 = sub_8B938();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v40, v5, &type metadata for SearchSelectionData, v20);
    *(_QWORD *)&v34 = *((_QWORD *)v3 + 9);
    v40 = 2;
    v21 = sub_8B97C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v40, v5, &type metadata for SearchResultsData, v21);
    v22 = v3[6];
    v34 = v3[5];
    v35 = v22;
    v23 = v3[8];
    v36 = v3[7];
    v37 = v23;
    v24 = v3[10];
    v38 = v3[9];
    v39 = v24;
    v40 = 3;
    v25 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v40, v5, &type metadata for ContentData, v25);
    v26 = v3[12];
    v34 = v3[11];
    v35 = v26;
    v36 = v3[13];
    v40 = 4;
    v27 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v40, v5, &type metadata for SeriesData, v27);
    v28 = v3[15];
    v34 = v3[14];
    v35 = v28;
    v36 = v3[16];
    v40 = 5;
    v29 = sub_8B9C0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v40, v5, &type metadata for GenreData, v29);
    v30 = (uint64_t)v3 + *(int *)(type metadata accessor for SearchResultSelectEvent.Model(0) + 40);
    LOBYTE(v34) = 6;
    v31 = type metadata accessor for EventData(0);
    v32 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v30, &v34, v5, v31, v32);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_8B8B0()
{
  unint64_t result;

  result = qword_29A210;
  if (!qword_29A210)
  {
    result = swift_getWitnessTable(&unk_1FAACC, &type metadata for SearchResultSelectEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A210);
  }
  return result;
}

unint64_t sub_8B8F4()
{
  unint64_t result;

  result = qword_29A218;
  if (!qword_29A218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchData, &type metadata for SearchData);
    atomic_store(result, (unint64_t *)&qword_29A218);
  }
  return result;
}

unint64_t sub_8B938()
{
  unint64_t result;

  result = qword_29A220;
  if (!qword_29A220)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchSelectionData, &type metadata for SearchSelectionData);
    atomic_store(result, (unint64_t *)&qword_29A220);
  }
  return result;
}

unint64_t sub_8B97C()
{
  unint64_t result;

  result = qword_29A228;
  if (!qword_29A228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchResultsData, &type metadata for SearchResultsData);
    atomic_store(result, (unint64_t *)&qword_29A228);
  }
  return result;
}

unint64_t sub_8B9C0()
{
  unint64_t result;

  result = qword_29A230;
  if (!qword_29A230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GenreData, &type metadata for GenreData);
    atomic_store(result, (unint64_t *)&qword_29A230);
  }
  return result;
}

void SearchResultSelectEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD v41[2];
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  v46 = a2;
  v3 = type metadata accessor for EventData(0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = sub_71B4(&qword_29A238);
  v6 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SearchResultSelectEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_8B8B0();
  v47 = v8;
  v15 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchResultSelectEvent.Model.CodingKeys, &type metadata for SearchResultSelectEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(a1);
  }
  else
  {
    v49 = v6;
    v42 = v5;
    v43 = a1;
    v16 = (uint64_t)v11;
    v17 = v45;
    v18 = v46;
    v56 = 0;
    v19 = sub_8BF70();
    v20 = v47;
    v21 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, &type metadata for SearchData, &v56, v48, &type metadata for SearchData, v19);
    v22 = v51;
    *(_OWORD *)v16 = v50;
    *(_OWORD *)(v16 + 16) = v22;
    v56 = 1;
    v23 = sub_8BFB4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, &type metadata for SearchSelectionData, &v56, v21, &type metadata for SearchSelectionData, v23);
    v24 = *((_QWORD *)&v50 + 1);
    v25 = v51;
    v26 = DWORD1(v51);
    v27 = *((_QWORD *)&v51 + 1);
    v28 = v52;
    *(_QWORD *)(v16 + 32) = v50;
    *(_QWORD *)(v16 + 40) = v24;
    *(_WORD *)(v16 + 48) = v25;
    *(_DWORD *)(v16 + 52) = v26;
    *(_QWORD *)(v16 + 56) = v27;
    *(_QWORD *)(v16 + 64) = v28;
    v56 = 2;
    v29 = sub_8BFF8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, &type metadata for SearchResultsData, &v56, v21, &type metadata for SearchResultsData, v29);
    v30 = v49;
    *(_QWORD *)(v16 + 72) = v50;
    v56 = 3;
    v31 = sub_1779C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, &type metadata for ContentData, &v56, v21, &type metadata for ContentData, v31);
    v32 = v51;
    *(_OWORD *)(v16 + 80) = v50;
    *(_OWORD *)(v16 + 96) = v32;
    v33 = v53;
    *(_OWORD *)(v16 + 112) = v52;
    *(_OWORD *)(v16 + 128) = v33;
    v34 = v55;
    *(_OWORD *)(v16 + 144) = v54;
    *(_OWORD *)(v16 + 160) = v34;
    v56 = 4;
    v35 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, &type metadata for SeriesData, &v56, v21, &type metadata for SeriesData, v35);
    v36 = v51;
    *(_OWORD *)(v16 + 176) = v50;
    *(_OWORD *)(v16 + 192) = v36;
    *(_OWORD *)(v16 + 208) = v52;
    v56 = 5;
    v37 = sub_8C03C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, &type metadata for GenreData, &v56, v21, &type metadata for GenreData, v37);
    v41[1] = 0;
    v38 = v51;
    *(_OWORD *)(v16 + 224) = v50;
    *(_OWORD *)(v16 + 240) = v38;
    *(_OWORD *)(v16 + 256) = v52;
    LOBYTE(v50) = 6;
    v39 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v40 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v17, &v50, v21, v17, v39);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v21);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v44 + 32))(v16 + *(int *)(v9 + 40), v40, v17);
    sub_8C080(v16, v18);
    sub_7DAC(v43);
    sub_8C0C4(v16);
  }
}

unint64_t sub_8BF70()
{
  unint64_t result;

  result = qword_29A240;
  if (!qword_29A240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchData, &type metadata for SearchData);
    atomic_store(result, (unint64_t *)&qword_29A240);
  }
  return result;
}

unint64_t sub_8BFB4()
{
  unint64_t result;

  result = qword_29A248;
  if (!qword_29A248)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchSelectionData, &type metadata for SearchSelectionData);
    atomic_store(result, (unint64_t *)&qword_29A248);
  }
  return result;
}

unint64_t sub_8BFF8()
{
  unint64_t result;

  result = qword_29A250;
  if (!qword_29A250)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchResultsData, &type metadata for SearchResultsData);
    atomic_store(result, (unint64_t *)&qword_29A250);
  }
  return result;
}

unint64_t sub_8C03C()
{
  unint64_t result;

  result = qword_29A258;
  if (!qword_29A258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GenreData, &type metadata for GenreData);
    atomic_store(result, (unint64_t *)&qword_29A258);
  }
  return result;
}

uint64_t sub_8C080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultSelectEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_8C0C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchResultSelectEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_8C100(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchResultSelectEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_8C114(_QWORD *a1)
{
  return SearchResultSelectEvent.Model.encode(to:)(a1);
}

uint64_t sub_8C128@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A1B8, (uint64_t)sub_8AB3C, a1);
}

uint64_t sub_8C14C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A1D0, (uint64_t)sub_8AB7C, a1);
}

uint64_t sub_8C170@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_29A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = enum case for EventProperty.optional<A>(_:);
  v12 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v11, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v11, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v4, v18);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchResultSelectEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = sub_71B4(&qword_29A1E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29A1F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29A1F8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_29A200);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return a1;
}

uint64_t destroy for SearchResultSelectEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_29A1F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for SearchResultSelectEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  return a1;
}

uint64_t assignWithCopy for SearchResultSelectEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  return a1;
}

uint64_t initializeWithTake for SearchResultSelectEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  return a1;
}

uint64_t assignWithTake for SearchResultSelectEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29A1F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResultSelectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8CBB8);
}

uint64_t sub_8CBB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_71B4(&qword_29A1E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29A1F0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29A1F8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296760);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296310);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_29A200);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v8 = sub_71B4(&qword_295D70);
              v12 = *(_QWORD *)(v8 - 8);
              v13 = a3[10];
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchResultSelectEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8CD08);
}

uint64_t sub_8CD08(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = sub_71B4(&qword_29A1E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29A1F0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29A1F8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296760);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296310);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_29A200);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v10 = sub_71B4(&qword_295D70);
              v14 = *(_QWORD *)(v10 - 8);
              v15 = a4[10];
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_8CE54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[7];

  sub_B9C8(319, (unint64_t *)&qword_29A2C8, (uint64_t (*)(void))sub_8BF70, (uint64_t (*)(void))sub_8B8F4, (uint64_t)&type metadata for SearchData);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_29A2D0, (uint64_t (*)(void))sub_8BFB4, (uint64_t (*)(void))sub_8B938, (uint64_t)&type metadata for SearchSelectionData);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_29A2D8, (uint64_t (*)(void))sub_8BFF8, (uint64_t (*)(void))sub_8B97C, (uint64_t)&type metadata for SearchResultsData);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, (unint64_t *)&unk_29A2E0, (uint64_t (*)(void))sub_8C03C, (uint64_t (*)(void))sub_8B9C0, (uint64_t)&type metadata for GenreData);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_8734(319);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 7, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SearchResultSelectEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
    v10 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v10;
    v11 = a2[9];
    *(_QWORD *)(a1 + 72) = v11;
    v12 = a2[11];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v12;
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      v13 = a2[14];
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = v13;
      v14 = a2[16];
      *(_QWORD *)(a1 + 120) = a2[15];
      *(_QWORD *)(a1 + 128) = v14;
      *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
      *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_DWORD *)(a1 + 153) = *(_DWORD *)((char *)a2 + 153);
      *(_BYTE *)(a1 + 157) = *((_BYTE *)a2 + 157);
      v15 = a2[21];
      *(_QWORD *)(a1 + 160) = a2[20];
      *(_QWORD *)(a1 + 168) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v17;
      v18 = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 160) = v18;
      v19 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 96) = v19;
    }
    v20 = a2[27];
    if (v20 == 1)
    {
      v21 = *((_OWORD *)a2 + 12);
      *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
      *(_OWORD *)(a1 + 192) = v21;
      *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
      v22 = a2[29];
      if (v22)
      {
LABEL_8:
        *(_QWORD *)(a1 + 224) = a2[28];
        *(_QWORD *)(a1 + 232) = v22;
        v23 = a2[31];
        *(_QWORD *)(a1 + 240) = a2[30];
        *(_QWORD *)(a1 + 248) = v23;
        v24 = a2[33];
        *(_QWORD *)(a1 + 256) = a2[32];
        *(_QWORD *)(a1 + 264) = v24;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
LABEL_11:
        v26 = *(int *)(a3 + 40);
        v27 = a1 + v26;
        v28 = (uint64_t)a2 + v26;
        v29 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
        return a1;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
      *(_WORD *)(a1 + 201) = *(_WORD *)((char *)a2 + 201);
      *(_QWORD *)(a1 + 208) = a2[26];
      *(_QWORD *)(a1 + 216) = v20;
      swift_bridgeObjectRetain(v20);
      v22 = a2[29];
      if (v22)
        goto LABEL_8;
    }
    v25 = *((_OWORD *)a2 + 15);
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
    *(_OWORD *)(a1 + 240) = v25;
    *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
    goto LABEL_11;
  }
  v16 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v16);
  return a1;
}

uint64_t destroy for SearchResultSelectEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  v4 = a1[11];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[14]);
    swift_bridgeObjectRelease(a1[16]);
    swift_bridgeObjectRelease(a1[21]);
  }
  v5 = a1[27];
  if (v5 != 1)
    swift_bridgeObjectRelease(v5);
  v6 = a1[29];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[33]);
  }
  v7 = (char *)a1 + *(int *)(a2 + 40);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SearchResultSelectEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v11;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v12 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v12;
    v13 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v13;
    *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_DWORD *)(a1 + 153) = *(_DWORD *)(a2 + 153);
    *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
    v14 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v14;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v15;
    v16 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v16;
    v17 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v17;
  }
  v18 = *(_QWORD *)(a2 + 216);
  if (v18 != 1)
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v18;
    swift_bridgeObjectRetain(v18);
    v20 = *(_QWORD *)(a2 + 232);
    if (v20)
      goto LABEL_6;
LABEL_8:
    v23 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v23;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    goto LABEL_9;
  }
  v19 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v19;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v20 = *(_QWORD *)(a2 + 232);
  if (!v20)
    goto LABEL_8;
LABEL_6:
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v20;
  v21 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v21;
  v22 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v22;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
LABEL_9:
  v24 = *(int *)(a3 + 40);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  return a1;
}

uint64_t assignWithCopy for SearchResultSelectEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  uint64_t v42;
  BAEventReporter *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  _OWORD *v51;
  _OWORD *v52;
  BAEventReporter *v53;
  uint64_t v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  uint64_t v72;
  BAEventReporter *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  int64_t v78;
  int64_t v79;
  id v80;
  int v81;
  int v82;
  uint64_t v83;
  BAEventReporter *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  int64_t v89;
  int64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  __int128 *v107;
  BAEventReporter *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  SEL v116;
  id v117;
  id v118;
  id v119;
  int64_t v120;
  int64_t v121;
  id v122;
  _OWORD *v123;
  _OWORD *v124;
  BAEventReporter *v125;
  uint64_t v126;
  uint64_t v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  int64_t v132;
  int64_t v133;
  id v134;
  uint64_t v135;
  BAEventReporter *v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  int64_t v141;
  int64_t v142;
  id v143;
  uint64_t v144;
  BAEventReporter *v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  int64_t v150;
  int64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v24 = *(_QWORD *)(a2 + 40);
  v25 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  v42 = *(_QWORD *)(a2 + 72);
  v43 = *(BAEventReporter **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  v51 = (_OWORD *)(a1 + 80);
  v52 = (_OWORD *)(a2 + 80);
  v53 = *(BAEventReporter **)(a1 + 88);
  v54 = *(_QWORD *)(a2 + 88);
  if (v53)
  {
    if (v54)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v55 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v53, v56, v57, v58, v59, v60, v61, v62);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v63 = *(_QWORD *)(a2 + 112);
      v64 = *(BAEventReporter **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v72 = *(_QWORD *)(a2 + 128);
      v73 = *(BAEventReporter **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v72;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
      v81 = *(_DWORD *)(a2 + 140);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_DWORD *)(a1 + 140) = v81;
      v82 = *(_DWORD *)(a2 + 148);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_DWORD *)(a1 + 148) = v82;
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
      *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v83 = *(_QWORD *)(a2 + 168);
      v84 = *(BAEventReporter **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v83;
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRelease(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 80));
      v98 = *(_OWORD *)(a2 + 96);
      *v51 = *v52;
      *(_OWORD *)(a1 + 96) = v98;
      v99 = *(_OWORD *)(a2 + 160);
      v101 = *(_OWORD *)(a2 + 112);
      v100 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v99;
      *(_OWORD *)(a1 + 112) = v101;
      *(_OWORD *)(a1 + 128) = v100;
    }
  }
  else if (v54)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v92 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v92;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v93 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v93;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v94 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v94;
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
    v95 = *(_DWORD *)(a2 + 140);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_DWORD *)(a1 + 140) = v95;
    v96 = *(_DWORD *)(a2 + 148);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_DWORD *)(a1 + 148) = v96;
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
    *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
    *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v97 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 168) = v97;
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v97);
  }
  else
  {
    v102 = *(_OWORD *)(a2 + 96);
    *v51 = *v52;
    *(_OWORD *)(a1 + 96) = v102;
    v103 = *(_OWORD *)(a2 + 112);
    v104 = *(_OWORD *)(a2 + 128);
    v105 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v105;
    *(_OWORD *)(a1 + 112) = v103;
    *(_OWORD *)(a1 + 128) = v104;
  }
  v106 = (__int128 *)(a1 + 176);
  v107 = (__int128 *)(a2 + 176);
  v108 = *(BAEventReporter **)(a1 + 216);
  v109 = *(_QWORD *)(a2 + 216);
  if (v108 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v109 == 1)
    {
      v110 = *v107;
      v111 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v111;
      *v106 = v110;
    }
    else
    {
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
      *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v114 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v114;
      swift_bridgeObjectRetain(v114);
    }
  }
  else if (v109 == 1)
  {
    sub_19008(a1 + 176);
    v113 = *(_OWORD *)(a2 + 192);
    v112 = *(_OWORD *)(a2 + 208);
    *v106 = *v107;
    *(_OWORD *)(a1 + 192) = v113;
    *(_OWORD *)(a1 + 208) = v112;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
    *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v115 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v115;
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRelease(v108, v116, v117, v118, v119, v120, v121, v122);
  }
  v123 = (_OWORD *)(a1 + 224);
  v124 = (_OWORD *)(a2 + 224);
  v125 = *(BAEventReporter **)(a1 + 232);
  v126 = *(_QWORD *)(a2 + 232);
  if (v125)
  {
    if (v126)
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v127 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v127;
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRelease(v125, v128, v129, v130, v131, v132, v133, v134);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v135 = *(_QWORD *)(a2 + 248);
      v136 = *(BAEventReporter **)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v135;
      swift_bridgeObjectRetain(v135);
      swift_bridgeObjectRelease(v136, v137, v138, v139, v140, v141, v142, v143);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      v144 = *(_QWORD *)(a2 + 264);
      v145 = *(BAEventReporter **)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v144;
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRelease(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      sub_8DA38((_QWORD *)(a1 + 224));
      v157 = *(_OWORD *)(a2 + 240);
      v156 = *(_OWORD *)(a2 + 256);
      *v123 = *v124;
      *(_OWORD *)(a1 + 240) = v157;
      *(_OWORD *)(a1 + 256) = v156;
    }
  }
  else if (v126)
  {
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v153 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v153;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v154 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v154;
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v155 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 264) = v155;
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v154);
    swift_bridgeObjectRetain(v155);
  }
  else
  {
    v158 = *v124;
    v159 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v159;
    *v123 = v158;
  }
  v160 = *(int *)(a3 + 40);
  v161 = a1 + v160;
  v162 = a2 + v160;
  v163 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 24))(v161, v162, v163);
  return a1;
}

_QWORD *sub_8DA38(_QWORD *a1)
{
  destroy for UppParentContentData(a1);
  return a1;
}

uint64_t initializeWithTake for SearchResultSelectEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 224);
  v13 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v13;
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for SearchResultSelectEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  BAEventReporter *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  const char *v48;
  void *v49;
  void *v50;
  void *v51;
  int64_t v52;
  int64_t v53;
  void *v54;
  BAEventReporter *v55;
  uint64_t v56;
  uint64_t v57;
  BAEventReporter *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  uint64_t v66;
  BAEventReporter *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  int64_t v72;
  int64_t v73;
  id v74;
  uint64_t v75;
  BAEventReporter *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  int64_t v81;
  int64_t v82;
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  BAEventReporter *v87;
  uint64_t v88;
  __int128 v89;
  BAEventReporter *v90;
  uint64_t v91;
  uint64_t v92;
  BAEventReporter *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  int64_t v98;
  int64_t v99;
  id v100;
  uint64_t v101;
  BAEventReporter *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  int64_t v107;
  int64_t v108;
  id v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(BAEventReporter **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v55 = *(BAEventReporter **)(a1 + 88);
  if (v55)
  {
    v56 = *(_QWORD *)(a2 + 88);
    if (v56)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v56;
      swift_bridgeObjectRelease(v55, v48, v49, v50, v51, v52, v53, v54);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      v57 = *(_QWORD *)(a2 + 112);
      v58 = *(BAEventReporter **)(a1 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v57;
      swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
      v66 = *(_QWORD *)(a2 + 128);
      v67 = *(BAEventReporter **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v66;
      swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
      *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_DWORD *)(a1 + 153) = *(_DWORD *)(a2 + 153);
      *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
      v75 = *(_QWORD *)(a2 + 168);
      v76 = *(BAEventReporter **)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v75;
      swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_6;
    }
    sub_4E9F4((_QWORD *)(a1 + 80));
  }
  v84 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v84;
  v85 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v85;
  v86 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v86;
LABEL_6:
  v87 = *(BAEventReporter **)(a1 + 216);
  if (v87 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
LABEL_9:
    v89 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v89;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    goto LABEL_11;
  }
  v88 = *(_QWORD *)(a2 + 216);
  if (v88 == 1)
  {
    sub_19008(a1 + 176);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v88;
  swift_bridgeObjectRelease(v87, v48, v49, v50, v51, v52, v53, v54);
LABEL_11:
  v90 = *(BAEventReporter **)(a1 + 232);
  if (!v90)
  {
LABEL_15:
    v110 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v110;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    goto LABEL_16;
  }
  v91 = *(_QWORD *)(a2 + 232);
  if (!v91)
  {
    sub_8DA38((_QWORD *)(a1 + 224));
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v91;
  swift_bridgeObjectRelease(v90, v48, v49, v50, v51, v52, v53, v54);
  v92 = *(_QWORD *)(a2 + 248);
  v93 = *(BAEventReporter **)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v92;
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  v101 = *(_QWORD *)(a2 + 264);
  v102 = *(BAEventReporter **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v101;
  swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
LABEL_16:
  v111 = a3[10];
  v112 = a1 + v111;
  v113 = a2 + v111;
  v114 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 40))(v112, v113, v114);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResultSelectEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8DD60);
}

uint64_t sub_8DD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchResultSelectEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8DDE8);
}

uint64_t sub_8DDE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t sub_8DE5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = " ";
  v4[1] = &unk_1FA9A8;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1FA9C0;
  v4[4] = &unk_1FA9D8;
  v4[5] = &unk_1FA9F0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchResultSelectEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_8DF50 + 4 * byte_1FA87C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_8DF84 + 4 * byte_1FA877[v4]))();
}

uint64_t sub_8DF84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8DF8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8DF94);
  return result;
}

uint64_t sub_8DFA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8DFA8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_8DFAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8DFB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchResultSelectEvent.Model.CodingKeys()
{
  return &type metadata for SearchResultSelectEvent.Model.CodingKeys;
}

unint64_t sub_8DFD4()
{
  unint64_t result;

  result = qword_29A3D0;
  if (!qword_29A3D0)
  {
    result = swift_getWitnessTable(&unk_1FAAA4, &type metadata for SearchResultSelectEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A3D0);
  }
  return result;
}

unint64_t sub_8E01C()
{
  unint64_t result;

  result = qword_29A3D8;
  if (!qword_29A3D8)
  {
    result = swift_getWitnessTable("Uz\a", &type metadata for SearchResultSelectEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A3D8);
  }
  return result;
}

unint64_t sub_8E064()
{
  unint64_t result;

  result = qword_29A3E0;
  if (!qword_29A3E0)
  {
    result = swift_getWitnessTable(&unk_1FAA3C, &type metadata for SearchResultSelectEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A3E0);
  }
  return result;
}

uint64_t sub_8E0A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x6144686372616573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144686372616573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x800000000021F910;
    if (a2 == 0x800000000021F910)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F910, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x800000000021F930;
    if (a2 == 0x800000000021F930)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F930, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v9 = 0xEB00000000617461;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v10 = 0xEA00000000006174;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x74614465726E6567 && a2 == 0xE900000000000061)
  {
    v11 = 0xE900000000000061;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614465726E6567, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

BookAnalytics::SkipActionType_optional __swiftcall SkipActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SkipActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267170, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SkipActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_8E43C + 4 * byte_1FAB1C[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_8E43C()
{
  return 0x61546E6F74747562;
}

uint64_t sub_8E45C()
{
  return 0x6E69626275726373;
}

void sub_8E48C(char *a1)
{
  sub_25A98(*a1);
}

unint64_t sub_8E49C()
{
  unint64_t result;

  result = qword_29A3E8;
  if (!qword_29A3E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SkipActionType, &type metadata for SkipActionType);
    atomic_store(result, (unint64_t *)&qword_29A3E8);
  }
  return result;
}

void sub_8E4E0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_8E52C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x61546E6F74747562, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  return Hasher._finalize()();
}

void sub_8E5A4()
{
  __asm { BR              X10 }
}

uint64_t sub_8E5E0(uint64_t a1)
{
  String.hash(into:)(a1, 0x61546E6F74747562, 0xE900000000000070);
  return swift_bridgeObjectRelease(0xE900000000000070);
}

void sub_8E644(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_8E68C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x61546E6F74747562, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  return Hasher._finalize()();
}

BookAnalytics::SkipActionType_optional sub_8E704(Swift::String *a1)
{
  return SkipActionType.init(rawValue:)(*a1);
}

uint64_t sub_8E710()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_8E740 + 4 * byte_1FAB2C[*v0]))();
}

void sub_8E740(_QWORD *a1@<X8>)
{
  *a1 = 0x61546E6F74747562;
  a1[1] = 0xE900000000000070;
}

void sub_8E764(_QWORD *a1@<X8>)
{
  *a1 = 0x6E69626275726373;
  a1[1] = 0xE900000000000067;
}

uint64_t sub_8E798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_8E90C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_8E7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_8E90C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SkipActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_8E88C + 4 * byte_1FAB35[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_8E8C0 + 4 * byte_1FAB30[v4]))();
}

uint64_t sub_8E8C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8E8C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8E8D0);
  return result;
}

uint64_t sub_8E8DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8E8E4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_8E8E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8E8F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SkipActionType()
{
  return &type metadata for SkipActionType;
}

unint64_t sub_8E90C()
{
  unint64_t result;

  result = qword_29A3F0;
  if (!qword_29A3F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SkipActionType, &type metadata for SkipActionType);
    atomic_store(result, (unint64_t *)&qword_29A3F0);
  }
  return result;
}

uint64_t ContentType.init(assetType:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0x30102u >> (8 * result);
  return result;
}

uint64_t ReadingGoalsDurationData.currentGoalDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ReadingGoalsDurationData.currentGoalDuration.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

BookAnalytics::SessionReadingData __swiftcall SessionReadingData.init(timeSpentReading:uniqueBooksRead:)(Swift::Int64 timeSpentReading, Swift::Int32 uniqueBooksRead)
{
  uint64_t v2;
  BookAnalytics::SessionReadingData result;

  *(_QWORD *)v2 = timeSpentReading;
  *(_DWORD *)(v2 + 8) = uniqueBooksRead;
  result.timeSpentReading = timeSpentReading;
  result.uniqueBooksRead = uniqueBooksRead;
  return result;
}

BOOL static SessionReadingData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == (unint64_t)*(unsigned int *)(a2 + 8);
}

uint64_t sub_8E9A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F42657571696E75;
  else
    return 0xD000000000000010;
}

uint64_t sub_8E9F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_8EF98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_8EA18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8EB88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8EA40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8EB88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SessionReadingData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int v14;
  char v15;
  char v16;

  v4 = sub_71B4(&qword_29A3F8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = *((_DWORD *)v1 + 2);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_8EB88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SessionReadingData.CodingKeys, &type metadata for SessionReadingData.CodingKeys, v11, v9, v10);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v16, v4);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v15, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_8EB88()
{
  unint64_t result;

  result = qword_29A400;
  if (!qword_29A400)
  {
    result = swift_getWitnessTable(&unk_1FAE08, &type metadata for SessionReadingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A400);
  }
  return result;
}

uint64_t SessionReadingData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_71B4(&qword_29A408);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_8EB88();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SessionReadingData.CodingKeys, &type metadata for SessionReadingData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 8) = v13;
  }
  return sub_7DAC(a1);
}

unint64_t sub_8ED1C()
{
  unint64_t result;

  result = qword_29A410;
  if (!qword_29A410)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SessionReadingData, &type metadata for SessionReadingData);
    atomic_store(result, (unint64_t *)&qword_29A410);
  }
  return result;
}

unint64_t sub_8ED64()
{
  unint64_t result;

  result = qword_29A418;
  if (!qword_29A418)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SessionReadingData, &type metadata for SessionReadingData);
    atomic_store(result, (unint64_t *)&qword_29A418);
  }
  return result;
}

uint64_t sub_8EDA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SessionReadingData.init(from:)(a1, a2);
}

uint64_t sub_8EDBC(_QWORD *a1)
{
  return SessionReadingData.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for SessionReadingData(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SessionReadingData()
{
  return &type metadata for SessionReadingData;
}

uint64_t storeEnumTagSinglePayload for SessionReadingData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_8EE40 + 4 * byte_1FAC65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_8EE74 + 4 * byte_1FAC60[v4]))();
}

uint64_t sub_8EE74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8EE7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8EE84);
  return result;
}

uint64_t sub_8EE90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8EE98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_8EE9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8EEA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionReadingData.CodingKeys()
{
  return &type metadata for SessionReadingData.CodingKeys;
}

unint64_t sub_8EEC4()
{
  unint64_t result;

  result = qword_29A420;
  if (!qword_29A420)
  {
    result = swift_getWitnessTable(&unk_1FADE0, &type metadata for SessionReadingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A420);
  }
  return result;
}

unint64_t sub_8EF0C()
{
  unint64_t result;

  result = qword_29A428;
  if (!qword_29A428)
  {
    result = swift_getWitnessTable(&unk_1FAD50, &type metadata for SessionReadingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A428);
  }
  return result;
}

unint64_t sub_8EF54()
{
  unint64_t result;

  result = qword_29A430;
  if (!qword_29A430)
  {
    result = swift_getWitnessTable(&unk_1FAD78, &type metadata for SessionReadingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A430);
  }
  return result;
}

uint64_t sub_8EF98(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x800000000021F950;
    if (a2 == 0x800000000021F950)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F950, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6F42657571696E75 && a2 == 0xEF64616552736B6FLL)
  {
    swift_bridgeObjectRelease(0xEF64616552736B6FLL);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F42657571696E75, 0xEF64616552736B6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_8F0AC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6553686372616573;
  else
    return 0x7453686372616573;
}

uint64_t sub_8F0FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_8F784(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_8F120(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8F4FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8F148(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8F4FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_29A438);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_8F4FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchData.CodingKeys, &type metadata for SearchData.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

void SearchData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;

  v5 = sub_71B4(&qword_29A448);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_8F4FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchData.CodingKeys, &type metadata for SearchData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v36 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
    v14 = v13;
    v35 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v17 = v16;
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19 = v15;
    v18(v8, v5);
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    a2[2] = v19;
    a2[3] = (uint64_t)v17;
    swift_bridgeObjectRetain(v17);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v17, v20, v21, v22, v23, v24, v25, v26);
    swift_bridgeObjectRelease(v14, v27, v28, v29, v30, v31, v32, v33);
  }
}

void sub_8F444(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  SearchData.init(from:)(a1, a2);
}

uint64_t sub_8F458(_QWORD *a1)
{
  return SearchData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics9ErrorDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

unint64_t sub_8F4FC()
{
  unint64_t result;

  result = qword_29A440;
  if (!qword_29A440)
  {
    result = swift_getWitnessTable(&unk_1FAFF4, &type metadata for SearchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A440);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ErrorData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchData()
{
  return &type metadata for SearchData;
}

uint64_t storeEnumTagSinglePayload for SearchData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_8F62C + 4 * byte_1FAE5D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_8F660 + 4 * byte_1FAE58[v4]))();
}

uint64_t sub_8F660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8F668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8F670);
  return result;
}

uint64_t sub_8F67C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8F684);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_8F688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8F690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchData.CodingKeys()
{
  return &type metadata for SearchData.CodingKeys;
}

unint64_t sub_8F6B0()
{
  unint64_t result;

  result = qword_29A450;
  if (!qword_29A450)
  {
    result = swift_getWitnessTable(&unk_1FAFCC, &type metadata for SearchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A450);
  }
  return result;
}

unint64_t sub_8F6F8()
{
  unint64_t result;

  result = qword_29A458;
  if (!qword_29A458)
  {
    result = swift_getWitnessTable(&unk_1FAF3C, &type metadata for SearchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A458);
  }
  return result;
}

unint64_t sub_8F740()
{
  unint64_t result;

  result = qword_29A460;
  if (!qword_29A460)
  {
    result = swift_getWitnessTable(&unk_1FAF64, &type metadata for SearchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A460);
  }
  return result;
}

uint64_t sub_8F784(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7453686372616573 && a2 == 0xEC000000676E6972)
  {
    v5 = 0xEC000000676E6972;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7453686372616573, 0xEC000000676E6972, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6553686372616573 && a2 == 0xEF44496E6F697373)
  {
    swift_bridgeObjectRelease(0xEF44496E6F697373);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553686372616573, 0xEF44496E6F697373, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::SelectionType_optional __swiftcall SelectionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SelectionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2671F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SelectionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1802465122;
  if (*v0 != 1)
    v1 = 0x6F6F626F69647561;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_8F960(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_28998(*a1, *a2);
}

unint64_t sub_8F970()
{
  unint64_t result;

  result = qword_29A468;
  if (!qword_29A468)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SelectionType, &type metadata for SelectionType);
    atomic_store(result, (unint64_t *)&qword_29A468);
  }
  return result;
}

Swift::Int sub_8F9B4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE400000000000000;
  v3 = 1802465122;
  if (v1 != 1)
  {
    v3 = 0x6F6F626F69647561;
    v2 = 0xE90000000000006BLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_8FA50(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE400000000000000;
  v3 = 1802465122;
  if (*v1 != 1)
  {
    v3 = 0x6F6F626F69647561;
    v2 = 0xE90000000000006BLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_8FAC8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE400000000000000;
  v4 = 1802465122;
  if (v2 != 1)
  {
    v4 = 0x6F6F626F69647561;
    v3 = 0xE90000000000006BLL;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::SelectionType_optional sub_8FB60(Swift::String *a1)
{
  return SelectionType.init(rawValue:)(*a1);
}

void sub_8FB6C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE400000000000000;
  v5 = 1802465122;
  if (v2 != 1)
  {
    v5 = 0x6F6F626F69647561;
    v4 = 0xE90000000000006BLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_8FBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_8FD3C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_8FC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_8FD3C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SelectionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_8FCBC + 4 * byte_1FB049[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_8FCF0 + 4 * byte_1FB044[v4]))();
}

uint64_t sub_8FCF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8FCF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8FD00);
  return result;
}

uint64_t sub_8FD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8FD14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_8FD18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8FD20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SelectionType()
{
  return &type metadata for SelectionType;
}

unint64_t sub_8FD3C()
{
  unint64_t result;

  result = qword_29A470;
  if (!qword_29A470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SelectionType, &type metadata for SelectionType);
    atomic_store(result, (unint64_t *)&qword_29A470);
  }
  return result;
}

BookAnalytics::UpSellData __swiftcall UpSellData.init(upSellLocation:upSellVariant:upSellVariantVersion:)(BookAnalytics::UpSellLocation upSellLocation, BookAnalytics::UpSellVariant upSellVariant, Swift::String upSellVariantVersion)
{
  uint64_t v3;
  char v4;
  BookAnalytics::UpSellData result;

  v4 = *(_BYTE *)upSellVariant;
  *(_BYTE *)v3 = *(_BYTE *)upSellLocation;
  *(_BYTE *)(v3 + 1) = v4;
  *(Swift::String *)(v3 + 8) = upSellVariantVersion;
  result.upSellVariantVersion._object = (void *)upSellVariantVersion._countAndFlagsBits;
  LOBYTE(result.upSellVariantVersion._countAndFlagsBits) = upSellVariant;
  result.upSellLocation = upSellLocation;
  return result;
}

uint64_t sub_8FD9C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x61566C6C65537075;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x6F4C6C6C65537075;
}

uint64_t sub_8FE14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_907E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_8FE38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9036C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8FE60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9036C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UpSellData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v4 = sub_71B4(&qword_29A478);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v21 = v1[1];
  v9 = *((_QWORD *)v1 + 1);
  v19 = *((_QWORD *)v1 + 2);
  v20 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_9036C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UpSellData.CodingKeys, &type metadata for UpSellData.CodingKeys, v12, v10, v11);
  v26 = v8;
  v25 = 0;
  v13 = sub_903B0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v4, &type metadata for UpSellLocation, v13);
  if (!v2)
  {
    v15 = v19;
    v14 = v20;
    v24 = v21;
    v23 = 1;
    v16 = sub_903F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v4, &type metadata for UpSellVariant, v16);
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t UpSellData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;

  v5 = sub_71B4(&qword_29A498);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_9036C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UpSellData.CodingKeys, &type metadata for UpSellData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v23) = 0;
    v12 = sub_90438();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v23 + 2), &type metadata for UpSellLocation, (char *)&v23 + 1, v5, &type metadata for UpSellLocation, v12);
    v13 = BYTE2(v23);
    v22 = 1;
    v14 = sub_9047C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v23, &type metadata for UpSellVariant, &v22, v5, &type metadata for UpSellVariant, v14);
    v20 = v23;
    v21 = 2;
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v13;
    *(_BYTE *)(a2 + 1) = v20;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v18;
  }
  return sub_7DAC(a1);
}

uint64_t sub_901CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return UpSellData.init(from:)(a1, a2);
}

uint64_t sub_901E0(_QWORD *a1)
{
  return UpSellData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics10UpSellDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BAEventReporter *v16;
  uint64_t result;
  char v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_2A130(*(_BYTE *)a1);
  if ((v8 & 1) == 0)
    return 0;
  v9 = 0x6E6F43664F646E65;
  v10 = 0xEC000000746E6574;
  if (v2 != 1)
  {
    v9 = 0x6F6F42664F646E65;
    v10 = 0xE90000000000006BLL;
  }
  if (v2)
    v11 = v9;
  else
    v11 = 0x6E776F6E6B6E75;
  if (v2)
    v12 = (BAEventReporter *)v10;
  else
    v12 = (BAEventReporter *)0xE700000000000000;
  v13 = 0x6E6F43664F646E65;
  v14 = 0xEC000000746E6574;
  if (v5 != 1)
  {
    v13 = 0x6F6F42664F646E65;
    v14 = 0xE90000000000006BLL;
  }
  if (v5)
    v15 = v13;
  else
    v15 = 0x6E776F6E6B6E75;
  if (v5)
    v16 = (BAEventReporter *)v14;
  else
    v16 = (BAEventReporter *)0xE700000000000000;
  if (v11 == v15 && v12 == v16)
  {
    swift_bridgeObjectRelease_n(v12, 2);
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v15, v16, 0);
    swift_bridgeObjectRelease(v12, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v16, v26, v27, v28, v29, v30, v31, v32);
    result = 0;
    if ((v18 & 1) == 0)
      return result;
  }
  if (v3 == v6 && v4 == v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0);
}

unint64_t sub_9036C()
{
  unint64_t result;

  result = qword_29A480;
  if (!qword_29A480)
  {
    result = swift_getWitnessTable(&unk_1FB300, &type metadata for UpSellData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A480);
  }
  return result;
}

unint64_t sub_903B0()
{
  unint64_t result;

  result = qword_29A488;
  if (!qword_29A488)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpSellLocation, &type metadata for UpSellLocation);
    atomic_store(result, (unint64_t *)&qword_29A488);
  }
  return result;
}

unint64_t sub_903F4()
{
  unint64_t result;

  result = qword_29A490;
  if (!qword_29A490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpSellVariant, &type metadata for UpSellVariant);
    atomic_store(result, (unint64_t *)&qword_29A490);
  }
  return result;
}

unint64_t sub_90438()
{
  unint64_t result;

  result = qword_29A4A0;
  if (!qword_29A4A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpSellLocation, &type metadata for UpSellLocation);
    atomic_store(result, (unint64_t *)&qword_29A4A0);
  }
  return result;
}

unint64_t sub_9047C()
{
  unint64_t result;

  result = qword_29A4A8;
  if (!qword_29A4A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpSellVariant, &type metadata for UpSellVariant);
    atomic_store(result, (unint64_t *)&qword_29A4A8);
  }
  return result;
}

uint64_t destroy for UpSellData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s13BookAnalytics10UpSellDataVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for UpSellData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for UpSellData(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for UpSellData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpSellData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpSellData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpSellData()
{
  return &type metadata for UpSellData;
}

uint64_t storeEnumTagSinglePayload for UpSellData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_90688 + 4 * byte_1FB165[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_906BC + 4 * byte_1FB160[v4]))();
}

uint64_t sub_906BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_906C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x906CCLL);
  return result;
}

uint64_t sub_906D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x906E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_906E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_906EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UpSellData.CodingKeys()
{
  return &type metadata for UpSellData.CodingKeys;
}

unint64_t sub_9070C()
{
  unint64_t result;

  result = qword_29A4B0;
  if (!qword_29A4B0)
  {
    result = swift_getWitnessTable(&unk_1FB2D8, &type metadata for UpSellData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A4B0);
  }
  return result;
}

unint64_t sub_90754()
{
  unint64_t result;

  result = qword_29A4B8;
  if (!qword_29A4B8)
  {
    result = swift_getWitnessTable(&unk_1FB248, &type metadata for UpSellData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A4B8);
  }
  return result;
}

unint64_t sub_9079C()
{
  unint64_t result;

  result = qword_29A4C0;
  if (!qword_29A4C0)
  {
    result = swift_getWitnessTable(&unk_1FB270, &type metadata for UpSellData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A4C0);
  }
  return result;
}

uint64_t sub_907E0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6F4C6C6C65537075 && a2 == 0xEE006E6F69746163)
  {
    v5 = 0xEE006E6F69746163;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4C6C6C65537075, 0xEE006E6F69746163, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x61566C6C65537075 && a2 == 0xED0000746E616972)
  {
    v7 = 0xED0000746E616972;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61566C6C65537075, 0xED0000746E616972, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000000021F970)
  {
    swift_bridgeObjectRelease(0x800000000021F970);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F970, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::PurchaseMethod_optional __swiftcall PurchaseMethod.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::PurchaseMethod_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267258, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PurchaseMethod.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6143746964657263;
  if (*v0 != 1)
    v1 = 0x6974706D65646572;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_90A3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2AA78(*a1, *a2);
}

unint64_t sub_90A4C()
{
  unint64_t result;

  result = qword_29A4C8;
  if (!qword_29A4C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PurchaseMethod, &type metadata for PurchaseMethod);
    atomic_store(result, (unint64_t *)&qword_29A4C8);
  }
  return result;
}

Swift::Int sub_90A90()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEA00000000006472;
  v3 = 0x6143746964657263;
  if (v1 != 1)
  {
    v3 = 0x6974706D65646572;
    v2 = 0xEE0065646F436E6FLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_90B40(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEA00000000006472;
  v3 = 0x6143746964657263;
  if (*v1 != 1)
  {
    v3 = 0x6974706D65646572;
    v2 = 0xEE0065646F436E6FLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_90BCC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEA00000000006472;
  v4 = 0x6143746964657263;
  if (v2 != 1)
  {
    v4 = 0x6974706D65646572;
    v3 = 0xEE0065646F436E6FLL;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::PurchaseMethod_optional sub_90C78(Swift::String *a1)
{
  return PurchaseMethod.init(rawValue:)(*a1);
}

void sub_90C84(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEA00000000006472;
  v5 = 0x6143746964657263;
  if (v2 != 1)
  {
    v5 = 0x6974706D65646572;
    v4 = 0xEE0065646F436E6FLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_90CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_90E68();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_90D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_90E68();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for PurchaseMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_90DE8 + 4 * byte_1FB355[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_90E1C + 4 * byte_1FB350[v4]))();
}

uint64_t sub_90E1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_90E24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x90E2CLL);
  return result;
}

uint64_t sub_90E38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x90E40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_90E44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_90E4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseMethod()
{
  return &type metadata for PurchaseMethod;
}

unint64_t sub_90E68()
{
  unint64_t result;

  result = qword_29A4D0;
  if (!qword_29A4D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PurchaseMethod, &type metadata for PurchaseMethod);
    atomic_store(result, (unint64_t *)&qword_29A4D0);
  }
  return result;
}

BookAnalytics::MarkedData __swiftcall MarkedData.init(isFinishedDateSet:)(BookAnalytics::MarkedData isFinishedDateSet)
{
  BookAnalytics::MarkedData *v1;

  v1->isFinishedDateSet.value = isFinishedDateSet.isFinishedDateSet.value;
  return isFinishedDateSet;
}

uint64_t OnDevicePersonalizationPropertyData.isEligible.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t OnDevicePersonalizationPropertyData.isEligible.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t static MarkedData.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
  {
    if (v3 == 2)
      return 1;
  }
  else
  {
    v5 = (v2 & 1) == 0;
    if (v3 != 2 && ((v5 ^ v3) & 1) != 0)
      return 1;
  }
  return 0;
}

unint64_t sub_90F0C()
{
  return 0xD000000000000011;
}

uint64_t sub_90F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_915A4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_90F50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_91088();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_90F78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_91088();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MarkedData.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_71B4(&qword_29A4D8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = *v1;
  sub_7988(a1, v7);
  v10 = sub_91088();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MarkedData.CodingKeys, &type metadata for MarkedData.CodingKeys, v10, v7, v8);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v9, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_91088()
{
  unint64_t result;

  result = qword_29A4E0;
  if (!qword_29A4E0)
  {
    result = swift_getWitnessTable(&unk_1FB610, &type metadata for MarkedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A4E0);
  }
  return result;
}

uint64_t MarkedData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v5 = sub_71B4(&qword_29A4E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_91088();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MarkedData.CodingKeys, &type metadata for MarkedData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
  }
  return sub_7DAC(a1);
}

unint64_t sub_911D4()
{
  unint64_t result;

  result = qword_29A4F0;
  if (!qword_29A4F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarkedData, &type metadata for MarkedData);
    atomic_store(result, (unint64_t *)&qword_29A4F0);
  }
  return result;
}

unint64_t sub_9121C()
{
  unint64_t result;

  result = qword_29A4F8;
  if (!qword_29A4F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarkedData, &type metadata for MarkedData);
    atomic_store(result, (unint64_t *)&qword_29A4F8);
  }
  return result;
}

BOOL sub_91260(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 2)
  {
    v4 = (v2 & 1) == 0;
    return v3 != 2 && ((v4 ^ v3) & 1) != 0;
  }
  return v3 == 2;
}

uint64_t sub_912A4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return MarkedData.init(from:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for MarkedData(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for MarkedData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_913B0 + 4 * byte_1FB475[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_913E4 + 4 * byte_1FB470[v4]))();
}

uint64_t sub_913E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_913EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x913F4);
  return result;
}

uint64_t sub_91400(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x91408);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_9140C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_91414(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MarkedData()
{
  return &type metadata for MarkedData;
}

uint64_t storeEnumTagSinglePayload for MarkedData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_91470 + 4 * byte_1FB47A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_91490 + 4 * byte_1FB47F[v4]))();
}

_BYTE *sub_91470(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_91490(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_91498(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_914A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_914A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_914B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MarkedData.CodingKeys()
{
  return &type metadata for MarkedData.CodingKeys;
}

unint64_t sub_914D0()
{
  unint64_t result;

  result = qword_29A500;
  if (!qword_29A500)
  {
    result = swift_getWitnessTable(&unk_1FB5E8, &type metadata for MarkedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A500);
  }
  return result;
}

unint64_t sub_91518()
{
  unint64_t result;

  result = qword_29A508;
  if (!qword_29A508)
  {
    result = swift_getWitnessTable(&unk_1FB558, &type metadata for MarkedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A508);
  }
  return result;
}

unint64_t sub_91560()
{
  unint64_t result;

  result = qword_29A510;
  if (!qword_29A510)
  {
    result = swift_getWitnessTable(&unk_1FB580, &type metadata for MarkedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A510);
  }
  return result;
}

uint64_t sub_915A4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F990)
  {
    swift_bridgeObjectRelease(0x800000000021F990);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F990, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_91628(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29A518, &enum case for SessionGroup.default(_:));
}

uint64_t static SearchEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295700, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A518, a1);
}

uint64_t sub_91668(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29A530, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SearchEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295708, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A530, a1);
}

uint64_t SearchEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29A5B8, (uint64_t)&nominal type descriptor for SearchEvent);
}

uint64_t SearchEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SearchEvent.eventData.modify())()
{
  type metadata accessor for SearchEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for SearchEvent(0) + 20);
  v5 = enum case for EventProperty.required<A>(_:);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
}

uint64_t SearchResultsReturnedEvent.Model.searchData.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_35E04(v2, v3, v4, v5);
}

uint64_t SearchEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29A648, (uint64_t)&nominal type descriptor for SearchEvent.Model);
}

uint64_t SearchEvent.Model.init(searchData:eventData:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  v5 = (char *)a3 + *(int *)(type metadata accessor for SearchEvent.Model(0) + 20);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_918C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x6144686372616573;
}

uint64_t sub_9190C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_92ABC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_91930(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_91AE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_91958(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_91AE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchEvent.Model.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _OWORD v20[2];

  v3 = v1;
  v5 = sub_71B4(&qword_29A548);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_91AE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchEvent.Model.CodingKeys, &type metadata for SearchEvent.Model.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v20[0] = *v3;
  v20[1] = v12;
  v19 = 0;
  v13 = sub_8B8F4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for SearchData, v13);
  if (!v2)
  {
    v14 = (char *)v3 + *(int *)(type metadata accessor for SearchEvent.Model(0) + 20);
    LOBYTE(v20[0]) = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v20, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_91AE4()
{
  unint64_t result;

  result = qword_29A550;
  if (!qword_29A550)
  {
    result = swift_getWitnessTable(&unk_1FB804, &type metadata for SearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A550);
  }
  return result;
}

uint64_t SearchEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  char v30;

  v25 = a2;
  v27 = type metadata accessor for EventData(0);
  v24 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_71B4(&qword_29A558);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SearchEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_91AE4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchEvent.Model.CodingKeys, &type metadata for SearchEvent.Model.CodingKeys, v13, v12, v11);
  if (v2)
    return sub_7DAC(a1);
  v23 = a1;
  v14 = v5;
  v15 = v10;
  v16 = v26;
  v17 = v27;
  v30 = 0;
  v18 = sub_8BF70();
  v19 = v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &type metadata for SearchData, &v30, v28, &type metadata for SearchData, v18);
  v20 = v29[1];
  *(_OWORD *)v15 = v29[0];
  *((_OWORD *)v15 + 1) = v20;
  LOBYTE(v29[0]) = 1;
  v21 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, v29, v19, v17, v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v19);
  (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 32))(&v15[*(int *)(v8 + 20)], v16, v17);
  sub_91D8C((uint64_t)v15, v25);
  sub_7DAC(v23);
  return sub_91DD0((uint64_t)v15);
}

uint64_t sub_91D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_91DD0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_91E0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SearchEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_91E20(_QWORD *a1)
{
  return SearchEvent.Model.encode(to:)(a1);
}

uint64_t sub_91E34@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295700, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A518, (uint64_t)sub_91628, a1);
}

uint64_t sub_91E58@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295708, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A530, (uint64_t)sub_91668, a1);
}

uint64_t sub_91E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_29A1E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for SearchEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SearchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for SearchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for SearchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SearchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_92238);
}

uint64_t sub_92238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_29A1E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_922C0);
}

uint64_t sub_922C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_29A1E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_92344(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_923C8(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_923C8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29A2C8)
  {
    v2 = sub_8BF70();
    v3 = sub_8B8F4();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for SearchData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29A2C8);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v10;
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for EventData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for SearchEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for SearchEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

_QWORD *assignWithCopy for SearchEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = (BAEventReporter *)a1[1];
  v7 = a2[1];
  if (v6)
  {
    if (v7)
    {
      *a1 = *a2;
      v8 = a2[1];
      a1[1] = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      a1[2] = a2[2];
      v16 = a2[3];
      v17 = (BAEventReporter *)a1[3];
      a1[3] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      sub_926C0((uint64_t)a1);
      v27 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v27;
    }
  }
  else if (v7)
  {
    *a1 = *a2;
    v25 = a2[1];
    a1[1] = v25;
    a1[2] = a2[2];
    v26 = a2[3];
    a1[3] = v26;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v28 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v28;
  }
  v29 = *(int *)(a3 + 20);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v30, v31, v32);
  return a1;
}

uint64_t sub_926C0(uint64_t a1)
{
  destroy for ThemesData(a1);
  return a1;
}

uint64_t assignWithTake for SearchEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    sub_926C0(a1);
LABEL_5:
    v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v22;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v12;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v23 = a3[5];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9279C);
}

uint64_t sub_9279C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for SearchEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_92830);
}

uint64_t sub_92830(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_928A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = " ";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_92964 + 4 * byte_1FB665[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_92998 + 4 * byte_1FB660[v4]))();
}

uint64_t sub_92998(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_929A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x929A8);
  return result;
}

uint64_t sub_929B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x929BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_929C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_929C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchEvent.Model.CodingKeys()
{
  return &type metadata for SearchEvent.Model.CodingKeys;
}

unint64_t sub_929E8()
{
  unint64_t result;

  result = qword_29A680;
  if (!qword_29A680)
  {
    result = swift_getWitnessTable(&unk_1FB7DC, &type metadata for SearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A680);
  }
  return result;
}

unint64_t sub_92A30()
{
  unint64_t result;

  result = qword_29A688;
  if (!qword_29A688)
  {
    result = swift_getWitnessTable("=y\a", &type metadata for SearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A688);
  }
  return result;
}

unint64_t sub_92A78()
{
  unint64_t result;

  result = qword_29A690;
  if (!qword_29A690)
  {
    result = swift_getWitnessTable(&unk_1FB774, &type metadata for SearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A690);
  }
  return result;
}

uint64_t sub_92ABC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6144686372616573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144686372616573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::PrevAltContentExposureData __swiftcall PrevAltContentExposureData.init(prevExposureType:prevExposureTypeView:)(BookAnalytics::ExposureType prevExposureType, BookAnalytics::ExposureTypeView prevExposureTypeView)
{
  _BYTE *v2;
  char v3;
  BookAnalytics::PrevAltContentExposureData result;

  v3 = *(_BYTE *)prevExposureTypeView;
  *v2 = *(_BYTE *)prevExposureType;
  v2[1] = v3;
  result.prevExposureType = prevExposureType;
  return result;
}

void static ListeningActionSourceData.== infix(_:_:)(char *a1)
{
  char v1;
  char v2;

  v1 = a1[1];
  sub_27B0C(*a1);
  if ((v2 & 1) != 0)
    sub_27D34(v1);
}

unint64_t sub_92C20()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0xD000000000000019;
}

uint64_t sub_92C60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_93430(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_92C84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_92E20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_92CAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_92E20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListeningActionSourceData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = sub_71B4(&qword_29A698);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v16 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_92E20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ListeningActionSourceData.CodingKeys, &type metadata for ListeningActionSourceData.CodingKeys, v11, v9, v10);
  v20 = v8;
  v19 = 0;
  v12 = sub_92E64();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v4, &type metadata for ListeningActionSourceType, v12);
  if (!v2)
  {
    v18 = v16;
    v17 = 1;
    v13 = sub_92EA8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, &type metadata for ListeningRoutedTo, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_92E20()
{
  unint64_t result;

  result = qword_29A6A0;
  if (!qword_29A6A0)
  {
    result = swift_getWitnessTable(&unk_1FBA20, &type metadata for ListeningActionSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A6A0);
  }
  return result;
}

unint64_t sub_92E64()
{
  unint64_t result;

  result = qword_29A6A8;
  if (!qword_29A6A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningActionSourceType, &type metadata for ListeningActionSourceType);
    atomic_store(result, (unint64_t *)&qword_29A6A8);
  }
  return result;
}

unint64_t sub_92EA8()
{
  unint64_t result;

  result = qword_29A6B0;
  if (!qword_29A6B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningRoutedTo, &type metadata for ListeningRoutedTo);
    atomic_store(result, (unint64_t *)&qword_29A6B0);
  }
  return result;
}

uint64_t ListeningActionSourceData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = sub_71B4(&qword_29A6B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_92E20();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListeningActionSourceData.CodingKeys, &type metadata for ListeningActionSourceData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v19) = 0;
    v12 = sub_93068();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v19 + 2), &type metadata for ListeningActionSourceType, (char *)&v19 + 1, v5, &type metadata for ListeningActionSourceType, v12);
    v13 = BYTE2(v19);
    v18 = 1;
    v14 = sub_930AC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for ListeningRoutedTo, &v18, v5, &type metadata for ListeningRoutedTo, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v19;
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

unint64_t sub_93068()
{
  unint64_t result;

  result = qword_29A6C0;
  if (!qword_29A6C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningActionSourceType, &type metadata for ListeningActionSourceType);
    atomic_store(result, (unint64_t *)&qword_29A6C0);
  }
  return result;
}

unint64_t sub_930AC()
{
  unint64_t result;

  result = qword_29A6C8;
  if (!qword_29A6C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningRoutedTo, &type metadata for ListeningRoutedTo);
    atomic_store(result, (unint64_t *)&qword_29A6C8);
  }
  return result;
}

uint64_t sub_930F8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ListeningActionSourceData.init(from:)(a1, a2);
}

uint64_t sub_9310C(_QWORD *a1)
{
  return ListeningActionSourceData.encode(to:)(a1);
}

_WORD *initializeBufferWithCopyOfBuffer for ListeningActionSourceData(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ListeningActionSourceData(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 65287 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65287 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65287;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65287;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65287;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ListeningActionSourceData(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65287 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65287 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_9320C + 4 * byte_1FB865[v4]))();
  *a1 = a2 - 249;
  return ((uint64_t (*)(void))((char *)sub_93240 + 4 * byte_1FB860[v4]))();
}

uint64_t sub_93240(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_93248(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x93250);
  return result;
}

uint64_t sub_9325C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x93264);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_93268(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_93270(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListeningActionSourceData()
{
  return &type metadata for ListeningActionSourceData;
}

uint64_t storeEnumTagSinglePayload for ListeningActionSourceData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_932D8 + 4 * byte_1FB86F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_9330C + 4 * byte_1FB86A[v4]))();
}

uint64_t sub_9330C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_93314(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x9331CLL);
  return result;
}

uint64_t sub_93328(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x93330);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_93334(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9333C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListeningActionSourceData.CodingKeys()
{
  return &type metadata for ListeningActionSourceData.CodingKeys;
}

unint64_t sub_9335C()
{
  unint64_t result;

  result = qword_29A6D0;
  if (!qword_29A6D0)
  {
    result = swift_getWitnessTable(&unk_1FB9F8, &type metadata for ListeningActionSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A6D0);
  }
  return result;
}

unint64_t sub_933A4()
{
  unint64_t result;

  result = qword_29A6D8;
  if (!qword_29A6D8)
  {
    result = swift_getWitnessTable(&unk_1FB968, &type metadata for ListeningActionSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A6D8);
  }
  return result;
}

unint64_t sub_933EC()
{
  unint64_t result;

  result = qword_29A6E0;
  if (!qword_29A6E0)
  {
    result = swift_getWitnessTable(&unk_1FB990, &type metadata for ListeningActionSourceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A6E0);
  }
  return result;
}

uint64_t sub_93430(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000019)
  {
    v4 = 0x800000000021F9B0;
    if (a2 == 0x800000000021F9B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000021F9B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F9D0)
  {
    swift_bridgeObjectRelease(0x800000000021F9D0);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F9D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_93518(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29A6E8, &enum case for SessionGroup.default(_:));
}

uint64_t static ResetThemeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295710, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A6E8, a1);
}

uint64_t sub_93558(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29A700, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ResetThemeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295718, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A700, a1);
}

uint64_t ResetThemeEvent.textData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ResetThemeEvent.textData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ResetThemeEvent.layoutOptionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResetThemeEvent(0) + 20);
  v4 = sub_71B4(&qword_296018);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ResetThemeEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29A788, (uint64_t)&nominal type descriptor for ResetThemeEvent);
}

uint64_t ResetThemeEvent.layoutOptionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResetThemeEvent(0) + 20);
  v4 = sub_71B4(&qword_296018);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ResetThemeEvent.layoutOptionData.modify())()
{
  type metadata accessor for ResetThemeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ResetThemeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResetThemeEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResetThemeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResetThemeEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ResetThemeEvent.eventData.modify())()
{
  type metadata accessor for ResetThemeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ResetThemeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ResetThemeEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = enum case for EventProperty.required<A>(_:);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
}

uint64_t ResetThemeEvent.Model.textData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain(v2);
}

__n128 ResetThemeEvent.Model.layoutOptionData.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 36);
  v3 = *(_WORD *)(v1 + 44);
  result = *(__n128 *)(v1 + 20);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u16[4] = v3;
  return result;
}

uint64_t ResetThemeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResetThemeEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ResetThemeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29A820, (uint64_t)&nominal type descriptor for ResetThemeEvent.Model);
}

uint64_t ResetThemeEvent.Model.init(textData:layoutOptionData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_WORD *)(a2 + 24);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 20) = *(_OWORD *)a2;
  *(_QWORD *)(a4 + 36) = v7;
  *(_WORD *)(a4 + 44) = v8;
  v9 = a4 + *(int *)(type metadata accessor for ResetThemeEvent.Model(0) + 24);
  v10 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
}

uint64_t sub_93964()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x6174614474786574;
}

uint64_t sub_939C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_94D94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_939EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_93BF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_93A14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_93BF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ResetThemeEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  char v24;

  v3 = v1;
  v5 = sub_71B4(&qword_29A718);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_93BF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ResetThemeEvent.Model.CodingKeys, &type metadata for ResetThemeEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 16);
  v21 = *v3;
  LOBYTE(v22) = v12;
  v24 = 0;
  v13 = sub_A824();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v24, v5, &type metadata for TextData, v13);
  if (!v2)
  {
    v14 = *(_QWORD *)((char *)v3 + 36);
    v15 = *((_WORD *)v3 + 22);
    v21 = *(__int128 *)((char *)v3 + 20);
    v22 = v14;
    v23 = v15;
    v24 = 1;
    v16 = sub_A868();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v24, v5, &type metadata for LayoutOptionData, v16);
    v17 = (uint64_t)v3 + *(int *)(type metadata accessor for ResetThemeEvent.Model(0) + 24);
    LOBYTE(v21) = 2;
    v18 = type metadata accessor for EventData(0);
    v19 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v21, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_93BF8()
{
  unint64_t result;

  result = qword_29A720;
  if (!qword_29A720)
  {
    result = swift_getWitnessTable(&unk_1FBC3C, &type metadata for ResetThemeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A720);
  }
  return result;
}

void ResetThemeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int16 v37;
  char v38;

  v29 = a2;
  v3 = type metadata accessor for EventData(0);
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_71B4(&qword_29A728);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ResetThemeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_93BF8();
  v32 = v8;
  v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ResetThemeEvent.Model.CodingKeys, &type metadata for ResetThemeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(a1);
  }
  else
  {
    v34 = v9;
    v16 = v6;
    v17 = v5;
    v19 = v30;
    v18 = v31;
    v38 = 0;
    v20 = sub_AD5C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v35, &type metadata for TextData, &v38, v33, &type metadata for TextData, v20);
    v21 = v36;
    v22 = (uint64_t)v11;
    *(_OWORD *)v11 = v35;
    v11[16] = v21;
    v38 = 1;
    v23 = sub_ADA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v35, &type metadata for LayoutOptionData, &v38, v33, &type metadata for LayoutOptionData, v23);
    v24 = v36;
    v25 = v37;
    *(_OWORD *)(v11 + 20) = v35;
    *(_QWORD *)(v11 + 36) = v24;
    *((_WORD *)v11 + 22) = v25;
    LOBYTE(v35) = 2;
    v26 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v28 = v32;
    v27 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, &v35, v33, v18, v26);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v27);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v19 + 32))(v22 + *(int *)(v34 + 24), v17, v18);
    sub_93EF4(v22, v29);
    sub_7DAC(a1);
    sub_93F38(v22);
  }
}

uint64_t sub_93EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResetThemeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_93F38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ResetThemeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_93F74(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ResetThemeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_93F88(_QWORD *a1)
{
  return ResetThemeEvent.Model.encode(to:)(a1);
}

uint64_t sub_93F9C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295710, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A6E8, (uint64_t)sub_93518, a1);
}

uint64_t sub_93FC0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295718, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A700, (uint64_t)sub_93558, a1);
}

uint64_t sub_93FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = enum case for EventProperty.required<A>(_:);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResetThemeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296010);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296018);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ResetThemeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ResetThemeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ResetThemeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ResetThemeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ResetThemeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResetThemeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_94514);
}

uint64_t sub_94514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296010);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296018);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ResetThemeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_945C4);
}

uint64_t sub_945C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296010);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296018);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_94670(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, &qword_2960D8, (uint64_t (*)(void))sub_AD5C, (uint64_t (*)(void))sub_A824, (uint64_t)&type metadata for TextData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2960E0, (uint64_t (*)(void))sub_ADA0, (uint64_t (*)(void))sub_A868, (uint64_t)&type metadata for LayoutOptionData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ResetThemeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a2 + 20);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_OWORD *)(a1 + 30) = *(_OWORD *)((char *)a2 + 30);
    v9 = type metadata accessor for EventData(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for ResetThemeEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ResetThemeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for ResetThemeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(_OWORD *)(a1 + 20) = v8;
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for ResetThemeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ResetThemeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResetThemeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_94A6C);
}

uint64_t sub_94A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ResetThemeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_94B00);
}

uint64_t sub_94B00(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_94B74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1FBB48;
  v4[1] = &unk_1FBB60;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ResetThemeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_94C3C + 4 * byte_1FBA75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_94C70 + 4 * byte_1FBA70[v4]))();
}

uint64_t sub_94C70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_94C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x94C80);
  return result;
}

uint64_t sub_94C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x94C94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_94C98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_94CA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResetThemeEvent.Model.CodingKeys()
{
  return &type metadata for ResetThemeEvent.Model.CodingKeys;
}

unint64_t sub_94CC0()
{
  unint64_t result;

  result = qword_29A860;
  if (!qword_29A860)
  {
    result = swift_getWitnessTable(&unk_1FBC14, &type metadata for ResetThemeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A860);
  }
  return result;
}

unint64_t sub_94D08()
{
  unint64_t result;

  result = qword_29A868;
  if (!qword_29A868)
  {
    result = swift_getWitnessTable("Mx\a", &type metadata for ResetThemeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A868);
  }
  return result;
}

unint64_t sub_94D50()
{
  unint64_t result;

  result = qword_29A870;
  if (!qword_29A870)
  {
    result = swift_getWitnessTable(&unk_1FBBAC, &type metadata for ResetThemeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A870);
  }
  return result;
}

uint64_t sub_94D94(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6174614474786574 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614474786574, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021EAF0;
    if (a2 == 0x800000000021EAF0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EAF0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_94EEC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29A878, &enum case for SessionGroup.default(_:));
}

uint64_t static InBookSearchEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295720, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A878, a1);
}

uint64_t sub_94F2C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29A890, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static InBookSearchEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295728, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A890, a1);
}

uint64_t InBookSearchEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for InBookSearchEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29A918, (uint64_t)&nominal type descriptor for InBookSearchEvent);
}

uint64_t InBookSearchEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InBookSearchEvent.contentData.modify())()
{
  type metadata accessor for InBookSearchEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InBookSearchEvent.searchData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 24);
  v4 = sub_71B4(&qword_29A1E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InBookSearchEvent.searchData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 24);
  v4 = sub_71B4(&qword_29A1E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InBookSearchEvent.searchData.modify())()
{
  type metadata accessor for InBookSearchEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InBookSearchEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 28);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InBookSearchEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 28);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InBookSearchEvent.seriesData.modify())()
{
  type metadata accessor for InBookSearchEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InBookSearchEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InBookSearchEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InBookSearchEvent.eventData.modify())()
{
  type metadata accessor for InBookSearchEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InBookSearchEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for InBookSearchEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v8, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t InBookSearchEvent.Model.searchData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[14];
  v3 = v1[15];
  v4 = v1[16];
  v5 = v1[17];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_35E04(v2, v3, v4, v5);
}

uint64_t InBookSearchEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[18];
  v3 = v1[19];
  v4 = v1[20];
  v5 = v1[21];
  v6 = v1[22];
  v7 = v1[23];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t InBookSearchEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InBookSearchEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for InBookSearchEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29A9B8, (uint64_t)&nominal type descriptor for InBookSearchEvent.Model);
}

uint64_t InBookSearchEvent.Model.init(readingSessionData:contentData:searchData:seriesData:eventData:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v8;
  char v9;
  int v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  char v22;
  int v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *a1;
  v9 = *((_BYTE *)a1 + 4);
  v10 = a1[2];
  v11 = *((_BYTE *)a1 + 12);
  v12 = *((_BYTE *)a1 + 13);
  v13 = *((_BYTE *)a1 + 14);
  v14 = *a2;
  v15 = a2[1];
  v16 = *((_BYTE *)a2 + 16);
  v17 = *(_OWORD *)(a2 + 3);
  v19 = a2[5];
  v18 = a2[6];
  v20 = *((_WORD *)a2 + 28);
  v21 = *((_DWORD *)a2 + 15);
  v22 = *((_BYTE *)a2 + 64);
  v23 = *((_DWORD *)a2 + 17);
  v24 = *((_BYTE *)a2 + 72);
  v25 = *((_BYTE *)a2 + 77);
  *(_DWORD *)a6 = v8;
  *(_BYTE *)(a6 + 4) = v9;
  *(_DWORD *)(a6 + 8) = v10;
  *(_BYTE *)(a6 + 12) = v11;
  *(_BYTE *)(a6 + 13) = v12;
  *(_BYTE *)(a6 + 14) = v13;
  *(_QWORD *)(a6 + 16) = v14;
  *(_QWORD *)(a6 + 24) = v15;
  *(_BYTE *)(a6 + 32) = v16;
  *(_OWORD *)(a6 + 40) = v17;
  *(_QWORD *)(a6 + 56) = v19;
  *(_QWORD *)(a6 + 64) = v18;
  *(_WORD *)(a6 + 72) = v20;
  *(_DWORD *)(a6 + 76) = v21;
  *(_BYTE *)(a6 + 80) = v22;
  *(_DWORD *)(a6 + 84) = v23;
  *(_BYTE *)(a6 + 88) = v24;
  *(_DWORD *)(a6 + 89) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a6 + 93) = v25;
  v26 = *a3;
  v27 = a3[1];
  *(_OWORD *)(a6 + 96) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a6 + 112) = v26;
  v28 = *a4;
  v29 = a4[1];
  *(_OWORD *)(a6 + 128) = v27;
  *(_OWORD *)(a6 + 144) = v28;
  v30 = a4[2];
  *(_OWORD *)(a6 + 160) = v29;
  *(_OWORD *)(a6 + 176) = v30;
  v31 = a6 + *(int *)(type metadata accessor for InBookSearchEvent.Model(0) + 32);
  v32 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v31, a5, v32);
}

uint64_t sub_95524()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_95558 + 4 * byte_1FBC90[*v0]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_95558()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_95578()
{
  return 0x6144686372616573;
}

uint64_t sub_955A4()
{
  return 0x746144746E657665;
}

uint64_t sub_955C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_975F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_955E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_958E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_9560C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_958E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InBookSearchEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  _BYTE v39[32];
  uint64_t v40;
  __int16 v41;
  int v42;
  char v43;
  int v44;
  char v45;
  int v46;
  char v47;
  __int128 v48;
  char v49;

  v3 = v1;
  v5 = sub_71B4(&qword_29A8A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_958E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InBookSearchEvent.Model.CodingKeys, &type metadata for InBookSearchEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v38) = *(_DWORD *)v3;
  BYTE4(v38) = v12;
  DWORD2(v38) = v13;
  BYTE12(v38) = v14;
  BYTE13(v38) = v15;
  BYTE14(v38) = v16;
  v49 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v49, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    *(_QWORD *)&v38 = *(_QWORD *)(v3 + 16);
    *((_QWORD *)&v38 + 1) = v18;
    v39[0] = v19;
    *(_OWORD *)&v39[8] = v20;
    *(_QWORD *)&v39[24] = v21;
    v40 = v22;
    v41 = v23;
    v42 = v24;
    v43 = v25;
    v44 = v26;
    v45 = v27;
    v46 = *(_DWORD *)(v3 + 89);
    v47 = v28;
    v48 = *(_OWORD *)(v3 + 96);
    v49 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v49, v5, &type metadata for ContentData, v29);
    v30 = *(_OWORD *)(v3 + 128);
    v38 = *(_OWORD *)(v3 + 112);
    *(_OWORD *)v39 = v30;
    v49 = 2;
    v31 = sub_8B8F4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v38, &v49, v5, &type metadata for SearchData, v31);
    v32 = *(_OWORD *)(v3 + 160);
    v38 = *(_OWORD *)(v3 + 144);
    *(_OWORD *)v39 = v32;
    *(_OWORD *)&v39[16] = *(_OWORD *)(v3 + 176);
    v49 = 3;
    v33 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v38, &v49, v5, &type metadata for SeriesData, v33);
    v34 = v3 + *(int *)(type metadata accessor for InBookSearchEvent.Model(0) + 32);
    LOBYTE(v38) = 4;
    v35 = type metadata accessor for EventData(0);
    v36 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v34, &v38, v5, v35, v36);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_958E0()
{
  unint64_t result;

  result = qword_29A8B0;
  if (!qword_29A8B0)
  {
    result = swift_getWitnessTable(&unk_1FBEAC, &type metadata for InBookSearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29A8B0);
  }
  return result;
}

void InBookSearchEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  char v35;
  int v36;
  char v37;
  char v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  _BYTE v56[32];
  uint64_t v57;
  __int16 v58;
  int v59;
  char v60;
  int v61;
  char v62;
  int v63;
  char v64;
  __int128 v65;
  char v66;

  v50 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (uint64_t *)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_71B4(&qword_29A8B8);
  v6 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InBookSearchEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v53 = a1;
  sub_7988(a1, v12);
  v14 = sub_958E0();
  v51 = v8;
  v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InBookSearchEvent.Model.CodingKeys, &type metadata for InBookSearchEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v53);
  }
  else
  {
    v46 = v9;
    v54 = v6;
    v47 = v3;
    v48 = v5;
    v17 = v49;
    v16 = v50;
    v66 = 0;
    v18 = sub_71AEC();
    v19 = v51;
    v20 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ReadingSessionData, &v66, v52, &type metadata for ReadingSessionData, v18);
    v21 = BYTE4(v55);
    v22 = DWORD2(v55);
    v23 = BYTE12(v55);
    v24 = BYTE13(v55);
    v25 = BYTE14(v55);
    v26 = (uint64_t)v11;
    *(_DWORD *)v11 = v55;
    v11[4] = v21;
    *((_DWORD *)v11 + 2) = v22;
    v11[12] = v23;
    v11[13] = v24;
    v11[14] = v25;
    v66 = 1;
    v27 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ContentData, &v66, v20, &type metadata for ContentData, v27);
    v28 = *((_QWORD *)&v55 + 1);
    v29 = v56[0];
    v30 = *(_OWORD *)&v56[8];
    v31 = *(_QWORD *)&v56[24];
    v32 = v57;
    v33 = v58;
    v34 = v59;
    v35 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v64;
    *((_QWORD *)v11 + 2) = v55;
    *((_QWORD *)v11 + 3) = v28;
    v11[32] = v29;
    *(_OWORD *)(v11 + 40) = v30;
    *((_QWORD *)v11 + 7) = v31;
    *((_QWORD *)v11 + 8) = v32;
    *((_WORD *)v11 + 36) = v33;
    *((_DWORD *)v11 + 19) = v34;
    v11[80] = v35;
    *((_DWORD *)v11 + 21) = v36;
    v11[88] = v37;
    *(_DWORD *)(v11 + 89) = v63;
    v11[93] = v38;
    *((_OWORD *)v11 + 6) = v65;
    v66 = 2;
    v39 = sub_8BF70();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for SearchData, &v66, v20, &type metadata for SearchData, v39);
    v40 = *(_OWORD *)v56;
    *((_OWORD *)v11 + 7) = v55;
    *((_OWORD *)v11 + 8) = v40;
    v66 = 3;
    v41 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for SeriesData, &v66, v20, &type metadata for SeriesData, v41);
    v42 = *(_OWORD *)v56;
    *((_OWORD *)v11 + 9) = v55;
    *((_OWORD *)v11 + 10) = v42;
    *((_OWORD *)v11 + 11) = *(_OWORD *)&v56[16];
    LOBYTE(v55) = 4;
    v43 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v44 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v48, v17, &v55, v20, v17, v43);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v47 + 32))(v26 + *(int *)(v46 + 32), v44, v17);
    sub_95D7C(v26, v16);
    sub_7DAC(v53);
    sub_95DC0(v26);
  }
}

uint64_t sub_95D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InBookSearchEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_95DC0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InBookSearchEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_95DFC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  InBookSearchEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_95E10(_QWORD *a1)
{
  return InBookSearchEvent.Model.encode(to:)(a1);
}

uint64_t sub_95E24@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295720, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29A878, (uint64_t)sub_94EEC, a1);
}

uint64_t sub_95E48@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295728, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29A890, (uint64_t)sub_94F2C, a1);
}

uint64_t sub_95E6C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v9, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for InBookSearchEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_29A1E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for InBookSearchEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for InBookSearchEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for InBookSearchEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for InBookSearchEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for InBookSearchEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_29A1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for InBookSearchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9662C);
}

uint64_t sub_9662C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_29A1E8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296310);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for InBookSearchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9672C);
}

uint64_t sub_9672C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_29A1E8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296310);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_96828(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_29A2C8, (uint64_t (*)(void))sub_8BF70, (uint64_t (*)(void))sub_8B8F4, (uint64_t)&type metadata for SearchData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for InBookSearchEvent.Model(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *a2;
    *(_QWORD *)((char *)a1 + 7) = *(uint64_t *)((char *)a2 + 7);
    v7 = a2[3];
    v4[2] = a2[2];
    v4[3] = v7;
    *((_BYTE *)v4 + 32) = *((_BYTE *)a2 + 32);
    v8 = a2[6];
    v4[5] = a2[5];
    v4[6] = v8;
    v9 = a2[8];
    v4[7] = a2[7];
    v4[8] = v9;
    *((_WORD *)v4 + 36) = *((_WORD *)a2 + 36);
    *((_DWORD *)v4 + 19) = *((_DWORD *)a2 + 19);
    *((_BYTE *)v4 + 80) = *((_BYTE *)a2 + 80);
    *((_DWORD *)v4 + 21) = *((_DWORD *)a2 + 21);
    *((_BYTE *)v4 + 88) = *((_BYTE *)a2 + 88);
    *(_DWORD *)((char *)v4 + 89) = *(_DWORD *)((char *)a2 + 89);
    *((_BYTE *)v4 + 93) = *((_BYTE *)a2 + 93);
    v10 = a2[13];
    v4[12] = a2[12];
    v4[13] = v10;
    v11 = a2[15];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    if (v11)
    {
      v4[14] = a2[14];
      v4[15] = v11;
      v12 = a2[17];
      v4[16] = a2[16];
      v4[17] = v12;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
    }
    else
    {
      v14 = *((_OWORD *)a2 + 8);
      *((_OWORD *)v4 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)v4 + 8) = v14;
    }
    v15 = a2[23];
    if (v15 == 1)
    {
      v16 = *((_OWORD *)a2 + 10);
      *((_OWORD *)v4 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)v4 + 10) = v16;
      *((_OWORD *)v4 + 11) = *((_OWORD *)a2 + 11);
    }
    else
    {
      v4[18] = a2[18];
      *((_BYTE *)v4 + 152) = *((_BYTE *)a2 + 152);
      v4[20] = a2[20];
      *((_BYTE *)v4 + 168) = *((_BYTE *)a2 + 168);
      *(_WORD *)((char *)v4 + 169) = *(_WORD *)((char *)a2 + 169);
      v4[22] = a2[22];
      v4[23] = v15;
      swift_bridgeObjectRetain(v15);
    }
    v17 = *(int *)(a3 + 32);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = type metadata accessor for EventData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return v4;
}

uint64_t destroy for InBookSearchEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[13]);
  v4 = a1[15];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[17]);
  }
  v5 = a1[23];
  if (v5 != 1)
    swift_bridgeObjectRelease(v5);
  v6 = (char *)a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for InBookSearchEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v10;
    v11 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v11;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v12;
  }
  v13 = *(_QWORD *)(a2 + 184);
  if (v13 == 1)
  {
    v14 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v13;
    swift_bridgeObjectRetain(v13);
  }
  v15 = *(int *)(a3 + 32);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for InBookSearchEvent.Model(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  BAEventReporter *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  int64_t v14;
  int64_t v15;
  id v16;
  uint64_t v17;
  BAEventReporter *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  uint64_t v26;
  BAEventReporter *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  int v35;
  int v36;
  uint64_t v37;
  BAEventReporter *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  _OWORD *v46;
  _OWORD *v47;
  BAEventReporter *v48;
  uint64_t v49;
  uint64_t v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 *v71;
  __int128 *v72;
  BAEventReporter *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  int64_t v85;
  int64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)a2 + 6);
  v18 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v26 = *((_QWORD *)a2 + 8);
  v27 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v35 = a2[19];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v35;
  v36 = a2[21];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_DWORD *)(a1 + 84) = v36;
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v37 = *((_QWORD *)a2 + 13);
  v38 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
  v46 = (_OWORD *)(a1 + 112);
  v47 = a2 + 28;
  v48 = *(BAEventReporter **)(a1 + 120);
  v49 = *((_QWORD *)a2 + 15);
  if (v48)
  {
    if (v49)
    {
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      v50 = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 120) = v50;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v48, v51, v52, v53, v54, v55, v56, v57);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      v58 = *((_QWORD *)a2 + 17);
      v59 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v58;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      sub_926C0(a1 + 112);
      v69 = *((_OWORD *)a2 + 8);
      *v46 = *v47;
      *(_OWORD *)(a1 + 128) = v69;
    }
  }
  else if (v49)
  {
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    v67 = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 120) = v67;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    v68 = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 136) = v68;
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v68);
  }
  else
  {
    v70 = *((_OWORD *)a2 + 8);
    *v46 = *v47;
    *(_OWORD *)(a1 + 128) = v70;
  }
  v71 = (__int128 *)(a1 + 144);
  v72 = (__int128 *)(a2 + 36);
  v73 = *(BAEventReporter **)(a1 + 184);
  v74 = *((_QWORD *)a2 + 23);
  if (v73 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v74 == 1)
    {
      v75 = *v72;
      v76 = *((_OWORD *)a2 + 11);
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 176) = v76;
      *v71 = v75;
    }
    else
    {
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
      *(_BYTE *)(a1 + 169) = *((_BYTE *)a2 + 169);
      *(_BYTE *)(a1 + 170) = *((_BYTE *)a2 + 170);
      *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
      v79 = *((_QWORD *)a2 + 23);
      *(_QWORD *)(a1 + 184) = v79;
      swift_bridgeObjectRetain(v79);
    }
  }
  else if (v74 == 1)
  {
    sub_19008(a1 + 144);
    v78 = *((_OWORD *)a2 + 10);
    v77 = *((_OWORD *)a2 + 11);
    *v71 = *v72;
    *(_OWORD *)(a1 + 160) = v78;
    *(_OWORD *)(a1 + 176) = v77;
  }
  else
  {
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
    *(_BYTE *)(a1 + 169) = *((_BYTE *)a2 + 169);
    *(_BYTE *)(a1 + 170) = *((_BYTE *)a2 + 170);
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    v80 = *((_QWORD *)a2 + 23);
    *(_QWORD *)(a1 + 184) = v80;
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRelease(v73, v81, v82, v83, v84, v85, v86, v87);
  }
  v88 = *(int *)(a3 + 32);
  v89 = a1 + v88;
  v90 = (uint64_t)a2 + v88;
  v91 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 24))(v89, v90, v91);
  return a1;
}

uint64_t initializeWithTake for InBookSearchEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  v8 = *(_OWORD *)(a2 + 176);
  v9 = *(_OWORD *)(a2 + 144);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for InBookSearchEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  BAEventReporter *v47;
  uint64_t v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  __int128 v58;
  BAEventReporter *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 64);
  v23 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v31 = *(_QWORD *)(a2 + 104);
  v32 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v47 = *(BAEventReporter **)(a1 + 120);
  if (v47)
  {
    v48 = *(_QWORD *)(a2 + 120);
    if (v48)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v48;
      swift_bridgeObjectRelease(v47, v40, v41, v42, v43, v44, v45, v46);
      v49 = *(_QWORD *)(a2 + 136);
      v50 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v49;
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      goto LABEL_6;
    }
    sub_926C0(a1 + 112);
  }
  v58 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v58;
LABEL_6:
  v59 = *(BAEventReporter **)(a1 + 184);
  if (v59 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v60 = *(_QWORD *)(a2 + 184);
    if (v60 != 1)
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = v60;
      swift_bridgeObjectRelease(v59, v40, v41, v42, v43, v44, v45, v46);
      goto LABEL_11;
    }
    sub_19008(a1 + 144);
  }
  v61 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v61;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
LABEL_11:
  v62 = a3[8];
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 40))(v63, v64, v65);
  return a1;
}

uint64_t getEnumTagSinglePayload for InBookSearchEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_972C4);
}

uint64_t sub_972C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for InBookSearchEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9734C);
}

uint64_t sub_9734C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_973C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1FBD88;
  v4[1] = &unk_1FBDA0;
  v4[2] = &unk_1FBDB8;
  v4[3] = &unk_1FBDD0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InBookSearchEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_9749C + 4 * byte_1FBC9A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_974D0 + 4 * byte_1FBC95[v4]))();
}

uint64_t sub_974D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_974D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x974E0);
  return result;
}

uint64_t sub_974EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x974F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_974F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_97500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InBookSearchEvent.Model.CodingKeys()
{
  return &type metadata for InBookSearchEvent.Model.CodingKeys;
}

unint64_t sub_97520()
{
  unint64_t result;

  result = qword_29AA00;
  if (!qword_29AA00)
  {
    result = swift_getWitnessTable(&unk_1FBE84, &type metadata for InBookSearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA00);
  }
  return result;
}

unint64_t sub_97568()
{
  unint64_t result;

  result = qword_29AA08;
  if (!qword_29AA08)
  {
    result = swift_getWitnessTable("=w\a", &type metadata for InBookSearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA08);
  }
  return result;
}

unint64_t sub_975B0()
{
  unint64_t result;

  result = qword_29AA10;
  if (!qword_29AA10)
  {
    result = swift_getWitnessTable(&unk_1FBE1C, &type metadata for InBookSearchEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA10);
  }
  return result;
}

uint64_t sub_975F4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021F6B0;
    if (a2 == 0x800000000021F6B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6144686372616573 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144686372616573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t ContentStoreData.ratingsCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32);
}

uint64_t ContentStoreData.ratingsCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 64) = result;
  *(_BYTE *)(v1 + 68) = BYTE4(result) & 1;
  return result;
}

void __swiftcall ContentStoreData.init(currency:version:pricePoint:rating:ratingsCount:)(BookAnalytics::ContentStoreData *__return_ptr retstr, Swift::String_optional currency, Swift::String_optional version, Swift::String pricePoint, Swift::String_optional rating, Swift::Int32_optional ratingsCount)
{
  retstr->currency = currency;
  retstr->version = version;
  retstr->pricePoint = pricePoint;
  retstr->rating = rating;
  retstr->ratingsCount.value = ratingsCount.value;
  retstr->ratingsCount.is_nil = ratingsCount.is_nil;
}

uint64_t sub_978A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_978D0 + 4 * byte_1FBF00[*v0]))(0x79636E6572727563, 0xE800000000000000);
}

uint64_t sub_978D0()
{
  return 0x6E6F6973726576;
}

uint64_t sub_978E8()
{
  return 0x696F506563697270;
}

uint64_t sub_97904()
{
  return 0x676E69746172;
}

uint64_t sub_97918()
{
  return 0x4373676E69746172;
}

uint64_t sub_97938@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_98598(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_9795C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_980F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_97984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_980F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentStoreData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v3 = sub_71B4(&qword_29AA18);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v28 = v1[3];
  v29 = v9;
  v10 = v1[4];
  v26 = v1[5];
  v27 = v10;
  v11 = v1[6];
  v24 = v1[7];
  v25 = v11;
  v23 = *((unsigned int *)v1 + 16);
  v22 = *((unsigned __int8 *)v1 + 68);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_980F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentStoreData.CodingKeys, &type metadata for ContentStoreData.CodingKeys, v14, v13, v12);
  v36 = 0;
  v15 = v30;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v36, v3);
  if (!v15)
  {
    v17 = v26;
    v16 = v27;
    v19 = v24;
    v18 = v25;
    v35 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v28, &v35, v3);
    v34 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v34, v3);
    v33 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v33, v3);
    v32 = 4;
    v31 = v22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23 | ((unint64_t)v22 << 32), &v32, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void ContentStoreData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  BAEventReporter *v27;
  BAEventReporter *v28;
  uint64_t v29;
  BAEventReporter *v30;
  BAEventReporter *v31;
  BAEventReporter *v32;
  uint64_t v33;
  BAEventReporter *v34;
  BAEventReporter *v35;
  uint64_t v36;
  uint64_t *v37;
  BAEventReporter *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  int64_t v50;
  int64_t v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  int64_t v57;
  int64_t v58;
  id v59;
  const char *v60;
  void *v61;
  void *v62;
  void *v63;
  int64_t v64;
  int64_t v65;
  void *v66;
  BAEventReporter *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  BAEventReporter *v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;

  v5 = sub_71B4(&qword_29AA28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_980F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentStoreData.CodingKeys, &type metadata for ContentStoreData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v13, v14, v15, v16, v17, v18, v19);
    swift_bridgeObjectRelease(0, v20, v21, v22, v23, v24, v25, v26);
    v67 = 0;
  }
  else
  {
    v78 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v78, v5);
    v28 = v27;
    v72 = v12;
    v77 = 1;
    swift_bridgeObjectRetain(v27);
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v77, v5);
    v31 = v30;
    v71 = v29;
    v76 = 2;
    swift_bridgeObjectRetain(v30);
    v69 = KeyedDecodingContainer.decode(_:forKey:)(&v76, v5);
    v70 = a2;
    v75 = 3;
    v73 = v32;
    swift_bridgeObjectRetain(v32);
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v75, v5);
    v35 = v34;
    v68 = v33;
    v74 = 4;
    swift_bridgeObjectRetain(v34);
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v74, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v37 = v70;
    v38 = v73;
    *v70 = v72;
    v37[1] = (uint64_t)v28;
    v37[2] = v71;
    v37[3] = (uint64_t)v31;
    v37[4] = v69;
    v37[5] = (uint64_t)v38;
    v37[6] = v68;
    v37[7] = (uint64_t)v35;
    *((_DWORD *)v37 + 16) = v36;
    *((_BYTE *)v37 + 68) = BYTE4(v36) & 1;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v35, v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v38, v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(v31, v53, v54, v55, v56, v57, v58, v59);
    v67 = v28;
  }
  swift_bridgeObjectRelease(v67, v60, v61, v62, v63, v64, v65, v66);
}

void sub_97EC0(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ContentStoreData.init(from:)(a1, a2);
}

uint64_t sub_97ED4(_QWORD *a1)
{
  return ContentStoreData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics16ContentStoreDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[7];
  v10 = *((_BYTE *)a1 + 68);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  v18 = *(_DWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 68);
  if (!v3)
  {
    v51 = *((_DWORD *)a1 + 16);
    if (v11)
      return 0;
    goto LABEL_8;
  }
  if (!v11)
    return 0;
  v51 = *((_DWORD *)a1 + 16);
  v20 = *a1;
  if (v20 == *(_QWORD *)a2 && v3 == v11)
    goto LABEL_8;
  v48 = *(_QWORD *)(a2 + 56);
  v49 = *(_QWORD *)(a2 + 48);
  v46 = v7;
  v47 = v9;
  v45 = *(_DWORD *)(a2 + 64);
  v21 = *(_BYTE *)(a2 + 68);
  v22 = v10;
  v23 = v5;
  v24 = *(_QWORD *)(a2 + 32);
  v25 = *(_QWORD *)(a2 + 40);
  v26 = v4;
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v3, *(_QWORD *)a2, v11, 0);
  v4 = v26;
  v15 = v25;
  v13 = v24;
  v5 = v23;
  v10 = v22;
  v19 = v21;
  v18 = v45;
  v7 = v46;
  v9 = v47;
  v17 = v48;
  v16 = v49;
  v28 = v27;
  result = 0;
  if ((v28 & 1) != 0)
  {
LABEL_8:
    if (v6)
    {
      if (!v14)
        return 0;
      if (v4 != v12 || v6 != v14)
      {
        v30 = v6;
        v31 = v12;
        v32 = v14;
        v33 = v10;
        v34 = v5;
        v35 = v13;
        v50 = v15;
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v30, v31, v32, 0);
        v15 = v50;
        v13 = v35;
        v5 = v34;
        v10 = v33;
        v37 = v36;
        result = 0;
        if ((v37 & 1) == 0)
          return result;
      }
    }
    else if (v14)
    {
      return 0;
    }
    if (v5 != v13 || v8 != v15)
    {
      v38 = v10;
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v8, v13, v15, 0);
      v10 = v38;
      v40 = v39;
      result = 0;
      if ((v40 & 1) == 0)
        return result;
    }
    if (v9)
    {
      if (!v17)
        return 0;
      if (v7 != v16 || v9 != v17)
      {
        v41 = v10;
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v16, v17, 0);
        v10 = v41;
        v43 = v42;
        result = 0;
        if ((v43 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    if ((v10 & 1) != 0)
    {
      if ((v19 & 1) != 0)
        return 1;
    }
    else
    {
      if (v51 == v18)
        v44 = v19;
      else
        v44 = 1;
      if ((v44 & 1) == 0)
        return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_980F8()
{
  unint64_t result;

  result = qword_29AA20;
  if (!qword_29AA20)
  {
    result = swift_getWitnessTable(&unk_1FC0B4, &type metadata for ContentStoreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA20);
  }
  return result;
}

uint64_t destroy for ExposureData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for ContentStoreData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ContentStoreData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v12;
  return a1;
}

__n128 initializeWithTake for ContentStoreData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ContentStoreData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentStoreData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 69))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentStoreData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 69) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 69) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentStoreData()
{
  return &type metadata for ContentStoreData;
}

uint64_t storeEnumTagSinglePayload for ContentStoreData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_98440 + 4 * byte_1FBF0A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_98474 + 4 * byte_1FBF05[v4]))();
}

uint64_t sub_98474(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9847C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x98484);
  return result;
}

uint64_t sub_98490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x98498);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_9849C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_984A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentStoreData.CodingKeys()
{
  return &type metadata for ContentStoreData.CodingKeys;
}

unint64_t sub_984C4()
{
  unint64_t result;

  result = qword_29AA30;
  if (!qword_29AA30)
  {
    result = swift_getWitnessTable(&unk_1FC08C, &type metadata for ContentStoreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA30);
  }
  return result;
}

unint64_t sub_9850C()
{
  unint64_t result;

  result = qword_29AA38;
  if (!qword_29AA38)
  {
    result = swift_getWitnessTable("=w\a", &type metadata for ContentStoreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA38);
  }
  return result;
}

unint64_t sub_98554()
{
  unint64_t result;

  result = qword_29AA40;
  if (!qword_29AA40)
  {
    result = swift_getWitnessTable(&unk_1FC024, &type metadata for ContentStoreData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA40);
  }
  return result;
}

uint64_t sub_98598(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79636E6572727563, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x696F506563697270 && a2 == 0xEA0000000000746ELL)
  {
    v8 = 0xEA0000000000746ELL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696F506563697270, 0xEA0000000000746ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x676E69746172 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E69746172, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x4373676E69746172 && a2 == 0xEC000000746E756FLL)
  {
    swift_bridgeObjectRelease(0xEC000000746E756FLL);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4373676E69746172, 0xEC000000746E756FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::RoomType_optional __swiftcall RoomType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::RoomType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2672C0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t RoomType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_98858 + 4 * byte_1FC104[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_98858()
{
  return 0x6F6F527265707573;
}

uint64_t sub_98874()
{
  return 0x6F52656C706D6973;
}

unint64_t sub_98890()
{
  return 0xD000000000000010;
}

uint64_t sub_988AC()
{
  return 0x4C6465726564726FLL;
}

uint64_t sub_988D0()
{
  return 0x676E6970756F7267;
}

void sub_988F0(char *a1)
{
  sub_25BEC(*a1);
}

unint64_t sub_98900()
{
  unint64_t result;

  result = qword_29AA48;
  if (!qword_29AA48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RoomType, &type metadata for RoomType);
    atomic_store(result, (unint64_t *)&qword_29AA48);
  }
  return result;
}

void sub_98944()
{
  char *v0;

  sub_195458(*v0);
}

void sub_9894C(uint64_t a1)
{
  char *v1;

  sub_1EC6C8(a1, *v1);
}

void sub_98954(uint64_t a1)
{
  char *v1;

  sub_1D4310(a1, *v1);
}

BookAnalytics::RoomType_optional sub_9895C(Swift::String *a1)
{
  return RoomType.init(rawValue:)(*a1);
}

uint64_t sub_98968()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_98998 + 4 * byte_1FC10A[*v0]))();
}

void sub_98998(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6F527265707573;
  a1[1] = 0xE90000000000006DLL;
}

void sub_989B8(_QWORD *a1@<X8>)
{
  *a1 = 0x6F52656C706D6973;
  a1[1] = 0xEA00000000006D6FLL;
}

void sub_989D8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000000021DD60;
}

void sub_989F8(_QWORD *a1@<X8>)
{
  *a1 = 0x4C6465726564726FLL;
  a1[1] = 0xEF6D6F6F52747369;
}

void sub_98A20(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "groupingPage");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_98A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_98BB8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_98AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_98BB8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for RoomType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_98B38 + 4 * byte_1FC115[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_98B6C + 4 * byte_1FC110[v4]))();
}

uint64_t sub_98B6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_98B74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x98B7CLL);
  return result;
}

uint64_t sub_98B88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x98B90);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_98B94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_98B9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoomType()
{
  return &type metadata for RoomType;
}

unint64_t sub_98BB8()
{
  unint64_t result;

  result = qword_29AA50;
  if (!qword_29AA50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RoomType, &type metadata for RoomType);
    atomic_store(result, (unint64_t *)&qword_29AA50);
  }
  return result;
}

BookAnalytics::SeriesUserStatus_optional __swiftcall SeriesUserStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SeriesUserStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267370, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SeriesUserStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_98C7C + 4 * byte_1FC240[*v0]))(7824750, 0xE300000000000000);
}

uint64_t sub_98C7C()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_98C98()
{
  return 0x6572676F72506E69;
}

uint64_t sub_98CB4()
{
  return 0x6E776F6E6B6E75;
}

void sub_98CCC(char *a1)
{
  sub_2BEA0(*a1);
}

unint64_t sub_98CDC()
{
  unint64_t result;

  result = qword_29AA58;
  if (!qword_29AA58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesUserStatus, &type metadata for SeriesUserStatus);
    atomic_store(result, (unint64_t *)&qword_29AA58);
  }
  return result;
}

void sub_98D20()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_98D64()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6574656C706D6F63, 0xE900000000000064);
  swift_bridgeObjectRelease(0xE900000000000064);
  return Hasher._finalize()();
}

void sub_98DDC()
{
  __asm { BR              X10 }
}

uint64_t sub_98E10(uint64_t a1)
{
  String.hash(into:)(a1, 0x6574656C706D6F63, 0xE900000000000064);
  return swift_bridgeObjectRelease(0xE900000000000064);
}

void sub_98E74(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_98EB4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6574656C706D6F63, 0xE900000000000064);
  swift_bridgeObjectRelease(0xE900000000000064);
  return Hasher._finalize()();
}

BookAnalytics::SeriesUserStatus_optional sub_98F2C(Swift::String *a1)
{
  return SeriesUserStatus.init(rawValue:)(*a1);
}

uint64_t sub_98F38()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_98F60 + 4 * byte_1FC250[*v0]))();
}

void sub_98F60(_QWORD *a1@<X8>)
{
  *a1 = 0x6574656C706D6F63;
  a1[1] = 0xE900000000000064;
}

void sub_98F80(_QWORD *a1@<X8>)
{
  *a1 = 0x6572676F72506E69;
  a1[1] = 0xEA00000000007373;
}

void sub_98FA0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_98FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_99130();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_99018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_99130();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SeriesUserStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_990B0 + 4 * byte_1FC259[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_990E4 + 4 * byte_1FC254[v4]))();
}

uint64_t sub_990E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_990EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x990F4);
  return result;
}

uint64_t sub_99100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x99108);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_9910C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_99114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesUserStatus()
{
  return &type metadata for SeriesUserStatus;
}

unint64_t sub_99130()
{
  unint64_t result;

  result = qword_29AA60;
  if (!qword_29AA60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesUserStatus, &type metadata for SeriesUserStatus);
    atomic_store(result, (unint64_t *)&qword_29AA60);
  }
  return result;
}

unint64_t sub_99174()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0xD000000000000014;
}

uint64_t sub_991B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_997AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_991D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_99524();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_991FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_99524();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReferralData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_29AA68);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_99524();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReferralData.CodingKeys, &type metadata for ReferralData.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

void ReferralData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  int64_t v20;
  int64_t v21;
  void *v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;

  v5 = sub_71B4(&qword_29AA78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_99524();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReferralData.CodingKeys, &type metadata for ReferralData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v12 = 0;
    sub_7DAC(a1);
  }
  else
  {
    v36 = 0;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
    v12 = v14;
    v35 = 1;
    swift_bridgeObjectRetain(v14);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26 = v15;
    v25(v8, v5);
    *a2 = v13;
    a2[1] = (uint64_t)v12;
    a2[2] = v26;
    a2[3] = (uint64_t)v24;
    swift_bridgeObjectRetain(v24);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v24, v27, v28, v29, v30, v31, v32, v33);
  }
  swift_bridgeObjectRelease(v12, v16, v17, v18, v19, v20, v21, v22);
}

void sub_994FC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ReferralData.init(from:)(a1, a2);
}

uint64_t sub_99510(_QWORD *a1)
{
  return ReferralData.encode(to:)(a1);
}

unint64_t sub_99524()
{
  unint64_t result;

  result = qword_29AA70;
  if (!qword_29AA70)
  {
    result = swift_getWitnessTable(&unk_1FC524, &type metadata for ReferralData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA70);
  }
  return result;
}

unint64_t sub_9956C()
{
  unint64_t result;

  result = qword_29AA80;
  if (!qword_29AA80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReferralData, &type metadata for ReferralData);
    atomic_store(result, (unint64_t *)&qword_29AA80);
  }
  return result;
}

unint64_t sub_995B4()
{
  unint64_t result;

  result = qword_29AA88;
  if (!qword_29AA88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReferralData, &type metadata for ReferralData);
    atomic_store(result, (unint64_t *)&qword_29AA88);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReferralData()
{
  return &type metadata for ReferralData;
}

uint64_t storeEnumTagSinglePayload for ReferralData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_99654 + 4 * byte_1FC389[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_99688 + 4 * byte_1FC384[v4]))();
}

uint64_t sub_99688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_99690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x99698);
  return result;
}

uint64_t sub_996A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x996ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_996B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_996B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReferralData.CodingKeys()
{
  return &type metadata for ReferralData.CodingKeys;
}

unint64_t sub_996D8()
{
  unint64_t result;

  result = qword_29AA90;
  if (!qword_29AA90)
  {
    result = swift_getWitnessTable(&unk_1FC4FC, &type metadata for ReferralData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA90);
  }
  return result;
}

unint64_t sub_99720()
{
  unint64_t result;

  result = qword_29AA98;
  if (!qword_29AA98)
  {
    result = swift_getWitnessTable(&unk_1FC46C, &type metadata for ReferralData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AA98);
  }
  return result;
}

unint64_t sub_99768()
{
  unint64_t result;

  result = qword_29AAA0;
  if (!qword_29AAA0)
  {
    result = swift_getWitnessTable(&unk_1FC494, &type metadata for ReferralData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AAA0);
  }
  return result;
}

uint64_t sub_997AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000014 && a2 == 0x800000000021F9F0)
  {
    v4 = 0x800000000021F9F0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F9F0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021FA10)
  {
    swift_bridgeObjectRelease(0x800000000021FA10);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021FA10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t EventReporter.emitReadEvent(using:readingSessionData:contentData:readingSettingsData:upSellData:contentSettingsData:doNotDisturbData:startTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch(sub_998BC, 0, 0);
}

uint64_t sub_998BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  __int128 v9;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v9 = *(_OWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 80) = v5;
  v6 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v9;
  *(_QWORD *)(v5 + 64) = v3;
  *(_QWORD *)(v5 + 72) = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 88) = v7;
  *v7 = v0;
  v7[1] = sub_99984;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_99984()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_999E0, 0, 0);
}

uint64_t sub_999E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_999E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BAEventReporter *v27;
  objc_class *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  BAEventReporter *v34;
  id v35;
  id v36;
  id v37;
  objc_class *v38;
  id v39;
  id v40;
  SEL v41;
  id v42;
  id v43;
  int64_t v44;
  id v45;
  BOOL v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  int64_t v51;
  id v52;
  BOOL v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  objc_class *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;

  v66 = a7;
  v67 = a8;
  v62 = a4;
  v63 = a5;
  v68 = a2;
  v64 = a9;
  v65 = a6;
  v11 = sub_71B4(&qword_29AB38);
  v12 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v61 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, a3);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v56 = v12;
  v18((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 16) & ~v19;
  v58 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (v58 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(unsigned __int8 *)(v12 + 80);
  v26 = (v25 + v24 + 8) & ~v25;
  v27 = (BAEventReporter *)swift_allocObject(&unk_274048, v26 + v13, v19 | v25 | 7);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))((char *)v27 + v20, v17, v59);
  v29 = v62;
  v28 = v63;
  *(Class *)((char *)&v27->super.isa + v58) = (Class)v62;
  *(Class *)((char *)&v27->super.isa + v57) = v28;
  v30 = v65;
  *(Class *)((char *)&v27->super.isa + v21) = (Class)v65;
  v31 = v66;
  *(Class *)((char *)&v27->super.isa + v22) = (Class)v66;
  v32 = v67;
  *(Class *)((char *)&v27->super.isa + v23) = (Class)v67;
  v33 = v64;
  *(Class *)((char *)&v27->super.isa + v24) = (Class)v64;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))((char *)v27 + v26, v61, v60);
  v34 = (BAEventReporter *)swift_allocObject(&unk_274070, 32, 7);
  v34[1].super.isa = (Class)sub_9D8AC;
  *(_QWORD *)v34[1].dataProviders = v27;
  v35 = v32;
  v36 = v33;
  swift_retain(v27);
  v37 = v29;
  v38 = v28;
  v39 = v30;
  v40 = v31;
  Tracker.transaction(block:)(sub_54CC0, v34);
  swift_release(v27, v41, v42, v43, v44, v45, v46, v47);
  swift_release(v34, v48, v49, v50, v51, v52, v53, v54);
}

uint64_t sub_99C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char *a7, uint64_t a8)
{
  uint64_t Event;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  BAEventReporter *v25;
  BAEventReporter *v26;
  BAEventReporter *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  int64_t v56;
  int64_t v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  BAEventReporter *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  int64_t v75;
  int64_t v76;
  id v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  id v85;
  BAEventReporter *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  int64_t v94;
  int64_t v95;
  id v96;
  BAEventReporter *v97;
  SEL v98;
  id v99;
  id v100;
  id v101;
  int64_t v102;
  int64_t v103;
  id v104;
  void *v105;
  char *v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  int64_t v132;
  int64_t v133;
  id v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  void (*v144)(uint64_t);
  BAEventReporter *v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  BAEventReporter *v150;
  uint64_t v151;
  BAEventReporter *v152;
  __int16 v153;
  int v154;
  char v155;
  int v156;
  char v157;
  int v158;
  char v159;
  uint64_t v160;
  BAEventReporter *v161;
  __int128 v162;
  __int128 v163;
  BAEventReporter *v164;
  uint64_t v165;
  BAEventReporter *v166;
  __int16 v167;
  int v168;
  char v169;
  int v170;
  char v171;
  int v172;
  char v173;
  uint64_t v174;
  BAEventReporter *v175;

  Event = type metadata accessor for ReadEvent(0);
  v138 = sub_7E10(&qword_29AB40, type metadata accessor for ReadEvent, (uint64_t)&protocol conformance descriptor for ReadEvent);
  v139 = Event;
  AccessTracker.explicitTime<A>(_:startTime:)(Event, a2, Event, v138);
  sub_B15F4((uint64_t)&v162);
  LODWORD(v148) = v162;
  BYTE4(v148) = BYTE4(v162);
  DWORD2(v148) = DWORD2(v162);
  WORD6(v148) = WORD6(v162);
  BYTE14(v148) = BYTE14(v162);
  v10 = sub_71B4(&qword_299FD0);
  v11 = type metadata accessor for DataEventTrait(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 32) & ~v13;
  v147 = v14 + *(_QWORD *)(v12 + 72);
  v15 = v13 | 7;
  v16 = swift_allocObject(v10, v147, v13 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  v140 = v14;
  v141 = enum case for DataEventTrait.onlyOnce(_:);
  v144 = *(void (**)(uint64_t))(v12 + 104);
  v144(v16 + v14);
  v17 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v148, v16, 0xD00000000000006BLL, 0x800000000021FC30, 25, &type metadata for ReadingSessionData, v17);
  swift_bridgeObjectRelease((BAEventReporter *)v16, v18, v19, v20, v21, v22, v23, v24);
  sub_AF27C((uint64_t)&v162);
  v145 = (BAEventReporter *)*((_QWORD *)&v162 + 1);
  v25 = v164;
  v26 = v166;
  v27 = v175;
  v148 = v162;
  LOBYTE(v149) = v163;
  *((_QWORD *)&v149 + 1) = *((_QWORD *)&v163 + 1);
  v150 = v164;
  v151 = v165;
  v152 = v166;
  v153 = v167;
  v154 = v168;
  v155 = v169;
  v156 = v170;
  v157 = v171;
  v158 = v172;
  v159 = v173;
  v160 = v174;
  v161 = v175;
  v28 = v15;
  v29 = swift_allocObject(v10, v147, v15);
  *(_OWORD *)(v29 + 16) = xmmword_1F5FF0;
  ((void (*)(uint64_t, _QWORD, uint64_t))v144)(v29 + v14, v141, v11);
  v30 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v148, v29, 0xD00000000000006BLL, 0x800000000021FC30, 26, &type metadata for ContentData, v30);
  swift_bridgeObjectRelease(v26, v31, v32, v33, v34, v35, v36, v37);
  swift_bridgeObjectRelease(v25, v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(v145, v45, v46, v47, v48, v49, v50, v51);
  swift_bridgeObjectRelease((BAEventReporter *)v29, v52, v53, v54, v55, v56, v57, v58);
  swift_bridgeObjectRelease(v27, v59, v60, v61, v62, v63, v64, v65);
  sub_B1998((uint64_t)&v162);
  v66 = (BAEventReporter *)v163;
  LOWORD(v148) = v162;
  BYTE2(v148) = BYTE2(v162);
  *((_QWORD *)&v148 + 1) = *((_QWORD *)&v162 + 1);
  v149 = v163;
  v146 = v10;
  v67 = v10;
  v68 = v141;
  v69 = swift_allocObject(v67, v147, v28);
  *(_OWORD *)(v69 + 16) = xmmword_1F5FF0;
  ((void (*)(uint64_t, _QWORD, uint64_t))v144)(v69 + v140, v141, v11);
  v70 = sub_9D98C();
  AccessTracker.push<A>(data:traits:file:line:)(&v148, v69, 0xD00000000000006BLL, 0x800000000021FC30, 27, &type metadata for ReadingSettingsData, v70);
  swift_bridgeObjectRelease(v66, v71, v72, v73, v74, v75, v76, v77);
  swift_bridgeObjectRelease((BAEventReporter *)v69, v78, v79, v80, v81, v82, v83, v84);
  if (a6)
  {
    v85 = a6;
    sub_B2504((uint64_t)&v162);
    v86 = (BAEventReporter *)v163;
    LOWORD(v148) = v162;
    *((_QWORD *)&v148 + 1) = *((_QWORD *)&v162 + 1);
    *(_QWORD *)&v149 = v163;
    v87 = v28;
    v88 = swift_allocObject(v146, v147, v28);
    *(_OWORD *)(v88 + 16) = xmmword_1F5FF0;
    ((void (*)(uint64_t, _QWORD, uint64_t))v144)(v88 + v140, v141, v11);
    v89 = sub_9DA58();
    AccessTracker.push<A>(data:traits:file:line:)(&v148, v88, 0xD00000000000006BLL, 0x800000000021FC30, 29, &type metadata for UpSellData, v89);
    swift_bridgeObjectRelease(v86, v90, v91, v92, v93, v94, v95, v96);

    v97 = (BAEventReporter *)v88;
    v28 = v87;
    v68 = v141;
    swift_bridgeObjectRelease(v97, v98, v99, v100, v101, v102, v103, v104);
  }
  if (a7)
  {
    v105 = *(void **)&a7[OBJC_IVAR___BAContentSettingsData_bookmarkCount];
    v106 = a7;
    v107 = objc_msgSend(v105, "integerValue");
    v108 = objc_msgSend(*(id *)&v106[OBJC_IVAR___BAContentSettingsData_noteCount], "integerValue");
    v109 = objc_msgSend(*(id *)&v106[OBJC_IVAR___BAContentSettingsData_highlightCount], "integerValue");
    v110 = BARoundIntegerToSignificantFigures((uint64_t)v107, 2);
    v111 = 0xFFFFFFFF80000000;
    if (v110 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      v112 = v110;
      v111 = 0x7FFFFFFFLL;
      if (v110 <= 0x7FFFFFFF)
      {
        v113 = BARoundIntegerToSignificantFigures((uint64_t)v108, 2);
        v111 = 0xFFFFFFFF80000000;
        if (v113 >= (uint64_t)0xFFFFFFFF80000000)
        {
          v114 = v113;
          v111 = 0x7FFFFFFFLL;
          if (v113 <= 0x7FFFFFFF)
          {
            v115 = BARoundIntegerToSignificantFigures((uint64_t)v109, 2);
            v111 = 0xFFFFFFFF80000000;
            if (v115 >= (uint64_t)0xFFFFFFFF80000000)
            {
              v111 = 0x7FFFFFFFLL;
              if (v115 <= 0x7FFFFFFF)
              {
                *(_QWORD *)&v162 = __PAIR64__(v114, v112);
                DWORD2(v162) = v115;
                v116 = swift_allocObject(v146, v147, v28);
                *(_OWORD *)(v116 + 16) = xmmword_1F5FF0;
                ((void (*)(uint64_t, uint64_t, uint64_t))v144)(v116 + v140, v68, v11);
                v117 = sub_9DA14();
                AccessTracker.push<A>(data:traits:file:line:)(&v162, v116, 0xD00000000000006BLL, 0x800000000021FC30, 32, &type metadata for ContentSettingsData, v117);
                swift_bridgeObjectRelease((BAEventReporter *)v116, v118, v119, v120, v121, v122, v123, v124);

                goto LABEL_11;
              }
LABEL_19:
              __break(1u);
              goto LABEL_20;
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_11:
  v111 = *(_QWORD *)(a8 + OBJC_IVAR___BADoNotDisturbData_startStatus);
  if (v111 >= 3)
  {
LABEL_20:
    *(_QWORD *)&v162 = v111;
    goto LABEL_22;
  }
  v125 = *(_QWORD *)(a8 + OBJC_IVAR___BADoNotDisturbData_endStatus);
  if (v125 < 3)
  {
    LOBYTE(v162) = *(_QWORD *)(a8 + OBJC_IVAR___BADoNotDisturbData_startStatus);
    BYTE1(v162) = v125;
    v126 = swift_allocObject(v146, v147, v28);
    *(_OWORD *)(v126 + 16) = xmmword_1F5FF0;
    ((void (*)(uint64_t, uint64_t, uint64_t))v144)(v126 + v140, v68, v11);
    v127 = sub_9D9D0();
    AccessTracker.push<A>(data:traits:file:line:)(&v162, v126, 0xD00000000000006BLL, 0x800000000021FC30, 34, &type metadata for DoNotDisturbData, v127);
    swift_bridgeObjectRelease((BAEventReporter *)v126, v128, v129, v130, v131, v132, v133, v134);
    v162 = 0u;
    v163 = 0u;
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v139, 0, &v162, 0, 0, v139, v138);
    sub_54960((uint64_t)&v162);
    v135 = sub_71B4(&qword_29AB38);
    return CheckedContinuation.resume(returning:)(v135, v135);
  }
  *(_QWORD *)&v162 = *(_QWORD *)(a8 + OBJC_IVAR___BADoNotDisturbData_endStatus);
LABEL_22:
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedDoNotDisturbStatus, &v162, &type metadata for BridgedDoNotDisturbStatus, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_9A45C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  const void *v28;
  void *v29;

  v8[8] = a7;
  v8[9] = v29;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  v15 = type metadata accessor for Date(0);
  v8[10] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[11] = v16;
  v8[12] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[13] = _Block_copy(v28);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(a8);
  v17 = a6;
  v18 = a7;
  v19 = v29;
  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  return swift_task_switch(sub_9A548, 0, 0);
}

uint64_t sub_9A548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v9 = *(_OWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 112) = v5;
  v6 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v9;
  *(_QWORD *)(v5 + 64) = v3;
  *(_QWORD *)(v5 + 72) = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v7;
  *v7 = v0;
  v7[1] = sub_9A610;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_9A610()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_9A66C, 0, 0);
}

uint64_t sub_9A66C()
{
  uint64_t v0;
  void (**v1)(_QWORD);
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(void (***)(_QWORD))(v0 + 104);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 80);
  v3 = *(void **)(v0 + 64);
  v5 = *(void **)(v0 + 48);
  v4 = *(void **)(v0 + 56);
  v7 = *(void **)(v0 + 32);
  v6 = *(void **)(v0 + 40);
  v9 = *(void **)(v0 + 16);
  v8 = *(void **)(v0 + 24);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v12);
  v1[2](v1);
  _Block_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void EventReporter.emitReadingAutoNightSettingChangeEvent(using:readingSessionData:contentData:isOn:)(void *a1, int *a2, _OWORD *a3, char a4)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  id v16;
  uint64_t v17;
  char v18;
  BAEventReporter *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  BAEventReporter *v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  int64_t v35;
  id v36;
  BOOL v37;
  id v38;
  _OWORD v39[6];

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 4);
  v9 = a2[2];
  v10 = *((_BYTE *)a2 + 12);
  v11 = *((_BYTE *)a2 + 13);
  v12 = *((_BYTE *)a2 + 14);
  v13 = a3[3];
  v39[2] = a3[2];
  v39[3] = v13;
  v14 = a3[5];
  v39[4] = a3[4];
  v39[5] = v14;
  v15 = a3[1];
  v16 = a1;
  v39[0] = *a3;
  v39[1] = v15;
  if (a1 || (v16 = sub_CB320()) != 0)
  {
    v17 = swift_allocObject(&unk_273BC0, 129, 7);
    v18 = a4;
    v19 = (BAEventReporter *)v17;
    *(_DWORD *)(v17 + 16) = v7;
    *(_BYTE *)(v17 + 20) = v8;
    *(_DWORD *)(v17 + 24) = v9;
    *(_BYTE *)(v17 + 28) = v10;
    *(_BYTE *)(v17 + 29) = v11;
    *(_BYTE *)(v17 + 30) = v12;
    v20 = a3[3];
    *(_OWORD *)(v17 + 64) = a3[2];
    *(_OWORD *)(v17 + 80) = v20;
    v21 = a3[5];
    *(_OWORD *)(v17 + 96) = a3[4];
    *(_OWORD *)(v17 + 112) = v21;
    v22 = a3[1];
    *(_OWORD *)(v17 + 32) = *a3;
    *(_OWORD *)(v17 + 48) = v22;
    *(_BYTE *)(v17 + 128) = v18 & 1;
    v23 = (BAEventReporter *)swift_allocObject(&unk_273BE8, 32, 7);
    v23[1].super.isa = (Class)sub_9C8A4;
    *(_QWORD *)v23[1].dataProviders = v19;
    v24 = a1;
    sub_53FBC(v39);
    swift_retain(v19);
    Tracker.transaction(block:)(sub_53E94, v23);

    swift_release(v19, v25, v26, v27, v28, v29, v30, v31);
    swift_release(v23, v32, v33, v34, v35, v36, v37, v38);
  }
}

uint64_t sub_9A8F8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  LODWORD(v50) = a2;
  BYTE4(v50) = BYTE4(a2) & 1;
  DWORD2(v50) = a3;
  BYTE12(v50) = BYTE4(a3) & 1;
  BYTE13(v50) = BYTE5(a3) & 1;
  BYTE14(v50) = BYTE6(a3);
  v48 = sub_71B4(&qword_299FD0);
  v6 = type metadata accessor for DataEventTrait(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 72);
  v11 = v8 | 7;
  v12 = swift_allocObject(v48, v10, v8 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1F5FF0;
  v13 = enum case for DataEventTrait.onlyOnce(_:);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v14(v12 + v9, enum case for DataEventTrait.onlyOnce(_:), v6);
  v15 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v50, v12, 0xD00000000000006BLL, 0x800000000021FC30, 58, &type metadata for ReadingSessionData, v15);
  swift_bridgeObjectRelease((BAEventReporter *)v12, v16, v17, v18, v19, v20, v21, v22);
  v23 = a4[3];
  v52 = a4[2];
  v53 = v23;
  v24 = a4[5];
  v54 = a4[4];
  v55 = v24;
  v25 = a4[1];
  v50 = *a4;
  v51 = v25;
  v26 = swift_allocObject(v48, v10, v11);
  *(_OWORD *)(v26 + 16) = xmmword_1F5FF0;
  v14(v26 + v9, v13, v6);
  v27 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v50, v26, 0xD00000000000006BLL, 0x800000000021FC30, 59, &type metadata for ContentData, v27);
  swift_bridgeObjectRelease((BAEventReporter *)v26, v28, v29, v30, v31, v32, v33, v34);
  if ((a5 & 1) != 0)
    v35 = 1;
  else
    v35 = 2;
  LOBYTE(v50) = v35;
  v36 = swift_allocObject(v48, v10, v11);
  *(_OWORD *)(v36 + 16) = xmmword_1F5FF0;
  v14(v36 + v9, v13, v6);
  v37 = sub_9D660();
  AccessTracker.push<A>(data:traits:file:line:)(&v50, v36, 0xD00000000000006BLL, 0x800000000021FC30, 60, &type metadata for AutoNightThemeSettingData, v37);
  swift_bridgeObjectRelease((BAEventReporter *)v36, v38, v39, v40, v41, v42, v43, v44);
  v45 = type metadata accessor for ReadingAutoNightSettingChangeEvent(0);
  v46 = sub_7E10(&qword_29AB30, type metadata accessor for ReadingAutoNightSettingChangeEvent, (uint64_t)&protocol conformance descriptor for ReadingAutoNightSettingChangeEvent);
  v50 = 0u;
  v51 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v45, 0, &v50, 0, 0, v45, v46);
  return sub_54960((uint64_t)&v50);
}

void EventReporter.emitReadingBackgroundColorChangeEvent(using:readingSessionData:contentData:backgroundColorData:)(void *a1, int *a2, _OWORD *a3, char *a4)
{
  int v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  id v15;
  char v16;
  uint64_t v17;
  int v18;
  BAEventReporter *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  BAEventReporter *v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  int64_t v35;
  id v36;
  BOOL v37;
  id v38;
  _OWORD v39[6];

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 4);
  v8 = a2[2];
  v9 = *((_BYTE *)a2 + 12);
  v10 = *((_BYTE *)a2 + 13);
  v11 = *((_BYTE *)a2 + 14);
  v12 = a3[3];
  v39[2] = a3[2];
  v39[3] = v12;
  v13 = a3[5];
  v39[4] = a3[4];
  v39[5] = v13;
  v14 = a3[1];
  v39[0] = *a3;
  v39[1] = v14;
  v15 = a1;
  v16 = *a4;
  if (a1 || (v15 = sub_CB320()) != 0)
  {
    v17 = swift_allocObject(&unk_273C10, 129, 7);
    v18 = v6;
    v19 = (BAEventReporter *)v17;
    *(_DWORD *)(v17 + 16) = v18;
    *(_BYTE *)(v17 + 20) = v7;
    *(_DWORD *)(v17 + 24) = v8;
    *(_BYTE *)(v17 + 28) = v9;
    *(_BYTE *)(v17 + 29) = v10;
    *(_BYTE *)(v17 + 30) = v11;
    v20 = a3[3];
    *(_OWORD *)(v17 + 64) = a3[2];
    *(_OWORD *)(v17 + 80) = v20;
    v21 = a3[5];
    *(_OWORD *)(v17 + 96) = a3[4];
    *(_OWORD *)(v17 + 112) = v21;
    v22 = a3[1];
    *(_OWORD *)(v17 + 32) = *a3;
    *(_OWORD *)(v17 + 48) = v22;
    *(_BYTE *)(v17 + 128) = v16;
    v23 = (BAEventReporter *)swift_allocObject(&unk_273C38, 32, 7);
    v23[1].super.isa = (Class)sub_9CA48;
    *(_QWORD *)v23[1].dataProviders = v19;
    v24 = a1;
    sub_53FBC(v39);
    swift_retain(v19);
    Tracker.transaction(block:)(sub_54CC0, v23);

    swift_release(v19, v25, v26, v27, v28, v29, v30, v31);
    swift_release(v23, v32, v33, v34, v35, v36, v37, v38);
  }
}

uint64_t sub_9AD58(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  LODWORD(v49) = a2;
  BYTE4(v49) = BYTE4(a2) & 1;
  DWORD2(v49) = a3;
  BYTE12(v49) = BYTE4(a3) & 1;
  BYTE13(v49) = BYTE5(a3) & 1;
  BYTE14(v49) = BYTE6(a3);
  v47 = sub_71B4(&qword_299FD0);
  v6 = type metadata accessor for DataEventTrait(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 72);
  v11 = v8 | 7;
  v12 = swift_allocObject(v47, v10, v8 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1F5FF0;
  v13 = enum case for DataEventTrait.onlyOnce(_:);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v14(v12 + v9, enum case for DataEventTrait.onlyOnce(_:), v6);
  v15 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v49, v12, 0xD00000000000006BLL, 0x800000000021FC30, 82, &type metadata for ReadingSessionData, v15);
  swift_bridgeObjectRelease((BAEventReporter *)v12, v16, v17, v18, v19, v20, v21, v22);
  v23 = a4[3];
  v51 = a4[2];
  v52 = v23;
  v24 = a4[5];
  v53 = a4[4];
  v54 = v24;
  v25 = a4[1];
  v49 = *a4;
  v50 = v25;
  v26 = swift_allocObject(v47, v10, v11);
  *(_OWORD *)(v26 + 16) = xmmword_1F5FF0;
  v14(v26 + v9, v13, v6);
  v27 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v49, v26, 0xD00000000000006BLL, 0x800000000021FC30, 83, &type metadata for ContentData, v27);
  swift_bridgeObjectRelease((BAEventReporter *)v26, v28, v29, v30, v31, v32, v33, v34);
  LOBYTE(v49) = a5;
  v35 = swift_allocObject(v47, v10, v11);
  *(_OWORD *)(v35 + 16) = xmmword_1F5FF0;
  v14(v35 + v9, v13, v6);
  v36 = sub_9D5BC();
  AccessTracker.push<A>(data:traits:file:line:)(&v49, v35, 0xD00000000000006BLL, 0x800000000021FC30, 84, &type metadata for BackgroundColorData, v36);
  swift_bridgeObjectRelease((BAEventReporter *)v35, v37, v38, v39, v40, v41, v42, v43);
  v44 = type metadata accessor for ReadingBackgroundColorChangeEvent(0);
  v45 = sub_7E10(&qword_29AB20, type metadata accessor for ReadingBackgroundColorChangeEvent, (uint64_t)&protocol conformance descriptor for ReadingBackgroundColorChangeEvent);
  v49 = 0u;
  v50 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v44, 0, &v49, 0, 0, v44, v45);
  return sub_54960((uint64_t)&v49);
}

void EventReporter.emitReadingBrightnessChangeEvent(using:readingSessionData:contentData:brightness:)(void *a1, void *a2, void *a3, int a4)
{
  id v8;
  uint64_t v9;
  BAEventReporter *v10;
  id v11;
  id v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  int64_t v17;
  id v18;
  BOOL v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  int64_t v24;
  id v25;
  BOOL v26;
  id v27;

  v8 = a1;
  if (a1 || (v8 = sub_CB320()) != 0)
  {
    v9 = swift_allocObject(&unk_273C60, 36, 7);
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(v9 + 24) = a3;
    *(_DWORD *)(v9 + 32) = a4;
    v10 = (BAEventReporter *)swift_allocObject(&unk_273C88, 32, 7);
    v10[1].super.isa = (Class)sub_9CA78;
    *(_QWORD *)v10[1].dataProviders = v9;
    v11 = a1;
    v12 = a2;
    v13 = a3;
    swift_retain(v9);
    Tracker.transaction(block:)(sub_54CC0, v10);

    swift_release((BAEventReporter *)v9, v14, v15, v16, v17, v18, v19, v20);
    swift_release(v10, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t sub_9B0BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;
  BAEventReporter *v21;
  BAEventReporter *v22;
  BAEventReporter *v23;
  uint64_t v24;
  unint64_t v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  BAEventReporter *v75;
  unsigned int v76;
  void (*v77)(uint64_t);
  __int128 v79;
  char v80;
  uint64_t v81;
  BAEventReporter *v82;
  uint64_t v83;
  BAEventReporter *v84;
  __int16 v85;
  int v86;
  char v87;
  int v88;
  char v89;
  int v90;
  char v91;
  uint64_t v92;
  BAEventReporter *v93;
  __int128 v94;
  __int128 v95;
  BAEventReporter *v96;
  uint64_t v97;
  BAEventReporter *v98;
  __int16 v99;
  int v100;
  char v101;
  int v102;
  char v103;
  int v104;
  char v105;
  uint64_t v106;
  BAEventReporter *v107;

  sub_B15F4((uint64_t)&v94);
  LODWORD(v79) = v94;
  BYTE4(v79) = BYTE4(v94);
  DWORD2(v79) = DWORD2(v94);
  WORD6(v79) = WORD6(v94);
  BYTE14(v79) = BYTE14(v94);
  v4 = sub_71B4(&qword_299FD0);
  v5 = type metadata accessor for DataEventTrait(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v7 + 32) & ~v7) + *(_QWORD *)(v6 + 72);
  v9 = (v7 + 32) & ~v7;
  v10 = v7 | 7;
  v74 = v4;
  v11 = swift_allocObject(v4, v8, v7 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_1F5FF0;
  v12 = v9;
  v73 = v9;
  v76 = enum case for DataEventTrait.onlyOnce(_:);
  v77 = *(void (**)(uint64_t))(v6 + 104);
  v77(v11 + v9);
  v13 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v79, v11, 0xD00000000000006BLL, 0x800000000021FC30, 96, &type metadata for ReadingSessionData, v13);
  swift_bridgeObjectRelease((BAEventReporter *)v11, v14, v15, v16, v17, v18, v19, v20);
  sub_AF27C((uint64_t)&v94);
  v75 = (BAEventReporter *)*((_QWORD *)&v94 + 1);
  v21 = v96;
  v22 = v98;
  v23 = v107;
  v79 = v94;
  v80 = v95;
  v81 = *((_QWORD *)&v95 + 1);
  v82 = v96;
  v83 = v97;
  v84 = v98;
  v85 = v99;
  v86 = v100;
  v87 = v101;
  v88 = v102;
  v89 = v103;
  v90 = v104;
  v91 = v105;
  v92 = v106;
  v93 = v107;
  v24 = swift_allocObject(v4, v8, v10);
  *(_OWORD *)(v24 + 16) = xmmword_1F5FF0;
  ((void (*)(uint64_t, _QWORD, uint64_t))v77)(v24 + v12, v76, v5);
  v25 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v79, v24, 0xD00000000000006BLL, 0x800000000021FC30, 97, &type metadata for ContentData, v25);
  swift_bridgeObjectRelease(v22, v26, v27, v28, v29, v30, v31, v32);
  swift_bridgeObjectRelease(v21, v33, v34, v35, v36, v37, v38, v39);
  swift_bridgeObjectRelease(v75, v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease((BAEventReporter *)v24, v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease(v23, v54, v55, v56, v57, v58, v59, v60);
  LODWORD(v94) = a4;
  v61 = swift_allocObject(v74, v8, v10);
  *(_OWORD *)(v61 + 16) = xmmword_1F5FF0;
  ((void (*)(uint64_t, _QWORD, uint64_t))v77)(v61 + v73, v76, v5);
  v62 = sub_9D578();
  AccessTracker.push<A>(data:traits:file:line:)(&v94, v61, 0xD00000000000006BLL, 0x800000000021FC30, 98, &type metadata for BrightnessData, v62);
  swift_bridgeObjectRelease((BAEventReporter *)v61, v63, v64, v65, v66, v67, v68, v69);
  v70 = type metadata accessor for ReadingBrightnessChangeEvent(0);
  v71 = sub_7E10(&qword_29AB10, type metadata accessor for ReadingBrightnessChangeEvent, (uint64_t)&protocol conformance descriptor for ReadingBrightnessChangeEvent);
  v94 = 0u;
  v95 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v70, 0, &v94, 0, 0, v70, v71);
  return sub_54960((uint64_t)&v94);
}

void EventReporter.emitReadingFontChangeEvent(using:readingSessionData:contentData:fontName:)(void *a1, int *a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BAEventReporter *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  BAEventReporter *v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  int64_t v30;
  id v31;
  BOOL v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  int64_t v37;
  id v38;
  BOOL v39;
  id v40;
  char v41;
  _OWORD v42[6];

  v9 = *a2;
  v10 = *((_BYTE *)a2 + 4);
  v11 = a2[2];
  v12 = *((_BYTE *)a2 + 12);
  v13 = *((_BYTE *)a2 + 13);
  v41 = *((_BYTE *)a2 + 14);
  v14 = a3[3];
  v42[2] = a3[2];
  v42[3] = v14;
  v15 = a3[5];
  v42[4] = a3[4];
  v42[5] = v15;
  v16 = a3[1];
  v17 = a1;
  v42[0] = *a3;
  v42[1] = v16;
  if (a1 || (v17 = sub_CB320()) != 0)
  {
    v18 = swift_allocObject(&unk_273CB0, 144, 7);
    v19 = a4;
    v20 = a5;
    v21 = (BAEventReporter *)v18;
    *(_DWORD *)(v18 + 16) = v9;
    *(_BYTE *)(v18 + 20) = v10;
    *(_DWORD *)(v18 + 24) = v11;
    *(_BYTE *)(v18 + 28) = v12;
    *(_BYTE *)(v18 + 29) = v13;
    *(_BYTE *)(v18 + 30) = v41;
    v22 = a3[3];
    *(_OWORD *)(v18 + 64) = a3[2];
    *(_OWORD *)(v18 + 80) = v22;
    v23 = a3[5];
    *(_OWORD *)(v18 + 96) = a3[4];
    *(_OWORD *)(v18 + 112) = v23;
    v24 = a3[1];
    *(_OWORD *)(v18 + 32) = *a3;
    *(_OWORD *)(v18 + 48) = v24;
    *(_QWORD *)(v18 + 128) = v19;
    *(_QWORD *)(v18 + 136) = v20;
    v25 = (BAEventReporter *)swift_allocObject(&unk_273CD8, 32, 7);
    v25[1].super.isa = (Class)sub_9CBF0;
    *(_QWORD *)v25[1].dataProviders = v21;
    v26 = a1;
    sub_53FBC(v42);
    swift_bridgeObjectRetain(v20);
    swift_retain(v21);
    Tracker.transaction(block:)(sub_54CC0, v25);

    swift_release(v21, v27, v28, v29, v30, v31, v32, v33);
    swift_release(v25, v34, v35, v36, v37, v38, v39, v40);
  }
}

uint64_t sub_9B714(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  *(_QWORD *)&v57 = a5;
  *((_QWORD *)&v57 + 1) = a6;
  LODWORD(v58) = a2;
  BYTE4(v58) = BYTE4(a2) & 1;
  DWORD2(v58) = a3;
  BYTE12(v58) = BYTE4(a3) & 1;
  BYTE13(v58) = BYTE5(a3) & 1;
  BYTE14(v58) = BYTE6(a3);
  v7 = sub_71B4(&qword_299FD0);
  v8 = type metadata accessor for DataEventTrait(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = v11 + *(_QWORD *)(v9 + 72);
  v13 = v10 | 7;
  v14 = swift_allocObject(v7, v12, v10 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1F5FF0;
  v15 = enum case for DataEventTrait.onlyOnce(_:);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v55 = enum case for DataEventTrait.onlyOnce(_:);
  v56(v14 + v11, enum case for DataEventTrait.onlyOnce(_:), v8);
  v16 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v58, v14, 0xD00000000000006BLL, 0x800000000021FC30, 120, &type metadata for ReadingSessionData, v16);
  swift_bridgeObjectRelease((BAEventReporter *)v14, v17, v18, v19, v20, v21, v22, v23);
  v24 = a4[3];
  v60 = a4[2];
  v61 = v24;
  v25 = a4[5];
  v62 = a4[4];
  v63 = v25;
  v26 = a4[1];
  v58 = *a4;
  v59 = v26;
  v27 = swift_allocObject(v7, v12, v13);
  *(_OWORD *)(v27 + 16) = xmmword_1F5FF0;
  v56(v27 + v11, v15, v8);
  v28 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v58, v27, 0xD00000000000006BLL, 0x800000000021FC30, 121, &type metadata for ContentData, v28);
  swift_bridgeObjectRelease((BAEventReporter *)v27, v29, v30, v31, v32, v33, v34, v35);
  v58 = v57;
  v36 = swift_allocObject(v7, v12, v13);
  *(_OWORD *)(v36 + 16) = xmmword_1F5FF0;
  v56(v36 + v11, v55, v8);
  v37 = sub_9D494();
  swift_bridgeObjectRetain(*((_QWORD *)&v57 + 1));
  AccessTracker.push<A>(data:traits:file:line:)(&v58, v36, 0xD00000000000006BLL, 0x800000000021FC30, 122, &type metadata for FontData, v37);
  swift_bridgeObjectRelease(*((BAEventReporter **)&v57 + 1), v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease((BAEventReporter *)v36, v45, v46, v47, v48, v49, v50, v51);
  v52 = type metadata accessor for ReadingFontChangeEvent(0);
  v53 = sub_7E10(&qword_29AB00, type metadata accessor for ReadingFontChangeEvent, (uint64_t)&protocol conformance descriptor for ReadingFontChangeEvent);
  v58 = 0u;
  v59 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v52, 0, &v58, 0, 0, v52, v53);
  return sub_54960((uint64_t)&v58);
}

void EventReporter.emitReadingOrientationChangeEvent(using:readingSessionData:contentData:)(void *a1)
{
  BAEventReporter *v2;
  BAEventReporter *v3;
  BAEventReporter *v4;
  BAEventReporter *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  int64_t v10;
  int64_t v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  BAEventReporter *v37;
  uint64_t v38;
  BAEventReporter *v39;
  __int16 v40;
  int v41;
  char v42;
  int v43;
  char v44;
  int v45;
  char v46;
  uint64_t v47;
  BAEventReporter *v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  BAEventReporter *v52;
  uint64_t v53;
  BAEventReporter *v54;
  __int16 v55;
  int v56;
  char v57;
  int v58;
  char v59;
  int v60;
  char v61;
  uint64_t v62;
  BAEventReporter *v63;
  int v64;
  char v65;
  int v66;
  char v67;
  char v68;
  char v69;
  int v70;
  char v71;
  int v72;
  char v73;
  char v74;
  char v75;

  sub_B15F4((uint64_t)&v70);
  v64 = v70;
  v65 = v71;
  v66 = v72;
  v67 = v73;
  v68 = v74;
  v69 = v75;
  sub_AF27C((uint64_t)&v49);
  v2 = (BAEventReporter *)*((_QWORD *)&v49 + 1);
  v3 = v52;
  v4 = v54;
  v5 = v63;
  v34 = v49;
  v35 = v50;
  v36 = v51;
  v37 = v52;
  v38 = v53;
  v39 = v54;
  v40 = v55;
  v41 = v56;
  v42 = v57;
  v43 = v58;
  v44 = v59;
  v45 = v60;
  v46 = v61;
  v47 = v62;
  v48 = v63;
  _s13BookAnalytics13EventReporterC028emitReadingOrientationChangeC05using18readingSessionData07contentL0yAA9BATrackerCSg_AA0fkL0VAA07ContentL0VtF_0(a1, &v64, &v34);
  swift_bridgeObjectRelease(v4, v6, v7, v8, v9, v10, v11, v12);
  swift_bridgeObjectRelease(v3, v13, v14, v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease(v2, v20, v21, v22, v23, v24, v25, v26);
  swift_bridgeObjectRelease(v5, v27, v28, v29, v30, v31, v32, v33);
}

uint64_t sub_9BC04(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  LODWORD(v38) = a2;
  BYTE4(v38) = BYTE4(a2) & 1;
  DWORD2(v38) = a3;
  BYTE12(v38) = BYTE4(a3) & 1;
  BYTE13(v38) = BYTE5(a3) & 1;
  BYTE14(v38) = BYTE6(a3);
  v37 = sub_71B4(&qword_299FD0);
  v5 = type metadata accessor for DataEventTrait(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 72);
  v10 = v7 | 7;
  v11 = swift_allocObject(v37, v9, v7 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_1F5FF0;
  v12 = enum case for DataEventTrait.onlyOnce(_:);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  v13(v11 + v8, enum case for DataEventTrait.onlyOnce(_:), v5);
  v14 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v38, v11, 0xD00000000000006BLL, 0x800000000021FC30, 141, &type metadata for ReadingSessionData, v14);
  swift_bridgeObjectRelease((BAEventReporter *)v11, v15, v16, v17, v18, v19, v20, v21);
  v22 = a4[3];
  v40 = a4[2];
  v41 = v22;
  v23 = a4[5];
  v42 = a4[4];
  v43 = v23;
  v24 = a4[1];
  v38 = *a4;
  v39 = v24;
  v25 = swift_allocObject(v37, v9, v10);
  *(_OWORD *)(v25 + 16) = xmmword_1F5FF0;
  v13(v25 + v8, v12, v5);
  v26 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v38, v25, 0xD00000000000006BLL, 0x800000000021FC30, 142, &type metadata for ContentData, v26);
  swift_bridgeObjectRelease((BAEventReporter *)v25, v27, v28, v29, v30, v31, v32, v33);
  v34 = type metadata accessor for ReadingOrientationChangeEvent(0);
  v35 = sub_7E10(&qword_29AAF0, type metadata accessor for ReadingOrientationChangeEvent, (uint64_t)&protocol conformance descriptor for ReadingOrientationChangeEvent);
  v38 = 0u;
  v39 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v34, 0, &v38, 0, 0, v34, v35);
  return sub_54960((uint64_t)&v38);
}

void EventReporter.emitReadingFontSizeChangeEvent(using:readingSessionData:contentData:fontSize:)(void *a1, int *a2, _OWORD *a3, float a4)
{
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  id v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  BAEventReporter *v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  int64_t v33;
  id v34;
  BOOL v35;
  id v36;
  _OWORD v37[6];

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 4);
  v9 = a2[2];
  v10 = *((_BYTE *)a2 + 12);
  v11 = *((_BYTE *)a2 + 13);
  v12 = *((_BYTE *)a2 + 14);
  v13 = a3[3];
  v37[2] = a3[2];
  v37[3] = v13;
  v14 = a3[5];
  v37[4] = a3[4];
  v37[5] = v14;
  v15 = a3[1];
  v16 = a1;
  v37[0] = *a3;
  v37[1] = v15;
  if (a1 || (v16 = sub_CB320()) != 0)
  {
    v17 = swift_allocObject(&unk_273D00, 132, 7);
    *(_DWORD *)(v17 + 16) = v7;
    *(_BYTE *)(v17 + 20) = v8;
    *(_DWORD *)(v17 + 24) = v9;
    *(_BYTE *)(v17 + 28) = v10;
    *(_BYTE *)(v17 + 29) = v11;
    *(_BYTE *)(v17 + 30) = v12;
    v18 = a3[3];
    *(_OWORD *)(v17 + 64) = a3[2];
    *(_OWORD *)(v17 + 80) = v18;
    v19 = a3[5];
    *(_OWORD *)(v17 + 96) = a3[4];
    *(_OWORD *)(v17 + 112) = v19;
    v20 = a3[1];
    *(_OWORD *)(v17 + 32) = *a3;
    *(_OWORD *)(v17 + 48) = v20;
    *(float *)(v17 + 128) = a4;
    v21 = (BAEventReporter *)swift_allocObject(&unk_273D28, 32, 7);
    v21[1].super.isa = (Class)sub_9CF00;
    *(_QWORD *)v21[1].dataProviders = v17;
    v22 = a1;
    sub_53FBC(v37);
    swift_retain(v17);
    Tracker.transaction(block:)(sub_54CC0, v21);

    swift_release((BAEventReporter *)v17, v23, v24, v25, v26, v27, v28, v29);
    swift_release(v21, v30, v31, v32, v33, v34, v35, v36);
  }
}

uint64_t sub_9BFE8(float a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  LODWORD(v49) = a3;
  BYTE4(v49) = BYTE4(a3) & 1;
  DWORD2(v49) = a4;
  BYTE12(v49) = BYTE4(a4) & 1;
  BYTE13(v49) = BYTE5(a4) & 1;
  BYTE14(v49) = BYTE6(a4);
  v48 = sub_71B4(&qword_299FD0);
  v7 = type metadata accessor for DataEventTrait(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 72);
  v12 = v9 | 7;
  v13 = swift_allocObject(v48, v11, v9 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1F5FF0;
  v14 = enum case for DataEventTrait.onlyOnce(_:);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104);
  v15(v13 + v10, enum case for DataEventTrait.onlyOnce(_:), v7);
  v16 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v49, v13, 0xD00000000000006BLL, 0x800000000021FC30, 164, &type metadata for ReadingSessionData, v16);
  swift_bridgeObjectRelease((BAEventReporter *)v13, v17, v18, v19, v20, v21, v22, v23);
  v24 = a5[3];
  v51 = a5[2];
  v52 = v24;
  v25 = a5[5];
  v53 = a5[4];
  v54 = v25;
  v26 = a5[1];
  v49 = *a5;
  v50 = v26;
  v27 = swift_allocObject(v48, v11, v12);
  *(_OWORD *)(v27 + 16) = xmmword_1F5FF0;
  v15(v27 + v10, v14, v7);
  v28 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v49, v27, 0xD00000000000006BLL, 0x800000000021FC30, 165, &type metadata for ContentData, v28);
  swift_bridgeObjectRelease((BAEventReporter *)v27, v29, v30, v31, v32, v33, v34, v35);
  *(float *)&v49 = a1;
  v36 = swift_allocObject(v48, v11, v12);
  *(_OWORD *)(v36 + 16) = xmmword_1F5FF0;
  v15(v36 + v10, v14, v7);
  v37 = sub_9D2EC();
  AccessTracker.push<A>(data:traits:file:line:)(&v49, v36, 0xD00000000000006BLL, 0x800000000021FC30, 166, &type metadata for FontSizeData, v37);
  swift_bridgeObjectRelease((BAEventReporter *)v36, v38, v39, v40, v41, v42, v43, v44);
  v45 = type metadata accessor for ReadingFontSizeChangeEvent(0);
  v46 = sub_7E10(&qword_29AAE8, type metadata accessor for ReadingFontSizeChangeEvent, (uint64_t)&protocol conformance descriptor for ReadingFontSizeChangeEvent);
  v49 = 0u;
  v50 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v45, 0, &v49, 0, 0, v45, v46);
  return sub_54960((uint64_t)&v49);
}

void EventReporter.emitReadingScrollViewSettingChangeEvent(using:readingSessionData:contentData:fontSize:isOn:)(void *a1, int *a2, _OWORD *a3, char a4, float a5)
{
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  uint64_t v19;
  char v20;
  BAEventReporter *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  BAEventReporter *v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  int64_t v30;
  id v31;
  BOOL v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  int64_t v37;
  id v38;
  BOOL v39;
  id v40;
  _OWORD v41[6];

  v9 = *a2;
  v10 = *((_BYTE *)a2 + 4);
  v11 = a2[2];
  v12 = *((_BYTE *)a2 + 12);
  v13 = *((_BYTE *)a2 + 13);
  v14 = *((_BYTE *)a2 + 14);
  v15 = a3[3];
  v41[2] = a3[2];
  v41[3] = v15;
  v16 = a3[5];
  v41[4] = a3[4];
  v41[5] = v16;
  v17 = a3[1];
  v18 = a1;
  v41[0] = *a3;
  v41[1] = v17;
  if (a1 || (v18 = sub_CB320()) != 0)
  {
    v19 = swift_allocObject(&unk_273D50, 133, 7);
    v20 = a4;
    v21 = (BAEventReporter *)v19;
    *(_DWORD *)(v19 + 16) = v9;
    *(_BYTE *)(v19 + 20) = v10;
    *(_DWORD *)(v19 + 24) = v11;
    *(_BYTE *)(v19 + 28) = v12;
    *(_BYTE *)(v19 + 29) = v13;
    *(_BYTE *)(v19 + 30) = v14;
    v22 = a3[3];
    *(_OWORD *)(v19 + 64) = a3[2];
    *(_OWORD *)(v19 + 80) = v22;
    v23 = a3[5];
    *(_OWORD *)(v19 + 96) = a3[4];
    *(_OWORD *)(v19 + 112) = v23;
    v24 = a3[1];
    *(_OWORD *)(v19 + 32) = *a3;
    *(_OWORD *)(v19 + 48) = v24;
    *(float *)(v19 + 128) = a5;
    *(_BYTE *)(v19 + 132) = v20 & 1;
    v25 = (BAEventReporter *)swift_allocObject(&unk_273D78, 32, 7);
    v25[1].super.isa = (Class)sub_9D070;
    *(_QWORD *)v25[1].dataProviders = v21;
    v26 = a1;
    sub_53FBC(v41);
    swift_retain(v21);
    Tracker.transaction(block:)(sub_54CC0, v25);

    swift_release(v21, v27, v28, v29, v30, v31, v32, v33);
    swift_release(v25, v34, v35, v36, v37, v38, v39, v40);
  }
}

uint64_t sub_9C458(float a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, char a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  int64_t v44;
  id v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  LODWORD(v61) = a3;
  BYTE4(v61) = BYTE4(a3) & 1;
  DWORD2(v61) = a4;
  BYTE12(v61) = BYTE4(a4) & 1;
  BYTE13(v61) = BYTE5(a4) & 1;
  BYTE14(v61) = BYTE6(a4);
  v59 = sub_71B4(&qword_299FD0);
  v8 = type metadata accessor for DataEventTrait(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = v11 + *(_QWORD *)(v9 + 72);
  v13 = v10 | 7;
  v14 = swift_allocObject(v59, v12, v10 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1F5FF0;
  v15 = enum case for DataEventTrait.onlyOnce(_:);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v16(v14 + v11, enum case for DataEventTrait.onlyOnce(_:), v8);
  v17 = sub_8909C();
  AccessTracker.push<A>(data:traits:file:line:)(&v61, v14, 0xD00000000000006BLL, 0x800000000021FC30, 191, &type metadata for ReadingSessionData, v17);
  swift_bridgeObjectRelease((BAEventReporter *)v14, v18, v19, v20, v21, v22, v23, v24);
  v25 = a5[3];
  v63 = a5[2];
  v64 = v25;
  v26 = a5[5];
  v65 = a5[4];
  v66 = v26;
  v27 = a5[1];
  v61 = *a5;
  v62 = v27;
  v28 = swift_allocObject(v59, v12, v13);
  *(_OWORD *)(v28 + 16) = xmmword_1F5FF0;
  v16(v28 + v11, v15, v8);
  v29 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v61, v28, 0xD00000000000006BLL, 0x800000000021FC30, 192, &type metadata for ContentData, v29);
  swift_bridgeObjectRelease((BAEventReporter *)v28, v30, v31, v32, v33, v34, v35, v36);
  *(float *)&v61 = a1;
  v37 = swift_allocObject(v59, v12, v13);
  *(_OWORD *)(v37 + 16) = xmmword_1F5FF0;
  v16(v37 + v11, v15, v8);
  v38 = sub_9D2EC();
  AccessTracker.push<A>(data:traits:file:line:)(&v61, v37, 0xD00000000000006BLL, 0x800000000021FC30, 193, &type metadata for FontSizeData, v38);
  swift_bridgeObjectRelease((BAEventReporter *)v37, v39, v40, v41, v42, v43, v44, v45);
  if ((a6 & 1) != 0)
    v46 = 1;
  else
    v46 = 2;
  LOBYTE(v61) = v46;
  v47 = swift_allocObject(v59, v12, v13);
  *(_OWORD *)(v47 + 16) = xmmword_1F5FF0;
  v16(v47 + v11, v15, v8);
  v48 = sub_9D330();
  AccessTracker.push<A>(data:traits:file:line:)(&v61, v47, 0xD00000000000006BLL, 0x800000000021FC30, 194, &type metadata for ScrollViewSettingData, v48);
  swift_bridgeObjectRelease((BAEventReporter *)v47, v49, v50, v51, v52, v53, v54, v55);
  v56 = type metadata accessor for ReadingFontSizeChangeEvent(0);
  v57 = sub_7E10(&qword_29AAE8, type metadata accessor for ReadingFontSizeChangeEvent, (uint64_t)&protocol conformance descriptor for ReadingFontSizeChangeEvent);
  v61 = 0u;
  v62 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v56, 0, &v61, 0, 0, v56, v57);
  return sub_54960((uint64_t)&v61);
}

_QWORD *_s13BookAnalytics13EventReporterC033emitReadingAutoNightSettingChangeC05using18readingSessionData07contentN04isOnyAA9BATrackerCSg_AA07BridgedfmN0CAA0s7ContentN0CSbtF_0(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  int v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  id v12;
  uint64_t v13;
  char v14;
  BAEventReporter *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  BAEventReporter *v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  int64_t v24;
  id v25;
  BOOL v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  int v36;
  char v37;
  int v38;
  char v39;
  char v40;
  char v41;
  _OWORD v42[6];

  sub_B15F4((uint64_t)&v36);
  v6 = v36;
  v7 = v37;
  v8 = v38;
  v9 = v39;
  v10 = v40;
  v11 = v41;
  sub_AF27C((uint64_t)v42);
  v12 = a1;
  if (a1 || (v12 = sub_CB320()) != 0)
  {
    v13 = swift_allocObject(&unk_273FF8, 129, 7);
    v14 = a4;
    v15 = (BAEventReporter *)v13;
    *(_DWORD *)(v13 + 16) = v6;
    *(_BYTE *)(v13 + 20) = v7;
    *(_DWORD *)(v13 + 24) = v8;
    *(_BYTE *)(v13 + 28) = v9;
    *(_BYTE *)(v13 + 29) = v10;
    *(_BYTE *)(v13 + 30) = v11;
    v16 = v42[3];
    *(_OWORD *)(v13 + 64) = v42[2];
    *(_OWORD *)(v13 + 80) = v16;
    v17 = v42[5];
    *(_OWORD *)(v13 + 96) = v42[4];
    *(_OWORD *)(v13 + 112) = v17;
    v18 = v42[1];
    *(_OWORD *)(v13 + 32) = v42[0];
    *(_OWORD *)(v13 + 48) = v18;
    *(_BYTE *)(v13 + 128) = v14 & 1;
    v19 = (BAEventReporter *)swift_allocObject(&unk_274020, 32, 7);
    v19[1].super.isa = (Class)sub_9C8A4;
    *(_QWORD *)v19[1].dataProviders = v15;
    v20 = a1;
    sub_53FBC(v42);
    swift_retain(v15);
    Tracker.transaction(block:)(sub_54CC0, v19);

    swift_release(v15, v21, v22, v23, v24, v25, v26, v27);
    swift_release(v19, v28, v29, v30, v31, v32, v33, v34);
  }
  return sub_54654(v42);
}

uint64_t sub_9C89C()
{
  return sub_9D6AC(129);
}

_QWORD *_s13BookAnalytics13EventReporterC032emitReadingBackgroundColorChangeC05using18readingSessionData07contentM0010backgroundhM0yAA9BATrackerCSg_AA07BridgedflM0CAA0q7ContentM0CAA0qghM0CtF_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  BAEventReporter *v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  int64_t v30;
  id v31;
  BOOL v32;
  id v33;
  _QWORD *result;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  char v39;
  char v40;
  char v41;
  _OWORD v42[6];

  sub_B15F4((uint64_t)&v36);
  v6 = v36;
  v7 = v37;
  v8 = v38;
  v9 = v39;
  v10 = v40;
  v11 = v41;
  sub_AF27C((uint64_t)v42);
  v12 = *(_QWORD *)(a4 + OBJC_IVAR___BABackgroundColorData_backgroundColor);
  if (v12 >= 5)
  {
    v35 = *(_QWORD *)(a4 + OBJC_IVAR___BABackgroundColorData_backgroundColor);
    result = (_QWORD *)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedBackgroundColor, &v35, &type metadata for BridgedBackgroundColor, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v13 = a1;
    if (a1 || (v13 = sub_CB320()) != 0)
    {
      v14 = swift_allocObject(&unk_273FA8, 129, 7);
      *(_DWORD *)(v14 + 16) = v6;
      *(_BYTE *)(v14 + 20) = v7;
      *(_DWORD *)(v14 + 24) = v8;
      *(_BYTE *)(v14 + 28) = v9;
      *(_BYTE *)(v14 + 29) = v10;
      *(_BYTE *)(v14 + 30) = v11;
      v15 = v42[3];
      *(_OWORD *)(v14 + 64) = v42[2];
      *(_OWORD *)(v14 + 80) = v15;
      v16 = v42[5];
      *(_OWORD *)(v14 + 96) = v42[4];
      *(_OWORD *)(v14 + 112) = v16;
      v17 = v42[1];
      *(_OWORD *)(v14 + 32) = v42[0];
      *(_OWORD *)(v14 + 48) = v17;
      *(_BYTE *)(v14 + 128) = 0x4030201uLL >> (8 * v12);
      v18 = (BAEventReporter *)swift_allocObject(&unk_273FD0, 32, 7);
      v18[1].super.isa = (Class)sub_9CA48;
      *(_QWORD *)v18[1].dataProviders = v14;
      v19 = a1;
      sub_53FBC(v42);
      swift_retain(v14);
      Tracker.transaction(block:)(sub_54CC0, v18);

      swift_release((BAEventReporter *)v14, v20, v21, v22, v23, v24, v25, v26);
      swift_release(v18, v27, v28, v29, v30, v31, v32, v33);
    }
    return sub_54654(v42);
  }
  return result;
}

uint64_t sub_9CA40()
{
  return sub_9D6AC(129);
}

uint64_t sub_9CA4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 36, 7);
}

uint64_t sub_9CA78(uint64_t a1)
{
  uint64_t v1;

  return sub_9B0BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_DWORD *)(v1 + 32));
}

_QWORD *_s13BookAnalytics13EventReporterC021emitReadingFontChangeC05using18readingSessionData07contentL08fontNameyAA9BATrackerCSg_AA07BridgedfkL0CAA0q7ContentL0CSStF_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  char v9;
  int v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BAEventReporter *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  BAEventReporter *v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  int64_t v33;
  id v34;
  BOOL v35;
  id v36;
  char v38;
  int v39;
  char v40;
  int v41;
  char v42;
  char v43;
  char v44;
  _OWORD v45[6];

  sub_B15F4((uint64_t)&v39);
  v8 = v39;
  v9 = v40;
  v10 = v41;
  v11 = v42;
  v12 = v43;
  v38 = v44;
  sub_AF27C((uint64_t)v45);
  v13 = a1;
  if (a1 || (v13 = sub_CB320()) != 0)
  {
    v14 = swift_allocObject(&unk_273F58, 144, 7);
    v15 = a4;
    v16 = a5;
    v17 = (BAEventReporter *)v14;
    *(_DWORD *)(v14 + 16) = v8;
    *(_BYTE *)(v14 + 20) = v9;
    *(_DWORD *)(v14 + 24) = v10;
    *(_BYTE *)(v14 + 28) = v11;
    *(_BYTE *)(v14 + 29) = v12;
    *(_BYTE *)(v14 + 30) = v38;
    v18 = v45[3];
    *(_OWORD *)(v14 + 64) = v45[2];
    *(_OWORD *)(v14 + 80) = v18;
    v19 = v45[5];
    *(_OWORD *)(v14 + 96) = v45[4];
    *(_OWORD *)(v14 + 112) = v19;
    v20 = v45[1];
    *(_OWORD *)(v14 + 32) = v45[0];
    *(_OWORD *)(v14 + 48) = v20;
    *(_QWORD *)(v14 + 128) = v15;
    *(_QWORD *)(v14 + 136) = v16;
    v21 = (BAEventReporter *)swift_allocObject(&unk_273F80, 32, 7);
    v21[1].super.isa = (Class)sub_9CBF0;
    *(_QWORD *)v21[1].dataProviders = v17;
    v22 = a1;
    sub_53FBC(v45);
    swift_bridgeObjectRetain(v16);
    swift_retain(v17);
    Tracker.transaction(block:)(sub_54CC0, v21);

    swift_release(v17, v23, v24, v25, v26, v27, v28, v29);
    swift_release(v21, v30, v31, v32, v33, v34, v35, v36);
  }
  return sub_54654(v45);
}

void _s13BookAnalytics13EventReporterC028emitReadingOrientationChangeC05using18readingSessionData07contentL0yAA9BATrackerCSg_AA0fkL0VAA07ContentL0VtF_0(id a1, int *a2, _OWORD *a3)
{
  void *v4;
  int v5;
  char v6;
  int v7;
  char v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  int64_t v34;
  id v35;
  BOOL v36;
  id v37;
  id v38;
  _OWORD v39[6];

  v4 = a1;
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 4);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 12);
  v9 = *((_BYTE *)a2 + 13);
  v10 = *((_BYTE *)a2 + 14);
  v11 = a3[3];
  v39[2] = a3[2];
  v39[3] = v11;
  v12 = a3[5];
  v39[4] = a3[4];
  v39[5] = v12;
  v13 = a3[1];
  v39[0] = *a3;
  v39[1] = v13;
  if (a1 || (a1 = sub_CB320()) != 0)
  {
    v38 = a1;
    v14 = (void *)objc_opt_self(MCProfileConnection);
    v15 = v4;
    v16 = objc_msgSend(v14, "sharedConnection");
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v16, "isDiagnosticSubmissionAllowed");

      if (v18)
      {
        v19 = swift_allocObject(&unk_273F08, 128, 7);
        *(_DWORD *)(v19 + 16) = v5;
        *(_BYTE *)(v19 + 20) = v6;
        *(_DWORD *)(v19 + 24) = v7;
        *(_BYTE *)(v19 + 28) = v8;
        *(_BYTE *)(v19 + 29) = v9;
        *(_BYTE *)(v19 + 30) = v10;
        v20 = a3[5];
        *(_OWORD *)(v19 + 96) = a3[4];
        *(_OWORD *)(v19 + 112) = v20;
        v21 = a3[3];
        *(_OWORD *)(v19 + 64) = a3[2];
        *(_OWORD *)(v19 + 80) = v21;
        v22 = a3[1];
        *(_OWORD *)(v19 + 32) = *a3;
        *(_OWORD *)(v19 + 48) = v22;
        v23 = (BAEventReporter *)swift_allocObject(&unk_273F30, 32, 7);
        v23[1].super.isa = (Class)sub_9D440;
        *(_QWORD *)v23[1].dataProviders = v19;
        sub_53FBC(v39);
        swift_retain(v19);
        Tracker.transaction(block:)(sub_54CC0, v23);

        swift_release((BAEventReporter *)v19, v24, v25, v26, v27, v28, v29, v30);
        swift_release(v23, v31, v32, v33, v34, v35, v36, v37);
      }
      else
      {

      }
    }
    else
    {
      __break(1u);
    }
  }
}

_QWORD *_s13BookAnalytics13EventReporterC025emitReadingFontSizeChangeC05using18readingSessionData07contentM004fontH0yAA9BATrackerCSg_AA07BridgedflM0CAA0q7ContentM0CSftF_0(void *a1, float a2)
{
  int v4;
  char v5;
  int v6;
  char v7;
  char v8;
  char v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  BAEventReporter *v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;
  int v32;
  char v33;
  int v34;
  char v35;
  char v36;
  char v37;
  _OWORD v38[6];

  sub_B15F4((uint64_t)&v32);
  v4 = v32;
  v5 = v33;
  v6 = v34;
  v7 = v35;
  v8 = v36;
  v9 = v37;
  sub_AF27C((uint64_t)v38);
  v10 = a1;
  if (a1 || (v10 = sub_CB320()) != 0)
  {
    v11 = swift_allocObject(&unk_273EB8, 132, 7);
    *(_DWORD *)(v11 + 16) = v4;
    *(_BYTE *)(v11 + 20) = v5;
    *(_DWORD *)(v11 + 24) = v6;
    *(_BYTE *)(v11 + 28) = v7;
    *(_BYTE *)(v11 + 29) = v8;
    *(_BYTE *)(v11 + 30) = v9;
    v12 = v38[3];
    *(_OWORD *)(v11 + 64) = v38[2];
    *(_OWORD *)(v11 + 80) = v12;
    v13 = v38[5];
    *(_OWORD *)(v11 + 96) = v38[4];
    *(_OWORD *)(v11 + 112) = v13;
    v14 = v38[1];
    *(_OWORD *)(v11 + 32) = v38[0];
    *(_OWORD *)(v11 + 48) = v14;
    *(float *)(v11 + 128) = a2;
    v15 = (BAEventReporter *)swift_allocObject(&unk_273EE0, 32, 7);
    v15[1].super.isa = (Class)sub_9CF00;
    *(_QWORD *)v15[1].dataProviders = v11;
    v16 = a1;
    sub_53FBC(v38);
    swift_retain(v11);
    Tracker.transaction(block:)(sub_54CC0, v15);

    swift_release((BAEventReporter *)v11, v17, v18, v19, v20, v21, v22, v23);
    swift_release(v15, v24, v25, v26, v27, v28, v29, v30);
  }
  return sub_54654(v38);
}

uint64_t sub_9CEF8()
{
  return sub_9D6AC(132);
}

_QWORD *_s13BookAnalytics13EventReporterC034emitReadingScrollViewSettingChangeC05using18readingSessionData07contentN08fontSize4isOnyAA9BATrackerCSg_AA07BridgedfmN0CAA0u7ContentN0CSfSbtF_0(void *a1, float a2, uint64_t a3, uint64_t a4, char a5)
{
  int v8;
  char v9;
  int v10;
  char v11;
  char v12;
  char v13;
  id v14;
  uint64_t v15;
  char v16;
  BAEventReporter *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  BAEventReporter *v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  int64_t v33;
  id v34;
  BOOL v35;
  id v36;
  int v38;
  char v39;
  int v40;
  char v41;
  char v42;
  char v43;
  _OWORD v44[6];

  sub_B15F4((uint64_t)&v38);
  v8 = v38;
  v9 = v39;
  v10 = v40;
  v11 = v41;
  v12 = v42;
  v13 = v43;
  sub_AF27C((uint64_t)v44);
  v14 = a1;
  if (a1 || (v14 = sub_CB320()) != 0)
  {
    v15 = swift_allocObject(&unk_273E68, 133, 7);
    v16 = a5;
    v17 = (BAEventReporter *)v15;
    *(_DWORD *)(v15 + 16) = v8;
    *(_BYTE *)(v15 + 20) = v9;
    *(_DWORD *)(v15 + 24) = v10;
    *(_BYTE *)(v15 + 28) = v11;
    *(_BYTE *)(v15 + 29) = v12;
    *(_BYTE *)(v15 + 30) = v13;
    v18 = v44[3];
    *(_OWORD *)(v15 + 64) = v44[2];
    *(_OWORD *)(v15 + 80) = v18;
    v19 = v44[5];
    *(_OWORD *)(v15 + 96) = v44[4];
    *(_OWORD *)(v15 + 112) = v19;
    v20 = v44[1];
    *(_OWORD *)(v15 + 32) = v44[0];
    *(_OWORD *)(v15 + 48) = v20;
    *(float *)(v15 + 128) = a2;
    *(_BYTE *)(v15 + 132) = v16 & 1;
    v21 = (BAEventReporter *)swift_allocObject(&unk_273E90, 32, 7);
    v21[1].super.isa = (Class)sub_9D070;
    *(_QWORD *)v21[1].dataProviders = v17;
    v22 = a1;
    sub_53FBC(v44);
    swift_retain(v17);
    Tracker.transaction(block:)(sub_54CC0, v21);

    swift_release(v17, v23, v24, v25, v26, v27, v28, v29);
    swift_release(v21, v30, v31, v32, v33, v34, v35, v36);
  }
  return sub_54654(v44);
}

uint64_t sub_9D068()
{
  return sub_9D6AC(133);
}

uint64_t sub_9D074()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 80));
  return swift_deallocObject(v0, 96, 7);
}

void sub_9D0E0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_29AABC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_88CD4;
  __asm { BR              X8; sub_9A45C }
}

uint64_t sub_9D190()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_29D50C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_9DAA0;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_29D508 + dword_29D508))(v2, v3, v4);
}

uint64_t sub_9D20C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_9D238(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_29D514);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_9DAA0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_29D510 + dword_29D510))(a1, v4, v5, v6);
}

void sub_9D2BC(uint64_t a1)
{
  uint64_t v1;

  sub_999E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(objc_class **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(void **)(v1 + 72));
}

unint64_t sub_9D2EC()
{
  unint64_t result;

  result = qword_29AAD8;
  if (!qword_29AAD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FontSizeData, &type metadata for FontSizeData);
    atomic_store(result, (unint64_t *)&qword_29AAD8);
  }
  return result;
}

unint64_t sub_9D330()
{
  unint64_t result;

  result = qword_29AAE0;
  if (!qword_29AAE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollViewSettingData, &type metadata for ScrollViewSettingData);
    atomic_store(result, (unint64_t *)&qword_29AAE0);
  }
  return result;
}

uint64_t sub_9D374()
{
  return sub_9D6AC(133);
}

uint64_t sub_9D37C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x10000000000;
  if (!*(_BYTE *)(v1 + 29))
    v2 = 0;
  return sub_9C458(*(float *)(v1 + 128), a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | *(unsigned int *)(v1 + 24), (__int128 *)(v1 + 32), *(_BYTE *)(v1 + 132));
}

uint64_t sub_9D3D8()
{
  return sub_9D6AC(132);
}

uint64_t sub_9D3E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x10000000000;
  if (!*(_BYTE *)(v1 + 29))
    v2 = 0;
  return sub_9BFE8(*(float *)(v1 + 128), a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | *(unsigned int *)(v1 + 24), (__int128 *)(v1 + 32));
}

uint64_t sub_9D438()
{
  return sub_9D6AC(128);
}

uint64_t sub_9D440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x10000000000;
  if (!*(_BYTE *)(v1 + 29))
    v2 = 0;
  return sub_9BC04(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | *(unsigned int *)(v1 + 24), (__int128 *)(v1 + 32));
}

unint64_t sub_9D494()
{
  unint64_t result;

  result = qword_29AAF8;
  if (!qword_29AAF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FontData, &type metadata for FontData);
    atomic_store(result, (unint64_t *)&qword_29AAF8);
  }
  return result;
}

uint64_t sub_9D4DC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  return swift_deallocObject(v0, 144, 7);
}

uint64_t sub_9D520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x10000000000;
  if (!*(_BYTE *)(v1 + 29))
    v2 = 0;
  return sub_9B714(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | *(unsigned int *)(v1 + 24), (__int128 *)(v1 + 32), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
}

unint64_t sub_9D578()
{
  unint64_t result;

  result = qword_29AB08;
  if (!qword_29AB08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BrightnessData, &type metadata for BrightnessData);
    atomic_store(result, (unint64_t *)&qword_29AB08);
  }
  return result;
}

unint64_t sub_9D5BC()
{
  unint64_t result;

  result = qword_29AB18;
  if (!qword_29AB18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BackgroundColorData, &type metadata for BackgroundColorData);
    atomic_store(result, (unint64_t *)&qword_29AB18);
  }
  return result;
}

uint64_t sub_9D600()
{
  return sub_9D6AC(129);
}

uint64_t sub_9D608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x10000000000;
  if (!*(_BYTE *)(v1 + 29))
    v2 = 0;
  return sub_9AD58(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | *(unsigned int *)(v1 + 24), (__int128 *)(v1 + 32), *(_BYTE *)(v1 + 128));
}

unint64_t sub_9D660()
{
  unint64_t result;

  result = qword_29AB28;
  if (!qword_29AB28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AutoNightThemeSettingData, &type metadata for AutoNightThemeSettingData);
    atomic_store(result, (unint64_t *)&qword_29AB28);
  }
  return result;
}

uint64_t sub_9D6A4()
{
  return sub_9D6AC(129);
}

uint64_t sub_9D6AC(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease(v1[5]);
  swift_bridgeObjectRelease(v1[8]);
  swift_bridgeObjectRelease(v1[10]);
  swift_bridgeObjectRelease(v1[15]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_9D6F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x10000000000;
  if (!*(_BYTE *)(v1 + 29))
    v2 = 0;
  return sub_9A8F8(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | *(unsigned int *)(v1 + 24), (__int128 *)(v1 + 32), *(_BYTE *)(v1 + 128));
}

uint64_t sub_9D74C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_9D770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = sub_71B4(&qword_29AB38);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10;
  v16 = v11 + *(_QWORD *)(v9 + 64);
  v17 = v8;
  v12 = v3 | v10 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v11, v17);
  return swift_deallocObject(v0, v16, v12);
}

uint64_t sub_9D8AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_71B4(&qword_29AB38);
  return sub_99C34(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v7), *(void **)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(char **)(v1 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1+ ((((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

unint64_t sub_9D98C()
{
  unint64_t result;

  result = qword_29AB48;
  if (!qword_29AB48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingSettingsData, &type metadata for ReadingSettingsData);
    atomic_store(result, (unint64_t *)&qword_29AB48);
  }
  return result;
}

unint64_t sub_9D9D0()
{
  unint64_t result;

  result = qword_29AB50;
  if (!qword_29AB50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DoNotDisturbData, &type metadata for DoNotDisturbData);
    atomic_store(result, (unint64_t *)&qword_29AB50);
  }
  return result;
}

unint64_t sub_9DA14()
{
  unint64_t result;

  result = qword_29AB58;
  if (!qword_29AB58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentSettingsData, &type metadata for ContentSettingsData);
    atomic_store(result, (unint64_t *)&qword_29AB58);
  }
  return result;
}

unint64_t sub_9DA58()
{
  unint64_t result;

  result = qword_29AB60;
  if (!qword_29AB60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpSellData, &type metadata for UpSellData);
    atomic_store(result, (unint64_t *)&qword_29AB60);
  }
  return result;
}

uint64_t sub_9DADC(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29AB68, &enum case for SessionGroup.default(_:));
}

uint64_t static PreorderFailEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295730, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29AB68, a1);
}

uint64_t sub_9DB1C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29AB80, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PreorderFailEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295738, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29AB80, a1);
}

uint64_t PreorderFailEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderFailEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PreorderFailEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29AC08, (uint64_t)&nominal type descriptor for PreorderFailEvent);
}

uint64_t PreorderFailEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderFailEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderFailEvent.contentStoreData.modify())()
{
  type metadata accessor for PreorderFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderFailEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderFailEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PreorderFailEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderFailEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderFailEvent.sectionData.modify())()
{
  type metadata accessor for PreorderFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderFailEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderFailEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PreorderFailEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderFailEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderFailEvent.eventData.modify())()
{
  type metadata accessor for PreorderFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderFailEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PreorderFailEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t PreorderFailEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderFailEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PreorderFailEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29ACA0, (uint64_t)&nominal type descriptor for PreorderFailEvent.Model);
}

uint64_t PreorderFailEvent.Model.init(contentData:contentStoreData:sectionData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v7;
  *(_BYTE *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 24) = v9;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v11;
  *(_WORD *)(a5 + 56) = v12;
  *(_DWORD *)(a5 + 60) = v13;
  *(_BYTE *)(a5 + 64) = v14;
  *(_DWORD *)(a5 + 68) = v15;
  *(_BYTE *)(a5 + 72) = v16;
  v17 = *(_DWORD *)(a1 + 73);
  v18 = *a2;
  v19 = a2[1];
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 96) = v18;
  v20 = a2[2];
  v21 = a2[3];
  *(_OWORD *)(a5 + 112) = v19;
  *(_OWORD *)(a5 + 128) = v20;
  *(_OWORD *)(a5 + 144) = v21;
  v22 = a3[1];
  *(_OWORD *)(a5 + 168) = *a3;
  *(_OWORD *)(a5 + 184) = v22;
  v23 = a3[3];
  *(_OWORD *)(a5 + 200) = a3[2];
  *(_OWORD *)(a5 + 216) = v23;
  v24 = a3[5];
  *(_OWORD *)(a5 + 232) = a3[4];
  v25 = *(_BYTE *)(a1 + 77);
  LODWORD(v10) = *((_DWORD *)a2 + 16);
  LOBYTE(v11) = *((_BYTE *)a2 + 68);
  *(_DWORD *)(a5 + 73) = v17;
  *(_BYTE *)(a5 + 77) = v25;
  *(_BYTE *)(a5 + 164) = v11;
  *(_DWORD *)(a5 + 160) = v10;
  *(_OWORD *)(a5 + 248) = v24;
  *(_OWORD *)(a5 + 264) = a3[6];
  v26 = a5 + *(int *)(type metadata accessor for PreorderFailEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_9DFFC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_9E034 + 4 * byte_1FC580[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_9E034()
{
  return 0xD000000000000010;
}

uint64_t sub_9E050()
{
  return 0x446E6F6974636573;
}

uint64_t sub_9E064()
{
  return 0x746144746E657665;
}

uint64_t sub_9E080(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9E340();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_9E0A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9E340();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PreorderFailEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29AB98);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_9E340();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PreorderFailEvent.Model.CodingKeys, &type metadata for PreorderFailEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v41 = *(_QWORD *)v4;
  *((_QWORD *)&v41 + 1) = v13;
  v42[0] = v14;
  *(_OWORD *)&v42[8] = v15;
  *(_QWORD *)&v42[24] = v16;
  *(_QWORD *)&v43 = v17;
  WORD4(v43) = v18;
  HIDWORD(v43) = v19;
  LOBYTE(v44) = v20;
  DWORD1(v44) = v21;
  BYTE8(v44) = v22;
  *(_DWORD *)((char *)&v44 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v44) = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v47 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v41 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v42 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 128);
    v43 = v28;
    BYTE4(v44) = v26;
    LODWORD(v44) = v25;
    v47 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_OWORD *)(v4 + 184);
    v31 = *(_OWORD *)(v4 + 200);
    v41 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v42 = v30;
    v32 = *(_OWORD *)(v4 + 216);
    v33 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)&v42[16] = v31;
    v43 = v32;
    v34 = *(_OWORD *)(v4 + 248);
    v35 = *(_OWORD *)(v4 + 264);
    v44 = v33;
    v45 = v34;
    v46 = v35;
    v47 = 2;
    v36 = sub_1B768();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for SectionData, v36);
    v37 = v4 + *(int *)(type metadata accessor for PreorderFailEvent.Model(0) + 28);
    LOBYTE(v41) = 3;
    v38 = type metadata accessor for EventData(0);
    v39 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v37, &v41, v6, v38, v39);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_9E340()
{
  unint64_t result;

  result = qword_29ABA0;
  if (!qword_29ABA0)
  {
    result = swift_getWitnessTable(&unk_1FC774, &type metadata for PreorderFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29ABA0);
  }
  return result;
}

void PreorderFailEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_71B4(&qword_29ABA8);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PreorderFailEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v52 = a1;
  sub_7988(a1, v12);
  v14 = sub_9E340();
  v50 = v8;
  v15 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PreorderFailEvent.Model.CodingKeys, &type metadata for PreorderFailEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v52);
  }
  else
  {
    v53 = v9;
    v16 = v6;
    v17 = v5;
    v18 = v3;
    v19 = v49;
    v60 = 0;
    v20 = sub_1779C();
    v21 = v50;
    v22 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v60, v51, &type metadata for ContentData, v20);
    v23 = *((_QWORD *)&v54 + 1);
    v24 = v55[0];
    v25 = *(_OWORD *)&v55[8];
    v26 = *(_QWORD *)&v55[24];
    v27 = v56;
    v28 = WORD4(v56);
    v29 = HIDWORD(v56);
    v30 = v57;
    v31 = DWORD1(v57);
    v32 = BYTE8(v57);
    v33 = BYTE13(v57);
    *(_QWORD *)v11 = v54;
    *((_QWORD *)v11 + 1) = v23;
    v11[16] = v24;
    *(_OWORD *)(v11 + 24) = v25;
    *((_QWORD *)v11 + 5) = v26;
    *((_QWORD *)v11 + 6) = v27;
    *((_WORD *)v11 + 28) = v28;
    *((_DWORD *)v11 + 15) = v29;
    v11[64] = v30;
    *((_DWORD *)v11 + 17) = v31;
    v11[72] = v32;
    *(_DWORD *)(v11 + 73) = *(_DWORD *)((char *)&v57 + 9);
    v11[77] = v33;
    *((_OWORD *)v11 + 5) = v58;
    v60 = 1;
    v34 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, &type metadata for ContentStoreData, &v60, v22, &type metadata for ContentStoreData, v34);
    v35 = v57;
    v36 = BYTE4(v57);
    v37 = *(_OWORD *)v55;
    *((_OWORD *)v11 + 6) = v54;
    *((_OWORD *)v11 + 7) = v37;
    v38 = v56;
    *((_OWORD *)v11 + 8) = *(_OWORD *)&v55[16];
    *((_OWORD *)v11 + 9) = v38;
    v11[164] = v36;
    *((_DWORD *)v11 + 40) = v35;
    v60 = 2;
    v39 = sub_1BFE4();
    v47[1] = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, &type metadata for SectionData, &v60, v22, &type metadata for SectionData, v39);
    v40 = *(_OWORD *)v55;
    *(_OWORD *)(v11 + 168) = v54;
    v41 = *(_OWORD *)&v55[16];
    v42 = v56;
    *(_OWORD *)(v11 + 184) = v40;
    *(_OWORD *)(v11 + 200) = v41;
    v43 = v57;
    v44 = v58;
    *(_OWORD *)(v11 + 216) = v42;
    *(_OWORD *)(v11 + 232) = v43;
    v45 = v59;
    *(_OWORD *)(v11 + 248) = v44;
    *(_OWORD *)(v11 + 264) = v45;
    LOBYTE(v54) = 3;
    v46 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v19, &v54, v22, v19, v46);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v51);
    (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v11[*(int *)(v53 + 28)], v17, v19);
    sub_9E7CC((uint64_t)v11, v48);
    sub_7DAC(v52);
    sub_9E810((uint64_t)v11);
  }
}

uint64_t sub_9E7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreorderFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_9E810(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PreorderFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_9E84C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PreorderFailEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_9E860(_QWORD *a1)
{
  return PreorderFailEvent.Model.encode(to:)(a1);
}

uint64_t sub_9E874@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295730, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29AB68, (uint64_t)sub_9DADC, a1);
}

uint64_t sub_9E898@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295738, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29AB80, (uint64_t)sub_9DB1C, a1);
}

uint64_t getEnumTagSinglePayload for PreorderFailEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9E8C8);
}

uint64_t sub_9E8C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PreorderFailEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9E9A0);
}

uint64_t sub_9E9A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for PreorderFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9EA80);
}

uint64_t sub_9EA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PreorderFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9EB08);
}

uint64_t sub_9EB08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_9EB7C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_1FC680;
  v4[2] = &unk_1FC698;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreorderFailEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_9EC50 + 4 * byte_1FC589[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_9EC84 + 4 * byte_1FC584[v4]))();
}

uint64_t sub_9EC84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9EC8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x9EC94);
  return result;
}

uint64_t sub_9ECA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x9ECA8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_9ECAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9ECB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreorderFailEvent.Model.CodingKeys()
{
  return &type metadata for PreorderFailEvent.Model.CodingKeys;
}

unint64_t sub_9ECD4()
{
  unint64_t result;

  result = qword_29ACE0;
  if (!qword_29ACE0)
  {
    result = swift_getWitnessTable(&unk_1FC74C, &type metadata for PreorderFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29ACE0);
  }
  return result;
}

unint64_t sub_9ED1C()
{
  unint64_t result;

  result = qword_29ACE8;
  if (!qword_29ACE8)
  {
    result = swift_getWitnessTable(&unk_1FC6BC, &type metadata for PreorderFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29ACE8);
  }
  return result;
}

unint64_t sub_9ED64()
{
  unint64_t result;

  result = qword_29ACF0;
  if (!qword_29ACF0)
  {
    result = swift_getWitnessTable(&unk_1FC6E4, &type metadata for PreorderFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29ACF0);
  }
  return result;
}

BookAnalytics::ActionType_optional __swiftcall ActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2673F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_9EE30 + 4 * byte_1FC7C4[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_9EE30()
{
  return 0x546567617373656DLL;
}

uint64_t sub_9EE4C()
{
  return 0x6F74747542797562;
}

uint64_t sub_9EE6C()
{
  return 0x7473694C746E6177;
}

uint64_t sub_9EE8C()
{
  return 0x74536E4977656976;
}

uint64_t sub_9EEAC()
{
  return 0x6165527472617473;
}

uint64_t sub_9EECC()
{
  return 0x73694C7472617473;
}

void sub_9EEF0(char *a1)
{
  sub_27568(*a1);
}

unint64_t sub_9EF00()
{
  unint64_t result;

  result = qword_29ACF8;
  if (!qword_29ACF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_29ACF8);
  }
  return result;
}

void sub_9EF44()
{
  char *v0;

  sub_1D2B1C(0, *v0);
}

void sub_9EF50()
{
  __asm { BR              X10 }
}

uint64_t sub_9EF8C(uint64_t a1)
{
  String.hash(into:)(a1, 0x546567617373656DLL, 0xEA00000000007061);
  return swift_bridgeObjectRelease(0xEA00000000007061);
}

void sub_9F060(uint64_t a1)
{
  char *v1;

  sub_1D2B1C(a1, *v1);
}

BookAnalytics::ActionType_optional sub_9F068(Swift::String *a1)
{
  return ActionType.init(rawValue:)(*a1);
}

uint64_t sub_9F074()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_9F0A4 + 4 * byte_1FC7D2[*v0]))();
}

void sub_9F0A4(_QWORD *a1@<X8>)
{
  *a1 = 0x546567617373656DLL;
  a1[1] = 0xEA00000000007061;
}

void sub_9F0C4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "buyButtonTap");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_9F0E8(_QWORD *a1@<X8>)
{
  *a1 = 0x7473694C746E6177;
  a1[1] = 0xEB00000000646441;
}

void sub_9F10C(_QWORD *a1@<X8>)
{
  *a1 = 0x74536E4977656976;
  a1[1] = 0xEB0000000065726FLL;
}

void sub_9F130(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "startReading");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_9F154(char *a1@<X8>)
{
  strcpy(a1, "startListening");
  a1[15] = -18;
}

uint64_t sub_9F17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_9F2F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_9F1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_9F2F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_9F270 + 4 * byte_1FC7DE[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_9F2A4 + 4 * byte_1FC7D9[v4]))();
}

uint64_t sub_9F2A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9F2AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x9F2B4);
  return result;
}

uint64_t sub_9F2C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x9F2C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_9F2CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9F2D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActionType()
{
  return &type metadata for ActionType;
}

unint64_t sub_9F2F0()
{
  unint64_t result;

  result = qword_29AD00;
  if (!qword_29AD00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionType, &type metadata for ActionType);
    atomic_store(result, (unint64_t *)&qword_29AD00);
  }
  return result;
}

void EventReporter.emitAllInSeriesViewEvent(using:for:with:)(uint64_t a1, uint64_t a2, objc_class *a3, objc_class *a4)
{
  BAEventReporter *v7;
  BAEventReporter *v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;

  v7 = (BAEventReporter *)swift_allocObject(&unk_274300, 40, 7);
  v7[1].super.isa = a4;
  *(_QWORD *)v7[1].dataProviders = a2;
  v7[2].super.isa = a3;
  v8 = (BAEventReporter *)swift_allocObject(&unk_274328, 32, 7);
  v8[1].super.isa = (Class)sub_9F594;
  *(_QWORD *)v8[1].dataProviders = v7;
  swift_bridgeObjectRetain(a3);
  swift_retain(v7);
  Tracker.transaction(block:)(sub_53E94, v8);
  swift_release(v7, v9, v10, v11, v12, v13, v14, v15);
  swift_release(v8, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_9F3E8(uint64_t a1, uint64_t a2, uint64_t a3, BAEventReporter *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  int64_t v26;
  int64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  swift_bridgeObjectRetain(a4);
  result = BARoundIntegerToSignificantFigures(a2, 2);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_QWORD *)&v31 = a3;
    *((_QWORD *)&v31 + 1) = a4;
    LODWORD(v32) = result;
    v8 = sub_71B4(&qword_299FD0);
    v9 = type metadata accessor for DataEventTrait(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = swift_allocObject(v8, v12 + *(_QWORD *)(v10 + 72), v11 | 7);
    *(_OWORD *)(v13 + 16) = xmmword_1F5FF0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v13 + v12, enum case for DataEventTrait.onlyOnce(_:), v9);
    v14 = sub_54B78();
    AccessTracker.push<A>(data:traits:file:line:)(&v31, v13, 0xD00000000000006FLL, 0x800000000021FD10, 17, &type metadata for SingleCollectionData, v14);
    swift_bridgeObjectRelease(a4, v15, v16, v17, v18, v19, v20, v21);
    swift_bridgeObjectRelease((BAEventReporter *)v13, v22, v23, v24, v25, v26, v27, v28);
    v29 = type metadata accessor for AllInSeriesViewEvent(0);
    v30 = sub_7E10((unint64_t *)&unk_29AE10, type metadata accessor for AllInSeriesViewEvent, (uint64_t)&protocol conformance descriptor for AllInSeriesViewEvent);
    v31 = 0u;
    v32 = 0u;
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v29, 0, &v31, 0, 0, v29, v30);
    return sub_54960((uint64_t)&v31);
  }
  __break(1u);
  return result;
}

uint64_t sub_9F570()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_9F594(uint64_t a1)
{
  uint64_t v1;

  return sub_9F3E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(BAEventReporter **)(v1 + 32));
}

uint64_t EventReporter.emitBrowseCollectionScreenViewEvent(using:for:with:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = (v7 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_274350, v11 + 8, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v12 + v10, v8, v5);
  *(_QWORD *)(v12 + v11) = a3;
  v13 = swift_allocObject(&unk_274378, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_A20BC;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = a3;
  swift_retain(v12);
  Tracker.transaction(block:)(sub_54CC0, v13);
  swift_release(v12);
  return swift_release(v13);
}

uint64_t sub_9F7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BAEventReporter *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  int64_t v17;
  int64_t v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  _OWORD v28[2];
  uint64_t v29;

  v3 = type metadata accessor for BrowseCollectionScreenViewEvent(0);
  v4 = sub_7E10((unint64_t *)&unk_29AE00, type metadata accessor for BrowseCollectionScreenViewEvent, (uint64_t)&protocol conformance descriptor for BrowseCollectionScreenViewEvent);
  AccessTracker.explicitTime<A>(_:startTime:)(v3, a2, v3, v4);
  sub_AED5C(v28);
  v5 = *(BAEventReporter **)&v28[0];
  v29 = *(_QWORD *)&v28[0];
  v6 = sub_71B4(&qword_299FD0);
  v7 = type metadata accessor for DataEventTrait(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v6, v10 + *(_QWORD *)(v8 + 72), v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v11 + v10, enum case for DataEventTrait.onlyOnce(_:), v7);
  v12 = sub_89014();
  AccessTracker.push<A>(data:traits:file:line:)(&v29, v11, 0xD00000000000006FLL, 0x800000000021FD10, 26, &type metadata for CollectionSummaryData, v12);
  swift_bridgeObjectRelease(v5, v13, v14, v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease((BAEventReporter *)v11, v20, v21, v22, v23, v24, v25, v26);
  memset(v28, 0, sizeof(v28));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v3, 0, v28, 0, 0, v3, v4);
  return sub_54960((uint64_t)v28);
}

void EventReporter.emitCollectionScreenViewEvent(using:from:for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, objc_class *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  BAEventReporter *v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  uint64_t v30;

  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (BAEventReporter *)swift_allocObject(&unk_2743A0, v13 + v11, v12 | 7);
  v14[1].super.isa = a5;
  *(_QWORD *)v14[1].dataProviders = a3;
  v14[2].super.isa = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v14 + v13, (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v15 = (BAEventReporter *)swift_allocObject(&unk_2743C8, 32, 7);
  v15[1].super.isa = (Class)sub_A20C4;
  *(_QWORD *)v15[1].dataProviders = v14;
  swift_bridgeObjectRetain(a4);
  swift_retain(v14);
  Tracker.transaction(block:)(sub_54CC0, v15);
  swift_release(v14, v16, v17, v18, v19, v20, v21, v22);
  swift_release(v15, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t sub_9FC10(uint64_t a1, uint64_t a2, uint64_t a3, BAEventReporter *a4, uint64_t a5)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  __int128 v34;
  __int128 v35;

  swift_bridgeObjectRetain(a4);
  result = BARoundIntegerToSignificantFigures(a2, 2);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    if (result <= 0x7FFFFFFF)
    {
      v11 = type metadata accessor for CollectionScreenViewEvent(0);
      v12 = sub_7E10((unint64_t *)&unk_29ADF0, type metadata accessor for CollectionScreenViewEvent, (uint64_t)&protocol conformance descriptor for CollectionScreenViewEvent);
      AccessTracker.explicitTime<A>(_:startTime:)(v11, a5, v11, v12);
      *(_QWORD *)&v34 = a3;
      *((_QWORD *)&v34 + 1) = a4;
      LODWORD(v35) = v10;
      v13 = sub_71B4(&qword_299FD0);
      v14 = type metadata accessor for DataEventTrait(0);
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(unsigned __int8 *)(v15 + 80);
      v17 = (v16 + 32) & ~v16;
      v18 = swift_allocObject(v13, v17 + *(_QWORD *)(v15 + 72), v16 | 7);
      *(_OWORD *)(v18 + 16) = xmmword_1F5FF0;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v18 + v17, enum case for DataEventTrait.onlyOnce(_:), v14);
      v19 = sub_54B78();
      AccessTracker.push<A>(data:traits:file:line:)(&v34, v18, 0xD00000000000006FLL, 0x800000000021FD10, 36, &type metadata for SingleCollectionData, v19);
      swift_bridgeObjectRelease(a4, v20, v21, v22, v23, v24, v25, v26);
      swift_bridgeObjectRelease((BAEventReporter *)v18, v27, v28, v29, v30, v31, v32, v33);
      v34 = 0u;
      v35 = 0u;
      AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v11, 0, &v34, 0, 0, v11, v12);
      return sub_54960((uint64_t)&v34);
    }
  }
  __break(1u);
  return result;
}

void EventReporter.emitContextualActionSheetExposureEvent(using:from:with:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BAEventReporter *v12;
  BAEventReporter *v13;
  objc_class *v14;
  objc_class *v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  uint64_t v30;

  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = (BAEventReporter *)swift_allocObject(&unk_2743F0, v11 + v9, v10 | 7);
  v12[1].super.isa = v3;
  *(_QWORD *)v12[1].dataProviders = a3;
  v12[2].super.isa = a1;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))((char *)v12 + v11, (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v13 = (BAEventReporter *)swift_allocObject(&unk_274418, 32, 7);
  v13[1].super.isa = (Class)sub_A20D4;
  *(_QWORD *)v13[1].dataProviders = v12;
  v14 = v3;
  swift_unknownObjectRetain(a3);
  v15 = a1;
  swift_retain(v12);
  Tracker.transaction(block:)(sub_54CC0, v13);
  swift_release(v12, v16, v17, v18, v19, v20, v21, v22);
  swift_release(v13, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t sub_A00AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  BAEventReporter *v7;
  BAEventReporter *v8;
  uint64_t v9;
  BAEventReporter *v10;
  uint8x8_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BAEventReporter *v20;
  BAEventReporter *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  unint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  int64_t v75;
  BAEventReporter *v76;
  int16x8_t v77;
  char v78;
  int v79;
  char v80;
  int v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[7];

  sub_CAECC(a3, a4, (uint64_t)&v104, v75);
  v7 = (BAEventReporter *)*((_QWORD *)&v104 + 1);
  v86 = v104;
  v85 = v105;
  v9 = *((_QWORD *)&v105 + 1);
  v8 = (BAEventReporter *)v106;
  v10 = *(BAEventReporter **)&v107[0];
  v84 = *((_QWORD *)&v106 + 1);
  v82 = BYTE9(v107[0]);
  v83 = BYTE8(v107[0]);
  v80 = v107[1];
  v81 = HIDWORD(v107[0]);
  v78 = BYTE8(v107[1]);
  v79 = DWORD1(v107[1]);
  v11.i32[0] = *(_DWORD *)((char *)&v107[1] + 9);
  v77 = (int16x8_t)vmovl_u8(v11);
  v90 = BYTE13(v107[1]);
  v12 = (BAEventReporter *)*((_QWORD *)&v107[2] + 1);
  v88 = *(_QWORD *)&v107[2];
  v13 = type metadata accessor for ContextualActionSheetExposureEvent(0);
  v92 = sub_7E10((unint64_t *)&unk_29ADE0, type metadata accessor for ContextualActionSheetExposureEvent, (uint64_t)&protocol conformance descriptor for ContextualActionSheetExposureEvent);
  v93 = v13;
  AccessTracker.explicitTime<A>(_:startTime:)(v13, a5, v13, v92);
  v14 = objc_msgSend(a3, "assetID");
  if (v14)
  {
    v16 = v14;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  *(_QWORD *)&v104 = 0;
  *((_QWORD *)&v104 + 1) = 0xE000000000000000;
  v105 = 0uLL;
  *(_QWORD *)&v106 = v17;
  *((_QWORD *)&v106 + 1) = v19;
  LOBYTE(v107[0]) = 2;
  memset((char *)v107 + 8, 0, 96);
  *(_QWORD *)&v94 = v86;
  *((_QWORD *)&v94 + 1) = v7;
  v76 = v8;
  LOBYTE(v95) = v85;
  *((_QWORD *)&v95 + 1) = v9;
  *(_QWORD *)&v96 = v8;
  *((_QWORD *)&v96 + 1) = v84;
  *(_QWORD *)&v97 = v10;
  v20 = v10;
  BYTE8(v97) = v83;
  BYTE9(v97) = v82;
  HIDWORD(v97) = v81;
  LOBYTE(v98) = v80;
  DWORD1(v98) = v79;
  BYTE8(v98) = v78;
  *(_DWORD *)((char *)&v98 + 9) = vmovn_s16(v77).u32[0];
  BYTE13(v98) = v90;
  *(_QWORD *)&v99 = v88;
  *((_QWORD *)&v99 + 1) = v12;
  v21 = v12;
  v91 = sub_71B4(&qword_299FD0);
  v22 = type metadata accessor for DataEventTrait(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = (v24 + 32) & ~v24;
  v87 = v24 | 7;
  v89 = v25 + *(_QWORD *)(v23 + 72);
  v26 = swift_allocObject(v91, v89, v24 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1F5FF0;
  v27 = enum case for DataEventTrait.onlyOnce(_:);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104);
  v28(v26 + v25, enum case for DataEventTrait.onlyOnce(_:), v22);
  v29 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v94, v26, 0xD00000000000006FLL, 0x800000000021FD10, 57, &type metadata for ContentData, v29);
  swift_bridgeObjectRelease(v20, v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease(v76, v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(v7, v44, v45, v46, v47, v48, v49, v50);
  swift_bridgeObjectRelease((BAEventReporter *)v26, v51, v52, v53, v54, v55, v56, v57);
  swift_bridgeObjectRelease(v21, v58, v59, v60, v61, v62, v63, v64);
  v100 = v107[3];
  v101 = v107[4];
  v102 = v107[5];
  v103 = *(_QWORD *)&v107[6];
  v96 = v106;
  v97 = v107[0];
  v98 = v107[1];
  v99 = v107[2];
  v94 = v104;
  v95 = v105;
  v65 = swift_allocObject(v91, v89, v87);
  *(_OWORD *)(v65 + 16) = xmmword_1F5FF0;
  v28(v65 + v25, v27, v22);
  v66 = sub_A2754();
  AccessTracker.push<A>(data:traits:file:line:)(&v94, v65, 0xD00000000000006FLL, 0x800000000021FD10, 58, &type metadata for LinkData, v66);
  swift_bridgeObjectRelease((BAEventReporter *)v65, v67, v68, v69, v70, v71, v72, v73);
  sub_2F180(&v104);
  v94 = 0u;
  v95 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v93, 0, &v94, 0, 0, v93, v92);
  return sub_54960((uint64_t)&v94);
}

void EventReporter.emitGetStartedViewEvent(using:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BAEventReporter *v8;
  BAEventReporter *v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  uint64_t v24;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = (BAEventReporter *)swift_allocObject(&unk_274440, v7 + v5, v6 | 7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))((char *)v8 + v7, (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v9 = (BAEventReporter *)swift_allocObject(&unk_274468, 32, 7);
  v9[1].super.isa = (Class)sub_A20E4;
  *(_QWORD *)v9[1].dataProviders = v8;
  swift_retain(v8);
  Tracker.transaction(block:)(sub_54CC0, v9);
  swift_release(v8, v10, v11, v12, v13, v14, v15, v16);
  swift_release(v9, v17, v18, v19, v20, v21, v22, v23);
}

void EventReporter.emitLibraryViewEvent(using:from:with:displayedIn:sortedBy:)(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  BAEventReporter *v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  uint64_t v30;

  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (BAEventReporter *)swift_allocObject(&unk_274490, v13 + v11, v12 | 7);
  v14[1].super.isa = a3;
  *(_QWORD *)v14[1].dataProviders = a4;
  v14[2].super.isa = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v14 + v13, (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v15 = (BAEventReporter *)swift_allocObject(&unk_2744B8, 32, 7);
  v15[1].super.isa = (Class)sub_A2104;
  *(_QWORD *)v15[1].dataProviders = v14;
  swift_bridgeObjectRetain(a3);
  swift_retain(v14);
  Tracker.transaction(block:)(sub_54CC0, v15);
  swift_release(v14, v16, v17, v18, v19, v20, v21, v22);
  swift_release(v15, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t sub_A09A4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  int64_t v22;
  void *v23;
  BOOL v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  BAEventReporter *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  unint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  uint64_t v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  int64_t v78;
  int64_t v79;
  id v80;
  ValueMetadata *i;
  unint64_t *v82;
  int64_t v83;
  unint64_t v84;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BAEventReporter *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[2];
  unint64_t v95;

  v9 = a5;
  v10 = a4;
  v11 = a2;
  if (a2 >> 62)
    goto LABEL_19;
  v12 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    v13 = (char *)&_swiftEmptyArrayStorage;
    v84 = v10;
    if (!v12)
      break;
    *(_QWORD *)&v94[0] = &_swiftEmptyArrayStorage;
    sub_B2D84(0, v12 & ~(v12 >> 63), 0, a4, a5, a6, a7, a8);
    if (v12 < 0)
    {
      __break(1u);
LABEL_24:
      v95 = v8;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      i = &type metadata for BridgedContentType;
      v82 = &v95;
      goto LABEL_25;
    }
    v83 = v9;
    v14 = 0;
    v13 = *(char **)&v94[0];
    v86 = v11 & 0xC000000000000001;
    v87 = v12;
    v89 = (BAEventReporter *)v11;
    while (v12 != v14)
    {
      v15 = v13;
      if (v86)
        v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v11);
      else
        v16 = (char *)*(id *)(v11 + 8 * v14 + 32);
      v17 = v16;
      v10 = *(_QWORD *)&v16[OBJC_IVAR___BALibraryItemTypeData_contentPrivateID + 8];
      v12 = *(_QWORD *)&v16[OBJC_IVAR___BALibraryItemTypeData_contentUserID + 8];
      v8 = *(_QWORD *)&v16[OBJC_IVAR___BALibraryItemTypeData_contentType];
      if (v8 >= 7)
        goto LABEL_24;
      v18 = *(_QWORD *)&v16[OBJC_IVAR___BALibraryItemTypeData_contentPrivateID];
      v93 = *(_QWORD *)&v16[OBJC_IVAR___BALibraryItemTypeData_contentUserID];
      v9 = *(_QWORD *)&v16[OBJC_IVAR___BALibraryItemTypeData_contentID + 8];
      v91 = *(_QWORD *)&v16[OBJC_IVAR___BALibraryItemTypeData_contentID];
      v19 = *(void **)&v16[OBJC_IVAR___BALibraryItemTypeData_isSample];
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v9);
      v20 = objc_msgSend(v19, "BOOLValue");

      v13 = v15;
      *(_QWORD *)&v94[0] = v15;
      v26 = *((_QWORD *)v15 + 2);
      v27 = *((_QWORD *)v13 + 3);
      if (v26 >= v27 >> 1)
      {
        sub_B2D84(v27 > 1, v26 + 1, 1, v21, v22, v23, v24, v25);
        v13 = *(char **)&v94[0];
      }
      ++v14;
      *((_QWORD *)v13 + 2) = v26 + 1;
      v28 = &v13[64 * v26];
      *((_QWORD *)v28 + 4) = v18;
      *((_QWORD *)v28 + 5) = v10;
      *((_QWORD *)v28 + 6) = v93;
      *((_QWORD *)v28 + 7) = v12;
      v28[64] = v8;
      v11 = (uint64_t)v89;
      *((_QWORD *)v28 + 9) = v91;
      *((_QWORD *)v28 + 10) = v9;
      v28[88] = v20;
      v12 = v87;
      if (v87 == v14)
      {
        v9 = v83;
        v10 = v84;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_19:
    if (v11 < 0)
      v73 = v11;
    else
      v73 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v73);
    swift_bridgeObjectRelease((BAEventReporter *)v11, v74, v75, v76, v77, v78, v79, v80);
  }
LABEL_15:
  if (a3 >= 3)
    goto LABEL_26;
  if (v10 >= 5)
  {
    *(_QWORD *)&v94[0] = v84;
    for (i = &type metadata for BridgedSortType; ; i = &type metadata for BridgedDisplayType)
    {
      v82 = (unint64_t *)v94;
LABEL_25:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(i, v82, i, &type metadata for Int);
      __break(1u);
LABEL_26:
      *(_QWORD *)&v94[0] = a3;
    }
  }
  v29 = (BAEventReporter *)v13;
  v90 = type metadata accessor for LibraryViewEvent(0);
  v92 = sub_7E10(&qword_29ADB8, type metadata accessor for LibraryViewEvent, (uint64_t)&protocol conformance descriptor for LibraryViewEvent);
  AccessTracker.explicitTime<A>(_:startTime:)(v90, v9, v90, v92);
  *(_QWORD *)&v94[0] = v29;
  v88 = sub_71B4(&qword_299FD0);
  v30 = type metadata accessor for DataEventTrait(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = v33 + *(_QWORD *)(v31 + 72);
  v35 = v32 | 7;
  v36 = swift_allocObject(v88, v34, v32 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_1F5FF0;
  v37 = enum case for DataEventTrait.onlyOnce(_:);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 104);
  v38(v36 + v33, enum case for DataEventTrait.onlyOnce(_:), v30);
  v39 = sub_88FD0();
  AccessTracker.push<A>(data:traits:file:line:)(v94, v36, 0xD00000000000006FLL, 0x800000000021FD10, 78, &type metadata for LibraryData, v39);
  swift_bridgeObjectRelease(v29, v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease((BAEventReporter *)v36, v47, v48, v49, v50, v51, v52, v53);
  LOBYTE(v94[0]) = a3;
  v54 = swift_allocObject(v88, v34, v35);
  *(_OWORD *)(v54 + 16) = xmmword_1F5FF0;
  v38(v54 + v33, v37, v30);
  v55 = sub_A26CC();
  AccessTracker.push<A>(data:traits:file:line:)(v94, v54, 0xD00000000000006FLL, 0x800000000021FD10, 79, &type metadata for LibraryDisplayData, v55);
  swift_bridgeObjectRelease((BAEventReporter *)v54, v56, v57, v58, v59, v60, v61, v62);
  LOBYTE(v94[0]) = v84;
  v63 = swift_allocObject(v88, v34, v35);
  *(_OWORD *)(v63 + 16) = xmmword_1F5FF0;
  v38(v63 + v33, v37, v30);
  v64 = sub_A2710();
  AccessTracker.push<A>(data:traits:file:line:)(v94, v63, 0xD00000000000006FLL, 0x800000000021FD10, 80, &type metadata for LibrarySortData, v64);
  swift_bridgeObjectRelease((BAEventReporter *)v63, v65, v66, v67, v68, v69, v70, v71);
  memset(v94, 0, sizeof(v94));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v90, 0, v94, 0, 0, v90, v92);
  return sub_54960((uint64_t)v94);
}

void EventReporter.emitShareSheetExposureEvent(using:from:with:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BAEventReporter *v12;
  BAEventReporter *v13;
  objc_class *v14;
  objc_class *v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  uint64_t v30;

  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = (BAEventReporter *)swift_allocObject(&unk_2744E0, v11 + v9, v10 | 7);
  v12[1].super.isa = v3;
  *(_QWORD *)v12[1].dataProviders = a3;
  v12[2].super.isa = a1;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))((char *)v12 + v11, (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v13 = (BAEventReporter *)swift_allocObject(&unk_274508, 32, 7);
  v13[1].super.isa = (Class)sub_A2114;
  *(_QWORD *)v13[1].dataProviders = v12;
  v14 = v3;
  swift_unknownObjectRetain(a3);
  v15 = a1;
  swift_retain(v12);
  Tracker.transaction(block:)(sub_54CC0, v13);
  swift_release(v12, v16, v17, v18, v19, v20, v21, v22);
  swift_release(v13, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t sub_A1160(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  BAEventReporter *v6;
  BAEventReporter *v7;
  int v8;
  BAEventReporter *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  int64_t v55;
  char v56;
  char v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  BAEventReporter *v69;
  uint64_t v70;
  BAEventReporter *v71;
  __int16 v72;
  int v73;
  char v74;
  int v75;
  char v76;
  int v77;
  char v78;
  uint64_t v79;
  BAEventReporter *v80;

  sub_CAECC(a3, a4, (uint64_t)&v67, v55);
  v5 = v67;
  v62 = v68;
  v6 = v69;
  v7 = v71;
  v60 = v70;
  v61 = *((_QWORD *)&v68 + 1);
  v58 = v73;
  v59 = v72;
  v8 = v75;
  v56 = v76;
  v57 = v74;
  v64 = v78;
  v9 = v80;
  v63 = v79;
  v10 = type metadata accessor for ShareSheetExposureEvent(0);
  v66 = sub_7E10((unint64_t *)&unk_29ADA8, type metadata accessor for ShareSheetExposureEvent, (uint64_t)&protocol conformance descriptor for ShareSheetExposureEvent);
  v11 = v77;
  AccessTracker.explicitTime<A>(_:startTime:)(v10, a5, v10, v66);
  v67 = v5;
  LOBYTE(v68) = v62;
  *((_QWORD *)&v68 + 1) = v61;
  v69 = v6;
  v70 = v60;
  v71 = v7;
  v72 = v59;
  v73 = v58;
  v74 = v57;
  v75 = v8;
  v76 = v56;
  v77 = v11;
  v78 = v64;
  v79 = v63;
  v80 = v9;
  v12 = sub_71B4(&qword_299FD0);
  v13 = type metadata accessor for DataEventTrait(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v12, v16 + *(_QWORD *)(v14 + 72), v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v17 + v16, enum case for DataEventTrait.onlyOnce(_:), v13);
  v18 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v67, v17, 0xD00000000000006FLL, 0x800000000021FD10, 90, &type metadata for ContentData, v18);
  swift_bridgeObjectRelease(v7, v19, v20, v21, v22, v23, v24, v25);
  swift_bridgeObjectRelease(v6, v26, v27, v28, v29, v30, v31, v32);
  swift_bridgeObjectRelease(*((BAEventReporter **)&v5 + 1), v33, v34, v35, v36, v37, v38, v39);
  swift_bridgeObjectRelease((BAEventReporter *)v17, v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease(v9, v47, v48, v49, v50, v51, v52, v53);
  v67 = 0u;
  v68 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v10, 0, &v67, 0, 0, v10, v66);
  return sub_54960((uint64_t)&v67);
}

void EventReporter.emitTabViewEvent(using:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BAEventReporter *v8;
  BAEventReporter *v9;
  SEL v10;
  id v11;
  id v12;
  int64_t v13;
  id v14;
  BOOL v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  uint64_t v24;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = (BAEventReporter *)swift_allocObject(&unk_274530, v7 + v5, v6 | 7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))((char *)v8 + v7, (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v9 = (BAEventReporter *)swift_allocObject(&unk_274558, 32, 7);
  v9[1].super.isa = (Class)sub_A2124;
  *(_QWORD *)v9[1].dataProviders = v8;
  swift_retain(v8);
  Tracker.transaction(block:)(sub_54CC0, v9);
  swift_release(v8, v10, v11, v12, v13, v14, v15, v16);
  swift_release(v9, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_A1658(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];

  v9 = a3(0);
  v10 = sub_7E10(a4, a3, a5);
  AccessTracker.explicitTime<A>(_:startTime:)(v9, a2, v9, v10);
  memset(v12, 0, sizeof(v12));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v9, 0, v12, 0, 0, v9, v10);
  return sub_54960((uint64_t)v12);
}

uint64_t EventReporter.emitUnifiedMessageExposureEvent(using:from:messageType:messageIdentifier:hasActionable:actionIdentifier:placementName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a8;
  v26 = a1;
  v24 = a6;
  v23 = a5;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v13);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 72) & ~v16;
  v18 = swift_allocObject(&unk_274580, v17 + v15, v16 | 7);
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  v19 = v23;
  *(_QWORD *)(v18 + 32) = v23;
  *(_BYTE *)(v18 + 40) = v24;
  v20 = v25;
  *(_QWORD *)(v18 + 48) = a7;
  *(_QWORD *)(v18 + 56) = v20;
  *(_QWORD *)(v18 + 64) = a9;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v21 = swift_allocObject(&unk_2745A8, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_A2144;
  *(_QWORD *)(v21 + 24) = v18;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a9);
  swift_retain(v18);
  swift_bridgeObjectRetain(v19);
  Tracker.transaction(block:)(sub_54CC0, v21);
  swift_release(v18);
  return swift_release(v21);
}

uint64_t sub_A19EC(uint64_t a1, unint64_t a2, uint64_t a3, BAEventReporter *a4, char a5, BAEventReporter *a6, uint64_t a7, BAEventReporter *a8, uint64_t a9)
{
  char v9;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  uint64_t result;
  __int128 v41;
  __int128 v42;
  BAEventReporter *v43;
  uint64_t v44;
  BAEventReporter *v45;

  v9 = a2;
  if (a2 >= 7)
  {
    *(_QWORD *)&v41 = a2;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedMessageType, &v41, &type metadata for BridgedMessageType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v15 = type metadata accessor for UnifiedMessageExposureEvent(0);
    v16 = sub_7E10(&qword_29AD90, type metadata accessor for UnifiedMessageExposureEvent, (uint64_t)&protocol conformance descriptor for UnifiedMessageExposureEvent);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    AccessTracker.explicitTime<A>(_:startTime:)(v15, a9, v15, v16);
    LOBYTE(v41) = v9;
    *((_QWORD *)&v41 + 1) = a3;
    *(_QWORD *)&v42 = a4;
    BYTE8(v42) = a5 & 1;
    v43 = a6;
    v44 = a7;
    v45 = a8;
    v17 = sub_A2688();
    AccessTracker.push<A>(data:traits:file:line:)(&v41, &_swiftEmptyArrayStorage, 0xD00000000000006FLL, 0x800000000021FD10, 119, &type metadata for MessageData, v17);
    swift_bridgeObjectRelease(a8, v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(a6, v25, v26, v27, v28, v29, v30, v31);
    swift_bridgeObjectRelease(a4, v32, v33, v34, v35, v36, v37, v38);
    v41 = 0u;
    v42 = 0u;
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v15, 0, &v41, 0, 0, v15, v16);
    return sub_54960((uint64_t)&v41);
  }
  return result;
}

void EventReporter.emitRemoveSuggestionCardEvent(using:suggestionType:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, char *a2, uint64_t a3, uint64_t a4, char *a5, char *a6, uint64_t a7, char *a8, char *a9)
{
  void *v9;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  BAEventReporter *v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  int64_t v25;
  id v26;
  BOOL v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  int64_t v32;
  id v33;
  BOOL v34;
  id v35;
  char v36;

  v36 = *a2;
  v14 = *a5;
  v15 = *a6;
  v16 = *a8;
  v17 = *a9;
  v18 = swift_allocObject(&unk_2745D0, 64, 7);
  *(_QWORD *)(v18 + 16) = v9;
  *(_QWORD *)(v18 + 24) = a3;
  *(_QWORD *)(v18 + 32) = a4;
  *(_BYTE *)(v18 + 40) = v15;
  *(_BYTE *)(v18 + 41) = v14;
  *(_QWORD *)(v18 + 48) = a1;
  *(_DWORD *)(v18 + 56) = a7;
  *(_BYTE *)(v18 + 60) = BYTE4(a7) & 1;
  *(_BYTE *)(v18 + 61) = v16;
  *(_BYTE *)(v18 + 62) = v17;
  *(_BYTE *)(v18 + 63) = v36;
  v19 = (BAEventReporter *)swift_allocObject(&unk_2745F8, 32, 7);
  v19[1].super.isa = (Class)sub_A217C;
  *(_QWORD *)v19[1].dataProviders = v18;
  v20 = v9;
  swift_bridgeObjectRetain(a4);
  v21 = a1;
  swift_retain(v18);
  Tracker.transaction(block:)(sub_54CC0, v19);
  swift_release((BAEventReporter *)v18, v22, v23, v24, v25, v26, v27, v28);
  swift_release(v19, v29, v30, v31, v32, v33, v34, v35);
}

uint64_t sub_A1EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, unint64_t a8, unsigned __int8 a9, unsigned __int8 a10, char a11)
{
  BAEventReporter *v11;
  BAEventReporter *v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  _OWORD v52[2];
  BAEventReporter *v53;
  BAEventReporter *v54;
  BAEventReporter *v55;

  v51 = a5;
  v50 = a6;
  v49 = a9;
  v48 = a10;
  sub_CAB80(a3, a4, &v51, &v50, a7, a8 | ((HIDWORD(a8) & 1) << 32), &v49, &v48, (uint64_t)v52);
  v11 = (BAEventReporter *)*((_QWORD *)&v52[0] + 1);
  v12 = v53;
  v13 = v54;
  v14 = v55;
  v15 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(v52, &_swiftEmptyArrayStorage, 0xD00000000000006FLL, 0x800000000021FD10, 142, &type metadata for ContentData, v15);
  swift_bridgeObjectRelease(v13, v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(v12, v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease(v11, v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease(v14, v37, v38, v39, v40, v41, v42, v43);
  LOBYTE(v52[0]) = a11;
  v44 = sub_A2644();
  AccessTracker.push<A>(data:traits:file:line:)(v52, &_swiftEmptyArrayStorage, 0xD00000000000006FLL, 0x800000000021FD10, 143, &type metadata for SuggestionData, v44);
  v45 = type metadata accessor for RemoveSuggestionCardEvent(0);
  v46 = sub_7E10((unint64_t *)&unk_29AD80, type metadata accessor for RemoveSuggestionCardEvent, (uint64_t)&protocol conformance descriptor for RemoveSuggestionCardEvent);
  memset(v52, 0, sizeof(v52));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v45, 0, v52, 0, 0, v45, v46);
  return sub_54960((uint64_t)v52);
}

uint64_t sub_A20C4(uint64_t a1)
{
  return sub_A2528(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_9FC10);
}

uint64_t sub_A20D4(uint64_t a1)
{
  return sub_A2528(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_A00AC);
}

uint64_t sub_A20E4(uint64_t a1)
{
  return sub_A239C(a1, type metadata accessor for GetStartedViewEvent, &qword_29ADD8, (uint64_t)&protocol conformance descriptor for GetStartedViewEvent);
}

uint64_t sub_A2104(uint64_t a1)
{
  return sub_A2528(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_A09A4);
}

uint64_t sub_A2114(uint64_t a1)
{
  return sub_A2528(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_A1160);
}

uint64_t sub_A2124(uint64_t a1)
{
  return sub_A239C(a1, type metadata accessor for TabViewEvent, &qword_29ADA0, (uint64_t)&protocol conformance descriptor for TabViewEvent);
}

uint64_t sub_A2148()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_A217C(uint64_t a1)
{
  uint64_t v1;

  return sub_A1EC4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_BYTE *)(v1 + 41), *(_QWORD *)(v1 + 48), *(unsigned int *)(v1 + 56) | ((unint64_t)*(unsigned __int8 *)(v1 + 60) << 32), *(_WORD *)(v1 + 61), HIBYTE(*(_WORD *)(v1 + 61)), *(_BYTE *)(v1 + 63));
}

uint64_t sub_A21D4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 6));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 8));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_A2258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_A19EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(BAEventReporter **)(v1 + 32), *(_BYTE *)(v1 + 40), *(BAEventReporter **)(v1 + 48), *(_QWORD *)(v1 + 56), *(BAEventReporter **)(v1 + 64), v1 + ((v3 + 72) & ~v3));
}

uint64_t sub_A22C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_A233C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_A239C(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_A1658(a1, v4 + ((v9 + 16) & ~v9), a2, a3, a4);
}

uint64_t sub_A2404()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_A242C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_A24B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_A2528(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, char *))
{
  char *v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return a2(a1, *((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), &v2[(v4 + 40) & ~v4]);
}

uint64_t sub_A2580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_A25F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_9F7B0(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_A2644()
{
  unint64_t result;

  result = qword_29AD78;
  if (!qword_29AD78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SuggestionData, &type metadata for SuggestionData);
    atomic_store(result, (unint64_t *)&qword_29AD78);
  }
  return result;
}

unint64_t sub_A2688()
{
  unint64_t result;

  result = qword_29AD98;
  if (!qword_29AD98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MessageData, &type metadata for MessageData);
    atomic_store(result, (unint64_t *)&qword_29AD98);
  }
  return result;
}

unint64_t sub_A26CC()
{
  unint64_t result;

  result = qword_29ADC8;
  if (!qword_29ADC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryDisplayData, &type metadata for LibraryDisplayData);
    atomic_store(result, (unint64_t *)&qword_29ADC8);
  }
  return result;
}

unint64_t sub_A2710()
{
  unint64_t result;

  result = qword_29ADD0;
  if (!qword_29ADD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibrarySortData, &type metadata for LibrarySortData);
    atomic_store(result, (unint64_t *)&qword_29ADD0);
  }
  return result;
}

unint64_t sub_A2754()
{
  unint64_t result;

  result = qword_2A03A0;
  if (!qword_2A03A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinkData, &type metadata for LinkData);
    atomic_store(result, (unint64_t *)&qword_2A03A0);
  }
  return result;
}

uint64_t sub_A27E8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29AE20, &enum case for SessionGroup.default(_:));
}

uint64_t static GoalAdjustViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295740, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29AE20, a1);
}

uint64_t sub_A2828(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29AE38, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static GoalAdjustViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295748, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29AE38, a1);
}

uint64_t GoalAdjustViewEvent.goalAdjustTypeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29AE50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GoalAdjustViewEvent.goalAdjustTypeData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29AE50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t GoalAdjustViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalAdjustViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GoalAdjustViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29AED8, (uint64_t)&nominal type descriptor for GoalAdjustViewEvent);
}

uint64_t GoalAdjustViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalAdjustViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GoalAdjustViewEvent.eventData.modify())()
{
  type metadata accessor for GoalAdjustViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GoalAdjustViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29AE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for GoalAdjustViewEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t GoalAdjustViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GoalAdjustViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GoalAdjustViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29AF70, (uint64_t)&nominal type descriptor for GoalAdjustViewEvent.Model);
}

uint64_t GoalAdjustViewEvent.Model.init(goalAdjustTypeData:eventData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = &a3[*(int *)(type metadata accessor for GoalAdjustViewEvent.Model(0) + 20)];
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_A2AE0()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0xD000000000000012;
}

uint64_t sub_A2B24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_A3988(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_A2B48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A2CFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A2B70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A2CFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GoalAdjustViewEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_29AE58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_A2CFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GoalAdjustViewEvent.Model.CodingKeys, &type metadata for GoalAdjustViewEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_A2D40();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for GoalAdjustTypeData, v12);
  if (!v2)
  {
    v13 = &v3[*(int *)(type metadata accessor for GoalAdjustViewEvent.Model(0) + 20)];
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_A2CFC()
{
  unint64_t result;

  result = qword_29AE60;
  if (!qword_29AE60)
  {
    result = swift_getWitnessTable(&unk_1FCABC, &type metadata for GoalAdjustViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AE60);
  }
  return result;
}

unint64_t sub_A2D40()
{
  unint64_t result;

  result = qword_29AE68;
  if (!qword_29AE68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GoalAdjustTypeData, &type metadata for GoalAdjustTypeData);
    atomic_store(result, (unint64_t *)&qword_29AE68);
  }
  return result;
}

uint64_t GoalAdjustViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_29AE70);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GoalAdjustViewEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_A2CFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GoalAdjustViewEvent.Model.CodingKeys, &type metadata for GoalAdjustViewEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = v8;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_A2FD8();
    v19 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for GoalAdjustTypeData, &v33, v31, &type metadata for GoalAdjustTypeData, v18);
    v24 = v14;
    *v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_A301C(v22, v21);
  }
  return sub_7DAC(a1);
}

unint64_t sub_A2FD8()
{
  unint64_t result;

  result = qword_29AE78;
  if (!qword_29AE78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GoalAdjustTypeData, &type metadata for GoalAdjustTypeData);
    atomic_store(result, (unint64_t *)&qword_29AE78);
  }
  return result;
}

uint64_t sub_A301C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GoalAdjustViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_A3060@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GoalAdjustViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_A3074(_QWORD *a1)
{
  return GoalAdjustViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_A3088@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295740, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29AE20, (uint64_t)sub_A27E8, a1);
}

uint64_t sub_A30AC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295748, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29AE38, (uint64_t)sub_A2828, a1);
}

uint64_t sub_A30D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29AE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for GoalAdjustViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_29AE50);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for GoalAdjustViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_29AE50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for GoalAdjustViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29AE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for GoalAdjustViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29AE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for GoalAdjustViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29AE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for GoalAdjustViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29AE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalAdjustViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A3480);
}

uint64_t sub_A3480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_29AE50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GoalAdjustViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A3508);
}

uint64_t sub_A3508(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_29AE50);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_A358C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_A3610(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_A3610(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29AEE8)
  {
    v2 = sub_A2FD8();
    v3 = sub_A2D40();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for GoalAdjustTypeData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29AEE8);
  }
}

uint64_t getEnumTagSinglePayload for GoalAdjustViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A3680);
}

uint64_t sub_A3680(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GoalAdjustViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A3700);
}

_BYTE *sub_A3700(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_A3770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1FC9E0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GoalAdjustViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_A3830 + 4 * byte_1FC915[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_A3864 + 4 * byte_1FC910[v4]))();
}

uint64_t sub_A3864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_A386C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xA3874);
  return result;
}

uint64_t sub_A3880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xA3888);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_A388C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_A3894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GoalAdjustViewEvent.Model.CodingKeys()
{
  return &type metadata for GoalAdjustViewEvent.Model.CodingKeys;
}

unint64_t sub_A38B4()
{
  unint64_t result;

  result = qword_29AFA8;
  if (!qword_29AFA8)
  {
    result = swift_getWitnessTable(&unk_1FCA94, &type metadata for GoalAdjustViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AFA8);
  }
  return result;
}

unint64_t sub_A38FC()
{
  unint64_t result;

  result = qword_29AFB0;
  if (!qword_29AFB0)
  {
    result = swift_getWitnessTable(&unk_1FCA04, &type metadata for GoalAdjustViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AFB0);
  }
  return result;
}

unint64_t sub_A3944()
{
  unint64_t result;

  result = qword_29AFB8;
  if (!qword_29AFB8)
  {
    result = swift_getWitnessTable(&unk_1FCA2C, &type metadata for GoalAdjustViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29AFB8);
  }
  return result;
}

uint64_t sub_A3988(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000000021FD80;
    if (a2 == 0x800000000021FD80)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021FD80, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_A3A80(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29AFC0, &enum case for SessionGroup.default(_:));
}

uint64_t static AudioSnoozeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295750, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29AFC0, a1);
}

uint64_t sub_A3AC0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29AFD8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AudioSnoozeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295758, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29AFD8, a1);
}

uint64_t AudioSnoozeEvent.audioSnoozeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSnoozeEvent(0) + 20);
  v4 = sub_71B4(&qword_29AFF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AudioSnoozeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29B078, (uint64_t)&nominal type descriptor for AudioSnoozeEvent);
}

uint64_t AudioSnoozeEvent.audioSnoozeData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSnoozeEvent(0) + 20);
  v4 = sub_71B4(&qword_29AFF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSnoozeEvent.audioSnoozeData.modify())()
{
  type metadata accessor for AudioSnoozeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSnoozeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSnoozeEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioSnoozeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSnoozeEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSnoozeEvent.eventData.modify())()
{
  type metadata accessor for AudioSnoozeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSnoozeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for AudioSnoozeEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_29AFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t AudioSnoozeEvent.Model.audioSnoozeData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[13];
  v3 = v1[14];
  v4 = v1[15];
  *a1 = v1[12];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t AudioSnoozeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSnoozeEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AudioSnoozeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29B118, (uint64_t)&nominal type descriptor for AudioSnoozeEvent.Model);
}

uint64_t AudioSnoozeEvent.Model.init(contentData:audioSnoozeData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  v16 = *a2;
  v18 = *((_QWORD *)a2 + 2);
  v17 = *((_QWORD *)a2 + 3);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 96) = v16;
  *(_QWORD *)(a4 + 112) = v18;
  *(_QWORD *)(a4 + 120) = v17;
  v19 = a4 + *(int *)(type metadata accessor for AudioSnoozeEvent.Model(0) + 24);
  v20 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a3, v20);
}

uint64_t sub_A3E8C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F6E536F69647561;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_A3F00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_A56DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_A3F24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A4178();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A3F4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A4178();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AudioSnoozeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  char v41;
  int v42;
  char v43;
  int v44;
  char v45;
  __int128 v46;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29AFF8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_A4178();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AudioSnoozeEvent.Model.CodingKeys, &type metadata for AudioSnoozeEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v34 = *(_QWORD *)v4;
  *((_QWORD *)&v34 + 1) = v13;
  LOBYTE(v35) = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v41 = v20;
  v42 = v21;
  v43 = v22;
  v44 = *(_DWORD *)(v4 + 73);
  v45 = v23;
  v46 = *(_OWORD *)(v4 + 80);
  v33 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_QWORD *)(v4 + 112);
    v26 = *(_QWORD *)(v4 + 120);
    v34 = *(_OWORD *)(v4 + 96);
    v35 = v25;
    *(_QWORD *)&v36 = v26;
    v33 = 1;
    v27 = sub_A41BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v6, &type metadata for AudioSnoozeData, v27);
    v28 = v4 + *(int *)(type metadata accessor for AudioSnoozeEvent.Model(0) + 24);
    LOBYTE(v34) = 2;
    v29 = type metadata accessor for EventData(0);
    v30 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v34, v6, v29, v30);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_A4178()
{
  unint64_t result;

  result = qword_29B000;
  if (!qword_29B000)
  {
    result = swift_getWitnessTable(&unk_1FCCDC, &type metadata for AudioSnoozeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B000);
  }
  return result;
}

unint64_t sub_A41BC()
{
  unint64_t result;

  result = qword_29B008;
  if (!qword_29B008)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AudioSnoozeData, &type metadata for AudioSnoozeData);
    atomic_store(result, (unint64_t *)&qword_29B008);
  }
  return result;
}

void AudioSnoozeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  char v51;
  int v52;
  char v53;
  int v54;
  char v55;
  __int128 v56;
  char v57;

  v38 = a2;
  v39 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v5 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_71B4(&qword_29B010);
  v6 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AudioSnoozeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v42 = a1;
  sub_7988(a1, v12);
  v14 = sub_A4178();
  v40 = v8;
  v15 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AudioSnoozeEvent.Model.CodingKeys, &type metadata for AudioSnoozeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v42);
  }
  else
  {
    v37 = v9;
    v43 = v5;
    v16 = v39;
    v57 = 0;
    v17 = sub_1779C();
    v19 = v40;
    v18 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for ContentData, &v57, v41, &type metadata for ContentData, v17);
    v20 = *((_QWORD *)&v44 + 1);
    v21 = v45;
    v22 = v46;
    v23 = v47;
    v24 = v48;
    v25 = v49;
    v26 = v50;
    v27 = v51;
    v28 = v52;
    v29 = v53;
    v30 = v55;
    *(_QWORD *)v11 = v44;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = v54;
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v56;
    v57 = 1;
    v31 = sub_A4560();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for AudioSnoozeData, &v57, v18, &type metadata for AudioSnoozeData, v31);
    v32 = v45;
    v33 = v46;
    *((_OWORD *)v11 + 6) = v44;
    *((_QWORD *)v11 + 14) = v32;
    *((_QWORD *)v11 + 15) = v33;
    LOBYTE(v44) = 2;
    v34 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v35 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v16, &v44, v18, v16, v34);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v37 + 24)], v35, v16);
    sub_A45A4((uint64_t)v11, v38);
    sub_7DAC(v42);
    sub_A45E8((uint64_t)v11);
  }
}

unint64_t sub_A4560()
{
  unint64_t result;

  result = qword_29B018;
  if (!qword_29B018)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AudioSnoozeData, &type metadata for AudioSnoozeData);
    atomic_store(result, (unint64_t *)&qword_29B018);
  }
  return result;
}

uint64_t sub_A45A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudioSnoozeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_A45E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AudioSnoozeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_A4624(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AudioSnoozeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_A4638(_QWORD *a1)
{
  return AudioSnoozeEvent.Model.encode(to:)(a1);
}

uint64_t sub_A464C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295750, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29AFC0, (uint64_t)sub_A3A80, a1);
}

uint64_t sub_A4670@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295758, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29AFD8, (uint64_t)sub_A3AC0, a1);
}

uint64_t sub_A4694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_29AFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioSnoozeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29AFF0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for AudioSnoozeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_29AFF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for AudioSnoozeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29AFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for AudioSnoozeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29AFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for AudioSnoozeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29AFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for AudioSnoozeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29AFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioSnoozeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A4BB8);
}

uint64_t sub_A4BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29AFF0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AudioSnoozeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A4C68);
}

uint64_t sub_A4C68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29AFF0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_A4D14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_29B088, (uint64_t (*)(void))sub_A4560, (uint64_t (*)(void))sub_A41BC, (uint64_t)&type metadata for AudioSnoozeData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for AudioSnoozeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v16);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    v10 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v10;
    v11 = a2[15];
    v12 = *(int *)(a3 + 24);
    v18 = (uint64_t)a2 + v12;
    v13 = a1 + v12;
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v11;
    v14 = type metadata accessor for EventData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    v15(v13, v18, v14);
  }
  return v3;
}

uint64_t destroy for AudioSnoozeEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AudioSnoozeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(int *)(a3 + 24);
  v16 = a2 + v11;
  v12 = a1 + v11;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v14(v12, v16, v13);
  return a1;
}

uint64_t assignWithCopy for AudioSnoozeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

_OWORD *initializeWithTake for AudioSnoozeEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[7];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  a1[6] = a2[6];
  a1[7] = v7;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for AudioSnoozeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioSnoozeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A53C0);
}

uint64_t sub_A53C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AudioSnoozeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A5448);
}

uint64_t sub_A5448(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_A54BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_1FCC00;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AudioSnoozeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_A5584 + 4 * byte_1FCB15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_A55B8 + 4 * byte_1FCB10[v4]))();
}

uint64_t sub_A55B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_A55C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xA55C8);
  return result;
}

uint64_t sub_A55D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xA55DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_A55E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_A55E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioSnoozeEvent.Model.CodingKeys()
{
  return &type metadata for AudioSnoozeEvent.Model.CodingKeys;
}

unint64_t sub_A5608()
{
  unint64_t result;

  result = qword_29B158;
  if (!qword_29B158)
  {
    result = swift_getWitnessTable(&unk_1FCCB4, &type metadata for AudioSnoozeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B158);
  }
  return result;
}

unint64_t sub_A5650()
{
  unint64_t result;

  result = qword_29B160;
  if (!qword_29B160)
  {
    result = swift_getWitnessTable(&unk_1FCC24, &type metadata for AudioSnoozeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B160);
  }
  return result;
}

unint64_t sub_A5698()
{
  unint64_t result;

  result = qword_29B168;
  if (!qword_29B168)
  {
    result = swift_getWitnessTable(&unk_1FCC4C, &type metadata for AudioSnoozeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B168);
  }
  return result;
}

uint64_t sub_A56DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6E536F69647561 && a2 == 0xEF61746144657A6FLL)
  {
    v7 = 0xEF61746144657A6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6E536F69647561, 0xEF61746144657A6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_A5878(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29B170, &enum case for SessionGroup.default(_:));
}

uint64_t static ContentExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295760, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29B170, a1);
}

uint64_t sub_A58B8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29B188, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ContentExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295768, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29B188, a1);
}

uint64_t ContentExposureEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContentExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29B210, (uint64_t)&nominal type descriptor for ContentExposureEvent);
}

uint64_t ContentExposureEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.contentData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.contentExposureData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.flowcaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.flowcaseData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.flowcaseData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.linkData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.pageData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.mediaData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.mediaData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.upSellData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.onDevicePersonalizationPropertyData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_296F70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.onDevicePersonalizationPropertyData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_296F70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.onDevicePersonalizationPropertyData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 52);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 52);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.seriesData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 56);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 56);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.suggestionData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 60);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 60);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.contentStoreData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.genreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 64);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.genreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 64);
  v4 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.genreData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.dealsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 68);
  v4 = sub_71B4(&qword_297410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.dealsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 68);
  v4 = sub_71B4(&qword_297410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.dealsData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 72);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 72);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.eventData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 76);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent(0) + 76);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentExposureEvent.timedData.modify())()
{
  type metadata accessor for ContentExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ContentExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v8, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v2, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v8, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v8, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v8, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v8, v23);
  v24 = a1 + v4[14];
  v25 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v8, v25);
  v26 = a1 + v4[15];
  v27 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v26, v8, v27);
  v28 = a1 + v4[16];
  v29 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v28, v8, v29);
  v30 = a1 + v4[17];
  v31 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v30, v8, v31);
  v32 = a1 + v4[18];
  v33 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v32, v2, v33);
  v34 = a1 + v4[19];
  v35 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v34, v2, v35);
}

uint64_t ContentExposureEvent.Model.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(_BYTE *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = *(_QWORD *)(v1 + 144);
  v6 = *(_QWORD *)(v1 + 152);
  v7 = *(_QWORD *)(v1 + 160);
  v8 = *(_WORD *)(v1 + 168);
  v9 = *(_DWORD *)(v1 + 172);
  v10 = *(_BYTE *)(v1 + 176);
  v11 = *(_DWORD *)(v1 + 180);
  v12 = *(_BYTE *)(v1 + 184);
  v13 = *(_BYTE *)(v1 + 189);
  v15 = *(_QWORD *)(v1 + 192);
  v14 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 60) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 68) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(v1 + 185);
  *(_BYTE *)(a1 + 77) = v13;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

uint64_t ContentExposureEvent.Model.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  v2 = *(_QWORD *)(v1 + 208);
  v3 = *(_QWORD *)(v1 + 216);
  v4 = v1 + 208;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 56);
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(_QWORD *)(v4 + 72);
  v13 = *(_QWORD *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 88);
  v15 = *(_QWORD *)(v4 + 96);
  v16 = *(_QWORD *)(v4 + 104);
  v17 = *(_WORD *)(v4 + 116);
  v18 = *(_DWORD *)(v4 + 112);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_WORD *)(a1 + 116) = v17;
  *(_DWORD *)(a1 + 112) = v18;
  return sub_55F10(v2, v3, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t ContentExposureEvent.Model.flowcaseData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1[41];
  v3 = v1[42];
  v4 = v1[43];
  v5 = v1[44];
  v6 = v1[45];
  v7 = v1[46];
  v8 = v1[47];
  v9 = v1[48];
  v10 = v1[49];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  return sub_A68B0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_A68B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

_QWORD *ContentExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_OWORD *)(v1 + 512);
  v3 = *(_OWORD *)(v1 + 480);
  v19 = *(_OWORD *)(v1 + 496);
  v20 = v2;
  v4 = *(_OWORD *)(v1 + 512);
  v21 = *(_OWORD *)(v1 + 528);
  v5 = *(_OWORD *)(v1 + 448);
  v7 = *(_OWORD *)(v1 + 416);
  v15 = *(_OWORD *)(v1 + 432);
  v6 = v15;
  v16 = v5;
  v8 = *(_OWORD *)(v1 + 448);
  v9 = *(_OWORD *)(v1 + 480);
  v17 = *(_OWORD *)(v1 + 464);
  v10 = v17;
  v18 = v9;
  v11 = *(_OWORD *)(v1 + 416);
  v14[0] = *(_OWORD *)(v1 + 400);
  v12 = v14[0];
  v14[1] = v11;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 528);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v3;
  v22 = *(_QWORD *)(v1 + 544);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 544);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v7;
  return sub_2DC18(v14);
}

uint64_t ContentExposureEvent.Model.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 576);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 552);
  v3 = *(_OWORD *)(v1 + 560);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t ContentExposureEvent.Model.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(v1 + 584);
  v3 = *(_QWORD *)(v1 + 592);
  v4 = *(_QWORD *)(v1 + 600);
  v5 = *(_QWORD *)(v1 + 608);
  v6 = *(_DWORD *)(v1 + 616);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  return sub_35E04(v2, v3, v4, v5);
}

uint64_t ContentExposureEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 640);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 624);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

__n128 ContentExposureEvent.Model.onDevicePersonalizationPropertyData.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 664);
  v3 = *(_BYTE *)(v1 + 672);
  result = *(__n128 *)(v1 + 648);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

uint64_t ContentExposureEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[85];
  v3 = v1[86];
  v4 = v1[87];
  v5 = v1[88];
  v6 = v1[89];
  v7 = v1[90];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

void ContentExposureEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 728);
}

uint64_t ContentExposureEvent.Model.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;

  v2 = *(_QWORD *)(v1 + 736);
  v3 = *(_QWORD *)(v1 + 744);
  v4 = *(_QWORD *)(v1 + 752);
  v5 = *(_QWORD *)(v1 + 760);
  v6 = *(_QWORD *)(v1 + 768);
  v7 = *(_QWORD *)(v1 + 776);
  v8 = *(_QWORD *)(v1 + 784);
  v9 = *(_QWORD *)(v1 + 792);
  v10 = *(_BYTE *)(v1 + 804);
  v11 = *(_DWORD *)(v1 + 800);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 68) = v10;
  *(_DWORD *)(a1 + 64) = v11;
  return sub_55E40(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t ContentExposureEvent.Model.genreData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[101];
  v3 = v1[102];
  v4 = v1[103];
  v5 = v1[104];
  v6 = v1[105];
  v7 = v1[106];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_8B32C(v2, v3, v4, v5, v6, v7);
}

void ContentExposureEvent.Model.dealsData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 856);
}

uint64_t ContentExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent.Model(0) + 72);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContentExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29B2D8, (uint64_t)&nominal type descriptor for ContentExposureEvent.Model);
}

uint64_t ContentExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentExposureEvent.Model(0) + 76);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentExposureEvent.Model.init(sectionData:contentData:contentExposureData:flowcaseData:linkData:pageData:mediaData:upSellData:onDevicePersonalizationPropertyData:seriesData:suggestionData:contentStoreData:genreData:dealsData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, __int128 *a10, __int128 *a11, _BYTE *a12, __int128 *a13, __int128 *a14, _BYTE *a15, uint64_t a16, uint64_t a17)
{
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v18 = *(_DWORD *)(a1 + 4);
  *(_BYTE *)a9 = *(_BYTE *)a1;
  *(_DWORD *)(a9 + 4) = v18;
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a9 + 48) = v19;
  v20 = *(_OWORD *)(a1 + 8);
  v21 = *(_OWORD *)(a1 + 24);
  *(_DWORD *)(a9 + 88) = *(_DWORD *)(a1 + 88);
  v22 = *(_OWORD *)(a1 + 56);
  v23 = *(_OWORD *)(a1 + 72);
  *(_BYTE *)(a9 + 92) = *(_BYTE *)(a1 + 92);
  v24 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a9 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a9 + 104) = v24;
  v25 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a9 + 112) = *(_QWORD *)a2;
  *(_QWORD *)(a9 + 120) = v25;
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(a2 + 16);
  v26 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a9 + 152) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a9 + 160) = v26;
  v27 = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a9 + 168) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a9 + 172) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a9 + 176) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a9 + 180) = *(_DWORD *)(a2 + 68);
  v28 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a9 + 8) = v20;
  *(_OWORD *)(a9 + 24) = v21;
  *(_OWORD *)(a9 + 56) = v22;
  *(_OWORD *)(a9 + 72) = v23;
  *(_OWORD *)(a9 + 136) = v27;
  *(_BYTE *)(a9 + 184) = v28;
  *(_DWORD *)(a9 + 185) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a9 + 189) = *(_BYTE *)(a2 + 77);
  v29 = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a9 + 324) = *((_WORD *)a3 + 58);
  v31 = *a3;
  v30 = a3[1];
  v32 = a3[2];
  v33 = a3[3];
  v34 = a3[4];
  v35 = a3[5];
  v36 = a3[6];
  *(_DWORD *)(a9 + 320) = *((_DWORD *)a3 + 28);
  v37 = *a4;
  v38 = a4[1];
  v39 = a4[2];
  v40 = a4[3];
  *(_QWORD *)(a9 + 392) = *((_QWORD *)a4 + 8);
  *(_QWORD *)(a9 + 544) = *((_QWORD *)a5 + 18);
  v42 = *a5;
  v41 = a5[1];
  v44 = a5[4];
  v43 = a5[5];
  v46 = a5[2];
  v45 = a5[3];
  v48 = a5[7];
  v47 = a5[8];
  v49 = a5[6];
  *(_OWORD *)(a9 + 328) = v37;
  *(_OWORD *)(a9 + 344) = v38;
  *(_OWORD *)(a9 + 360) = v39;
  *(_OWORD *)(a9 + 376) = v40;
  *(_OWORD *)(a9 + 552) = *(_OWORD *)a6;
  v50 = *(_QWORD *)(a6 + 24);
  *(_QWORD *)(a9 + 568) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(a9 + 576) = v50;
  v51 = *a11;
  v52 = a11[1];
  v53 = a11[2];
  v54 = *a14;
  v55 = a14[1];
  v56 = a14[2];
  v58 = *a7;
  v57 = a7[1];
  *(_DWORD *)(a9 + 616) = *((_DWORD *)a7 + 8);
  v59 = *a8;
  *(_QWORD *)(a9 + 640) = *((_QWORD *)a8 + 2);
  *(_QWORD *)(a9 + 664) = *((_QWORD *)a10 + 2);
  v60 = *a10;
  *(_BYTE *)(a9 + 672) = *((_BYTE *)a10 + 24);
  *(_BYTE *)(a9 + 728) = *a12;
  *(_BYTE *)(a9 + 804) = *((_BYTE *)a13 + 68);
  *(_OWORD *)(a9 + 584) = v58;
  *(_OWORD *)(a9 + 600) = v57;
  *(_OWORD *)(a9 + 648) = v60;
  *(_OWORD *)(a9 + 680) = v51;
  *(_OWORD *)(a9 + 696) = v52;
  *(_OWORD *)(a9 + 712) = v53;
  *(_OWORD *)(a9 + 808) = v54;
  *(_OWORD *)(a9 + 824) = v55;
  *(_OWORD *)(a9 + 840) = v56;
  v61 = *a13;
  v62 = a13[1];
  v63 = a13[2];
  v64 = a13[3];
  *(_DWORD *)(a9 + 800) = *((_DWORD *)a13 + 16);
  *(_BYTE *)(a9 + 856) = *a15;
  *(_OWORD *)(a9 + 192) = v29;
  *(_OWORD *)(a9 + 208) = v31;
  *(_OWORD *)(a9 + 224) = v30;
  *(_OWORD *)(a9 + 240) = v32;
  *(_OWORD *)(a9 + 256) = v33;
  *(_OWORD *)(a9 + 272) = v34;
  *(_OWORD *)(a9 + 288) = v35;
  *(_OWORD *)(a9 + 304) = v36;
  *(_OWORD *)(a9 + 400) = v42;
  *(_OWORD *)(a9 + 416) = v41;
  *(_OWORD *)(a9 + 464) = v44;
  *(_OWORD *)(a9 + 480) = v43;
  *(_OWORD *)(a9 + 432) = v46;
  *(_OWORD *)(a9 + 448) = v45;
  *(_OWORD *)(a9 + 512) = v48;
  *(_OWORD *)(a9 + 528) = v47;
  *(_OWORD *)(a9 + 496) = v49;
  *(_OWORD *)(a9 + 624) = v59;
  *(_OWORD *)(a9 + 736) = v61;
  *(_OWORD *)(a9 + 752) = v62;
  *(_OWORD *)(a9 + 768) = v63;
  *(_OWORD *)(a9 + 784) = v64;
  v65 = type metadata accessor for ContentExposureEvent.Model(0);
  v66 = a9 + *(int *)(v65 + 72);
  v67 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v66, a16, v67);
  v68 = a9 + *(int *)(v65 + 76);
  v69 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v68, a17, v69);
}

uint64_t sub_A6DE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_A6E20 + 4 * byte_1FCD30[a1]))(0x446E6F6974636573, 0xEB00000000617461);
}

uint64_t sub_A6E20()
{
  return 0x44746E65746E6F63;
}

unint64_t sub_A6E34()
{
  return 0xD000000000000013;
}

uint64_t sub_A6EF0()
{
  return 0x6974736567677573;
}

unint64_t sub_A6F14()
{
  return 0xD000000000000010;
}

uint64_t sub_A6F30()
{
  return 0x74614465726E6567;
}

uint64_t sub_A6F40()
{
  return 0x746144736C616564;
}

uint64_t sub_A6F50()
{
  return 0x746144746E657665;
}

uint64_t sub_A6F7C()
{
  unsigned __int8 *v0;

  return sub_A6DE4(*v0);
}

uint64_t sub_A6F84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_ACC7C(a1, a2);
  *a3 = result;
  return result;
}

void sub_A6FA8(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_A6FB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A77A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A6FDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A77A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  __int16 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  char v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  char v80;
  _OWORD v81[3];
  _BYTE v82[48];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  char v87;
  _OWORD v88[4];
  uint64_t v89;

  v3 = v1;
  v5 = sub_71B4(&qword_29B1A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_A77A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentExposureEvent.Model.CodingKeys, &type metadata for ContentExposureEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_DWORD *)(v3 + 4);
  v13 = *(_OWORD *)(v3 + 8);
  v14 = *(_OWORD *)(v3 + 24);
  v15 = *(_QWORD *)(v3 + 40);
  v16 = *(_QWORD *)(v3 + 48);
  v17 = *(_DWORD *)(v3 + 88);
  v18 = *(_BYTE *)(v3 + 92);
  v19 = *(_QWORD *)(v3 + 96);
  v20 = *(_QWORD *)(v3 + 104);
  LOBYTE(v81[0]) = *(_BYTE *)v3;
  DWORD1(v81[0]) = v12;
  *(_OWORD *)((char *)v81 + 8) = v13;
  *(_OWORD *)((char *)&v81[1] + 8) = v14;
  *((_QWORD *)&v81[2] + 1) = v15;
  *(_QWORD *)v82 = v16;
  *(_OWORD *)&v82[8] = *(_OWORD *)(v3 + 56);
  *(_OWORD *)&v82[24] = *(_OWORD *)(v3 + 72);
  *(_DWORD *)&v82[40] = v17;
  v82[44] = v18;
  *(_QWORD *)&v83 = v19;
  *((_QWORD *)&v83 + 1) = v20;
  LOBYTE(v88[0]) = 0;
  v21 = sub_1B768();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v81, v88, v5, &type metadata for SectionData, v21);
  if (!v2)
  {
    v22 = *(_QWORD *)(v3 + 120);
    v23 = *(_BYTE *)(v3 + 128);
    v24 = *(_OWORD *)(v3 + 136);
    v25 = *(_QWORD *)(v3 + 152);
    v26 = *(_QWORD *)(v3 + 160);
    v27 = *(_WORD *)(v3 + 168);
    v28 = *(_DWORD *)(v3 + 172);
    v29 = *(_BYTE *)(v3 + 176);
    v30 = *(_DWORD *)(v3 + 180);
    v31 = *(_BYTE *)(v3 + 184);
    v32 = *(unsigned __int8 *)(v3 + 189);
    *(_QWORD *)&v81[0] = *(_QWORD *)(v3 + 112);
    *((_QWORD *)&v81[0] + 1) = v22;
    LOBYTE(v81[1]) = v23;
    *(_OWORD *)((char *)&v81[1] + 8) = v24;
    *((_QWORD *)&v81[2] + 1) = v25;
    *(_QWORD *)v82 = v26;
    *(_WORD *)&v82[8] = v27;
    *(_DWORD *)&v82[12] = v28;
    v82[16] = v29;
    *(_DWORD *)&v82[20] = v30;
    v82[24] = v31;
    *(_DWORD *)&v82[25] = *(_DWORD *)(v3 + 185);
    v82[29] = v32;
    *(_OWORD *)&v82[32] = *(_OWORD *)(v3 + 192);
    LOBYTE(v88[0]) = 1;
    v33 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v81, v88, v5, &type metadata for ContentData, v33);
    v34 = *(_DWORD *)(v3 + 320);
    v35 = *(_WORD *)(v3 + 324);
    v36 = *(_OWORD *)(v3 + 224);
    v81[0] = *(_OWORD *)(v3 + 208);
    v81[1] = v36;
    v37 = *(_OWORD *)(v3 + 256);
    v81[2] = *(_OWORD *)(v3 + 240);
    *(_OWORD *)v82 = v37;
    v38 = *(_OWORD *)(v3 + 288);
    *(_OWORD *)&v82[16] = *(_OWORD *)(v3 + 272);
    *(_OWORD *)&v82[32] = v38;
    v83 = *(_OWORD *)(v3 + 304);
    WORD2(v84) = v35;
    LODWORD(v84) = v34;
    LOBYTE(v88[0]) = 2;
    v39 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, v88, v5, &type metadata for ContentExposureData, v39);
    v40 = *(_QWORD *)(v3 + 392);
    v41 = *(_OWORD *)(v3 + 344);
    v88[0] = *(_OWORD *)(v3 + 328);
    v88[1] = v41;
    v42 = *(_OWORD *)(v3 + 376);
    v88[2] = *(_OWORD *)(v3 + 360);
    v88[3] = v42;
    v89 = v40;
    v87 = 3;
    v43 = sub_21244();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v88, &v87, v5, &type metadata for FlowcaseData, v43);
    v44 = *(_OWORD *)(v3 + 512);
    v83 = *(_OWORD *)(v3 + 496);
    v84 = v44;
    v85 = *(_OWORD *)(v3 + 528);
    v86 = *(_QWORD *)(v3 + 544);
    v45 = *(_OWORD *)(v3 + 448);
    v81[2] = *(_OWORD *)(v3 + 432);
    *(_OWORD *)v82 = v45;
    v46 = *(_OWORD *)(v3 + 480);
    *(_OWORD *)&v82[16] = *(_OWORD *)(v3 + 464);
    *(_OWORD *)&v82[32] = v46;
    v47 = *(_OWORD *)(v3 + 416);
    v81[0] = *(_OWORD *)(v3 + 400);
    v81[1] = v47;
    v80 = 4;
    v48 = sub_1B7F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v81, &v80, v5, &type metadata for LinkData, v48);
    v49 = *(_QWORD *)(v3 + 568);
    v50 = *(_QWORD *)(v3 + 576);
    v81[0] = *(_OWORD *)(v3 + 552);
    *(_QWORD *)&v81[1] = v49;
    *((_QWORD *)&v81[1] + 1) = v50;
    v80 = 5;
    v51 = sub_1B7AC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v81, &v80, v5, &type metadata for PageData, v51);
    v52 = *(_DWORD *)(v3 + 616);
    v53 = *(_OWORD *)(v3 + 600);
    v81[0] = *(_OWORD *)(v3 + 584);
    v81[1] = v53;
    LODWORD(v81[2]) = v52;
    v80 = 6;
    v54 = sub_19F90();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for MediaData, v54);
    v55 = *(_QWORD *)(v3 + 640);
    v81[0] = *(_OWORD *)(v3 + 624);
    *(_QWORD *)&v81[1] = v55;
    v80 = 7;
    v56 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for UpSellData, v56);
    v57 = *(_QWORD *)(v3 + 664);
    v58 = *(_BYTE *)(v3 + 672);
    v81[0] = *(_OWORD *)(v3 + 648);
    *(_QWORD *)&v81[1] = v57;
    BYTE8(v81[1]) = v58;
    v80 = 8;
    v59 = sub_2E728();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for OnDevicePersonalizationPropertyData, v59);
    v60 = *(_OWORD *)(v3 + 696);
    v81[0] = *(_OWORD *)(v3 + 680);
    v81[1] = v60;
    v81[2] = *(_OWORD *)(v3 + 712);
    v80 = 9;
    v61 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for SeriesData, v61);
    LOBYTE(v81[0]) = *(_BYTE *)(v3 + 728);
    v80 = 10;
    v62 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for SuggestionData, v62);
    v63 = *(_DWORD *)(v3 + 800);
    v64 = *(_BYTE *)(v3 + 804);
    v65 = *(_OWORD *)(v3 + 752);
    v81[0] = *(_OWORD *)(v3 + 736);
    v81[1] = v65;
    v66 = *(_OWORD *)(v3 + 784);
    v81[2] = *(_OWORD *)(v3 + 768);
    *(_OWORD *)v82 = v66;
    v82[20] = v64;
    *(_DWORD *)&v82[16] = v63;
    v80 = 11;
    v67 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for ContentStoreData, v67);
    v68 = *(_OWORD *)(v3 + 824);
    v81[0] = *(_OWORD *)(v3 + 808);
    v81[1] = v68;
    v81[2] = *(_OWORD *)(v3 + 840);
    v80 = 12;
    v69 = sub_8B9C0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for GenreData, v69);
    LOBYTE(v81[0]) = *(_BYTE *)(v3 + 856);
    v80 = 13;
    v70 = sub_36760();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v81, &v80, v5, &type metadata for DealsData, v70);
    v71 = type metadata accessor for ContentExposureEvent.Model(0);
    v72 = v3 + *(int *)(v71 + 72);
    LOBYTE(v81[0]) = 14;
    v73 = type metadata accessor for EventData(0);
    v74 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v72, v81, v5, v73, v74);
    v75 = v3 + *(int *)(v71 + 76);
    LOBYTE(v81[0]) = 15;
    v76 = type metadata accessor for TimedData(0);
    v77 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v75, v81, v5, v76, v77);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_A77A0()
{
  unint64_t result;

  result = qword_29B1A8;
  if (!qword_29B1A8)
  {
    result = swift_getWitnessTable(&unk_1FD0D4, &type metadata for ContentExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B1A8);
  }
  return result;
}

void ContentExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  int64_t v29;
  int64_t v30;
  void *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  int v41;
  _BYTE *v42;
  BAEventReporter *v43;
  BAEventReporter *v44;
  BAEventReporter *v45;
  BAEventReporter *v46;
  BAEventReporter *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  int64_t v52;
  int64_t v53;
  id v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  int64_t v59;
  int64_t v60;
  id v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  int64_t v66;
  int64_t v67;
  id v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  BAEventReporter *v83;
  BAEventReporter *v84;
  BAEventReporter *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  int64_t v90;
  int64_t v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  int64_t v97;
  int64_t v98;
  id v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  BAEventReporter *v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  int64_t v112;
  int64_t v113;
  id v114;
  int v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int16 v129;
  int v130;
  char v131;
  int v132;
  char v133;
  char v134;
  unint64_t v135;
  int v136;
  __int16 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unint64_t v151;
  __int128 v152;
  unint64_t v153;
  int v154;
  __int128 v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unint64_t v162;
  __int128 v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  int v169;
  char v170;
  __int128 v171;
  __int128 v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  __int128 v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  _QWORD *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  int v201;
  char v202;
  char v203;
  char v204;
  _BYTE v205[48];
  _BYTE v206[48];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;

  v193 = a2;
  v192 = type metadata accessor for TimedData(0);
  v3 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v5 = (_QWORD *)((char *)&v184 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v189 = type metadata accessor for EventData(0);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v7 = (char *)&v184 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_71B4(&qword_29B1B0);
  v8 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v10 = (char *)&v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for ContentExposureEvent.Model(0);
  __chkstk_darwin(v187);
  v12 = (char *)&v184 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = v12 + 584;
  v191 = v12 + 320;
  v14 = a1[3];
  v13 = a1[4];
  v196 = a1;
  sub_7988(a1, v14);
  v15 = sub_A77A0();
  v194 = v10;
  v16 = v211;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentExposureEvent.Model.CodingKeys, &type metadata for ContentExposureEvent.Model.CodingKeys, v15, v14, v13);
  if (v16)
  {
    v211 = v16;
    v23 = 0;
    v24 = 0;
LABEL_4:
    sub_7DAC(v196);
    v32 = (v24 >> 2) & 1;
    LODWORD(v196) = (v24 >> 7) & 1;
    LODWORD(v195) = (v24 >> 6) & 1;
    LODWORD(v194) = (v24 >> 5) & 1;
    LODWORD(v193) = (v24 >> 4) & 1;
    LODWORD(v192) = (v24 >> 3) & 1;
    if ((v24 & 1) == 0)
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      if ((v24 & 2) == 0)
        goto LABEL_6;
      goto LABEL_20;
    }
    v40 = v23;
    v35 = 0;
    v185 = 0;
    LODWORD(v186) = 0;
    v41 = (v24 >> 1) & 1;
    v42 = &v206[32];
    goto LABEL_18;
  }
  v17 = v7;
  v18 = v8;
  v186 = v5;
  v19 = v3;
  v20 = v193;
  LOBYTE(v197) = 0;
  v21 = sub_1BFE4();
  v22 = v195;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v205, &type metadata for SectionData, &v197, v195, &type metadata for SectionData, v21);
  v115 = *(_DWORD *)&v205[4];
  v116 = *(_OWORD *)&v205[8];
  v117 = *(_OWORD *)&v205[24];
  v118 = *(_QWORD *)&v205[40];
  v119 = *(_QWORD *)v206;
  v120 = *(_DWORD *)&v206[40];
  v121 = v206[44];
  v122 = v207;
  *v12 = v205[0];
  *((_DWORD *)v12 + 1) = v115;
  *(_OWORD *)(v12 + 8) = v116;
  *(_OWORD *)(v12 + 24) = v117;
  *((_QWORD *)v12 + 5) = v118;
  *((_QWORD *)v12 + 6) = v119;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)&v206[8];
  *(_OWORD *)(v12 + 72) = *(_OWORD *)&v206[24];
  *((_DWORD *)v12 + 22) = v120;
  v12[92] = v121;
  *((_OWORD *)v12 + 6) = v122;
  LOBYTE(v197) = 1;
  v123 = sub_1779C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v205, &type metadata for ContentData, &v197, v22, &type metadata for ContentData, v123);
  v124 = *(_QWORD *)&v205[8];
  v125 = v205[16];
  v126 = *(_OWORD *)&v205[24];
  v127 = *(_QWORD *)&v205[40];
  v128 = *(_QWORD *)v206;
  v129 = *(_WORD *)&v206[8];
  v130 = *(_DWORD *)&v206[12];
  v131 = v206[16];
  v132 = *(_DWORD *)&v206[20];
  v133 = v206[24];
  v134 = v206[29];
  *((_QWORD *)v12 + 14) = *(_QWORD *)v205;
  *((_QWORD *)v12 + 15) = v124;
  v12[128] = v125;
  *(_OWORD *)(v12 + 136) = v126;
  *((_QWORD *)v12 + 19) = v127;
  *((_QWORD *)v12 + 20) = v128;
  *((_WORD *)v12 + 84) = v129;
  *((_DWORD *)v12 + 43) = v130;
  v12[176] = v131;
  *((_DWORD *)v12 + 45) = v132;
  v12[184] = v133;
  *(_DWORD *)(v12 + 185) = *(_DWORD *)&v206[25];
  v12[189] = v134;
  *((_OWORD *)v12 + 12) = *(_OWORD *)&v206[32];
  LOBYTE(v197) = 2;
  v135 = sub_57428();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v205, &type metadata for ContentExposureData, &v197, v22, &type metadata for ContentExposureData, v135);
  v136 = v208;
  v137 = WORD2(v208);
  v138 = *(_OWORD *)&v205[16];
  *((_OWORD *)v12 + 13) = *(_OWORD *)v205;
  *((_OWORD *)v12 + 14) = v138;
  v139 = *(_OWORD *)v206;
  *((_OWORD *)v12 + 15) = *(_OWORD *)&v205[32];
  *((_OWORD *)v12 + 16) = v139;
  v140 = *(_OWORD *)&v206[32];
  *((_OWORD *)v12 + 17) = *(_OWORD *)&v206[16];
  *((_OWORD *)v12 + 18) = v140;
  *((_OWORD *)v12 + 19) = v207;
  v141 = v191;
  *((_WORD *)v191 + 2) = v137;
  *(_DWORD *)v141 = v136;
  LOBYTE(v197) = 3;
  v142 = sub_211FC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v205, &type metadata for FlowcaseData, &v197, v22, &type metadata for FlowcaseData, v142);
  v143 = *(_QWORD *)&v206[16];
  v144 = *(_OWORD *)&v205[16];
  *(_OWORD *)(v141 + 8) = *(_OWORD *)v205;
  *(_OWORD *)(v141 + 24) = v144;
  v145 = *(_OWORD *)v206;
  *(_OWORD *)(v141 + 40) = *(_OWORD *)&v205[32];
  *(_OWORD *)(v141 + 56) = v145;
  *((_QWORD *)v12 + 49) = v143;
  v204 = 4;
  v146 = sub_1C06C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v205, &type metadata for LinkData, &v204, v22, &type metadata for LinkData, v146);
  v147 = v208;
  *((_OWORD *)v12 + 31) = v207;
  *((_OWORD *)v12 + 32) = v147;
  *((_OWORD *)v12 + 33) = v209;
  *((_QWORD *)v12 + 68) = v210;
  v148 = *(_OWORD *)v206;
  *((_OWORD *)v12 + 27) = *(_OWORD *)&v205[32];
  *((_OWORD *)v12 + 28) = v148;
  v149 = *(_OWORD *)&v206[32];
  *((_OWORD *)v12 + 29) = *(_OWORD *)&v206[16];
  *((_OWORD *)v12 + 30) = v149;
  v150 = *(_OWORD *)&v205[16];
  *((_OWORD *)v12 + 25) = *(_OWORD *)v205;
  *((_OWORD *)v12 + 26) = v150;
  v203 = 5;
  v151 = sub_1C028();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v197, &type metadata for PageData, &v203, v22, &type metadata for PageData, v151);
  v152 = v198;
  *(_OWORD *)(v141 + 232) = v197;
  *(_OWORD *)(v12 + 568) = v152;
  v203 = 6;
  v153 = sub_19F48();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for MediaData, &v203, v22, &type metadata for MediaData, v153);
  v154 = v199;
  v155 = v198;
  v156 = v190;
  *(_OWORD *)v190 = v197;
  *((_OWORD *)v156 + 1) = v155;
  *((_DWORD *)v12 + 154) = v154;
  v203 = 7;
  v157 = sub_2F26C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for UpSellData, &v203, v22, &type metadata for UpSellData, v157);
  v158 = v198;
  *((_OWORD *)v12 + 39) = v197;
  *((_QWORD *)v12 + 80) = v158;
  v203 = 8;
  v159 = sub_2F2B0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for OnDevicePersonalizationPropertyData, &v203, v22, &type metadata for OnDevicePersonalizationPropertyData, v159);
  v160 = v198;
  v161 = BYTE8(v198);
  *((_OWORD *)v190 + 4) = v197;
  *((_QWORD *)v12 + 83) = v160;
  v12[672] = v161;
  v203 = 9;
  v162 = sub_10EA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for SeriesData, &v203, v22, &type metadata for SeriesData, v162);
  v211 = 0;
  v163 = v198;
  v164 = v190;
  *((_OWORD *)v190 + 6) = v197;
  *((_OWORD *)v164 + 7) = v163;
  *((_OWORD *)v164 + 8) = v199;
  v203 = 10;
  v165 = sub_2F2F4();
  v166 = v211;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for SuggestionData, &v203, v195, &type metadata for SuggestionData, v165);
  v211 = v166;
  if (v166
    || (v12[728] = v197,
        v203 = 11,
        v167 = sub_573E4(),
        v168 = v211,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for ContentStoreData, &v203, v195, &type metadata for ContentStoreData, v167), (v211 = v168) != 0))
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v194, v195);
    v24 = 767;
    v23 = 1;
    goto LABEL_4;
  }
  v169 = v201;
  v170 = v202;
  v171 = v198;
  *((_OWORD *)v12 + 46) = v197;
  *((_OWORD *)v12 + 47) = v171;
  v172 = v200;
  *((_OWORD *)v12 + 48) = v199;
  *((_OWORD *)v12 + 49) = v172;
  v173 = v190;
  v190[220] = v170;
  *((_DWORD *)v173 + 54) = v169;
  v203 = 12;
  v174 = sub_8C03C();
  v175 = v211;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for GenreData, &v203, v195, &type metadata for GenreData, v174);
  v211 = v175;
  if (!v175)
  {
    v176 = v198;
    v177 = v190;
    *((_OWORD *)v190 + 14) = v197;
    *((_OWORD *)v177 + 15) = v176;
    *((_OWORD *)v177 + 16) = v199;
    v203 = 13;
    v178 = sub_370E4();
    v179 = v211;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v197, &type metadata for DealsData, &v203, v195, &type metadata for DealsData, v178);
    v211 = v179;
    if (v179
      || (v12[856] = v197,
          LOBYTE(v197) = 14,
          v180 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData), v181 = v211, KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v189, &v197, v195, v189, v180), (v211 = v181) != 0))
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v194, v195);
      sub_7DAC(v196);
      LODWORD(v186) = 0;
      v41 = 1;
      v184 = 1;
      v32 = 1;
      LODWORD(v192) = 1;
      LODWORD(v193) = 1;
      LODWORD(v194) = 1;
      LODWORD(v195) = 1;
      LODWORD(v196) = 1;
      v40 = 1;
      v35 = 1;
      v42 = &v206[36];
    }
    else
    {
      (*(void (**)(char *, _QWORD *, uint64_t))(v188 + 32))(&v12[*(int *)(v187 + 72)], v17, v189);
      LOBYTE(v197) = 15;
      v182 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
      v183 = v211;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v186, v192, &v197, v195, v192, v182);
      v211 = v183;
      if (!v183)
      {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v194, v195);
        (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(&v12[*(int *)(v187 + 76)], v186, v192);
        sub_A8744((uint64_t)v12, v20);
        sub_7DAC(v196);
        sub_A8788((uint64_t)v12);
        return;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v194, v195);
      sub_7DAC(v196);
      v41 = 1;
      v184 = 1;
      v32 = 1;
      LODWORD(v192) = 1;
      LODWORD(v193) = 1;
      LODWORD(v194) = 1;
      LODWORD(v195) = 1;
      LODWORD(v196) = 1;
      v40 = 1;
      v35 = 1;
      v185 = 1;
      v42 = &v206[40];
    }
LABEL_18:
    *((_DWORD *)v42 - 64) = v41;
    goto LABEL_19;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v194, v195);
  sub_7DAC(v196);
  v185 = 0;
  LODWORD(v186) = 0;
  v184 = 1;
  v32 = 1;
  LODWORD(v192) = 1;
  LODWORD(v193) = 1;
  LODWORD(v194) = 1;
  LODWORD(v195) = 1;
  LODWORD(v196) = 1;
  v40 = 1;
  v35 = 1;
LABEL_19:
  v43 = (BAEventReporter *)*((_QWORD *)v12 + 2);
  v44 = (BAEventReporter *)*((_QWORD *)v12 + 4);
  v45 = (BAEventReporter *)*((_QWORD *)v12 + 6);
  v46 = (BAEventReporter *)*((_QWORD *)v12 + 8);
  v47 = (BAEventReporter *)*((_QWORD *)v12 + 10);
  swift_bridgeObjectRelease(*((BAEventReporter **)v12 + 13), v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(v45, v48, v49, v50, v51, v52, v53, v54);
  swift_bridgeObjectRelease(v44, v55, v56, v57, v58, v59, v60, v61);
  swift_bridgeObjectRelease(v43, v62, v63, v64, v65, v66, v67, v68);
  swift_bridgeObjectRelease(v46, v69, v70, v71, v72, v73, v74, v75);
  swift_bridgeObjectRelease(v47, v76, v77, v78, v79, v80, v81, v82);
  v33 = (int)v186;
  v23 = v40;
  v34 = v185;
  if ((v184 & 1) == 0)
  {
LABEL_6:
    if (v32)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  v83 = (BAEventReporter *)*((_QWORD *)v12 + 15);
  v84 = (BAEventReporter *)*((_QWORD *)v12 + 18);
  v85 = (BAEventReporter *)*((_QWORD *)v12 + 25);
  swift_bridgeObjectRelease(*((BAEventReporter **)v12 + 20), v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(v84, v86, v87, v88, v89, v90, v91, v92);
  swift_bridgeObjectRelease(v83, v93, v94, v95, v96, v97, v98, v99);
  swift_bridgeObjectRelease(v85, v100, v101, v102, v103, v104, v105, v106);
  if ((v32 & 1) != 0)
  {
LABEL_7:
    sub_572A4(*((_QWORD *)v12 + 26), *((_QWORD *)v12 + 27), *((_QWORD *)v12 + 28), *((_QWORD *)v12 + 29), *((_QWORD *)v12 + 30), *((_QWORD *)v12 + 31), *((_QWORD *)v12 + 32), *((_QWORD *)v12 + 33), *((_QWORD *)v12 + 34), *((_QWORD *)v12 + 35), *((_QWORD *)v12 + 36), *((_QWORD *)v12 + 37), *((_QWORD *)v12 + 38), *((_QWORD *)v12 + 39));
    if ((v192 & 1) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  if (!(_DWORD)v192)
  {
LABEL_8:
    if ((_DWORD)v193)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  sub_A8708(*((_QWORD *)v12 + 41), *((_QWORD *)v12 + 42), *((_QWORD *)v12 + 43), *((_QWORD *)v12 + 44), *((_QWORD *)v12 + 45), *((_QWORD *)v12 + 46), *((_QWORD *)v12 + 47), *((_QWORD *)v12 + 48), *((_QWORD *)v12 + 49));
  if ((v193 & 1) != 0)
  {
LABEL_9:
    v36 = *((_OWORD *)v12 + 32);
    v207 = *((_OWORD *)v12 + 31);
    v208 = v36;
    v209 = *((_OWORD *)v12 + 33);
    v210 = *((_QWORD *)v12 + 68);
    v37 = *((_OWORD *)v12 + 28);
    *(_OWORD *)&v205[32] = *((_OWORD *)v12 + 27);
    *(_OWORD *)v206 = v37;
    v38 = *((_OWORD *)v12 + 30);
    *(_OWORD *)&v206[16] = *((_OWORD *)v12 + 29);
    *(_OWORD *)&v206[32] = v38;
    v39 = *((_OWORD *)v12 + 26);
    *(_OWORD *)v205 = *((_OWORD *)v12 + 25);
    *(_OWORD *)&v205[16] = v39;
    sub_2F180(v205);
    if ((v194 & 1) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  if (!(_DWORD)v194)
  {
LABEL_10:
    if ((_DWORD)v195)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v107 = (BAEventReporter *)*((_QWORD *)v12 + 70);
  swift_bridgeObjectRelease(*((BAEventReporter **)v12 + 72), v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(v107, v108, v109, v110, v111, v112, v113, v114);
  if ((v195 & 1) != 0)
  {
LABEL_11:
    sub_370B4(*((_QWORD *)v12 + 73), *((_QWORD *)v12 + 74), *((_QWORD *)v12 + 75), *((_QWORD *)v12 + 76));
    if ((v196 & 1) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  if (!(_DWORD)v196)
  {
LABEL_12:
    if (v23)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRelease(*((BAEventReporter **)v12 + 80), v25, v26, v27, v28, v29, v30, v31);
  if ((v23 & 1) != 0)
  {
LABEL_13:
    sub_17788(*((_QWORD *)v12 + 85), *((_QWORD *)v12 + 86), *((_QWORD *)v12 + 87), *((_QWORD *)v12 + 88), *((_QWORD *)v12 + 89), *((_QWORD *)v12 + 90));
    if ((v35 & 1) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  if (!v35)
  {
LABEL_14:
    if (v34)
      goto LABEL_15;
LABEL_29:
    if (!v33)
      return;
    goto LABEL_30;
  }
LABEL_28:
  sub_57314(*((_QWORD *)v12 + 92), *((_QWORD *)v12 + 93), *((_QWORD *)v12 + 94), *((_QWORD *)v12 + 95), *((_QWORD *)v12 + 96), *((_QWORD *)v12 + 97), *((_QWORD *)v12 + 98), *((_QWORD *)v12 + 99));
  if ((v34 & 1) == 0)
    goto LABEL_29;
LABEL_15:
  sub_57268(*((_QWORD *)v12 + 101), *((_QWORD *)v12 + 102), *((_QWORD *)v12 + 103), *((_QWORD *)v12 + 104), *((_QWORD *)v12 + 105), *((_QWORD *)v12 + 106));
  if ((v33 & 1) == 0)
    return;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v188 + 8))(&v12[*(int *)(v187 + 72)], v189);
}

uint64_t sub_A8708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t sub_A8744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_A8788(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContentExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_A87C4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ContentExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_A87D8(_QWORD *a1)
{
  return ContentExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_A87EC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295760, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29B170, (uint64_t)sub_A5878, a1);
}

uint64_t sub_A8810@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295768, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29B188, (uint64_t)sub_A58B8, a1);
}

uint64_t sub_A8834@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v9, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v4, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v9, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v9, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v9, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v9, v24);
  v25 = a2 + a1[14];
  v26 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v25, v9, v26);
  v27 = a2 + a1[15];
  v28 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v27, v9, v28);
  v29 = a2 + a1[16];
  v30 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v29, v9, v30);
  v31 = a2 + a1[17];
  v32 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v31, v9, v32);
  v33 = a2 + a1[18];
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v33, v4, v34);
  v35 = a2 + a1[19];
  v36 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v35, v4, v36);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContentExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v68 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v68 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v68);
  }
  else
  {
    v7 = sub_71B4(&qword_296A00);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2984D0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_297408);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_2969F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_296F70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[14];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = a3[15];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    v52 = a3[16];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    v55 = sub_71B4(&qword_29A200);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    v56 = a3[17];
    v57 = (char *)a1 + v56;
    v58 = (char *)a2 + v56;
    v59 = sub_71B4(&qword_297410);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    v60 = a3[18];
    v61 = (char *)a1 + v60;
    v62 = (char *)a2 + v60;
    v63 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
    v64 = a3[19];
    v65 = (char *)a1 + v64;
    v66 = (char *)a2 + v64;
    v67 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
  }
  return a1;
}

uint64_t destroy for ContentExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[14];
  v24 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = a1 + a2[15];
  v26 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = a1 + a2[16];
  v28 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  v29 = a1 + a2[17];
  v30 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  v31 = a1 + a2[18];
  v32 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  v33 = a1 + a2[19];
  v34 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
}

uint64_t initializeWithCopy for ContentExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  return a1;
}

uint64_t assignWithCopy for ContentExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 24))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  return a1;
}

uint64_t initializeWithTake for ContentExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
  return a1;
}

uint64_t assignWithTake for ContentExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A9DE0);
}

uint64_t sub_A9DE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296A00);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984D0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_297408);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296A10);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296A08);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_2969F0);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296F68);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_296F70);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_296310);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v22 = sub_71B4(&qword_296F78);
                      v12 = *(_QWORD *)(v22 - 8);
                      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                      {
                        v8 = v22;
                        v13 = a3[14];
                      }
                      else
                      {
                        v23 = sub_71B4(&qword_2984C8);
                        v12 = *(_QWORD *)(v23 - 8);
                        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                        {
                          v8 = v23;
                          v13 = a3[15];
                        }
                        else
                        {
                          v24 = sub_71B4(&qword_29A200);
                          v12 = *(_QWORD *)(v24 - 8);
                          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                          {
                            v8 = v24;
                            v13 = a3[16];
                          }
                          else
                          {
                            v25 = sub_71B4(&qword_297410);
                            v12 = *(_QWORD *)(v25 - 8);
                            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                            {
                              v8 = v25;
                              v13 = a3[17];
                            }
                            else
                            {
                              v26 = sub_71B4(&qword_295D70);
                              v12 = *(_QWORD *)(v26 - 8);
                              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                              {
                                v8 = v26;
                                v13 = a3[18];
                              }
                              else
                              {
                                v8 = sub_71B4(&qword_295D78);
                                v12 = *(_QWORD *)(v8 - 8);
                                v13 = a3[19];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ContentExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_AA098);
}

uint64_t sub_AA098(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = sub_71B4(&qword_296A00);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984D0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_297408);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296A10);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296A08);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_2969F0);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296F68);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_296F70);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_296310);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v24 = sub_71B4(&qword_296F78);
                      v14 = *(_QWORD *)(v24 - 8);
                      if (*(_DWORD *)(v14 + 84) == a3)
                      {
                        v10 = v24;
                        v15 = a4[14];
                      }
                      else
                      {
                        v25 = sub_71B4(&qword_2984C8);
                        v14 = *(_QWORD *)(v25 - 8);
                        if (*(_DWORD *)(v14 + 84) == a3)
                        {
                          v10 = v25;
                          v15 = a4[15];
                        }
                        else
                        {
                          v26 = sub_71B4(&qword_29A200);
                          v14 = *(_QWORD *)(v26 - 8);
                          if (*(_DWORD *)(v14 + 84) == a3)
                          {
                            v10 = v26;
                            v15 = a4[16];
                          }
                          else
                          {
                            v27 = sub_71B4(&qword_297410);
                            v14 = *(_QWORD *)(v27 - 8);
                            if (*(_DWORD *)(v14 + 84) == a3)
                            {
                              v10 = v27;
                              v15 = a4[17];
                            }
                            else
                            {
                              v28 = sub_71B4(&qword_295D70);
                              v14 = *(_QWORD *)(v28 - 8);
                              if (*(_DWORD *)(v14 + 84) == a3)
                              {
                                v10 = v28;
                                v15 = a4[18];
                              }
                              else
                              {
                                v10 = sub_71B4(&qword_295D78);
                                v14 = *(_QWORD *)(v10 - 8);
                                v15 = a4[19];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_AA34C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[16];

  sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
  if (v3 <= 0x3F)
  {
    v34[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v34[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2985D0, (uint64_t (*)(void))sub_57428, (uint64_t (*)(void))sub_56960, (uint64_t)&type metadata for ContentExposureData);
      if (v7 <= 0x3F)
      {
        v34[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_2974A8, (uint64_t (*)(void))sub_211FC, (uint64_t (*)(void))sub_21244, (uint64_t)&type metadata for FlowcaseData);
        if (v9 <= 0x3F)
        {
          v34[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
          if (v11 <= 0x3F)
          {
            v34[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
            if (v13 <= 0x3F)
            {
              v34[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, &qword_296AE8, (uint64_t (*)(void))sub_19F48, (uint64_t (*)(void))sub_19F90, (uint64_t)&type metadata for MediaData);
              if (v15 <= 0x3F)
              {
                v34[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
                if (v17 <= 0x3F)
                {
                  v34[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_B9C8(319, &qword_297058, (uint64_t (*)(void))sub_2F2B0, (uint64_t (*)(void))sub_2E728, (uint64_t)&type metadata for OnDevicePersonalizationPropertyData);
                  if (v19 <= 0x3F)
                  {
                    v34[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                    if (v21 <= 0x3F)
                    {
                      v34[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
                      if (v23 <= 0x3F)
                      {
                        v34[10] = *(_QWORD *)(v22 - 8) + 64;
                        sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
                        if (v25 <= 0x3F)
                        {
                          v34[11] = *(_QWORD *)(v24 - 8) + 64;
                          sub_B9C8(319, (unint64_t *)&unk_29A2E0, (uint64_t (*)(void))sub_8C03C, (uint64_t (*)(void))sub_8B9C0, (uint64_t)&type metadata for GenreData);
                          if (v27 <= 0x3F)
                          {
                            v34[12] = *(_QWORD *)(v26 - 8) + 64;
                            sub_B9C8(319, (unint64_t *)&unk_2974B0, (uint64_t (*)(void))sub_370E4, (uint64_t (*)(void))sub_36760, (uint64_t)&type metadata for DealsData);
                            if (v29 <= 0x3F)
                            {
                              v34[13] = *(_QWORD *)(v28 - 8) + 64;
                              sub_8734(319);
                              if (v31 <= 0x3F)
                              {
                                v34[14] = *(_QWORD *)(v30 - 8) + 64;
                                sub_87D8(319);
                                if (v33 <= 0x3F)
                                {
                                  v34[15] = *(_QWORD *)(v32 - 8) + 64;
                                  swift_initStructMetadata(a1, 256, 16, v34, a1 + 16);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ContentExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v23);
    return v4;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
  v6 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v6;
  v65 = a2[4];
  *(_QWORD *)(v4 + 24) = a2[3];
  *(_QWORD *)(v4 + 32) = v65;
  v7 = a2[6];
  *(_QWORD *)(v4 + 40) = a2[5];
  *(_QWORD *)(v4 + 48) = v7;
  v8 = a2[8];
  *(_QWORD *)(v4 + 56) = a2[7];
  *(_QWORD *)(v4 + 64) = v8;
  v9 = a2[10];
  *(_QWORD *)(v4 + 72) = a2[9];
  *(_QWORD *)(v4 + 80) = v9;
  *(_DWORD *)(v4 + 88) = *((_DWORD *)a2 + 22);
  *(_BYTE *)(v4 + 92) = *((_BYTE *)a2 + 92);
  v10 = a2[13];
  *(_QWORD *)(v4 + 96) = a2[12];
  *(_QWORD *)(v4 + 104) = v10;
  v11 = a2[15];
  *(_QWORD *)(v4 + 112) = a2[14];
  *(_QWORD *)(v4 + 120) = v11;
  *(_BYTE *)(v4 + 128) = *((_BYTE *)a2 + 128);
  v12 = a2[18];
  *(_QWORD *)(v4 + 136) = a2[17];
  *(_QWORD *)(v4 + 144) = v12;
  v13 = a2[20];
  *(_QWORD *)(v4 + 152) = a2[19];
  *(_QWORD *)(v4 + 160) = v13;
  *(_WORD *)(v4 + 168) = *((_WORD *)a2 + 84);
  *(_BYTE *)(v4 + 176) = *((_BYTE *)a2 + 176);
  *(_DWORD *)(v4 + 172) = *((_DWORD *)a2 + 43);
  *(_BYTE *)(v4 + 184) = *((_BYTE *)a2 + 184);
  *(_DWORD *)(v4 + 180) = *((_DWORD *)a2 + 45);
  *(_DWORD *)(v4 + 185) = *(_DWORD *)((char *)a2 + 185);
  *(_BYTE *)(v4 + 189) = *((_BYTE *)a2 + 189);
  v14 = a2[25];
  *(_QWORD *)(v4 + 192) = a2[24];
  *(_QWORD *)(v4 + 200) = v14;
  v63 = a2[27];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (!v63)
  {
    v24 = *((_OWORD *)a2 + 18);
    *(_OWORD *)(v4 + 272) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(v4 + 288) = v24;
    *(_OWORD *)(v4 + 304) = *((_OWORD *)a2 + 19);
    *(_QWORD *)(v4 + 318) = *(uint64_t *)((char *)a2 + 318);
    v25 = *((_OWORD *)a2 + 14);
    *(_OWORD *)(v4 + 208) = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v4 + 224) = v25;
    v26 = *((_OWORD *)a2 + 16);
    *(_OWORD *)(v4 + 240) = *((_OWORD *)a2 + 15);
    *(_OWORD *)(v4 + 256) = v26;
    v20 = a2[42];
    if (v20)
      goto LABEL_4;
LABEL_7:
    v27 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(v4 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(v4 + 376) = v27;
    *(_QWORD *)(v4 + 392) = a2[49];
    v28 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(v4 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(v4 + 344) = v28;
    goto LABEL_8;
  }
  *(_QWORD *)(v4 + 208) = a2[26];
  *(_QWORD *)(v4 + 216) = v63;
  v15 = a2[29];
  *(_QWORD *)(v4 + 224) = a2[28];
  *(_QWORD *)(v4 + 232) = v15;
  v16 = a2[31];
  *(_QWORD *)(v4 + 240) = a2[30];
  *(_QWORD *)(v4 + 248) = v16;
  v17 = a2[33];
  *(_QWORD *)(v4 + 256) = a2[32];
  *(_QWORD *)(v4 + 264) = v17;
  v18 = a2[35];
  *(_QWORD *)(v4 + 272) = a2[34];
  *(_QWORD *)(v4 + 280) = v18;
  *(_DWORD *)(v4 + 288) = *((_DWORD *)a2 + 72);
  *(_BYTE *)(v4 + 292) = *((_BYTE *)a2 + 292);
  *(_DWORD *)(v4 + 296) = *((_DWORD *)a2 + 74);
  *(_BYTE *)(v4 + 300) = *((_BYTE *)a2 + 300);
  v19 = a2[39];
  *(_QWORD *)(v4 + 304) = a2[38];
  *(_QWORD *)(v4 + 312) = v19;
  *(_DWORD *)(v4 + 320) = *((_DWORD *)a2 + 80);
  *(_WORD *)(v4 + 324) = *((_WORD *)a2 + 162);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v20 = a2[42];
  if (!v20)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)(v4 + 328) = a2[41];
  *(_QWORD *)(v4 + 336) = v20;
  *(_DWORD *)(v4 + 344) = *((_DWORD *)a2 + 86);
  v21 = a2[45];
  *(_QWORD *)(v4 + 352) = a2[44];
  *(_QWORD *)(v4 + 360) = v21;
  *(_QWORD *)(v4 + 368) = a2[46];
  *(_BYTE *)(v4 + 376) = *((_BYTE *)a2 + 376);
  v22 = a2[49];
  *(_QWORD *)(v4 + 384) = a2[48];
  *(_QWORD *)(v4 + 392) = v22;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
LABEL_8:
  v29 = a2[51];
  *(_QWORD *)(v4 + 400) = a2[50];
  *(_QWORD *)(v4 + 408) = v29;
  v66 = a2[53];
  *(_QWORD *)(v4 + 416) = a2[52];
  *(_QWORD *)(v4 + 424) = v66;
  v64 = a2[55];
  *(_QWORD *)(v4 + 432) = a2[54];
  *(_QWORD *)(v4 + 440) = v64;
  *(_BYTE *)(v4 + 448) = *((_BYTE *)a2 + 448);
  v30 = a2[58];
  *(_QWORD *)(v4 + 456) = a2[57];
  *(_QWORD *)(v4 + 464) = v30;
  v31 = a2[60];
  *(_QWORD *)(v4 + 472) = a2[59];
  *(_QWORD *)(v4 + 480) = v31;
  v32 = a2[62];
  *(_QWORD *)(v4 + 488) = a2[61];
  *(_QWORD *)(v4 + 496) = v32;
  v33 = a2[64];
  *(_QWORD *)(v4 + 504) = a2[63];
  *(_QWORD *)(v4 + 512) = v33;
  *(_QWORD *)(v4 + 520) = a2[65];
  v34 = a2[66];
  *(_QWORD *)(v4 + 528) = v34;
  *(_QWORD *)(v4 + 536) = a2[67];
  v35 = a2[68];
  *(_QWORD *)(v4 + 544) = v35;
  *(_QWORD *)(v4 + 552) = a2[69];
  v36 = a2[70];
  *(_QWORD *)(v4 + 560) = v36;
  *(_QWORD *)(v4 + 568) = a2[71];
  v37 = a2[72];
  *(_QWORD *)(v4 + 576) = v37;
  v62 = a2[74];
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  if (v62)
  {
    *(_QWORD *)(v4 + 584) = a2[73];
    *(_QWORD *)(v4 + 592) = v62;
    *(_QWORD *)(v4 + 600) = a2[75];
    v38 = a2[76];
    *(_QWORD *)(v4 + 608) = v38;
    *(_DWORD *)(v4 + 616) = *((_DWORD *)a2 + 154);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v38);
  }
  else
  {
    v39 = *(_OWORD *)(a2 + 75);
    *(_OWORD *)(v4 + 584) = *(_OWORD *)(a2 + 73);
    *(_OWORD *)(v4 + 600) = v39;
    *(_DWORD *)(v4 + 616) = *((_DWORD *)a2 + 154);
  }
  *(_WORD *)(v4 + 624) = *((_WORD *)a2 + 312);
  *(_QWORD *)(v4 + 632) = a2[79];
  v40 = a2[80];
  *(_QWORD *)(v4 + 640) = v40;
  *(_OWORD *)(v4 + 648) = *(_OWORD *)(a2 + 81);
  *(_OWORD *)(v4 + 657) = *(_OWORD *)((char *)a2 + 657);
  v41 = a2[90];
  swift_bridgeObjectRetain(v40);
  if (v41 == 1)
  {
    v42 = *(_OWORD *)(a2 + 87);
    *(_OWORD *)(v4 + 680) = *(_OWORD *)(a2 + 85);
    *(_OWORD *)(v4 + 696) = v42;
    *(_OWORD *)(v4 + 712) = *(_OWORD *)(a2 + 89);
  }
  else
  {
    *(_QWORD *)(v4 + 680) = a2[85];
    *(_BYTE *)(v4 + 688) = *((_BYTE *)a2 + 688);
    *(_QWORD *)(v4 + 696) = a2[87];
    *(_BYTE *)(v4 + 704) = *((_BYTE *)a2 + 704);
    *(_WORD *)(v4 + 705) = *(_WORD *)((char *)a2 + 705);
    *(_QWORD *)(v4 + 712) = a2[89];
    *(_QWORD *)(v4 + 720) = v41;
    swift_bridgeObjectRetain(v41);
  }
  *(_BYTE *)(v4 + 728) = *((_BYTE *)a2 + 728);
  v43 = a2[97];
  if (v43)
  {
    *(_QWORD *)(v4 + 736) = a2[92];
    v44 = a2[93];
    *(_QWORD *)(v4 + 744) = v44;
    *(_QWORD *)(v4 + 752) = a2[94];
    v45 = a2[95];
    *(_QWORD *)(v4 + 760) = v45;
    *(_QWORD *)(v4 + 768) = a2[96];
    *(_QWORD *)(v4 + 776) = v43;
    *(_QWORD *)(v4 + 784) = a2[98];
    v46 = a2[99];
    *(_QWORD *)(v4 + 792) = v46;
    *(_DWORD *)(v4 + 800) = *((_DWORD *)a2 + 200);
    *(_BYTE *)(v4 + 804) = *((_BYTE *)a2 + 804);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v46);
  }
  else
  {
    v47 = *((_OWORD *)a2 + 49);
    *(_OWORD *)(v4 + 768) = *((_OWORD *)a2 + 48);
    *(_OWORD *)(v4 + 784) = v47;
    *(_QWORD *)(v4 + 797) = *(uint64_t *)((char *)a2 + 797);
    v48 = *((_OWORD *)a2 + 47);
    *(_OWORD *)(v4 + 736) = *((_OWORD *)a2 + 46);
    *(_OWORD *)(v4 + 752) = v48;
  }
  v49 = a2[102];
  if (v49)
  {
    *(_QWORD *)(v4 + 808) = a2[101];
    *(_QWORD *)(v4 + 816) = v49;
    *(_QWORD *)(v4 + 824) = a2[103];
    v50 = a2[104];
    *(_QWORD *)(v4 + 832) = v50;
    *(_QWORD *)(v4 + 840) = a2[105];
    v51 = a2[106];
    *(_QWORD *)(v4 + 848) = v51;
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v51);
  }
  else
  {
    v52 = *(_OWORD *)(a2 + 103);
    *(_OWORD *)(v4 + 808) = *(_OWORD *)(a2 + 101);
    *(_OWORD *)(v4 + 824) = v52;
    *(_OWORD *)(v4 + 840) = *(_OWORD *)(a2 + 105);
  }
  *(_BYTE *)(v4 + 856) = *((_BYTE *)a2 + 856);
  v53 = *(int *)(a3 + 72);
  v54 = v4 + v53;
  v55 = (uint64_t)a2 + v53;
  v56 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
  v57 = *(int *)(a3 + 76);
  v58 = v4 + v57;
  v59 = (uint64_t)a2 + v57;
  v60 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
  return v4;
}

uint64_t destroy for ContentExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[25]);
  v4 = a1[27];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[33]);
    swift_bridgeObjectRelease(a1[35]);
    swift_bridgeObjectRelease(a1[39]);
  }
  v5 = a1[42];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[45]);
    swift_bridgeObjectRelease(a1[49]);
  }
  swift_bridgeObjectRelease(a1[51]);
  swift_bridgeObjectRelease(a1[53]);
  swift_bridgeObjectRelease(a1[55]);
  swift_bridgeObjectRelease(a1[58]);
  swift_bridgeObjectRelease(a1[60]);
  swift_bridgeObjectRelease(a1[62]);
  swift_bridgeObjectRelease(a1[64]);
  swift_bridgeObjectRelease(a1[66]);
  swift_bridgeObjectRelease(a1[68]);
  swift_bridgeObjectRelease(a1[70]);
  swift_bridgeObjectRelease(a1[72]);
  v6 = a1[74];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[76]);
  }
  swift_bridgeObjectRelease(a1[80]);
  v7 = a1[90];
  if (v7 != 1)
    swift_bridgeObjectRelease(v7);
  v8 = a1[97];
  if (v8)
  {
    swift_bridgeObjectRelease(a1[93]);
    v9 = a1[95];
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a1[99]);
  }
  v10 = a1[102];
  if (v10)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(a1[104]);
    swift_bridgeObjectRelease(a1[106]);
  }
  v11 = (char *)a1 + *(int *)(a2 + 72);
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (char *)a1 + *(int *)(a2 + 76);
  v14 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for ContentExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v63 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v63;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v12;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 185) = *(_DWORD *)(a2 + 185);
  *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
  v13 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v13;
  v61 = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  if (v61)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v61;
    v14 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = v14;
    v15 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = v15;
    v16 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = v16;
    v17 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = v17;
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
    *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
    *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
    v18 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = v18;
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
    *(_WORD *)(a1 + 324) = *(_WORD *)(a2 + 324);
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    v19 = *(_QWORD *)(a2 + 336);
    if (v19)
    {
LABEL_3:
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v19;
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
      v20 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = v20;
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
      v21 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = v21;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      goto LABEL_6;
    }
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v22;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 318) = *(_QWORD *)(a2 + 318);
    v23 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v23;
    v24 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v24;
    v19 = *(_QWORD *)(a2 + 336);
    if (v19)
      goto LABEL_3;
  }
  v25 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v25;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v26 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v26;
LABEL_6:
  v27 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v27;
  v64 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v64;
  v62 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v62;
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  v28 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v28;
  v29 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v29;
  v30 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v30;
  v31 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v31;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v32 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 528) = v32;
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v33 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 544) = v33;
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v34 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 560) = v34;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  v35 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v35;
  v60 = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  if (v60)
  {
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    *(_QWORD *)(a1 + 592) = v60;
    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
    v36 = *(_QWORD *)(a2 + 608);
    *(_QWORD *)(a1 + 608) = v36;
    *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v36);
  }
  else
  {
    v37 = *(_OWORD *)(a2 + 600);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 600) = v37;
    *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
  }
  *(_WORD *)(a1 + 624) = *(_WORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  v38 = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 640) = v38;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 657) = *(_OWORD *)(a2 + 657);
  v39 = *(_QWORD *)(a2 + 720);
  swift_bridgeObjectRetain(v38);
  if (v39 == 1)
  {
    v40 = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
    *(_OWORD *)(a1 + 696) = v40;
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  }
  else
  {
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    *(_BYTE *)(a1 + 688) = *(_BYTE *)(a2 + 688);
    *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
    *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
    *(_WORD *)(a1 + 705) = *(_WORD *)(a2 + 705);
    *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
    *(_QWORD *)(a1 + 720) = v39;
    swift_bridgeObjectRetain(v39);
  }
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  v41 = *(_QWORD *)(a2 + 776);
  if (!v41)
  {
    v48 = *(_OWORD *)(a2 + 784);
    *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
    *(_OWORD *)(a1 + 784) = v48;
    *(_QWORD *)(a1 + 797) = *(_QWORD *)(a2 + 797);
    v49 = *(_OWORD *)(a2 + 752);
    *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
    *(_OWORD *)(a1 + 752) = v49;
    v45 = *(_QWORD *)(a2 + 816);
    if (v45)
      goto LABEL_14;
LABEL_16:
    v50 = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 824) = v50;
    *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  v42 = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 744) = v42;
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  v43 = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 760) = v43;
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 776) = v41;
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  v44 = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 792) = v44;
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
  *(_BYTE *)(a1 + 804) = *(_BYTE *)(a2 + 804);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v44);
  v45 = *(_QWORD *)(a2 + 816);
  if (!v45)
    goto LABEL_16;
LABEL_14:
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a1 + 816) = v45;
  *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
  v46 = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a1 + 832) = v46;
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  v47 = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 848) = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
LABEL_17:
  *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
  v51 = *(int *)(a3 + 72);
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  v55 = *(int *)(a3 + 76);
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
  return a1;
}

uint64_t assignWithCopy for ContentExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  uint64_t v42;
  BAEventReporter *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  int v51;
  uint64_t v52;
  BAEventReporter *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  int64_t v58;
  int64_t v59;
  id v60;
  uint64_t v61;
  BAEventReporter *v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  uint64_t v70;
  BAEventReporter *v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  uint64_t v79;
  BAEventReporter *v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  int64_t v85;
  int64_t v86;
  id v87;
  int v88;
  int v89;
  uint64_t v90;
  BAEventReporter *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  int64_t v96;
  int64_t v97;
  id v98;
  _OWORD *v99;
  __int128 *v100;
  BAEventReporter *v101;
  uint64_t v102;
  uint64_t v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  int64_t v108;
  int64_t v109;
  id v110;
  uint64_t v111;
  BAEventReporter *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  int64_t v117;
  int64_t v118;
  id v119;
  uint64_t v120;
  BAEventReporter *v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  int64_t v126;
  int64_t v127;
  id v128;
  uint64_t v129;
  BAEventReporter *v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  int64_t v135;
  int64_t v136;
  id v137;
  uint64_t v138;
  BAEventReporter *v139;
  SEL v140;
  id v141;
  id v142;
  id v143;
  int64_t v144;
  int64_t v145;
  id v146;
  int v147;
  int v148;
  uint64_t v149;
  BAEventReporter *v150;
  SEL v151;
  id v152;
  id v153;
  id v154;
  int64_t v155;
  int64_t v156;
  id v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _OWORD *v180;
  _OWORD *v181;
  BAEventReporter *v182;
  uint64_t v183;
  uint64_t v184;
  SEL v185;
  id v186;
  id v187;
  id v188;
  int64_t v189;
  int64_t v190;
  id v191;
  uint64_t v192;
  BAEventReporter *v193;
  SEL v194;
  id v195;
  id v196;
  id v197;
  int64_t v198;
  int64_t v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  BAEventReporter *v203;
  SEL v204;
  id v205;
  id v206;
  id v207;
  int64_t v208;
  int64_t v209;
  id v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  BAEventReporter *v222;
  SEL v223;
  id v224;
  id v225;
  id v226;
  int64_t v227;
  int64_t v228;
  id v229;
  uint64_t v230;
  BAEventReporter *v231;
  SEL v232;
  id v233;
  id v234;
  id v235;
  int64_t v236;
  int64_t v237;
  id v238;
  uint64_t v239;
  BAEventReporter *v240;
  SEL v241;
  id v242;
  id v243;
  id v244;
  int64_t v245;
  int64_t v246;
  id v247;
  uint64_t v248;
  BAEventReporter *v249;
  SEL v250;
  id v251;
  id v252;
  id v253;
  int64_t v254;
  int64_t v255;
  id v256;
  uint64_t v257;
  BAEventReporter *v258;
  SEL v259;
  id v260;
  id v261;
  id v262;
  int64_t v263;
  int64_t v264;
  id v265;
  uint64_t v266;
  BAEventReporter *v267;
  SEL v268;
  id v269;
  id v270;
  id v271;
  int64_t v272;
  int64_t v273;
  id v274;
  uint64_t v275;
  BAEventReporter *v276;
  SEL v277;
  id v278;
  id v279;
  id v280;
  int64_t v281;
  int64_t v282;
  id v283;
  uint64_t v284;
  BAEventReporter *v285;
  SEL v286;
  id v287;
  id v288;
  id v289;
  int64_t v290;
  int64_t v291;
  id v292;
  uint64_t v293;
  BAEventReporter *v294;
  SEL v295;
  id v296;
  id v297;
  id v298;
  int64_t v299;
  int64_t v300;
  id v301;
  uint64_t v302;
  BAEventReporter *v303;
  SEL v304;
  id v305;
  id v306;
  id v307;
  int64_t v308;
  int64_t v309;
  id v310;
  uint64_t v311;
  BAEventReporter *v312;
  SEL v313;
  id v314;
  id v315;
  id v316;
  int64_t v317;
  int64_t v318;
  id v319;
  _OWORD *v320;
  _OWORD *v321;
  BAEventReporter *v322;
  uint64_t v323;
  uint64_t v324;
  SEL v325;
  id v326;
  id v327;
  id v328;
  int64_t v329;
  int64_t v330;
  id v331;
  uint64_t v332;
  BAEventReporter *v333;
  SEL v334;
  id v335;
  id v336;
  id v337;
  int64_t v338;
  int64_t v339;
  id v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  BAEventReporter *v348;
  SEL v349;
  id v350;
  id v351;
  id v352;
  int64_t v353;
  int64_t v354;
  id v355;
  __int128 v356;
  __int128 *v357;
  __int128 *v358;
  BAEventReporter *v359;
  uint64_t v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v366;
  SEL v367;
  id v368;
  id v369;
  id v370;
  int64_t v371;
  int64_t v372;
  id v373;
  _OWORD *v374;
  _OWORD *v375;
  uint64_t v376;
  uint64_t v377;
  BAEventReporter *v378;
  SEL v379;
  id v380;
  id v381;
  id v382;
  int64_t v383;
  int64_t v384;
  id v385;
  uint64_t v386;
  BAEventReporter *v387;
  SEL v388;
  id v389;
  id v390;
  id v391;
  int64_t v392;
  int64_t v393;
  id v394;
  uint64_t v395;
  BAEventReporter *v396;
  SEL v397;
  id v398;
  id v399;
  id v400;
  int64_t v401;
  int64_t v402;
  id v403;
  uint64_t v404;
  BAEventReporter *v405;
  SEL v406;
  id v407;
  id v408;
  id v409;
  int64_t v410;
  int64_t v411;
  id v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  _OWORD *v425;
  _OWORD *v426;
  BAEventReporter *v427;
  uint64_t v428;
  uint64_t v429;
  SEL v430;
  id v431;
  id v432;
  id v433;
  int64_t v434;
  int64_t v435;
  id v436;
  uint64_t v437;
  BAEventReporter *v438;
  SEL v439;
  id v440;
  id v441;
  id v442;
  int64_t v443;
  int64_t v444;
  id v445;
  uint64_t v446;
  BAEventReporter *v447;
  SEL v448;
  id v449;
  id v450;
  id v451;
  int64_t v452;
  int64_t v453;
  id v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(BAEventReporter **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  v51 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v51;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v52 = *(_QWORD *)(a2 + 104);
  v53 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v61 = *(_QWORD *)(a2 + 120);
  v62 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v70 = *(_QWORD *)(a2 + 144);
  v71 = *(BAEventReporter **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v79 = *(_QWORD *)(a2 + 160);
  v80 = *(BAEventReporter **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  v88 = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = v88;
  v89 = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = v89;
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v90 = *(_QWORD *)(a2 + 200);
  v91 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v90;
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
  v99 = (_OWORD *)(a1 + 208);
  v100 = (__int128 *)(a2 + 208);
  v101 = *(BAEventReporter **)(a1 + 216);
  v102 = *(_QWORD *)(a2 + 216);
  if (v101)
  {
    if (v102)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v103 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v103;
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRelease(v101, v104, v105, v106, v107, v108, v109, v110);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v111 = *(_QWORD *)(a2 + 232);
      v112 = *(BAEventReporter **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v111;
      swift_bridgeObjectRetain(v111);
      swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v120 = *(_QWORD *)(a2 + 248);
      v121 = *(BAEventReporter **)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v120;
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRelease(v121, v122, v123, v124, v125, v126, v127, v128);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      v129 = *(_QWORD *)(a2 + 264);
      v130 = *(BAEventReporter **)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v129;
      swift_bridgeObjectRetain(v129);
      swift_bridgeObjectRelease(v130, v131, v132, v133, v134, v135, v136, v137);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      v138 = *(_QWORD *)(a2 + 280);
      v139 = *(BAEventReporter **)(a1 + 280);
      *(_QWORD *)(a1 + 280) = v138;
      swift_bridgeObjectRetain(v138);
      swift_bridgeObjectRelease(v139, v140, v141, v142, v143, v144, v145, v146);
      v147 = *(_DWORD *)(a2 + 288);
      *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
      *(_DWORD *)(a1 + 288) = v147;
      v148 = *(_DWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
      *(_DWORD *)(a1 + 296) = v148;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      v149 = *(_QWORD *)(a2 + 312);
      v150 = *(BAEventReporter **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v149;
      swift_bridgeObjectRetain(v149);
      swift_bridgeObjectRelease(v150, v151, v152, v153, v154, v155, v156, v157);
      v158 = *(_DWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
      *(_DWORD *)(a1 + 320) = v158;
      *(_BYTE *)(a1 + 325) = *(_BYTE *)(a2 + 325);
    }
    else
    {
      sub_59D74((_QWORD *)(a1 + 208));
      v168 = *(_OWORD *)(a2 + 256);
      v170 = *v100;
      v169 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = v168;
      *v99 = v170;
      *(_OWORD *)(a1 + 224) = v169;
      v172 = *(_OWORD *)(a2 + 288);
      v171 = *(_OWORD *)(a2 + 304);
      v173 = *(_OWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 318) = *(_QWORD *)(a2 + 318);
      *(_OWORD *)(a1 + 288) = v172;
      *(_OWORD *)(a1 + 304) = v171;
      *(_OWORD *)(a1 + 272) = v173;
    }
  }
  else if (v102)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v159 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v159;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v160 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v160;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v161 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v161;
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v162 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 264) = v162;
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    v163 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 280) = v163;
    v164 = *(_DWORD *)(a2 + 288);
    *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
    *(_DWORD *)(a1 + 288) = v164;
    v165 = *(_DWORD *)(a2 + 296);
    *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
    *(_DWORD *)(a1 + 296) = v165;
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    v166 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 312) = v166;
    v167 = *(_DWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
    *(_DWORD *)(a1 + 320) = v167;
    *(_BYTE *)(a1 + 325) = *(_BYTE *)(a2 + 325);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v160);
    swift_bridgeObjectRetain(v161);
    swift_bridgeObjectRetain(v162);
    swift_bridgeObjectRetain(v163);
    swift_bridgeObjectRetain(v166);
  }
  else
  {
    v174 = *v100;
    v175 = *(_OWORD *)(a2 + 224);
    v176 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v176;
    *v99 = v174;
    *(_OWORD *)(a1 + 224) = v175;
    v177 = *(_OWORD *)(a2 + 272);
    v178 = *(_OWORD *)(a2 + 288);
    v179 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 318) = *(_QWORD *)(a2 + 318);
    *(_OWORD *)(a1 + 288) = v178;
    *(_OWORD *)(a1 + 304) = v179;
    *(_OWORD *)(a1 + 272) = v177;
  }
  v180 = (_OWORD *)(a1 + 328);
  v181 = (_OWORD *)(a2 + 328);
  v182 = *(BAEventReporter **)(a1 + 336);
  v183 = *(_QWORD *)(a2 + 336);
  if (v182)
  {
    if (v183)
    {
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      v184 = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 336) = v184;
      swift_bridgeObjectRetain(v184);
      swift_bridgeObjectRelease(v182, v185, v186, v187, v188, v189, v190, v191);
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      v192 = *(_QWORD *)(a2 + 360);
      v193 = *(BAEventReporter **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = v192;
      swift_bridgeObjectRetain(v192);
      swift_bridgeObjectRelease(v193, v194, v195, v196, v197, v198, v199, v200);
      v201 = *(_QWORD *)(a2 + 368);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = v201;
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      v202 = *(_QWORD *)(a2 + 392);
      v203 = *(BAEventReporter **)(a1 + 392);
      *(_QWORD *)(a1 + 392) = v202;
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRelease(v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else
    {
      sub_AC048((_QWORD *)(a1 + 328));
      *v180 = *v181;
      v216 = *(_OWORD *)(a2 + 360);
      v215 = *(_OWORD *)(a2 + 376);
      v217 = *(_OWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v216;
      *(_OWORD *)(a1 + 376) = v215;
      *(_OWORD *)(a1 + 344) = v217;
    }
  }
  else if (v183)
  {
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    v211 = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 336) = v211;
    *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    v212 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 360) = v212;
    v213 = *(_QWORD *)(a2 + 368);
    *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = v213;
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    v214 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 392) = v214;
    swift_bridgeObjectRetain(v211);
    swift_bridgeObjectRetain(v212);
    swift_bridgeObjectRetain(v214);
  }
  else
  {
    *v180 = *v181;
    v218 = *(_OWORD *)(a2 + 344);
    v219 = *(_OWORD *)(a2 + 360);
    v220 = *(_OWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v219;
    *(_OWORD *)(a1 + 376) = v220;
    *(_OWORD *)(a1 + 344) = v218;
  }
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v221 = *(_QWORD *)(a2 + 408);
  v222 = *(BAEventReporter **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v221;
  swift_bridgeObjectRetain(v221);
  swift_bridgeObjectRelease(v222, v223, v224, v225, v226, v227, v228, v229);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  v230 = *(_QWORD *)(a2 + 424);
  v231 = *(BAEventReporter **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v230;
  swift_bridgeObjectRetain(v230);
  swift_bridgeObjectRelease(v231, v232, v233, v234, v235, v236, v237, v238);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  v239 = *(_QWORD *)(a2 + 440);
  v240 = *(BAEventReporter **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v239;
  swift_bridgeObjectRetain(v239);
  swift_bridgeObjectRelease(v240, v241, v242, v243, v244, v245, v246, v247);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  v248 = *(_QWORD *)(a2 + 464);
  v249 = *(BAEventReporter **)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v248;
  swift_bridgeObjectRetain(v248);
  swift_bridgeObjectRelease(v249, v250, v251, v252, v253, v254, v255, v256);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  v257 = *(_QWORD *)(a2 + 480);
  v258 = *(BAEventReporter **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v257;
  swift_bridgeObjectRetain(v257);
  swift_bridgeObjectRelease(v258, v259, v260, v261, v262, v263, v264, v265);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  v266 = *(_QWORD *)(a2 + 496);
  v267 = *(BAEventReporter **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v266;
  swift_bridgeObjectRetain(v266);
  swift_bridgeObjectRelease(v267, v268, v269, v270, v271, v272, v273, v274);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v275 = *(_QWORD *)(a2 + 512);
  v276 = *(BAEventReporter **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v275;
  swift_bridgeObjectRetain(v275);
  swift_bridgeObjectRelease(v276, v277, v278, v279, v280, v281, v282, v283);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v284 = *(_QWORD *)(a2 + 528);
  v285 = *(BAEventReporter **)(a1 + 528);
  *(_QWORD *)(a1 + 528) = v284;
  swift_bridgeObjectRetain(v284);
  swift_bridgeObjectRelease(v285, v286, v287, v288, v289, v290, v291, v292);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v293 = *(_QWORD *)(a2 + 544);
  v294 = *(BAEventReporter **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v293;
  swift_bridgeObjectRetain(v293);
  swift_bridgeObjectRelease(v294, v295, v296, v297, v298, v299, v300, v301);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v302 = *(_QWORD *)(a2 + 560);
  v303 = *(BAEventReporter **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v302;
  swift_bridgeObjectRetain(v302);
  swift_bridgeObjectRelease(v303, v304, v305, v306, v307, v308, v309, v310);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  v311 = *(_QWORD *)(a2 + 576);
  v312 = *(BAEventReporter **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v311;
  swift_bridgeObjectRetain(v311);
  swift_bridgeObjectRelease(v312, v313, v314, v315, v316, v317, v318, v319);
  v320 = (_OWORD *)(a1 + 584);
  v321 = (_OWORD *)(a2 + 584);
  v322 = *(BAEventReporter **)(a1 + 592);
  v323 = *(_QWORD *)(a2 + 592);
  if (v322)
  {
    if (v323)
    {
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      v324 = *(_QWORD *)(a2 + 592);
      *(_QWORD *)(a1 + 592) = v324;
      swift_bridgeObjectRetain(v324);
      swift_bridgeObjectRelease(v322, v325, v326, v327, v328, v329, v330, v331);
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
      v332 = *(_QWORD *)(a2 + 608);
      v333 = *(BAEventReporter **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = v332;
      swift_bridgeObjectRetain(v332);
      swift_bridgeObjectRelease(v333, v334, v335, v336, v337, v338, v339, v340);
      *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
    }
    else
    {
      sub_39158(a1 + 584);
      v343 = *(_DWORD *)(a2 + 616);
      v344 = *(_OWORD *)(a2 + 600);
      *v320 = *v321;
      *(_OWORD *)(a1 + 600) = v344;
      *(_DWORD *)(a1 + 616) = v343;
    }
  }
  else if (v323)
  {
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    v341 = *(_QWORD *)(a2 + 592);
    *(_QWORD *)(a1 + 592) = v341;
    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
    v342 = *(_QWORD *)(a2 + 608);
    *(_QWORD *)(a1 + 608) = v342;
    *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
    swift_bridgeObjectRetain(v341);
    swift_bridgeObjectRetain(v342);
  }
  else
  {
    v345 = *v321;
    v346 = *(_OWORD *)(a2 + 600);
    *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
    *v320 = v345;
    *(_OWORD *)(a1 + 600) = v346;
  }
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(_BYTE *)(a1 + 625) = *(_BYTE *)(a2 + 625);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  v347 = *(_QWORD *)(a2 + 640);
  v348 = *(BAEventReporter **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348, v349, v350, v351, v352, v353, v354, v355);
  v356 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 657) = *(_OWORD *)(a2 + 657);
  *(_OWORD *)(a1 + 648) = v356;
  v357 = (__int128 *)(a1 + 680);
  v358 = (__int128 *)(a2 + 680);
  v359 = *(BAEventReporter **)(a1 + 720);
  v360 = *(_QWORD *)(a2 + 720);
  if (v359 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v360 == 1)
    {
      v361 = *v358;
      v362 = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 712) = v362;
      *v357 = v361;
    }
    else
    {
      *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
      *(_BYTE *)(a1 + 688) = *(_BYTE *)(a2 + 688);
      *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
      *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
      *(_BYTE *)(a1 + 705) = *(_BYTE *)(a2 + 705);
      *(_BYTE *)(a1 + 706) = *(_BYTE *)(a2 + 706);
      *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
      v365 = *(_QWORD *)(a2 + 720);
      *(_QWORD *)(a1 + 720) = v365;
      swift_bridgeObjectRetain(v365);
    }
  }
  else if (v360 == 1)
  {
    sub_19008(a1 + 680);
    v364 = *(_OWORD *)(a2 + 696);
    v363 = *(_OWORD *)(a2 + 712);
    *v357 = *v358;
    *(_OWORD *)(a1 + 696) = v364;
    *(_OWORD *)(a1 + 712) = v363;
  }
  else
  {
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    *(_BYTE *)(a1 + 688) = *(_BYTE *)(a2 + 688);
    *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
    *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
    *(_BYTE *)(a1 + 705) = *(_BYTE *)(a2 + 705);
    *(_BYTE *)(a1 + 706) = *(_BYTE *)(a2 + 706);
    *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
    v366 = *(_QWORD *)(a2 + 720);
    *(_QWORD *)(a1 + 720) = v366;
    swift_bridgeObjectRetain(v366);
    swift_bridgeObjectRelease(v359, v367, v368, v369, v370, v371, v372, v373);
  }
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  v374 = (_OWORD *)(a1 + 736);
  v375 = (_OWORD *)(a2 + 736);
  v376 = *(_QWORD *)(a2 + 776);
  if (*(_QWORD *)(a1 + 776))
  {
    if (v376)
    {
      *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
      v377 = *(_QWORD *)(a2 + 744);
      v378 = *(BAEventReporter **)(a1 + 744);
      *(_QWORD *)(a1 + 744) = v377;
      swift_bridgeObjectRetain(v377);
      swift_bridgeObjectRelease(v378, v379, v380, v381, v382, v383, v384, v385);
      *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
      v386 = *(_QWORD *)(a2 + 760);
      v387 = *(BAEventReporter **)(a1 + 760);
      *(_QWORD *)(a1 + 760) = v386;
      swift_bridgeObjectRetain(v386);
      swift_bridgeObjectRelease(v387, v388, v389, v390, v391, v392, v393, v394);
      *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
      v395 = *(_QWORD *)(a2 + 776);
      v396 = *(BAEventReporter **)(a1 + 776);
      *(_QWORD *)(a1 + 776) = v395;
      swift_bridgeObjectRetain(v395);
      swift_bridgeObjectRelease(v396, v397, v398, v399, v400, v401, v402, v403);
      *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
      v404 = *(_QWORD *)(a2 + 792);
      v405 = *(BAEventReporter **)(a1 + 792);
      *(_QWORD *)(a1 + 792) = v404;
      swift_bridgeObjectRetain(v404);
      swift_bridgeObjectRelease(v405, v406, v407, v408, v409, v410, v411, v412);
      v413 = *(_DWORD *)(a2 + 800);
      *(_BYTE *)(a1 + 804) = *(_BYTE *)(a2 + 804);
      *(_DWORD *)(a1 + 800) = v413;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 736));
      *v374 = *v375;
      v420 = *(_OWORD *)(a2 + 768);
      v419 = *(_OWORD *)(a2 + 784);
      v421 = *(_OWORD *)(a2 + 752);
      *(_QWORD *)(a1 + 797) = *(_QWORD *)(a2 + 797);
      *(_OWORD *)(a1 + 768) = v420;
      *(_OWORD *)(a1 + 784) = v419;
      *(_OWORD *)(a1 + 752) = v421;
    }
  }
  else if (v376)
  {
    *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
    v414 = *(_QWORD *)(a2 + 744);
    *(_QWORD *)(a1 + 744) = v414;
    *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
    v415 = *(_QWORD *)(a2 + 760);
    *(_QWORD *)(a1 + 760) = v415;
    *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
    v416 = *(_QWORD *)(a2 + 776);
    *(_QWORD *)(a1 + 776) = v416;
    *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
    v417 = *(_QWORD *)(a2 + 792);
    *(_QWORD *)(a1 + 792) = v417;
    v418 = *(_DWORD *)(a2 + 800);
    *(_BYTE *)(a1 + 804) = *(_BYTE *)(a2 + 804);
    *(_DWORD *)(a1 + 800) = v418;
    swift_bridgeObjectRetain(v414);
    swift_bridgeObjectRetain(v415);
    swift_bridgeObjectRetain(v416);
    swift_bridgeObjectRetain(v417);
  }
  else
  {
    *v374 = *v375;
    v422 = *(_OWORD *)(a2 + 752);
    v423 = *(_OWORD *)(a2 + 768);
    v424 = *(_OWORD *)(a2 + 784);
    *(_QWORD *)(a1 + 797) = *(_QWORD *)(a2 + 797);
    *(_OWORD *)(a1 + 768) = v423;
    *(_OWORD *)(a1 + 784) = v424;
    *(_OWORD *)(a1 + 752) = v422;
  }
  v425 = (_OWORD *)(a1 + 808);
  v426 = (_OWORD *)(a2 + 808);
  v427 = *(BAEventReporter **)(a1 + 816);
  v428 = *(_QWORD *)(a2 + 816);
  if (v427)
  {
    if (v428)
    {
      *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
      v429 = *(_QWORD *)(a2 + 816);
      *(_QWORD *)(a1 + 816) = v429;
      swift_bridgeObjectRetain(v429);
      swift_bridgeObjectRelease(v427, v430, v431, v432, v433, v434, v435, v436);
      *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
      v437 = *(_QWORD *)(a2 + 832);
      v438 = *(BAEventReporter **)(a1 + 832);
      *(_QWORD *)(a1 + 832) = v437;
      swift_bridgeObjectRetain(v437);
      swift_bridgeObjectRelease(v438, v439, v440, v441, v442, v443, v444, v445);
      *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
      v446 = *(_QWORD *)(a2 + 848);
      v447 = *(BAEventReporter **)(a1 + 848);
      *(_QWORD *)(a1 + 848) = v446;
      swift_bridgeObjectRetain(v446);
      swift_bridgeObjectRelease(v447, v448, v449, v450, v451, v452, v453, v454);
    }
    else
    {
      sub_8DA38((_QWORD *)(a1 + 808));
      v459 = *(_OWORD *)(a2 + 824);
      v458 = *(_OWORD *)(a2 + 840);
      *v425 = *v426;
      *(_OWORD *)(a1 + 824) = v459;
      *(_OWORD *)(a1 + 840) = v458;
    }
  }
  else if (v428)
  {
    *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
    v455 = *(_QWORD *)(a2 + 816);
    *(_QWORD *)(a1 + 816) = v455;
    *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
    v456 = *(_QWORD *)(a2 + 832);
    *(_QWORD *)(a1 + 832) = v456;
    *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
    v457 = *(_QWORD *)(a2 + 848);
    *(_QWORD *)(a1 + 848) = v457;
    swift_bridgeObjectRetain(v455);
    swift_bridgeObjectRetain(v456);
    swift_bridgeObjectRetain(v457);
  }
  else
  {
    v460 = *v426;
    v461 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v461;
    *v425 = v460;
  }
  *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
  v462 = *(int *)(a3 + 72);
  v463 = a1 + v462;
  v464 = a2 + v462;
  v465 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v465 - 8) + 24))(v463, v464, v465);
  v466 = *(int *)(a3 + 76);
  v467 = a1 + v466;
  v468 = a2 + v466;
  v469 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v469 - 8) + 24))(v467, v468, v469);
  return a1;
}

_QWORD *sub_AC048(_QWORD *a1)
{
  destroy for FlowcaseData(a1);
  return a1;
}

uint64_t initializeWithTake for ContentExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 318) = *(_QWORD *)(a2 + 318);
  v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  v14 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v14;
  v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v15;
  v16 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v16;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v17 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v17;
  v18 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v18;
  v19 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v19;
  v20 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v20;
  v21 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v21;
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  v22 = *(_OWORD *)(a2 + 528);
  v23 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v22;
  *(_OWORD *)(a1 + 496) = v23;
  v24 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = v24;
  v25 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v25;
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 657) = *(_OWORD *)(a2 + 657);
  v26 = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = v26;
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  v27 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v27;
  *(_QWORD *)(a1 + 797) = *(_QWORD *)(a2 + 797);
  v28 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v28;
  v29 = *(_OWORD *)(a2 + 840);
  v30 = *(_OWORD *)(a2 + 808);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
  *(_OWORD *)(a1 + 840) = v29;
  *(_OWORD *)(a1 + 808) = v30;
  v31 = *(int *)(a3 + 72);
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
  v34 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = *(int *)(a3 + 76);
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  return a1;
}

uint64_t assignWithTake for ContentExposureEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  uint64_t v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  uint64_t v85;
  BAEventReporter *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  const char *v94;
  void *v95;
  void *v96;
  void *v97;
  int64_t v98;
  int64_t v99;
  void *v100;
  BAEventReporter *v101;
  uint64_t v102;
  uint64_t v103;
  BAEventReporter *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  BAEventReporter *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  int64_t v118;
  int64_t v119;
  id v120;
  uint64_t v121;
  BAEventReporter *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  int64_t v127;
  int64_t v128;
  id v129;
  uint64_t v130;
  BAEventReporter *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  int64_t v136;
  int64_t v137;
  id v138;
  uint64_t v139;
  BAEventReporter *v140;
  SEL v141;
  id v142;
  id v143;
  id v144;
  int64_t v145;
  int64_t v146;
  id v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  BAEventReporter *v151;
  uint64_t v152;
  uint64_t v153;
  BAEventReporter *v154;
  SEL v155;
  id v156;
  id v157;
  id v158;
  int64_t v159;
  int64_t v160;
  id v161;
  uint64_t v162;
  BAEventReporter *v163;
  SEL v164;
  id v165;
  id v166;
  id v167;
  int64_t v168;
  int64_t v169;
  id v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  BAEventReporter *v174;
  uint64_t v175;
  BAEventReporter *v176;
  SEL v177;
  id v178;
  id v179;
  id v180;
  int64_t v181;
  int64_t v182;
  id v183;
  uint64_t v184;
  BAEventReporter *v185;
  SEL v186;
  id v187;
  id v188;
  id v189;
  int64_t v190;
  int64_t v191;
  id v192;
  uint64_t v193;
  BAEventReporter *v194;
  SEL v195;
  id v196;
  id v197;
  id v198;
  int64_t v199;
  int64_t v200;
  id v201;
  uint64_t v202;
  BAEventReporter *v203;
  SEL v204;
  id v205;
  id v206;
  id v207;
  int64_t v208;
  int64_t v209;
  id v210;
  uint64_t v211;
  BAEventReporter *v212;
  SEL v213;
  id v214;
  id v215;
  id v216;
  int64_t v217;
  int64_t v218;
  id v219;
  uint64_t v220;
  BAEventReporter *v221;
  SEL v222;
  id v223;
  id v224;
  id v225;
  int64_t v226;
  int64_t v227;
  id v228;
  BAEventReporter *v229;
  SEL v230;
  id v231;
  id v232;
  id v233;
  int64_t v234;
  int64_t v235;
  id v236;
  BAEventReporter *v237;
  SEL v238;
  id v239;
  id v240;
  id v241;
  int64_t v242;
  int64_t v243;
  id v244;
  BAEventReporter *v245;
  SEL v246;
  id v247;
  id v248;
  id v249;
  int64_t v250;
  int64_t v251;
  id v252;
  BAEventReporter *v253;
  SEL v254;
  id v255;
  id v256;
  id v257;
  int64_t v258;
  int64_t v259;
  id v260;
  const char *v261;
  void *v262;
  void *v263;
  void *v264;
  int64_t v265;
  int64_t v266;
  void *v267;
  BAEventReporter *v268;
  uint64_t v269;
  BAEventReporter *v270;
  SEL v271;
  id v272;
  id v273;
  id v274;
  int64_t v275;
  int64_t v276;
  id v277;
  __int128 v278;
  BAEventReporter *v279;
  const char *v280;
  void *v281;
  void *v282;
  void *v283;
  int64_t v284;
  int64_t v285;
  void *v286;
  BAEventReporter *v287;
  uint64_t v288;
  __int128 v289;
  BAEventReporter *v290;
  BAEventReporter *v291;
  SEL v292;
  id v293;
  id v294;
  id v295;
  int64_t v296;
  int64_t v297;
  id v298;
  BAEventReporter *v299;
  SEL v300;
  id v301;
  id v302;
  id v303;
  int64_t v304;
  int64_t v305;
  id v306;
  BAEventReporter *v307;
  SEL v308;
  id v309;
  id v310;
  id v311;
  int64_t v312;
  int64_t v313;
  id v314;
  __int128 v315;
  __int128 v316;
  BAEventReporter *v317;
  uint64_t v318;
  BAEventReporter *v319;
  SEL v320;
  id v321;
  id v322;
  id v323;
  int64_t v324;
  int64_t v325;
  id v326;
  BAEventReporter *v327;
  SEL v328;
  id v329;
  id v330;
  id v331;
  int64_t v332;
  int64_t v333;
  id v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(BAEventReporter **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(BAEventReporter **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_QWORD *)(a2 + 80);
  v41 = *(BAEventReporter **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v49 = *(_QWORD *)(a2 + 104);
  v50 = *(BAEventReporter **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v49;
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  v58 = *(_QWORD *)(a2 + 120);
  v59 = *(BAEventReporter **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v58;
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v67 = *(_QWORD *)(a2 + 144);
  v68 = *(BAEventReporter **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v67;
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  v76 = *(_QWORD *)(a2 + 160);
  v77 = *(BAEventReporter **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v76;
  swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 185) = *(_DWORD *)(a2 + 185);
  *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
  v85 = *(_QWORD *)(a2 + 200);
  v86 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v85;
  swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
  v101 = *(BAEventReporter **)(a1 + 216);
  if (v101)
  {
    v102 = *(_QWORD *)(a2 + 216);
    if (v102)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v102;
      swift_bridgeObjectRelease(v101, v94, v95, v96, v97, v98, v99, v100);
      v103 = *(_QWORD *)(a2 + 232);
      v104 = *(BAEventReporter **)(a1 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v103;
      swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
      v112 = *(_QWORD *)(a2 + 248);
      v113 = *(BAEventReporter **)(a1 + 248);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v112;
      swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
      v121 = *(_QWORD *)(a2 + 264);
      v122 = *(BAEventReporter **)(a1 + 264);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = v121;
      swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
      v130 = *(_QWORD *)(a2 + 280);
      v131 = *(BAEventReporter **)(a1 + 280);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = v130;
      swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
      *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
      *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
      v139 = *(_QWORD *)(a2 + 312);
      v140 = *(BAEventReporter **)(a1 + 312);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = v139;
      swift_bridgeObjectRelease(v140, v141, v142, v143, v144, v145, v146, v147);
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
      *(_WORD *)(a1 + 324) = *(_WORD *)(a2 + 324);
      goto LABEL_6;
    }
    sub_59D74((_QWORD *)(a1 + 208));
  }
  v148 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v148;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 318) = *(_QWORD *)(a2 + 318);
  v149 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v149;
  v150 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v150;
LABEL_6:
  v151 = *(BAEventReporter **)(a1 + 336);
  if (v151)
  {
    v152 = *(_QWORD *)(a2 + 336);
    if (v152)
    {
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v152;
      swift_bridgeObjectRelease(v151, v94, v95, v96, v97, v98, v99, v100);
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
      v153 = *(_QWORD *)(a2 + 360);
      v154 = *(BAEventReporter **)(a1 + 360);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = v153;
      swift_bridgeObjectRelease(v154, v155, v156, v157, v158, v159, v160, v161);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
      v162 = *(_QWORD *)(a2 + 392);
      v163 = *(BAEventReporter **)(a1 + 392);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = v162;
      swift_bridgeObjectRelease(v163, v164, v165, v166, v167, v168, v169, v170);
      goto LABEL_11;
    }
    sub_AC048((_QWORD *)(a1 + 328));
  }
  v171 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v171;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v172 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v172;
LABEL_11:
  v173 = *(_QWORD *)(a2 + 408);
  v174 = *(BAEventReporter **)(a1 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v173;
  swift_bridgeObjectRelease(v174, v94, v95, v96, v97, v98, v99, v100);
  v175 = *(_QWORD *)(a2 + 424);
  v176 = *(BAEventReporter **)(a1 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v175;
  swift_bridgeObjectRelease(v176, v177, v178, v179, v180, v181, v182, v183);
  v184 = *(_QWORD *)(a2 + 440);
  v185 = *(BAEventReporter **)(a1 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v184;
  swift_bridgeObjectRelease(v185, v186, v187, v188, v189, v190, v191, v192);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  v193 = *(_QWORD *)(a2 + 464);
  v194 = *(BAEventReporter **)(a1 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v193;
  swift_bridgeObjectRelease(v194, v195, v196, v197, v198, v199, v200, v201);
  v202 = *(_QWORD *)(a2 + 480);
  v203 = *(BAEventReporter **)(a1 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v202;
  swift_bridgeObjectRelease(v203, v204, v205, v206, v207, v208, v209, v210);
  v211 = *(_QWORD *)(a2 + 496);
  v212 = *(BAEventReporter **)(a1 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v211;
  swift_bridgeObjectRelease(v212, v213, v214, v215, v216, v217, v218, v219);
  v220 = *(_QWORD *)(a2 + 512);
  v221 = *(BAEventReporter **)(a1 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v220;
  swift_bridgeObjectRelease(v221, v222, v223, v224, v225, v226, v227, v228);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v229 = *(BAEventReporter **)(a1 + 528);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_bridgeObjectRelease(v229, v230, v231, v232, v233, v234, v235, v236);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v237 = *(BAEventReporter **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease(v237, v238, v239, v240, v241, v242, v243, v244);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v245 = *(BAEventReporter **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRelease(v245, v246, v247, v248, v249, v250, v251, v252);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  v253 = *(BAEventReporter **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  swift_bridgeObjectRelease(v253, v254, v255, v256, v257, v258, v259, v260);
  v268 = *(BAEventReporter **)(a1 + 592);
  if (v268)
  {
    v269 = *(_QWORD *)(a2 + 592);
    if (v269)
    {
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      *(_QWORD *)(a1 + 592) = v269;
      swift_bridgeObjectRelease(v268, v261, v262, v263, v264, v265, v266, v267);
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
      v270 = *(BAEventReporter **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      swift_bridgeObjectRelease(v270, v271, v272, v273, v274, v275, v276, v277);
      *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
      goto LABEL_16;
    }
    sub_39158(a1 + 584);
  }
  v278 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v278;
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
LABEL_16:
  *(_WORD *)(a1 + 624) = *(_WORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  v279 = *(BAEventReporter **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  swift_bridgeObjectRelease(v279, v261, v262, v263, v264, v265, v266, v267);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 657) = *(_OWORD *)(a2 + 657);
  v287 = *(BAEventReporter **)(a1 + 720);
  if (v287 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
LABEL_19:
    v289 = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
    *(_OWORD *)(a1 + 696) = v289;
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    goto LABEL_21;
  }
  v288 = *(_QWORD *)(a2 + 720);
  if (v288 == 1)
  {
    sub_19008(a1 + 680);
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_BYTE *)(a1 + 688) = *(_BYTE *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
  *(_WORD *)(a1 + 705) = *(_WORD *)(a2 + 705);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = v288;
  swift_bridgeObjectRelease(v287, v280, v281, v282, v283, v284, v285, v286);
LABEL_21:
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  if (*(_QWORD *)(a1 + 776))
  {
    if (*(_QWORD *)(a2 + 776))
    {
      *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
      v290 = *(BAEventReporter **)(a1 + 744);
      *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
      swift_bridgeObjectRelease(v290, v280, v281, v282, v283, v284, v285, v286);
      *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
      v291 = *(BAEventReporter **)(a1 + 760);
      *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
      swift_bridgeObjectRelease(v291, v292, v293, v294, v295, v296, v297, v298);
      *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
      v299 = *(BAEventReporter **)(a1 + 776);
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      swift_bridgeObjectRelease(v299, v300, v301, v302, v303, v304, v305, v306);
      *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
      v307 = *(BAEventReporter **)(a1 + 792);
      *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
      swift_bridgeObjectRelease(v307, v308, v309, v310, v311, v312, v313, v314);
      *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
      *(_BYTE *)(a1 + 804) = *(_BYTE *)(a2 + 804);
      goto LABEL_26;
    }
    sub_59D40((_QWORD *)(a1 + 736));
  }
  v315 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v315;
  *(_QWORD *)(a1 + 797) = *(_QWORD *)(a2 + 797);
  v316 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v316;
LABEL_26:
  v317 = *(BAEventReporter **)(a1 + 816);
  if (!v317)
  {
LABEL_30:
    v335 = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 824) = v335;
    *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
    goto LABEL_31;
  }
  v318 = *(_QWORD *)(a2 + 816);
  if (!v318)
  {
    sub_8DA38((_QWORD *)(a1 + 808));
    goto LABEL_30;
  }
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a1 + 816) = v318;
  swift_bridgeObjectRelease(v317, v280, v281, v282, v283, v284, v285, v286);
  *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
  v319 = *(BAEventReporter **)(a1 + 832);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  swift_bridgeObjectRelease(v319, v320, v321, v322, v323, v324, v325, v326);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  v327 = *(BAEventReporter **)(a1 + 848);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  swift_bridgeObjectRelease(v327, v328, v329, v330, v331, v332, v333, v334);
LABEL_31:
  *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
  v336 = a3[18];
  v337 = a1 + v336;
  v338 = a2 + v336;
  v339 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v339 - 8) + 40))(v337, v338, v339);
  v340 = a3[19];
  v341 = a1 + v340;
  v342 = a2 + v340;
  v343 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v343 - 8) + 40))(v341, v342, v343);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_AC880);
}

uint64_t sub_AC880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 72);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ContentExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_AC92C);
}

uint64_t sub_AC92C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 72);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_AC9C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[16];

  v5[0] = "p";
  v5[1] = &unk_1FCED8;
  v5[2] = &unk_1FCEF0;
  v5[3] = &unk_1FCF08;
  v5[4] = &unk_1FCF20;
  v5[5] = &unk_1FCF38;
  v5[6] = &unk_1FCF50;
  v5[7] = &unk_1FCF68;
  v5[8] = &unk_1FCF80;
  v5[9] = &unk_1FCF98;
  v5[10] = &unk_1FCFB0;
  v5[11] = &unk_1FCFC8;
  v5[12] = &unk_1FCFE0;
  v5[13] = &unk_1FCFF8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[14] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[15] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 16, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_ACB24 + 4 * byte_1FCD45[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_ACB58 + 4 * byte_1FCD40[v4]))();
}

uint64_t sub_ACB58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_ACB60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xACB68);
  return result;
}

uint64_t sub_ACB74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xACB7CLL);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_ACB80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_ACB88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentExposureEvent.Model.CodingKeys()
{
  return &type metadata for ContentExposureEvent.Model.CodingKeys;
}

unint64_t sub_ACBA8()
{
  unint64_t result;

  result = qword_29B348;
  if (!qword_29B348)
  {
    result = swift_getWitnessTable(&unk_1FD0AC, &type metadata for ContentExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B348);
  }
  return result;
}

unint64_t sub_ACBF0()
{
  unint64_t result;

  result = qword_29B350;
  if (!qword_29B350)
  {
    result = swift_getWitnessTable("U|\a", &type metadata for ContentExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B350);
  }
  return result;
}

unint64_t sub_ACC38()
{
  unint64_t result;

  result = qword_29B358;
  if (!qword_29B358)
  {
    result = swift_getWitnessTable(&unk_1FD044, &type metadata for ContentExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B358);
  }
  return result;
}

uint64_t sub_ACC7C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x800000000021F220;
    if (a2 == 0x800000000021F220)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F220, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x65736163776F6C66 && a2 == 0xEC00000061746144)
  {
    v9 = 0xEC00000061746144;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736163776F6C66, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x746144616964656DLL && a2 == 0xE900000000000061)
  {
    v12 = 0xE900000000000061;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144616964656DLL, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v13 = 0xEA00000000006174;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x800000000021EE70)
  {
    v14 = 0x800000000021EE70;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x800000000021EE70, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v15 = 0xEA00000000006174;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v16 = 0xEE00617461446E6FLL;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0xD000000000000010)
  {
    v17 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_72;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if (a1 == 0x74614465726E6567 && a2 == 0xE900000000000061)
  {
    v18 = 0xE900000000000061;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614465726E6567, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0x746144736C616564 && a2 == 0xE900000000000061)
  {
    v19 = 0xE900000000000061;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144736C616564, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_84;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v20 = 0xE900000000000061;
LABEL_90:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_90;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 15;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t sub_AD374(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29B360, &enum case for SessionGroup.default(_:));
}

uint64_t static CellularToggleEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295770, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29B360, a1);
}

uint64_t sub_AD3B4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29B378, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static CellularToggleEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295778, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29B378, a1);
}

uint64_t CellularToggleEvent.cellularData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29B390);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CellularToggleEvent.cellularData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29B390);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t CellularToggleEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CellularToggleEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CellularToggleEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29B418, (uint64_t)&nominal type descriptor for CellularToggleEvent);
}

uint64_t CellularToggleEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CellularToggleEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CellularToggleEvent.eventData.modify())()
{
  type metadata accessor for CellularToggleEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CellularToggleEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29B390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for CellularToggleEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t CellularToggleEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CellularToggleEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CellularToggleEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29B4B0, (uint64_t)&nominal type descriptor for CellularToggleEvent.Model);
}

uint64_t CellularToggleEvent.Model.init(cellularData:eventData:)@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for CellularToggleEvent.Model(0) + 20);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_AD66C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x72616C756C6C6563;
}

uint64_t sub_AD6B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_AE518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_AD6D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD88C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_AD700(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD88C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CellularToggleEvent.Model.encode(to:)(_QWORD *a1)
{
  __int16 *v1;
  uint64_t v2;
  __int16 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  __int16 v20;

  v3 = v1;
  v5 = sub_71B4(&qword_29B398);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_AD88C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CellularToggleEvent.Model.CodingKeys, &type metadata for CellularToggleEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_AD8D0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for CellularData, v12);
  if (!v2)
  {
    v13 = (char *)v3 + *(int *)(type metadata accessor for CellularToggleEvent.Model(0) + 20);
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_AD88C()
{
  unint64_t result;

  result = qword_29B3A0;
  if (!qword_29B3A0)
  {
    result = swift_getWitnessTable(&unk_1FD2DC, &type metadata for CellularToggleEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B3A0);
  }
  return result;
}

unint64_t sub_AD8D0()
{
  unint64_t result;

  result = qword_29B3A8;
  if (!qword_29B3A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CellularData, &type metadata for CellularData);
    atomic_store(result, (unint64_t *)&qword_29B3A8);
  }
  return result;
}

uint64_t CellularToggleEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_29B3B0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CellularToggleEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_AD88C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CellularToggleEvent.Model.CodingKeys, &type metadata for CellularToggleEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = v8;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_ADB68();
    v19 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for CellularData, &v33, v31, &type metadata for CellularData, v18);
    v24 = v14;
    *(_WORD *)v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(char *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_ADBAC(v22, v21);
  }
  return sub_7DAC(a1);
}

unint64_t sub_ADB68()
{
  unint64_t result;

  result = qword_29B3B8;
  if (!qword_29B3B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CellularData, &type metadata for CellularData);
    atomic_store(result, (unint64_t *)&qword_29B3B8);
  }
  return result;
}

uint64_t sub_ADBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CellularToggleEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_ADBF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CellularToggleEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_ADC04(_QWORD *a1)
{
  return CellularToggleEvent.Model.encode(to:)(a1);
}

uint64_t sub_ADC18@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295770, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29B360, (uint64_t)sub_AD374, a1);
}

uint64_t sub_ADC3C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295778, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29B378, (uint64_t)sub_AD3B4, a1);
}

uint64_t sub_ADC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29B390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for CellularToggleEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_29B390);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for CellularToggleEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_29B390);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for CellularToggleEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29B390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for CellularToggleEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29B390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CellularToggleEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29B390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for CellularToggleEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29B390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CellularToggleEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_AE010);
}

uint64_t sub_AE010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_29B390);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CellularToggleEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_AE098);
}

uint64_t sub_AE098(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_29B390);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_AE11C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_AE1A0(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_AE1A0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29B428)
  {
    v2 = sub_ADB68();
    v3 = sub_AD8D0();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for CellularData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29B428);
  }
}

uint64_t getEnumTagSinglePayload for CellularToggleEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_AE210);
}

uint64_t sub_AE210(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 240)
  {
    v4 = *a1;
    if (v4 >= 0x10)
      return v4 - 15;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CellularToggleEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_AE290);
}

_BYTE *sub_AE290(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 240)
  {
    *result = a2 + 15;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_AE300(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1FD200;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CellularToggleEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_AE3C0 + 4 * byte_1FD135[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_AE3F4 + 4 * byte_1FD130[v4]))();
}

uint64_t sub_AE3F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_AE3FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xAE404);
  return result;
}

uint64_t sub_AE410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xAE418);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_AE41C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_AE424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CellularToggleEvent.Model.CodingKeys()
{
  return &type metadata for CellularToggleEvent.Model.CodingKeys;
}

unint64_t sub_AE444()
{
  unint64_t result;

  result = qword_29B4E8;
  if (!qword_29B4E8)
  {
    result = swift_getWitnessTable(&unk_1FD2B4, &type metadata for CellularToggleEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B4E8);
  }
  return result;
}

unint64_t sub_AE48C()
{
  unint64_t result;

  result = qword_29B4F0;
  if (!qword_29B4F0)
  {
    result = swift_getWitnessTable(&unk_1FD224, &type metadata for CellularToggleEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B4F0);
  }
  return result;
}

unint64_t sub_AE4D4()
{
  unint64_t result;

  result = qword_29B4F8;
  if (!qword_29B4F8)
  {
    result = swift_getWitnessTable(&unk_1FD24C, &type metadata for CellularToggleEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29B4F8);
  }
  return result;
}

uint64_t sub_AE518(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x72616C756C6C6563 && a2 == 0xEC00000061746144)
  {
    v5 = 0xEC00000061746144;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72616C756C6C6563, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t BridgedDisplayType.swiftType.getter@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_AFB90(a1, (uint64_t)&type metadata for BridgedDisplayType, a2);
}

id BridgedBackgroundColorData.__allocating_init(backgroundColor:)(uint64_t a1)
{
  return sub_AEC60(a1, &OBJC_IVAR___BABackgroundColorData_backgroundColor);
}

id BridgedBackgroundColorData.init(backgroundColor:)(uint64_t a1)
{
  return sub_AECC8(a1, &OBJC_IVAR___BABackgroundColorData_backgroundColor, type metadata accessor for BridgedBackgroundColorData);
}

void BridgedBackgroundColorData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedBackgroundColorData", 40, "init()", 6, 0);
  __break(1u);
}

id BridgedBackgroundColorData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedBackgroundColorData);
}

id BridgedBooksTreatmentData.__allocating_init(remoteConfigNamespaceData:)(uint64_t a1)
{
  return sub_AEC60(a1, &OBJC_IVAR___BABooksTreatmentData_remoteConfigNamespaceData);
}

id BridgedBooksTreatmentData.init(remoteConfigNamespaceData:)(uint64_t a1)
{
  return sub_AECC8(a1, &OBJC_IVAR___BABooksTreatmentData_remoteConfigNamespaceData, type metadata accessor for BridgedBooksTreatmentData);
}

void sub_AE72C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  BAEventReporter *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BABooksTreatmentData_remoteConfigNamespaceData);
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR___BABooksTreatmentData_remoteConfigNamespaceData));
    if (v4)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease((BAEventReporter *)v3, v5, v6, v7, v8, (int64_t)v9, v10, v11);
LABEL_20:
    *a1 = _swiftEmptyArrayStorage;
    return;
  }
  if (v3 < 0)
    v42 = *(_QWORD *)(v1 + OBJC_IVAR___BABooksTreatmentData_remoteConfigNamespaceData);
  else
    v42 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR___BABooksTreatmentData_remoteConfigNamespaceData));
  v4 = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!v4)
    goto LABEL_19;
LABEL_3:
  sub_B2DA0(0, v4 & ~(v4 >> 63), 0, (uint64_t)v7, (int64_t)v8, v9, v10, v11);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v43 = a1;
    v44 = v4;
    v45 = (BAEventReporter *)v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v12 = 0;
      do
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v3);
        v14 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_name + 8);
        v48 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_name);
        v15 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_treatmentIDs);
        v16 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentIDs);
        v17 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentSetIDs);
        v18 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_previousTreatmentIDs);
        v19 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentIDs);
        v20 = *(_QWORD *)(v13 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentSetIDs);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v14);
        v46 = v15;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_unknownObjectRelease(v13);
        v29 = _swiftEmptyArrayStorage[2];
        v28 = _swiftEmptyArrayStorage[3];
        if (v29 >= v28 >> 1)
          sub_B2DA0(v28 > 1, v29 + 1, (char *)&dword_0 + 1, (uint64_t)v23, (int64_t)v24, v25, v26, v27);
        ++v12;
        _swiftEmptyArrayStorage[2] = v29 + 1;
        v30 = &_swiftEmptyArrayStorage[8 * v29];
        v30[4] = v48;
        v30[5] = v14;
        v30[6] = v46;
        v30[7] = v16;
        v30[8] = v17;
        v30[9] = v18;
        v30[10] = v19;
        v30[11] = v20;
        v3 = (uint64_t)v45;
      }
      while (v44 != v12);
    }
    else
    {
      v31 = 0;
      do
      {
        v32 = *(_QWORD *)(v3 + 8 * v31 + 32);
        v47 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_name);
        v33 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_treatmentIDs);
        v34 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentIDs);
        v35 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentSetIDs);
        v36 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_previousTreatmentIDs);
        v37 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentIDs);
        v38 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentSetIDs);
        v40 = _swiftEmptyArrayStorage[2];
        v39 = _swiftEmptyArrayStorage[3];
        v50 = v40 + 1;
        v49 = *(_QWORD *)(v32 + OBJC_IVAR___BARemoteConfigNamespaceData_name + 8);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v38);
        if (v40 >= v39 >> 1)
          sub_B2DA0(v39 > 1, v50, (char *)&dword_0 + 1, (uint64_t)v23, (int64_t)v24, v25, v26, v27);
        ++v31;
        _swiftEmptyArrayStorage[2] = v50;
        v41 = &_swiftEmptyArrayStorage[8 * v40];
        v41[4] = v47;
        v41[5] = v49;
        v41[6] = v33;
        v41[7] = v34;
        v41[8] = v35;
        v41[9] = v36;
        v41[10] = v37;
        v41[11] = v38;
        v3 = (uint64_t)v45;
      }
      while (v44 != v31);
    }
    swift_bridgeObjectRelease((BAEventReporter *)v3, v21, v22, v23, v24, (int64_t)v25, v26, v27);
    a1 = v43;
    goto LABEL_20;
  }
  __break(1u);
}

void BridgedBooksTreatmentData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedBooksTreatmentData", 39, "init()", 6, 0);
  __break(1u);
}

id BridgedBooksTreatmentData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedBooksTreatmentData);
}

id BridgedCollectionIDData.__allocating_init(collectionID:collectionMemberCount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR___BACollectionIDData_collectionID];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_QWORD *)&v7[OBJC_IVAR___BACollectionIDData_collectionMemberCount] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, "init");
}

id BridgedCollectionIDData.init(collectionID:collectionMemberCount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_super v6;

  v4 = &v3[OBJC_IVAR___BACollectionIDData_collectionID];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  *(_QWORD *)&v3[OBJC_IVAR___BACollectionIDData_collectionMemberCount] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for BridgedCollectionIDData();
  return objc_msgSendSuper2(&v6, "init");
}

void BridgedCollectionIDData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedCollectionIDData", 37, "init()", 6, 0);
  __break(1u);
}

id BridgedCollectionIDData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedCollectionIDData);
}

id BridgedCollectionSummaryData.__allocating_init(collectionSummary:)(uint64_t a1)
{
  return sub_AEC60(a1, &OBJC_IVAR___BACollectionSummaryData_collectionSummary);
}

id sub_AEC60(uint64_t a1, _QWORD *a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[*a2] = a1;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

id BridgedCollectionSummaryData.init(collectionSummary:)(uint64_t a1)
{
  return sub_AECC8(a1, &OBJC_IVAR___BACollectionSummaryData_collectionSummary, type metadata accessor for BridgedCollectionSummaryData);
}

id sub_AECC8(uint64_t a1, _QWORD *a2, uint64_t (*a3)(void))
{
  char *v3;
  objc_super v5;

  *(_QWORD *)&v3[*a2] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)a3();
  return objc_msgSendSuper2(&v5, "init");
}

void sub_AED5C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BACollectionSummaryData_collectionSummary);
  if ((unint64_t)v3 >> 62)
    goto LABEL_27;
  v4 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR___BACollectionSummaryData_collectionSummary));
  if (v4)
  {
    while (1)
    {
      sub_B2D68(0, v4 & ~(v4 >> 63), 0, (uint64_t)v7, (int64_t)v8, v9, v10, v11);
      if (v4 < 0)
        break;
      v39 = a1;
      if ((v3 & 0xC000000000000001) != 0)
      {
        v12 = 0;
        while (1)
        {
          v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v3);
          v14 = *(_QWORD *)(v13 + OBJC_IVAR___BACollectionIDData_collectionMemberCount);
          if (v14 < 0)
            break;
          v15 = v13;
          a1 = *(_QWORD **)(v13 + OBJC_IVAR___BACollectionIDData_collectionID);
          v16 = *(_QWORD *)(v13 + OBJC_IVAR___BACollectionIDData_collectionID + 8);
          swift_bridgeObjectRetain(v16);
          v17 = BARoundIntegerToSignificantFigures(v14, 2);
          swift_unknownObjectRelease(v15);
          if (v17 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_22;
          if (v17 > 0x7FFFFFFF)
            goto LABEL_23;
          v26 = _swiftEmptyArrayStorage[2];
          v25 = _swiftEmptyArrayStorage[3];
          if (v26 >= v25 >> 1)
            sub_B2D68(v25 > 1, v26 + 1, 1, (uint64_t)v20, (int64_t)v21, v22, v23, v24);
          ++v12;
          _swiftEmptyArrayStorage[2] = v26 + 1;
          v27 = (char *)&_swiftEmptyArrayStorage[3 * v26];
          *((_QWORD *)v27 + 4) = a1;
          *((_QWORD *)v27 + 5) = v16;
          *((_DWORD *)v27 + 12) = v17;
          if (v4 == v12)
            goto LABEL_20;
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      else
      {
        a1 = 0;
        while (1)
        {
          v28 = *(_QWORD *)(v3 + 8 * (_QWORD)a1 + 32);
          v29 = *(_QWORD *)(v28 + OBJC_IVAR___BACollectionIDData_collectionMemberCount);
          if (v29 < 0)
            break;
          v30 = (uint64_t *)(v28 + OBJC_IVAR___BACollectionIDData_collectionID);
          v32 = *v30;
          v31 = v30[1];
          swift_bridgeObjectRetain(v31);
          v33 = BARoundIntegerToSignificantFigures(v29, 2);
          if (v33 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_25;
          v34 = v33;
          if (v33 > 0x7FFFFFFF)
            goto LABEL_26;
          v36 = _swiftEmptyArrayStorage[2];
          v35 = _swiftEmptyArrayStorage[3];
          if (v36 >= v35 >> 1)
            sub_B2D68(v35 > 1, v36 + 1, 1, (uint64_t)v20, (int64_t)v21, v22, v23, v24);
          a1 = (_QWORD *)((char *)a1 + 1);
          _swiftEmptyArrayStorage[2] = v36 + 1;
          v37 = (char *)&_swiftEmptyArrayStorage[3 * v36];
          *((_QWORD *)v37 + 4) = v32;
          *((_QWORD *)v37 + 5) = v31;
          *((_DWORD *)v37 + 12) = v34;
          if ((_QWORD *)v4 == a1)
          {
LABEL_20:
            swift_bridgeObjectRelease((BAEventReporter *)v3, v18, v19, v20, v21, (int64_t)v22, v23, v24);
            a1 = v39;
            goto LABEL_32;
          }
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      if (v3 < 0)
        v38 = v3;
      else
        v38 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
      v4 = _CocoaArrayWrapper.endIndex.getter(v38);
      if (!v4)
        goto LABEL_31;
    }
    __break(1u);
  }
  else
  {
LABEL_31:
    swift_bridgeObjectRelease((BAEventReporter *)v3, v5, v6, v7, v8, (int64_t)v9, v10, v11);
LABEL_32:
    *a1 = _swiftEmptyArrayStorage;
  }
}

void BridgedCollectionSummaryData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedCollectionSummaryData", 42, "init()", 6, 0);
  __break(1u);
}

id BridgedCollectionSummaryData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedCollectionSummaryData);
}

id BridgedContentData.__allocating_init(contentID:contentType:contentPrivateID:contentUserID:contentAcquisitionType:contentSubType:contentLength:supplementalContentCount:seriesType:productionType:isUnified:contentKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  objc_class *v16;
  id v18;
  id v19;

  v18 = objc_allocWithZone(v16);
  v19 = sub_B3408(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);

  return v19;
}

id BridgedContentData.init(contentID:contentType:contentPrivateID:contentUserID:contentAcquisitionType:contentSubType:contentLength:supplementalContentCount:seriesType:productionType:isUnified:contentKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  id v16;

  v16 = sub_B3408(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);

  return v16;
}

uint64_t sub_AF27C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  ValueMetadata *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentID + 8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentType);
  if (v4 >= 7)
  {
    v29 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentType);
    swift_bridgeObjectRetain(v3);
    v23 = &type metadata for BridgedContentType;
    goto LABEL_27;
  }
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentPrivateID + 8);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentUserID + 8);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentAcquisitionType);
  v27 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentPrivateID);
  v28 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentID);
  v26 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentUserID);
  if (v7)
  {
    if (v7 == 2)
    {
      v8 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentSubType);
      v9 = 2;
      if (!v8)
      {
        v10 = 2;
LABEL_12:
        v25 = v10;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 1)
      {
        v29 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentAcquisitionType);
        swift_bridgeObjectRetain(v3);
        swift_bridgeObjectRetain(v5);
        swift_bridgeObjectRetain(v6);
        v23 = &type metadata for BridgedContentAcquisitionType;
        goto LABEL_27;
      }
      v8 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentSubType);
      v9 = 1;
      if (!v8)
      {
        v10 = 1;
        goto LABEL_12;
      }
    }
LABEL_10:
    v25 = v9;
    v11 = *(_BYTE *)(v8 + OBJC_IVAR___BAContentSubType_subTypeEnum);
    goto LABEL_14;
  }
  v9 = 0;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentSubType);
  if (v8)
    goto LABEL_10;
  v25 = 0;
LABEL_13:
  v11 = 4;
LABEL_14:
  v24 = v11;
  v12 = *(void **)(v1 + OBJC_IVAR___BAContentData_contentLength);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v12)
    v13 = objc_msgSend(v12, "intValue");
  else
    v13 = 0;
  v14 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_supplementalContentCount);
  if (v14)
    v15 = objc_msgSend(*(id *)(v1 + OBJC_IVAR___BAContentData_supplementalContentCount), "intValue");
  else
    v15 = 0;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_seriesType);
  if (v16 >= 4)
  {
    v29 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_seriesType);
    v23 = &type metadata for BridgedSeriesType;
  }
  else
  {
    v17 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_productionType);
    if (v17 < 3)
    {
      v18 = *(_BYTE *)(v1 + OBJC_IVAR___BAContentData_isUnified);
      v19 = 8 * v16;
      v21 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentKind);
      v20 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_contentKind + 8);
      *(_QWORD *)a1 = v28;
      *(_QWORD *)(a1 + 8) = v3;
      *(_BYTE *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v27;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v26;
      *(_QWORD *)(a1 + 48) = v6;
      *(_BYTE *)(a1 + 56) = v25;
      *(_BYTE *)(a1 + 57) = v24;
      *(_DWORD *)(a1 + 60) = v13;
      *(_BYTE *)(a1 + 64) = v12 == 0;
      *(_DWORD *)(a1 + 68) = v15;
      *(_BYTE *)(a1 + 72) = v14 == 0;
      *(_BYTE *)(a1 + 73) = 0x2010004u >> v19;
      *(_BYTE *)(a1 + 74) = v17;
      *(_BYTE *)(a1 + 75) = 3;
      *(_BYTE *)(a1 + 76) = v18;
      *(_BYTE *)(a1 + 77) = 2;
      *(_QWORD *)(a1 + 80) = v21;
      *(_QWORD *)(a1 + 88) = v20;
      return swift_bridgeObjectRetain(v20);
    }
    v29 = *(_QWORD *)(v1 + OBJC_IVAR___BAContentData_productionType);
    v23 = &type metadata for BridgedProductionType;
  }
LABEL_27:
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v23, &v29, v23, &type metadata for Int);
  __break(1u);
  return result;
}

void BridgedContentData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedContentData", 32, "init()", 6, 0);
  __break(1u);
}

id BridgedContentData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedContentData);
}

id BridgedContentSettingsData.__allocating_init(bookmarkCount:noteCount:highlightCount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_B2628(a1, a2, a3, &OBJC_IVAR___BAContentSettingsData_bookmarkCount, &OBJC_IVAR___BAContentSettingsData_noteCount, &OBJC_IVAR___BAContentSettingsData_highlightCount);
}

id BridgedContentSettingsData.init(bookmarkCount:noteCount:highlightCount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_B26D0(a1, a2, a3, &OBJC_IVAR___BAContentSettingsData_bookmarkCount, &OBJC_IVAR___BAContentSettingsData_noteCount, &OBJC_IVAR___BAContentSettingsData_highlightCount, type metadata accessor for BridgedContentSettingsData);
}

void BridgedContentSettingsData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedContentSettingsData", 40, "init()", 6, 0);
  __break(1u);
}

id BridgedContentSettingsData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedContentSettingsData);
}

id sub_AF80C()
{
  objc_class *v0;
  _BYTE *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for BridgedContentSubType();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___BAContentSubType_subTypeEnum] = 0;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, "init");
}

id sub_AF8A8()
{
  objc_class *v0;
  _BYTE *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for BridgedContentSubType();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___BAContentSubType_subTypeEnum] = 1;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, "init");
}

id sub_AF948()
{
  objc_class *v0;
  _BYTE *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for BridgedContentSubType();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___BAContentSubType_subTypeEnum] = 2;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, "init");
}

id sub_AF9E8()
{
  objc_class *v0;
  _BYTE *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for BridgedContentSubType();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___BAContentSubType_subTypeEnum] = 3;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, "init");
}

void BridgedContentSubType.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedContentSubType", 35, "init()", 6, 0);
  __break(1u);
}

id BridgedContentSubType.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedContentSubType);
}

unint64_t BridgedDeviceOrientation.swiftType.getter@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_AFB90(a1, (uint64_t)&type metadata for BridgedDeviceOrientation, a2);
}

id BridgedDoNotDisturbData.__allocating_init(startStatus:endStatus:)(uint64_t a1, uint64_t a2)
{
  return sub_B20C4(a1, a2, &OBJC_IVAR___BADoNotDisturbData_startStatus, &OBJC_IVAR___BADoNotDisturbData_endStatus);
}

id BridgedDoNotDisturbData.init(startStatus:endStatus:)(uint64_t a1, uint64_t a2)
{
  return sub_B214C(a1, a2, &OBJC_IVAR___BADoNotDisturbData_startStatus, &OBJC_IVAR___BADoNotDisturbData_endStatus, type metadata accessor for BridgedDoNotDisturbData);
}

void BridgedDoNotDisturbData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedDoNotDisturbData", 37, "init()", 6, 0);
  __break(1u);
}

id BridgedDoNotDisturbData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedDoNotDisturbData);
}

unint64_t BridgedGoalType.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t *sub_AFB68@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

unint64_t BridgedLaunchType.swiftType.getter@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_AFB90(a1, (uint64_t)&type metadata for BridgedLaunchType, a2);
}

unint64_t sub_AFB90@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v3;

  if (result >= 3)
  {
    v3 = result;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(a2, &v3, a2, &type metadata for Int);
    __break(1u);
  }
  else
  {
    *a3 = result;
  }
  return result;
}

id BridgedLibraryItemTypeData.__allocating_init(contentPrivateID:contentUserID:contentType:contentID:isSample:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v8;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  objc_super v22;

  v17 = (char *)objc_allocWithZone(v8);
  v18 = &v17[OBJC_IVAR___BALibraryItemTypeData_contentPrivateID];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  v19 = &v17[OBJC_IVAR___BALibraryItemTypeData_contentUserID];
  *(_QWORD *)v19 = a3;
  *((_QWORD *)v19 + 1) = a4;
  *(_QWORD *)&v17[OBJC_IVAR___BALibraryItemTypeData_contentType] = a5;
  v20 = &v17[OBJC_IVAR___BALibraryItemTypeData_contentID];
  *(_QWORD *)v20 = a6;
  *((_QWORD *)v20 + 1) = a7;
  *(_QWORD *)&v17[OBJC_IVAR___BALibraryItemTypeData_isSample] = a8;
  v22.receiver = v17;
  v22.super_class = v8;
  return objc_msgSendSuper2(&v22, "init");
}

id BridgedLibraryItemTypeData.init(contentPrivateID:contentUserID:contentType:contentID:isSample:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = &v8[OBJC_IVAR___BALibraryItemTypeData_contentPrivateID];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  v10 = &v8[OBJC_IVAR___BALibraryItemTypeData_contentUserID];
  *(_QWORD *)v10 = a3;
  *((_QWORD *)v10 + 1) = a4;
  *(_QWORD *)&v8[OBJC_IVAR___BALibraryItemTypeData_contentType] = a5;
  v11 = &v8[OBJC_IVAR___BALibraryItemTypeData_contentID];
  *(_QWORD *)v11 = a6;
  *((_QWORD *)v11 + 1) = a7;
  *(_QWORD *)&v8[OBJC_IVAR___BALibraryItemTypeData_isSample] = a8;
  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for BridgedLibraryItemTypeData();
  return objc_msgSendSuper2(&v13, "init");
}

void BridgedLibraryItemTypeData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedLibraryItemTypeData", 40, "init()", 6, 0);
  __break(1u);
}

id BridgedLibraryItemTypeData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedLibraryItemTypeData);
}

unint64_t BridgedLinkActionType.init(rawValue:)(unint64_t a1)
{
  return sub_B35FC(a1);
}

unint64_t sub_AFECC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_B35FC(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id BridgedLinkData.__allocating_init(previousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14)
{
  objc_class *v14;
  id v23;

  v23 = objc_allocWithZone(v14);
  return BridgedLinkData.init(previousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, *((uint64_t *)&a13 + 1), a14);
}

id BridgedLinkData.init(previousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  objc_super v30;

  v20 = &v19[OBJC_IVAR___BALinkData_previousSectionID];
  *(_QWORD *)v20 = a1;
  *((_QWORD *)v20 + 1) = a2;
  v21 = &v19[OBJC_IVAR___BALinkData_previousSectionName];
  *(_QWORD *)v21 = a3;
  *((_QWORD *)v21 + 1) = a4;
  v22 = &v19[OBJC_IVAR___BALinkData_previousContentID];
  *(_QWORD *)v22 = a5;
  *((_QWORD *)v22 + 1) = a6;
  *(_QWORD *)&v19[OBJC_IVAR___BALinkData_linkActionType] = a7;
  v23 = &v19[OBJC_IVAR___BALinkData_previousSeriesID];
  *(_QWORD *)v23 = a8;
  *((_QWORD *)v23 + 1) = a9;
  v24 = &v19[OBJC_IVAR___BALinkData_previousGenreID];
  *(_QWORD *)v24 = a10;
  *((_QWORD *)v24 + 1) = a11;
  v25 = &v19[OBJC_IVAR___BALinkData_previousCollectionID];
  *(_QWORD *)v25 = a12;
  *((_QWORD *)v25 + 1) = a13;
  v26 = &v19[OBJC_IVAR___BALinkData_previousAuthorID];
  *(_QWORD *)v26 = a14;
  *((_QWORD *)v26 + 1) = a15;
  v27 = &v19[OBJC_IVAR___BALinkData_previousFlowcaseID];
  *(_QWORD *)v27 = a16;
  *((_QWORD *)v27 + 1) = a17;
  v28 = &v19[OBJC_IVAR___BALinkData_previousBrickID];
  *(_QWORD *)v28 = a18;
  *((_QWORD *)v28 + 1) = a19;
  v30.receiver = v19;
  v30.super_class = (Class)type metadata accessor for BridgedLinkData();
  return objc_msgSendSuper2(&v30, "init");
}

uint64_t sub_B02A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousSectionID + 8);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousSectionName + 8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousContentID + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_linkActionType);
  if (v5 >= 6)
  {
    v21 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_linkActionType);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v3);
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedLinkActionType, &v21, &type metadata for BridgedLinkActionType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousContentID);
    v7 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousSectionName);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousSeriesID);
    v9 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousSeriesID + 8);
    v10 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousGenreID);
    v11 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousGenreID + 8);
    v12 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousCollectionID);
    v13 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousCollectionID + 8);
    v14 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousAuthorID);
    v15 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousAuthorID + 8);
    v16 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousFlowcaseID);
    v17 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousFlowcaseID + 8);
    v19 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousBrickID);
    v18 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousBrickID + 8);
    *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR___BALinkData_previousSectionID);
    *(_QWORD *)(a1 + 8) = v2;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v4;
    *(_BYTE *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 128) = v17;
    *(_QWORD *)(a1 + 136) = v19;
    *(_QWORD *)(a1 + 144) = v18;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    return swift_bridgeObjectRetain(v17);
  }
  return result;
}

void BridgedLinkData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedLinkData", 29, "init()", 6, 0);
  __break(1u);
}

id BridgedLinkData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedLinkData);
}

id BridgedMarkedData.__allocating_init(isFinishedDateSet:)(char a1)
{
  objc_class *v1;
  _BYTE *v3;
  objc_super v5;

  v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR___BAMarkedData_isFinishedDateSet] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id BridgedMarkedData.init(isFinishedDateSet:)(char a1)
{
  _BYTE *v1;
  objc_super v3;

  v1[OBJC_IVAR___BAMarkedData_isFinishedDateSet] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for BridgedMarkedData();
  return objc_msgSendSuper2(&v3, "init");
}

void sub_B0634(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR___BAMarkedData_isFinishedDateSet);
}

void BridgedMarkedData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedMarkedData", 31, "init()", 6, 0);
  __break(1u);
}

id BridgedMarkedData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedMarkedData);
}

id BridgedNotificationData.__allocating_init(notificationContentID:notificationID:notificationType:recoType:goalType:titleCode:title:messageCode:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  objc_class *v14;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  objc_super v30;

  v22 = (char *)objc_allocWithZone(v14);
  *(_QWORD *)&v22[OBJC_IVAR___BANotificationData_notificationContentID] = a1;
  v23 = &v22[OBJC_IVAR___BANotificationData_notificationID];
  *(_QWORD *)v23 = a2;
  *((_QWORD *)v23 + 1) = a3;
  *(_QWORD *)&v22[OBJC_IVAR___BANotificationData_notificationType] = a4;
  *(_QWORD *)&v22[OBJC_IVAR___BANotificationData_recoType] = a5;
  *(_QWORD *)&v22[OBJC_IVAR___BANotificationData_goalType] = a6;
  v24 = &v22[OBJC_IVAR___BANotificationData_titleCode];
  *(_QWORD *)v24 = a7;
  *((_QWORD *)v24 + 1) = a8;
  v25 = &v22[OBJC_IVAR___BANotificationData_title];
  *(_QWORD *)v25 = a9;
  *((_QWORD *)v25 + 1) = a10;
  v26 = &v22[OBJC_IVAR___BANotificationData_messageCode];
  *(_QWORD *)v26 = a11;
  *((_QWORD *)v26 + 1) = a12;
  v27 = &v22[OBJC_IVAR___BANotificationData_message];
  *(_QWORD *)v27 = a13;
  *((_QWORD *)v27 + 1) = a14;
  v30.receiver = v22;
  v30.super_class = v14;
  return objc_msgSendSuper2(&v30, "init");
}

id BridgedNotificationData.init(notificationContentID:notificationID:notificationType:recoType:goalType:titleCode:title:messageCode:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  objc_super v21;

  *(_QWORD *)&v14[OBJC_IVAR___BANotificationData_notificationContentID] = a1;
  v15 = &v14[OBJC_IVAR___BANotificationData_notificationID];
  *(_QWORD *)v15 = a2;
  *((_QWORD *)v15 + 1) = a3;
  *(_QWORD *)&v14[OBJC_IVAR___BANotificationData_notificationType] = a4;
  *(_QWORD *)&v14[OBJC_IVAR___BANotificationData_recoType] = a5;
  *(_QWORD *)&v14[OBJC_IVAR___BANotificationData_goalType] = a6;
  v16 = &v14[OBJC_IVAR___BANotificationData_titleCode];
  *(_QWORD *)v16 = a7;
  *((_QWORD *)v16 + 1) = a8;
  v17 = &v14[OBJC_IVAR___BANotificationData_title];
  *(_QWORD *)v17 = a9;
  *((_QWORD *)v17 + 1) = a10;
  v18 = &v14[OBJC_IVAR___BANotificationData_messageCode];
  *(_QWORD *)v18 = a11;
  *((_QWORD *)v18 + 1) = a12;
  v19 = &v14[OBJC_IVAR___BANotificationData_message];
  *(_QWORD *)v19 = a13;
  *((_QWORD *)v19 + 1) = a14;
  v21.receiver = v14;
  v21.super_class = (Class)type metadata accessor for BridgedNotificationData();
  return objc_msgSendSuper2(&v21, "init");
}

uint64_t sub_B09B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  ValueMetadata *v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_notificationContentID);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_notificationID + 8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_notificationType);
  if (v4 >= 4)
  {
    v18 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_notificationType);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v3);
    v17 = &type metadata for BridgedNotificationType;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_recoType);
    if (v5 >= 5)
    {
      v18 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_recoType);
      swift_bridgeObjectRetain(v2);
      swift_bridgeObjectRetain(v3);
      v17 = &type metadata for BridgedRecoType;
    }
    else
    {
      v6 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_goalType);
      if (v6 < 3)
      {
        v7 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_notificationID);
        v8 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_titleCode);
        v9 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_titleCode + 8);
        v10 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_title);
        v11 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_title + 8);
        v12 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_messageCode);
        v13 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_messageCode + 8);
        v15 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_message);
        v14 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_message + 8);
        *(_QWORD *)a1 = v2;
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v3;
        *(_BYTE *)(a1 + 24) = v4;
        *(_BYTE *)(a1 + 25) = v5;
        *(_BYTE *)(a1 + 26) = v6;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = v9;
        *(_QWORD *)(a1 + 48) = v10;
        *(_QWORD *)(a1 + 56) = v11;
        *(_QWORD *)(a1 + 64) = v12;
        *(_QWORD *)(a1 + 72) = v13;
        *(_QWORD *)(a1 + 80) = v15;
        *(_QWORD *)(a1 + 88) = v14;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v2);
        swift_bridgeObjectRetain(v3);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v11);
        return swift_bridgeObjectRetain(v13);
      }
      v18 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationData_goalType);
      swift_bridgeObjectRetain(v2);
      swift_bridgeObjectRetain(v3);
      v17 = &type metadata for BridgedGoalType;
    }
  }
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v17, &v18, v17, &type metadata for Int);
  __break(1u);
  return result;
}

void BridgedNotificationData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedNotificationData", 37, "init()", 6, 0);
  __break(1u);
}

id BridgedNotificationData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedNotificationData);
}

id BridgedNotificationEngagementData.__allocating_init(actionType:actionUrl:targetID:targetType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  objc_super v14;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR___BANotificationEngagementData_actionType] = a1;
  v12 = &v11[OBJC_IVAR___BANotificationEngagementData_actionUrl];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  *(_QWORD *)&v11[OBJC_IVAR___BANotificationEngagementData_targetID] = a4;
  *(_QWORD *)&v11[OBJC_IVAR___BANotificationEngagementData_targetType] = a5;
  v14.receiver = v11;
  v14.super_class = v5;
  return objc_msgSendSuper2(&v14, "init");
}

id BridgedNotificationEngagementData.init(actionType:actionUrl:targetID:targetType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  objc_super v8;

  *(_QWORD *)&v5[OBJC_IVAR___BANotificationEngagementData_actionType] = a1;
  v6 = &v5[OBJC_IVAR___BANotificationEngagementData_actionUrl];
  *(_QWORD *)v6 = a2;
  *((_QWORD *)v6 + 1) = a3;
  *(_QWORD *)&v5[OBJC_IVAR___BANotificationEngagementData_targetID] = a4;
  *(_QWORD *)&v5[OBJC_IVAR___BANotificationEngagementData_targetType] = a5;
  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for BridgedNotificationEngagementData();
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t sub_B0DE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  ValueMetadata *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationEngagementData_actionType);
  if (v2 >= 7)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationEngagementData_actionType);
    v8 = &type metadata for BridgedActionType;
  }
  else
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationEngagementData_targetID);
    v4 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationEngagementData_actionUrl + 8);
    v5 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationEngagementData_targetType);
    if (v5 < 3)
    {
      v6 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationEngagementData_actionUrl);
      *(_BYTE *)a1 = v2;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v3;
      *(_BYTE *)(a1 + 32) = v5;
      swift_bridgeObjectRetain(v3);
      return swift_bridgeObjectRetain(v4);
    }
    v9 = *(_QWORD *)(v1 + OBJC_IVAR___BANotificationEngagementData_targetType);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    v8 = &type metadata for BridgedTargetType;
  }
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v8, &v9, v8, &type metadata for Int);
  __break(1u);
  return result;
}

void BridgedNotificationEngagementData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedNotificationEngagementData", 47, "init()", 6, 0);
  __break(1u);
}

id BridgedNotificationEngagementData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedNotificationEngagementData);
}

id BridgedPurchaseData.__allocating_init(purchaseAttemptID:purchaseMethod:isPreorder:pricingParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *v15;
  objc_super v17;

  v13 = objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR___BAPurchaseData_purchaseAttemptID];
  *v14 = a1;
  v14[1] = a2;
  *(_QWORD *)&v13[OBJC_IVAR___BAPurchaseData_purchaseMethod] = a3;
  v13[OBJC_IVAR___BAPurchaseData_isPreorder] = a4;
  v15 = &v13[OBJC_IVAR___BAPurchaseData_pricingParameters];
  *v15 = a5;
  v15[1] = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, "init");
}

id BridgedPurchaseData.init(purchaseAttemptID:purchaseMethod:isPreorder:pricingParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  objc_super v10;

  v7 = &v6[OBJC_IVAR___BAPurchaseData_purchaseAttemptID];
  *v7 = a1;
  v7[1] = a2;
  *(_QWORD *)&v6[OBJC_IVAR___BAPurchaseData_purchaseMethod] = a3;
  v6[OBJC_IVAR___BAPurchaseData_isPreorder] = a4;
  v8 = &v6[OBJC_IVAR___BAPurchaseData_pricingParameters];
  *v8 = a5;
  v8[1] = a6;
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for BridgedPurchaseData();
  return objc_msgSendSuper2(&v10, "init");
}

void BridgedPurchaseData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedPurchaseData", 33, "init()", 6, 0);
  __break(1u);
}

id BridgedPurchaseData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedPurchaseData);
}

id BridgedPurchaseFailData.__allocating_init(purchaseFailureReason:errorCode:errorDescription:errorDomain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v13 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v13[OBJC_IVAR___BAPurchaseFailData_purchaseFailureReason] = a1;
  *(_QWORD *)&v13[OBJC_IVAR___BAPurchaseFailData_errorCode] = a2;
  v14 = &v13[OBJC_IVAR___BAPurchaseFailData_errorDescription];
  *(_QWORD *)v14 = a3;
  *((_QWORD *)v14 + 1) = a4;
  v15 = &v13[OBJC_IVAR___BAPurchaseFailData_errorDomain];
  *(_QWORD *)v15 = a5;
  *((_QWORD *)v15 + 1) = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, "init");
}

id BridgedPurchaseFailData.init(purchaseFailureReason:errorCode:errorDescription:errorDomain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  char *v8;
  objc_super v10;

  *(_QWORD *)&v6[OBJC_IVAR___BAPurchaseFailData_purchaseFailureReason] = a1;
  *(_QWORD *)&v6[OBJC_IVAR___BAPurchaseFailData_errorCode] = a2;
  v7 = &v6[OBJC_IVAR___BAPurchaseFailData_errorDescription];
  *(_QWORD *)v7 = a3;
  *((_QWORD *)v7 + 1) = a4;
  v8 = &v6[OBJC_IVAR___BAPurchaseFailData_errorDomain];
  *(_QWORD *)v8 = a5;
  *((_QWORD *)v8 + 1) = a6;
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for BridgedPurchaseFailData();
  return objc_msgSendSuper2(&v10, "init");
}

void BridgedPurchaseFailData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedPurchaseFailData", 37, "init()", 6, 0);
  __break(1u);
}

id BridgedPurchaseFailData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedPurchaseFailData);
}

void *BridgedReadingSessionData.percentCompletionStart.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___BAReadingSessionData_percentCompletionStart);
  v2 = v1;
  return v1;
}

void *BridgedReadingSessionData.percentCompletionEnd.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___BAReadingSessionData_percentCompletionEnd);
  v2 = v1;
  return v1;
}

id BridgedReadingSessionData.__allocating_init(percentCompletionStart:percentCompletionEnd:isFreeSample:deviceOrientation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  objc_super v11;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR___BAReadingSessionData_percentCompletionStart] = a1;
  *(_QWORD *)&v9[OBJC_IVAR___BAReadingSessionData_percentCompletionEnd] = a2;
  *(_QWORD *)&v9[OBJC_IVAR___BAReadingSessionData_isFreeSample] = a3;
  *(_QWORD *)&v9[OBJC_IVAR___BAReadingSessionData_deviceOrientation] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, "init");
}

id BridgedReadingSessionData.init(percentCompletionStart:percentCompletionEnd:isFreeSample:deviceOrientation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_super v6;

  *(_QWORD *)&v4[OBJC_IVAR___BAReadingSessionData_percentCompletionStart] = a1;
  *(_QWORD *)&v4[OBJC_IVAR___BAReadingSessionData_percentCompletionEnd] = a2;
  *(_QWORD *)&v4[OBJC_IVAR___BAReadingSessionData_isFreeSample] = a3;
  *(_QWORD *)&v4[OBJC_IVAR___BAReadingSessionData_deviceOrientation] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for BridgedReadingSessionData();
  return objc_msgSendSuper2(&v6, "init");
}

id sub_B15F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  id result;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSessionData_percentCompletionStart);
  v4 = 0;
  v5 = 0;
  if (v3)
  {
    objc_msgSend(*(id *)(v1 + OBJC_IVAR___BAReadingSessionData_percentCompletionStart), "floatValue");
    v5 = v6;
  }
  v7 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSessionData_percentCompletionEnd);
  if (v7)
  {
    objc_msgSend(*(id *)(v1 + OBJC_IVAR___BAReadingSessionData_percentCompletionEnd), "floatValue");
    v4 = v8;
  }
  result = objc_msgSend(*(id *)(v1 + OBJC_IVAR___BAReadingSessionData_isFreeSample), "BOOLValue");
  v10 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSessionData_deviceOrientation);
  if (v10 >= 3)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSessionData_deviceOrientation);
    result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedDeviceOrientation, &v11, &type metadata for BridgedDeviceOrientation, &type metadata for Int);
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = v5;
    *(_BYTE *)(a1 + 4) = v3 == 0;
    *(_DWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 12) = v7 == 0;
    *(_BYTE *)(a1 + 13) = (_BYTE)result;
    *(_BYTE *)(a1 + 14) = v10;
  }
  return result;
}

void BridgedReadingSessionData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedReadingSessionData", 39, "init()", 6, 0);
  __break(1u);
}

id BridgedReadingSessionData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedReadingSessionData);
}

id BridgedReadingSettingsData.__allocating_init(scrollViewStatus:autoNightThemeStatus:backgroundColor:font:fontSize:brightnessLevel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  char *v15;
  char *v16;
  objc_super v18;

  v15 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v15[OBJC_IVAR___BAReadingSettingsData_scrollViewStatus] = a1;
  *(_QWORD *)&v15[OBJC_IVAR___BAReadingSettingsData_autoNightThemeStatus] = a2;
  *(_QWORD *)&v15[OBJC_IVAR___BAReadingSettingsData_backgroundColor] = a3;
  v16 = &v15[OBJC_IVAR___BAReadingSettingsData_font];
  *(_QWORD *)v16 = a4;
  *((_QWORD *)v16 + 1) = a5;
  *(_QWORD *)&v15[OBJC_IVAR___BAReadingSettingsData_fontSize] = a6;
  *(_QWORD *)&v15[OBJC_IVAR___BAReadingSettingsData_brightnessLevel] = a7;
  v18.receiver = v15;
  v18.super_class = v7;
  return objc_msgSendSuper2(&v18, "init");
}

id BridgedReadingSettingsData.init(scrollViewStatus:autoNightThemeStatus:backgroundColor:font:fontSize:brightnessLevel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  objc_super v10;

  *(_QWORD *)&v7[OBJC_IVAR___BAReadingSettingsData_scrollViewStatus] = a1;
  *(_QWORD *)&v7[OBJC_IVAR___BAReadingSettingsData_autoNightThemeStatus] = a2;
  *(_QWORD *)&v7[OBJC_IVAR___BAReadingSettingsData_backgroundColor] = a3;
  v8 = &v7[OBJC_IVAR___BAReadingSettingsData_font];
  *(_QWORD *)v8 = a4;
  *((_QWORD *)v8 + 1) = a5;
  *(_QWORD *)&v7[OBJC_IVAR___BAReadingSettingsData_fontSize] = a6;
  *(_QWORD *)&v7[OBJC_IVAR___BAReadingSettingsData_brightnessLevel] = a7;
  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for BridgedReadingSettingsData();
  return objc_msgSendSuper2(&v10, "init");
}

id sub_B1998@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  id result;
  int v13;
  ValueMetadata *v14;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_scrollViewStatus);
  if (v3 >= 3)
  {
    v15 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_scrollViewStatus);
    v14 = &type metadata for BridgedScrollViewStatus;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_autoNightThemeStatus);
    if (v4 >= 3)
    {
      v15 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_autoNightThemeStatus);
      v14 = &type metadata for BridgedAutoNightThemeStatus;
    }
    else
    {
      v5 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_backgroundColor);
      if (v5 < 5)
      {
        v6 = 0x4030201uLL >> (8 * v5);
        v8 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_font);
        v7 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_font + 8);
        v9 = *(void **)(v1 + OBJC_IVAR___BAReadingSettingsData_fontSize);
        swift_bridgeObjectRetain(v7);
        objc_msgSend(v9, "floatValue");
        v11 = v10;
        result = objc_msgSend(*(id *)(v1 + OBJC_IVAR___BAReadingSettingsData_brightnessLevel), "floatValue");
        *(_BYTE *)a1 = v3;
        *(_BYTE *)(a1 + 1) = v4;
        *(_BYTE *)(a1 + 2) = v6;
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 16) = v7;
        *(_DWORD *)(a1 + 24) = v11;
        *(_DWORD *)(a1 + 28) = v13;
        return result;
      }
      v15 = *(_QWORD *)(v1 + OBJC_IVAR___BAReadingSettingsData_backgroundColor);
      v14 = &type metadata for BridgedBackgroundColor;
    }
  }
  result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v14, &v15, v14, &type metadata for Int);
  __break(1u);
  return result;
}

void BridgedReadingSettingsData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedReadingSettingsData", 40, "init()", 6, 0);
  __break(1u);
}

id BridgedReadingSettingsData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedReadingSettingsData);
}

unint64_t BridgedRecoType.init(rawValue:)(unint64_t a1)
{
  return sub_B370C(a1);
}

unint64_t sub_B1B9C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_B370C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t BridgedRemoteConfigNamespaceData.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_name);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_name + 8));
  return v1;
}

uint64_t BridgedRemoteConfigNamespaceData.treatmentIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_treatmentIDs));
}

uint64_t BridgedRemoteConfigNamespaceData.segmentIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentIDs));
}

uint64_t BridgedRemoteConfigNamespaceData.segmentSetIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentSetIDs));
}

uint64_t BridgedRemoteConfigNamespaceData.previousTreatmentIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_previousTreatmentIDs));
}

uint64_t BridgedRemoteConfigNamespaceData.previousSegmentIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentIDs));
}

uint64_t BridgedRemoteConfigNamespaceData.previousSegmentSetIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentSetIDs));
}

id BridgedRemoteConfigNamespaceData.__allocating_init(name:treatmentIDs:segmentIDs:segmentSetIDs:previousTreatmentIDs:previousSegmentIDs:previousSegmentSetIDs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v8;
  char *v17;
  char *v18;
  objc_super v20;

  v17 = (char *)objc_allocWithZone(v8);
  v18 = &v17[OBJC_IVAR___BARemoteConfigNamespaceData_name];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  *(_QWORD *)&v17[OBJC_IVAR___BARemoteConfigNamespaceData_treatmentIDs] = a3;
  *(_QWORD *)&v17[OBJC_IVAR___BARemoteConfigNamespaceData_segmentIDs] = a4;
  *(_QWORD *)&v17[OBJC_IVAR___BARemoteConfigNamespaceData_segmentSetIDs] = a5;
  *(_QWORD *)&v17[OBJC_IVAR___BARemoteConfigNamespaceData_previousTreatmentIDs] = a6;
  *(_QWORD *)&v17[OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentIDs] = a7;
  *(_QWORD *)&v17[OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentSetIDs] = a8;
  v20.receiver = v17;
  v20.super_class = v8;
  return objc_msgSendSuper2(&v20, "init");
}

id BridgedRemoteConfigNamespaceData.init(name:treatmentIDs:segmentIDs:segmentSetIDs:previousTreatmentIDs:previousSegmentIDs:previousSegmentSetIDs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  objc_super v11;

  v9 = &v8[OBJC_IVAR___BARemoteConfigNamespaceData_name];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  *(_QWORD *)&v8[OBJC_IVAR___BARemoteConfigNamespaceData_treatmentIDs] = a3;
  *(_QWORD *)&v8[OBJC_IVAR___BARemoteConfigNamespaceData_segmentIDs] = a4;
  *(_QWORD *)&v8[OBJC_IVAR___BARemoteConfigNamespaceData_segmentSetIDs] = a5;
  *(_QWORD *)&v8[OBJC_IVAR___BARemoteConfigNamespaceData_previousTreatmentIDs] = a6;
  *(_QWORD *)&v8[OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentIDs] = a7;
  *(_QWORD *)&v8[OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentSetIDs] = a8;
  v11.receiver = v8;
  v11.super_class = (Class)type metadata accessor for BridgedRemoteConfigNamespaceData();
  return objc_msgSendSuper2(&v11, "init");
}

uint64_t sub_B1DC0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_name + 8);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_treatmentIDs);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentIDs);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_segmentSetIDs);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_previousTreatmentIDs);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentIDs);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_previousSegmentSetIDs);
  *a1 = *(_QWORD *)(v1 + OBJC_IVAR___BARemoteConfigNamespaceData_name);
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v7);
}

void BridgedRemoteConfigNamespaceData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedRemoteConfigNamespaceData", 46, "init()", 6, 0);
  __break(1u);
}

id BridgedRemoteConfigNamespaceData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedRemoteConfigNamespaceData);
}

unint64_t BridgedSeriesType.init(rawValue:)(unint64_t a1)
{
  return sub_B373C(a1);
}

unint64_t sub_B1F90@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_B373C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t BridgedSessionListeningData.timeSpentListening.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BASessionListeningData_timeSpentListening);
}

uint64_t BridgedSessionListeningData.uniqueAudiobooksListened.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BASessionListeningData_uniqueAudiobooksListened);
}

id BridgedSessionListeningData.__allocating_init(timeSpentListening:uniqueAudiobooksListened:)(uint64_t a1, uint64_t a2)
{
  return sub_B20C4(a1, a2, &OBJC_IVAR___BASessionListeningData_timeSpentListening, &OBJC_IVAR___BASessionListeningData_uniqueAudiobooksListened);
}

id BridgedSessionListeningData.init(timeSpentListening:uniqueAudiobooksListened:)(uint64_t a1, uint64_t a2)
{
  return sub_B214C(a1, a2, &OBJC_IVAR___BASessionListeningData_timeSpentListening, &OBJC_IVAR___BASessionListeningData_uniqueAudiobooksListened, type metadata accessor for BridgedSessionListeningData);
}

void BridgedSessionListeningData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedSessionListeningData", 41, "init()", 6, 0);
  __break(1u);
}

id BridgedSessionListeningData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedSessionListeningData);
}

uint64_t BridgedSessionReadingData.timeSpentReading.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BASessionReadingData_timeSpentReading);
}

uint64_t BridgedSessionReadingData.uniqueBooksRead.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BASessionReadingData_uniqueBooksRead);
}

id BridgedSessionReadingData.__allocating_init(timeSpentReading:uniqueBooksRead:)(uint64_t a1, uint64_t a2)
{
  return sub_B20C4(a1, a2, &OBJC_IVAR___BASessionReadingData_timeSpentReading, &OBJC_IVAR___BASessionReadingData_uniqueBooksRead);
}

id sub_B20C4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  objc_class *v4;
  char *v9;
  objc_super v11;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[*a3] = a1;
  *(_QWORD *)&v9[*a4] = a2;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, "init");
}

id BridgedSessionReadingData.init(timeSpentReading:uniqueBooksRead:)(uint64_t a1, uint64_t a2)
{
  return sub_B214C(a1, a2, &OBJC_IVAR___BASessionReadingData_timeSpentReading, &OBJC_IVAR___BASessionReadingData_uniqueBooksRead, type metadata accessor for BridgedSessionReadingData);
}

id sub_B214C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t (*a5)(void))
{
  char *v5;
  objc_super v7;

  *(_QWORD *)&v5[*a3] = a1;
  *(_QWORD *)&v5[*a4] = a2;
  v7.receiver = v5;
  v7.super_class = (Class)a5();
  return objc_msgSendSuper2(&v7, "init");
}

id sub_B21A8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t (*a7)(void))
{
  objc_super v8;

  *(_QWORD *)&a1[*a5] = a3;
  *(_QWORD *)&a1[*a6] = a4;
  v8.receiver = a1;
  v8.super_class = (Class)a7();
  return objc_msgSendSuper2(&v8, "init");
}

void BridgedSessionReadingData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedSessionReadingData", 39, "init()", 6, 0);
  __break(1u);
}

id BridgedSessionReadingData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedSessionReadingData);
}

unint64_t BridgedTabType.init(rawValue:)(unint64_t a1)
{
  return sub_B378C(a1);
}

BOOL sub_B2270(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_B2284()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

unint64_t sub_B22AC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_B378C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_B22DC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t BridgedUpSellData.location.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BAUpSellData_location);
}

uint64_t BridgedUpSellData.variant.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___BAUpSellData_variant);
}

uint64_t BridgedUpSellData.variantVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BAUpSellData_variantVersion);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BAUpSellData_variantVersion + 8));
  return v1;
}

id BridgedUpSellData.__allocating_init(location:variant:variantVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  objc_super v12;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR___BAUpSellData_location] = a1;
  *(_QWORD *)&v9[OBJC_IVAR___BAUpSellData_variant] = a2;
  v10 = &v9[OBJC_IVAR___BAUpSellData_variantVersion];
  *(_QWORD *)v10 = a3;
  *((_QWORD *)v10 + 1) = a4;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, "init");
}

id BridgedUpSellData.init(location:variant:variantVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  objc_super v7;

  *(_QWORD *)&v4[OBJC_IVAR___BAUpSellData_location] = a1;
  *(_QWORD *)&v4[OBJC_IVAR___BAUpSellData_variant] = a2;
  v5 = &v4[OBJC_IVAR___BAUpSellData_variantVersion];
  *(_QWORD *)v5 = a3;
  *((_QWORD *)v5 + 1) = a4;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for BridgedUpSellData();
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t sub_B2504@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  ValueMetadata *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___BAUpSellData_location);
  if (v2 >= 4)
  {
    v8 = *(_QWORD *)(v1 + OBJC_IVAR___BAUpSellData_location);
    v7 = &type metadata for BridgedUpSellLocation;
  }
  else
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR___BAUpSellData_variant);
    if (v3 < 3)
    {
      v5 = *(_QWORD *)(v1 + OBJC_IVAR___BAUpSellData_variantVersion);
      v4 = *(_QWORD *)(v1 + OBJC_IVAR___BAUpSellData_variantVersion + 8);
      *(_BYTE *)a1 = v2;
      *(_BYTE *)(a1 + 1) = v3;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v4;
      return swift_bridgeObjectRetain(v4);
    }
    v8 = *(_QWORD *)(v1 + OBJC_IVAR___BAUpSellData_variant);
    v7 = &type metadata for BridgedUpSellVariant;
  }
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v7, &v8, v7, &type metadata for Int);
  __break(1u);
  return result;
}

void BridgedUpSellData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedUpSellData", 31, "init()", 6, 0);
  __break(1u);
}

id BridgedUpSellData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedUpSellData);
}

id BridgedViewData.__allocating_init(type:action:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_B2628(a1, a2, a3, &OBJC_IVAR___BAViewData_type, &OBJC_IVAR___BAViewData_action, &OBJC_IVAR___BAViewData_location);
}

id sub_B2628(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  objc_class *v6;
  char *v13;
  objc_super v15;

  v13 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v13[*a4] = a1;
  *(_QWORD *)&v13[*a5] = a2;
  *(_QWORD *)&v13[*a6] = a3;
  v15.receiver = v13;
  v15.super_class = v6;
  return objc_msgSendSuper2(&v15, "init");
}

id BridgedViewData.init(type:action:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_B26D0(a1, a2, a3, &OBJC_IVAR___BAViewData_type, &OBJC_IVAR___BAViewData_action, &OBJC_IVAR___BAViewData_location, type metadata accessor for BridgedViewData);
}

id sub_B26D0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t (*a7)(void))
{
  char *v7;
  objc_super v9;

  *(_QWORD *)&v7[*a4] = a1;
  *(_QWORD *)&v7[*a5] = a2;
  *(_QWORD *)&v7[*a6] = a3;
  v9.receiver = v7;
  v9.super_class = (Class)a7();
  return objc_msgSendSuper2(&v9, "init");
}

void sub_B2778(_BYTE *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  ValueMetadata *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___BAViewData_type);
  if (v2 >= 5)
  {
    v6 = *(_QWORD *)(v1 + OBJC_IVAR___BAViewData_type);
    v5 = &type metadata for BridgedViewType;
  }
  else
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR___BAViewData_action);
    if (v3 >= 7)
    {
      v6 = *(_QWORD *)(v1 + OBJC_IVAR___BAViewData_action);
      v5 = &type metadata for BridgedViewAction;
    }
    else
    {
      v4 = *(_QWORD *)(v1 + OBJC_IVAR___BAViewData_location);
      if (v4 < 3)
      {
        *a1 = v2;
        a1[1] = v3;
        a1[2] = v4;
        return;
      }
      v6 = *(_QWORD *)(v1 + OBJC_IVAR___BAViewData_location);
      v5 = &type metadata for BridgedViewLocation;
    }
  }
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v5, &v6, v5, &type metadata for Int);
  __break(1u);
}

void BridgedViewData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedViewData", 29, "init()", 6, 0);
  __break(1u);
}

id BridgedViewData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedViewData);
}

Swift::Int sub_B2880()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_B28C4(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t BridgedWidgetData.widgetFamily.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BAWidgetData_widgetFamily);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BAWidgetData_widgetFamily + 8));
  return v1;
}

uint64_t BridgedWidgetData.displayMode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BAWidgetData_displayMode);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BAWidgetData_displayMode + 8));
  return v1;
}

uint64_t BridgedWidgetData.isContentExposed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___BAWidgetData_isContentExposed);
}

uint64_t BridgedWidgetData.isStreakExposed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___BAWidgetData_isStreakExposed);
}

id BridgedWidgetData.__allocating_init(widgetFamily:displayMode:isContentExposed:isStreakExposed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  objc_class *v6;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *v15;
  objc_super v17;

  v13 = objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR___BAWidgetData_widgetFamily];
  *v14 = a1;
  v14[1] = a2;
  v15 = &v13[OBJC_IVAR___BAWidgetData_displayMode];
  *v15 = a3;
  v15[1] = a4;
  v13[OBJC_IVAR___BAWidgetData_isContentExposed] = a5;
  v13[OBJC_IVAR___BAWidgetData_isStreakExposed] = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, "init");
}

id BridgedWidgetData.init(widgetFamily:displayMode:isContentExposed:isStreakExposed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  objc_super v10;

  v7 = &v6[OBJC_IVAR___BAWidgetData_widgetFamily];
  *v7 = a1;
  v7[1] = a2;
  v8 = &v6[OBJC_IVAR___BAWidgetData_displayMode];
  *v8 = a3;
  v8[1] = a4;
  v6[OBJC_IVAR___BAWidgetData_isContentExposed] = a5;
  v6[OBJC_IVAR___BAWidgetData_isStreakExposed] = a6;
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for BridgedWidgetData();
  return objc_msgSendSuper2(&v10, "init");
}

void BridgedWidgetData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.BridgedWidgetData", 31, "init()", 6, 0);
  __break(1u);
}

id BridgedWidgetData.__deallocating_deinit()
{
  return sub_B2BAC(type metadata accessor for BridgedWidgetData);
}

id sub_B2BAC(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_B2BF0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *a3 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *a4 + 8));
}

void ContentSubType.bridgeType.getter()
{
  __asm { BR              X10 }
}

id sub_B2C58()
{
  objc_class *v0;
  _BYTE *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for BridgedContentSubType();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___BAContentSubType_subTypeEnum] = 0;
  return objc_msgSendSuper2(&v3, "init", v1, v0);
}

uint64_t sub_B2D10(char a1, int64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL a7, void *a8)
{
  BAEventReporter **v8;
  uint64_t result;

  result = sub_B2DBC(a1, a2, a3, *v8, &qword_29BC90, &type metadata for LibraryEditActionData, a7, a8);
  *v8 = (BAEventReporter *)result;
  return result;
}

uint64_t sub_B2D3C(char a1, int64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL a7, void *a8)
{
  BAEventReporter **v8;
  uint64_t result;

  result = sub_B2DBC(a1, a2, a3, *v8, &qword_29BC88, &type metadata for DragDropItemData, a7, a8);
  *v8 = (BAEventReporter *)result;
  return result;
}

uint64_t sub_B2D68(char a1, int64_t a2, char a3, uint64_t a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  BAEventReporter **v8;
  uint64_t result;

  result = sub_B2F44(a1, a2, a3, *v8, a5, a6, a7, a8);
  *v8 = (BAEventReporter *)result;
  return result;
}

uint64_t sub_B2D84(char a1, int64_t a2, char a3, uint64_t a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  BAEventReporter **v8;
  uint64_t result;

  result = sub_B30BC(a1, a2, a3, *v8, a5, a6, a7, a8);
  *v8 = (BAEventReporter *)result;
  return result;
}

uint64_t sub_B2DA0(char a1, int64_t a2, void *a3, uint64_t a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  BAEventReporter **v8;
  uint64_t result;

  result = sub_B3220(a1, a2, a3, *v8, a5, a6, a7, a8);
  *v8 = (BAEventReporter *)result;
  return result;
}

uint64_t sub_B2DBC(char a1, int64_t a2, void *a3, BAEventReporter *a4, uint64_t *a5, void *a6, BOOL a7, void *a8)
{
  unint64_t v10;
  objc_class *v11;
  Class isa;
  Class v13;
  uint64_t v14;
  BAEventReporter *v15;
  size_t v16;
  char *v17;
  BAEventReporter *v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v10 = *(_QWORD *)a4[1].dataProviders;
    v11 = (objc_class *)(v10 >> 1);
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if ((uint64_t)v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v11 = (objc_class *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = (objc_class *)a2;
    }
  }
  else
  {
    v11 = (objc_class *)a2;
  }
  isa = a4[1].super.isa;
  if ((uint64_t)v11 <= (uint64_t)isa)
    v13 = a4[1].super.isa;
  else
    v13 = v11;
  if (v13)
  {
    v14 = sub_71B4(a5);
    v15 = (BAEventReporter *)swift_allocObject(v14, 48 * (_QWORD)v13 + 32, 7);
    v16 = j__malloc_size(v15);
    v15[1].super.isa = isa;
    *(_QWORD *)v15[1].dataProviders = 2 * ((uint64_t)(v16 - 32) / 48);
  }
  else
  {
    v15 = (BAEventReporter *)&_swiftEmptyArrayStorage;
  }
  v17 = (char *)&v15[2];
  v18 = a4 + 2;
  if ((a1 & 1) != 0)
  {
    if (v15 != a4 || v17 >= (char *)&v18[3 * (_QWORD)isa])
      memmove(v17, v18, 48 * (_QWORD)isa);
    a4[1].super.isa = 0;
    goto LABEL_28;
  }
  if (v18 >= (BAEventReporter *)&v17[48 * (_QWORD)isa] || v17 >= (char *)&v18[3 * (_QWORD)isa])
  {
    swift_arrayInitWithCopy(v17);
LABEL_28:
    swift_release(a4, (SEL)v18, a3, a4, (int64_t)a5, a6, a7, a8);
    return (uint64_t)v15;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_B2F44(char a1, int64_t a2, char a3, BAEventReporter *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  unint64_t v10;
  objc_class *v11;
  Class isa;
  Class v13;
  uint64_t v14;
  BAEventReporter *v15;
  size_t v16;
  char *v17;
  BAEventReporter *v18;
  size_t v19;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v10 = *(_QWORD *)a4[1].dataProviders;
    v11 = (objc_class *)(v10 >> 1);
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if ((uint64_t)v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v11 = (objc_class *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = (objc_class *)a2;
    }
  }
  else
  {
    v11 = (objc_class *)a2;
  }
  isa = a4[1].super.isa;
  if ((uint64_t)v11 <= (uint64_t)isa)
    v13 = a4[1].super.isa;
  else
    v13 = v11;
  if (v13)
  {
    v14 = sub_71B4(&qword_29BC70);
    v15 = (BAEventReporter *)swift_allocObject(v14, 24 * (_QWORD)v13 + 32, 7);
    v16 = j__malloc_size(v15);
    v15[1].super.isa = isa;
    *(_QWORD *)v15[1].dataProviders = 2 * ((uint64_t)(v16 - 32) / 24);
  }
  else
  {
    v15 = (BAEventReporter *)&_swiftEmptyArrayStorage;
  }
  v17 = (char *)&v15[2];
  v18 = a4 + 2;
  v19 = 24 * (_QWORD)isa;
  if ((a1 & 1) != 0)
  {
    if (v15 != a4 || v17 >= (char *)v18 + v19)
      memmove(v17, v18, v19);
    a4[1].super.isa = 0;
    goto LABEL_28;
  }
  if (v18 >= (BAEventReporter *)&v17[v19] || v17 >= (char *)v18 + v19)
  {
    swift_arrayInitWithCopy(v17);
LABEL_28:
    swift_release(a4, (SEL)v18, (id)v19, a4, a5, a6, a7, a8);
    return (uint64_t)v15;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_B30BC(char a1, int64_t a2, char a3, BAEventReporter *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  unint64_t v10;
  objc_class *v11;
  Class isa;
  Class v13;
  uint64_t v14;
  BAEventReporter *v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  BAEventReporter *v19;
  char *v20;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v10 = *(_QWORD *)a4[1].dataProviders;
    v11 = (objc_class *)(v10 >> 1);
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if ((uint64_t)v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v11 = (objc_class *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = (objc_class *)a2;
    }
  }
  else
  {
    v11 = (objc_class *)a2;
  }
  isa = a4[1].super.isa;
  if ((uint64_t)v11 <= (uint64_t)isa)
    v13 = a4[1].super.isa;
  else
    v13 = v11;
  if (v13)
  {
    v14 = sub_71B4(&qword_29BC80);
    v15 = (BAEventReporter *)swift_allocObject(v14, ((_QWORD)v13 << 6) | 0x20, 7);
    v16 = j__malloc_size(v15);
    v17 = v16 - 32;
    if (v16 < 32)
      v17 = v16 + 31;
    v15[1].super.isa = isa;
    *(_QWORD *)v15[1].dataProviders = 2 * (v17 >> 6);
  }
  else
  {
    v15 = (BAEventReporter *)&_swiftEmptyArrayStorage;
  }
  v18 = (char *)&v15[2];
  v19 = a4 + 2;
  v20 = (char *)((_QWORD)isa << 6);
  if ((a1 & 1) != 0)
  {
    if (v15 != a4 || v18 >= &v20[(_QWORD)v19])
      memmove(v18, v19, (size_t)v20);
    a4[1].super.isa = 0;
    goto LABEL_30;
  }
  if ((char *)v19 >= &v20[(_QWORD)v18] || v18 >= &v20[(_QWORD)v19])
  {
    swift_arrayInitWithCopy(v18);
LABEL_30:
    swift_release(a4, (SEL)v19, v20, a4, a5, a6, a7, a8);
    return (uint64_t)v15;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_B3220(char a1, int64_t a2, void *a3, BAEventReporter *a4, int64_t a5, void *a6, BOOL a7, void *a8)
{
  unint64_t v10;
  objc_class *v11;
  Class isa;
  Class v13;
  uint64_t v14;
  BAEventReporter *v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  BAEventReporter *v19;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v10 = *(_QWORD *)a4[1].dataProviders;
    v11 = (objc_class *)(v10 >> 1);
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if ((uint64_t)v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v11 = (objc_class *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = (objc_class *)a2;
    }
  }
  else
  {
    v11 = (objc_class *)a2;
  }
  isa = a4[1].super.isa;
  if ((uint64_t)v11 <= (uint64_t)isa)
    v13 = a4[1].super.isa;
  else
    v13 = v11;
  if (v13)
  {
    v14 = sub_71B4(&qword_29BC78);
    v15 = (BAEventReporter *)swift_allocObject(v14, ((_QWORD)v13 << 6) | 0x20, 7);
    v16 = j__malloc_size(v15);
    v17 = v16 - 32;
    if (v16 < 32)
      v17 = v16 + 31;
    v15[1].super.isa = isa;
    *(_QWORD *)v15[1].dataProviders = 2 * (v17 >> 6);
  }
  else
  {
    v15 = (BAEventReporter *)_swiftEmptyArrayStorage;
  }
  v18 = (char *)&v15[2];
  v19 = a4 + 2;
  if ((a1 & 1) != 0)
  {
    if (v15 != a4 || v18 >= (char *)&v19[4 * (_QWORD)isa])
      memmove(v18, v19, (_QWORD)isa << 6);
    a4[1].super.isa = 0;
    goto LABEL_30;
  }
  if (v19 >= (BAEventReporter *)&v18[64 * (_QWORD)isa] || v18 >= (char *)&v19[4 * (_QWORD)isa])
  {
    swift_arrayInitWithCopy(v18);
LABEL_30:
    swift_release(a4, (SEL)v19, a3, a4, a5, a6, a7, a8);
    return (uint64_t)v15;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BridgedBackgroundColorData()
{
  return objc_opt_self(BABackgroundColorData);
}

uint64_t type metadata accessor for BridgedBooksTreatmentData()
{
  return objc_opt_self(BABooksTreatmentData);
}

uint64_t type metadata accessor for BridgedCollectionIDData()
{
  return objc_opt_self(BACollectionIDData);
}

uint64_t type metadata accessor for BridgedCollectionSummaryData()
{
  return objc_opt_self(BACollectionSummaryData);
}

id sub_B3408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  id v20;
  char *v21;
  id v22;
  id v23;
  unsigned __int8 v24;
  char *v25;
  objc_super v27;

  v17 = &v16[OBJC_IVAR___BAContentData_contentID];
  *(_QWORD *)v17 = a1;
  *((_QWORD *)v17 + 1) = a2;
  *(_QWORD *)&v16[OBJC_IVAR___BAContentData_contentType] = a3;
  v18 = &v16[OBJC_IVAR___BAContentData_contentPrivateID];
  *(_QWORD *)v18 = a4;
  *((_QWORD *)v18 + 1) = a5;
  v19 = &v16[OBJC_IVAR___BAContentData_contentUserID];
  *(_QWORD *)v19 = a6;
  *((_QWORD *)v19 + 1) = a7;
  *(_QWORD *)&v16[OBJC_IVAR___BAContentData_contentAcquisitionType] = a8;
  *(_QWORD *)&v16[OBJC_IVAR___BAContentData_contentSubType] = a9;
  *(_QWORD *)&v16[OBJC_IVAR___BAContentData_contentLength] = a10;
  *(_QWORD *)&v16[OBJC_IVAR___BAContentData_supplementalContentCount] = a11;
  *(_QWORD *)&v16[OBJC_IVAR___BAContentData_seriesType] = a12;
  *(_QWORD *)&v16[OBJC_IVAR___BAContentData_productionType] = a13;
  v20 = a11;
  v21 = v16;
  v22 = a9;
  v23 = a10;
  if (a14)
    v24 = objc_msgSend(a14, "BOOLValue");
  else
    v24 = 2;
  v16[OBJC_IVAR___BAContentData_isUnified] = v24;
  v16[OBJC_IVAR___BAContentData_isAccoladedContent] = 2;
  v25 = &v16[OBJC_IVAR___BAContentData_contentKind];
  *(_QWORD *)v25 = a15;
  *((_QWORD *)v25 + 1) = a16;

  v27.receiver = v16;
  v27.super_class = (Class)type metadata accessor for BridgedContentData();
  return objc_msgSendSuper2(&v27, "init");
}

uint64_t type metadata accessor for BridgedContentData()
{
  return objc_opt_self(BAContentData);
}

uint64_t type metadata accessor for BridgedContentSettingsData()
{
  return objc_opt_self(BAContentSettingsData);
}

uint64_t type metadata accessor for BridgedContentSubType()
{
  return objc_opt_self(BAContentSubType);
}

uint64_t type metadata accessor for BridgedDoNotDisturbData()
{
  return objc_opt_self(BADoNotDisturbData);
}

uint64_t type metadata accessor for BridgedLibraryItemTypeData()
{
  return objc_opt_self(BALibraryItemTypeData);
}

unint64_t sub_B35FC(unint64_t result)
{
  if (result > 5)
    return 0;
  return result;
}

uint64_t type metadata accessor for BridgedLinkData()
{
  return objc_opt_self(BALinkData);
}

uint64_t type metadata accessor for BridgedMarkedData()
{
  return objc_opt_self(BAMarkedData);
}

uint64_t type metadata accessor for BridgedNotificationData()
{
  return objc_opt_self(BANotificationData);
}

uint64_t type metadata accessor for BridgedNotificationEngagementData()
{
  return objc_opt_self(BANotificationEngagementData);
}

uint64_t type metadata accessor for BridgedPurchaseData()
{
  return objc_opt_self(BAPurchaseData);
}

uint64_t type metadata accessor for BridgedPurchaseFailData()
{
  return objc_opt_self(BAPurchaseFailData);
}

uint64_t type metadata accessor for BridgedReadingSessionData()
{
  return objc_opt_self(BAReadingSessionData);
}

uint64_t type metadata accessor for BridgedReadingSettingsData()
{
  return objc_opt_self(BAReadingSettingsData);
}

unint64_t sub_B370C(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

uint64_t type metadata accessor for BridgedRemoteConfigNamespaceData()
{
  return objc_opt_self(BARemoteConfigNamespaceData);
}

unint64_t sub_B373C(unint64_t result)
{
  if (result > 3)
    return 0;
  return result;
}

uint64_t type metadata accessor for BridgedSessionListeningData()
{
  return objc_opt_self(BASessionListeningData);
}

uint64_t type metadata accessor for BridgedSessionReadingData()
{
  return objc_opt_self(BASessionReadingData);
}

unint64_t sub_B378C(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

uint64_t type metadata accessor for BridgedUpSellData()
{
  return objc_opt_self(BAUpSellData);
}

uint64_t type metadata accessor for BridgedViewData()
{
  return objc_opt_self(BAViewData);
}

uint64_t type metadata accessor for BridgedWidgetData()
{
  return objc_opt_self(BAWidgetData);
}

unint64_t sub_B3800()
{
  unint64_t result;

  result = qword_29B7D8;
  if (!qword_29B7D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedActionType, &type metadata for BridgedActionType);
    atomic_store(result, (unint64_t *)&qword_29B7D8);
  }
  return result;
}

unint64_t sub_B3848()
{
  unint64_t result;

  result = qword_29B7E0;
  if (!qword_29B7E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedAutoNightThemeStatus, &type metadata for BridgedAutoNightThemeStatus);
    atomic_store(result, (unint64_t *)&qword_29B7E0);
  }
  return result;
}

unint64_t sub_B3890()
{
  unint64_t result;

  result = qword_29B7E8;
  if (!qword_29B7E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedBackgroundColor, &type metadata for BridgedBackgroundColor);
    atomic_store(result, (unint64_t *)&qword_29B7E8);
  }
  return result;
}

unint64_t sub_B38D8()
{
  unint64_t result;

  result = qword_29B7F0;
  if (!qword_29B7F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedContentAcquisitionType, &type metadata for BridgedContentAcquisitionType);
    atomic_store(result, (unint64_t *)&qword_29B7F0);
  }
  return result;
}

unint64_t sub_B3920()
{
  unint64_t result;

  result = qword_29B7F8;
  if (!qword_29B7F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedContentType, &type metadata for BridgedContentType);
    atomic_store(result, (unint64_t *)&qword_29B7F8);
  }
  return result;
}

unint64_t sub_B3968()
{
  unint64_t result;

  result = qword_29B800;
  if (!qword_29B800)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedDeviceOrientation, &type metadata for BridgedDeviceOrientation);
    atomic_store(result, (unint64_t *)&qword_29B800);
  }
  return result;
}

unint64_t sub_B39B0()
{
  unint64_t result;

  result = qword_29B808;
  if (!qword_29B808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedDisplayType, &type metadata for BridgedDisplayType);
    atomic_store(result, (unint64_t *)&qword_29B808);
  }
  return result;
}

unint64_t sub_B39F8()
{
  unint64_t result;

  result = qword_29B810;
  if (!qword_29B810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedDoNotDisturbStatus, &type metadata for BridgedDoNotDisturbStatus);
    atomic_store(result, (unint64_t *)&qword_29B810);
  }
  return result;
}

unint64_t sub_B3A40()
{
  unint64_t result;

  result = qword_29B818;
  if (!qword_29B818)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedEditActionType, &type metadata for BridgedEditActionType);
    atomic_store(result, (unint64_t *)&qword_29B818);
  }
  return result;
}

unint64_t sub_B3A88()
{
  unint64_t result;

  result = qword_29B820;
  if (!qword_29B820)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedEndReasonType, &type metadata for BridgedEndReasonType);
    atomic_store(result, (unint64_t *)&qword_29B820);
  }
  return result;
}

unint64_t sub_B3AD0()
{
  unint64_t result;

  result = qword_29B828;
  if (!qword_29B828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedGetStartedActionType, &type metadata for BridgedGetStartedActionType);
    atomic_store(result, (unint64_t *)&qword_29B828);
  }
  return result;
}

unint64_t sub_B3B18()
{
  unint64_t result;

  result = qword_29B830;
  if (!qword_29B830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedGoalType, &type metadata for BridgedGoalType);
    atomic_store(result, (unint64_t *)&qword_29B830);
  }
  return result;
}

unint64_t sub_B3B60()
{
  unint64_t result;

  result = qword_29B838;
  if (!qword_29B838)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedLaunchType, &type metadata for BridgedLaunchType);
    atomic_store(result, (unint64_t *)&qword_29B838);
  }
  return result;
}

unint64_t sub_B3BA8()
{
  unint64_t result;

  result = qword_29B840;
  if (!qword_29B840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedLinkActionType, &type metadata for BridgedLinkActionType);
    atomic_store(result, (unint64_t *)&qword_29B840);
  }
  return result;
}

unint64_t sub_B3BF0()
{
  unint64_t result;

  result = qword_29B848;
  if (!qword_29B848)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedMessageType, &type metadata for BridgedMessageType);
    atomic_store(result, (unint64_t *)&qword_29B848);
  }
  return result;
}

unint64_t sub_B3C38()
{
  unint64_t result;

  result = qword_29B850;
  if (!qword_29B850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedNotificationType, &type metadata for BridgedNotificationType);
    atomic_store(result, (unint64_t *)&qword_29B850);
  }
  return result;
}

unint64_t sub_B3C80()
{
  unint64_t result;

  result = qword_29B858;
  if (!qword_29B858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedProductionType, &type metadata for BridgedProductionType);
    atomic_store(result, (unint64_t *)&qword_29B858);
  }
  return result;
}

unint64_t sub_B3CC8()
{
  unint64_t result;

  result = qword_29B860;
  if (!qword_29B860)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedPurchaseFailureReason, &type metadata for BridgedPurchaseFailureReason);
    atomic_store(result, (unint64_t *)&qword_29B860);
  }
  return result;
}

unint64_t sub_B3D10()
{
  unint64_t result;

  result = qword_29B868;
  if (!qword_29B868)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedPurchaseMethod, &type metadata for BridgedPurchaseMethod);
    atomic_store(result, (unint64_t *)&qword_29B868);
  }
  return result;
}

unint64_t sub_B3D58()
{
  unint64_t result;

  result = qword_29B870;
  if (!qword_29B870)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedRecoType, &type metadata for BridgedRecoType);
    atomic_store(result, (unint64_t *)&qword_29B870);
  }
  return result;
}

unint64_t sub_B3DA0()
{
  unint64_t result;

  result = qword_29B878;
  if (!qword_29B878)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedScrollViewStatus, &type metadata for BridgedScrollViewStatus);
    atomic_store(result, (unint64_t *)&qword_29B878);
  }
  return result;
}

unint64_t sub_B3DE8()
{
  unint64_t result;

  result = qword_29B880;
  if (!qword_29B880)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedSeriesType, &type metadata for BridgedSeriesType);
    atomic_store(result, (unint64_t *)&qword_29B880);
  }
  return result;
}

unint64_t sub_B3E30()
{
  unint64_t result;

  result = qword_29B888;
  if (!qword_29B888)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedSortType, &type metadata for BridgedSortType);
    atomic_store(result, (unint64_t *)&qword_29B888);
  }
  return result;
}

unint64_t sub_B3E78()
{
  unint64_t result;

  result = qword_29B890;
  if (!qword_29B890)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedTabType, &type metadata for BridgedTabType);
    atomic_store(result, (unint64_t *)&qword_29B890);
  }
  return result;
}

unint64_t sub_B3EC0()
{
  unint64_t result;

  result = qword_29B898;
  if (!qword_29B898)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedTargetType, &type metadata for BridgedTargetType);
    atomic_store(result, (unint64_t *)&qword_29B898);
  }
  return result;
}

unint64_t sub_B3F08()
{
  unint64_t result;

  result = qword_29B8A0;
  if (!qword_29B8A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedUpSellLocation, &type metadata for BridgedUpSellLocation);
    atomic_store(result, (unint64_t *)&qword_29B8A0);
  }
  return result;
}

unint64_t sub_B3F50()
{
  unint64_t result;

  result = qword_29B8A8;
  if (!qword_29B8A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedUpSellVariant, &type metadata for BridgedUpSellVariant);
    atomic_store(result, (unint64_t *)&qword_29B8A8);
  }
  return result;
}

unint64_t sub_B3F98()
{
  unint64_t result;

  result = qword_29B8B0;
  if (!qword_29B8B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedViewAction, &type metadata for BridgedViewAction);
    atomic_store(result, (unint64_t *)&qword_29B8B0);
  }
  return result;
}

unint64_t sub_B3FE0()
{
  unint64_t result;

  result = qword_29B8B8;
  if (!qword_29B8B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedViewLocation, &type metadata for BridgedViewLocation);
    atomic_store(result, (unint64_t *)&qword_29B8B8);
  }
  return result;
}

unint64_t sub_B4028()
{
  unint64_t result;

  result = qword_29B8C0;
  if (!qword_29B8C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BridgedViewType, &type metadata for BridgedViewType);
    atomic_store(result, (unint64_t *)&qword_29B8C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BridgedActionType()
{
  return &type metadata for BridgedActionType;
}

ValueMetadata *type metadata accessor for BridgedAutoNightThemeStatus()
{
  return &type metadata for BridgedAutoNightThemeStatus;
}

ValueMetadata *type metadata accessor for BridgedBackgroundColor()
{
  return &type metadata for BridgedBackgroundColor;
}

uint64_t method lookup function for BridgedBackgroundColorData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedBackgroundColorData);
}

uint64_t method lookup function for BridgedBooksTreatmentData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedBooksTreatmentData);
}

uint64_t dispatch thunk of BridgedBooksTreatmentData.__allocating_init(remoteConfigNamespaceData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for BridgedCollectionIDData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedCollectionIDData);
}

uint64_t method lookup function for BridgedCollectionSummaryData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedCollectionSummaryData);
}

ValueMetadata *type metadata accessor for BridgedContentAcquisitionType()
{
  return &type metadata for BridgedContentAcquisitionType;
}

uint64_t method lookup function for BridgedContentData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedContentData);
}

uint64_t dispatch thunk of BridgedContentData.__allocating_init(contentID:contentType:contentPrivateID:contentUserID:contentAcquisitionType:contentSubType:contentLength:supplementalContentCount:seriesType:productionType:isUnified:contentKind:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of BridgedContentData.swiftType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t method lookup function for BridgedContentSettingsData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedContentSettingsData);
}

uint64_t method lookup function for BridgedContentSubType(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedContentSubType);
}

uint64_t dispatch thunk of static Utilities.cellularRadioAccessTechnology()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static BridgedContentSubType.rmt.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static BridgedContentSubType.fixedLayout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static BridgedContentSubType.traditional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for BridgedContentType()
{
  return &type metadata for BridgedContentType;
}

ValueMetadata *type metadata accessor for BridgedDeviceOrientation()
{
  return &type metadata for BridgedDeviceOrientation;
}

ValueMetadata *type metadata accessor for BridgedDisplayType()
{
  return &type metadata for BridgedDisplayType;
}

uint64_t method lookup function for BridgedDoNotDisturbData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedDoNotDisturbData);
}

uint64_t dispatch thunk of BridgedDoNotDisturbData.__allocating_init(startStatus:endStatus:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for BridgedDoNotDisturbStatus()
{
  return &type metadata for BridgedDoNotDisturbStatus;
}

ValueMetadata *type metadata accessor for BridgedEditActionType()
{
  return &type metadata for BridgedEditActionType;
}

ValueMetadata *type metadata accessor for BridgedEndReasonType()
{
  return &type metadata for BridgedEndReasonType;
}

ValueMetadata *type metadata accessor for BridgedGetStartedActionType()
{
  return &type metadata for BridgedGetStartedActionType;
}

ValueMetadata *type metadata accessor for BridgedGoalType()
{
  return &type metadata for BridgedGoalType;
}

ValueMetadata *type metadata accessor for BridgedLaunchType()
{
  return &type metadata for BridgedLaunchType;
}

uint64_t method lookup function for BridgedLibraryItemTypeData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedLibraryItemTypeData);
}

uint64_t dispatch thunk of BridgedLibraryItemTypeData.__allocating_init(contentPrivateID:contentUserID:contentType:contentID:isSample:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for BridgedLinkActionType()
{
  return &type metadata for BridgedLinkActionType;
}

uint64_t method lookup function for BridgedLinkData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedLinkData);
}

uint64_t dispatch thunk of BridgedLinkData.__allocating_init(previousSectionID:previousSectionName:previousContentID:linkActionType:previousSeriesID:previousGenreID:previousCollectionID:previousAuthorID:previousFlowcaseID:previousBrickID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t method lookup function for BridgedMarkedData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedMarkedData);
}

uint64_t dispatch thunk of BridgedMarkedData.swiftType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_20.nsects + (swift_isaMask & *v0)))();
}

ValueMetadata *type metadata accessor for BridgedMessageType()
{
  return &type metadata for BridgedMessageType;
}

uint64_t method lookup function for BridgedNotificationData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedNotificationData);
}

uint64_t dispatch thunk of BridgedNotificationData.__allocating_init(notificationContentID:notificationID:notificationType:recoType:goalType:titleCode:title:messageCode:message:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t method lookup function for BridgedNotificationEngagementData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedNotificationEngagementData);
}

uint64_t dispatch thunk of BridgedNotificationEngagementData.__allocating_init(actionType:actionUrl:targetID:targetType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for BridgedNotificationType()
{
  return &type metadata for BridgedNotificationType;
}

ValueMetadata *type metadata accessor for BridgedProductionType()
{
  return &type metadata for BridgedProductionType;
}

uint64_t method lookup function for BridgedPurchaseData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedPurchaseData);
}

uint64_t dispatch thunk of BridgedPurchaseFailData.__allocating_init(purchaseFailureReason:errorCode:errorDescription:errorDomain:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for BridgedPurchaseFailData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedPurchaseFailData);
}

ValueMetadata *type metadata accessor for BridgedPurchaseFailureReason()
{
  return &type metadata for BridgedPurchaseFailureReason;
}

ValueMetadata *type metadata accessor for BridgedPurchaseMethod()
{
  return &type metadata for BridgedPurchaseMethod;
}

uint64_t method lookup function for BridgedReadingSessionData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedReadingSessionData);
}

uint64_t dispatch thunk of BridgedReadingSessionData.__allocating_init(percentCompletionStart:percentCompletionEnd:isFreeSample:deviceOrientation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for BridgedReadingSettingsData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedReadingSettingsData);
}

uint64_t dispatch thunk of BridgedReadingSettingsData.__allocating_init(scrollViewStatus:autoNightThemeStatus:backgroundColor:font:fontSize:brightnessLevel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for BridgedRecoType()
{
  return &type metadata for BridgedRecoType;
}

uint64_t method lookup function for BridgedRemoteConfigNamespaceData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedRemoteConfigNamespaceData);
}

uint64_t dispatch thunk of BridgedRemoteConfigNamespaceData.__allocating_init(name:treatmentIDs:segmentIDs:segmentSetIDs:previousTreatmentIDs:previousSegmentIDs:previousSegmentSetIDs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of BridgedRemoteConfigNamespaceData.swiftType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.size + (swift_isaMask & *v0)))();
}

ValueMetadata *type metadata accessor for BridgedScrollViewStatus()
{
  return &type metadata for BridgedScrollViewStatus;
}

ValueMetadata *type metadata accessor for BridgedSeriesType()
{
  return &type metadata for BridgedSeriesType;
}

uint64_t method lookup function for BridgedSessionListeningData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedSessionListeningData);
}

uint64_t method lookup function for BridgedSessionReadingData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedSessionReadingData);
}

ValueMetadata *type metadata accessor for BridgedSortType()
{
  return &type metadata for BridgedSortType;
}

ValueMetadata *type metadata accessor for BridgedTabType()
{
  return &type metadata for BridgedTabType;
}

ValueMetadata *type metadata accessor for BridgedTargetType()
{
  return &type metadata for BridgedTargetType;
}

uint64_t method lookup function for BridgedUpSellData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedUpSellData);
}

uint64_t dispatch thunk of BridgedUpSellData.__allocating_init(location:variant:variantVersion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of BridgedUpSellData.swiftType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) - 8])();
}

ValueMetadata *type metadata accessor for BridgedUpSellLocation()
{
  return &type metadata for BridgedUpSellLocation;
}

ValueMetadata *type metadata accessor for BridgedUpSellVariant()
{
  return &type metadata for BridgedUpSellVariant;
}

ValueMetadata *type metadata accessor for BridgedViewAction()
{
  return &type metadata for BridgedViewAction;
}

uint64_t method lookup function for BridgedViewData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedViewData);
}

uint64_t dispatch thunk of BridgedViewData.__allocating_init(type:action:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for BridgedViewLocation()
{
  return &type metadata for BridgedViewLocation;
}

ValueMetadata *type metadata accessor for BridgedViewType()
{
  return &type metadata for BridgedViewType;
}

uint64_t method lookup function for BridgedWidgetData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BridgedWidgetData);
}

uint64_t storeEnumTagSinglePayload for BridgedContentSubType.BridgedContentSubTypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_B4524 + 4 * byte_1FD339[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_B4558 + 4 * byte_1FD334[v4]))();
}

uint64_t sub_B4558(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B4560(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB4568);
  return result;
}

uint64_t sub_B4574(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB457CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_B4580(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B4588(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BridgedContentSubType.BridgedContentSubTypeEnum()
{
  return &type metadata for BridgedContentSubType.BridgedContentSubTypeEnum;
}

unint64_t sub_B45A8()
{
  unint64_t result;

  result = qword_29BC68;
  if (!qword_29BC68)
  {
    result = swift_getWitnessTable(&unk_1FEE2C, &type metadata for BridgedContentSubType.BridgedContentSubTypeEnum);
    atomic_store(result, (unint64_t *)&qword_29BC68);
  }
  return result;
}

double sub_B462C()
{
  double result;

  qword_29BCB8 = 0;
  result = 0.0;
  xmmword_29BC98 = 0u;
  unk_29BCA8 = 0u;
  return result;
}

uint64_t sub_B4644@<X0>(uint64_t a1@<X8>)
{
  if (qword_295780 != -1)
    swift_once(&qword_295780, sub_B462C);
  return sub_B47F8((uint64_t)&xmmword_29BC98, a1);
}

_QWORD *EnvironmentValues._sizeProvider.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_B46CC();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v2);
}

unint64_t sub_B46CC()
{
  unint64_t result;

  result = qword_29BCC0;
  if (!qword_29BCC0)
  {
    result = swift_getWitnessTable("Ee\a", &type metadata for SizeProviderKey);
    atomic_store(result, (unint64_t *)&qword_29BCC0);
  }
  return result;
}

_QWORD *sub_B4710@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_B46CC();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v2);
}

uint64_t sub_B474C(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _BYTE v4[40];

  sub_B47F8(a1, (uint64_t)v4);
  sub_B47F8((uint64_t)v4, (uint64_t)v3);
  v1 = sub_B46CC();
  EnvironmentValues.subscript.setter(v3, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v1);
  return sub_B4840((uint64_t)v4);
}

uint64_t EnvironmentValues._sizeProvider.setter(uint64_t a1)
{
  unint64_t v2;
  _BYTE v4[40];

  sub_B47F8(a1, (uint64_t)v4);
  v2 = sub_B46CC();
  EnvironmentValues.subscript.setter(v4, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v2);
  return sub_B4840(a1);
}

uint64_t sub_B47F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_296200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_B4840(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_296200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*EnvironmentValues._sizeProvider.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  v4 = sub_B46CC();
  v3[16] = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v4);
  return sub_B48E4;
}

void sub_B48E4(uint64_t *a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)*a1;
  v3 = *a1 + 40;
  v4 = *(_QWORD *)(*a1 + 128);
  if ((a2 & 1) != 0)
  {
    sub_B47F8(*a1, v3);
    sub_B47F8(v3, (uint64_t)(v2 + 80));
    EnvironmentValues.subscript.setter(v2 + 80, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v4);
    sub_B4840(v3);
  }
  else
  {
    sub_B47F8(*a1, v3);
    EnvironmentValues.subscript.setter(v3, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v4);
  }
  sub_B4840((uint64_t)v2);
  free(v2);
}

uint64_t View.appAnalyticsSizeProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *KeyPath;
  SEL v7;
  id v8;
  id v9;
  int64_t v10;
  id v11;
  BOOL v12;
  id v13;
  _BYTE v15[40];

  KeyPath = (BAEventReporter *)swift_getKeyPath(&unk_1FEE58);
  sub_89258(a1, (uint64_t)v15);
  View.environment<A>(_:_:)(KeyPath, v15, a2, a3);
  swift_release(KeyPath, v7, v8, v9, v10, v11, v12, v13);
  return sub_B4840((uint64_t)v15);
}

_QWORD *sub_B4A14@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_B46CC();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SizeProviderKey, &type metadata for SizeProviderKey, v2);
}

void ContentExposureData.updating(for:with:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  BAEventReporter *object;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  int v45;
  char v46;
  BAEventReporter *v47;
  char v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v6 = v3[1];
  v7 = v3[3];
  v39 = *v3;
  v40 = v3[2];
  v8 = v3[5];
  v9 = v3[7];
  v41 = v3[4];
  v42 = v3[6];
  v38 = v3[8];
  v47 = (BAEventReporter *)v3[9];
  v43 = *((_DWORD *)v3 + 20);
  v44 = *((_BYTE *)v3 + 84);
  v45 = *((_DWORD *)v3 + 22);
  v46 = *((_BYTE *)v3 + 92);
  v10 = v3[13];
  v51 = v3[12];
  v49 = *((_BYTE *)v3 + 116);
  v50 = *((_DWORD *)v3 + 28);
  v48 = *((_BYTE *)v3 + 117);
  v12 = a2[3];
  v11 = a2[4];
  sub_7988(a2, v12);
  *(double *)&v13 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, v12, v11));
  if ((v15 & 1) != 0)
  {
    *(_QWORD *)a3 = v39;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v40;
    *(_QWORD *)(a3 + 24) = v7;
    *(_QWORD *)(a3 + 32) = v41;
    *(_QWORD *)(a3 + 40) = v8;
    *(_QWORD *)(a3 + 48) = v42;
    *(_QWORD *)(a3 + 56) = v9;
    *(_QWORD *)(a3 + 64) = v38;
    *(_QWORD *)(a3 + 72) = v47;
    *(_DWORD *)(a3 + 80) = v43;
    *(_BYTE *)(a3 + 84) = v44;
    *(_DWORD *)(a3 + 88) = v45;
    *(_BYTE *)(a3 + 92) = v46;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v47);
  }
  else
  {
    v16 = *(double *)&v13;
    v17 = v14;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v18 = swift_bridgeObjectRetain(v47);
    v52 = Double.description.getter(v18, v16);
    v53 = v19;
    v20._countAndFlagsBits = 44;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v22._countAndFlagsBits = Double.description.getter(v21, v17);
    object = (BAEventReporter *)v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v47, v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(object, v31, v32, v33, v34, v35, v36, v37);
    *(_QWORD *)a3 = v39;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v40;
    *(_QWORD *)(a3 + 24) = v7;
    *(_QWORD *)(a3 + 32) = v41;
    *(_QWORD *)(a3 + 40) = v8;
    *(_QWORD *)(a3 + 48) = v42;
    *(_QWORD *)(a3 + 56) = v9;
    *(_QWORD *)(a3 + 64) = v52;
    *(_QWORD *)(a3 + 72) = v53;
    *(_DWORD *)(a3 + 80) = v43;
    *(_BYTE *)(a3 + 84) = v44;
    *(_DWORD *)(a3 + 88) = v45;
    *(_BYTE *)(a3 + 92) = v46;
  }
  *(_QWORD *)(a3 + 96) = v51;
  *(_QWORD *)(a3 + 104) = v10;
  *(_DWORD *)(a3 + 112) = v50;
  *(_BYTE *)(a3 + 116) = v49;
  *(_BYTE *)(a3 + 117) = v48;
}

void SectionData.updating(for:with:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v6;
  BAEventReporter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  char v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  BAEventReporter *object;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v38 = *v3;
  v39 = *((_DWORD *)v3 + 1);
  v6 = *((_QWORD *)v3 + 2);
  v8 = *((_QWORD *)v3 + 3);
  v7 = (BAEventReporter *)*((_QWORD *)v3 + 4);
  v40 = *((_QWORD *)v3 + 1);
  v41 = *((_QWORD *)v3 + 5);
  v42 = *((_QWORD *)v3 + 7);
  v43 = *((_QWORD *)v3 + 6);
  v9 = *((_QWORD *)v3 + 10);
  v48 = *((_QWORD *)v3 + 9);
  v46 = v3[92];
  v47 = *((_DWORD *)v3 + 22);
  v10 = *((_QWORD *)v3 + 13);
  v44 = *((_QWORD *)v3 + 8);
  v45 = *((_QWORD *)v3 + 12);
  v12 = a2[3];
  v11 = a2[4];
  sub_7988(a2, v12);
  v13 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, v12, v11));
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)a3 = v38;
    *(_DWORD *)(a3 + 4) = v39;
    *(_QWORD *)(a3 + 8) = v40;
    *(_QWORD *)(a3 + 16) = v6;
    *(_QWORD *)(a3 + 24) = v8;
    *(_QWORD *)(a3 + 32) = v7;
    *(_QWORD *)(a3 + 40) = v41;
    *(_QWORD *)(a3 + 48) = v43;
    *(_QWORD *)(a3 + 56) = v42;
    *(_QWORD *)(a3 + 64) = v44;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
  }
  else
  {
    v16 = v14;
    v17 = rint(v13);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v43);
    v18 = swift_bridgeObjectRetain(v44);
    v49 = Double.description.getter(v18, v17);
    v50 = v19;
    v20._countAndFlagsBits = 44;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v22._countAndFlagsBits = Double.description.getter(v21, rint(v16));
    object = (BAEventReporter *)v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v7, v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(object, v31, v32, v33, v34, v35, v36, v37);
    *(_BYTE *)a3 = v38;
    *(_DWORD *)(a3 + 4) = v39;
    *(_QWORD *)(a3 + 8) = v40;
    *(_QWORD *)(a3 + 16) = v6;
    *(_QWORD *)(a3 + 24) = v49;
    *(_QWORD *)(a3 + 32) = v50;
    *(_QWORD *)(a3 + 40) = v41;
    *(_QWORD *)(a3 + 48) = v43;
    *(_QWORD *)(a3 + 56) = v42;
    *(_QWORD *)(a3 + 64) = v44;
  }
  *(_QWORD *)(a3 + 72) = v48;
  *(_QWORD *)(a3 + 80) = v9;
  *(_DWORD *)(a3 + 88) = v47;
  *(_BYTE *)(a3 + 92) = v46;
  *(_QWORD *)(a3 + 96) = v45;
  *(_QWORD *)(a3 + 104) = v10;
}

uint64_t sub_B4E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_B4F50(a1, a2, a3, (uint64_t (*)(void))sub_B4EB0, (uint64_t (*)(void))sub_B4EF4);
}

unint64_t sub_B4EB0()
{
  unint64_t result;

  result = qword_29BCC8;
  if (!qword_29BCC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentExposureData, &type metadata for ContentExposureData);
    atomic_store(result, (unint64_t *)&qword_29BCC8);
  }
  return result;
}

unint64_t sub_B4EF4()
{
  unint64_t result;

  result = qword_29BCD0;
  if (!qword_29BCD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentExposureData, &type metadata for ContentExposureData);
    atomic_store(result, (unint64_t *)&qword_29BCD0);
  }
  return result;
}

uint64_t sub_B4F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_B4F50(a1, a2, a3, (uint64_t (*)(void))sub_B4F80, (uint64_t (*)(void))sub_B4FC4);
}

uint64_t sub_B4F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_B4F80()
{
  unint64_t result;

  result = qword_29BCD8;
  if (!qword_29BCD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SectionData, &type metadata for SectionData);
    atomic_store(result, (unint64_t *)&qword_29BCD8);
  }
  return result;
}

unint64_t sub_B4FC4()
{
  unint64_t result;

  result = qword_29BCE0;
  if (!qword_29BCE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SectionData, &type metadata for SectionData);
    atomic_store(result, (unint64_t *)&qword_29BCE0);
  }
  return result;
}

uint64_t dispatch thunk of SizeProviding.size(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of SizeNeedingData.updating(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t sub_B5034(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_679EC(&qword_29BCE8);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v6[0] = v2;
  v6[1] = sub_B5094();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v6);
}

unint64_t sub_B5094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_29BCF0;
  if (!qword_29BCF0)
  {
    v1 = sub_679EC(&qword_29BCE8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_29BCF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SizeProviderKey()
{
  return &type metadata for SizeProviderKey;
}

uint64_t UserData.userExperience.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t UserData.userExperience.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t UserData.init(userStorefrontID:userID:userExperience:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

unint64_t sub_B5134()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x444972657375;
  if (*v0 != 1)
    v1 = 0x6570784572657375;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_B519C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_B5AF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B51C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B5710();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B51E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B5710();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = sub_71B4(&qword_29BCF8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v20 = v1[3];
  v21 = v9;
  v19 = v1[4];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_B5710();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserData.CodingKeys, &type metadata for UserData.CodingKeys, v12, v10, v11);
  v26 = 0;
  v13 = v22;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v26, v3);
  if (!v13)
  {
    v14 = v19;
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v20, &v25, v3);
    v23 = v14;
    v24 = 2;
    v15 = sub_71B4(&qword_299618);
    v16 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v24, v3, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void UserData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  BAEventReporter *v15;
  BAEventReporter *v16;
  uint64_t v17;
  uint64_t v18;
  BAEventReporter *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  BAEventReporter *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  int64_t v46;
  int64_t v47;
  void *v48;
  BAEventReporter *v49;
  uint64_t v50;
  BAEventReporter *v51;
  uint64_t v52;
  BAEventReporter *v53;
  char v54;
  char v55;
  char v56;

  v5 = sub_71B4(&qword_29BD08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_B5710();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserData.CodingKeys, &type metadata for UserData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v49 = 0;
  }
  else
  {
    v56 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v56, v5);
    v14 = v13;
    v52 = v12;
    v55 = 1;
    swift_bridgeObjectRetain(v13);
    v50 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
    v16 = v15;
    v17 = sub_71B4(&qword_299618);
    v54 = 2;
    v18 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    v51 = v16;
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v53, v17, &v54, v5, v17, v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v53;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRelease(0, v20, v21, v22, v23, v24, v25, v26);
    v27 = v51;
    *a2 = v52;
    a2[1] = (uint64_t)v14;
    a2[2] = v50;
    a2[3] = (uint64_t)v27;
    a2[4] = (uint64_t)v19;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v19, v28, v29, v30, v31, v32, v33, v34);
    swift_bridgeObjectRelease(v27, v35, v36, v37, v38, v39, v40, v41);
    v49 = v14;
  }
  swift_bridgeObjectRelease(v49, v42, v43, v44, v45, v46, v47, v48);
}

void sub_B5628(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  UserData.init(from:)(a1, a2);
}

uint64_t sub_B563C(_QWORD *a1)
{
  return UserData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics8UserDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  char v14;
  uint64_t result;
  BOOL v16;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = (_QWORD *)a1[4];
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  v12 = (_QWORD *)a2[4];
  v13 = v4 == *a2 && v5 == v9;
  if (v13 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v9, 0), result = 0, (v14 & 1) != 0))
  {
    v16 = v6 == v10 && v8 == v11;
    if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v10, v11, 0), result = 0, (v17 & 1) != 0))
    {
      if (v7)
      {
        if (v12 && (sub_66274(v7, v12) & 1) != 0)
          return 1;
      }
      else if (!v12)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_B5710()
{
  unint64_t result;

  result = qword_29BD00;
  if (!qword_29BD00)
  {
    result = swift_getWitnessTable(&unk_1FF0C4, &type metadata for UserData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BD00);
  }
  return result;
}

unint64_t sub_B5758()
{
  unint64_t result;

  result = qword_29BD10;
  if (!qword_29BD10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserData, &type metadata for UserData);
    atomic_store(result, (unint64_t *)&qword_29BD10);
  }
  return result;
}

unint64_t sub_B57A0()
{
  unint64_t result;

  result = qword_29BD18;
  if (!qword_29BD18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserData, &type metadata for UserData);
    atomic_store(result, (unint64_t *)&qword_29BD18);
  }
  return result;
}

uint64_t destroy for UserData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for UserData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for UserData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

_QWORD *assignWithTake for UserData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for UserData()
{
  return &type metadata for UserData;
}

uint64_t storeEnumTagSinglePayload for UserData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_B599C + 4 * byte_1FEF29[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B59D0 + 4 * byte_1FEF24[v4]))();
}

uint64_t sub_B59D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B59D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB59E0);
  return result;
}

uint64_t sub_B59EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB59F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_B59F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B5A00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserData.CodingKeys()
{
  return &type metadata for UserData.CodingKeys;
}

unint64_t sub_B5A20()
{
  unint64_t result;

  result = qword_29BD20;
  if (!qword_29BD20)
  {
    result = swift_getWitnessTable(&unk_1FF09C, &type metadata for UserData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BD20);
  }
  return result;
}

unint64_t sub_B5A68()
{
  unint64_t result;

  result = qword_29BD28;
  if (!qword_29BD28)
  {
    result = swift_getWitnessTable(&unk_1FF00C, &type metadata for UserData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BD28);
  }
  return result;
}

unint64_t sub_B5AB0()
{
  unint64_t result;

  result = qword_29BD30;
  if (!qword_29BD30)
  {
    result = swift_getWitnessTable(&unk_1FF034, &type metadata for UserData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BD30);
  }
  return result;
}

uint64_t sub_B5AF4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000000220C90;
    if (a2 == 0x8000000000220C90)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220C90, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x444972657375 && a2 == 0xE600000000000000)
  {
    v6 = 0xE600000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444972657375, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6570784572657375 && a2 == 0xEE0065636E656972)
  {
    swift_bridgeObjectRelease(0xEE0065636E656972);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6570784572657375, 0xEE0065636E656972, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::FrameName_optional __swiftcall FrameName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::FrameName_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2674B8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 16;
  if (v5 < 0x10)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t FrameName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B5CF4 + 4 * byte_1FF114[*v0]))(0x6165526C61746F74, 0xED0000656D695464);
}

unint64_t sub_B5CF4()
{
  return 0xD000000000000018;
}

uint64_t sub_B5E94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2A4FC(*a1, *a2);
}

unint64_t sub_B5EA4()
{
  unint64_t result;

  result = qword_29BD38;
  if (!qword_29BD38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FrameName, &type metadata for FrameName);
    atomic_store(result, (unint64_t *)&qword_29BD38);
  }
  return result;
}

Swift::Int sub_B5EE8()
{
  uint64_t v0;
  BAEventReporter *v1;
  BAEventReporter *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  int64_t v7;
  int64_t v8;
  id v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  v0 = FrameName.rawValue.getter();
  v2 = v1;
  String.hash(into:)(v11, v0, v1);
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
  return Hasher._finalize()();
}

void sub_B5F4C(uint64_t a1)
{
  uint64_t v2;
  BAEventReporter *v3;
  BAEventReporter *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  int64_t v9;
  int64_t v10;
  id v11;

  v2 = FrameName.rawValue.getter();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
}

Swift::Int sub_B5F9C(uint64_t a1)
{
  uint64_t v1;
  BAEventReporter *v2;
  BAEventReporter *v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  int64_t v8;
  int64_t v9;
  id v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, a1);
  v1 = FrameName.rawValue.getter();
  v3 = v2;
  String.hash(into:)(v12, v1, v2);
  swift_bridgeObjectRelease(v3, v4, v5, v6, v7, v8, v9, v10);
  return Hasher._finalize()();
}

BookAnalytics::FrameName_optional sub_B5FFC(Swift::String *a1)
{
  return FrameName.init(rawValue:)(*a1);
}

uint64_t sub_B6008@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FrameName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_B602C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_B61A0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_B6088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_B61A0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for FrameName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_B6120 + 4 * byte_1FF129[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_B6154 + 4 * byte_1FF124[v4]))();
}

uint64_t sub_B6154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B615C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB6164);
  return result;
}

uint64_t sub_B6170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB6178);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_B617C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B6184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FrameName()
{
  return &type metadata for FrameName;
}

unint64_t sub_B61A0()
{
  unint64_t result;

  result = qword_29BD40;
  if (!qword_29BD40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FrameName, &type metadata for FrameName);
    atomic_store(result, (unint64_t *)&qword_29BD40);
  }
  return result;
}

BookAnalytics::WelcomeScreenType_optional __swiftcall WelcomeScreenType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::WelcomeScreenType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267658, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t WelcomeScreenType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B626C + 4 * byte_1FF270[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_B626C()
{
  return 0x656D6F636C6577;
}

uint64_t sub_B6280()
{
  return 0x7265766F63736964;
}

uint64_t sub_B6298()
{
  return 0x657061637365;
}

uint64_t sub_B62AC()
{
  return 2003792487;
}

void sub_B62BC(char *a1)
{
  sub_2915C(*a1);
}

unint64_t sub_B62CC()
{
  unint64_t result;

  result = qword_29BD48;
  if (!qword_29BD48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WelcomeScreenType, &type metadata for WelcomeScreenType);
    atomic_store(result, (unint64_t *)&qword_29BD48);
  }
  return result;
}

void sub_B6310()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_B635C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x656D6F636C6577, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_B63D4()
{
  __asm { BR              X10 }
}

uint64_t sub_B6410(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x656D6F636C6577, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_B6474(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_B64BC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x656D6F636C6577, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

BookAnalytics::WelcomeScreenType_optional sub_B6534(Swift::String *a1)
{
  return WelcomeScreenType.init(rawValue:)(*a1);
}

uint64_t sub_B6540()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_B6570 + 4 * byte_1FF284[*v0]))();
}

void sub_B6570(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656D6F636C6577;
  a1[1] = v1;
}

void sub_B6588(_QWORD *a1@<X8>)
{
  *a1 = 0x7265766F63736964;
  a1[1] = 0xE800000000000000;
}

void sub_B65A4(_QWORD *a1@<X8>)
{
  *a1 = 0x657061637365;
  a1[1] = 0xE600000000000000;
}

void sub_B65BC(_QWORD *a1@<X8>)
{
  *a1 = 2003792487;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_B65D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_B6744();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_B662C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_B6744();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for WelcomeScreenType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_B66C4 + 4 * byte_1FF28E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_B66F8 + 4 * byte_1FF289[v4]))();
}

uint64_t sub_B66F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B6700(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB6708);
  return result;
}

uint64_t sub_B6714(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB671CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_B6720(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B6728(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WelcomeScreenType()
{
  return &type metadata for WelcomeScreenType;
}

unint64_t sub_B6744()
{
  unint64_t result;

  result = qword_29BD50;
  if (!qword_29BD50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WelcomeScreenType, &type metadata for WelcomeScreenType);
    atomic_store(result, (unint64_t *)&qword_29BD50);
  }
  return result;
}

void static SearchMethodData.== infix(_:_:)(char *a1)
{
  sub_29620(*a1);
}

uint64_t sub_B6794()
{
  return 0x654D686372616573;
}

uint64_t sub_B67B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x654D686372616573 && a2 == 0xEC000000646F6874)
  {
    result = swift_bridgeObjectRelease(0xEC000000646F6874);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x654D686372616573, 0xEC000000646F6874, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_B6860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B69AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B6888(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B69AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchMethodData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29BD58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_B69AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchMethodData.CodingKeys, &type metadata for SearchMethodData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_B69F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for SearchMethod, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_B69AC()
{
  unint64_t result;

  result = qword_29BD60;
  if (!qword_29BD60)
  {
    result = swift_getWitnessTable(&unk_1FF564, &type metadata for SearchMethodData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BD60);
  }
  return result;
}

unint64_t sub_B69F0()
{
  unint64_t result;

  result = qword_29BD68;
  if (!qword_29BD68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchMethod, &type metadata for SearchMethod);
    atomic_store(result, (unint64_t *)&qword_29BD68);
  }
  return result;
}

uint64_t SearchMethodData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29BD70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_B69AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchMethodData.CodingKeys, &type metadata for SearchMethodData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_B6B50();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for SearchMethod, v13, v5, &type metadata for SearchMethod, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_B6B50()
{
  unint64_t result;

  result = qword_29BD78;
  if (!qword_29BD78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchMethod, &type metadata for SearchMethod);
    atomic_store(result, (unint64_t *)&qword_29BD78);
  }
  return result;
}

unint64_t sub_B6B98()
{
  unint64_t result;

  result = qword_29BD80;
  if (!qword_29BD80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchMethodData, &type metadata for SearchMethodData);
    atomic_store(result, (unint64_t *)&qword_29BD80);
  }
  return result;
}

unint64_t sub_B6BE0()
{
  unint64_t result;

  result = qword_29BD88;
  if (!qword_29BD88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchMethodData, &type metadata for SearchMethodData);
    atomic_store(result, (unint64_t *)&qword_29BD88);
  }
  return result;
}

uint64_t sub_B6C24@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SearchMethodData.init(from:)(a1, a2);
}

uint64_t sub_B6C38(_QWORD *a1)
{
  return SearchMethodData.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for ListeningActionSourceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchMethodData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_B6D28 + 4 * byte_1FF3C5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_B6D5C + 4 * byte_1FF3C0[v4]))();
}

uint64_t sub_B6D5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B6D64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB6D6CLL);
  return result;
}

uint64_t sub_B6D78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB6D80);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_B6D84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B6D8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchMethodData()
{
  return &type metadata for SearchMethodData;
}

uint64_t storeEnumTagSinglePayload for SearchMethodData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_B6DE8 + 4 * byte_1FF3CA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_B6E08 + 4 * byte_1FF3CF[v4]))();
}

_BYTE *sub_B6DE8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_B6E08(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_B6E10(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_B6E18(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_B6E20(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_B6E28(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SearchMethodData.CodingKeys()
{
  return &type metadata for SearchMethodData.CodingKeys;
}

unint64_t sub_B6E48()
{
  unint64_t result;

  result = qword_29BD90;
  if (!qword_29BD90)
  {
    result = swift_getWitnessTable(&unk_1FF53C, &type metadata for SearchMethodData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BD90);
  }
  return result;
}

unint64_t sub_B6E90()
{
  unint64_t result;

  result = qword_29BD98;
  if (!qword_29BD98)
  {
    result = swift_getWitnessTable("\re\a", &type metadata for SearchMethodData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BD98);
  }
  return result;
}

unint64_t sub_B6ED8()
{
  unint64_t result;

  result = qword_29BDA0;
  if (!qword_29BDA0)
  {
    result = swift_getWitnessTable(&unk_1FF4D4, &type metadata for SearchMethodData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BDA0);
  }
  return result;
}

uint64_t sub_B6F1C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29BDA8, &enum case for SessionGroup.default(_:));
}

uint64_t static ContextualActionSheetExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295788, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29BDA8, a1);
}

uint64_t sub_B6F5C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29BDC0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ContextualActionSheetExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295790, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29BDC0, a1);
}

uint64_t ContextualActionSheetExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContextualActionSheetExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29BE48, (uint64_t)&nominal type descriptor for ContextualActionSheetExposureEvent);
}

uint64_t ContextualActionSheetExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContextualActionSheetExposureEvent.linkData.modify())()
{
  type metadata accessor for ContextualActionSheetExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContextualActionSheetExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContextualActionSheetExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContextualActionSheetExposureEvent.eventData.modify())()
{
  type metadata accessor for ContextualActionSheetExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContextualActionSheetExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContextualActionSheetExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContextualActionSheetExposureEvent.timedData.modify())()
{
  type metadata accessor for ContextualActionSheetExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContextualActionSheetExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ContextualActionSheetExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

_QWORD *ContextualActionSheetExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_OWORD *)(v1 + 208);
  v3 = *(_OWORD *)(v1 + 176);
  v19 = *(_OWORD *)(v1 + 192);
  v20 = v2;
  v4 = *(_OWORD *)(v1 + 208);
  v21 = *(_OWORD *)(v1 + 224);
  v5 = *(_OWORD *)(v1 + 144);
  v7 = *(_OWORD *)(v1 + 112);
  v15 = *(_OWORD *)(v1 + 128);
  v6 = v15;
  v16 = v5;
  v8 = *(_OWORD *)(v1 + 144);
  v9 = *(_OWORD *)(v1 + 176);
  v17 = *(_OWORD *)(v1 + 160);
  v10 = v17;
  v18 = v9;
  v11 = *(_OWORD *)(v1 + 112);
  v14[0] = *(_OWORD *)(v1 + 96);
  v12 = v14[0];
  v14[1] = v11;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 224);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v3;
  v22 = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 240);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v7;
  return sub_2DC18(v14);
}

uint64_t ContextualActionSheetExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContextualActionSheetExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29BEE0, (uint64_t)&nominal type descriptor for ContextualActionSheetExposureEvent.Model);
}

uint64_t ContextualActionSheetExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContextualActionSheetExposureEvent.Model(0) + 28);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContextualActionSheetExposureEvent.Model.init(contentData:linkData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_WORD *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 60);
  v15 = *(_BYTE *)(a1 + 64);
  v16 = *(_DWORD *)(a1 + 68);
  v17 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v8;
  *(_BYTE *)(a5 + 16) = v9;
  *(_OWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 40) = v11;
  *(_QWORD *)(a5 + 48) = v12;
  *(_WORD *)(a5 + 56) = v13;
  *(_DWORD *)(a5 + 60) = v14;
  *(_BYTE *)(a5 + 64) = v15;
  *(_DWORD *)(a5 + 68) = v16;
  *(_BYTE *)(a5 + 72) = v17;
  v18 = *(_DWORD *)(a1 + 73);
  v19 = a2[6];
  v20 = a2[8];
  *(_OWORD *)(a5 + 208) = a2[7];
  *(_OWORD *)(a5 + 224) = v20;
  v21 = a2[2];
  v22 = a2[4];
  v23 = a2[5];
  *(_OWORD *)(a5 + 144) = a2[3];
  *(_OWORD *)(a5 + 160) = v22;
  v24 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 176) = v23;
  *(_OWORD *)(a5 + 192) = v19;
  v25 = *a2;
  v26 = a2[1];
  *(_OWORD *)(a5 + 80) = v24;
  *(_OWORD *)(a5 + 96) = v25;
  LOBYTE(v8) = *(_BYTE *)(a1 + 77);
  *(_DWORD *)(a5 + 73) = v18;
  *(_BYTE *)(a5 + 77) = v8;
  *(_QWORD *)(a5 + 240) = *((_QWORD *)a2 + 18);
  *(_OWORD *)(a5 + 112) = v26;
  *(_OWORD *)(a5 + 128) = v21;
  v27 = type metadata accessor for ContextualActionSheetExposureEvent.Model(0);
  v28 = a5 + *(int *)(v27 + 24);
  v29 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, a3, v29);
  v30 = a5 + *(int *)(v27 + 28);
  v31 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v30, a4, v31);
}

uint64_t sub_B750C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B7544 + 4 * byte_1FF5C0[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_B7544()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_B755C()
{
  return 0x746144746E657665;
}

uint64_t sub_B7588@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_B95BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B75AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B78C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B75D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B78C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContextualActionSheetExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _OWORD v41[9];
  uint64_t v42;
  char v43;
  _QWORD v44[2];
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  char v51;
  int v52;
  char v53;
  int v54;
  char v55;
  __int128 v56;
  uint64_t v57;

  v2 = v1;
  v4 = sub_71B4(&qword_29BDD8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_B78C0();
  v11 = v8;
  v12 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys, &type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys, v10, v11, v9);
  v13 = *(_QWORD *)(v2 + 8);
  v14 = *(_BYTE *)(v2 + 16);
  v15 = *(_OWORD *)(v2 + 24);
  v16 = *(_QWORD *)(v2 + 40);
  v17 = *(_QWORD *)(v2 + 48);
  v18 = *(_WORD *)(v2 + 56);
  v19 = *(_DWORD *)(v2 + 60);
  v20 = *(_BYTE *)(v2 + 64);
  v21 = *(_DWORD *)(v2 + 68);
  v22 = *(_BYTE *)(v2 + 72);
  v23 = *(_BYTE *)(v2 + 77);
  v44[0] = *(_QWORD *)v2;
  v44[1] = v13;
  v45 = v14;
  v46 = v15;
  v47 = v16;
  v48 = v17;
  v49 = v18;
  v50 = v19;
  v51 = v20;
  v52 = v21;
  v53 = v22;
  v54 = *(_DWORD *)(v2 + 73);
  v55 = v23;
  v56 = *(_OWORD *)(v2 + 80);
  v43 = 0;
  v24 = sub_17118();
  v25 = v57;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v44, &v43, v4, &type metadata for ContentData, v24);
  if (!v25)
  {
    v26 = *(_OWORD *)(v2 + 208);
    v41[6] = *(_OWORD *)(v2 + 192);
    v41[7] = v26;
    v41[8] = *(_OWORD *)(v2 + 224);
    v42 = *(_QWORD *)(v2 + 240);
    v27 = *(_OWORD *)(v2 + 144);
    v41[2] = *(_OWORD *)(v2 + 128);
    v41[3] = v27;
    v28 = *(_OWORD *)(v2 + 176);
    v41[4] = *(_OWORD *)(v2 + 160);
    v41[5] = v28;
    v29 = *(_OWORD *)(v2 + 112);
    v41[0] = *(_OWORD *)(v2 + 96);
    v41[1] = v29;
    v40 = 1;
    v30 = sub_1B7F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v41, &v40, v4, &type metadata for LinkData, v30);
    v32 = type metadata accessor for ContextualActionSheetExposureEvent.Model(0);
    v33 = v2 + *(int *)(v32 + 24);
    LOBYTE(v41[0]) = 2;
    v34 = type metadata accessor for EventData(0);
    v35 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v57 = v4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, v41, v4, v34, v35);
    v36 = v2 + *(int *)(v32 + 28);
    LOBYTE(v41[0]) = 3;
    v37 = type metadata accessor for TimedData(0);
    v38 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v12 = v57;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v36, v41, v57, v37, v38);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v12);
}

unint64_t sub_B78C0()
{
  unint64_t result;

  result = qword_29BDE0;
  if (!qword_29BDE0)
  {
    result = swift_getWitnessTable(&unk_1FF7B4, &type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BDE0);
  }
  return result;
}

void ContextualActionSheetExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  char v53;
  __int128 v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _BYTE v63[9];
  uint64_t v64;

  v46 = a2;
  v49 = type metadata accessor for TimedData(0);
  v45 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v47 = (uint64_t *)((char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_71B4(&qword_29BDE8);
  v7 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContextualActionSheetExposureEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v52 = a1;
  sub_7988(a1, v13);
  v15 = sub_B78C0();
  v51 = v9;
  v16 = v64;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys, &type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
  {
    sub_7DAC(v52);
  }
  else
  {
    v43 = v6;
    v64 = v7;
    v17 = (uint64_t)v12;
    v18 = v49;
    v44 = v10;
    v19 = v48;
    v63[0] = 0;
    v20 = sub_1779C();
    v21 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, v63, v50, &type metadata for ContentData, v20);
    v22 = *((_QWORD *)&v54 + 1);
    v23 = v55[0];
    v24 = *(_OWORD *)&v55[8];
    v25 = *(_QWORD *)&v55[24];
    v26 = v56;
    v27 = WORD4(v56);
    v28 = HIDWORD(v56);
    v29 = v57;
    v30 = DWORD1(v57);
    v31 = BYTE8(v57);
    v32 = BYTE13(v57);
    *(_QWORD *)v17 = v54;
    *(_QWORD *)(v17 + 8) = v22;
    *(_BYTE *)(v17 + 16) = v23;
    *(_OWORD *)(v17 + 24) = v24;
    *(_QWORD *)(v17 + 40) = v25;
    *(_QWORD *)(v17 + 48) = v26;
    *(_WORD *)(v17 + 56) = v27;
    *(_DWORD *)(v17 + 60) = v28;
    *(_BYTE *)(v17 + 64) = v29;
    *(_DWORD *)(v17 + 68) = v30;
    *(_BYTE *)(v17 + 72) = v31;
    *(_DWORD *)(v17 + 73) = *(_DWORD *)((char *)&v57 + 9);
    *(_BYTE *)(v17 + 77) = v32;
    *(_OWORD *)(v17 + 80) = v58;
    v63[0] = 1;
    v33 = sub_1C06C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for LinkData, v63, v21, &type metadata for LinkData, v33);
    v34 = v60;
    *(_OWORD *)(v17 + 192) = v59;
    *(_OWORD *)(v17 + 208) = v34;
    *(_OWORD *)(v17 + 224) = v61;
    *(_QWORD *)(v17 + 240) = v62;
    v35 = v56;
    *(_OWORD *)(v17 + 128) = *(_OWORD *)&v55[16];
    *(_OWORD *)(v17 + 144) = v35;
    v36 = v58;
    *(_OWORD *)(v17 + 160) = v57;
    *(_OWORD *)(v17 + 176) = v36;
    v37 = *(_OWORD *)v55;
    *(_OWORD *)(v17 + 96) = v54;
    *(_OWORD *)(v17 + 112) = v37;
    v53 = 2;
    v38 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v39 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v19, &v53, v21, v19, v38);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v17 + *(int *)(v44 + 24), v39, v19);
    v53 = 3;
    v40 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v41 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v47, v18, &v53, v21, v18, v40);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v51, v21);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v45 + 32))(v17 + *(int *)(v44 + 28), v41, v18);
    sub_B7E48(v17, v46);
    sub_7DAC(v52);
    sub_B7E8C(v17);
  }
}

uint64_t sub_B7E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContextualActionSheetExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_B7E8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContextualActionSheetExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_B7EC8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ContextualActionSheetExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_B7EDC(_QWORD *a1)
{
  return ContextualActionSheetExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_B7EF0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295788, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29BDA8, (uint64_t)sub_B6F1C, a1);
}

uint64_t sub_B7F14@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295790, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29BDC0, (uint64_t)sub_B6F5C, a1);
}

uint64_t sub_B7F38@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextualActionSheetExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ContextualActionSheetExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ContextualActionSheetExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ContextualActionSheetExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ContextualActionSheetExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ContextualActionSheetExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextualActionSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B85A0);
}

uint64_t sub_B85A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A10);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D78);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ContextualActionSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B8678);
}

uint64_t sub_B8678(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A10);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D78);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_B874C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_87D8(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ContextualActionSheetExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v31 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v31;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v30 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v30;
    v29 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v29;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v7 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v7;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v26 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v26;
    v25 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v25;
    v24 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v24;
    v23 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v23;
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    v8 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v8;
    v9 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v9;
    v10 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v10;
    v11 = a2[26];
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_QWORD *)(a1 + 208) = v11;
    v12 = a2[28];
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_QWORD *)(a1 + 224) = v12;
    v13 = a2[30];
    v14 = *(int *)(a3 + 24);
    v27 = (uint64_t)a2 + v14;
    v28 = a1 + v14;
    *(_QWORD *)(a1 + 232) = a2[29];
    *(_QWORD *)(a1 + 240) = v13;
    v15 = type metadata accessor for EventData(0);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v22(v28, v27, v15);
    v16 = *(int *)(a3 + 28);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t destroy for ContextualActionSheetExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[30]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for ContextualActionSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v29;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v28 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v28;
  v27 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v27;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v5 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v23 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v23;
  v22 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v22;
  v21 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v21;
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v6;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v7;
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v10;
  v11 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v11;
  v12 = *(_QWORD *)(a2 + 240);
  v13 = *(int *)(a3 + 24);
  v24 = a2 + v13;
  v25 = a1 + v13;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v12;
  v14 = type metadata accessor for EventData(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v20(v25, v24, v14);
  v15 = *(int *)(a3 + 28);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ContextualActionSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a2 + 160);
  v23 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v26 = *(_QWORD *)(a2 + 192);
  v27 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v28 = *(_QWORD *)(a2 + 208);
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v30 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v32 = *(_QWORD *)(a2 + 240);
  v33 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = *(int *)(a3 + 24);
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  v38 = *(int *)(a3 + 28);
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t initializeWithTake for ContextualActionSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v9 = *(_OWORD *)(a2 + 224);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v9;
  v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v11;
  v13 = *(_OWORD *)(a2 + 112);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v12;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for ContextualActionSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v18;
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 160);
  v21 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 192);
  v25 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 208);
  v27 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 224);
  v29 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 240);
  v31 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(int *)(a3 + 24);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
  v36 = *(int *)(a3 + 28);
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextualActionSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B9238);
}

uint64_t sub_B9238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ContextualActionSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B92E4);
}

uint64_t sub_B92E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_B9380(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[1] = &unk_1FF6D8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContextualActionSheetExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_B9464 + 4 * byte_1FF5C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_B9498 + 4 * byte_1FF5C4[v4]))();
}

uint64_t sub_B9498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B94A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB94A8);
  return result;
}

uint64_t sub_B94B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB94BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_B94C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B94C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContextualActionSheetExposureEvent.Model.CodingKeys()
{
  return &type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys;
}

unint64_t sub_B94E8()
{
  unint64_t result;

  result = qword_29BF20;
  if (!qword_29BF20)
  {
    result = swift_getWitnessTable(&unk_1FF78C, &type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BF20);
  }
  return result;
}

unint64_t sub_B9530()
{
  unint64_t result;

  result = qword_29BF28;
  if (!qword_29BF28)
  {
    result = swift_getWitnessTable("\rd\a", &type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BF28);
  }
  return result;
}

unint64_t sub_B9578()
{
  unint64_t result;

  result = qword_29BF30;
  if (!qword_29BF30)
  {
    result = swift_getWitnessTable(&unk_1FF724, &type metadata for ContextualActionSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BF30);
  }
  return result;
}

uint64_t sub_B95BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_B97A4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29BF38, &enum case for SessionGroup.default(_:));
}

uint64_t static CollectionRemoveEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295798, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29BF38, a1);
}

uint64_t sub_B97E4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29BF50, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static CollectionRemoveEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957A0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29BF50, a1);
}

uint64_t CollectionRemoveEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionRemoveEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionRemoveEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29BFD8, (uint64_t)&nominal type descriptor for CollectionRemoveEvent);
}

uint64_t CollectionRemoveEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionRemoveEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionRemoveEvent.eventData.modify())()
{
  type metadata accessor for CollectionRemoveEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionRemoveEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for CollectionRemoveEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t CollectionRemoveEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionRemoveEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionRemoveEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29C068, (uint64_t)&nominal type descriptor for CollectionRemoveEvent.Model);
}

uint64_t CollectionRemoveEvent.Model.init(singleCollectionData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = v5;
  v6 = a3 + *(int *)(type metadata accessor for CollectionRemoveEvent.Model(0) + 20);
  v7 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t sub_B9A2C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0xD000000000000014;
}

uint64_t sub_B9A70@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_BAAA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B9A94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B9C50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B9ABC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B9C50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionRemoveEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[2];
  int v21;

  v3 = v1;
  v5 = sub_71B4(&qword_29BF68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_B9C50();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionRemoveEvent.Model.CodingKeys, &type metadata for CollectionRemoveEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 8);
  v13 = *(_DWORD *)(v3 + 16);
  v20[0] = *(_QWORD *)v3;
  v20[1] = v12;
  v21 = v13;
  HIBYTE(v19) = 0;
  v14 = sub_159A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, (char *)&v19 + 7, v5, &type metadata for SingleCollectionData, v14);
  if (!v2)
  {
    v15 = v3 + *(int *)(type metadata accessor for CollectionRemoveEvent.Model(0) + 20);
    LOBYTE(v20[0]) = 1;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_B9C50()
{
  unint64_t result;

  result = qword_29BF70;
  if (!qword_29BF70)
  {
    result = swift_getWitnessTable(&unk_1FF9BC, &type metadata for CollectionRemoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29BF70);
  }
  return result;
}

void CollectionRemoveEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  char v34;

  v27 = a2;
  v4 = type metadata accessor for EventData(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4);
  v28 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_29BF78);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CollectionRemoveEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_B9C50();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionRemoveEvent.Model.CodingKeys, &type metadata for CollectionRemoveEvent.Model.CodingKeys, v14, v13, v12);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v25 = v9;
    v26 = a1;
    v15 = v6;
    v16 = (uint64_t)v11;
    v18 = v28;
    v17 = v29;
    v19 = v30;
    v34 = 0;
    v20 = sub_1595C();
    v21 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v32, &type metadata for SingleCollectionData, &v34, v31, &type metadata for SingleCollectionData, v20);
    v22 = v32[1];
    v23 = v33;
    *(_QWORD *)v16 = v32[0];
    *(_QWORD *)(v16 + 8) = v22;
    *(_DWORD *)(v16 + 16) = v23;
    LOBYTE(v32[0]) = 1;
    v24 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, v32, v21, v19, v24);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v21);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v16 + *(int *)(v25 + 20), v18, v19);
    sub_B9EFC(v16, v27);
    sub_7DAC(v26);
    sub_B9F40(v16);
  }
}

uint64_t sub_B9EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CollectionRemoveEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_B9F40(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CollectionRemoveEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_B9F7C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  CollectionRemoveEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_B9F90(_QWORD *a1)
{
  return CollectionRemoveEvent.Model.encode(to:)(a1);
}

uint64_t sub_B9FA4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295798, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29BF38, (uint64_t)sub_B97A4, a1);
}

uint64_t sub_B9FC8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957A0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29BF50, (uint64_t)sub_B97E4, a1);
}

uint64_t sub_B9FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionRemoveEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_299498);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for CollectionRemoveEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for CollectionRemoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for CollectionRemoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CollectionRemoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for CollectionRemoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionRemoveEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BA39C);
}

uint64_t sub_BA39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_299498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CollectionRemoveEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BA424);
}

uint64_t sub_BA424(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_299498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_BA4A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_76DEC(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CollectionRemoveEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v6 = *(int *)(a3 + 20);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for EventData(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CollectionRemoveEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CollectionRemoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CollectionRemoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for CollectionRemoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionRemoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BA794);
}

uint64_t sub_BA794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CollectionRemoveEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BA81C);
}

uint64_t sub_BA81C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_BA890(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1FF8E0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionRemoveEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_BA950 + 4 * byte_1FF815[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_BA984 + 4 * byte_1FF810[v4]))();
}

uint64_t sub_BA984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BA98C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xBA994);
  return result;
}

uint64_t sub_BA9A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xBA9A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_BA9AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BA9B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionRemoveEvent.Model.CodingKeys()
{
  return &type metadata for CollectionRemoveEvent.Model.CodingKeys;
}

unint64_t sub_BA9D4()
{
  unint64_t result;

  result = qword_29C0A0;
  if (!qword_29C0A0)
  {
    result = swift_getWitnessTable(&unk_1FF994, &type metadata for CollectionRemoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C0A0);
  }
  return result;
}

unint64_t sub_BAA1C()
{
  unint64_t result;

  result = qword_29C0A8;
  if (!qword_29C0A8)
  {
    result = swift_getWitnessTable("ec\a", &type metadata for CollectionRemoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C0A8);
  }
  return result;
}

unint64_t sub_BAA64()
{
  unint64_t result;

  result = qword_29C0B0;
  if (!qword_29C0B0)
  {
    result = swift_getWitnessTable(&unk_1FF92C, &type metadata for CollectionRemoveEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C0B0);
  }
  return result;
}

uint64_t sub_BAAA8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x800000000021F710;
    if (a2 == 0x800000000021F710)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F710, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ScrubData.startPosition.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t ScrubData.startPosition.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double BooksGoalsData.lastAudioBookCompletedDate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void BooksGoalsData.lastAudioBookCompletedDate.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

BookAnalytics::BooksGoalsData __swiftcall BooksGoalsData.init(booksCompletedCnt:lastBookCompletedDate:audioBooksCompletedCnt:lastAudioBookCompletedDate:)(Swift::Int32 booksCompletedCnt, Swift::Double lastBookCompletedDate, Swift::Int32 audioBooksCompletedCnt, Swift::Double lastAudioBookCompletedDate)
{
  uint64_t v4;
  BookAnalytics::BooksGoalsData result;

  *(_DWORD *)v4 = booksCompletedCnt;
  *(Swift::Double *)(v4 + 8) = lastBookCompletedDate;
  *(_DWORD *)(v4 + 16) = audioBooksCompletedCnt;
  *(Swift::Double *)(v4 + 24) = lastAudioBookCompletedDate;
  result.lastAudioBookCompletedDate = lastAudioBookCompletedDate;
  result.lastBookCompletedDate = lastBookCompletedDate;
  result.audioBooksCompletedCnt = audioBooksCompletedCnt;
  result.booksCompletedCnt = booksCompletedCnt;
  return result;
}

uint64_t sub_BABD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_BAC10 + 4 * byte_1FFA0C[a1]))(0xD000000000000011, 0x8000000000220CB0);
}

uint64_t sub_BAC10(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_BAC48()
{
  unsigned __int8 *v0;

  return sub_BABD8(*v0);
}

uint64_t sub_BAC50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_BB2AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_BAC74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_BB060();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_BAC9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_BB060();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BooksGoalsData.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v4 = sub_71B4(&qword_29C0B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned int *)v1;
  v9 = v1[1];
  v17 = *((_DWORD *)v1 + 4);
  v10 = v1[3];
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_BB060();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BooksGoalsData.CodingKeys, &type metadata for BooksGoalsData.CodingKeys, v13, v11, v12);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v21, v4);
  if (!v2)
  {
    v14 = v17;
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v20, v4, v9);
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v19, v4);
    v18 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v18, v4, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t BooksGoalsData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  double v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v5 = sub_71B4(&qword_29C0C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_BB060();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BooksGoalsData.CodingKeys, &type metadata for BooksGoalsData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v22 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
    v21 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
    v14 = v13;
    v20 = 2;
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
    v19 = 3;
    v17 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_DWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v16;
    *(double *)(a2 + 24) = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_BAFF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BooksGoalsData.init(from:)(a1, a2);
}

uint64_t sub_BB008(_QWORD *a1)
{
  return BooksGoalsData.encode(to:)(a1);
}

BOOL _s13BookAnalytics14BooksGoalsDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24);
}

unint64_t sub_BB060()
{
  unint64_t result;

  result = qword_29C0C0;
  if (!qword_29C0C0)
  {
    result = swift_getWitnessTable(&unk_1FFBB8, &type metadata for BooksGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C0C0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BooksGoalsData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BooksGoalsData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BooksGoalsData()
{
  return &type metadata for BooksGoalsData;
}

uint64_t storeEnumTagSinglePayload for BooksGoalsData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_BB154 + 4 * byte_1FFA15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_BB188 + 4 * byte_1FFA10[v4]))();
}

uint64_t sub_BB188(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BB190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xBB198);
  return result;
}

uint64_t sub_BB1A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xBB1ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_BB1B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BB1B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksGoalsData.CodingKeys()
{
  return &type metadata for BooksGoalsData.CodingKeys;
}

unint64_t sub_BB1D8()
{
  unint64_t result;

  result = qword_29C0D0;
  if (!qword_29C0D0)
  {
    result = swift_getWitnessTable(&unk_1FFB90, &type metadata for BooksGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C0D0);
  }
  return result;
}

unint64_t sub_BB220()
{
  unint64_t result;

  result = qword_29C0D8;
  if (!qword_29C0D8)
  {
    result = swift_getWitnessTable("ic\a", &type metadata for BooksGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C0D8);
  }
  return result;
}

unint64_t sub_BB268()
{
  unint64_t result;

  result = qword_29C0E0;
  if (!qword_29C0E0)
  {
    result = swift_getWitnessTable(&unk_1FFB28, &type metadata for BooksGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C0E0);
  }
  return result;
}

uint64_t sub_BB2AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000000220CB0;
    if (a2 == 0x8000000000220CB0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000220CB0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000000220CD0)
  {
    v6 = 0x8000000000220CD0;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000000220CD0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000000220CF0)
  {
    v7 = 0x8000000000220CF0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000000220CF0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000000220D10)
  {
    swift_bridgeObjectRelease(0x8000000000220D10);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000000220D10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_BB444(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29C0E8, &enum case for SessionGroup.default(_:));
}

uint64_t static AudioPlaybackSpeedChangeEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957A8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C0E8, a1);
}

uint64_t sub_BB484(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29C100, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AudioPlaybackSpeedChangeEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957B0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C100, a1);
}

uint64_t AudioPlaybackSpeedChangeEvent.audioPlaybackSpeedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_29C118);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AudioPlaybackSpeedChangeEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29C1A0, (uint64_t)&nominal type descriptor for AudioPlaybackSpeedChangeEvent);
}

uint64_t AudioPlaybackSpeedChangeEvent.audioPlaybackSpeedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 20);
  v4 = sub_71B4(&qword_29C118);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioPlaybackSpeedChangeEvent.audioPlaybackSpeedData.modify())()
{
  type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioPlaybackSpeedChangeEvent.listeningSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioPlaybackSpeedChangeEvent.listeningSessionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 24);
  v4 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioPlaybackSpeedChangeEvent.listeningSessionData.modify())()
{
  type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioPlaybackSpeedChangeEvent.listeningActionSourceData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioPlaybackSpeedChangeEvent.listeningActionSourceData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 28);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioPlaybackSpeedChangeEvent.listeningActionSourceData.modify())()
{
  type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioPlaybackSpeedChangeEvent.bitRateData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 32);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioPlaybackSpeedChangeEvent.bitRateData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 32);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioPlaybackSpeedChangeEvent.bitRateData.modify())()
{
  type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioPlaybackSpeedChangeEvent.errorData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 36);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioPlaybackSpeedChangeEvent.errorData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 36);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioPlaybackSpeedChangeEvent.errorData.modify())()
{
  type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioPlaybackSpeedChangeEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 40);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioPlaybackSpeedChangeEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 40);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioPlaybackSpeedChangeEvent.seriesData.modify())()
{
  type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioPlaybackSpeedChangeEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioPlaybackSpeedChangeEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioPlaybackSpeedChangeEvent.eventData.modify())()
{
  type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioPlaybackSpeedChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for AudioPlaybackSpeedChangeEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_29C118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v2, v12);
  v13 = a1 + v4[9];
  v14 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v2, v14);
  v15 = a1 + v4[10];
  v16 = enum case for EventProperty.optional<A>(_:);
  v17 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v2, v19);
}

uint64_t AudioPlaybackSpeedChangeEvent.Model.listeningSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  char v11;
  char v12;
  int v13;
  char v14;
  char v15;

  v2 = *(_BYTE *)(v1 + 108);
  v3 = *(_DWORD *)(v1 + 112);
  v4 = *(_BYTE *)(v1 + 116);
  v5 = *(_DWORD *)(v1 + 120);
  v7 = *(_QWORD *)(v1 + 128);
  v6 = *(_QWORD *)(v1 + 136);
  v8 = *(_BYTE *)(v1 + 144);
  v9 = *(_BYTE *)(v1 + 145);
  v10 = *(_DWORD *)(v1 + 148);
  v11 = *(_BYTE *)(v1 + 152);
  v12 = *(_BYTE *)(v1 + 153);
  v13 = *(_DWORD *)(v1 + 156);
  v14 = *(_BYTE *)(v1 + 160);
  v15 = *(_BYTE *)(v1 + 161);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 104);
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 41) = v9;
  *(_DWORD *)(a1 + 44) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 49) = v12;
  *(_DWORD *)(a1 + 52) = v13;
  *(_BYTE *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 57) = v15;
  return swift_bridgeObjectRetain(v6);
}

void AudioPlaybackSpeedChangeEvent.Model.listeningActionSourceData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 162);
}

void AudioPlaybackSpeedChangeEvent.Model.bitRateData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 168);
  v3 = *(_DWORD *)(v1 + 172);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 164);
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
}

uint64_t AudioPlaybackSpeedChangeEvent.Model.errorData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[23];
  v3 = v1[24];
  v4 = v1[25];
  *a1 = v1[22];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t AudioPlaybackSpeedChangeEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent.Model(0) + 44);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29C250, (uint64_t)&nominal type descriptor for AudioPlaybackSpeedChangeEvent.Model);
}

uint64_t AudioPlaybackSpeedChangeEvent.Model.init(contentData:audioPlaybackSpeedData:listeningSessionData:listeningActionSourceData:bitRateData:errorData:seriesData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a9 = *(_QWORD *)a1;
  *(_QWORD *)(a9 + 8) = v11;
  *(_BYTE *)(a9 + 16) = *(_BYTE *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a9 + 48) = v12;
  v13 = *(_OWORD *)(a1 + 24);
  *(_WORD *)(a9 + 56) = *(_WORD *)(a1 + 56);
  *(_DWORD *)(a9 + 60) = *(_DWORD *)(a1 + 60);
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(a1 + 64);
  *(_DWORD *)(a9 + 68) = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a9 + 24) = v13;
  *(_BYTE *)(a9 + 72) = v14;
  *(_DWORD *)(a9 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a9 + 77) = *(_BYTE *)(a1 + 77);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *a2;
  *(_DWORD *)(a9 + 104) = *(_DWORD *)a3;
  *(_BYTE *)(a9 + 108) = *(_BYTE *)(a3 + 4);
  *(_DWORD *)(a9 + 112) = *(_DWORD *)(a3 + 8);
  *(_BYTE *)(a9 + 116) = *(_BYTE *)(a3 + 12);
  *(_BYTE *)(a9 + 144) = *(_BYTE *)(a3 + 40);
  *(_BYTE *)(a9 + 145) = *(_BYTE *)(a3 + 41);
  *(_DWORD *)(a9 + 148) = *(_DWORD *)(a3 + 44);
  *(_BYTE *)(a9 + 152) = *(_BYTE *)(a3 + 48);
  *(_BYTE *)(a9 + 153) = *(_BYTE *)(a3 + 49);
  *(_DWORD *)(a9 + 156) = *(_DWORD *)(a3 + 52);
  *(_BYTE *)(a9 + 160) = *(_BYTE *)(a3 + 56);
  v17 = *(_DWORD *)(a3 + 16);
  v18 = *(_OWORD *)(a3 + 24);
  *(_BYTE *)(a9 + 161) = *(_BYTE *)(a3 + 57);
  *(_WORD *)(a9 + 162) = *a4;
  *(_DWORD *)(a9 + 164) = *(_DWORD *)a5;
  *(_BYTE *)(a9 + 168) = *(_BYTE *)(a5 + 4);
  v19 = *a6;
  *(_DWORD *)(a9 + 172) = *(_DWORD *)(a5 + 8);
  v20 = *((_QWORD *)a6 + 3);
  *(_QWORD *)(a9 + 192) = *((_QWORD *)a6 + 2);
  *(_QWORD *)(a9 + 200) = v20;
  v21 = *a7;
  v22 = a7[1];
  v23 = a7[2];
  *(_OWORD *)(a9 + 80) = v15;
  *(_QWORD *)(a9 + 96) = v16;
  *(_DWORD *)(a9 + 120) = v17;
  *(_OWORD *)(a9 + 128) = v18;
  *(_OWORD *)(a9 + 176) = v19;
  *(_OWORD *)(a9 + 208) = v21;
  *(_OWORD *)(a9 + 224) = v22;
  *(_OWORD *)(a9 + 240) = v23;
  v24 = a9 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent.Model(0) + 44);
  v25 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a8, v25);
}

uint64_t sub_BBE48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_BBE84 + 4 * byte_1FFC10[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_BBE84()
{
  return 0xD000000000000016;
}

uint64_t sub_BBED8()
{
  return 0x4465746152746962;
}

uint64_t sub_BBEEC()
{
  return 0x746144726F727265;
}

uint64_t sub_BBF34()
{
  unsigned __int8 *v0;

  return sub_BBE48(*v0);
}

uint64_t sub_BBF3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_BE92C(a1, a2);
  *a3 = result;
  return result;
}

void sub_BBF60(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_BBF6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_BC380();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_BBF94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_BC380();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AudioPlaybackSpeedChangeEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  int v27;
  char v28;
  int v29;
  char v30;
  char v31;
  int v32;
  char v33;
  char v34;
  int v35;
  char v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char v53;
  __int128 v54;
  _BYTE v55[32];
  uint64_t v56;
  __int16 v57;
  int v58;
  char v59;
  int v60;
  char v61;
  int v62;
  char v63;
  __int128 v64;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29C120);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_BC380();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys, &type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v54 = *(_QWORD *)v4;
  *((_QWORD *)&v54 + 1) = v13;
  v55[0] = v14;
  *(_OWORD *)&v55[8] = v15;
  *(_QWORD *)&v55[24] = v16;
  v56 = v17;
  v57 = v18;
  v58 = v19;
  v59 = v20;
  v60 = v21;
  v61 = v22;
  v62 = *(_DWORD *)(v4 + 73);
  v63 = v23;
  v64 = *(_OWORD *)(v4 + 80);
  v53 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    *(_QWORD *)&v54 = *(_QWORD *)(v4 + 96);
    v53 = 1;
    v25 = sub_BC3C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v6, &type metadata for AudioPlaybackSpeedData, v25);
    v26 = *(_BYTE *)(v4 + 108);
    v27 = *(_DWORD *)(v4 + 112);
    v28 = *(_BYTE *)(v4 + 116);
    v29 = *(_DWORD *)(v4 + 120);
    v30 = *(_BYTE *)(v4 + 144);
    v31 = *(_BYTE *)(v4 + 145);
    v32 = *(_DWORD *)(v4 + 148);
    v33 = *(_BYTE *)(v4 + 152);
    v34 = *(_BYTE *)(v4 + 153);
    v35 = *(_DWORD *)(v4 + 156);
    v36 = *(_BYTE *)(v4 + 160);
    v37 = *(_BYTE *)(v4 + 161);
    LODWORD(v54) = *(_DWORD *)(v4 + 104);
    BYTE4(v54) = v26;
    DWORD2(v54) = v27;
    BYTE12(v54) = v28;
    *(_DWORD *)v55 = v29;
    *(_OWORD *)&v55[8] = *(_OWORD *)(v4 + 128);
    v55[24] = v30;
    v55[25] = v31;
    *(_DWORD *)&v55[28] = v32;
    LOBYTE(v56) = v33;
    BYTE1(v56) = v34;
    HIDWORD(v56) = v35;
    LOBYTE(v57) = v36;
    HIBYTE(v57) = v37;
    v53 = 2;
    v38 = sub_46970();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v6, &type metadata for ListeningSessionData, v38);
    LOWORD(v54) = *(_WORD *)(v4 + 162);
    v53 = 3;
    v39 = sub_171A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v6, &type metadata for ListeningActionSourceData, v39);
    v40 = *(_BYTE *)(v4 + 168);
    v41 = *(_DWORD *)(v4 + 172);
    LODWORD(v54) = *(_DWORD *)(v4 + 164);
    BYTE4(v54) = v40;
    DWORD2(v54) = v41;
    v53 = 4;
    v42 = sub_171E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v6, &type metadata for BitRateData, v42);
    v43 = *(_QWORD *)(v4 + 192);
    v44 = *(_QWORD *)(v4 + 200);
    v54 = *(_OWORD *)(v4 + 176);
    *(_QWORD *)v55 = v43;
    *(_QWORD *)&v55[8] = v44;
    v53 = 5;
    v45 = sub_17228();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v6, &type metadata for ErrorData, v45);
    v46 = *(_OWORD *)(v4 + 224);
    v54 = *(_OWORD *)(v4 + 208);
    *(_OWORD *)v55 = v46;
    *(_OWORD *)&v55[16] = *(_OWORD *)(v4 + 240);
    v53 = 6;
    v47 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v54, &v53, v6, &type metadata for SeriesData, v47);
    v48 = v4 + *(int *)(type metadata accessor for AudioPlaybackSpeedChangeEvent.Model(0) + 44);
    LOBYTE(v54) = 7;
    v49 = type metadata accessor for EventData(0);
    v50 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v48, &v54, v6, v49, v50);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_BC380()
{
  unint64_t result;

  result = qword_29C128;
  if (!qword_29C128)
  {
    result = swift_getWitnessTable(&unk_1FFEA4, &type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C128);
  }
  return result;
}

unint64_t sub_BC3C4()
{
  unint64_t result;

  result = qword_29C130;
  if (!qword_29C130)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AudioPlaybackSpeedData, &type metadata for AudioPlaybackSpeedData);
    atomic_store(result, (unint64_t *)&qword_29C130);
  }
  return result;
}

void AudioPlaybackSpeedChangeEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  char v28;
  int v29;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  char v36;
  int v37;
  char v38;
  char v39;
  int v40;
  char v41;
  char v42;
  int v43;
  char v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  int v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 v61;
  _BYTE v62[32];
  uint64_t v63;
  __int16 v64;
  int v65;
  char v66;
  int v67;
  char v68;
  int v69;
  char v70;
  __int128 v71;
  char v72;

  v55 = a2;
  v56 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v5 = (uint64_t *)((char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = sub_71B4(&qword_29C138);
  v6 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AudioPlaybackSpeedChangeEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v59 = a1;
  sub_7988(a1, v12);
  v14 = sub_BC380();
  v57 = v8;
  v15 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys, &type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v59);
  }
  else
  {
    v60 = v9;
    v16 = (uint64_t)v11;
    v17 = v56;
    v72 = 0;
    v18 = sub_1779C();
    v19 = v57;
    v20 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for ContentData, &v72, v58, &type metadata for ContentData, v18);
    v21 = *((_QWORD *)&v61 + 1);
    v22 = v62[0];
    v23 = *(_OWORD *)&v62[8];
    v24 = *(_QWORD *)&v62[24];
    v25 = v63;
    v26 = v64;
    v27 = v65;
    v28 = v66;
    v29 = v67;
    v30 = v68;
    v31 = v70;
    *(_QWORD *)v16 = v61;
    *(_QWORD *)(v16 + 8) = v21;
    *(_BYTE *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 24) = v23;
    *(_QWORD *)(v16 + 40) = v24;
    *(_QWORD *)(v16 + 48) = v25;
    *(_WORD *)(v16 + 56) = v26;
    *(_DWORD *)(v16 + 60) = v27;
    *(_BYTE *)(v16 + 64) = v28;
    *(_DWORD *)(v16 + 68) = v29;
    *(_BYTE *)(v16 + 72) = v30;
    *(_DWORD *)(v16 + 73) = v69;
    *(_BYTE *)(v16 + 77) = v31;
    *(_OWORD *)(v16 + 80) = v71;
    v72 = 1;
    v32 = sub_BC9A4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for AudioPlaybackSpeedData, &v72, v20, &type metadata for AudioPlaybackSpeedData, v32);
    *(_QWORD *)(v16 + 96) = v61;
    v72 = 2;
    v33 = sub_4724C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for ListeningSessionData, &v72, v20, &type metadata for ListeningSessionData, v33);
    v34 = BYTE4(v61);
    v35 = DWORD2(v61);
    v36 = BYTE12(v61);
    v37 = *(_DWORD *)v62;
    v38 = v62[24];
    v39 = v62[25];
    v40 = *(_DWORD *)&v62[28];
    v41 = v63;
    v42 = BYTE1(v63);
    v43 = HIDWORD(v63);
    v44 = v64;
    v45 = HIBYTE(v64);
    *(_DWORD *)(v16 + 104) = v61;
    *(_BYTE *)(v16 + 108) = v34;
    *(_DWORD *)(v16 + 112) = v35;
    *(_BYTE *)(v16 + 116) = v36;
    *(_DWORD *)(v16 + 120) = v37;
    *(_OWORD *)(v16 + 128) = *(_OWORD *)&v62[8];
    *(_BYTE *)(v16 + 144) = v38;
    *(_BYTE *)(v16 + 145) = v39;
    *(_DWORD *)(v16 + 148) = v40;
    *(_BYTE *)(v16 + 152) = v41;
    *(_BYTE *)(v16 + 153) = v42;
    *(_DWORD *)(v16 + 156) = v43;
    *(_BYTE *)(v16 + 160) = v44;
    *(_BYTE *)(v16 + 161) = v45;
    v72 = 3;
    v46 = sub_17824();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for ListeningActionSourceData, &v72, v20, &type metadata for ListeningActionSourceData, v46);
    *(_WORD *)(v16 + 162) = v61;
    v72 = 4;
    v47 = sub_17868();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for BitRateData, &v72, v20, &type metadata for BitRateData, v47);
    v48 = BYTE4(v61);
    v49 = DWORD2(v61);
    *(_DWORD *)(v16 + 164) = v61;
    *(_BYTE *)(v16 + 168) = v48;
    *(_DWORD *)(v16 + 172) = v49;
    v72 = 5;
    v50 = sub_178AC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for ErrorData, &v72, v20, &type metadata for ErrorData, v50);
    v51 = *(_OWORD *)v62;
    *(_OWORD *)(v16 + 176) = v61;
    *(_OWORD *)(v16 + 192) = v51;
    v72 = 6;
    v52 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, &type metadata for SeriesData, &v72, v20, &type metadata for SeriesData, v52);
    v53 = *(_OWORD *)v62;
    *(_OWORD *)(v16 + 208) = v61;
    *(_OWORD *)(v16 + 224) = v53;
    *(_OWORD *)(v16 + 240) = *(_OWORD *)&v62[16];
    LOBYTE(v61) = 7;
    v54 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v17, &v61, v20, v17, v54);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v16 + *(int *)(v60 + 44), v5, v17);
    sub_BC9E8(v16, v55);
    sub_7DAC(v59);
    sub_BCA2C(v16);
  }
}

unint64_t sub_BC9A4()
{
  unint64_t result;

  result = qword_29C140;
  if (!qword_29C140)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AudioPlaybackSpeedData, &type metadata for AudioPlaybackSpeedData);
    atomic_store(result, (unint64_t *)&qword_29C140);
  }
  return result;
}

uint64_t sub_BC9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudioPlaybackSpeedChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_BCA2C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AudioPlaybackSpeedChangeEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_BCA68(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AudioPlaybackSpeedChangeEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_BCA7C(_QWORD *a1)
{
  return AudioPlaybackSpeedChangeEvent.Model.encode(to:)(a1);
}

uint64_t sub_BCA90@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957A8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C0E8, (uint64_t)sub_BB444, a1);
}

uint64_t sub_BCAB4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957B0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C100, (uint64_t)sub_BB484, a1);
}

uint64_t sub_BCAD8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_29C118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v4, v13);
  v14 = a2 + a1[9];
  v15 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v4, v15);
  v16 = a2 + a1[10];
  v17 = enum case for EventProperty.optional<A>(_:);
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v4, v20);
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioPlaybackSpeedChangeEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v36);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29C118);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_297DE8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296770);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296778);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296780);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  }
  return a1;
}

uint64_t destroy for AudioPlaybackSpeedChangeEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_29C118);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
}

uint64_t initializeWithCopy for AudioPlaybackSpeedChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  return a1;
}

uint64_t assignWithCopy for AudioPlaybackSpeedChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

uint64_t initializeWithTake for AudioPlaybackSpeedChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  return a1;
}

uint64_t assignWithTake for AudioPlaybackSpeedChangeEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioPlaybackSpeedChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BD664);
}

uint64_t sub_BD664(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29C118);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_297DE8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296770);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296778);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296780);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296310);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v8 = sub_71B4(&qword_295D70);
                v12 = *(_QWORD *)(v8 - 8);
                v13 = a3[11];
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AudioPlaybackSpeedChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BD7DC);
}

uint64_t sub_BD7DC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29C118);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_297DE8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296770);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296778);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296780);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296310);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v10 = sub_71B4(&qword_295D70);
                v14 = *(_QWORD *)(v10 - 8);
                v15 = a4[11];
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_BD950(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[8];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v18[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_29C1B0, (uint64_t (*)(void))sub_BC9A4, (uint64_t (*)(void))sub_BC3C4, (uint64_t)&type metadata for AudioPlaybackSpeedData);
    if (v5 <= 0x3F)
    {
      v18[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_297EB0, (uint64_t (*)(void))sub_4724C, (uint64_t (*)(void))sub_46970, (uint64_t)&type metadata for ListeningSessionData);
      if (v7 <= 0x3F)
      {
        v18[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_296868, (uint64_t (*)(void))sub_17824, (uint64_t (*)(void))sub_171A0, (uint64_t)&type metadata for ListeningActionSourceData);
        if (v9 <= 0x3F)
        {
          v18[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_296870, (uint64_t (*)(void))sub_17868, (uint64_t (*)(void))sub_171E4, (uint64_t)&type metadata for BitRateData);
          if (v11 <= 0x3F)
          {
            v18[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, (unint64_t *)&unk_296878, (uint64_t (*)(void))sub_178AC, (uint64_t (*)(void))sub_17228, (uint64_t)&type metadata for ErrorData);
            if (v13 <= 0x3F)
            {
              v18[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
              if (v15 <= 0x3F)
              {
                v18[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_8734(319);
                if (v17 <= 0x3F)
                {
                  v18[7] = *(_QWORD *)(v16 - 8) + 64;
                  swift_initStructMetadata(a1, 256, 8, v18, a1 + 16);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v19);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = a2[12];
    v12 = *((_DWORD *)a2 + 26);
    *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
    *(_DWORD *)(a1 + 104) = v12;
    *(_BYTE *)(a1 + 116) = *((_BYTE *)a2 + 116);
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
    v13 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v13;
    *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
    *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    *(_BYTE *)(a1 + 153) = *((_BYTE *)a2 + 153);
    v14 = *((_DWORD *)a2 + 40);
    *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 39);
    *(_DWORD *)(a1 + 160) = v14;
    *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
    *(_QWORD *)(a1 + 164) = *(uint64_t *)((char *)a2 + 164);
    v15 = a2[23];
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_QWORD *)(a1 + 184) = v15;
    v16 = a2[25];
    *(_QWORD *)(a1 + 192) = a2[24];
    *(_QWORD *)(a1 + 200) = v16;
    v17 = a2[31];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    if (v17 == 1)
    {
      v18 = *((_OWORD *)a2 + 14);
      *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
      *(_OWORD *)(a1 + 224) = v18;
      *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
    }
    else
    {
      *(_QWORD *)(a1 + 208) = a2[26];
      *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
      *(_QWORD *)(a1 + 224) = a2[28];
      *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
      *(_WORD *)(a1 + 233) = *(_WORD *)((char *)a2 + 233);
      *(_QWORD *)(a1 + 240) = a2[30];
      *(_QWORD *)(a1 + 248) = v17;
      swift_bridgeObjectRetain(v17);
    }
    v20 = *(int *)(a3 + 44);
    v21 = a1 + v20;
    v22 = (uint64_t)a2 + v20;
    v23 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for AudioPlaybackSpeedChangeEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[25]);
  v4 = a1[31];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 44);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v11 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v11;
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v13 = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = v13;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v14;
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v15;
  v16 = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  if (v16 == 1)
  {
    v17 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v17;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  }
  else
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_WORD *)(a1 + 233) = *(_WORD *)(a2 + 233);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = v16;
    swift_bridgeObjectRetain(v16);
  }
  v18 = *(int *)(a3 + 44);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

uint64_t assignWithCopy for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  int v44;
  int v45;
  uint64_t v46;
  BAEventReporter *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  int64_t v52;
  int64_t v53;
  id v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  __int128 *v76;
  __int128 *v77;
  BAEventReporter *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  int64_t v90;
  int64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v44 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v44;
  v45 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v45;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v46 = *(_QWORD *)(a2 + 136);
  v47 = *(BAEventReporter **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  v55 = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = v55;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v56 = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = v56;
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  v57 = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = v57;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v58 = *(_QWORD *)(a2 + 184);
  v59 = *(BAEventReporter **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v67 = *(_QWORD *)(a2 + 200);
  v68 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  v76 = (__int128 *)(a1 + 208);
  v77 = (__int128 *)(a2 + 208);
  v78 = *(BAEventReporter **)(a1 + 248);
  v79 = *(_QWORD *)(a2 + 248);
  if (v78 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v79 == 1)
    {
      v80 = *v77;
      v81 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v81;
      *v76 = v80;
    }
    else
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
      *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v84 = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 248) = v84;
      swift_bridgeObjectRetain(v84);
    }
  }
  else if (v79 == 1)
  {
    sub_19008(a1 + 208);
    v83 = *(_OWORD *)(a2 + 224);
    v82 = *(_OWORD *)(a2 + 240);
    *v76 = *v77;
    *(_OWORD *)(a1 + 224) = v83;
    *(_OWORD *)(a1 + 240) = v82;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
    *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v85 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v85;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRelease(v78, v86, v87, v88, v89, v90, v91, v92);
  }
  v93 = *(int *)(a3 + 44);
  v94 = a1 + v93;
  v95 = a2 + v93;
  v96 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 24))(v94, v95, v96);
  return a1;
}

uint64_t initializeWithTake for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  v9 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 146) = *(_OWORD *)(a2 + 146);
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  v11 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v11;
  v12 = *(int *)(a3 + 44);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t assignWithTake for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  const char *v67;
  void *v68;
  void *v69;
  void *v70;
  int64_t v71;
  int64_t v72;
  void *v73;
  BAEventReporter *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v40 = *(_QWORD *)(a2 + 136);
  v41 = *(BAEventReporter **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v40;
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  v49 = *(_QWORD *)(a2 + 184);
  v50 = *(BAEventReporter **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v49;
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  v58 = *(_QWORD *)(a2 + 200);
  v59 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v58;
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  v74 = *(BAEventReporter **)(a1 + 248);
  if (v74 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v75 = *(_QWORD *)(a2 + 248);
    if (v75 != 1)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_WORD *)(a1 + 233) = *(_WORD *)(a2 + 233);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v75;
      swift_bridgeObjectRelease(v74, v67, v68, v69, v70, v71, v72, v73);
      goto LABEL_6;
    }
    sub_19008(a1 + 208);
  }
  v76 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v76;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
LABEL_6:
  v77 = a3[11];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BE5DC);
}

uint64_t sub_BE5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AudioPlaybackSpeedChangeEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BE664);
}

uint64_t sub_BE664(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t sub_BE6D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[1] = &unk_1FFD50;
  v4[2] = &unk_1FFD68;
  v4[3] = &unk_1FFD80;
  v4[4] = &unk_1FFD98;
  v4[5] = &unk_1FFDB0;
  v4[6] = &unk_1FFDC8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AudioPlaybackSpeedChangeEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_BE7D4 + 4 * byte_1FFC1D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_BE808 + 4 * byte_1FFC18[v4]))();
}

uint64_t sub_BE808(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BE810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xBE818);
  return result;
}

uint64_t sub_BE824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xBE82CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_BE830(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BE838(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioPlaybackSpeedChangeEvent.Model.CodingKeys()
{
  return &type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys;
}

unint64_t sub_BE858()
{
  unint64_t result;

  result = qword_29C2A0;
  if (!qword_29C2A0)
  {
    result = swift_getWitnessTable(&unk_1FFE7C, &type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C2A0);
  }
  return result;
}

unint64_t sub_BE8A0()
{
  unint64_t result;

  result = qword_29C2A8;
  if (!qword_29C2A8)
  {
    result = swift_getWitnessTable(&unk_1FFDEC, &type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C2A8);
  }
  return result;
}

unint64_t sub_BE8E8()
{
  unint64_t result;

  result = qword_29C2B0;
  if (!qword_29C2B0)
  {
    result = swift_getWitnessTable(&unk_1FFE14, &type metadata for AudioPlaybackSpeedChangeEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C2B0);
  }
  return result;
}

uint64_t sub_BE92C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000016)
  {
    v7 = 0x8000000000220D30;
    if (a2 == 0x8000000000220D30)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000000220D30, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x800000000021F050;
    if (a2 == 0x800000000021F050)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F050, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000000021EC40)
  {
    v9 = 0x800000000021EC40;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000021EC40, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x4465746152746962 && a2 == 0xEB00000000617461)
  {
    v10 = 0xEB00000000617461;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4465746152746962, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x746144726F727265 && a2 == 0xE900000000000061)
  {
    v11 = 0xE900000000000061;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144726F727265, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v12 = 0xEA00000000006174;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_BEC98(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29C2B8, &enum case for SessionGroup.default(_:));
}

uint64_t static ClickEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957B8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C2B8, a1);
}

uint64_t sub_BECD8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29C2D0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ClickEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957C0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C2D0, a1);
}

uint64_t ClickEvent.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C2E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ClickEvent.clickData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C2E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ClickEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 20);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ClickEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29C3A0, (uint64_t)&nominal type descriptor for ClickEvent);
}

uint64_t ClickEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 20);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.pageData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.sectionData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.flowcaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 28);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.flowcaseData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 28);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.flowcaseData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.brickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 32);
  v4 = sub_71B4(&qword_29C2F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.brickData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 32);
  v4 = sub_71B4(&qword_29C2F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.brickData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 36);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 36);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.contentData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 40);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 40);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.upSellData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.seriesData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.locationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 48);
  v4 = sub_71B4(&qword_29C2F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.locationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 48);
  v4 = sub_71B4(&qword_29C2F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.locationData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 52);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ClickEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent(0) + 52);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ClickEvent.eventData.modify())()
{
  type metadata accessor for ClickEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ClickEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29C2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ClickEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = enum case for EventProperty.optional<A>(_:);
  v11 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v10, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v10, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v10, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v10, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v10, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
}

uint64_t ClickEvent.Model.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v5);
}

uint64_t ClickEvent.Model.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t ClickEvent.Model.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_DWORD *)(v1 + 100);
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v1 + 136);
  v8 = *(_QWORD *)(v1 + 144);
  v9 = *(_QWORD *)(v1 + 152);
  v10 = *(_QWORD *)(v1 + 176);
  v11 = *(_DWORD *)(v1 + 184);
  v12 = *(_BYTE *)(v1 + 188);
  v13 = *(_QWORD *)(v1 + 192);
  v14 = *(_QWORD *)(v1 + 200);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 96);
  *(_DWORD *)(a1 + 4) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  v15 = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 80) = v10;
  *(_DWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 92) = v12;
  v16 = v15;
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return swift_bridgeObjectRetain(v16);
}

uint64_t ClickEvent.Model.flowcaseData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1[26];
  v3 = v1[27];
  v4 = v1[28];
  v5 = v1[29];
  v6 = v1[30];
  v7 = v1[31];
  v8 = v1[32];
  v9 = v1[33];
  v10 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  return sub_A68B0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t ClickEvent.Model.brickData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[35];
  v3 = v1[36];
  v4 = v1[37];
  v5 = v1[38];
  v6 = v1[39];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_BF804(v2, v3, v4, v5, v6);
}

uint64_t sub_BF804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t ClickEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[40];
  v3 = v1[41];
  v4 = v1[42];
  v5 = v1[43];
  v6 = v1[44];
  v7 = v1[45];
  v8 = v1[46];
  v9 = v1[47];
  v10 = v1[48];
  v11 = v1[49];
  v12 = v1[50];
  v13 = v1[51];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t ClickEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[55];
  v3 = v1[56];
  v4 = v1[57];
  v5 = v1[58];
  v6 = v1[59];
  v7 = v1[60];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

void ClickEvent.Model.locationData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 488);
}

uint64_t ClickEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClickEvent.Model(0) + 52);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ClickEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29C468, (uint64_t)&nominal type descriptor for ClickEvent.Model);
}

uint64_t ClickEvent.Model.init(clickData:pageData:sectionData:flowcaseData:brickData:contentData:upSellData:seriesData:locationData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>, char *a10, uint64_t a11)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v12 = *(_BYTE *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = (_OWORD *)(a9 + 280);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 24);
  v19 = *a3;
  v20 = *((_DWORD *)a3 + 1);
  v21 = *(_OWORD *)(a3 + 8);
  v22 = *(_OWORD *)(a3 + 24);
  v23 = *((_QWORD *)a3 + 5);
  v24 = *((_QWORD *)a3 + 6);
  v25 = *((_DWORD *)a3 + 22);
  v26 = a3[92];
  v27 = *((_QWORD *)a3 + 12);
  v28 = *((_QWORD *)a3 + 13);
  v29 = *(_QWORD *)(a4 + 64);
  v30 = *(_QWORD *)(a5 + 32);
  v31 = *(_QWORD *)(a7 + 16);
  v32 = *a10;
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(_BYTE *)(a9 + 16) = v12;
  *(_QWORD *)(a9 + 24) = v13;
  *(_QWORD *)(a9 + 32) = v14;
  *(_OWORD *)(a9 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a9 + 56) = v16;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)a2;
  *(_QWORD *)(a9 + 80) = v17;
  *(_QWORD *)(a9 + 88) = v18;
  *(_BYTE *)(a9 + 96) = v19;
  *(_DWORD *)(a9 + 100) = v20;
  *(_OWORD *)(a9 + 104) = v21;
  *(_OWORD *)(a9 + 120) = v22;
  *(_QWORD *)(a9 + 136) = v23;
  *(_QWORD *)(a9 + 144) = v24;
  *(_OWORD *)(a9 + 152) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a9 + 168) = *(_OWORD *)(a3 + 72);
  *(_DWORD *)(a9 + 184) = v25;
  *(_BYTE *)(a9 + 188) = v26;
  *(_QWORD *)(a9 + 192) = v27;
  *(_QWORD *)(a9 + 200) = v28;
  v33 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 208) = *(_OWORD *)a4;
  *(_OWORD *)(a9 + 224) = v33;
  v34 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a9 + 240) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a9 + 256) = v34;
  *(_QWORD *)(a9 + 272) = v29;
  v35 = *(_OWORD *)(a5 + 16);
  *v15 = *(_OWORD *)a5;
  v15[1] = v35;
  *(_QWORD *)(a9 + 312) = v30;
  v36 = a6[1];
  *(_OWORD *)(a9 + 320) = *a6;
  *(_OWORD *)(a9 + 336) = v36;
  v37 = a6[3];
  *(_OWORD *)(a9 + 352) = a6[2];
  *(_OWORD *)(a9 + 368) = v37;
  v38 = a6[5];
  *(_OWORD *)(a9 + 384) = a6[4];
  *(_OWORD *)(a9 + 400) = v38;
  *(_OWORD *)(a9 + 416) = *(_OWORD *)a7;
  *(_QWORD *)(a9 + 432) = v31;
  v39 = a8[1];
  v15[10] = *a8;
  v15[11] = v39;
  v15[12] = a8[2];
  *(_BYTE *)(a9 + 488) = v32;
  v40 = a9 + *(int *)(type metadata accessor for ClickEvent.Model(0) + 52);
  v41 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v40, a11, v41);
}

uint64_t sub_BFA6C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_BFAA4 + 4 * byte_1FFEF8[a1]))(0x7461446B63696C63, 0xE900000000000061);
}

uint64_t sub_BFAA4()
{
  return 0x6174614465676170;
}

uint64_t sub_BFABC()
{
  return 0x446E6F6974636573;
}

uint64_t sub_BFB0C()
{
  return 0x61446C6C65537075;
}

uint64_t sub_BFB58()
{
  return 0x746144746E657665;
}

uint64_t sub_BFB6C()
{
  unsigned __int8 *v0;

  return sub_BFA6C(*v0);
}

uint64_t sub_BFB74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C3604(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_BFB98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_BFFF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_BFBC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_BFFF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClickEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v50[96];
  uint64_t v51;
  uint64_t v52;
  char v53;

  v3 = v1;
  v5 = sub_71B4(&qword_29C300);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_BFFF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ClickEvent.Model.CodingKeys, &type metadata for ClickEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  v14 = *(_QWORD *)(v3 + 32);
  v15 = *(_QWORD *)(v3 + 56);
  *(_OWORD *)v50 = *(_OWORD *)v3;
  v50[16] = v12;
  *(_QWORD *)&v50[24] = v13;
  *(_QWORD *)&v50[32] = v14;
  *(_OWORD *)&v50[40] = *(_OWORD *)(v3 + 40);
  *(_QWORD *)&v50[56] = v15;
  v53 = 0;
  v16 = sub_C003C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v50, &v53, v5, &type metadata for ClickData, v16);
  if (!v2)
  {
    v17 = *(_QWORD *)(v3 + 80);
    v18 = *(_QWORD *)(v3 + 88);
    *(_OWORD *)v50 = *(_OWORD *)(v3 + 64);
    *(_QWORD *)&v50[16] = v17;
    *(_QWORD *)&v50[24] = v18;
    v53 = 1;
    v19 = sub_1B7AC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v50, &v53, v5, &type metadata for PageData, v19);
    v20 = *(_DWORD *)(v3 + 100);
    v21 = *(_OWORD *)(v3 + 104);
    v22 = *(_OWORD *)(v3 + 120);
    v23 = *(_QWORD *)(v3 + 136);
    v24 = *(_QWORD *)(v3 + 144);
    v25 = *(_DWORD *)(v3 + 184);
    v26 = *(_BYTE *)(v3 + 188);
    v27 = *(_QWORD *)(v3 + 192);
    v28 = *(_QWORD *)(v3 + 200);
    v50[0] = *(_BYTE *)(v3 + 96);
    *(_DWORD *)&v50[4] = v20;
    *(_OWORD *)&v50[8] = v21;
    *(_OWORD *)&v50[24] = v22;
    *(_QWORD *)&v50[40] = v23;
    *(_QWORD *)&v50[48] = v24;
    *(_OWORD *)&v50[56] = *(_OWORD *)(v3 + 152);
    *(_OWORD *)&v50[72] = *(_OWORD *)(v3 + 168);
    *(_DWORD *)&v50[88] = v25;
    v50[92] = v26;
    v51 = v27;
    v52 = v28;
    v53 = 2;
    v29 = sub_1B768();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v50, &v53, v5, &type metadata for SectionData, v29);
    v30 = *(_QWORD *)(v3 + 272);
    v31 = *(_OWORD *)(v3 + 224);
    *(_OWORD *)v50 = *(_OWORD *)(v3 + 208);
    *(_OWORD *)&v50[16] = v31;
    v32 = *(_OWORD *)(v3 + 256);
    *(_OWORD *)&v50[32] = *(_OWORD *)(v3 + 240);
    *(_OWORD *)&v50[48] = v32;
    *(_QWORD *)&v50[64] = v30;
    v53 = 3;
    v33 = sub_21244();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v53, v5, &type metadata for FlowcaseData, v33);
    v34 = *(_QWORD *)(v3 + 312);
    v35 = *(_OWORD *)(v3 + 296);
    *(_OWORD *)v50 = *(_OWORD *)(v3 + 280);
    *(_OWORD *)&v50[16] = v35;
    *(_QWORD *)&v50[32] = v34;
    v53 = 4;
    v36 = sub_C0080();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v53, v5, &type metadata for BrickData, v36);
    v37 = *(_OWORD *)(v3 + 336);
    *(_OWORD *)v50 = *(_OWORD *)(v3 + 320);
    *(_OWORD *)&v50[16] = v37;
    v38 = *(_OWORD *)(v3 + 368);
    *(_OWORD *)&v50[32] = *(_OWORD *)(v3 + 352);
    *(_OWORD *)&v50[48] = v38;
    v39 = *(_OWORD *)(v3 + 400);
    *(_OWORD *)&v50[64] = *(_OWORD *)(v3 + 384);
    *(_OWORD *)&v50[80] = v39;
    v53 = 5;
    v40 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v53, v5, &type metadata for ContentData, v40);
    v41 = *(_QWORD *)(v3 + 432);
    *(_OWORD *)v50 = *(_OWORD *)(v3 + 416);
    *(_QWORD *)&v50[16] = v41;
    v53 = 6;
    v42 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v53, v5, &type metadata for UpSellData, v42);
    v43 = *(_OWORD *)(v3 + 456);
    *(_OWORD *)v50 = *(_OWORD *)(v3 + 440);
    *(_OWORD *)&v50[16] = v43;
    *(_OWORD *)&v50[32] = *(_OWORD *)(v3 + 472);
    v53 = 7;
    v44 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v53, v5, &type metadata for SeriesData, v44);
    v50[0] = *(_BYTE *)(v3 + 488);
    v53 = 8;
    v45 = sub_C00C4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v53, v5, &type metadata for LocationData, v45);
    v46 = v3 + *(int *)(type metadata accessor for ClickEvent.Model(0) + 52);
    v50[0] = 9;
    v47 = type metadata accessor for EventData(0);
    v48 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v46, v50, v5, v47, v48);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_BFFF8()
{
  unint64_t result;

  result = qword_29C308;
  if (!qword_29C308)
  {
    result = swift_getWitnessTable(&unk_2001C4, &type metadata for ClickEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C308);
  }
  return result;
}

unint64_t sub_C003C()
{
  unint64_t result;

  result = qword_29C310;
  if (!qword_29C310)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClickData, &type metadata for ClickData);
    atomic_store(result, (unint64_t *)&qword_29C310);
  }
  return result;
}

unint64_t sub_C0080()
{
  unint64_t result;

  result = qword_29C318;
  if (!qword_29C318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BrickData, &type metadata for BrickData);
    atomic_store(result, (unint64_t *)&qword_29C318);
  }
  return result;
}

unint64_t sub_C00C4()
{
  unint64_t result;

  result = qword_29C320;
  if (!qword_29C320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationData, &type metadata for LocationData);
    atomic_store(result, (unint64_t *)&qword_29C320);
  }
  return result;
}

void ClickEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  _BYTE v64[96];
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;

  v59 = a2;
  v58 = type metadata accessor for EventData(0);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v5 = (_QWORD *)((char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = sub_71B4(&qword_29C328);
  v6 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClickEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v63 = a1;
  sub_7988(a1, v12);
  v14 = sub_BFFF8();
  v60 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClickEvent.Model.CodingKeys, &type metadata for ClickEvent.Model.CodingKeys, v14, v12, v13);
  if (v2)
  {
    v62 = v2;
    sub_7DAC(v63);
    LODWORD(v63) = 0;
  }
  else
  {
    v56 = v5;
    v15 = v6;
    v16 = v57;
    v18 = v58;
    v17 = v59;
    v68 = 0;
    v19 = sub_C0928();
    v20 = v61;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v64, &type metadata for ClickData, &v68, v61, &type metadata for ClickData, v19);
    v21 = v64[16];
    v22 = *(_QWORD *)&v64[24];
    v23 = *(_QWORD *)&v64[32];
    v24 = *(_QWORD *)&v64[56];
    *(_OWORD *)v11 = *(_OWORD *)v64;
    v11[16] = v21;
    *((_QWORD *)v11 + 3) = v22;
    *((_QWORD *)v11 + 4) = v23;
    *(_OWORD *)(v11 + 40) = *(_OWORD *)&v64[40];
    *((_QWORD *)v11 + 7) = v24;
    v68 = 1;
    v25 = sub_1C028();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v64, &type metadata for PageData, &v68, v20, &type metadata for PageData, v25);
    v55[1] = v15;
    v26 = *(_OWORD *)&v64[16];
    *((_OWORD *)v11 + 4) = *(_OWORD *)v64;
    *((_OWORD *)v11 + 5) = v26;
    v68 = 2;
    v27 = sub_1BFE4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v64, &type metadata for SectionData, &v68, v20, &type metadata for SectionData, v27);
    v28 = *(_DWORD *)&v64[4];
    v29 = *(_OWORD *)&v64[8];
    v30 = *(_OWORD *)&v64[24];
    v31 = *(_QWORD *)&v64[40];
    v32 = *(_QWORD *)&v64[48];
    v33 = *(_DWORD *)&v64[88];
    v34 = v64[92];
    v35 = v65;
    v36 = v66;
    v11[96] = v64[0];
    *((_DWORD *)v11 + 25) = v28;
    *(_OWORD *)(v11 + 104) = v29;
    *(_OWORD *)(v11 + 120) = v30;
    *((_QWORD *)v11 + 17) = v31;
    *((_QWORD *)v11 + 18) = v32;
    *(_OWORD *)(v11 + 152) = *(_OWORD *)&v64[56];
    *(_OWORD *)(v11 + 168) = *(_OWORD *)&v64[72];
    *((_DWORD *)v11 + 46) = v33;
    v11[188] = v34;
    *((_QWORD *)v11 + 24) = v35;
    *((_QWORD *)v11 + 25) = v36;
    v68 = 3;
    v37 = sub_211FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, &type metadata for FlowcaseData, &v68, v20, &type metadata for FlowcaseData, v37);
    v38 = *(_QWORD *)&v64[64];
    v39 = *(_OWORD *)&v64[16];
    *((_OWORD *)v11 + 13) = *(_OWORD *)v64;
    *((_OWORD *)v11 + 14) = v39;
    v40 = *(_OWORD *)&v64[48];
    *((_OWORD *)v11 + 15) = *(_OWORD *)&v64[32];
    *((_OWORD *)v11 + 16) = v40;
    *((_QWORD *)v11 + 34) = v38;
    v68 = 4;
    v41 = sub_C096C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, &type metadata for BrickData, &v68, v20, &type metadata for BrickData, v41);
    v42 = *(_QWORD *)&v64[32];
    v43 = *(_OWORD *)&v64[16];
    *(_OWORD *)(v11 + 280) = *(_OWORD *)v64;
    *(_OWORD *)(v11 + 296) = v43;
    v62 = v11 + 280;
    *((_QWORD *)v11 + 39) = v42;
    v68 = 5;
    v44 = sub_1779C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, &type metadata for ContentData, &v68, v20, &type metadata for ContentData, v44);
    v45 = *(_OWORD *)&v64[16];
    *((_OWORD *)v11 + 20) = *(_OWORD *)v64;
    *((_OWORD *)v11 + 21) = v45;
    v46 = *(_OWORD *)&v64[48];
    *((_OWORD *)v11 + 22) = *(_OWORD *)&v64[32];
    *((_OWORD *)v11 + 23) = v46;
    v47 = *(_OWORD *)&v64[80];
    *((_OWORD *)v11 + 24) = *(_OWORD *)&v64[64];
    *((_OWORD *)v11 + 25) = v47;
    v68 = 6;
    v48 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, &type metadata for UpSellData, &v68, v20, &type metadata for UpSellData, v48);
    v67 = 1;
    v49 = *(_QWORD *)&v64[16];
    *((_OWORD *)v11 + 26) = *(_OWORD *)v64;
    *((_QWORD *)v11 + 54) = v49;
    v68 = 7;
    v50 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, &type metadata for SeriesData, &v68, v20, &type metadata for SeriesData, v50);
    v51 = *(_OWORD *)&v64[16];
    v52 = v62;
    *((_OWORD *)v62 + 10) = *(_OWORD *)v64;
    *((_OWORD *)v52 + 11) = v51;
    *((_OWORD *)v52 + 12) = *(_OWORD *)&v64[32];
    v68 = 8;
    v53 = sub_C09B0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, &type metadata for LocationData, &v68, v20, &type metadata for LocationData, v53);
    v11[488] = v64[0];
    v64[0] = 9;
    v54 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v18, v64, v20, v18, v54);
    v62 = 0;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v60, v61);
    (*(void (**)(char *, _QWORD *, uint64_t))(v16 + 32))(&v11[*(int *)(v9 + 52)], v56, v18);
    sub_C09F4((uint64_t)v11, v17);
    sub_7DAC(v63);
    sub_C0A38((uint64_t)v11);
  }
}

uint64_t sub_C08F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

unint64_t sub_C0928()
{
  unint64_t result;

  result = qword_29C330;
  if (!qword_29C330)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClickData, &type metadata for ClickData);
    atomic_store(result, (unint64_t *)&qword_29C330);
  }
  return result;
}

unint64_t sub_C096C()
{
  unint64_t result;

  result = qword_29C338;
  if (!qword_29C338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BrickData, &type metadata for BrickData);
    atomic_store(result, (unint64_t *)&qword_29C338);
  }
  return result;
}

unint64_t sub_C09B0()
{
  unint64_t result;

  result = qword_29C340;
  if (!qword_29C340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationData, &type metadata for LocationData);
    atomic_store(result, (unint64_t *)&qword_29C340);
  }
  return result;
}

uint64_t sub_C09F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClickEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_C0A38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClickEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_C0A74(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ClickEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_C0A88(_QWORD *a1)
{
  return ClickEvent.Model.encode(to:)(a1);
}

uint64_t sub_C0A9C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957B8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C2B8, (uint64_t)sub_BEC98, a1);
}

uint64_t sub_C0AC0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957C0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C2D0, (uint64_t)sub_BECD8, a1);
}

uint64_t sub_C0AE4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29C2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = enum case for EventProperty.optional<A>(_:);
  v12 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v11, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v11, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v11, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v11, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v11, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
}

uint64_t *initializeBufferWithCopyOfBuffer for ClickEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v44 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v44 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v44);
  }
  else
  {
    v7 = sub_71B4(&qword_29C2E8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A00);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_297408);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_29C2F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_29C2F8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  }
  return a1;
}

uint64_t destroy for ClickEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_71B4(&qword_29C2E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

uint64_t initializeWithCopy for ClickEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_29C2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  return a1;
}

uint64_t assignWithCopy for ClickEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_29C2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  return a1;
}

uint64_t initializeWithTake for ClickEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_29C2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  return a1;
}

uint64_t assignWithTake for ClickEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_29C2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_29C2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_29C2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClickEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C18F8);
}

uint64_t sub_C18F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_71B4(&qword_29C2E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A08);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_297408);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_29C2F0);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296760);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296F68);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296310);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_29C2F8);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v8 = sub_71B4(&qword_295D70);
                    v12 = *(_QWORD *)(v8 - 8);
                    v13 = a3[13];
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ClickEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C1AC0);
}

uint64_t sub_C1AC0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = sub_71B4(&qword_29C2E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A08);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_297408);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_29C2F0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296760);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296F68);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296310);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_29C2F8);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v10 = sub_71B4(&qword_295D70);
                    v14 = *(_QWORD *)(v10 - 8);
                    v15 = a4[13];
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_C1C84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[10];

  sub_B9C8(319, &qword_29C3B0, (uint64_t (*)(void))sub_C0928, (uint64_t (*)(void))sub_C003C, (uint64_t)&type metadata for ClickData);
  if (v3 <= 0x3F)
  {
    v22[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
    if (v5 <= 0x3F)
    {
      v22[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
      if (v7 <= 0x3F)
      {
        v22[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_2974A8, (uint64_t (*)(void))sub_211FC, (uint64_t (*)(void))sub_21244, (uint64_t)&type metadata for FlowcaseData);
        if (v9 <= 0x3F)
        {
          v22[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_29C3B8, (uint64_t (*)(void))sub_C096C, (uint64_t (*)(void))sub_C0080, (uint64_t)&type metadata for BrickData);
          if (v11 <= 0x3F)
          {
            v22[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
            if (v13 <= 0x3F)
            {
              v22[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
              if (v15 <= 0x3F)
              {
                v22[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                if (v17 <= 0x3F)
                {
                  v22[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_B9C8(319, (unint64_t *)&qword_29C3C0, (uint64_t (*)(void))sub_C09B0, (uint64_t (*)(void))sub_C00C4, (uint64_t)&type metadata for LocationData);
                  if (v19 <= 0x3F)
                  {
                    v22[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_8734(319);
                    if (v21 <= 0x3F)
                    {
                      v22[9] = *(_QWORD *)(v20 - 8) + 64;
                      swift_initStructMetadata(a1, 256, 10, v22, a1 + 16);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ClickEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v21);
    return a1;
  }
  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v43 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v43;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v7 = a2[8];
  v42 = a2[7];
  *(_QWORD *)(a1 + 56) = v42;
  *(_QWORD *)(a1 + 64) = v7;
  v9 = a2[9];
  v8 = a2[10];
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v8;
  v10 = a2[11];
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
  v11 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v11;
  v12 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v12;
  v13 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v13;
  v14 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v14;
  v15 = a2[22];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = v15;
  *(_BYTE *)(a1 + 188) = *((_BYTE *)a2 + 188);
  *(_DWORD *)(a1 + 184) = *((_DWORD *)a2 + 46);
  v16 = a2[25];
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = v16;
  v41 = a2[27];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  if (!v41)
  {
    v22 = *((_OWORD *)a2 + 16);
    *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
    *(_OWORD *)(a1 + 256) = v22;
    *(_QWORD *)(a1 + 272) = a2[34];
    v23 = *((_OWORD *)a2 + 14);
    *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 224) = v23;
    v19 = a2[36];
    if (v19)
      goto LABEL_4;
LABEL_7:
    v24 = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 296) = v24;
    *(_QWORD *)(a1 + 312) = a2[39];
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = v41;
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  v17 = a2[30];
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 248) = a2[31];
  *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
  v18 = a2[34];
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = v18;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  v19 = a2[36];
  if (!v19)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_QWORD *)(a1 + 288) = v19;
  *(_DWORD *)(a1 + 296) = *((_DWORD *)a2 + 74);
  v20 = a2[39];
  *(_QWORD *)(a1 + 304) = a2[38];
  *(_QWORD *)(a1 + 312) = v20;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
LABEL_8:
  v25 = a2[41];
  if (v25)
  {
    *(_QWORD *)(a1 + 320) = a2[40];
    *(_QWORD *)(a1 + 328) = v25;
    *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
    v26 = a2[44];
    *(_QWORD *)(a1 + 344) = a2[43];
    *(_QWORD *)(a1 + 352) = v26;
    v27 = a2[46];
    *(_QWORD *)(a1 + 360) = a2[45];
    *(_QWORD *)(a1 + 368) = v27;
    *(_WORD *)(a1 + 376) = *((_WORD *)a2 + 188);
    *(_BYTE *)(a1 + 384) = *((_BYTE *)a2 + 384);
    *(_DWORD *)(a1 + 380) = *((_DWORD *)a2 + 95);
    *(_DWORD *)(a1 + 388) = *((_DWORD *)a2 + 97);
    *(_BYTE *)(a1 + 392) = *((_BYTE *)a2 + 392);
    *(_DWORD *)(a1 + 393) = *(_DWORD *)((char *)a2 + 393);
    *(_BYTE *)(a1 + 397) = *((_BYTE *)a2 + 397);
    v28 = a2[51];
    *(_QWORD *)(a1 + 400) = a2[50];
    *(_QWORD *)(a1 + 408) = v28;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
  }
  else
  {
    v29 = *((_OWORD *)a2 + 23);
    *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
    *(_OWORD *)(a1 + 368) = v29;
    v30 = *((_OWORD *)a2 + 25);
    *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
    *(_OWORD *)(a1 + 400) = v30;
    v31 = *((_OWORD *)a2 + 21);
    *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 336) = v31;
  }
  *(_WORD *)(a1 + 416) = *((_WORD *)a2 + 208);
  v32 = a2[54];
  *(_QWORD *)(a1 + 424) = a2[53];
  *(_QWORD *)(a1 + 432) = v32;
  v33 = a2[60];
  swift_bridgeObjectRetain(v32);
  if (v33 == 1)
  {
    v34 = *(_OWORD *)(a2 + 57);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
    *(_OWORD *)(a1 + 456) = v34;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 59);
  }
  else
  {
    *(_QWORD *)(a1 + 440) = a2[55];
    *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 448);
    *(_QWORD *)(a1 + 456) = a2[57];
    *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
    *(_WORD *)(a1 + 465) = *(_WORD *)((char *)a2 + 465);
    *(_QWORD *)(a1 + 472) = a2[59];
    *(_QWORD *)(a1 + 480) = v33;
    swift_bridgeObjectRetain(v33);
  }
  *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
  v35 = *(int *)(a3 + 52);
  v36 = a1 + v35;
  v37 = (uint64_t)a2 + v35;
  v38 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  return a1;
}

uint64_t destroy for ClickEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[25]);
  v4 = a1[27];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[30]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v5 = a1[36];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[39]);
  }
  v6 = a1[41];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[44]);
    swift_bridgeObjectRelease(a1[46]);
    swift_bridgeObjectRelease(a1[51]);
  }
  swift_bridgeObjectRelease(a1[54]);
  v7 = a1[60];
  if (v7 != 1)
    swift_bridgeObjectRelease(v7);
  v8 = (char *)a1 + *(int *)(a2 + 52);
  v9 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for ClickEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v41 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v41;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  v40 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v40;
  *(_QWORD *)(a1 + 64) = v6;
  v8 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v13;
  v14 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v14;
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v15;
  v39 = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  if (v39)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v39;
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    v16 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v16;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    v17 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v17;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    v18 = *(_QWORD *)(a2 + 288);
    if (v18)
    {
LABEL_3:
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v18;
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
      v19 = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = v19;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      goto LABEL_6;
    }
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v20;
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    v21 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v21;
    v18 = *(_QWORD *)(a2 + 288);
    if (v18)
      goto LABEL_3;
  }
  v22 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v22;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
LABEL_6:
  v23 = *(_QWORD *)(a2 + 328);
  if (v23)
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = v23;
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    v24 = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = v24;
    v25 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = v25;
    *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
    *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
    *(_DWORD *)(a1 + 380) = *(_DWORD *)(a2 + 380);
    *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    *(_DWORD *)(a1 + 393) = *(_DWORD *)(a2 + 393);
    *(_BYTE *)(a1 + 397) = *(_BYTE *)(a2 + 397);
    v26 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = v26;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v27;
    v28 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v28;
    v29 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v29;
  }
  *(_WORD *)(a1 + 416) = *(_WORD *)(a2 + 416);
  v30 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v30;
  v31 = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain(v30);
  if (v31 == 1)
  {
    v32 = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(a1 + 456) = v32;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  }
  else
  {
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
    *(_WORD *)(a1 + 465) = *(_WORD *)(a2 + 465);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = v31;
    swift_bridgeObjectRetain(v31);
  }
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  v33 = *(int *)(a3 + 52);
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  return a1;
}

uint64_t assignWithCopy for ClickEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t v33;
  BAEventReporter *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  int64_t v40;
  id v41;
  uint64_t v42;
  BAEventReporter *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  uint64_t v51;
  BAEventReporter *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  int64_t v57;
  int64_t v58;
  id v59;
  uint64_t v60;
  BAEventReporter *v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  int64_t v66;
  int64_t v67;
  id v68;
  uint64_t v69;
  BAEventReporter *v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  int64_t v75;
  int64_t v76;
  id v77;
  uint64_t v78;
  BAEventReporter *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  int64_t v84;
  int64_t v85;
  id v86;
  uint64_t v87;
  BAEventReporter *v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  int64_t v93;
  int64_t v94;
  id v95;
  int v96;
  uint64_t v97;
  BAEventReporter *v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  int64_t v103;
  int64_t v104;
  id v105;
  _OWORD *v106;
  _OWORD *v107;
  BAEventReporter *v108;
  uint64_t v109;
  uint64_t v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  int64_t v115;
  int64_t v116;
  id v117;
  uint64_t v118;
  BAEventReporter *v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  int64_t v124;
  int64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  BAEventReporter *v129;
  SEL v130;
  id v131;
  id v132;
  id v133;
  int64_t v134;
  int64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD *v147;
  _OWORD *v148;
  BAEventReporter *v149;
  uint64_t v150;
  uint64_t v151;
  SEL v152;
  id v153;
  id v154;
  id v155;
  int64_t v156;
  int64_t v157;
  id v158;
  uint64_t v159;
  BAEventReporter *v160;
  SEL v161;
  id v162;
  id v163;
  id v164;
  int64_t v165;
  int64_t v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _OWORD *v174;
  _OWORD *v175;
  BAEventReporter *v176;
  uint64_t v177;
  uint64_t v178;
  SEL v179;
  id v180;
  id v181;
  id v182;
  int64_t v183;
  int64_t v184;
  id v185;
  uint64_t v186;
  BAEventReporter *v187;
  SEL v188;
  id v189;
  id v190;
  id v191;
  int64_t v192;
  int64_t v193;
  id v194;
  uint64_t v195;
  BAEventReporter *v196;
  SEL v197;
  id v198;
  id v199;
  id v200;
  int64_t v201;
  int64_t v202;
  id v203;
  int v204;
  int v205;
  uint64_t v206;
  BAEventReporter *v207;
  SEL v208;
  id v209;
  id v210;
  id v211;
  int64_t v212;
  int64_t v213;
  id v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  BAEventReporter *v230;
  SEL v231;
  id v232;
  id v233;
  id v234;
  int64_t v235;
  int64_t v236;
  id v237;
  __int128 *v238;
  __int128 *v239;
  BAEventReporter *v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  SEL v248;
  id v249;
  id v250;
  id v251;
  int64_t v252;
  int64_t v253;
  id v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v24 = *(_QWORD *)(a2 + 56);
  v25 = *(BAEventReporter **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v33 = *(_QWORD *)(a2 + 72);
  v34 = *(BAEventReporter **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v42 = *(_QWORD *)(a2 + 88);
  v43 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v51 = *(_QWORD *)(a2 + 112);
  v52 = *(BAEventReporter **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52, v53, v54, v55, v56, v57, v58, v59);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v60 = *(_QWORD *)(a2 + 128);
  v61 = *(BAEventReporter **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61, v62, v63, v64, v65, v66, v67, v68);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v69 = *(_QWORD *)(a2 + 144);
  v70 = *(BAEventReporter **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v78 = *(_QWORD *)(a2 + 160);
  v79 = *(BAEventReporter **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v78;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v87 = *(_QWORD *)(a2 + 176);
  v88 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v88, v89, v90, v91, v92, v93, v94, v95);
  v96 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v96;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v97 = *(_QWORD *)(a2 + 200);
  v98 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98, v99, v100, v101, v102, v103, v104, v105);
  v106 = (_OWORD *)(a1 + 208);
  v107 = (_OWORD *)(a2 + 208);
  v108 = *(BAEventReporter **)(a1 + 216);
  v109 = *(_QWORD *)(a2 + 216);
  if (v108)
  {
    if (v109)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v110 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v110;
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRelease(v108, v111, v112, v113, v114, v115, v116, v117);
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v118 = *(_QWORD *)(a2 + 240);
      v119 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v118;
      swift_bridgeObjectRetain(v118);
      swift_bridgeObjectRelease(v119, v120, v121, v122, v123, v124, v125, v126);
      v127 = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = v127;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v128 = *(_QWORD *)(a2 + 272);
      v129 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v128;
      swift_bridgeObjectRetain(v128);
      swift_bridgeObjectRelease(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      sub_AC048((_QWORD *)(a1 + 208));
      *v106 = *v107;
      v142 = *(_OWORD *)(a2 + 240);
      v141 = *(_OWORD *)(a2 + 256);
      v143 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v142;
      *(_OWORD *)(a1 + 256) = v141;
      *(_OWORD *)(a1 + 224) = v143;
    }
  }
  else if (v109)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v137 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v137;
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v138 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v138;
    v139 = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = v139;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v140 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v140;
    swift_bridgeObjectRetain(v137);
    swift_bridgeObjectRetain(v138);
    swift_bridgeObjectRetain(v140);
  }
  else
  {
    *v106 = *v107;
    v144 = *(_OWORD *)(a2 + 224);
    v145 = *(_OWORD *)(a2 + 240);
    v146 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v145;
    *(_OWORD *)(a1 + 256) = v146;
    *(_OWORD *)(a1 + 224) = v144;
  }
  v147 = (_OWORD *)(a1 + 280);
  v148 = (_OWORD *)(a2 + 280);
  v149 = *(BAEventReporter **)(a1 + 288);
  v150 = *(_QWORD *)(a2 + 288);
  if (v149)
  {
    if (v150)
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      v151 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 288) = v151;
      swift_bridgeObjectRetain(v151);
      swift_bridgeObjectRelease(v149, v152, v153, v154, v155, v156, v157, v158);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      v159 = *(_QWORD *)(a2 + 312);
      v160 = *(BAEventReporter **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v159;
      swift_bridgeObjectRetain(v159);
      swift_bridgeObjectRelease(v160, v161, v162, v163, v164, v165, v166, v167);
    }
    else
    {
      sub_C2DE8(a1 + 280);
      v170 = *(_QWORD *)(a2 + 312);
      v171 = *(_OWORD *)(a2 + 296);
      *v147 = *v148;
      *(_OWORD *)(a1 + 296) = v171;
      *(_QWORD *)(a1 + 312) = v170;
    }
  }
  else if (v150)
  {
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    v168 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 288) = v168;
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    v169 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 312) = v169;
    swift_bridgeObjectRetain(v168);
    swift_bridgeObjectRetain(v169);
  }
  else
  {
    v172 = *v148;
    v173 = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *v147 = v172;
    *(_OWORD *)(a1 + 296) = v173;
  }
  v174 = (_OWORD *)(a1 + 320);
  v175 = (_OWORD *)(a2 + 320);
  v176 = *(BAEventReporter **)(a1 + 328);
  v177 = *(_QWORD *)(a2 + 328);
  if (v176)
  {
    if (v177)
    {
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      v178 = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 328) = v178;
      swift_bridgeObjectRetain(v178);
      swift_bridgeObjectRelease(v176, v179, v180, v181, v182, v183, v184, v185);
      *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      v186 = *(_QWORD *)(a2 + 352);
      v187 = *(BAEventReporter **)(a1 + 352);
      *(_QWORD *)(a1 + 352) = v186;
      swift_bridgeObjectRetain(v186);
      swift_bridgeObjectRelease(v187, v188, v189, v190, v191, v192, v193, v194);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      v195 = *(_QWORD *)(a2 + 368);
      v196 = *(BAEventReporter **)(a1 + 368);
      *(_QWORD *)(a1 + 368) = v195;
      swift_bridgeObjectRetain(v195);
      swift_bridgeObjectRelease(v196, v197, v198, v199, v200, v201, v202, v203);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
      *(_BYTE *)(a1 + 377) = *(_BYTE *)(a2 + 377);
      v204 = *(_DWORD *)(a2 + 380);
      *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
      *(_DWORD *)(a1 + 380) = v204;
      v205 = *(_DWORD *)(a2 + 388);
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      *(_DWORD *)(a1 + 388) = v205;
      *(_BYTE *)(a1 + 393) = *(_BYTE *)(a2 + 393);
      *(_BYTE *)(a1 + 394) = *(_BYTE *)(a2 + 394);
      *(_BYTE *)(a1 + 395) = *(_BYTE *)(a2 + 395);
      *(_BYTE *)(a1 + 396) = *(_BYTE *)(a2 + 396);
      *(_BYTE *)(a1 + 397) = *(_BYTE *)(a2 + 397);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      v206 = *(_QWORD *)(a2 + 408);
      v207 = *(BAEventReporter **)(a1 + 408);
      *(_QWORD *)(a1 + 408) = v206;
      swift_bridgeObjectRetain(v206);
      swift_bridgeObjectRelease(v207, v208, v209, v210, v211, v212, v213, v214);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 320));
      v221 = *(_OWORD *)(a2 + 336);
      *v174 = *v175;
      *(_OWORD *)(a1 + 336) = v221;
      v222 = *(_OWORD *)(a2 + 400);
      v224 = *(_OWORD *)(a2 + 352);
      v223 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
      *(_OWORD *)(a1 + 400) = v222;
      *(_OWORD *)(a1 + 352) = v224;
      *(_OWORD *)(a1 + 368) = v223;
    }
  }
  else if (v177)
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    v215 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 328) = v215;
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    v216 = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 352) = v216;
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    v217 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 368) = v217;
    *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
    *(_BYTE *)(a1 + 377) = *(_BYTE *)(a2 + 377);
    v218 = *(_DWORD *)(a2 + 380);
    *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
    *(_DWORD *)(a1 + 380) = v218;
    v219 = *(_DWORD *)(a2 + 388);
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    *(_DWORD *)(a1 + 388) = v219;
    *(_BYTE *)(a1 + 393) = *(_BYTE *)(a2 + 393);
    *(_BYTE *)(a1 + 394) = *(_BYTE *)(a2 + 394);
    *(_BYTE *)(a1 + 395) = *(_BYTE *)(a2 + 395);
    *(_BYTE *)(a1 + 396) = *(_BYTE *)(a2 + 396);
    *(_BYTE *)(a1 + 397) = *(_BYTE *)(a2 + 397);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    v220 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 408) = v220;
    swift_bridgeObjectRetain(v215);
    swift_bridgeObjectRetain(v216);
    swift_bridgeObjectRetain(v217);
    swift_bridgeObjectRetain(v220);
  }
  else
  {
    v225 = *(_OWORD *)(a2 + 336);
    *v174 = *v175;
    *(_OWORD *)(a1 + 336) = v225;
    v226 = *(_OWORD *)(a2 + 352);
    v227 = *(_OWORD *)(a2 + 368);
    v228 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v228;
    *(_OWORD *)(a1 + 352) = v226;
    *(_OWORD *)(a1 + 368) = v227;
  }
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_BYTE *)(a1 + 417) = *(_BYTE *)(a2 + 417);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  v229 = *(_QWORD *)(a2 + 432);
  v230 = *(BAEventReporter **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v229;
  swift_bridgeObjectRetain(v229);
  swift_bridgeObjectRelease(v230, v231, v232, v233, v234, v235, v236, v237);
  v238 = (__int128 *)(a1 + 440);
  v239 = (__int128 *)(a2 + 440);
  v240 = *(BAEventReporter **)(a1 + 480);
  v241 = *(_QWORD *)(a2 + 480);
  if (v240 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v241 == 1)
    {
      v242 = *v239;
      v243 = *(_OWORD *)(a2 + 472);
      *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
      *(_OWORD *)(a1 + 472) = v243;
      *v238 = v242;
    }
    else
    {
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
      *(_BYTE *)(a1 + 465) = *(_BYTE *)(a2 + 465);
      *(_BYTE *)(a1 + 466) = *(_BYTE *)(a2 + 466);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      v246 = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 480) = v246;
      swift_bridgeObjectRetain(v246);
    }
  }
  else if (v241 == 1)
  {
    sub_19008(a1 + 440);
    v245 = *(_OWORD *)(a2 + 456);
    v244 = *(_OWORD *)(a2 + 472);
    *v238 = *v239;
    *(_OWORD *)(a1 + 456) = v245;
    *(_OWORD *)(a1 + 472) = v244;
  }
  else
  {
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
    *(_BYTE *)(a1 + 465) = *(_BYTE *)(a2 + 465);
    *(_BYTE *)(a1 + 466) = *(_BYTE *)(a2 + 466);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    v247 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 480) = v247;
    swift_bridgeObjectRetain(v247);
    swift_bridgeObjectRelease(v240, v248, v249, v250, v251, v252, v253, v254);
  }
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  v255 = *(int *)(a3 + 52);
  v256 = a1 + v255;
  v257 = a2 + v255;
  v258 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v258 - 8) + 24))(v256, v257, v258);
  return a1;
}

uint64_t sub_C2DE8(uint64_t a1)
{
  destroy for PurchaseData(a1);
  return a1;
}

uint64_t initializeWithTake for ClickEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v10;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v11 = *(_OWORD *)(a2 + 256);
  v12 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v13 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v13;
  v14 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v14;
  v15 = *(_OWORD *)(a2 + 352);
  v16 = *(_OWORD *)(a2 + 368);
  v17 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 352) = v15;
  *(_OWORD *)(a1 + 368) = v16;
  v18 = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = v18;
  v19 = *(_OWORD *)(a2 + 440);
  v20 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v20;
  *(_OWORD *)(a1 + 440) = v19;
  v21 = *(int *)(a3 + 52);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  v24 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  return a1;
}

uint64_t assignWithTake for ClickEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  BAEventReporter *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  uint64_t v30;
  BAEventReporter *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  int64_t v37;
  id v38;
  uint64_t v39;
  BAEventReporter *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  uint64_t v48;
  BAEventReporter *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  int64_t v54;
  int64_t v55;
  id v56;
  uint64_t v57;
  BAEventReporter *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  int64_t v63;
  int64_t v64;
  id v65;
  uint64_t v66;
  BAEventReporter *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  int64_t v72;
  int64_t v73;
  id v74;
  uint64_t v75;
  BAEventReporter *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  int64_t v81;
  int64_t v82;
  id v83;
  uint64_t v84;
  BAEventReporter *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  int64_t v90;
  int64_t v91;
  id v92;
  uint64_t v93;
  BAEventReporter *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  int64_t v99;
  int64_t v100;
  id v101;
  const char *v102;
  void *v103;
  void *v104;
  void *v105;
  int64_t v106;
  int64_t v107;
  void *v108;
  BAEventReporter *v109;
  uint64_t v110;
  uint64_t v111;
  BAEventReporter *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  int64_t v117;
  int64_t v118;
  id v119;
  uint64_t v120;
  BAEventReporter *v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  int64_t v126;
  int64_t v127;
  id v128;
  __int128 v129;
  __int128 v130;
  BAEventReporter *v131;
  uint64_t v132;
  uint64_t v133;
  BAEventReporter *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  int64_t v139;
  int64_t v140;
  id v141;
  __int128 v142;
  BAEventReporter *v143;
  uint64_t v144;
  uint64_t v145;
  BAEventReporter *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  int64_t v151;
  int64_t v152;
  id v153;
  uint64_t v154;
  BAEventReporter *v155;
  SEL v156;
  id v157;
  id v158;
  id v159;
  int64_t v160;
  int64_t v161;
  id v162;
  uint64_t v163;
  BAEventReporter *v164;
  SEL v165;
  id v166;
  id v167;
  id v168;
  int64_t v169;
  int64_t v170;
  id v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  BAEventReporter *v176;
  const char *v177;
  void *v178;
  void *v179;
  void *v180;
  int64_t v181;
  int64_t v182;
  void *v183;
  BAEventReporter *v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v22 = *(BAEventReporter **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v30 = *(_QWORD *)(a2 + 72);
  v31 = *(BAEventReporter **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v30;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = *(_QWORD *)(a2 + 88);
  v40 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v39;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v48 = *(_QWORD *)(a2 + 112);
  v49 = *(BAEventReporter **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  v57 = *(_QWORD *)(a2 + 128);
  v58 = *(BAEventReporter **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  v66 = *(_QWORD *)(a2 + 144);
  v67 = *(BAEventReporter **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75 = *(_QWORD *)(a2 + 160);
  v76 = *(BAEventReporter **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v75;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = *(_QWORD *)(a2 + 176);
  v85 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v84;
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  v93 = *(_QWORD *)(a2 + 200);
  v94 = *(BAEventReporter **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v93;
  swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  v109 = *(BAEventReporter **)(a1 + 216);
  if (v109)
  {
    v110 = *(_QWORD *)(a2 + 216);
    if (v110)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v110;
      swift_bridgeObjectRelease(v109, v102, v103, v104, v105, v106, v107, v108);
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      v111 = *(_QWORD *)(a2 + 240);
      v112 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v111;
      swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      v120 = *(_QWORD *)(a2 + 272);
      v121 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v120;
      swift_bridgeObjectRelease(v121, v122, v123, v124, v125, v126, v127, v128);
      goto LABEL_6;
    }
    sub_AC048((_QWORD *)(a1 + 208));
  }
  v129 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v129;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v130 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v130;
LABEL_6:
  v131 = *(BAEventReporter **)(a1 + 288);
  if (v131)
  {
    v132 = *(_QWORD *)(a2 + 288);
    if (v132)
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v132;
      swift_bridgeObjectRelease(v131, v102, v103, v104, v105, v106, v107, v108);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
      v133 = *(_QWORD *)(a2 + 312);
      v134 = *(BAEventReporter **)(a1 + 312);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = v133;
      swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);
      goto LABEL_11;
    }
    sub_C2DE8(a1 + 280);
  }
  v142 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v142;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
LABEL_11:
  v143 = *(BAEventReporter **)(a1 + 328);
  if (v143)
  {
    v144 = *(_QWORD *)(a2 + 328);
    if (v144)
    {
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = v144;
      swift_bridgeObjectRelease(v143, v102, v103, v104, v105, v106, v107, v108);
      *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
      v145 = *(_QWORD *)(a2 + 352);
      v146 = *(BAEventReporter **)(a1 + 352);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = v145;
      swift_bridgeObjectRelease(v146, v147, v148, v149, v150, v151, v152, v153);
      v154 = *(_QWORD *)(a2 + 368);
      v155 = *(BAEventReporter **)(a1 + 368);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = v154;
      swift_bridgeObjectRelease(v155, v156, v157, v158, v159, v160, v161, v162);
      *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
      *(_DWORD *)(a1 + 380) = *(_DWORD *)(a2 + 380);
      *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
      *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      *(_DWORD *)(a1 + 393) = *(_DWORD *)(a2 + 393);
      *(_BYTE *)(a1 + 397) = *(_BYTE *)(a2 + 397);
      v163 = *(_QWORD *)(a2 + 408);
      v164 = *(BAEventReporter **)(a1 + 408);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 408) = v163;
      swift_bridgeObjectRelease(v164, v165, v166, v167, v168, v169, v170, v171);
      goto LABEL_16;
    }
    sub_4E9F4((_QWORD *)(a1 + 320));
  }
  v172 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v172;
  v173 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v173;
  v174 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v174;
LABEL_16:
  *(_WORD *)(a1 + 416) = *(_WORD *)(a2 + 416);
  v175 = *(_QWORD *)(a2 + 432);
  v176 = *(BAEventReporter **)(a1 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v175;
  swift_bridgeObjectRelease(v176, v102, v103, v104, v105, v106, v107, v108);
  v184 = *(BAEventReporter **)(a1 + 480);
  if (v184 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v185 = *(_QWORD *)(a2 + 480);
    if (v185 != 1)
    {
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
      *(_WORD *)(a1 + 465) = *(_WORD *)(a2 + 465);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      *(_QWORD *)(a1 + 480) = v185;
      swift_bridgeObjectRelease(v184, v177, v178, v179, v180, v181, v182, v183);
      goto LABEL_21;
    }
    sub_19008(a1 + 440);
  }
  v186 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v186;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
LABEL_21:
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  v187 = a3[13];
  v188 = a1 + v187;
  v189 = a2 + v187;
  v190 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v190 - 8) + 40))(v188, v189, v190);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClickEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C32A0);
}

uint64_t sub_C32A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ClickEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C3328);
}

uint64_t sub_C3328(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t sub_C339C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "@";
  v4[1] = &unk_200040;
  v4[2] = &unk_200058;
  v4[3] = &unk_200070;
  v4[4] = &unk_200088;
  v4[5] = &unk_2000A0;
  v4[6] = &unk_2000B8;
  v4[7] = &unk_2000D0;
  v4[8] = &unk_2000E8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClickEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_C34AC + 4 * byte_1FFF07[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_C34E0 + 4 * byte_1FFF02[v4]))();
}

uint64_t sub_C34E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C34E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC34F0);
  return result;
}

uint64_t sub_C34FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC3504);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_C3508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C3510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClickEvent.Model.CodingKeys()
{
  return &type metadata for ClickEvent.Model.CodingKeys;
}

unint64_t sub_C3530()
{
  unint64_t result;

  result = qword_29C4C0;
  if (!qword_29C4C0)
  {
    result = swift_getWitnessTable(&unk_20019C, &type metadata for ClickEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C4C0);
  }
  return result;
}

unint64_t sub_C3578()
{
  unint64_t result;

  result = qword_29C4C8;
  if (!qword_29C4C8)
  {
    atomic_store(result, (unint64_t *)&qword_29C4C8);
  }
  return result;
}

unint64_t sub_C35C0()
{
  unint64_t result;

  result = qword_29C4D0;
  if (!qword_29C4D0)
  {
    result = swift_getWitnessTable(&unk_200134, &type metadata for ClickEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C4D0);
  }
  return result;
}

uint64_t sub_C3604(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x7461446B63696C63 && a2 == 0xE900000000000061)
  {
    v5 = 0xE900000000000061;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446B63696C63, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v8 = 0xEB00000000617461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x65736163776F6C66 && a2 == 0xEC00000061746144)
  {
    v9 = 0xEC00000061746144;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736163776F6C66, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x7461446B63697262 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446B63697262, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v11 = 0xEB00000000617461;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v12 = 0xEA00000000006174;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v13 = 0xEA00000000006174;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000061746144)
  {
    v14 = 0xEC00000061746144;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_C3A74(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29C4D8, &enum case for SessionGroup.default(_:));
}

uint64_t static DialogActionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957C8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C4D8, a1);
}

uint64_t sub_C3AB4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29C4F0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static DialogActionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957D0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C4F0, a1);
}

uint64_t DialogActionEvent.dialogData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C508);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DialogActionEvent.dialogData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C508);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t DialogActionEvent.dialogActionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogActionEvent(0) + 20);
  v4 = sub_71B4(&qword_29C510);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DialogActionEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29C598, (uint64_t)&nominal type descriptor for DialogActionEvent);
}

uint64_t DialogActionEvent.dialogActionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogActionEvent(0) + 20);
  v4 = sub_71B4(&qword_29C510);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DialogActionEvent.dialogActionData.modify())()
{
  type metadata accessor for DialogActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DialogActionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogActionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DialogActionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogActionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DialogActionEvent.eventData.modify())()
{
  type metadata accessor for DialogActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DialogActionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for DialogActionEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_29C510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t DialogActionEvent.Model.dialogActionData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t DialogActionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DialogActionEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DialogActionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29C640, (uint64_t)&nominal type descriptor for DialogActionEvent.Model);
}

uint64_t DialogActionEvent.Model.init(dialogData:dialogActionData:eventData:)@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a2;
  v6 = a2[1];
  *(_BYTE *)a4 = *a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = v6;
  v7 = a4 + *(int *)(type metadata accessor for DialogActionEvent.Model(0) + 24);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a3, v8);
}

uint64_t sub_C3E78()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x6144676F6C616964;
}

uint64_t sub_C3EE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C52A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_C3F04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C40F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C3F2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C40F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DialogActionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v20[2];
  char v21;

  v3 = v1;
  v5 = sub_71B4(&qword_29C518);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_C40F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DialogActionEvent.Model.CodingKeys, &type metadata for DialogActionEvent.Model.CodingKeys, v11, v9, v10);
  LOBYTE(v20[0]) = *(_BYTE *)v3;
  v21 = 0;
  v12 = sub_4A388();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v5, &type metadata for DialogData, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 16);
    v20[0] = *(_QWORD *)(v3 + 8);
    v20[1] = v13;
    v21 = 1;
    v14 = sub_C413C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v5, &type metadata for DialogActionData, v14);
    v15 = v3 + *(int *)(type metadata accessor for DialogActionEvent.Model(0) + 24);
    LOBYTE(v20[0]) = 2;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_C40F8()
{
  unint64_t result;

  result = qword_29C520;
  if (!qword_29C520)
  {
    result = swift_getWitnessTable(&unk_2003EC, &type metadata for DialogActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C520);
  }
  return result;
}

unint64_t sub_C413C()
{
  unint64_t result;

  result = qword_29C528;
  if (!qword_29C528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DialogActionData, &type metadata for DialogActionData);
    atomic_store(result, (unint64_t *)&qword_29C528);
  }
  return result;
}

void DialogActionEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;

  v26 = a2;
  v27 = type metadata accessor for EventData(0);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_71B4(&qword_29C530);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DialogActionEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_C40F8();
  v29 = v7;
  v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DialogActionEvent.Model.CodingKeys, &type metadata for DialogActionEvent.Model.CodingKeys, v13, v11, v12);
  if (v14)
  {
    sub_7DAC(a1);
  }
  else
  {
    v30 = v8;
    v15 = v5;
    v16 = a1;
    v17 = v4;
    v18 = v27;
    v32 = 0;
    v19 = sub_4A340();
    v20 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v31, &type metadata for DialogData, &v32, v28, &type metadata for DialogData, v19);
    *v10 = v31[0];
    v32 = 1;
    v21 = sub_C442C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v31, &type metadata for DialogActionData, &v32, v20, &type metadata for DialogActionData, v21);
    v22 = v31[1];
    *((_QWORD *)v10 + 1) = v31[0];
    *((_QWORD *)v10 + 2) = v22;
    LOBYTE(v31[0]) = 2;
    v23 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v24 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v31, v20, v18, v23);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v25 + 32))(&v10[*(int *)(v30 + 24)], v17, v18);
    sub_C4470((uint64_t)v10, v26);
    sub_7DAC(v16);
    sub_C44B4((uint64_t)v10);
  }
}

unint64_t sub_C442C()
{
  unint64_t result;

  result = qword_29C538;
  if (!qword_29C538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DialogActionData, &type metadata for DialogActionData);
    atomic_store(result, (unint64_t *)&qword_29C538);
  }
  return result;
}

uint64_t sub_C4470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DialogActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_C44B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DialogActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_C44F0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DialogActionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_C4504(_QWORD *a1)
{
  return DialogActionEvent.Model.encode(to:)(a1);
}

uint64_t sub_C4518@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957C8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C4D8, (uint64_t)sub_C3A74, a1);
}

uint64_t sub_C453C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957D0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C4F0, (uint64_t)sub_C3AB4, a1);
}

uint64_t sub_C4560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_29C510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for DialogActionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_29C508);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29C510);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for DialogActionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_29C510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for DialogActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for DialogActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for DialogActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for DialogActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C4A84);
}

uint64_t sub_C4A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_29C508);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29C510);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for DialogActionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C4B34);
}

uint64_t sub_C4B34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_29C508);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29C510);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_C4BE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, &qword_29C5A8, (uint64_t (*)(void))sub_4A340, (uint64_t (*)(void))sub_4A388, (uint64_t)&type metadata for DialogData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_29C5B0, (uint64_t (*)(void))sub_C442C, (uint64_t (*)(void))sub_C413C, (uint64_t)&type metadata for DialogActionData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DialogActionEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for EventData(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for DialogActionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for DialogActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for EventData(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for DialogActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for DialogActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DialogActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C4F8C);
}

uint64_t sub_C4F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DialogActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C5014);
}

uint64_t sub_C5014(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_C5088(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_2002F8;
  v4[1] = &unk_200310;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DialogActionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_C5150 + 4 * byte_200225[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_C5184 + 4 * byte_200220[v4]))();
}

uint64_t sub_C5184(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C518C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC5194);
  return result;
}

uint64_t sub_C51A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC51A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_C51AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C51B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogActionEvent.Model.CodingKeys()
{
  return &type metadata for DialogActionEvent.Model.CodingKeys;
}

unint64_t sub_C51D4()
{
  unint64_t result;

  result = qword_29C680;
  if (!qword_29C680)
  {
    result = swift_getWitnessTable(&unk_2003C4, &type metadata for DialogActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C680);
  }
  return result;
}

unint64_t sub_C521C()
{
  unint64_t result;

  result = qword_29C688;
  if (!qword_29C688)
  {
    result = swift_getWitnessTable("E_\a", &type metadata for DialogActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C688);
  }
  return result;
}

unint64_t sub_C5264()
{
  unint64_t result;

  result = qword_29C690;
  if (!qword_29C690)
  {
    result = swift_getWitnessTable(&unk_20035C, &type metadata for DialogActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C690);
  }
  return result;
}

uint64_t sub_C52A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6144676F6C616964 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144676F6C616964, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000000220D50;
    if (a2 == 0x8000000000220D50)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220D50, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::SessionListeningData __swiftcall SessionListeningData.init(timeSpentListening:uniqueAudiobooksListened:)(Swift::Int64 timeSpentListening, Swift::Int32_optional uniqueAudiobooksListened)
{
  uint64_t v2;
  BookAnalytics::SessionListeningData result;

  *(_QWORD *)v2 = timeSpentListening;
  *(_DWORD *)(v2 + 8) = uniqueAudiobooksListened.value;
  *(_BYTE *)(v2 + 12) = uniqueAudiobooksListened.is_nil;
  result.timeSpentListening = timeSpentListening;
  result.uniqueAudiobooksListened = uniqueAudiobooksListened;
  return result;
}

unint64_t SkipData.skipInterval.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
}

uint64_t SkipData.skipInterval.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 12) = BYTE4(result) & 1;
  return result;
}

uint64_t static SessionListeningData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 12);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 12) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

unint64_t sub_C5494()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000018;
  else
    return 0xD000000000000012;
}

uint64_t sub_C54D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C5B30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_C54F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5684();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C5520(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5684();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SessionListeningData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_71B4(&qword_29C698);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = *((unsigned int *)v1 + 2);
  v15 = *((unsigned __int8 *)v1 + 12);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_C5684();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SessionListeningData.CodingKeys, &type metadata for SessionListeningData.CodingKeys, v11, v9, v10);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v18, v4);
  if (!v2)
  {
    v17 = 1;
    v16 = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14 | ((unint64_t)v15 << 32), &v17, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_C5684()
{
  unint64_t result;

  result = qword_29C6A0;
  if (!qword_29C6A0)
  {
    result = swift_getWitnessTable(&unk_2005E8, &type metadata for SessionListeningData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C6A0);
  }
  return result;
}

uint64_t SessionListeningData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_71B4(&qword_29C6A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_C5684();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SessionListeningData.CodingKeys, &type metadata for SessionListeningData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 12) = BYTE4(v14) & 1;
  }
  return sub_7DAC(a1);
}

unint64_t sub_C5820()
{
  unint64_t result;

  result = qword_29C6B0;
  if (!qword_29C6B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SessionListeningData, &type metadata for SessionListeningData);
    atomic_store(result, (unint64_t *)&qword_29C6B0);
  }
  return result;
}

unint64_t sub_C5868()
{
  unint64_t result;

  result = qword_29C6B8;
  if (!qword_29C6B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SessionListeningData, &type metadata for SessionListeningData);
    atomic_store(result, (unint64_t *)&qword_29C6B8);
  }
  return result;
}

uint64_t sub_C58AC(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v2 = *(_BYTE *)(a2 + 12);
    if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 12))
        return 1;
    }
    else
    {
      if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_C58F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SessionListeningData.init(from:)(a1, a2);
}

uint64_t sub_C5904(_QWORD *a1)
{
  return SessionListeningData.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for SessionListeningData(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SessionListeningData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SessionListeningData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 13) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SessionListeningData()
{
  return &type metadata for SessionListeningData;
}

uint64_t storeEnumTagSinglePayload for SessionListeningData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_C59D8 + 4 * byte_200445[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_C5A0C + 4 * byte_200440[v4]))();
}

uint64_t sub_C5A0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C5A14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC5A1CLL);
  return result;
}

uint64_t sub_C5A28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC5A30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_C5A34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C5A3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionListeningData.CodingKeys()
{
  return &type metadata for SessionListeningData.CodingKeys;
}

unint64_t sub_C5A5C()
{
  unint64_t result;

  result = qword_29C6C0;
  if (!qword_29C6C0)
  {
    result = swift_getWitnessTable(&unk_2005C0, &type metadata for SessionListeningData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C6C0);
  }
  return result;
}

unint64_t sub_C5AA4()
{
  unint64_t result;

  result = qword_29C6C8;
  if (!qword_29C6C8)
  {
    result = swift_getWitnessTable("A_\a", &type metadata for SessionListeningData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C6C8);
  }
  return result;
}

unint64_t sub_C5AEC()
{
  unint64_t result;

  result = qword_29C6D0;
  if (!qword_29C6D0)
  {
    result = swift_getWitnessTable(&unk_200558, &type metadata for SessionListeningData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C6D0);
  }
  return result;
}

uint64_t sub_C5B30(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x8000000000220AA0;
    if (a2 == 0x8000000000220AA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000220AA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000000220AC0)
  {
    swift_bridgeObjectRelease(0x8000000000220AC0);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000000220AC0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_C5C18(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29C6D8, &enum case for SessionGroup.default(_:));
}

uint64_t static ReportAnIssueViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957D8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C6D8, a1);
}

uint64_t sub_C5C58(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29C6F0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReportAnIssueViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957E0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C6F0, a1);
}

uint64_t ReportAnIssueViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReportAnIssueViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29C778, (uint64_t)&nominal type descriptor for ReportAnIssueViewEvent);
}

uint64_t ReportAnIssueViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReportAnIssueViewEvent.eventData.modify())()
{
  type metadata accessor for ReportAnIssueViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReportAnIssueViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReportAnIssueViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReportAnIssueViewEvent.timedData.modify())()
{
  type metadata accessor for ReportAnIssueViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReportAnIssueViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ReportAnIssueViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t ReportAnIssueViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReportAnIssueViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29C810, (uint64_t)&nominal type descriptor for ReportAnIssueViewEvent.Model);
}

uint64_t ReportAnIssueViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReportAnIssueViewEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReportAnIssueViewEvent.Model.init(contentData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 77);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = v8;
  *(_OWORD *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_QWORD *)(a4 + 48) = v11;
  *(_WORD *)(a4 + 56) = v12;
  *(_DWORD *)(a4 + 60) = v13;
  *(_BYTE *)(a4 + 64) = v14;
  *(_DWORD *)(a4 + 68) = v15;
  *(_BYTE *)(a4 + 72) = v16;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v17;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  v18 = type metadata accessor for ReportAnIssueViewEvent.Model(0);
  v19 = a4 + *(int *)(v18 + 20);
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a2, v20);
  v21 = a4 + *(int *)(v18 + 24);
  v22 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a3, v22);
}

uint64_t sub_C6070(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C62E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C6098(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C62E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReportAnIssueViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  _QWORD v35[2];
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  char v42;
  int v43;
  char v44;
  int v45;
  char v46;
  __int128 v47;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29C708);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_C62E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReportAnIssueViewEvent.Model.CodingKeys, &type metadata for ReportAnIssueViewEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v35[0] = *(_QWORD *)v4;
  v35[1] = v13;
  v36 = v14;
  v37 = v15;
  v38 = v16;
  v39 = v17;
  v40 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = *(_DWORD *)(v4 + 73);
  v46 = v23;
  v47 = *(_OWORD *)(v4 + 80);
  v34 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v34, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = type metadata accessor for ReportAnIssueViewEvent.Model(0);
    v26 = v4 + *(int *)(v25 + 20);
    LOBYTE(v35[0]) = 1;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v35, v6, v27, v28);
    v29 = v4 + *(int *)(v25 + 24);
    LOBYTE(v35[0]) = 2;
    v30 = type metadata accessor for TimedData(0);
    v31 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, v35, v6, v30, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_C62E8()
{
  unint64_t result;

  result = qword_29C710;
  if (!qword_29C710)
  {
    result = swift_getWitnessTable(&unk_2007FC, &type metadata for ReportAnIssueViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C710);
  }
  return result;
}

void ReportAnIssueViewEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  char v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[2];
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  char v56;
  int v57;
  char v58;
  int v59;
  char v60;
  __int128 v61;
  char v62;

  v41 = a2;
  v42 = type metadata accessor for TimedData(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v43 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_71B4(&qword_29C718);
  v7 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReportAnIssueViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v47 = a1;
  sub_7988(a1, v14);
  v15 = sub_C62E8();
  v46 = v9;
  v16 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReportAnIssueViewEvent.Model.CodingKeys, &type metadata for ReportAnIssueViewEvent.Model.CodingKeys, v15, v14, v13);
  if (v16)
  {
    sub_7DAC(v47);
  }
  else
  {
    v17 = v6;
    v48 = v7;
    v39 = v4;
    v18 = v44;
    v62 = 0;
    v19 = sub_1779C();
    v20 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v49, &type metadata for ContentData, &v62, v45, &type metadata for ContentData, v19);
    v21 = v49[1];
    v22 = v50;
    v23 = v51;
    v24 = v52;
    v25 = v53;
    v26 = v54;
    v27 = v55;
    v28 = v56;
    v29 = v57;
    v30 = v58;
    v31 = v60;
    *(_QWORD *)v12 = v49[0];
    *((_QWORD *)v12 + 1) = v21;
    v12[16] = v22;
    *(_OWORD *)(v12 + 24) = v23;
    *((_QWORD *)v12 + 5) = v24;
    *((_QWORD *)v12 + 6) = v25;
    *((_WORD *)v12 + 28) = v26;
    *((_DWORD *)v12 + 15) = v27;
    v12[64] = v28;
    *((_DWORD *)v12 + 17) = v29;
    v12[72] = v30;
    *(_DWORD *)(v12 + 73) = v59;
    v12[77] = v31;
    *((_OWORD *)v12 + 5) = v61;
    LOBYTE(v49[0]) = 1;
    v32 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v33 = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v49, v20, v18, v32);
    v34 = v10;
    (*(void (**)(char *, _QWORD *, uint64_t))(v39 + 32))(&v12[*(int *)(v10 + 20)], v17, v33);
    LOBYTE(v49[0]) = 2;
    v35 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v36 = v42;
    v37 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v42, v49, v20, v42, v35);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v40 + 32))(&v12[*(int *)(v34 + 24)], v37, v36);
    sub_C672C((uint64_t)v12, v41);
    sub_7DAC(v47);
    sub_C6770((uint64_t)v12);
  }
}

uint64_t sub_C672C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReportAnIssueViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_C6770(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReportAnIssueViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_C67AC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ReportAnIssueViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_C67C0(_QWORD *a1)
{
  return ReportAnIssueViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_C67D4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957D8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C6D8, (uint64_t)sub_C5C18, a1);
}

uint64_t sub_C67F8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957E0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C6F0, (uint64_t)sub_C5C58, a1);
}

uint64_t getEnumTagSinglePayload for ReportAnIssueViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C6828);
}

uint64_t sub_C6828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C68D8);
}

uint64_t sub_C68D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for ReportAnIssueViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C6990);
}

uint64_t sub_C6990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C6A3C);
}

uint64_t sub_C6A3C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_C6AD8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReportAnIssueViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_C6BB4 + 4 * byte_200645[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_C6BE8 + 4 * byte_200640[v4]))();
}

uint64_t sub_C6BE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C6BF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC6BF8);
  return result;
}

uint64_t sub_C6C04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC6C0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_C6C10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C6C18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReportAnIssueViewEvent.Model.CodingKeys()
{
  return &type metadata for ReportAnIssueViewEvent.Model.CodingKeys;
}

unint64_t sub_C6C38()
{
  unint64_t result;

  result = qword_29C850;
  if (!qword_29C850)
  {
    result = swift_getWitnessTable(&unk_2007D4, &type metadata for ReportAnIssueViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C850);
  }
  return result;
}

unint64_t sub_C6C80()
{
  unint64_t result;

  result = qword_29C858;
  if (!qword_29C858)
  {
    result = swift_getWitnessTable("}^\a", &type metadata for ReportAnIssueViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C858);
  }
  return result;
}

unint64_t sub_C6CC8()
{
  unint64_t result;

  result = qword_29C860;
  if (!qword_29C860)
  {
    result = swift_getWitnessTable(&unk_20076C, &type metadata for ReportAnIssueViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C860);
  }
  return result;
}

void EventReporter.emitReportAnIssueEvent(using:contentID:supplementalContentCount:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v9;
  uint64_t v10;
  BAEventReporter *v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  int64_t v18;
  id v19;
  BOOL v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  int64_t v25;
  id v26;
  BOOL v27;
  id v28;

  v9 = a1;
  if (a1 || (v9 = sub_CB320()) != 0)
  {
    v10 = swift_allocObject(&unk_276660, 53, 7);
    *(_QWORD *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = a2;
    *(_QWORD *)(v10 + 32) = a3;
    *(_QWORD *)(v10 + 40) = v9;
    *(_DWORD *)(v10 + 48) = a4;
    *(_BYTE *)(v10 + 52) = BYTE4(a4) & 1;
    v11 = (BAEventReporter *)swift_allocObject(&unk_276688, 32, 7);
    v11[1].super.isa = (Class)sub_C7488;
    *(_QWORD *)v11[1].dataProviders = v10;
    v12 = a1;
    v13 = v4;
    swift_bridgeObjectRetain(a3);
    v14 = v9;
    swift_retain(v10);
    Tracker.transaction(block:)(sub_53E94, v11);

    swift_release((BAEventReporter *)v10, v15, v16, v17, v18, v19, v20, v21);
    swift_release(v11, v22, v23, v24, v25, v26, v27, v28);
  }
}

uint64_t sub_C6E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  BAEventReporter *v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  BAEventReporter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  int64_t v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  int64_t v49;
  int64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  _OWORD v59[2];
  BAEventReporter *v60;
  BAEventReporter *v61;
  BAEventReporter *v62;

  v58 = 2;
  v57 = 1;
  v56 = 4;
  v55 = 1;
  sub_CAB80(a3, a4, &v58, &v57, a5, a6 | ((HIDWORD(a6) & 1) << 32), &v56, &v55, (uint64_t)v59);
  v6 = (BAEventReporter *)*((_QWORD *)&v59[0] + 1);
  v7 = v60;
  v8 = v61;
  v9 = v62;
  v10 = sub_71B4(&qword_299FD0);
  v11 = type metadata accessor for DataEventTrait(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v10, v14 + *(_QWORD *)(v12 + 72), v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v15 + v14, enum case for DataEventTrait.onlyOnce(_:), v11);
  v16 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(v59, v15, 0xD00000000000006ALL, 0x8000000000220D70, 25, &type metadata for ContentData, v16);
  swift_bridgeObjectRelease(v8, v17, v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease(v7, v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(v6, v31, v32, v33, v34, v35, v36, v37);
  swift_bridgeObjectRelease((BAEventReporter *)v15, v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(v9, v45, v46, v47, v48, v49, v50, v51);
  v52 = type metadata accessor for ReportAnIssueEvent(0);
  v53 = sub_7E10(&qword_29C878, type metadata accessor for ReportAnIssueEvent, (uint64_t)&protocol conformance descriptor for ReportAnIssueEvent);
  memset(v59, 0, sizeof(v59));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v52, 0, v59, 0, 0, v52, v53);
  return sub_54960((uint64_t)v59);
}

void EventReporter.emitReportAnIssueCompletionEvent(using:contentID:supplementalContentCount:issueOptions:issueSelected:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  id v18;
  id v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  int64_t v24;
  id v25;
  BOOL v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;

  v15 = a1;
  if (a1 || (v15 = sub_CB320()) != 0)
  {
    v16 = swift_allocObject(&unk_2766B0, 80, 7);
    *(_QWORD *)(v16 + 16) = v7;
    *(_QWORD *)(v16 + 24) = a2;
    *(_QWORD *)(v16 + 32) = a3;
    *(_QWORD *)(v16 + 40) = v15;
    *(_DWORD *)(v16 + 48) = a4;
    *(_QWORD *)(v16 + 56) = a5;
    *(_QWORD *)(v16 + 64) = a6;
    *(_QWORD *)(v16 + 72) = a7;
    v17 = (BAEventReporter *)swift_allocObject(&unk_2766D8, 32, 7);
    v17[1].super.isa = (Class)sub_C7518;
    *(_QWORD *)v17[1].dataProviders = v16;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a7);
    swift_retain(v16);
    v18 = a1;
    v19 = v7;
    swift_bridgeObjectRetain(a3);
    v20 = v15;
    Tracker.transaction(block:)(sub_54CC0, v17);

    swift_release((BAEventReporter *)v16, v21, v22, v23, v24, v25, v26, v27);
    swift_release(v17, v28, v29, v30, v31, v32, v33, v34);
  }
}

uint64_t sub_C7170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, BAEventReporter *a7, uint64_t a8, BAEventReporter *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  int64_t v38;
  int64_t v39;
  id v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  int64_t v52;
  int64_t v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  int64_t v61;
  int64_t v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  int64_t v68;
  int64_t v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  int64_t v75;
  int64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v82;
  BAEventReporter *v83;
  BAEventReporter *v84;
  BAEventReporter *v85;
  BAEventReporter *v86;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  __int128 v92;
  __int128 v93;
  BAEventReporter *v94;
  BAEventReporter *v95;
  BAEventReporter *v96;

  v91 = 2;
  v90 = 1;
  v89 = 4;
  v88 = 1;
  LOBYTE(v92) = 0;
  sub_CAB80(a3, a4, &v91, &v90, a5, a6, &v89, &v88, (uint64_t)&v92);
  v83 = v95;
  v84 = v94;
  v85 = v96;
  v86 = (BAEventReporter *)*((_QWORD *)&v92 + 1);
  v82 = sub_71B4(&qword_299FD0);
  v10 = type metadata accessor for DataEventTrait(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = v13 + *(_QWORD *)(v11 + 72);
  v15 = v12 | 7;
  v16 = swift_allocObject(v82, v14, v12 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  v17 = enum case for DataEventTrait.onlyOnce(_:);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  v18(v16 + v13, enum case for DataEventTrait.onlyOnce(_:), v10);
  v19 = sub_5491C();
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a9);
  AccessTracker.push<A>(data:traits:file:line:)(&v92, v16, 0xD00000000000006ALL, 0x8000000000220D70, 43, &type metadata for ContentData, v19);
  swift_bridgeObjectRelease(v83, v20, v21, v22, v23, v24, v25, v26);
  swift_bridgeObjectRelease(v84, v27, v28, v29, v30, v31, v32, v33);
  swift_bridgeObjectRelease(v86, v34, v35, v36, v37, v38, v39, v40);
  swift_bridgeObjectRelease((BAEventReporter *)v16, v41, v42, v43, v44, v45, v46, v47);
  swift_bridgeObjectRelease(v85, v48, v49, v50, v51, v52, v53, v54);
  *(_QWORD *)&v92 = a7;
  *((_QWORD *)&v92 + 1) = a8;
  *(_QWORD *)&v93 = a9;
  v55 = swift_allocObject(v82, v14, v15);
  *(_OWORD *)(v55 + 16) = xmmword_1F5FF0;
  v18(v55 + v13, v17, v10);
  v56 = sub_C754C();
  AccessTracker.push<A>(data:traits:file:line:)(&v92, v55, 0xD00000000000006ALL, 0x8000000000220D70, 44, &type metadata for OptionListData, v56);
  swift_bridgeObjectRelease(a9, v57, v58, v59, v60, v61, v62, v63);
  swift_bridgeObjectRelease(a7, v64, v65, v66, v67, v68, v69, v70);
  swift_bridgeObjectRelease((BAEventReporter *)v55, v71, v72, v73, v74, v75, v76, v77);
  v78 = type metadata accessor for ReportAnIssueCompletionEvent(0);
  v79 = sub_7E10(&qword_29C870, type metadata accessor for ReportAnIssueCompletionEvent, (uint64_t)&protocol conformance descriptor for ReportAnIssueCompletionEvent);
  v92 = 0u;
  v93 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v78, 0, &v92, 0, 0, v78, v79);
  return sub_54960((uint64_t)&v92);
}

uint64_t sub_C7454()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 53, 7);
}

uint64_t sub_C7488(uint64_t a1)
{
  uint64_t v1;

  return sub_C6E18(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned int *)(v1 + 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 52) << 32));
}

uint64_t sub_C74B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_C74D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_C7518(uint64_t a1)
{
  uint64_t v1;

  return sub_C7170(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_DWORD *)(v1 + 48), *(BAEventReporter **)(v1 + 56), *(_QWORD *)(v1 + 64), *(BAEventReporter **)(v1 + 72));
}

unint64_t sub_C754C()
{
  unint64_t result;

  result = qword_29C868;
  if (!qword_29C868)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OptionListData, &type metadata for OptionListData);
    atomic_store(result, (unint64_t *)&qword_29C868);
  }
  return result;
}

void __swiftcall AltSeriesContentTypeExposureData.init(altType:altContentType:altContentID:altPricePoint:altPriceCurrency:)(BookAnalytics::AltSeriesContentTypeExposureData *__return_ptr retstr, BookAnalytics::AltType altType, BookAnalytics::ContentType altContentType, Swift::String_optional altContentID, Swift::String_optional altPricePoint, Swift::String_optional altPriceCurrency)
{
  BookAnalytics::ContentType v6;

  v6 = *(_BYTE *)altContentType;
  retstr->altType = *(_BYTE *)altType;
  retstr->altContentType = v6;
  retstr->altContentID = altContentID;
  retstr->altPricePoint = altPricePoint;
  retstr->altPriceCurrency = altPriceCurrency;
}

uint64_t sub_C75B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_C75E8 + 4 * byte_200850[*v0]))(0x65707954746C61, 0xE700000000000000);
}

uint64_t sub_C75E8()
{
  return 0x65746E6F43746C61;
}

uint64_t sub_C761C()
{
  return 0x6563697250746C61;
}

unint64_t sub_C7640()
{
  return 0xD000000000000010;
}

uint64_t sub_C765C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C8348(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_C7680(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C7DF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C76A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C7DF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AltSeriesContentTypeExposureData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v4 = sub_71B4(&qword_29C880);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v29 = v1[1];
  v9 = *((_QWORD *)v1 + 1);
  v27 = *((_QWORD *)v1 + 2);
  v28 = v9;
  v10 = *((_QWORD *)v1 + 3);
  v25 = *((_QWORD *)v1 + 4);
  v26 = v10;
  v11 = *((_QWORD *)v1 + 5);
  v23 = *((_QWORD *)v1 + 6);
  v24 = v11;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_C7DF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AltSeriesContentTypeExposureData.CodingKeys, &type metadata for AltSeriesContentTypeExposureData.CodingKeys, v14, v12, v13);
  v36 = v8;
  v35 = 0;
  v15 = sub_C7E3C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v4, &type metadata for AltType, v15);
  if (!v2)
  {
    v17 = v27;
    v16 = v28;
    v19 = v25;
    v18 = v26;
    v34 = v29;
    v33 = 1;
    v20 = sub_FBF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v4, &type metadata for ContentType, v20);
    v32 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v32, v4);
    v31 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v4);
    v30 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v23, &v30, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void AltSeriesContentTypeExposureData.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  BAEventReporter *v30;
  BAEventReporter *v31;
  uint64_t v32;
  BAEventReporter *v33;
  BAEventReporter *v34;
  uint64_t v35;
  BAEventReporter *v36;
  BAEventReporter *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  int64_t v44;
  int64_t v45;
  id v46;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  int64_t v51;
  int64_t v52;
  void *v53;
  BAEventReporter *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;

  v5 = sub_71B4(&qword_29C898);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_C7DF8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AltSeriesContentTypeExposureData.CodingKeys, &type metadata for AltSeriesContentTypeExposureData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v31 = 0;
    v34 = 0;
    sub_7DAC(a1);
    v54 = 0;
  }
  else
  {
    BYTE1(v64) = 0;
    v12 = sub_C7E80();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v64 + 2), &type metadata for AltType, (char *)&v64 + 1, v5, &type metadata for AltType, v12);
    v13 = BYTE2(v64);
    v63 = 1;
    v14 = sub_FC34();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for ContentType, &v63, v5, &type metadata for ContentType, v14);
    v59 = v64;
    v62 = 2;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v5);
    v31 = v30;
    v57 = v15;
    v58 = v13;
    v61 = 3;
    swift_bridgeObjectRetain(v30);
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v5);
    v34 = v33;
    v56 = v32;
    v60 = 4;
    swift_bridgeObjectRetain(v33);
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v5);
    v37 = v36;
    v38 = *(void (**)(char *, uint64_t))(v6 + 8);
    v39 = v35;
    v38(v8, v5);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(0, v40, v41, v42, v43, v44, v45, v46);
    *(_BYTE *)a2 = v58;
    *(_BYTE *)(a2 + 1) = v59;
    *(_QWORD *)(a2 + 8) = v57;
    *(_QWORD *)(a2 + 16) = v31;
    *(_QWORD *)(a2 + 24) = v56;
    *(_QWORD *)(a2 + 32) = v34;
    *(_QWORD *)(a2 + 40) = v39;
    *(_QWORD *)(a2 + 48) = v37;
    sub_7DAC(a1);
    v54 = v37;
  }
  swift_bridgeObjectRelease(v54, v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease(v34, v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(v31, v23, v24, v25, v26, v27, v28, v29);
}

void sub_C7B80(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AltSeriesContentTypeExposureData.init(from:)(a1, a2);
}

uint64_t sub_C7B94(_QWORD *a1)
{
  return AltSeriesContentTypeExposureData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics32AltSeriesContentTypeExposureDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BAEventReporter *v17;
  char v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  uint64_t result;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v41 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 5);
  v43 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 6);
  v9 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v40 = *(_QWORD *)(a2 + 24);
  v42 = *(_QWORD *)(a2 + 32);
  v10 = 0x65536E4965726F6DLL;
  v11 = 0xE700000000000000;
  if (v2 == 1)
    v11 = 0xEC00000073656972;
  else
    v10 = 0x6E776F6E6B6E75;
  if (*a1)
    v12 = v10;
  else
    v12 = 0x65536E497478656ELL;
  if (v2)
    v13 = (BAEventReporter *)v11;
  else
    v13 = (BAEventReporter *)0xEC00000073656972;
  v14 = 0x65536E4965726F6DLL;
  v15 = 0xE700000000000000;
  if (*(_BYTE *)a2 == 1)
    v15 = 0xEC00000073656972;
  else
    v14 = 0x6E776F6E6B6E75;
  if (*(_BYTE *)a2)
    v16 = v14;
  else
    v16 = 0x65536E497478656ELL;
  if (*(_BYTE *)a2)
    v17 = (BAEventReporter *)v15;
  else
    v17 = (BAEventReporter *)0xEC00000073656972;
  v38 = v6;
  v39 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 40);
  if (v12 == v16 && v13 == v17)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v16, v17, 0);
    swift_bridgeObjectRelease(v13, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v17, v26, v27, v28, v29, v30, v31, v32);
    result = 0;
    if ((v18 & 1) == 0)
      return result;
  }
  sub_26C28(v3);
  if ((v34 & 1) == 0)
    return 0;
  if (!v5)
  {
    if (v8)
      return 0;
    goto LABEL_31;
  }
  if (!v8)
    return 0;
  if (v4 == v9 && v5 == v8
    || (v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v9, v8, 0), result = 0, (v35 & 1) != 0))
  {
LABEL_31:
    if (v43)
    {
      if (!v42)
        return 0;
      if (v41 != v40 || v43 != v42)
      {
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v40, v42, 0);
        result = 0;
        if ((v36 & 1) == 0)
          return result;
      }
    }
    else if (v42)
    {
      return 0;
    }
    if (v7)
    {
      if (v39
        && (v38 == v37 && v7 == v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v7, v37, v39, 0) & 1) != 0))
      {
        return 1;
      }
    }
    else if (!v39)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_C7DF8()
{
  unint64_t result;

  result = qword_29C888;
  if (!qword_29C888)
  {
    result = swift_getWitnessTable(&unk_200A14, &type metadata for AltSeriesContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C888);
  }
  return result;
}

unint64_t sub_C7E3C()
{
  unint64_t result;

  result = qword_29C890;
  if (!qword_29C890)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AltType, &type metadata for AltType);
    atomic_store(result, (unint64_t *)&qword_29C890);
  }
  return result;
}

unint64_t sub_C7E80()
{
  unint64_t result;

  result = qword_29C8A0;
  if (!qword_29C8A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AltType, &type metadata for AltType);
    atomic_store(result, (unint64_t *)&qword_29C8A0);
  }
  return result;
}

unint64_t sub_C7EC8()
{
  unint64_t result;

  result = qword_29C8A8;
  if (!qword_29C8A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AltSeriesContentTypeExposureData, &type metadata for AltSeriesContentTypeExposureData);
    atomic_store(result, (unint64_t *)&qword_29C8A8);
  }
  return result;
}

unint64_t sub_C7F10()
{
  unint64_t result;

  result = qword_29C8B0;
  if (!qword_29C8B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AltSeriesContentTypeExposureData, &type metadata for AltSeriesContentTypeExposureData);
    atomic_store(result, (unint64_t *)&qword_29C8B0);
  }
  return result;
}

uint64_t destroy for AltSeriesContentTypeExposureData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for AltSeriesContentTypeExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AltSeriesContentTypeExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for AltSeriesContentTypeExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AltSeriesContentTypeExposureData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AltSeriesContentTypeExposureData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AltSeriesContentTypeExposureData()
{
  return &type metadata for AltSeriesContentTypeExposureData;
}

uint64_t storeEnumTagSinglePayload for AltSeriesContentTypeExposureData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_C81F0 + 4 * byte_20085A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_C8224 + 4 * byte_200855[v4]))();
}

uint64_t sub_C8224(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C822C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC8234);
  return result;
}

uint64_t sub_C8240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC8248);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_C824C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C8254(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AltSeriesContentTypeExposureData.CodingKeys()
{
  return &type metadata for AltSeriesContentTypeExposureData.CodingKeys;
}

unint64_t sub_C8274()
{
  unint64_t result;

  result = qword_29C8B8;
  if (!qword_29C8B8)
  {
    result = swift_getWitnessTable(&unk_2009EC, &type metadata for AltSeriesContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C8B8);
  }
  return result;
}

unint64_t sub_C82BC()
{
  unint64_t result;

  result = qword_29C8C0;
  if (!qword_29C8C0)
  {
    result = swift_getWitnessTable("\r_\a", &type metadata for AltSeriesContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C8C0);
  }
  return result;
}

unint64_t sub_C8304()
{
  unint64_t result;

  result = qword_29C8C8;
  if (!qword_29C8C8)
  {
    result = swift_getWitnessTable(&unk_200984, &type metadata for AltSeriesContentTypeExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C8C8);
  }
  return result;
}

uint64_t sub_C8348(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x65707954746C61 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65707954746C61, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65746E6F43746C61 && a2 == 0xEE0065707954746ELL)
  {
    v7 = 0xEE0065707954746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6F43746C61, 0xEE0065707954746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65746E6F43746C61 && a2 == 0xEC0000004449746ELL)
  {
    v8 = 0xEC0000004449746ELL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6F43746C61, 0xEC0000004449746ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6563697250746C61 && a2 == 0xED0000746E696F50)
  {
    v9 = 0xED0000746E696F50;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697250746C61, 0xED0000746E696F50, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000000220DE0)
  {
    swift_bridgeObjectRelease(0x8000000000220DE0);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220DE0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::SelectedSuggestionType_optional __swiftcall SelectedSuggestionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SelectedSuggestionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2676F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SelectedSuggestionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_C8640 + 4 * byte_200A70[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_C8640()
{
  return 0x746E65636572;
}

uint64_t sub_C8654()
{
  return 0x676E69646E657274;
}

uint64_t sub_C866C()
{
  return 0x64656863746566;
}

uint64_t sub_C8680()
{
  return 0x6574736567677573;
}

uint64_t sub_C86B4()
{
  return 7368564;
}

unint64_t sub_C86C4()
{
  return 0xD000000000000014;
}

void sub_C86E0(char *a1)
{
  sub_26E08(*a1);
}

unint64_t sub_C86F0()
{
  unint64_t result;

  result = qword_29C8D0;
  if (!qword_29C8D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SelectedSuggestionType, &type metadata for SelectedSuggestionType);
    atomic_store(result, (unint64_t *)&qword_29C8D0);
  }
  return result;
}

void sub_C8734()
{
  char *v0;

  sub_1D3C28(0, *v0);
}

void sub_C8740(uint64_t a1)
{
  char *v1;

  sub_1EC8A8(a1, *v1);
}

void sub_C8748(uint64_t a1)
{
  char *v1;

  sub_1D3C28(a1, *v1);
}

BookAnalytics::SelectedSuggestionType_optional sub_C8750(Swift::String *a1)
{
  return SelectedSuggestionType.init(rawValue:)(*a1);
}

uint64_t sub_C875C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SelectedSuggestionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_C8780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_C88F4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_C87DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_C88F4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SelectedSuggestionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_C8874 + 4 * byte_200A7D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_C88A8 + 4 * byte_200A78[v4]))();
}

uint64_t sub_C88A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C88B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC88B8);
  return result;
}

uint64_t sub_C88C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC88CCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_C88D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C88D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SelectedSuggestionType()
{
  return &type metadata for SelectedSuggestionType;
}

unint64_t sub_C88F4()
{
  unint64_t result;

  result = qword_29C8D8;
  if (!qword_29C8D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SelectedSuggestionType, &type metadata for SelectedSuggestionType);
    atomic_store(result, (unint64_t *)&qword_29C8D8);
  }
  return result;
}

BookAnalytics::LinkActionType_optional __swiftcall LinkActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::LinkActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2677D0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t LinkActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_C89C0 + 4 * byte_200BB8[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_C89C0()
{
  return 0x696C43656C746974;
}

uint64_t sub_C89DC()
{
  return 0x6B63696C63;
}

uint64_t sub_C89F0()
{
  return 0x6570697773;
}

unint64_t sub_C8A04()
{
  return 0xD000000000000015;
}

uint64_t sub_C8A20()
{
  return 0x776F6C6C6F66;
}

void sub_C8A34(char *a1)
{
  sub_24E04(*a1);
}

unint64_t sub_C8A44()
{
  unint64_t result;

  result = qword_29C8E0;
  if (!qword_29C8E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinkActionType, &type metadata for LinkActionType);
    atomic_store(result, (unint64_t *)&qword_29C8E0);
  }
  return result;
}

void sub_C8A88()
{
  char *v0;

  sub_195568(*v0);
}

void sub_C8A90(uint64_t a1)
{
  char *v1;

  sub_1ECE34(a1, *v1);
}

void sub_C8A98(uint64_t a1)
{
  char *v1;

  sub_1D366C(a1, *v1);
}

BookAnalytics::LinkActionType_optional sub_C8AA0(Swift::String *a1)
{
  return LinkActionType.init(rawValue:)(*a1);
}

uint64_t sub_C8AAC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_C8ADC + 4 * byte_200BBE[*v0]))();
}

void sub_C8ADC(_QWORD *a1@<X8>)
{
  *a1 = 0x696C43656C746974;
  a1[1] = 0xEA00000000006B63;
}

void sub_C8AFC(_QWORD *a1@<X8>)
{
  *a1 = 0x6B63696C63;
  a1[1] = 0xE500000000000000;
}

void sub_C8B14(_QWORD *a1@<X8>)
{
  *a1 = 0x6570697773;
  a1[1] = 0xE500000000000000;
}

void sub_C8B2C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x800000000021DB70;
}

void sub_C8B4C(_QWORD *a1@<X8>)
{
  *a1 = 0x776F6C6C6F66;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_C8B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_C8CD8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_C8BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_C8CD8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for LinkActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_C8C58 + 4 * byte_200BC9[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_C8C8C + 4 * byte_200BC4[v4]))();
}

uint64_t sub_C8C8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C8C94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC8C9CLL);
  return result;
}

uint64_t sub_C8CA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC8CB0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_C8CB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C8CBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LinkActionType()
{
  return &type metadata for LinkActionType;
}

unint64_t sub_C8CD8()
{
  unint64_t result;

  result = qword_29C8E8;
  if (!qword_29C8E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinkActionType, &type metadata for LinkActionType);
    atomic_store(result, (unint64_t *)&qword_29C8E8);
  }
  return result;
}

uint64_t sub_C8D1C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29C8F0, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadingGoalReachedEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957E8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C8F0, a1);
}

uint64_t sub_C8D5C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29C908, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadingGoalReachedEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957F0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C908, a1);
}

uint64_t ReadingGoalReachedEvent.dailyGoalsReachedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C920);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ReadingGoalReachedEvent.dailyGoalsReachedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29C920);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ReadingGoalReachedEvent.yearlyGoalsReachedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalReachedEvent(0) + 20);
  v4 = sub_71B4(&qword_29C928);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingGoalReachedEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29C9B0, (uint64_t)&nominal type descriptor for ReadingGoalReachedEvent);
}

uint64_t ReadingGoalReachedEvent.yearlyGoalsReachedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalReachedEvent(0) + 20);
  v4 = sub_71B4(&qword_29C928);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingGoalReachedEvent.yearlyGoalsReachedData.modify())()
{
  type metadata accessor for ReadingGoalReachedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingGoalReachedEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalReachedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadingGoalReachedEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalReachedEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadingGoalReachedEvent.eventData.modify())()
{
  type metadata accessor for ReadingGoalReachedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadingGoalReachedEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ReadingGoalReachedEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_29C928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

void ReadingGoalReachedEvent.Model.dailyGoalsReachedData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
}

void ReadingGoalReachedEvent.Model.yearlyGoalsReachedData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t ReadingGoalReachedEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadingGoalReachedEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadingGoalReachedEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29CA58, (uint64_t)&nominal type descriptor for ReadingGoalReachedEvent.Model);
}

uint64_t ReadingGoalReachedEvent.Model.init(dailyGoalsReachedData:yearlyGoalsReachedData:eventData:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  *(_BYTE *)a4 = *(_BYTE *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_QWORD *)(a4 + 24) = v7;
  v8 = a4 + *(int *)(type metadata accessor for ReadingGoalReachedEvent.Model(0) + 24);
  v9 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a3, v9);
}

unint64_t sub_C914C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 == 1)
    v1 = 0xD000000000000016;
  if (*v0)
    return v1;
  else
    return 0xD000000000000015;
}

uint64_t sub_C91AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_CA4B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_C91D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C93D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C91F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C93D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingGoalReachedEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22[8];
  uint64_t v23;

  v3 = v1;
  v5 = sub_71B4(&qword_29C930);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_C93D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingGoalReachedEvent.Model.CodingKeys, &type metadata for ReadingGoalReachedEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 8);
  v22[0] = *(_BYTE *)v3;
  v23 = v12;
  v21 = 0;
  v13 = sub_C9418();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, &type metadata for DailyGoalsReachedData, v13);
  if (!v2)
  {
    v14 = *(_QWORD *)(v3 + 24);
    v22[0] = *(_BYTE *)(v3 + 16);
    v23 = v14;
    v21 = 1;
    v15 = sub_4F848();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, &type metadata for YearlyGoalsReachedData, v15);
    v16 = v3 + *(int *)(type metadata accessor for ReadingGoalReachedEvent.Model(0) + 24);
    v22[0] = 2;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v22, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_C93D4()
{
  unint64_t result;

  result = qword_29C938;
  if (!qword_29C938)
  {
    result = swift_getWitnessTable(&unk_200EAC, &type metadata for ReadingGoalReachedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29C938);
  }
  return result;
}

unint64_t sub_C9418()
{
  unint64_t result;

  result = qword_29C940;
  if (!qword_29C940)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DailyGoalsReachedData, &type metadata for DailyGoalsReachedData);
    atomic_store(result, (unint64_t *)&qword_29C940);
  }
  return result;
}

uint64_t ReadingGoalReachedEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v27 = a2;
  v3 = type metadata accessor for EventData(0);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_29C948);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReadingGoalReachedEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_C93D4();
  v30 = v8;
  v15 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingGoalReachedEvent.Model.CodingKeys, &type metadata for ReadingGoalReachedEvent.Model.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v32 = v9;
    v16 = v5;
    v17 = v29;
    v35 = 0;
    v18 = sub_C96E4();
    v19 = v30;
    v20 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &type metadata for DailyGoalsReachedData, &v35, v31, &type metadata for DailyGoalsReachedData, v18);
    v21 = v34;
    *v11 = v33;
    *((_QWORD *)v11 + 1) = v21;
    v35 = 1;
    v22 = sub_4F800();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &type metadata for YearlyGoalsReachedData, &v35, v20, &type metadata for YearlyGoalsReachedData, v22);
    v24 = v34;
    v11[16] = v33;
    *((_QWORD *)v11 + 3) = v24;
    LOBYTE(v33) = 2;
    v25 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, &v33, v20, v17, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v20);
    v26 = v27;
    (*(void (**)(char *, _QWORD *, uint64_t))(v28 + 32))(&v11[*(int *)(v32 + 24)], v16, v17);
    sub_C9728((uint64_t)v11, v26);
  }
  return sub_7DAC(a1);
}

unint64_t sub_C96E4()
{
  unint64_t result;

  result = qword_29C950;
  if (!qword_29C950)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DailyGoalsReachedData, &type metadata for DailyGoalsReachedData);
    atomic_store(result, (unint64_t *)&qword_29C950);
  }
  return result;
}

uint64_t sub_C9728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingGoalReachedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_C976C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReadingGoalReachedEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_C9780(_QWORD *a1)
{
  return ReadingGoalReachedEvent.Model.encode(to:)(a1);
}

uint64_t sub_C9794@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957E8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29C8F0, (uint64_t)sub_C8D1C, a1);
}

uint64_t sub_C97B8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957F0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29C908, (uint64_t)sub_C8D5C, a1);
}

uint64_t sub_C97DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_29C928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingGoalReachedEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_29C920);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_29C928);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ReadingGoalReachedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_29C920);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_29C928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ReadingGoalReachedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ReadingGoalReachedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ReadingGoalReachedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ReadingGoalReachedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_29C928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingGoalReachedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C9D00);
}

uint64_t sub_C9D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_29C920);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_29C928);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadingGoalReachedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C9DB0);
}

uint64_t sub_C9DB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_29C920);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_29C928);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_C9E5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, &qword_29C9C0, (uint64_t (*)(void))sub_C96E4, (uint64_t (*)(void))sub_C9418, (uint64_t)&type metadata for DailyGoalsReachedData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_29C9C8, (uint64_t (*)(void))sub_4F800, (uint64_t (*)(void))sub_4F848, (uint64_t)&type metadata for YearlyGoalsReachedData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadingGoalReachedEvent.Model(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v10);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for EventData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for ReadingGoalReachedEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *initializeWithCopy for ReadingGoalReachedEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for ReadingGoalReachedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *initializeWithTake for ReadingGoalReachedEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ReadingGoalReachedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingGoalReachedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CA1A8);
}

uint64_t sub_CA1A8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingGoalReachedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CA228);
}

_BYTE *sub_CA228(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_CA298(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_200DD0;
  v4[1] = &unk_200DD0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingGoalReachedEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_CA358 + 4 * byte_200CF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_CA38C + 4 * byte_200CF0[v4]))();
}

uint64_t sub_CA38C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CA394(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCA39CLL);
  return result;
}

uint64_t sub_CA3A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCA3B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_CA3B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CA3BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingGoalReachedEvent.Model.CodingKeys()
{
  return &type metadata for ReadingGoalReachedEvent.Model.CodingKeys;
}

unint64_t sub_CA3DC()
{
  unint64_t result;

  result = qword_29CA98;
  if (!qword_29CA98)
  {
    result = swift_getWitnessTable(&unk_200E84, &type metadata for ReadingGoalReachedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CA98);
  }
  return result;
}

unint64_t sub_CA424()
{
  unint64_t result;

  result = qword_29CAA0;
  if (!qword_29CAA0)
  {
    result = swift_getWitnessTable(&unk_200DF4, &type metadata for ReadingGoalReachedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CAA0);
  }
  return result;
}

unint64_t sub_CA46C()
{
  unint64_t result;

  result = qword_29CAA8;
  if (!qword_29CAA8)
  {
    result = swift_getWitnessTable(&unk_200E1C, &type metadata for ReadingGoalReachedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CAA8);
  }
  return result;
}

uint64_t sub_CA4B0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000015)
  {
    v4 = 0x8000000000220E00;
    if (a2 == 0x8000000000220E00)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000000220E00, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000000220E20)
  {
    v6 = 0x8000000000220E20;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000000220E20, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::DailyReadingGoalStatus_optional __swiftcall DailyReadingGoalStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DailyReadingGoalStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267880, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DailyReadingGoalStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_CA684 + 4 * byte_200F00[*v0]))(16718, 0xE200000000000000);
}

uint64_t sub_CA684()
{
  return 0x64656863616572;
}

uint64_t sub_CA69C()
{
  return 0x6572676F72506E69;
}

uint64_t sub_CA6BC()
{
  return 0x7472617453746F6ELL;
}

void sub_CA6D8(char *a1)
{
  sub_282E0(*a1);
}

unint64_t sub_CA6E8()
{
  unint64_t result;

  result = qword_29CAB0;
  if (!qword_29CAB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DailyReadingGoalStatus, &type metadata for DailyReadingGoalStatus);
    atomic_store(result, (unint64_t *)&qword_29CAB0);
  }
  return result;
}

void sub_CA72C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_CA76C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64656863616572, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_CA7E8()
{
  __asm { BR              X10 }
}

uint64_t sub_CA818(uint64_t a1)
{
  String.hash(into:)(a1, 0x64656863616572, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_CA880(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_CA8BC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64656863616572, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

BookAnalytics::DailyReadingGoalStatus_optional sub_CA938(Swift::String *a1)
{
  return DailyReadingGoalStatus.init(rawValue:)(*a1);
}

uint64_t sub_CA944()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_CA968 + 4 * byte_200F10[*v0]))();
}

void sub_CA968(_QWORD *a1@<X8>)
{
  *a1 = 0x64656863616572;
  a1[1] = 0xE700000000000000;
}

void sub_CA984(_QWORD *a1@<X8>)
{
  *a1 = 0x6572676F72506E69;
  a1[1] = 0xEA00000000007373;
}

void sub_CA9A8(_QWORD *a1@<X8>)
{
  *a1 = 0x7472617453746F6ELL;
  a1[1] = 0xEA00000000006465;
}

uint64_t sub_CA9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_CAB3C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_CAA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_CAB3C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for DailyReadingGoalStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_CAABC + 4 * byte_200F19[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_CAAF0 + 4 * byte_200F14[v4]))();
}

uint64_t sub_CAAF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CAAF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCAB00);
  return result;
}

uint64_t sub_CAB0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCAB14);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_CAB18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CAB20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DailyReadingGoalStatus()
{
  return &type metadata for DailyReadingGoalStatus;
}

unint64_t sub_CAB3C()
{
  unint64_t result;

  result = qword_29CAB8;
  if (!qword_29CAB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DailyReadingGoalStatus, &type metadata for DailyReadingGoalStatus);
    atomic_store(result, (unint64_t *)&qword_29CAB8);
  }
  return result;
}

uint64_t sub_CAB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  void *Strong;
  NSString v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  NSString v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v10 = v9;
  v54 = a6;
  v55 = a2;
  v50 = a5;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v19) = *a4;
  v51 = *a3;
  v52 = v19;
  v21 = *a7;
  v53 = *a8;
  sub_CB2E4();
  *v20 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.notOnQueue(_:), v17);
  LOBYTE(a8) = _dispatchPreconditionTest(_:)(v20);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((a8 & 1) != 0)
  {
    v49 = v21;
    v23 = *(_QWORD *)(v10 + OBJC_IVAR___BAEventReporter_dataProviders);
    v24 = sub_71B4(&qword_29CAC8);
    OSAllocatedUnfairLock.valueWithLock.getter(v56, v23, v24);
    v25 = v56[0];
    v26 = *(_QWORD *)(v56[0] + 16);
    if (v26)
    {
      v27 = v56[0] + 32;
      while (1)
      {
        sub_89258(v27, (uint64_t)v56);
        v28 = v57;
        v29 = v58;
        sub_7988(v56, v57);
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8))(v10, a1, v55, v28, v29);
        if (v30)
          break;
        sub_7DAC(v56);
        v27 += 40;
        if (!--v26)
          goto LABEL_6;
      }
      v32 = (void *)v30;
      swift_bridgeObjectRelease(v25);
      LODWORD(v26) = objc_msgSend(v32, "intValue");

      sub_7DAC(v56);
      v31 = 0;
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease(v25);
      v31 = 1;
    }
    v33 = v50 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
    swift_beginAccess(v50 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v56, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v33);
    if (Strong)
    {
      v35 = String._bridgeToObjectiveC()();
      v36 = objc_msgSend(Strong, "contentPrivateIDForContentID:", v35);

      swift_unknownObjectRelease(Strong);
      if (v36)
      {
        Strong = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);
        v39 = v38;

        goto LABEL_13;
      }
      Strong = 0;
    }
    v39 = 0xE000000000000000;
LABEL_13:
    v40 = (void *)swift_unknownObjectWeakLoadStrong(v33);
    if (v40)
    {
      v41 = String._bridgeToObjectiveC()();
      v42 = objc_msgSend(v40, "contentUserIDForContentID:", v41);

      swift_unknownObjectRelease(v40);
      if (v42)
      {
        v40 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v42, v43);
        v45 = v44;

LABEL_18:
        v46 = v55;
        *(_QWORD *)a9 = a1;
        *(_QWORD *)(a9 + 8) = v46;
        *(_BYTE *)(a9 + 16) = v51;
        *(_QWORD *)(a9 + 24) = Strong;
        *(_QWORD *)(a9 + 32) = v39;
        *(_QWORD *)(a9 + 40) = v40;
        *(_QWORD *)(a9 + 48) = v45;
        *(_BYTE *)(a9 + 56) = v52;
        *(_BYTE *)(a9 + 57) = 4;
        *(_DWORD *)(a9 + 60) = v26;
        *(_BYTE *)(a9 + 64) = v31;
        v47 = BYTE4(v54);
        *(_DWORD *)(a9 + 68) = v54;
        *(_BYTE *)(a9 + 72) = v47 & 1;
        *(_BYTE *)(a9 + 73) = v49;
        *(_BYTE *)(a9 + 74) = v53;
        *(_WORD *)(a9 + 75) = 515;
        *(_BYTE *)(a9 + 77) = 2;
        *(_QWORD *)(a9 + 80) = 0;
        *(_QWORD *)(a9 + 88) = 0;
        return swift_bridgeObjectRetain(v46);
      }
      v40 = 0;
    }
    v45 = 0xE000000000000000;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void sub_CAECC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, int64_t a4)
{
  char v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  BAEventReporter *v12;
  BAEventReporter *v13;
  id v14;
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  char v25;
  unsigned __int8 v26;

  if (objc_msgSend(a1, "isOwned"))
  {
    if (objc_msgSend(a1, "isStoreAsset"))
      v7 = 1;
    else
      v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(a1, "assetID");
  if (v8)
  {
    v10 = v8;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
    v13 = v12;

    v14 = objc_msgSend(a1, "assetType");
    v15 = 0x2000503040100uLL >> (8 * v14);
    if ((unint64_t)v14 >= 7)
      LOBYTE(v15) = 0;
    v26 = v15;
    v25 = v7;
    v24 = 4;
    v23 = 0;
    sub_CAB80(v11, (uint64_t)v13, &v26, (unsigned __int8 *)&v25, a2, 0x100000000, &v24, &v23, a3);
    swift_bridgeObjectRelease(v13, v16, v17, v18, v19, v20, v21, v22, a4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t EventReporter.userEmbeddingData()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = v1;
  return swift_task_switch(sub_CB00C, 0, 0);
}

uint64_t sub_CB00C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;
  int64_t v8;
  void *v9;
  BAEventReporter *v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  int *v17;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + OBJC_IVAR___BAEventReporter_dataProviders);
  v2 = sub_71B4(&qword_29CAC8);
  OSAllocatedUnfairLock.valueWithLock.getter((_QWORD *)(v0 + 56), v1, v2);
  v10 = *(BAEventReporter **)(v0 + 56);
  *(_QWORD *)(v0 + 88) = v10;
  isa = v10[1].super.isa;
  *(_QWORD *)(v0 + 96) = isa;
  if (isa)
  {
    *(_QWORD *)(v0 + 104) = 0;
    sub_89258((uint64_t)&v10[2], v0 + 16);
    v12 = *(_QWORD *)(v0 + 40);
    v13 = *(_QWORD *)(v0 + 48);
    sub_7988((_QWORD *)(v0 + 16), v12);
    v14 = *(int **)(v13 + 16);
    v17 = (int *)((char *)v14 + *v14);
    v15 = (_QWORD *)swift_task_alloc(v14[1]);
    *(_QWORD *)(v0 + 112) = v15;
    *v15 = v0;
    v15[1] = sub_CB120;
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(v0 + 64, *(_QWORD *)(v0 + 80), v12, v13);
  }
  else
  {
    swift_bridgeObjectRelease(v10, v3, v4, v5, v6, v7, v8, v9);
    **(_QWORD **)(v0 + 72) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_CB120()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  void *v11;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(BAEventReporter **)(v2 + 88), v4, v5, v6, v7, v8, v9, v10);
    v11 = sub_CB2B0;
  }
  else
  {
    v11 = sub_CB18C;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_CB18C(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  int64_t v17;
  int64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  int *v26;

  v9 = *(_QWORD *)(v8 + 64);
  if (v9)
  {
    v10 = *(_QWORD **)(v8 + 72);
    swift_bridgeObjectRelease(*(BAEventReporter **)(v8 + 88), a2, a3, a4, a5, a6, a7, a8);
    *v10 = v9;
    sub_7DAC((_QWORD *)(v8 + 16));
    return (*(uint64_t (**)(void))(v8 + 8))();
  }
  v11 = *(_QWORD *)(v8 + 96);
  v12 = *(_QWORD *)(v8 + 104) + 1;
  sub_7DAC((_QWORD *)(v8 + 16));
  if (v12 == v11)
  {
    swift_bridgeObjectRelease(*(BAEventReporter **)(v8 + 88), v13, v14, v15, v16, v17, v18, v19);
    **(_QWORD **)(v8 + 72) = 0;
    return (*(uint64_t (**)(void))(v8 + 8))();
  }
  v21 = *(_QWORD *)(v8 + 104) + 1;
  *(_QWORD *)(v8 + 104) = v21;
  sub_89258(*(_QWORD *)(v8 + 88) + 40 * v21 + 32, v8 + 16);
  v22 = *(_QWORD *)(v8 + 40);
  v23 = *(_QWORD *)(v8 + 48);
  sub_7988((_QWORD *)(v8 + 16), v22);
  v24 = *(int **)(v23 + 16);
  v26 = (int *)((char *)v24 + *v24);
  v25 = (_QWORD *)swift_task_alloc(v24[1]);
  *(_QWORD *)(v8 + 112) = v25;
  *v25 = v8;
  v25[1] = sub_CB120;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v26)(v8 + 64, *(_QWORD *)(v8 + 80), v22, v23);
}

uint64_t sub_CB2B0()
{
  uint64_t v0;

  sub_7DAC((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_CB2E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_29CAD0;
  if (!qword_29CAD0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_29CAD0);
  }
  return result;
}

id sub_CB320()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  __objc2_prot *v13;
  __objc2_prot *v14;

  if (qword_295600 != -1)
    swift_once(&qword_295600, sub_5C754);
  v0 = type metadata accessor for Logger(0);
  sub_705C(v0, (uint64_t)qword_2987A0);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.fault.getter(v1);
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "Fallback tracker should only be computed on main thread for thread-safety", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

  v4 = objc_msgSend((id)objc_opt_self(UIWindow), "_applicationKeyWindow");
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "rootViewController");

    if (v6)
    {
      v14 = &OBJC_PROTOCOL___BAAnalyticsTracking;
      v7 = (void *)swift_dynamicCastObjCProtocolConditional(v6, 1, &v14);
      if (v7)
      {
        v8 = objc_msgSend(v7, "ba_deepestVisibleChildViewControllerIncludePresented:", 1);
        v5 = v8;
        if (!v8)
        {
LABEL_11:

          return v5;
        }
        v13 = &OBJC_PROTOCOL___BAAnalyticsTracking;
        v9 = swift_dynamicCastObjCProtocolConditional(v8, 1, &v13);
        if (v9)
        {
          v10 = (void *)v9;
          v11 = v5;
          v5 = objc_msgSend(v10, "ba_effectiveAnalyticsTracker");

          goto LABEL_11;
        }

      }
      else
      {

      }
    }
    return 0;
  }
  return v5;
}

unint64_t sub_CB4F0()
{
  return 0xD000000000000010;
}

uint64_t sub_CB50C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_CBC3C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_CB534(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CB8A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CB55C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CB8A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ScrollViewSettingData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29CB40);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_CB8A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScrollViewSettingData.CodingKeys, &type metadata for ScrollViewSettingData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_CB8E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for ScrollViewStatus, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ScrollViewSettingData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29CB58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_CB8A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScrollViewSettingData.CodingKeys, &type metadata for ScrollViewSettingData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_CB928();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for ScrollViewStatus, v13, v5, &type metadata for ScrollViewStatus, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_CB79C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ScrollViewSettingData.init(from:)(a1, a2);
}

uint64_t sub_CB7B0(_QWORD *a1)
{
  return ScrollViewSettingData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics21ScrollViewSettingDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE200000000000000;
  v4 = 28271;
  if (v2 != 1)
  {
    v4 = 6710895;
    v3 = 0xE300000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  v7 = 0xE200000000000000;
  v8 = 28271;
  if (*a2 != 1)
  {
    v8 = 6710895;
    v7 = 0xE300000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xE700000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_CB8A0()
{
  unint64_t result;

  result = qword_29CB48;
  if (!qword_29CB48)
  {
    result = swift_getWitnessTable(&unk_2011FC, &type metadata for ScrollViewSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CB48);
  }
  return result;
}

unint64_t sub_CB8E4()
{
  unint64_t result;

  result = qword_29CB50;
  if (!qword_29CB50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollViewStatus, &type metadata for ScrollViewStatus);
    atomic_store(result, (unint64_t *)&qword_29CB50);
  }
  return result;
}

unint64_t sub_CB928()
{
  unint64_t result;

  result = qword_29CB60;
  if (!qword_29CB60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollViewStatus, &type metadata for ScrollViewStatus);
    atomic_store(result, (unint64_t *)&qword_29CB60);
  }
  return result;
}

unint64_t sub_CB970()
{
  unint64_t result;

  result = qword_29CB68;
  if (!qword_29CB68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollViewSettingData, &type metadata for ScrollViewSettingData);
    atomic_store(result, (unint64_t *)&qword_29CB68);
  }
  return result;
}

unint64_t sub_CB9B8()
{
  unint64_t result;

  result = qword_29CB70;
  if (!qword_29CB70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollViewSettingData, &type metadata for ScrollViewSettingData);
    atomic_store(result, (unint64_t *)&qword_29CB70);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrollViewSettingData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_CBA48 + 4 * byte_201055[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_CBA7C + 4 * byte_201050[v4]))();
}

uint64_t sub_CBA7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CBA84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCBA8CLL);
  return result;
}

uint64_t sub_CBA98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCBAA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_CBAA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CBAAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewSettingData()
{
  return &type metadata for ScrollViewSettingData;
}

uint64_t storeEnumTagSinglePayload for ScrollViewSettingData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_CBB08 + 4 * byte_20105A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_CBB28 + 4 * byte_20105F[v4]))();
}

_BYTE *sub_CBB08(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_CBB28(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_CBB30(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_CBB38(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_CBB40(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_CBB48(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewSettingData.CodingKeys()
{
  return &type metadata for ScrollViewSettingData.CodingKeys;
}

unint64_t sub_CBB68()
{
  unint64_t result;

  result = qword_29CB78;
  if (!qword_29CB78)
  {
    result = swift_getWitnessTable(&unk_2011D4, &type metadata for ScrollViewSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CB78);
  }
  return result;
}

unint64_t sub_CBBB0()
{
  unint64_t result;

  result = qword_29CB80;
  if (!qword_29CB80)
  {
    result = swift_getWitnessTable(&unk_201144, &type metadata for ScrollViewSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CB80);
  }
  return result;
}

unint64_t sub_CBBF8()
{
  unint64_t result;

  result = qword_29CB88;
  if (!qword_29CB88)
  {
    result = swift_getWitnessTable(&unk_20116C, &type metadata for ScrollViewSettingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CB88);
  }
  return result;
}

uint64_t sub_CBC3C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000000220970)
  {
    swift_bridgeObjectRelease(0x8000000000220970);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220970, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_CBCC0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29CB90, &enum case for SessionGroup.default(_:));
}

uint64_t static GenreExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2957F8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29CB90, a1);
}

uint64_t sub_CBD00(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29CBA8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static GenreExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295800, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29CBA8, a1);
}

uint64_t GenreExposureEvent.genreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GenreExposureEvent.genreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29A200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t GenreExposureEvent.exposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GenreExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29CC30, (uint64_t)&nominal type descriptor for GenreExposureEvent);
}

uint64_t GenreExposureEvent.exposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GenreExposureEvent.exposureData.modify())()
{
  type metadata accessor for GenreExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GenreExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GenreExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GenreExposureEvent.linkData.modify())()
{
  type metadata accessor for GenreExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GenreExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GenreExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GenreExposureEvent.eventData.modify())()
{
  type metadata accessor for GenreExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GenreExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GenreExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GenreExposureEvent.timedData.modify())()
{
  type metadata accessor for GenreExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GenreExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for GenreExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t GenreExposureEvent.Model.genreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  v5 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v6);
}

uint64_t SeriesExposureEvent.Model.exposureData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[6];
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[9];
  v6 = v1[10];
  v7 = v1[11];
  v8 = v1[12];
  v9 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  return sub_40660(v2, v3, v4, v5, v6, v7, v8, v9);
}

_QWORD *SeriesExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[19];

  sub_406FC(v1 + 112, (uint64_t)v4);
  sub_406FC((uint64_t)v4, a1);
  return sub_41240(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AF4C);
}

uint64_t GenreExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GenreExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29CCD0, (uint64_t)&nominal type descriptor for GenreExposureEvent.Model);
}

uint64_t GenreExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GenreExposureEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GenreExposureEvent.Model.init(genreData:exposureData:linkData:eventData:timedData:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[152];

  v22 = a1[1];
  v23 = *a1;
  v9 = *((_QWORD *)a1 + 4);
  v10 = *((_QWORD *)a1 + 5);
  v20 = a2[1];
  v21 = *a2;
  v19 = a2[2];
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_QWORD *)a2 + 7);
  sub_406FC(a3, (uint64_t)v24);
  *(_OWORD *)a6 = v23;
  *(_OWORD *)(a6 + 16) = v22;
  *(_QWORD *)(a6 + 32) = v9;
  *(_QWORD *)(a6 + 40) = v10;
  *(_OWORD *)(a6 + 48) = v21;
  *(_OWORD *)(a6 + 64) = v20;
  *(_OWORD *)(a6 + 80) = v19;
  *(_QWORD *)(a6 + 96) = v11;
  *(_QWORD *)(a6 + 104) = v12;
  sub_406FC((uint64_t)v24, a6 + 112);
  v13 = type metadata accessor for GenreExposureEvent.Model(0);
  v14 = a6 + *(int *)(v13 + 28);
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a4, v15);
  v16 = a6 + *(int *)(v13 + 32);
  v17 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a5, v17);
}

uint64_t sub_CC454()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_CC488 + 4 * byte_201250[*v0]))(0x74614465726E6567, 0xE900000000000061);
}

uint64_t sub_CC488()
{
  return 0x657275736F707865;
}

uint64_t sub_CC4A8()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_CC4C0()
{
  return 0x746144746E657665;
}

uint64_t sub_CC4D4()
{
  return 0x74614464656D6974;
}

uint64_t sub_CC4E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_CE9A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_CC50C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CC814();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CC534(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CC814();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenreExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[152];
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  char v35;
  _OWORD v36[5];
  uint64_t v37;

  v2 = v1;
  v4 = sub_71B4(&qword_29CBC0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v8 = a1[4];
  sub_7988(a1, v9);
  v10 = sub_CC814();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GenreExposureEvent.Model.CodingKeys, &type metadata for GenreExposureEvent.Model.CodingKeys, v10, v9, v8);
  v11 = *(_QWORD *)(v2 + 8);
  v32[0] = *(_QWORD *)v2;
  v32[1] = v11;
  v12 = *(_OWORD *)(v2 + 32);
  v33 = *(_OWORD *)(v2 + 16);
  v34 = v12;
  v31[0] = 0;
  v13 = sub_8B9C0();
  v14 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v32, v31, v4, &type metadata for GenreData, v13);
  if (v14)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v15 = v5;
  v16 = *(_OWORD *)(v2 + 64);
  v36[0] = *(_OWORD *)(v2 + 48);
  v36[1] = v16;
  v17 = *(_OWORD *)(v2 + 96);
  v36[2] = *(_OWORD *)(v2 + 80);
  v36[3] = v17;
  v35 = 1;
  v18 = sub_40CF4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v35, v4, &type metadata for ExposureData, v18);
  sub_406FC(v2 + 112, (uint64_t)v32);
  sub_406FC((uint64_t)v32, (uint64_t)v31);
  HIBYTE(v30) = 2;
  v19 = sub_1B7F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v31, (char *)&v30 + 7, v4, &type metadata for LinkData, v19);
  v21 = type metadata accessor for GenreExposureEvent.Model(0);
  v22 = v2 + *(int *)(v21 + 28);
  v31[0] = 3;
  v23 = v4;
  v24 = type metadata accessor for EventData(0);
  v25 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v37 = v23;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v31, v23, v24, v25);
  v26 = v2 + *(int *)(v21 + 32);
  v31[0] = 4;
  v27 = type metadata accessor for TimedData(0);
  v28 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v29 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v31, v37, v27, v28);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v7, v29);
}

unint64_t sub_CC814()
{
  unint64_t result;

  result = qword_29CBC8;
  if (!qword_29CBC8)
  {
    result = swift_getWitnessTable(&unk_20145C, &type metadata for GenreExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CBC8);
  }
  return result;
}

void GenreExposureEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  _BYTE v45[159];
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v36 = a2;
  v38 = type metadata accessor for TimedData(0);
  v35 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v37 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v39 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = sub_71B4(&qword_29CBD0);
  v6 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GenreExposureEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_CC814();
  v42 = v8;
  v15 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GenreExposureEvent.Model.CodingKeys, &type metadata for GenreExposureEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(a1);
  }
  else
  {
    v51 = v6;
    v34 = a1;
    v16 = v11;
    v45[0] = 0;
    v17 = sub_8C03C();
    v18 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for GenreData, v45, v43, &type metadata for GenreData, v17);
    v19 = *((_QWORD *)&v47 + 1);
    v20 = (uint64_t)v16;
    *(_QWORD *)v16 = v47;
    *((_QWORD *)v16 + 1) = v19;
    v21 = v49;
    *((_OWORD *)v16 + 1) = v48;
    *((_OWORD *)v16 + 2) = v21;
    v45[0] = 1;
    v22 = sub_411FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v47, &type metadata for ExposureData, v45, v18, &type metadata for ExposureData, v22);
    v23 = v48;
    *((_OWORD *)v16 + 3) = v47;
    *((_OWORD *)v16 + 4) = v23;
    v24 = v50;
    *((_OWORD *)v16 + 5) = v49;
    *((_OWORD *)v16 + 6) = v24;
    v46 = 2;
    v25 = sub_1C06C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v47, &type metadata for LinkData, &v46, v18, &type metadata for LinkData, v25);
    v33 = 0;
    sub_406FC((uint64_t)&v47, (uint64_t)v45);
    sub_406FC((uint64_t)v45, (uint64_t)(v16 + 112));
    v44 = 3;
    v26 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v27 = v39;
    v28 = v20;
    v29 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v39, v41, &v44, v18, v41, v26);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v40 + 32))(v28 + *(int *)(v9 + 28), v27, v29);
    v44 = 4;
    v30 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v32 = v37;
    v31 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v38, &v44, v18, v38, v30);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v43);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v35 + 32))(v28 + *(int *)(v9 + 32), v32, v31);
    sub_CCD18(v28, v36);
    sub_7DAC(v34);
    sub_CCD5C(v28);
  }
}

uint64_t sub_CCD18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenreExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_CCD5C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GenreExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_CCD98(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  GenreExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_CCDAC(_QWORD *a1)
{
  return GenreExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_CCDC0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2957F8, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29CB90, (uint64_t)sub_CBCC0, a1);
}

uint64_t sub_CCDE4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295800, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29CBA8, (uint64_t)sub_CBD00, a1);
}

uint64_t sub_CCE08@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenreExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_29A200);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297A28);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for GenreExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for GenreExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for GenreExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for GenreExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for GenreExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_29A200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenreExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CD5C8);
}

uint64_t sub_CD5C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_29A200);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297A28);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A10);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GenreExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CD6C8);
}

uint64_t sub_CD6C8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_29A200);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297A28);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A10);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_CD7C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&unk_29A2E0, (uint64_t (*)(void))sub_8C03C, (uint64_t (*)(void))sub_8B9C0, (uint64_t)&type metadata for GenreData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_297AC0, (uint64_t (*)(void))sub_411FC, (uint64_t (*)(void))sub_40CF4, (uint64_t)&type metadata for ExposureData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for GenreExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v10)
    {
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v10;
      v11 = a2[9];
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v11;
      v12 = a2[11];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v12;
      v13 = a2[13];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v13;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      v14 = a2[15];
      if (v14)
      {
LABEL_4:
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v14;
        v15 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v15;
        v16 = a2[19];
        *(_QWORD *)(a1 + 144) = a2[18];
        *(_QWORD *)(a1 + 152) = v16;
        *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
        v17 = a2[22];
        *(_QWORD *)(a1 + 168) = a2[21];
        *(_QWORD *)(a1 + 176) = v17;
        v18 = a2[24];
        *(_QWORD *)(a1 + 184) = a2[23];
        *(_QWORD *)(a1 + 192) = v18;
        v40 = v6;
        v19 = a2[26];
        *(_QWORD *)(a1 + 200) = a2[25];
        *(_QWORD *)(a1 + 208) = v19;
        v20 = a2[28];
        *(_QWORD *)(a1 + 216) = a2[27];
        *(_QWORD *)(a1 + 224) = v20;
        v21 = a2[30];
        *(_QWORD *)(a1 + 232) = a2[29];
        *(_QWORD *)(a1 + 240) = v21;
        v22 = a2[32];
        *(_QWORD *)(a1 + 248) = a2[31];
        *(_QWORD *)(a1 + 256) = v22;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        v23 = v19;
        v6 = v40;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
LABEL_8:
        v31 = *(int *)(v6 + 28);
        v32 = a1 + v31;
        v33 = (uint64_t)a2 + v31;
        v34 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
        v35 = *(int *)(v6 + 32);
        v36 = a1 + v35;
        v37 = (uint64_t)a2 + v35;
        v38 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
        return a1;
      }
    }
    else
    {
      v25 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = v25;
      v26 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 96) = v26;
      v14 = a2[15];
      if (v14)
        goto LABEL_4;
    }
    v27 = *((_OWORD *)a2 + 14);
    *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 224) = v27;
    *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
    *(_QWORD *)(a1 + 256) = a2[32];
    v28 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v28;
    v29 = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 192) = v29;
    v30 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v30;
    goto LABEL_8;
  }
  v24 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v24);
  return a1;
}

uint64_t destroy for GenreExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = a1[7];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[11]);
    swift_bridgeObjectRelease(a1[13]);
  }
  v5 = a1[15];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
    swift_bridgeObjectRelease(a1[32]);
  }
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + *(int *)(a2 + 32);
  v9 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for GenreExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (!v9)
  {
    v23 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v23;
    v24 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v24;
    v13 = *(_QWORD *)(a2 + 120);
    if (v13)
      goto LABEL_3;
LABEL_5:
    v25 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v25;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v26 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v26;
    v27 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v27;
    v28 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v28;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v13 = *(_QWORD *)(a2 + 120);
  if (!v13)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v14;
  v15 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v15;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v16 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v16;
  v17 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v17;
  v38 = a3;
  v18 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v18;
  v19 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v19;
  v20 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v20;
  v21 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v21;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  v22 = v18;
  a3 = v38;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
LABEL_6:
  v29 = *(int *)(a3 + 28);
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  v33 = *(int *)(a3 + 32);
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  return a1;
}

uint64_t assignWithCopy for GenreExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  _OWORD *v33;
  __int128 *v34;
  BAEventReporter *v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  BAEventReporter *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD *v82;
  _OWORD *v83;
  BAEventReporter *v84;
  uint64_t v85;
  uint64_t v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  BAEventReporter *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;
  uint64_t v103;
  BAEventReporter *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  BAEventReporter *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  int64_t v118;
  int64_t v119;
  id v120;
  uint64_t v121;
  BAEventReporter *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  int64_t v127;
  int64_t v128;
  id v129;
  uint64_t v130;
  BAEventReporter *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  int64_t v136;
  int64_t v137;
  id v138;
  uint64_t v139;
  BAEventReporter *v140;
  SEL v141;
  id v142;
  id v143;
  id v144;
  int64_t v145;
  int64_t v146;
  id v147;
  uint64_t v148;
  BAEventReporter *v149;
  SEL v150;
  id v151;
  id v152;
  id v153;
  int64_t v154;
  int64_t v155;
  id v156;
  uint64_t v157;
  BAEventReporter *v158;
  SEL v159;
  id v160;
  id v161;
  id v162;
  int64_t v163;
  int64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v199;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v24 = *(_QWORD *)(a2 + 40);
  v25 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  v33 = (_OWORD *)(a1 + 48);
  v34 = (__int128 *)(a2 + 48);
  v35 = *(BAEventReporter **)(a1 + 56);
  v36 = *(_QWORD *)(a2 + 56);
  if (v35)
  {
    if (v36)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v37 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v35, v38, v39, v40, v41, v42, v43, v44);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v45 = *(_QWORD *)(a2 + 72);
      v46 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v54 = *(_QWORD *)(a2 + 88);
      v55 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v63 = *(_QWORD *)(a2 + 104);
      v64 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      sub_4294C((_QWORD *)(a1 + 48));
      v76 = *(_OWORD *)(a2 + 96);
      v78 = *v34;
      v77 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v76;
      *v33 = v78;
      *(_OWORD *)(a1 + 64) = v77;
    }
  }
  else if (v36)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v72 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v72;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v73 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v73;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v74 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v74;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v75 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v75;
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v75);
  }
  else
  {
    v79 = *v34;
    v80 = *(_OWORD *)(a2 + 64);
    v81 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v81;
    *v33 = v79;
    *(_OWORD *)(a1 + 64) = v80;
  }
  v82 = (_OWORD *)(a1 + 112);
  v83 = (_OWORD *)(a2 + 112);
  v84 = *(BAEventReporter **)(a1 + 120);
  v85 = *(_QWORD *)(a2 + 120);
  if (v84)
  {
    if (v85)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v86 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 120) = v86;
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRelease(v84, v87, v88, v89, v90, v91, v92, v93);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v94 = *(_QWORD *)(a2 + 136);
      v95 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v94;
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v103 = *(_QWORD *)(a2 + 152);
      v104 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v103;
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v112 = *(_QWORD *)(a2 + 176);
      v113 = *(BAEventReporter **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v112;
      swift_bridgeObjectRetain(v112);
      swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v121 = *(_QWORD *)(a2 + 192);
      v122 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v121;
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v130 = *(_QWORD *)(a2 + 208);
      v131 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v130;
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v139 = *(_QWORD *)(a2 + 224);
      v140 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v139;
      swift_bridgeObjectRetain(v139);
      swift_bridgeObjectRelease(v140, v141, v142, v143, v144, v145, v146, v147);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v148 = *(_QWORD *)(a2 + 240);
      v149 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v148;
      swift_bridgeObjectRetain(v148);
      swift_bridgeObjectRelease(v149, v150, v151, v152, v153, v154, v155, v156);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      v157 = *(_QWORD *)(a2 + 256);
      v158 = *(BAEventReporter **)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v157;
      swift_bridgeObjectRetain(v157);
      swift_bridgeObjectRelease(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      sub_1E060((_QWORD *)(a1 + 112));
      v176 = *(_OWORD *)(a2 + 128);
      *v82 = *v83;
      *(_OWORD *)(a1 + 128) = v176;
      v177 = *(_OWORD *)(a2 + 192);
      v179 = *(_OWORD *)(a2 + 144);
      v178 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v177;
      *(_OWORD *)(a1 + 144) = v179;
      *(_OWORD *)(a1 + 160) = v178;
      v181 = *(_OWORD *)(a2 + 224);
      v180 = *(_OWORD *)(a2 + 240);
      v182 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v181;
      *(_OWORD *)(a1 + 240) = v180;
      *(_OWORD *)(a1 + 208) = v182;
    }
  }
  else if (v85)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v166 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v166;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v167 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v167;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v168 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v168;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v169 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v169;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v199 = a3;
    v170 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v170;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v171 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v171;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v172 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v172;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v173 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v173;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v174 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 256) = v174;
    swift_bridgeObjectRetain(v166);
    swift_bridgeObjectRetain(v167);
    swift_bridgeObjectRetain(v168);
    swift_bridgeObjectRetain(v169);
    v175 = v170;
    a3 = v199;
    swift_bridgeObjectRetain(v175);
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRetain(v174);
  }
  else
  {
    v183 = *(_OWORD *)(a2 + 128);
    *v82 = *v83;
    *(_OWORD *)(a1 + 128) = v183;
    v184 = *(_OWORD *)(a2 + 144);
    v185 = *(_OWORD *)(a2 + 160);
    v186 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v186;
    *(_OWORD *)(a1 + 144) = v184;
    *(_OWORD *)(a1 + 160) = v185;
    v187 = *(_OWORD *)(a2 + 208);
    v188 = *(_OWORD *)(a2 + 224);
    v189 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 224) = v188;
    *(_OWORD *)(a1 + 240) = v189;
    *(_OWORD *)(a1 + 208) = v187;
  }
  v190 = *(int *)(a3 + 28);
  v191 = a1 + v190;
  v192 = a2 + v190;
  v193 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 24))(v191, v192, v193);
  v194 = *(int *)(a3 + 32);
  v195 = a1 + v194;
  v196 = a2 + v194;
  v197 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v195, v196, v197);
  return a1;
}

uint64_t initializeWithTake for GenreExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = *(_OWORD *)(a2 + 192);
  v14 = *(_OWORD *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 224);
  v16 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v14;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = *(int *)(a3 + 32);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  return a1;
}

uint64_t assignWithTake for GenreExposureEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  const char *v31;
  void *v32;
  void *v33;
  void *v34;
  int64_t v35;
  int64_t v36;
  void *v37;
  BAEventReporter *v38;
  uint64_t v39;
  uint64_t v40;
  BAEventReporter *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  int64_t v46;
  int64_t v47;
  id v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  __int128 v67;
  __int128 v68;
  BAEventReporter *v69;
  uint64_t v70;
  uint64_t v71;
  BAEventReporter *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  int64_t v77;
  int64_t v78;
  id v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  uint64_t v125;
  BAEventReporter *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  int64_t v131;
  int64_t v132;
  id v133;
  uint64_t v134;
  BAEventReporter *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  int64_t v140;
  int64_t v141;
  id v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v38 = *(BAEventReporter **)(a1 + 56);
  if (v38)
  {
    v39 = *(_QWORD *)(a2 + 56);
    if (v39)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v39;
      swift_bridgeObjectRelease(v38, v31, v32, v33, v34, v35, v36, v37);
      v40 = *(_QWORD *)(a2 + 72);
      v41 = *(BAEventReporter **)(a1 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v40;
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      v49 = *(_QWORD *)(a2 + 88);
      v50 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v49;
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      v58 = *(_QWORD *)(a2 + 104);
      v59 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      goto LABEL_6;
    }
    sub_4294C((_QWORD *)(a1 + 48));
  }
  v67 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v67;
  v68 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v68;
LABEL_6:
  v69 = *(BAEventReporter **)(a1 + 120);
  if (!v69)
  {
LABEL_10:
    v143 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v143;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v144 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v144;
    v145 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v145;
    v146 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v146;
    goto LABEL_11;
  }
  v70 = *(_QWORD *)(a2 + 120);
  if (!v70)
  {
    sub_1E060((_QWORD *)(a1 + 112));
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v70;
  swift_bridgeObjectRelease(v69, v31, v32, v33, v34, v35, v36, v37);
  v71 = *(_QWORD *)(a2 + 136);
  v72 = *(BAEventReporter **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v71;
  swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
  v80 = *(_QWORD *)(a2 + 152);
  v81 = *(BAEventReporter **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v80;
  swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v89 = *(_QWORD *)(a2 + 176);
  v90 = *(BAEventReporter **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v89;
  swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
  v98 = *(_QWORD *)(a2 + 192);
  v99 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v98;
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  v107 = *(_QWORD *)(a2 + 208);
  v108 = *(BAEventReporter **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v107;
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  v116 = *(_QWORD *)(a2 + 224);
  v117 = *(BAEventReporter **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v116;
  swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
  v125 = *(_QWORD *)(a2 + 240);
  v126 = *(BAEventReporter **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v125;
  swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
  v134 = *(_QWORD *)(a2 + 256);
  v135 = *(BAEventReporter **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v134;
  swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
LABEL_11:
  v147 = a3[7];
  v148 = a1 + v147;
  v149 = a2 + v147;
  v150 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 40))(v148, v149, v150);
  v151 = a3[8];
  v152 = a1 + v151;
  v153 = a2 + v151;
  v154 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 40))(v152, v153, v154);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenreExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CE618);
}

uint64_t sub_CE618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for GenreExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CE6C4);
}

uint64_t sub_CE6C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_CE760(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = "0";
  v5[1] = &unk_201368;
  v5[2] = &unk_201380;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GenreExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_CE850 + 4 * byte_20125A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_CE884 + 4 * byte_201255[v4]))();
}

uint64_t sub_CE884(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CE88C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCE894);
  return result;
}

uint64_t sub_CE8A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCE8A8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_CE8AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CE8B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenreExposureEvent.Model.CodingKeys()
{
  return &type metadata for GenreExposureEvent.Model.CodingKeys;
}

unint64_t sub_CE8D4()
{
  unint64_t result;

  result = qword_29CD18;
  if (!qword_29CD18)
  {
    result = swift_getWitnessTable(&unk_201434, &type metadata for GenreExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CD18);
  }
  return result;
}

unint64_t sub_CE91C()
{
  unint64_t result;

  result = qword_29CD20;
  if (!qword_29CD20)
  {
    result = swift_getWitnessTable("u\\\a", &type metadata for GenreExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CD20);
  }
  return result;
}

unint64_t sub_CE964()
{
  unint64_t result;

  result = qword_29CD28;
  if (!qword_29CD28)
  {
    result = swift_getWitnessTable(&unk_2013CC, &type metadata for GenreExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CD28);
  }
  return result;
}

uint64_t sub_CE9A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x74614465726E6567 && a2 == 0xE900000000000061)
  {
    v5 = 0xE900000000000061;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614465726E6567, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEC00000061746144)
  {
    v7 = 0xEC00000061746144;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void __swiftcall ReadingSessionData.init(percentCompletionStart:percentCompletionEnd:isFreeSample:deviceOrientation:)(BookAnalytics::ReadingSessionData *__return_ptr retstr, Swift::Float_optional *percentCompletionStart, Swift::Float_optional *percentCompletionEnd, Swift::Bool isFreeSample, BookAnalytics::DeviceOrientation_optional deviceOrientation)
{
  BookAnalytics::DeviceOrientation v5;

  v5 = *(_BYTE *)deviceOrientation.value;
  LODWORD(retstr->percentCompletionStart.value) = (_DWORD)percentCompletionStart;
  retstr->percentCompletionStart.is_nil = BYTE4(percentCompletionStart) & 1;
  LODWORD(retstr->percentCompletionEnd.value) = (_DWORD)percentCompletionEnd;
  retstr->percentCompletionEnd.is_nil = BYTE4(percentCompletionEnd) & 1;
  retstr->isFreeSample = isFreeSample;
  retstr->deviceOrientation.value = v5;
}

uint64_t ReadingSessionData.isFreeSample.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t ReadingSessionData.isFreeSample.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 13) = result;
  return result;
}

uint64_t (*SkipData.skipDirection.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void SkipData.skipActionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 14);
}

_BYTE *SkipData.skipActionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 14) = *result;
  return result;
}

uint64_t (*SkipData.skipActionType.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t sub_CEC6C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_CECA8 + 4 * byte_2014B0[a1]))(0xD000000000000016, 0x8000000000220860);
}

uint64_t sub_CECA8()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_CECC0()
{
  return 0x6153656572467369;
}

unint64_t sub_CECE0()
{
  return 0xD000000000000011;
}

uint64_t sub_CECFC()
{
  unsigned __int8 *v0;

  return sub_CEC6C(*v0);
}

uint64_t sub_CED04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_CF618(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_CED28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CF2DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CED50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CF2DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingSessionData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  _BYTE v25[2];
  char v26;
  char v27;
  char v28;

  v3 = sub_71B4(&qword_29CD30);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_BYTE *)v1 + 4);
  v21 = v1[2];
  v9 = *((unsigned __int8 *)v1 + 12);
  v19 = *((unsigned __int8 *)v1 + 13);
  v20 = v9;
  HIDWORD(v18) = *((unsigned __int8 *)v1 + 14);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_CF2DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingSessionData.CodingKeys, &type metadata for ReadingSessionData.CodingKeys, v12, v10, v11);
  v28 = 0;
  v25[1] = v8;
  v13 = v22;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7 | ((unint64_t)v8 << 32), &v28, v3);
  if (!v13)
  {
    v14 = BYTE4(v18);
    v15 = v19;
    v27 = 1;
    v23 = v20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21 | ((unint64_t)v20 << 32), &v27, v3);
    v26 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v26, v3);
    v25[0] = v14;
    v24 = 3;
    v16 = sub_CF320();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v24, v3, &type metadata for DeviceOrientation, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReadingSessionData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;

  v5 = sub_71B4(&qword_29CD48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_CF2DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingSessionData.CodingKeys, &type metadata for ReadingSessionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE3(v20) = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v20 + 3, v5);
    BYTE2(v20) = 1;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v20 + 2, v5);
    BYTE1(v20) = 2;
    v18 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v20 + 1, v5);
    v19 = 3;
    v15 = sub_CF364();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v20, &type metadata for DeviceOrientation, &v19, v5, &type metadata for DeviceOrientation, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v20;
    *(_DWORD *)a2 = v12;
    *(_BYTE *)(a2 + 4) = BYTE4(v12) & 1;
    *(_DWORD *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 12) = BYTE4(v13) & 1;
    *(_BYTE *)(a2 + 13) = v18 & 1;
    *(_BYTE *)(a2 + 14) = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_CF10C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReadingSessionData.init(from:)(a1, a2);
}

uint64_t sub_CF120(_QWORD *a1)
{
  return ReadingSessionData.encode(to:)(a1);
}

BOOL _s13BookAnalytics18ReadingSessionDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  float v2;
  int v3;
  int v4;
  char v5;
  int v6;
  _BOOL8 result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v2 = *(float *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 13);
  v4 = *(unsigned __int8 *)(a1 + 14);
  v5 = *(_BYTE *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 14);
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 4))
      return 0;
  }
  else
  {
    if (*(float *)a1 != *(float *)a2)
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 12) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 12) & 1) != 0)
      return 0;
    result = 0;
    if (v2 != *(float *)(a2 + 8))
      return result;
LABEL_12:
    if (((v3 ^ *(unsigned __int8 *)(a2 + 13)) & 1) != 0)
      return result;
    if (v4 == 3)
      return v6 == 3;
    if (v6 != 3)
    {
      v8 = 0x6E776F6E6B6E75;
      if (v4)
      {
        if (v4 == 1)
        {
          v9 = 0xE800000000000000;
          v10 = 0x7469617274726F70;
        }
        else
        {
          v10 = 0x70616373646E616CLL;
          v9 = 0xE900000000000065;
        }
      }
      else
      {
        v9 = 0xE700000000000000;
        v10 = 0x6E776F6E6B6E75;
      }
      if (*(_BYTE *)(a2 + 14))
      {
        if (v6 == 1)
        {
          v11 = 0xE800000000000000;
          v8 = 0x7469617274726F70;
        }
        else
        {
          v8 = 0x70616373646E616CLL;
          v11 = 0xE900000000000065;
        }
      }
      else
      {
        v11 = 0xE700000000000000;
      }
      if (v10 == v8 && v9 == v11)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        return 1;
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, v8, v11, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) != 0)
        return 1;
    }
    return 0;
  }
  result = 0;
  if (*(_BYTE *)(a2 + 12))
    goto LABEL_12;
  return result;
}

unint64_t sub_CF2DC()
{
  unint64_t result;

  result = qword_29CD38;
  if (!qword_29CD38)
  {
    result = swift_getWitnessTable(&unk_201668, &type metadata for ReadingSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CD38);
  }
  return result;
}

unint64_t sub_CF320()
{
  unint64_t result;

  result = qword_29CD40;
  if (!qword_29CD40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeviceOrientation, &type metadata for DeviceOrientation);
    atomic_store(result, (unint64_t *)&qword_29CD40);
  }
  return result;
}

unint64_t sub_CF364()
{
  unint64_t result;

  result = qword_29CD50;
  if (!qword_29CD50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeviceOrientation, &type metadata for DeviceOrientation);
    atomic_store(result, (unint64_t *)&qword_29CD50);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadingSessionData(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReadingSessionData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 15))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 13);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadingSessionData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 15) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 15) = 0;
    if (a2)
      *(_BYTE *)(result + 13) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReadingSessionData()
{
  return &type metadata for ReadingSessionData;
}

uint64_t storeEnumTagSinglePayload for ReadingSessionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_CF4C0 + 4 * byte_2014B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_CF4F4 + 4 * byte_2014B4[v4]))();
}

uint64_t sub_CF4F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CF4FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCF504);
  return result;
}

uint64_t sub_CF510(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCF518);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_CF51C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CF524(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingSessionData.CodingKeys()
{
  return &type metadata for ReadingSessionData.CodingKeys;
}

unint64_t sub_CF544()
{
  unint64_t result;

  result = qword_29CD58;
  if (!qword_29CD58)
  {
    result = swift_getWitnessTable(&unk_201640, &type metadata for ReadingSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CD58);
  }
  return result;
}

unint64_t sub_CF58C()
{
  unint64_t result;

  result = qword_29CD60;
  if (!qword_29CD60)
  {
    result = swift_getWitnessTable("i\\\a", &type metadata for ReadingSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CD60);
  }
  return result;
}

unint64_t sub_CF5D4()
{
  unint64_t result;

  result = qword_29CD68;
  if (!qword_29CD68)
  {
    result = swift_getWitnessTable(&unk_2015D8, &type metadata for ReadingSessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CD68);
  }
  return result;
}

uint64_t sub_CF618(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000016 && a2 == 0x8000000000220860)
  {
    v4 = 0x8000000000220860;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000000220860, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000000220880)
  {
    v6 = 0x8000000000220880;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000000220880, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x6153656572467369 && a2 == 0xEC000000656C706DLL)
  {
    v7 = 0xEC000000656C706DLL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6153656572467369, 0xEC000000656C706DLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000000002208B0)
  {
    swift_bridgeObjectRelease(0x80000000002208B0);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000002208B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_CF7D8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29CD70, &enum case for SessionGroup.default(_:));
}

uint64_t static CollectionAddEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295808, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29CD70, a1);
}

uint64_t sub_CF818(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29CD88, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static CollectionAddEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295810, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29CD88, a1);
}

uint64_t CollectionAddEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionAddEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionAddEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29CE10, (uint64_t)&nominal type descriptor for CollectionAddEvent);
}

uint64_t CollectionAddEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionAddEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionAddEvent.eventData.modify())()
{
  type metadata accessor for CollectionAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionAddEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for CollectionAddEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t CollectionAddEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionAddEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionAddEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29CEA0, (uint64_t)&nominal type descriptor for CollectionAddEvent.Model);
}

uint64_t CollectionAddEvent.Model.init(singleCollectionData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = v5;
  v6 = a3 + *(int *)(type metadata accessor for CollectionAddEvent.Model(0) + 20);
  v7 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t sub_CFA60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CFC1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CFA88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CFC1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionAddEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[2];
  int v21;

  v3 = v1;
  v5 = sub_71B4(&qword_29CDA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_CFC1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionAddEvent.Model.CodingKeys, &type metadata for CollectionAddEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 8);
  v13 = *(_DWORD *)(v3 + 16);
  v20[0] = *(_QWORD *)v3;
  v20[1] = v12;
  v21 = v13;
  HIBYTE(v19) = 0;
  v14 = sub_159A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, (char *)&v19 + 7, v5, &type metadata for SingleCollectionData, v14);
  if (!v2)
  {
    v15 = v3 + *(int *)(type metadata accessor for CollectionAddEvent.Model(0) + 20);
    LOBYTE(v20[0]) = 1;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_CFC1C()
{
  unint64_t result;

  result = qword_29CDA8;
  if (!qword_29CDA8)
  {
    result = swift_getWitnessTable(&unk_20186C, &type metadata for CollectionAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CDA8);
  }
  return result;
}

void CollectionAddEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  char v34;

  v27 = a2;
  v4 = type metadata accessor for EventData(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4);
  v28 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_29CDB0);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CollectionAddEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_CFC1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionAddEvent.Model.CodingKeys, &type metadata for CollectionAddEvent.Model.CodingKeys, v14, v13, v12);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v25 = v9;
    v26 = a1;
    v15 = v6;
    v16 = (uint64_t)v11;
    v18 = v28;
    v17 = v29;
    v19 = v30;
    v34 = 0;
    v20 = sub_1595C();
    v21 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v32, &type metadata for SingleCollectionData, &v34, v31, &type metadata for SingleCollectionData, v20);
    v22 = v32[1];
    v23 = v33;
    *(_QWORD *)v16 = v32[0];
    *(_QWORD *)(v16 + 8) = v22;
    *(_DWORD *)(v16 + 16) = v23;
    LOBYTE(v32[0]) = 1;
    v24 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, v32, v21, v19, v24);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v21);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v16 + *(int *)(v25 + 20), v18, v19);
    sub_CFEC8(v16, v27);
    sub_7DAC(v26);
    sub_CFF0C(v16);
  }
}

uint64_t sub_CFEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CollectionAddEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_CFF0C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CollectionAddEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_CFF48(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  CollectionAddEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_CFF5C(_QWORD *a1)
{
  return CollectionAddEvent.Model.encode(to:)(a1);
}

uint64_t sub_CFF70@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295808, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29CD70, (uint64_t)sub_CF7D8, a1);
}

uint64_t sub_CFF94@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295810, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29CD88, (uint64_t)sub_CF818, a1);
}

uint64_t getEnumTagSinglePayload for CollectionAddEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CFFC4);
}

uint64_t sub_CFFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_299498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CollectionAddEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D004C);
}

uint64_t sub_D004C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_299498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for CollectionAddEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D00DC);
}

uint64_t sub_D00DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CollectionAddEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D0164);
}

uint64_t sub_D0164(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_D01D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_201790;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionAddEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_D0298 + 4 * byte_2016C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_D02CC + 4 * byte_2016C0[v4]))();
}

uint64_t sub_D02CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D02D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD02DCLL);
  return result;
}

uint64_t sub_D02E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD02F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_D02F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D02FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionAddEvent.Model.CodingKeys()
{
  return &type metadata for CollectionAddEvent.Model.CodingKeys;
}

unint64_t sub_D031C()
{
  unint64_t result;

  result = qword_29CED8;
  if (!qword_29CED8)
  {
    result = swift_getWitnessTable(&unk_201844, &type metadata for CollectionAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CED8);
  }
  return result;
}

unint64_t sub_D0364()
{
  unint64_t result;

  result = qword_29CEE0;
  if (!qword_29CEE0)
  {
    result = swift_getWitnessTable(&unk_2017B4, &type metadata for CollectionAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CEE0);
  }
  return result;
}

unint64_t sub_D03AC()
{
  unint64_t result;

  result = qword_29CEE8;
  if (!qword_29CEE8)
  {
    result = swift_getWitnessTable(&unk_2017DC, &type metadata for CollectionAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CEE8);
  }
  return result;
}

BookAnalytics::PageTurnType_optional __swiftcall PageTurnType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::PageTurnType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267900, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PageTurnType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1819440483;
  if (*v0 != 1)
    v1 = 1701736302;
  if (*v0)
    return v1;
  else
    return 0x6564696C73;
}

uint64_t sub_D0490(char *a1, unsigned __int8 *a2)
{
  return sub_28D28(*a1, *a2);
}

unint64_t sub_D04A0()
{
  unint64_t result;

  result = qword_29CEF0;
  if (!qword_29CEF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageTurnType, &type metadata for PageTurnType);
    atomic_store(result, (unint64_t *)&qword_29CEF0);
  }
  return result;
}

Swift::Int sub_D04E4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 1819440483;
  if (v1 != 1)
    v2 = 1701736302;
  if (v1)
    v3 = v2;
  else
    v3 = 0x6564696C73;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_D0570(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 1819440483;
  if (*v1 != 1)
    v2 = 1701736302;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x6564696C73;
  if (*v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_D05D8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 1819440483;
  if (v2 != 1)
    v3 = 1701736302;
  if (v2)
    v4 = v3;
  else
    v4 = 0x6564696C73;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

BookAnalytics::PageTurnType_optional sub_D0660(Swift::String *a1)
{
  return PageTurnType.init(rawValue:)(*a1);
}

void sub_D066C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 1819440483;
  if (v2 != 1)
    v4 = 1701736302;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6564696C73;
  if (!v5)
    v3 = 0xE400000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_D06B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D082C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_D0714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D082C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for PageTurnType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_D07AC + 4 * byte_2018C1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_D07E0 + 4 * byte_2018BC[v4]))();
}

uint64_t sub_D07E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D07E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD07F0);
  return result;
}

uint64_t sub_D07FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD0804);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_D0808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D0810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageTurnType()
{
  return &type metadata for PageTurnType;
}

unint64_t sub_D082C()
{
  unint64_t result;

  result = qword_29CEF8;
  if (!qword_29CEF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageTurnType, &type metadata for PageTurnType);
    atomic_store(result, (unint64_t *)&qword_29CEF8);
  }
  return result;
}

uint64_t sub_D0870(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29CF00, &enum case for SessionGroup.default(_:));
}

uint64_t static WantListAddEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295818, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29CF00, a1);
}

uint64_t sub_D08B0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29CF18, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static WantListAddEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295820, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29CF18, a1);
}

uint64_t WantListAddEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WantListAddEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29CFA8, (uint64_t)&nominal type descriptor for WantListAddEvent);
}

uint64_t WantListAddEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WantListAddEvent.contentStoreData.modify())()
{
  type metadata accessor for WantListAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WantListAddEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WantListAddEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WantListAddEvent.contentExposureData.modify())()
{
  type metadata accessor for WantListAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WantListAddEvent.notificationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 28);
  v4 = sub_71B4(&qword_29CF30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WantListAddEvent.notificationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 28);
  v4 = sub_71B4(&qword_29CF30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WantListAddEvent.notificationData.modify())()
{
  type metadata accessor for WantListAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WantListAddEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 32);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WantListAddEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 32);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WantListAddEvent.upSellData.modify())()
{
  type metadata accessor for WantListAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WantListAddEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 36);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WantListAddEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 36);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WantListAddEvent.seriesData.modify())()
{
  type metadata accessor for WantListAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WantListAddEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 40);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WantListAddEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 40);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WantListAddEvent.suggestionData.modify())()
{
  type metadata accessor for WantListAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WantListAddEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WantListAddEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent(0) + 44);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WantListAddEvent.eventData.modify())()
{
  type metadata accessor for WantListAddEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WantListAddEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for WantListAddEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v6, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v6, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v6, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v6, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v2, v19);
}

uint64_t GiftEvent.Model.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_QWORD *)(v1 + 176);
  v4 = v1 + 168;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 56);
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(_QWORD *)(v4 + 72);
  v13 = *(_QWORD *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 88);
  v15 = *(_QWORD *)(v4 + 96);
  v16 = *(_QWORD *)(v4 + 104);
  v17 = *(_WORD *)(v4 + 116);
  v18 = *(_DWORD *)(v4 + 112);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_WORD *)(a1 + 116) = v17;
  *(_DWORD *)(a1 + 112) = v18;
  return sub_55F10(v2, v3, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t WantListAddEvent.Model.notificationData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[36];
  v3 = v1[37];
  v4 = v1[38];
  v5 = v1[39];
  v6 = v1[40];
  v7 = v1[41];
  v8 = v1[42];
  v9 = v1[43];
  v10 = v1[44];
  v11 = v1[45];
  v12 = v1[46];
  v13 = v1[47];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_D10BC(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_D10BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;

  if (a3)
  {
    v15 = result;
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }
  return result;
}

uint64_t WantListAddEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 400);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 384);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t WantListAddEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[51];
  v3 = v1[52];
  v4 = v1[53];
  v5 = v1[54];
  v6 = v1[55];
  v7 = v1[56];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

void WantListAddEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 456);
}

uint64_t WantListAddEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WantListAddEvent.Model(0) + 44);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WantListAddEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29D058, (uint64_t)&nominal type descriptor for WantListAddEvent.Model);
}

uint64_t WantListAddEvent.Model.init(contentData:contentStoreData:contentExposureData:notificationData:upSellData:seriesData:suggestionData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  char v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  char v19;
  int v20;
  char v21;
  char v22;
  int v23;
  char v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  v13 = *(_OWORD *)(a1 + 24);
  v14 = (_OWORD *)(a9 + 264);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_WORD *)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 60);
  v19 = *(_BYTE *)(a1 + 64);
  v20 = *(_DWORD *)(a1 + 68);
  v21 = *(_BYTE *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 77);
  v23 = *((_DWORD *)a2 + 16);
  v24 = *((_BYTE *)a2 + 68);
  v25 = *(_DWORD *)(a3 + 112);
  v26 = *(_WORD *)(a3 + 116);
  v27 = *(_QWORD *)(a5 + 16);
  v28 = *a7;
  *(_QWORD *)a9 = *(_QWORD *)a1;
  *(_QWORD *)(a9 + 8) = v11;
  *(_BYTE *)(a9 + 16) = v12;
  *(_OWORD *)(a9 + 24) = v13;
  *(_QWORD *)(a9 + 40) = v15;
  *(_QWORD *)(a9 + 48) = v16;
  *(_WORD *)(a9 + 56) = v17;
  *(_DWORD *)(a9 + 60) = v18;
  *(_BYTE *)(a9 + 64) = v19;
  *(_DWORD *)(a9 + 68) = v20;
  *(_BYTE *)(a9 + 72) = v21;
  *(_DWORD *)(a9 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a9 + 77) = v22;
  v29 = *a2;
  v30 = a2[1];
  *(_OWORD *)(a9 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a9 + 96) = v29;
  v31 = a2[2];
  v32 = a2[3];
  *(_OWORD *)(a9 + 112) = v30;
  *(_OWORD *)(a9 + 128) = v31;
  *(_OWORD *)(a9 + 144) = v32;
  *(_BYTE *)(a9 + 164) = v24;
  *(_DWORD *)(a9 + 160) = v23;
  v33 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a9 + 168) = *(_OWORD *)a3;
  *(_OWORD *)(a9 + 184) = v33;
  v34 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a9 + 200) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a9 + 216) = v34;
  v35 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a9 + 232) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a9 + 248) = v35;
  *v14 = *(_OWORD *)(a3 + 96);
  *(_WORD *)(a9 + 284) = v26;
  *(_DWORD *)(a9 + 280) = v25;
  v36 = a4[1];
  *(_OWORD *)(a9 + 288) = *a4;
  *(_OWORD *)(a9 + 304) = v36;
  v37 = a4[3];
  *(_OWORD *)(a9 + 320) = a4[2];
  *(_OWORD *)(a9 + 336) = v37;
  v38 = a4[5];
  *(_OWORD *)(a9 + 352) = a4[4];
  *(_OWORD *)(a9 + 368) = v38;
  *(_OWORD *)(a9 + 384) = *(_OWORD *)a5;
  *(_QWORD *)(a9 + 400) = v27;
  v39 = a6[1];
  v14[9] = *a6;
  v14[10] = v39;
  v14[11] = a6[2];
  *(_BYTE *)(a9 + 456) = v28;
  v40 = a9 + *(int *)(type metadata accessor for WantListAddEvent.Model(0) + 44);
  v41 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v40, a8, v41);
}

uint64_t sub_D1330(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_D136C + 4 * byte_2019E0[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_D136C()
{
  return 0xD000000000000010;
}

uint64_t sub_D13B4()
{
  return 0x61446C6C65537075;
}

uint64_t sub_D13E0()
{
  return 0x6974736567677573;
}

uint64_t sub_D1404()
{
  return 0x746144746E657665;
}

uint64_t sub_D1420()
{
  unsigned __int8 *v0;

  return sub_D1330(*v0);
}

uint64_t sub_D1428@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_D48C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_D144C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D1848();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D1474(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D1848();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WantListAddEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int16 v56;
  char v57;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29CF38);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v50[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_D1848();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WantListAddEvent.Model.CodingKeys, &type metadata for WantListAddEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v49 = *(_QWORD *)v4;
  *((_QWORD *)&v49 + 1) = v13;
  v50[0] = v14;
  *(_OWORD *)&v50[8] = v15;
  *(_QWORD *)&v50[24] = v16;
  *(_QWORD *)&v51 = v17;
  WORD4(v51) = v18;
  HIDWORD(v51) = v19;
  LOBYTE(v52) = v20;
  DWORD1(v52) = v21;
  BYTE8(v52) = v22;
  *(_DWORD *)((char *)&v52 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v52) = v23;
  v53 = *(_OWORD *)(v4 + 80);
  v57 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, &v57, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v49 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v50 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v50[16] = *(_OWORD *)(v4 + 128);
    v51 = v28;
    BYTE4(v52) = v26;
    LODWORD(v52) = v25;
    v57 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, &v57, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_DWORD *)(v4 + 280);
    v31 = *(_WORD *)(v4 + 284);
    v32 = *(_OWORD *)(v4 + 184);
    v49 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v50 = v32;
    v33 = *(_OWORD *)(v4 + 216);
    *(_OWORD *)&v50[16] = *(_OWORD *)(v4 + 200);
    v51 = v33;
    v34 = *(_OWORD *)(v4 + 248);
    v52 = *(_OWORD *)(v4 + 232);
    v53 = v34;
    v54 = *(_OWORD *)(v4 + 264);
    v56 = v31;
    v55 = v30;
    v57 = 2;
    v35 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, &v57, v6, &type metadata for ContentExposureData, v35);
    v36 = *(_OWORD *)(v4 + 304);
    v49 = *(_OWORD *)(v4 + 288);
    *(_OWORD *)v50 = v36;
    v37 = *(_OWORD *)(v4 + 336);
    *(_OWORD *)&v50[16] = *(_OWORD *)(v4 + 320);
    v51 = v37;
    v38 = *(_OWORD *)(v4 + 368);
    v52 = *(_OWORD *)(v4 + 352);
    v53 = v38;
    v57 = 3;
    v39 = sub_787D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, &v57, v6, &type metadata for NotificationData, v39);
    v40 = *(_QWORD *)(v4 + 400);
    v49 = *(_OWORD *)(v4 + 384);
    *(_QWORD *)v50 = v40;
    v57 = 4;
    v41 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, &v57, v6, &type metadata for UpSellData, v41);
    v42 = *(_OWORD *)(v4 + 424);
    v49 = *(_OWORD *)(v4 + 408);
    *(_OWORD *)v50 = v42;
    *(_OWORD *)&v50[16] = *(_OWORD *)(v4 + 440);
    v57 = 5;
    v43 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, &v57, v6, &type metadata for SeriesData, v43);
    LOBYTE(v49) = *(_BYTE *)(v4 + 456);
    v57 = 6;
    v44 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, &v57, v6, &type metadata for SuggestionData, v44);
    v45 = v4 + *(int *)(type metadata accessor for WantListAddEvent.Model(0) + 44);
    LOBYTE(v49) = 7;
    v46 = type metadata accessor for EventData(0);
    v47 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v45, &v49, v6, v46, v47);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_D1848()
{
  unint64_t result;

  result = qword_29CF40;
  if (!qword_29CF40)
  {
    result = swift_getWitnessTable(&unk_201C64, &type metadata for WantListAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29CF40);
  }
  return result;
}

void WantListAddEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  __int16 v44;
  _OWORD *v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  _OWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _OWORD *v63;
  _QWORD *v64;
  __int128 v65;
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  __int16 v72;
  int v73;
  char v74;

  v58 = a2;
  v4 = type metadata accessor for EventData(0);
  v59 = *(_QWORD *)(v4 - 8);
  v60 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_71B4(&qword_29CF48);
  v7 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WantListAddEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v12 + 264;
  v64 = a1;
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_D1848();
  v61 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WantListAddEvent.Model.CodingKeys, &type metadata for WantListAddEvent.Model.CodingKeys, v15, v13, v14);
  if (v2)
  {
    sub_7DAC(v64);
  }
  else
  {
    v57 = v10;
    v16 = v7;
    v17 = v6;
    v19 = v59;
    v18 = v60;
    v74 = 0;
    v20 = sub_1779C();
    v21 = v61;
    v22 = v62;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, &type metadata for ContentData, &v74, v62, &type metadata for ContentData, v20);
    v23 = *((_QWORD *)&v65 + 1);
    v24 = v66[0];
    v25 = *(_OWORD *)&v66[8];
    v26 = *(_QWORD *)&v66[24];
    v27 = v67;
    v28 = WORD4(v67);
    v29 = HIDWORD(v67);
    v30 = v68;
    v31 = DWORD1(v68);
    v32 = BYTE8(v68);
    v33 = BYTE13(v68);
    *(_QWORD *)v12 = v65;
    *((_QWORD *)v12 + 1) = v23;
    v12[16] = v24;
    *(_OWORD *)(v12 + 24) = v25;
    *((_QWORD *)v12 + 5) = v26;
    *((_QWORD *)v12 + 6) = v27;
    *((_WORD *)v12 + 28) = v28;
    *((_DWORD *)v12 + 15) = v29;
    v12[64] = v30;
    *((_DWORD *)v12 + 17) = v31;
    v12[72] = v32;
    *(_DWORD *)(v12 + 73) = *(_DWORD *)((char *)&v68 + 9);
    v12[77] = v33;
    *((_OWORD *)v12 + 5) = v69;
    v74 = 1;
    v34 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v65, &type metadata for ContentStoreData, &v74, v22, &type metadata for ContentStoreData, v34);
    v35 = v68;
    v36 = BYTE4(v68);
    v37 = *(_OWORD *)v66;
    *((_OWORD *)v12 + 6) = v65;
    *((_OWORD *)v12 + 7) = v37;
    v38 = v67;
    *((_OWORD *)v12 + 8) = *(_OWORD *)&v66[16];
    *((_OWORD *)v12 + 9) = v38;
    v12[164] = v36;
    *((_DWORD *)v12 + 40) = v35;
    v74 = 2;
    v39 = sub_57428();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v65, &type metadata for ContentExposureData, &v74, v22, &type metadata for ContentExposureData, v39);
    v40 = *(_OWORD *)v66;
    *(_OWORD *)(v12 + 168) = v65;
    *(_OWORD *)(v12 + 184) = v40;
    v41 = v67;
    *(_OWORD *)(v12 + 200) = *(_OWORD *)&v66[16];
    *(_OWORD *)(v12 + 216) = v41;
    v42 = v69;
    *(_OWORD *)(v12 + 232) = v68;
    v43 = v71;
    v44 = v72;
    *(_OWORD *)(v12 + 248) = v42;
    v45 = v63;
    *v63 = v70;
    *((_WORD *)v45 + 10) = v44;
    *((_DWORD *)v45 + 4) = v43;
    v74 = 3;
    v46 = sub_78790();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v65, &type metadata for NotificationData, &v74, v22, &type metadata for NotificationData, v46);
    v47 = *(_OWORD *)v66;
    *((_OWORD *)v12 + 18) = v65;
    *((_OWORD *)v12 + 19) = v47;
    v48 = v67;
    *((_OWORD *)v12 + 20) = *(_OWORD *)&v66[16];
    *((_OWORD *)v12 + 21) = v48;
    v49 = v69;
    *((_OWORD *)v12 + 22) = v68;
    *((_OWORD *)v12 + 23) = v49;
    v74 = 4;
    v50 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v65, &type metadata for UpSellData, &v74, v22, &type metadata for UpSellData, v50);
    v73 = 1;
    v51 = *(_QWORD *)v66;
    *((_OWORD *)v12 + 24) = v65;
    *((_QWORD *)v12 + 50) = v51;
    v74 = 5;
    v52 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v65, &type metadata for SeriesData, &v74, v22, &type metadata for SeriesData, v52);
    v53 = *(_OWORD *)v66;
    v54 = v63;
    v63[9] = v65;
    v54[10] = v53;
    v54[11] = *(_OWORD *)&v66[16];
    v74 = 6;
    v55 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v65, &type metadata for SuggestionData, &v74, v22, &type metadata for SuggestionData, v55);
    v12[456] = v65;
    LOBYTE(v65) = 7;
    v56 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, &v65, v22, v18, v56);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v22);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(&v12[*(int *)(v57 + 44)], v17, v18);
    sub_D1F80((uint64_t)v12, v58);
    sub_7DAC(v64);
    sub_D1FC4((uint64_t)v12);
  }
}

uint64_t sub_D1F10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;

  if (a3)
  {
    v14 = result;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a10);
    return swift_bridgeObjectRelease(a12);
  }
  return result;
}

uint64_t sub_D1F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WantListAddEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_D1FC4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WantListAddEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_D2000(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  WantListAddEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_D2014(_QWORD *a1)
{
  return WantListAddEvent.Model.encode(to:)(a1);
}

uint64_t sub_D2028@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295818, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29CF00, (uint64_t)sub_D0870, a1);
}

uint64_t sub_D204C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295820, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29CF18, (uint64_t)sub_D08B0, a1);
}

uint64_t sub_D2070@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v7, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v7, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v7, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v7, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v4, v20);
}

uint64_t *initializeBufferWithCopyOfBuffer for WantListAddEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v36);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2984D0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_29CF30);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  }
  return a1;
}

uint64_t destroy for WantListAddEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
}

uint64_t initializeWithCopy for WantListAddEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  return a1;
}

uint64_t assignWithCopy for WantListAddEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

uint64_t initializeWithTake for WantListAddEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  return a1;
}

uint64_t assignWithTake for WantListAddEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29CF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for WantListAddEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D2BFC);
}

uint64_t sub_D2BFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984D0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_29CF30);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296F68);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296310);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296F78);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v8 = sub_71B4(&qword_295D70);
                v12 = *(_QWORD *)(v8 - 8);
                v13 = a3[11];
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WantListAddEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D2D74);
}

uint64_t sub_D2D74(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984D0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_29CF30);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296F68);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296310);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296F78);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v10 = sub_71B4(&qword_295D70);
                v14 = *(_QWORD *)(v10 - 8);
                v15 = a4[11];
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_D2EE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[8];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v18[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
    if (v5 <= 0x3F)
    {
      v18[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2985D0, (uint64_t (*)(void))sub_57428, (uint64_t (*)(void))sub_56960, (uint64_t)&type metadata for ContentExposureData);
      if (v7 <= 0x3F)
      {
        v18[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_29CFB8, (uint64_t (*)(void))sub_78790, (uint64_t (*)(void))sub_787D8, (uint64_t)&type metadata for NotificationData);
        if (v9 <= 0x3F)
        {
          v18[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
          if (v11 <= 0x3F)
          {
            v18[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
            if (v13 <= 0x3F)
            {
              v18[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
              if (v15 <= 0x3F)
              {
                v18[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_8734(319);
                if (v17 <= 0x3F)
                {
                  v18[7] = *(_QWORD *)(v16 - 8) + 64;
                  swift_initStructMetadata(a1, 256, 8, v18, a1 + 16);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for WantListAddEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v22);
    return a1;
  }
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  v10 = *((_DWORD *)a2 + 15);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_DWORD *)(a1 + 60) = v10;
  *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  v11 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v11;
  v12 = a2[17];
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  if (!v12)
  {
    v23 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v23;
    *(_QWORD *)(a1 + 157) = *(uint64_t *)((char *)a2 + 157);
    v24 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v24;
    v16 = a2[22];
    if (v16)
      goto LABEL_4;
LABEL_7:
    v25 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v25;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    *(_QWORD *)(a1 + 278) = *(uint64_t *)((char *)a2 + 278);
    v26 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(a1 + 184) = v26;
    v27 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = v27;
    goto LABEL_8;
  }
  v13 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v13;
  v14 = a2[15];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = v14;
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = v12;
  v15 = a2[19];
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = v15;
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  v16 = a2[22];
  if (!v16)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = v16;
  v17 = a2[24];
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_QWORD *)(a1 + 192) = v17;
  v18 = a2[26];
  *(_QWORD *)(a1 + 200) = a2[25];
  *(_QWORD *)(a1 + 208) = v18;
  v19 = a2[28];
  *(_QWORD *)(a1 + 216) = a2[27];
  *(_QWORD *)(a1 + 224) = v19;
  v20 = a2[30];
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = v20;
  *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
  *(_BYTE *)(a1 + 252) = *((_BYTE *)a2 + 252);
  *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
  *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
  v21 = a2[34];
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = v21;
  *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
  *(_WORD *)(a1 + 284) = *((_WORD *)a2 + 142);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
LABEL_8:
  v28 = a2[38];
  if (v28)
  {
    v29 = a2[36];
    v30 = a2[37];
    *(_QWORD *)(a1 + 288) = v29;
    *(_QWORD *)(a1 + 296) = v30;
    *(_QWORD *)(a1 + 304) = v28;
    *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
    *(_WORD *)(a1 + 313) = *(_WORD *)((char *)a2 + 313);
    v31 = a2[41];
    *(_QWORD *)(a1 + 320) = a2[40];
    *(_QWORD *)(a1 + 328) = v31;
    v32 = a2[43];
    *(_QWORD *)(a1 + 336) = a2[42];
    *(_QWORD *)(a1 + 344) = v32;
    v33 = a2[45];
    *(_QWORD *)(a1 + 352) = a2[44];
    *(_QWORD *)(a1 + 360) = v33;
    v34 = a2[47];
    *(_QWORD *)(a1 + 368) = a2[46];
    *(_QWORD *)(a1 + 376) = v34;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
  }
  else
  {
    v35 = *((_OWORD *)a2 + 21);
    *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 336) = v35;
    v36 = *((_OWORD *)a2 + 23);
    *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
    *(_OWORD *)(a1 + 368) = v36;
    v37 = *((_OWORD *)a2 + 19);
    *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 304) = v37;
  }
  *(_WORD *)(a1 + 384) = *((_WORD *)a2 + 192);
  v38 = a2[50];
  *(_QWORD *)(a1 + 392) = a2[49];
  *(_QWORD *)(a1 + 400) = v38;
  v39 = a2[56];
  swift_bridgeObjectRetain(v38);
  if (v39 == 1)
  {
    v40 = *(_OWORD *)(a2 + 53);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
    *(_OWORD *)(a1 + 424) = v40;
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
  }
  else
  {
    *(_QWORD *)(a1 + 408) = a2[51];
    *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
    *(_QWORD *)(a1 + 424) = a2[53];
    *(_BYTE *)(a1 + 432) = *((_BYTE *)a2 + 432);
    *(_WORD *)(a1 + 433) = *(_WORD *)((char *)a2 + 433);
    *(_QWORD *)(a1 + 440) = a2[55];
    *(_QWORD *)(a1 + 448) = v39;
    swift_bridgeObjectRetain(v39);
  }
  *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
  v41 = *(int *)(a3 + 44);
  v42 = a1 + v41;
  v43 = (uint64_t)a2 + v41;
  v44 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
  return a1;
}

uint64_t destroy for WantListAddEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = a1[17];
  if (v4)
  {
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = a1[22];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v7 = a1[38];
  if (v7)
  {
    v8 = a1[36];
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(a1[41]);
    swift_bridgeObjectRelease(a1[43]);
    swift_bridgeObjectRelease(a1[45]);
    swift_bridgeObjectRelease(a1[47]);
  }
  swift_bridgeObjectRelease(a1[50]);
  v9 = a1[56];
  if (v9 != 1)
    swift_bridgeObjectRelease(v9);
  v10 = (char *)a1 + *(int *)(a2 + 44);
  v11 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for WantListAddEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v12;
    v13 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v11;
    v14 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v14;
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v14);
    v15 = *(_QWORD *)(a2 + 176);
    if (v15)
    {
LABEL_3:
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v15;
      v16 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v16;
      v17 = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v17;
      v18 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = v18;
      v19 = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v19;
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
      *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      v20 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v20;
      *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
      *(_WORD *)(a1 + 284) = *(_WORD *)(a2 + 284);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v22;
    v15 = *(_QWORD *)(a2 + 176);
    if (v15)
      goto LABEL_3;
  }
  v23 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v23;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
  v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
  v25 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v25;
LABEL_6:
  v26 = *(_QWORD *)(a2 + 304);
  if (v26)
  {
    v27 = *(_QWORD *)(a2 + 288);
    v28 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = v27;
    *(_QWORD *)(a1 + 296) = v28;
    *(_QWORD *)(a1 + 304) = v26;
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_WORD *)(a1 + 313) = *(_WORD *)(a2 + 313);
    v29 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = v29;
    v30 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v30;
    v31 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = v31;
    v32 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = v32;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v33;
    v34 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v34;
    v35 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v35;
  }
  *(_WORD *)(a1 + 384) = *(_WORD *)(a2 + 384);
  v36 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v36;
  v37 = *(_QWORD *)(a2 + 448);
  swift_bridgeObjectRetain(v36);
  if (v37 == 1)
  {
    v38 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v38;
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  }
  else
  {
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 433);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = v37;
    swift_bridgeObjectRetain(v37);
  }
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  v39 = *(int *)(a3 + 44);
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  return a1;
}

uint64_t assignWithCopy for WantListAddEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  BAEventReporter *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  uint64_t v56;
  BAEventReporter *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  uint64_t v65;
  BAEventReporter *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  uint64_t v74;
  BAEventReporter *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  __int128 *v96;
  BAEventReporter *v97;
  uint64_t v98;
  uint64_t v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  uint64_t v125;
  BAEventReporter *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  int64_t v131;
  int64_t v132;
  id v133;
  uint64_t v134;
  BAEventReporter *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  int64_t v140;
  int64_t v141;
  id v142;
  int v143;
  int v144;
  uint64_t v145;
  BAEventReporter *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  int64_t v151;
  int64_t v152;
  id v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _OWORD *v176;
  _OWORD *v177;
  uint64_t v178;
  BAEventReporter *v179;
  uint64_t v180;
  SEL v181;
  id v182;
  id v183;
  id v184;
  int64_t v185;
  int64_t v186;
  id v187;
  uint64_t v188;
  BAEventReporter *v189;
  SEL v190;
  id v191;
  id v192;
  id v193;
  int64_t v194;
  int64_t v195;
  id v196;
  uint64_t v197;
  BAEventReporter *v198;
  SEL v199;
  id v200;
  id v201;
  id v202;
  int64_t v203;
  int64_t v204;
  id v205;
  uint64_t v206;
  BAEventReporter *v207;
  SEL v208;
  id v209;
  id v210;
  id v211;
  int64_t v212;
  int64_t v213;
  id v214;
  uint64_t v215;
  BAEventReporter *v216;
  SEL v217;
  id v218;
  id v219;
  id v220;
  int64_t v221;
  int64_t v222;
  id v223;
  uint64_t v224;
  BAEventReporter *v225;
  SEL v226;
  id v227;
  id v228;
  id v229;
  int64_t v230;
  int64_t v231;
  id v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  BAEventReporter *v248;
  SEL v249;
  id v250;
  id v251;
  id v252;
  int64_t v253;
  int64_t v254;
  id v255;
  __int128 *v256;
  __int128 *v257;
  BAEventReporter *v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  SEL v266;
  id v267;
  id v268;
  id v269;
  int64_t v270;
  int64_t v271;
  id v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v44 = (_OWORD *)(a1 + 96);
  v45 = (_OWORD *)(a2 + 96);
  v46 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v46)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v47 = *(_QWORD *)(a2 + 104);
      v48 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v56 = *(_QWORD *)(a2 + 120);
      v57 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v65 = *(_QWORD *)(a2 + 136);
      v66 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v74 = *(_QWORD *)(a2 + 152);
      v75 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      v83 = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_DWORD *)(a1 + 160) = v83;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 96));
      *v44 = *v45;
      v90 = *(_OWORD *)(a2 + 128);
      v89 = *(_OWORD *)(a2 + 144);
      v91 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
      *(_OWORD *)(a1 + 128) = v90;
      *(_OWORD *)(a1 + 144) = v89;
      *(_OWORD *)(a1 + 112) = v91;
    }
  }
  else if (v46)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v84 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v84;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v85 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v85;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v86 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v86;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v87 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v87;
    v88 = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v88;
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v87);
  }
  else
  {
    *v44 = *v45;
    v92 = *(_OWORD *)(a2 + 112);
    v93 = *(_OWORD *)(a2 + 128);
    v94 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_OWORD *)(a1 + 128) = v93;
    *(_OWORD *)(a1 + 144) = v94;
    *(_OWORD *)(a1 + 112) = v92;
  }
  v95 = (_OWORD *)(a1 + 168);
  v96 = (__int128 *)(a2 + 168);
  v97 = *(BAEventReporter **)(a1 + 176);
  v98 = *(_QWORD *)(a2 + 176);
  if (v97)
  {
    if (v98)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v99 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 176) = v99;
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRelease(v97, v100, v101, v102, v103, v104, v105, v106);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v107 = *(_QWORD *)(a2 + 192);
      v108 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v107;
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v116 = *(_QWORD *)(a2 + 208);
      v117 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v116;
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v125 = *(_QWORD *)(a2 + 224);
      v126 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v125;
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v134 = *(_QWORD *)(a2 + 240);
      v135 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
      v143 = *(_DWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
      *(_DWORD *)(a1 + 248) = v143;
      v144 = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      *(_DWORD *)(a1 + 256) = v144;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v145 = *(_QWORD *)(a2 + 272);
      v146 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v145;
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRelease(v146, v147, v148, v149, v150, v151, v152, v153);
      v154 = *(_DWORD *)(a2 + 280);
      *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
      *(_DWORD *)(a1 + 280) = v154;
      *(_BYTE *)(a1 + 285) = *(_BYTE *)(a2 + 285);
    }
    else
    {
      sub_59D74((_QWORD *)(a1 + 168));
      v164 = *(_OWORD *)(a2 + 216);
      v166 = *v96;
      v165 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = v164;
      *v95 = v166;
      *(_OWORD *)(a1 + 184) = v165;
      v168 = *(_OWORD *)(a2 + 248);
      v167 = *(_OWORD *)(a2 + 264);
      v169 = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
      *(_OWORD *)(a1 + 248) = v168;
      *(_OWORD *)(a1 + 264) = v167;
      *(_OWORD *)(a1 + 232) = v169;
    }
  }
  else if (v98)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v155 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v155;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v156 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v156;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v157 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v157;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v158 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v158;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v159 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v159;
    v160 = *(_DWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
    *(_DWORD *)(a1 + 248) = v160;
    v161 = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    *(_DWORD *)(a1 + 256) = v161;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v162 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v162;
    v163 = *(_DWORD *)(a2 + 280);
    *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
    *(_DWORD *)(a1 + 280) = v163;
    *(_BYTE *)(a1 + 285) = *(_BYTE *)(a2 + 285);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v158);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v162);
  }
  else
  {
    v170 = *v96;
    v171 = *(_OWORD *)(a2 + 184);
    v172 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v172;
    *v95 = v170;
    *(_OWORD *)(a1 + 184) = v171;
    v173 = *(_OWORD *)(a2 + 232);
    v174 = *(_OWORD *)(a2 + 248);
    v175 = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
    *(_OWORD *)(a1 + 248) = v174;
    *(_OWORD *)(a1 + 264) = v175;
    *(_OWORD *)(a1 + 232) = v173;
  }
  v176 = (_OWORD *)(a1 + 288);
  v177 = (_OWORD *)(a2 + 288);
  v178 = *(_QWORD *)(a2 + 304);
  if (*(_QWORD *)(a1 + 304))
  {
    if (v178)
    {
      v179 = *(BAEventReporter **)(a1 + 288);
      v180 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 288) = v180;
      swift_bridgeObjectRetain(v180);
      swift_bridgeObjectRelease(v179, v181, v182, v183, v184, v185, v186, v187);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      v188 = *(_QWORD *)(a2 + 304);
      v189 = *(BAEventReporter **)(a1 + 304);
      *(_QWORD *)(a1 + 304) = v188;
      swift_bridgeObjectRetain(v188);
      swift_bridgeObjectRelease(v189, v190, v191, v192, v193, v194, v195, v196);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
      *(_BYTE *)(a1 + 314) = *(_BYTE *)(a2 + 314);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      v197 = *(_QWORD *)(a2 + 328);
      v198 = *(BAEventReporter **)(a1 + 328);
      *(_QWORD *)(a1 + 328) = v197;
      swift_bridgeObjectRetain(v197);
      swift_bridgeObjectRelease(v198, v199, v200, v201, v202, v203, v204, v205);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      v206 = *(_QWORD *)(a2 + 344);
      v207 = *(BAEventReporter **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v206;
      swift_bridgeObjectRetain(v206);
      swift_bridgeObjectRelease(v207, v208, v209, v210, v211, v212, v213, v214);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      v215 = *(_QWORD *)(a2 + 360);
      v216 = *(BAEventReporter **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = v215;
      swift_bridgeObjectRetain(v215);
      swift_bridgeObjectRelease(v216, v217, v218, v219, v220, v221, v222, v223);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      v224 = *(_QWORD *)(a2 + 376);
      v225 = *(BAEventReporter **)(a1 + 376);
      *(_QWORD *)(a1 + 376) = v224;
      swift_bridgeObjectRetain(v224);
      swift_bridgeObjectRelease(v225, v226, v227, v228, v229, v230, v231, v232);
    }
    else
    {
      sub_D4090((_QWORD *)(a1 + 288));
      v239 = *(_OWORD *)(a2 + 304);
      *v176 = *v177;
      *(_OWORD *)(a1 + 304) = v239;
      v240 = *(_OWORD *)(a2 + 368);
      v242 = *(_OWORD *)(a2 + 320);
      v241 = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = v240;
      *(_OWORD *)(a1 + 320) = v242;
      *(_OWORD *)(a1 + 336) = v241;
    }
  }
  else if (v178)
  {
    v233 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 288) = v233;
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    v234 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 304) = v234;
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
    *(_BYTE *)(a1 + 314) = *(_BYTE *)(a2 + 314);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    v235 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 328) = v235;
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    v236 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 344) = v236;
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    v237 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 360) = v237;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    v238 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 376) = v238;
    swift_bridgeObjectRetain(v233);
    swift_bridgeObjectRetain(v234);
    swift_bridgeObjectRetain(v235);
    swift_bridgeObjectRetain(v236);
    swift_bridgeObjectRetain(v237);
    swift_bridgeObjectRetain(v238);
  }
  else
  {
    v243 = *(_OWORD *)(a2 + 304);
    *v176 = *v177;
    *(_OWORD *)(a1 + 304) = v243;
    v244 = *(_OWORD *)(a2 + 320);
    v245 = *(_OWORD *)(a2 + 336);
    v246 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v246;
    *(_OWORD *)(a1 + 320) = v244;
    *(_OWORD *)(a1 + 336) = v245;
  }
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_BYTE *)(a1 + 385) = *(_BYTE *)(a2 + 385);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v247 = *(_QWORD *)(a2 + 400);
  v248 = *(BAEventReporter **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v247;
  swift_bridgeObjectRetain(v247);
  swift_bridgeObjectRelease(v248, v249, v250, v251, v252, v253, v254, v255);
  v256 = (__int128 *)(a1 + 408);
  v257 = (__int128 *)(a2 + 408);
  v258 = *(BAEventReporter **)(a1 + 448);
  v259 = *(_QWORD *)(a2 + 448);
  if (v258 == (BAEventReporter *)((char *)&dword_0 + 1))
  {
    if (v259 == 1)
    {
      v260 = *v257;
      v261 = *(_OWORD *)(a2 + 440);
      *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
      *(_OWORD *)(a1 + 440) = v261;
      *v256 = v260;
    }
    else
    {
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
      *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
      *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      v264 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 448) = v264;
      swift_bridgeObjectRetain(v264);
    }
  }
  else if (v259 == 1)
  {
    sub_19008(a1 + 408);
    v263 = *(_OWORD *)(a2 + 424);
    v262 = *(_OWORD *)(a2 + 440);
    *v256 = *v257;
    *(_OWORD *)(a1 + 424) = v263;
    *(_OWORD *)(a1 + 440) = v262;
  }
  else
  {
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
    *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    v265 = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 448) = v265;
    swift_bridgeObjectRetain(v265);
    swift_bridgeObjectRelease(v258, v266, v267, v268, v269, v270, v271, v272);
  }
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  v273 = *(int *)(a3 + 44);
  v274 = a1 + v273;
  v275 = a2 + v273;
  v276 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v276 - 8) + 24))(v274, v275, v276);
  return a1;
}

_QWORD *sub_D4090(_QWORD *a1)
{
  destroy for NotificationData(a1);
  return a1;
}

uint64_t initializeWithTake for WantListAddEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v9 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v9;
  v10 = *(_OWORD *)(a2 + 320);
  v11 = *(_OWORD *)(a2 + 336);
  v12 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v12;
  *(_OWORD *)(a1 + 320) = v10;
  *(_OWORD *)(a1 + 336) = v11;
  v13 = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = v13;
  v14 = *(_OWORD *)(a2 + 408);
  v15 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v15;
  *(_OWORD *)(a1 + 408) = v14;
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for WantListAddEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  uint64_t v47;
  BAEventReporter *v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  __int128 v76;
  __int128 v77;
  BAEventReporter *v78;
  uint64_t v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  BAEventReporter *v128;
  uint64_t v129;
  BAEventReporter *v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  int64_t v135;
  int64_t v136;
  id v137;
  uint64_t v138;
  BAEventReporter *v139;
  SEL v140;
  id v141;
  id v142;
  id v143;
  int64_t v144;
  int64_t v145;
  id v146;
  uint64_t v147;
  BAEventReporter *v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  int64_t v153;
  int64_t v154;
  id v155;
  uint64_t v156;
  BAEventReporter *v157;
  SEL v158;
  id v159;
  id v160;
  id v161;
  int64_t v162;
  int64_t v163;
  id v164;
  uint64_t v165;
  BAEventReporter *v166;
  SEL v167;
  id v168;
  id v169;
  id v170;
  int64_t v171;
  int64_t v172;
  id v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  BAEventReporter *v178;
  const char *v179;
  void *v180;
  void *v181;
  void *v182;
  int64_t v183;
  int64_t v184;
  void *v185;
  BAEventReporter *v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a2 + 136))
    {
      v47 = *(_QWORD *)(a2 + 104);
      v48 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v47;
      swift_bridgeObjectRelease(v48, v40, v41, v42, v43, v44, v45, v46);
      v49 = *(_QWORD *)(a2 + 120);
      v50 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v49;
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      v58 = *(_QWORD *)(a2 + 136);
      v59 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 152);
      v68 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      goto LABEL_6;
    }
    sub_59D40((_QWORD *)(a1 + 96));
  }
  v76 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v76;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v77 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v77;
LABEL_6:
  v78 = *(BAEventReporter **)(a1 + 176);
  if (v78)
  {
    v79 = *(_QWORD *)(a2 + 176);
    if (v79)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v79;
      swift_bridgeObjectRelease(v78, v40, v41, v42, v43, v44, v45, v46);
      v80 = *(_QWORD *)(a2 + 192);
      v81 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v80;
      swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
      v89 = *(_QWORD *)(a2 + 208);
      v90 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v89;
      swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
      v98 = *(_QWORD *)(a2 + 224);
      v99 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = v98;
      swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
      v107 = *(_QWORD *)(a2 + 240);
      v108 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v107;
      swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
      *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      v116 = *(_QWORD *)(a2 + 272);
      v117 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v116;
      swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
      *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
      *(_WORD *)(a1 + 284) = *(_WORD *)(a2 + 284);
      goto LABEL_11;
    }
    sub_59D74((_QWORD *)(a1 + 168));
  }
  v125 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v125;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
  v126 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v126;
  v127 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v127;
LABEL_11:
  if (*(_QWORD *)(a1 + 304))
  {
    if (*(_QWORD *)(a2 + 304))
    {
      v128 = *(BAEventReporter **)(a1 + 288);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRelease(v128, v40, v41, v42, v43, v44, v45, v46);
      v129 = *(_QWORD *)(a2 + 304);
      v130 = *(BAEventReporter **)(a1 + 304);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v129;
      swift_bridgeObjectRelease(v130, v131, v132, v133, v134, v135, v136, v137);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_WORD *)(a1 + 313) = *(_WORD *)(a2 + 313);
      v138 = *(_QWORD *)(a2 + 328);
      v139 = *(BAEventReporter **)(a1 + 328);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = v138;
      swift_bridgeObjectRelease(v139, v140, v141, v142, v143, v144, v145, v146);
      v147 = *(_QWORD *)(a2 + 344);
      v148 = *(BAEventReporter **)(a1 + 344);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = v147;
      swift_bridgeObjectRelease(v148, v149, v150, v151, v152, v153, v154, v155);
      v156 = *(_QWORD *)(a2 + 360);
      v157 = *(BAEventReporter **)(a1 + 360);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = v156;
      swift_bridgeObjectRelease(v157, v158, v159, v160, v161, v162, v163, v164);
      v165 = *(_QWORD *)(a2 + 376);
      v166 = *(BAEventReporter **)(a1 + 376);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 376) = v165;
      swift_bridgeObjectRelease(v166, v167, v168, v169, v170, v171, v172, v173);
      goto LABEL_16;
    }
    sub_D4090((_QWORD *)(a1 + 288));
  }
  v174 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v174;
  v175 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v175;
  v176 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v176;
LABEL_16:
  *(_WORD *)(a1 + 384) = *(_WORD *)(a2 + 384);
  v177 = *(_QWORD *)(a2 + 400);
  v178 = *(BAEventReporter **)(a1 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v177;
  swift_bridgeObjectRelease(v178, v40, v41, v42, v43, v44, v45, v46);
  v186 = *(BAEventReporter **)(a1 + 448);
  if (v186 != (BAEventReporter *)((char *)&dword_0 + 1))
  {
    v187 = *(_QWORD *)(a2 + 448);
    if (v187 != 1)
    {
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
      *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 433);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = v187;
      swift_bridgeObjectRelease(v186, v179, v180, v181, v182, v183, v184, v185);
      goto LABEL_21;
    }
    sub_19008(a1 + 408);
  }
  v188 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v188;
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_21:
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  v189 = a3[11];
  v190 = a1 + v189;
  v191 = a2 + v189;
  v192 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v192 - 8) + 40))(v190, v191, v192);
  return a1;
}

uint64_t getEnumTagSinglePayload for WantListAddEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D4578);
}

uint64_t sub_D4578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WantListAddEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D4600);
}

uint64_t sub_D4600(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t sub_D4674(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[1] = &unk_201B10;
  v4[2] = &unk_201B28;
  v4[3] = &unk_201B40;
  v4[4] = &unk_201B58;
  v4[5] = &unk_201B70;
  v4[6] = &unk_201B88;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WantListAddEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_D4770 + 4 * byte_2019ED[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_D47A4 + 4 * byte_2019E8[v4]))();
}

uint64_t sub_D47A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D47AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD47B4);
  return result;
}

uint64_t sub_D47C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD47C8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_D47CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D47D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WantListAddEvent.Model.CodingKeys()
{
  return &type metadata for WantListAddEvent.Model.CodingKeys;
}

unint64_t sub_D47F4()
{
  unint64_t result;

  result = qword_29D0A8;
  if (!qword_29D0A8)
  {
    result = swift_getWitnessTable(&unk_201C3C, &type metadata for WantListAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D0A8);
  }
  return result;
}

unint64_t sub_D483C()
{
  unint64_t result;

  result = qword_29D0B0;
  if (!qword_29D0B0)
  {
    result = swift_getWitnessTable("%Z\a", &type metadata for WantListAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D0B0);
  }
  return result;
}

unint64_t sub_D4884()
{
  unint64_t result;

  result = qword_29D0B8;
  if (!qword_29D0B8)
  {
    result = swift_getWitnessTable("\rZ\a", &type metadata for WantListAddEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D0B8);
  }
  return result;
}

uint64_t sub_D48C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021F220)
  {
    v8 = 0x800000000021F220;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F220, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000000220E40;
    if (a2 == 0x8000000000220E40)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000220E40, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v10 = 0xEA00000000006174;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v12 = 0xEE00617461446E6FLL;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

BookAnalytics::MessageType_optional __swiftcall MessageType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::MessageType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267968, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t MessageType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_D4CDC + 4 * byte_201CB4[*v0]))(0x7542656E694C6E69, 0xEC000000656C6262);
}

uint64_t sub_D4CDC()
{
  return 0x656C62627562;
}

uint64_t sub_D4CF0()
{
  return 0x6142656E694C6E69;
}

uint64_t sub_D4D10()
{
  return 0x72656E6E6162;
}

uint64_t sub_D4D24()
{
  return 0x7473616F74;
}

uint64_t sub_D4D38()
{
  return 0x4279616C7265766FLL;
}

uint64_t sub_D4D5C()
{
  return 0x6E776F6E6B6E75;
}

void sub_D4D74(char *a1)
{
  sub_2B43C(*a1);
}

unint64_t sub_D4D84()
{
  unint64_t result;

  result = qword_29D0C0;
  if (!qword_29D0C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_29D0C0);
  }
  return result;
}

void sub_D4DC8()
{
  char *v0;

  sub_1D2FE8(0, *v0);
}

void sub_D4DD4()
{
  __asm { BR              X10 }
}

uint64_t sub_D4E18(uint64_t a1)
{
  String.hash(into:)(a1, 0x656C62627562, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_D4EC4(uint64_t a1)
{
  char *v1;

  sub_1D2FE8(a1, *v1);
}

BookAnalytics::MessageType_optional sub_D4ECC(Swift::String *a1)
{
  return MessageType.init(rawValue:)(*a1);
}

uint64_t sub_D4ED8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_D4F10 + 4 * byte_201CC2[*v0]))();
}

void sub_D4F10(_QWORD *a1@<X8>)
{
  *a1 = 0x656C62627562;
  a1[1] = 0xE600000000000000;
}

void sub_D4F28(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "inLineBanner");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_D4F4C(_QWORD *a1@<X8>)
{
  *a1 = 0x72656E6E6162;
  a1[1] = 0xE600000000000000;
}

void sub_D4F64(_QWORD *a1@<X8>)
{
  *a1 = 0x7473616F74;
  a1[1] = 0xE500000000000000;
}

void sub_D4F7C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "overlayBubble");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_D4FA4(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_D4FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D5134();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_D501C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D5134();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_D50B4 + 4 * byte_201CCE[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_D50E8 + 4 * byte_201CC9[v4]))();
}

uint64_t sub_D50E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D50F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD50F8);
  return result;
}

uint64_t sub_D5104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD510CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_D5110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D5118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageType()
{
  return &type metadata for MessageType;
}

unint64_t sub_D5134()
{
  unint64_t result;

  result = qword_29D0C8;
  if (!qword_29D0C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_29D0C8);
  }
  return result;
}

void EventReporter.emitGoalStateEvent(using:readingGoalsData:booksGoalsData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *v4;
  BAEventReporter *v5;
  SEL v6;
  id v7;
  id v8;
  int64_t v9;
  id v10;
  BOOL v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  _BYTE v20[80];
  _BYTE v21[40];

  sub_1B1BC(a2, (uint64_t)v20, &qword_29D0D0);
  sub_1B1BC(a3, (uint64_t)v21, &qword_29D0D8);
  v4 = (BAEventReporter *)swift_allocObject(&unk_277778, 129, 7);
  sub_1B1BC((uint64_t)v20, (uint64_t)&v4[1], &qword_29D0D0);
  sub_1B1BC((uint64_t)v21, (uint64_t)&v4[6], &qword_29D0D8);
  v5 = (BAEventReporter *)swift_allocObject(&unk_2777A0, 32, 7);
  v5[1].super.isa = (Class)sub_D54C0;
  *(_QWORD *)v5[1].dataProviders = v4;
  swift_retain(v4);
  Tracker.transaction(block:)(sub_53E94, v5);
  swift_release(v4, v6, v7, v8, v9, v10, v11, v12);
  swift_release(v5, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_D526C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  int64_t v15;
  int64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  _OWORD v41[3];
  _OWORD v42[2];

  sub_1B1BC(a2, (uint64_t)v41, &qword_29D0D0);
  if (LOBYTE(v41[0]) != 3)
  {
    v37 = v41[2];
    v38[0] = v42[0];
    *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)((char *)v42 + 9);
    v35 = v41[0];
    v36 = v41[1];
    v4 = sub_71B4(&qword_299FD0);
    v5 = type metadata accessor for DataEventTrait(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v8 = (v7 + 32) & ~v7;
    v9 = swift_allocObject(v4, v8 + *(_QWORD *)(v6 + 72), v7 | 7);
    *(_OWORD *)(v9 + 16) = xmmword_1F5FF0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9 + v8, enum case for DataEventTrait.onlyOnce(_:), v5);
    v10 = sub_D5B90();
    AccessTracker.push<A>(data:traits:file:line:)(&v35, v9, 0xD00000000000006CLL, 0x8000000000220E60, 18, &type metadata for ReadingGoalsData, v10);
    swift_bridgeObjectRelease((BAEventReporter *)v9, v11, v12, v13, v14, v15, v16, v17);
  }
  sub_1B1BC(a3, (uint64_t)&v35, &qword_29D0D8);
  if ((v37 & 1) == 0)
  {
    v39 = v35;
    v40 = v36;
    v18 = sub_71B4(&qword_299FD0);
    v19 = type metadata accessor for DataEventTrait(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned __int8 *)(v20 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject(v18, v22 + *(_QWORD *)(v20 + 72), v21 | 7);
    *(_OWORD *)(v23 + 16) = xmmword_1F5FF0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v23 + v22, enum case for DataEventTrait.onlyOnce(_:), v19);
    v24 = sub_D5B4C();
    AccessTracker.push<A>(data:traits:file:line:)(&v39, v23, 0xD00000000000006CLL, 0x8000000000220E60, 21, &type metadata for BooksGoalsData, v24);
    swift_bridgeObjectRelease((BAEventReporter *)v23, v25, v26, v27, v28, v29, v30, v31);
  }
  v32 = type metadata accessor for GoalStateEvent(0);
  v33 = sub_7E10(&qword_29D110, type metadata accessor for GoalStateEvent, (uint64_t)&protocol conformance descriptor for GoalStateEvent);
  v39 = 0u;
  v40 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v32, 0, &v39, 0, 0, v32, v33);
  return sub_54960((uint64_t)&v39);
}

uint64_t sub_D54B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 129, 7);
}

uint64_t sub_D54C0(uint64_t a1)
{
  uint64_t v1;

  return sub_D526C(a1, v1 + 16, v1 + 96);
}

void EventReporter.emitReadingGoalReachedEvent(using:dailyGoalsReachedData:yearlyGoalsReachedData:)(uint64_t a1, char *a2, char *a3)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BAEventReporter *v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *a3;
  v6 = *((_QWORD *)a3 + 1);
  v7 = swift_allocObject(&unk_2777C8, 48, 7);
  *(_BYTE *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = v4;
  *(_BYTE *)(v7 + 32) = v5;
  *(_QWORD *)(v7 + 40) = v6;
  v8 = (BAEventReporter *)swift_allocObject(&unk_2777F0, 32, 7);
  v8[1].super.isa = (Class)sub_D59E8;
  *(_QWORD *)v8[1].dataProviders = v7;
  swift_retain(v7);
  Tracker.transaction(block:)(sub_54CC0, v8);
  swift_release((BAEventReporter *)v7, v9, v10, v11, v12, v13, v14, v15);
  swift_release(v8, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_D5584(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v37[2];

  LOBYTE(v37[0]) = a2;
  *((_QWORD *)&v37[0] + 1) = a3;
  v5 = sub_71B4(&qword_299FD0);
  v6 = type metadata accessor for DataEventTrait(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 72);
  v11 = v8 | 7;
  v12 = swift_allocObject(v5, v10, v8 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1F5FF0;
  v13 = enum case for DataEventTrait.onlyOnce(_:);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v14(v12 + v9, enum case for DataEventTrait.onlyOnce(_:), v6);
  v15 = sub_D5AC4();
  AccessTracker.push<A>(data:traits:file:line:)(v37, v12, 0xD00000000000006CLL, 0x8000000000220E60, 31, &type metadata for DailyGoalsReachedData, v15);
  swift_bridgeObjectRelease((BAEventReporter *)v12, v16, v17, v18, v19, v20, v21, v22);
  LOBYTE(v37[0]) = a4;
  *((_QWORD *)&v37[0] + 1) = a5;
  v23 = swift_allocObject(v5, v10, v11);
  *(_OWORD *)(v23 + 16) = xmmword_1F5FF0;
  v14(v23 + v9, v13, v6);
  v24 = sub_D5B08();
  AccessTracker.push<A>(data:traits:file:line:)(v37, v23, 0xD00000000000006CLL, 0x8000000000220E60, 32, &type metadata for YearlyGoalsReachedData, v24);
  swift_bridgeObjectRelease((BAEventReporter *)v23, v25, v26, v27, v28, v29, v30, v31);
  v32 = type metadata accessor for ReadingGoalReachedEvent(0);
  v33 = sub_7E10(&qword_29D108, type metadata accessor for ReadingGoalReachedEvent, (uint64_t)&protocol conformance descriptor for ReadingGoalReachedEvent);
  memset(v37, 0, sizeof(v37));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v32, 0, v37, 0, 0, v32, v33);
  return sub_54960((uint64_t)v37);
}

void EventReporter.emitReadingGoalChangedEvent(using:durationData:yearlyData:)(uint64_t a1, objc_class **a2, objc_class **a3)
{
  objc_class *v3;
  objc_class *v4;
  objc_class *v5;
  objc_class *v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a3;
  v6 = a3[1];
  v7 = (BAEventReporter *)swift_allocObject(&unk_277818, 48, 7);
  v7[1].super.isa = v3;
  *(_QWORD *)v7[1].dataProviders = v4;
  v7[2].super.isa = v5;
  *(_QWORD *)v7[2].dataProviders = v6;
  v8 = (BAEventReporter *)swift_allocObject(&unk_277840, 32, 7);
  v8[1].super.isa = (Class)sub_D5A0C;
  *(_QWORD *)v8[1].dataProviders = v7;
  swift_retain(v7);
  Tracker.transaction(block:)(sub_54CC0, v8);
  swift_release(v7, v9, v10, v11, v12, v13, v14, v15);
  swift_release(v8, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_D5808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  int64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  _OWORD v36[2];

  *(_QWORD *)&v35 = a4;
  *((_QWORD *)&v35 + 1) = a5;
  *(_QWORD *)&v36[0] = a2;
  *((_QWORD *)&v36[0] + 1) = a3;
  v5 = sub_71B4(&qword_299FD0);
  v6 = type metadata accessor for DataEventTrait(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 72);
  v11 = v8 | 7;
  v12 = swift_allocObject(v5, v10, v8 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1F5FF0;
  v13 = enum case for DataEventTrait.onlyOnce(_:);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v14(v12 + v9, enum case for DataEventTrait.onlyOnce(_:), v6);
  v15 = sub_D5A3C();
  AccessTracker.push<A>(data:traits:file:line:)(v36, v12, 0xD00000000000006CLL, 0x8000000000220E60, 41, &type metadata for ReadingGoalsDurationData, v15);
  swift_bridgeObjectRelease((BAEventReporter *)v12, v16, v17, v18, v19, v20, v21, v22);
  v36[0] = v35;
  v23 = swift_allocObject(v5, v10, v11);
  *(_OWORD *)(v23 + 16) = xmmword_1F5FF0;
  v14(v23 + v9, v13, v6);
  v24 = sub_D5A80();
  AccessTracker.push<A>(data:traits:file:line:)(v36, v23, 0xD00000000000006CLL, 0x8000000000220E60, 42, &type metadata for ReadingGoalYearlyData, v24);
  swift_bridgeObjectRelease((BAEventReporter *)v23, v25, v26, v27, v28, v29, v30, v31);
  v32 = type metadata accessor for ReadingGoalChangedEvent(0);
  v33 = sub_7E10(&qword_29D0F0, type metadata accessor for ReadingGoalChangedEvent, (uint64_t)&protocol conformance descriptor for ReadingGoalChangedEvent);
  memset(v36, 0, sizeof(v36));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v32, 0, v36, 0, 0, v32, v33);
  return sub_54960((uint64_t)v36);
}

uint64_t sub_D59D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_D59E8(uint64_t a1)
{
  uint64_t v1;

  return sub_D5584(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_D59FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_D5A0C(uint64_t a1)
{
  uint64_t *v1;

  return sub_D5808(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_D5A18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_D5A3C()
{
  unint64_t result;

  result = qword_29D0E0;
  if (!qword_29D0E0)
  {
    result = swift_getWitnessTable("]\r\a", &type metadata for ReadingGoalsDurationData);
    atomic_store(result, (unint64_t *)&qword_29D0E0);
  }
  return result;
}

unint64_t sub_D5A80()
{
  unint64_t result;

  result = qword_29D0E8;
  if (!qword_29D0E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReadingGoalYearlyData, &type metadata for ReadingGoalYearlyData);
    atomic_store(result, (unint64_t *)&qword_29D0E8);
  }
  return result;
}

unint64_t sub_D5AC4()
{
  unint64_t result;

  result = qword_29D0F8;
  if (!qword_29D0F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DailyGoalsReachedData, &type metadata for DailyGoalsReachedData);
    atomic_store(result, (unint64_t *)&qword_29D0F8);
  }
  return result;
}

unint64_t sub_D5B08()
{
  unint64_t result;

  result = qword_29D100;
  if (!qword_29D100)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for YearlyGoalsReachedData, &type metadata for YearlyGoalsReachedData);
    atomic_store(result, (unint64_t *)&qword_29D100);
  }
  return result;
}

unint64_t sub_D5B4C()
{
  unint64_t result;

  result = qword_29D118;
  if (!qword_29D118)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BooksGoalsData, &type metadata for BooksGoalsData);
    atomic_store(result, (unint64_t *)&qword_29D118);
  }
  return result;
}

unint64_t sub_D5B90()
{
  unint64_t result;

  result = qword_29D120;
  if (!qword_29D120)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ReadingGoalsData, &type metadata for ReadingGoalsData);
    atomic_store(result, (unint64_t *)&qword_29D120);
  }
  return result;
}

uint64_t static ContentSettingsData.data(bookmarkCount:noteCount:highlightCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t result;
  int v8;
  int v9;

  result = BARoundIntegerToSignificantFigures(a1, 2);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = BARoundIntegerToSignificantFigures(a2, 2);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = BARoundIntegerToSignificantFigures(a3, 2);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result <= 0x7FFFFFFF)
  {
    *a4 = v8;
    a4[1] = v9;
    a4[2] = result;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_D5C98(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29D128, &enum case for SessionGroup.default(_:));
}

uint64_t static GiftFailEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295828, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D128, a1);
}

uint64_t sub_D5CD8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29D140, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static GiftFailEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295830, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D140, a1);
}

uint64_t GiftFailEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GiftFailEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29D1E0, (uint64_t)&nominal type descriptor for GiftFailEvent);
}

uint64_t GiftFailEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftFailEvent.contentStoreData.modify())()
{
  type metadata accessor for GiftFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftFailEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GiftFailEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftFailEvent.contentExposureData.modify())()
{
  type metadata accessor for GiftFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftFailEvent.giftFailData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 28);
  v4 = sub_71B4(&qword_29D158);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GiftFailEvent.giftFailData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 28);
  v4 = sub_71B4(&qword_29D158);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftFailEvent.giftFailData.modify())()
{
  type metadata accessor for GiftFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftFailEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GiftFailEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GiftFailEvent.eventData.modify())()
{
  type metadata accessor for GiftFailEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GiftFailEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for GiftFailEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_29D158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

void GiftEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 286);
}

uint64_t GiftFailEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GiftFailEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GiftFailEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29D288, (uint64_t)&nominal type descriptor for GiftFailEvent.Model);
}

uint64_t GiftFailEvent.Model.init(contentData:contentStoreData:contentExposureData:giftFailData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_WORD *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 60);
  v15 = *(_BYTE *)(a1 + 64);
  v16 = *(_DWORD *)(a1 + 68);
  v17 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_QWORD *)(a6 + 8) = v8;
  *(_BYTE *)(a6 + 16) = v9;
  *(_OWORD *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 40) = v11;
  *(_QWORD *)(a6 + 48) = v12;
  *(_WORD *)(a6 + 56) = v13;
  *(_DWORD *)(a6 + 60) = v14;
  *(_BYTE *)(a6 + 64) = v15;
  *(_DWORD *)(a6 + 68) = v16;
  *(_BYTE *)(a6 + 72) = v17;
  v18 = *(_DWORD *)(a1 + 73);
  v19 = *a2;
  v20 = a2[1];
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a6 + 96) = v19;
  v21 = a2[2];
  v22 = a2[3];
  *(_OWORD *)(a6 + 112) = v20;
  *(_OWORD *)(a6 + 128) = v21;
  *(_OWORD *)(a6 + 144) = v22;
  v23 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a6 + 168) = *(_OWORD *)a3;
  *(_OWORD *)(a6 + 184) = v23;
  v24 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a6 + 200) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a6 + 216) = v24;
  v25 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a6 + 232) = *(_OWORD *)(a3 + 64);
  v26 = *(_BYTE *)(a1 + 77);
  LODWORD(v11) = *((_DWORD *)a2 + 16);
  LOBYTE(v12) = *((_BYTE *)a2 + 68);
  v27 = *(_DWORD *)(a3 + 112);
  LOWORD(v14) = *(_WORD *)(a3 + 116);
  v28 = *a4;
  *(_DWORD *)(a6 + 73) = v18;
  *(_BYTE *)(a6 + 77) = v26;
  *(_BYTE *)(a6 + 164) = v12;
  *(_DWORD *)(a6 + 160) = v11;
  *(_OWORD *)(a6 + 248) = v25;
  *(_OWORD *)(a6 + 264) = *(_OWORD *)(a3 + 96);
  *(_WORD *)(a6 + 284) = v14;
  *(_DWORD *)(a6 + 280) = v27;
  *(_BYTE *)(a6 + 286) = v28;
  v29 = a6 + *(int *)(type metadata accessor for GiftFailEvent.Model(0) + 32);
  v30 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a5, v30);
}

uint64_t sub_D62C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_D6304 + 4 * byte_201DF8[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_D6304()
{
  return 0xD000000000000010;
}

unint64_t sub_D6320()
{
  return 0xD000000000000013;
}

uint64_t sub_D6340()
{
  return 0x6C69614674666967;
}

uint64_t sub_D6360()
{
  return 0x746144746E657665;
}

uint64_t sub_D637C()
{
  unsigned __int8 *v0;

  return sub_D62C8(*v0);
}

uint64_t sub_D6384@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_D890C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_D63A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D66C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D63D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D66C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GiftFailEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int16 v48;
  char v49;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_29D160);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_D66C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GiftFailEvent.Model.CodingKeys, &type metadata for GiftFailEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v41 = *(_QWORD *)v4;
  *((_QWORD *)&v41 + 1) = v13;
  v42[0] = v14;
  *(_OWORD *)&v42[8] = v15;
  *(_QWORD *)&v42[24] = v16;
  *(_QWORD *)&v43 = v17;
  WORD4(v43) = v18;
  HIDWORD(v43) = v19;
  LOBYTE(v44) = v20;
  DWORD1(v44) = v21;
  BYTE8(v44) = v22;
  *(_DWORD *)((char *)&v44 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v44) = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v49 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v49, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v41 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v42 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 128);
    v43 = v28;
    BYTE4(v44) = v26;
    LODWORD(v44) = v25;
    v49 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v49, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_DWORD *)(v4 + 280);
    v31 = *(_WORD *)(v4 + 284);
    v32 = *(_OWORD *)(v4 + 184);
    v41 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v42 = v32;
    v33 = *(_OWORD *)(v4 + 216);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 200);
    v43 = v33;
    v34 = *(_OWORD *)(v4 + 248);
    v44 = *(_OWORD *)(v4 + 232);
    v45 = v34;
    v46 = *(_OWORD *)(v4 + 264);
    v48 = v31;
    v47 = v30;
    v49 = 2;
    v35 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v49, v6, &type metadata for ContentExposureData, v35);
    LOBYTE(v41) = *(_BYTE *)(v4 + 286);
    v49 = 3;
    v36 = sub_D6708();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v49, v6, &type metadata for GiftFailData, v36);
    v37 = v4 + *(int *)(type metadata accessor for GiftFailEvent.Model(0) + 32);
    LOBYTE(v41) = 4;
    v38 = type metadata accessor for EventData(0);
    v39 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v37, &v41, v6, v38, v39);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_D66C4()
{
  unint64_t result;

  result = qword_29D168;
  if (!qword_29D168)
  {
    result = swift_getWitnessTable("mY\a", &type metadata for GiftFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D168);
  }
  return result;
}

unint64_t sub_D6708()
{
  unint64_t result;

  result = qword_29D170;
  if (!qword_29D170)
  {
    result = swift_getWitnessTable("QH\a", &type metadata for GiftFailData);
    atomic_store(result, (unint64_t *)&qword_29D170);
  }
  return result;
}

void GiftFailEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  int v32;
  char v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int16 v41;
  _OWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int16 v60;
  char v61;

  v47 = a2;
  v48 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v5 = (uint64_t *)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_71B4(&qword_29D178);
  v6 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GiftFailEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v51 = a1;
  sub_7988(a1, v12);
  v14 = sub_D66C4();
  v49 = v8;
  v15 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GiftFailEvent.Model.CodingKeys, &type metadata for GiftFailEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v51);
  }
  else
  {
    v52 = v9;
    v16 = v48;
    v61 = 0;
    v17 = sub_1779C();
    v18 = v49;
    v19 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v53, &type metadata for ContentData, &v61, v50, &type metadata for ContentData, v17);
    v46 = v11 + 264;
    v20 = *((_QWORD *)&v53 + 1);
    v21 = v54[0];
    v22 = *(_OWORD *)&v54[8];
    v23 = *(_QWORD *)&v54[24];
    v24 = v55;
    v25 = WORD4(v55);
    v26 = HIDWORD(v55);
    v27 = v56;
    v28 = DWORD1(v56);
    v29 = BYTE8(v56);
    v30 = BYTE13(v56);
    *(_QWORD *)v11 = v53;
    *((_QWORD *)v11 + 1) = v20;
    v11[16] = v21;
    *(_OWORD *)(v11 + 24) = v22;
    *((_QWORD *)v11 + 5) = v23;
    *((_QWORD *)v11 + 6) = v24;
    *((_WORD *)v11 + 28) = v25;
    *((_DWORD *)v11 + 15) = v26;
    v11[64] = v27;
    *((_DWORD *)v11 + 17) = v28;
    v11[72] = v29;
    *(_DWORD *)(v11 + 73) = *(_DWORD *)((char *)&v56 + 9);
    v11[77] = v30;
    *((_OWORD *)v11 + 5) = v57;
    v61 = 1;
    v31 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v53, &type metadata for ContentStoreData, &v61, v19, &type metadata for ContentStoreData, v31);
    v32 = v56;
    v33 = BYTE4(v56);
    v34 = *(_OWORD *)v54;
    *((_OWORD *)v11 + 6) = v53;
    *((_OWORD *)v11 + 7) = v34;
    v35 = v55;
    *((_OWORD *)v11 + 8) = *(_OWORD *)&v54[16];
    *((_OWORD *)v11 + 9) = v35;
    v11[164] = v33;
    *((_DWORD *)v11 + 40) = v32;
    v61 = 2;
    v36 = sub_57428();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v53, &type metadata for ContentExposureData, &v61, v19, &type metadata for ContentExposureData, v36);
    v37 = *(_OWORD *)v54;
    *(_OWORD *)(v11 + 168) = v53;
    *(_OWORD *)(v11 + 184) = v37;
    v38 = v55;
    *(_OWORD *)(v11 + 200) = *(_OWORD *)&v54[16];
    *(_OWORD *)(v11 + 216) = v38;
    v39 = v57;
    *(_OWORD *)(v11 + 232) = v56;
    v40 = v59;
    v41 = v60;
    *(_OWORD *)(v11 + 248) = v39;
    v42 = v46;
    *v46 = v58;
    *((_WORD *)v42 + 10) = v41;
    *((_DWORD *)v42 + 4) = v40;
    v61 = 3;
    v43 = sub_D6C10();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v53, &type metadata for GiftFailData, &v61, v19, &type metadata for GiftFailData, v43);
    stru_108.segname[6] = v53;
    LOBYTE(v53) = 4;
    v44 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v53, v19, v16, v44);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v50);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v3 + 32))(*(int *)(v52 + 32), v5, v16);
    sub_D6C54(0, v47);
    sub_7DAC(v51);
    sub_D6C98(0);
  }
}

unint64_t sub_D6C10()
{
  unint64_t result;

  result = qword_29D180;
  if (!qword_29D180)
  {
    result = swift_getWitnessTable("iH\a", &type metadata for GiftFailData);
    atomic_store(result, (unint64_t *)&qword_29D180);
  }
  return result;
}

uint64_t sub_D6C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GiftFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_D6C98(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GiftFailEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_D6CD4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  GiftFailEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_D6CE8(_QWORD *a1)
{
  return GiftFailEvent.Model.encode(to:)(a1);
}

uint64_t sub_D6CFC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295828, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D128, (uint64_t)sub_D5C98, a1);
}

uint64_t sub_D6D20@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295830, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D140, (uint64_t)sub_D5CD8, a1);
}

uint64_t sub_D6D44@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_29D158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for GiftFailEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2984D0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_29D158);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for GiftFailEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_29D158);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for GiftFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for GiftFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for GiftFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for GiftFailEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for GiftFailEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D7504);
}

uint64_t sub_D7504(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984D0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_29D158);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GiftFailEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D7604);
}

uint64_t sub_D7604(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984D0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_29D158);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_D7700(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2985D0, (uint64_t (*)(void))sub_57428, (uint64_t (*)(void))sub_56960, (uint64_t)&type metadata for ContentExposureData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_29D1F0, (uint64_t (*)(void))sub_D6C10, (uint64_t (*)(void))sub_D6708, (uint64_t)&type metadata for GiftFailData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for GiftFailEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[17];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      v13 = a2[13];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v13;
      v14 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v12;
      v15 = a2[19];
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_QWORD *)(a1 + 152) = v15;
      *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
      *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v15);
      v16 = a2[22];
      if (v16)
      {
LABEL_4:
        *(_QWORD *)(a1 + 168) = a2[21];
        *(_QWORD *)(a1 + 176) = v16;
        v17 = a2[24];
        *(_QWORD *)(a1 + 184) = a2[23];
        *(_QWORD *)(a1 + 192) = v17;
        v18 = a2[26];
        *(_QWORD *)(a1 + 200) = a2[25];
        *(_QWORD *)(a1 + 208) = v18;
        v19 = a2[28];
        *(_QWORD *)(a1 + 216) = a2[27];
        *(_QWORD *)(a1 + 224) = v19;
        v20 = a2[30];
        *(_QWORD *)(a1 + 232) = a2[29];
        *(_QWORD *)(a1 + 240) = v20;
        *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
        *(_BYTE *)(a1 + 252) = *((_BYTE *)a2 + 252);
        *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
        *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
        v21 = a2[34];
        *(_QWORD *)(a1 + 264) = a2[33];
        *(_QWORD *)(a1 + 272) = v21;
        *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
        *(_WORD *)(a1 + 284) = *((_WORD *)a2 + 142);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
LABEL_8:
        *(_BYTE *)(a1 + 286) = *((_BYTE *)a2 + 286);
        v28 = *(int *)(a3 + 32);
        v29 = a1 + v28;
        v30 = (uint64_t)a2 + v28;
        v31 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        return a1;
      }
    }
    else
    {
      v23 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v23;
      *(_QWORD *)(a1 + 157) = *(uint64_t *)((char *)a2 + 157);
      v24 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v24;
      v16 = a2[22];
      if (v16)
        goto LABEL_4;
    }
    v25 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v25;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    *(_QWORD *)(a1 + 278) = *(uint64_t *)((char *)a2 + 278);
    v26 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(a1 + 184) = v26;
    v27 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = v27;
    goto LABEL_8;
  }
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v22);
  return a1;
}

uint64_t destroy for GiftFailEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = a1[17];
  if (v4)
  {
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = a1[22];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v7 = (char *)a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for GiftFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (!v11)
  {
    v21 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v22;
    v15 = *(_QWORD *)(a2 + 176);
    if (v15)
      goto LABEL_3;
LABEL_5:
    v23 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v23;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
    v24 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v24;
    v25 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v25;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v15 = *(_QWORD *)(a2 + 176);
  if (!v15)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v17;
  v18 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v18;
  v19 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v19;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v20 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v20;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_WORD *)(a1 + 284) = *(_WORD *)(a2 + 284);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
LABEL_6:
  *(_BYTE *)(a1 + 286) = *(_BYTE *)(a2 + 286);
  v26 = *(int *)(a3 + 32);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  return a1;
}

uint64_t assignWithCopy for GiftFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  BAEventReporter *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  BAEventReporter *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  BAEventReporter *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  int64_t v53;
  int64_t v54;
  id v55;
  uint64_t v56;
  BAEventReporter *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  uint64_t v65;
  BAEventReporter *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  int64_t v71;
  int64_t v72;
  id v73;
  uint64_t v74;
  BAEventReporter *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  int64_t v80;
  int64_t v81;
  id v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  __int128 *v96;
  BAEventReporter *v97;
  uint64_t v98;
  uint64_t v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  uint64_t v125;
  BAEventReporter *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  int64_t v131;
  int64_t v132;
  id v133;
  uint64_t v134;
  BAEventReporter *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  int64_t v140;
  int64_t v141;
  id v142;
  int v143;
  int v144;
  uint64_t v145;
  BAEventReporter *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  int64_t v151;
  int64_t v152;
  id v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v33 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v33;
  v34 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v34;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  v44 = (_OWORD *)(a1 + 96);
  v45 = (_OWORD *)(a2 + 96);
  v46 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v46)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v47 = *(_QWORD *)(a2 + 104);
      v48 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v56 = *(_QWORD *)(a2 + 120);
      v57 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v65 = *(_QWORD *)(a2 + 136);
      v66 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v74 = *(_QWORD *)(a2 + 152);
      v75 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      v83 = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_DWORD *)(a1 + 160) = v83;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 96));
      *v44 = *v45;
      v90 = *(_OWORD *)(a2 + 128);
      v89 = *(_OWORD *)(a2 + 144);
      v91 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
      *(_OWORD *)(a1 + 128) = v90;
      *(_OWORD *)(a1 + 144) = v89;
      *(_OWORD *)(a1 + 112) = v91;
    }
  }
  else if (v46)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v84 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v84;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v85 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v85;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v86 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v86;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v87 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v87;
    v88 = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v88;
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v87);
  }
  else
  {
    *v44 = *v45;
    v92 = *(_OWORD *)(a2 + 112);
    v93 = *(_OWORD *)(a2 + 128);
    v94 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_OWORD *)(a1 + 128) = v93;
    *(_OWORD *)(a1 + 144) = v94;
    *(_OWORD *)(a1 + 112) = v92;
  }
  v95 = (_OWORD *)(a1 + 168);
  v96 = (__int128 *)(a2 + 168);
  v97 = *(BAEventReporter **)(a1 + 176);
  v98 = *(_QWORD *)(a2 + 176);
  if (v97)
  {
    if (v98)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v99 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 176) = v99;
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRelease(v97, v100, v101, v102, v103, v104, v105, v106);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v107 = *(_QWORD *)(a2 + 192);
      v108 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v107;
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v116 = *(_QWORD *)(a2 + 208);
      v117 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v116;
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v125 = *(_QWORD *)(a2 + 224);
      v126 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v125;
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v134 = *(_QWORD *)(a2 + 240);
      v135 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
      v143 = *(_DWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
      *(_DWORD *)(a1 + 248) = v143;
      v144 = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      *(_DWORD *)(a1 + 256) = v144;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v145 = *(_QWORD *)(a2 + 272);
      v146 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v145;
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRelease(v146, v147, v148, v149, v150, v151, v152, v153);
      v154 = *(_DWORD *)(a2 + 280);
      *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
      *(_DWORD *)(a1 + 280) = v154;
      *(_BYTE *)(a1 + 285) = *(_BYTE *)(a2 + 285);
    }
    else
    {
      sub_59D74((_QWORD *)(a1 + 168));
      v164 = *(_OWORD *)(a2 + 216);
      v166 = *v96;
      v165 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = v164;
      *v95 = v166;
      *(_OWORD *)(a1 + 184) = v165;
      v168 = *(_OWORD *)(a2 + 248);
      v167 = *(_OWORD *)(a2 + 264);
      v169 = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
      *(_OWORD *)(a1 + 248) = v168;
      *(_OWORD *)(a1 + 264) = v167;
      *(_OWORD *)(a1 + 232) = v169;
    }
  }
  else if (v98)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v155 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v155;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v156 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v156;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v157 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v157;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v158 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v158;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v159 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v159;
    v160 = *(_DWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
    *(_DWORD *)(a1 + 248) = v160;
    v161 = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    *(_DWORD *)(a1 + 256) = v161;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v162 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v162;
    v163 = *(_DWORD *)(a2 + 280);
    *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
    *(_DWORD *)(a1 + 280) = v163;
    *(_BYTE *)(a1 + 285) = *(_BYTE *)(a2 + 285);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v158);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v162);
  }
  else
  {
    v170 = *v96;
    v171 = *(_OWORD *)(a2 + 184);
    v172 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v172;
    *v95 = v170;
    *(_OWORD *)(a1 + 184) = v171;
    v173 = *(_OWORD *)(a2 + 232);
    v174 = *(_OWORD *)(a2 + 248);
    v175 = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
    *(_OWORD *)(a1 + 248) = v174;
    *(_OWORD *)(a1 + 264) = v175;
    *(_OWORD *)(a1 + 232) = v173;
  }
  *(_BYTE *)(a1 + 286) = *(_BYTE *)(a2 + 286);
  v176 = *(int *)(a3 + 32);
  v177 = a1 + v176;
  v178 = a2 + v176;
  v179 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 24))(v177, v178, v179);
  return a1;
}

uint64_t initializeWithTake for GiftFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v9 = *(int *)(a3 + 32);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_BYTE *)(a1 + 286) = *(_BYTE *)(a2 + 286);
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for GiftFailEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  int64_t v45;
  void *v46;
  uint64_t v47;
  BAEventReporter *v48;
  uint64_t v49;
  BAEventReporter *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  int64_t v55;
  int64_t v56;
  id v57;
  uint64_t v58;
  BAEventReporter *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  int64_t v64;
  int64_t v65;
  id v66;
  uint64_t v67;
  BAEventReporter *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  int64_t v73;
  int64_t v74;
  id v75;
  __int128 v76;
  __int128 v77;
  BAEventReporter *v78;
  uint64_t v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  uint64_t v98;
  BAEventReporter *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  int64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  uint64_t v116;
  BAEventReporter *v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  int64_t v122;
  int64_t v123;
  id v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(BAEventReporter **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(BAEventReporter **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v22;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(BAEventReporter **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v31;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a2 + 136))
    {
      v47 = *(_QWORD *)(a2 + 104);
      v48 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v47;
      swift_bridgeObjectRelease(v48, v40, v41, v42, v43, v44, v45, v46);
      v49 = *(_QWORD *)(a2 + 120);
      v50 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v49;
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      v58 = *(_QWORD *)(a2 + 136);
      v59 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v58;
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = *(_QWORD *)(a2 + 152);
      v68 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v67;
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      goto LABEL_6;
    }
    sub_59D40((_QWORD *)(a1 + 96));
  }
  v76 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v76;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v77 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v77;
LABEL_6:
  v78 = *(BAEventReporter **)(a1 + 176);
  if (!v78)
  {
LABEL_10:
    v125 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v125;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
    v126 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v126;
    v127 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v127;
    goto LABEL_11;
  }
  v79 = *(_QWORD *)(a2 + 176);
  if (!v79)
  {
    sub_59D74((_QWORD *)(a1 + 168));
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v79;
  swift_bridgeObjectRelease(v78, v40, v41, v42, v43, v44, v45, v46);
  v80 = *(_QWORD *)(a2 + 192);
  v81 = *(BAEventReporter **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v80;
  swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
  v89 = *(_QWORD *)(a2 + 208);
  v90 = *(BAEventReporter **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v89;
  swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
  v98 = *(_QWORD *)(a2 + 224);
  v99 = *(BAEventReporter **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v98;
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  v107 = *(_QWORD *)(a2 + 240);
  v108 = *(BAEventReporter **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v107;
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v116 = *(_QWORD *)(a2 + 272);
  v117 = *(BAEventReporter **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v116;
  swift_bridgeObjectRelease(v117, v118, v119, v120, v121, v122, v123, v124);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_WORD *)(a1 + 284) = *(_WORD *)(a2 + 284);
LABEL_11:
  *(_BYTE *)(a1 + 286) = *(_BYTE *)(a2 + 286);
  v128 = a3[8];
  v129 = a1 + v128;
  v130 = a2 + v128;
  v131 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 40))(v129, v130, v131);
  return a1;
}

uint64_t getEnumTagSinglePayload for GiftFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D85DC);
}

uint64_t sub_D85DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GiftFailEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D8664);
}

uint64_t sub_D8664(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_D86D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = &unk_201F08;
  v4[2] = &unk_201F20;
  v4[3] = &unk_201F38;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GiftFailEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_D87B4 + 4 * byte_201E02[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_D87E8 + 4 * byte_201DFD[v4]))();
}

uint64_t sub_D87E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D87F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD87F8);
  return result;
}

uint64_t sub_D8804(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD880CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_D8810(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8818(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GiftFailEvent.Model.CodingKeys()
{
  return &type metadata for GiftFailEvent.Model.CodingKeys;
}

unint64_t sub_D8838()
{
  unint64_t result;

  result = qword_29D2D0;
  if (!qword_29D2D0)
  {
    result = swift_getWitnessTable(byte_201FEC, &type metadata for GiftFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D2D0);
  }
  return result;
}

unint64_t sub_D8880()
{
  unint64_t result;

  result = qword_29D2D8;
  if (!qword_29D2D8)
  {
    result = swift_getWitnessTable(byte_201F5C, &type metadata for GiftFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D2D8);
  }
  return result;
}

unint64_t sub_D88C8()
{
  unint64_t result;

  result = qword_29D2E0;
  if (!qword_29D2E0)
  {
    result = swift_getWitnessTable(byte_201F84, &type metadata for GiftFailEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D2E0);
  }
  return result;
}

uint64_t sub_D890C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021F220)
  {
    v8 = 0x800000000021F220;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F220, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6C69614674666967 && a2 == 0xEC00000061746144)
  {
    v9 = 0xEC00000061746144;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69614674666967, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::AltType_optional __swiftcall AltType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::AltType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267A30, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t AltType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65536E4965726F6DLL;
  if (*v0 != 1)
    v1 = 0x6E776F6E6B6E75;
  if (*v0)
    return v1;
  else
    return 0x65536E497478656ELL;
}

uint64_t sub_D8C10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_26480(*a1, *a2);
}

unint64_t sub_D8C20()
{
  unint64_t result;

  result = qword_29D2E8;
  if (!qword_29D2E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AltType, &type metadata for AltType);
    atomic_store(result, (unint64_t *)&qword_29D2E8);
  }
  return result;
}

Swift::Int sub_D8C64()
{
  unsigned __int8 *v0;
  unint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = 0xEC00000073656972;
  v2 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v3 = 0x65536E4965726F6DLL;
  v4 = 0xE700000000000000;
  if (v2 == 1)
    v4 = 0xEC00000073656972;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v2)
    v5 = v3;
  else
    v5 = 0x65536E497478656ELL;
  if (v2)
    v1 = v4;
  String.hash(into:)(v7, v5, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_D8D08(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x65536E4965726F6DLL;
  v3 = 0xE700000000000000;
  if (*v1 == 1)
    v3 = 0xEC00000073656972;
  else
    v2 = 0x6E776F6E6B6E75;
  if (*v1)
    v4 = v2;
  else
    v4 = 0x65536E497478656ELL;
  if (*v1)
    v5 = v3;
  else
    v5 = 0xEC00000073656972;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_D8D88(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v2 = 0xEC00000073656972;
  v3 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v4 = 0x65536E4965726F6DLL;
  v5 = 0xE700000000000000;
  if (v3 == 1)
    v5 = 0xEC00000073656972;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v3)
    v6 = v4;
  else
    v6 = 0x65536E497478656ELL;
  if (v3)
    v2 = v5;
  String.hash(into:)(v8, v6, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

BookAnalytics::AltType_optional sub_D8E28(Swift::String *a1)
{
  return AltType.init(rawValue:)(*a1);
}

void sub_D8E34(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0xEC00000073656972;
  v3 = *v1;
  v4 = 0x65536E4965726F6DLL;
  v5 = 0xE700000000000000;
  if (v3 == 1)
    v5 = 0xEC00000073656972;
  else
    v4 = 0x6E776F6E6B6E75;
  v6 = v3 == 0;
  if (*v1)
    v7 = v4;
  else
    v7 = 0x65536E497478656ELL;
  if (!v6)
    v2 = v5;
  *a1 = v7;
  a1[1] = v2;
}

uint64_t sub_D8E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D900C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_D8EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D900C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for AltType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_D8F8C + 4 * byte_202069[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_D8FC0 + 4 * byte_202064[v4]))();
}

uint64_t sub_D8FC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8FC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD8FD0);
  return result;
}

uint64_t sub_D8FDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD8FE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_D8FE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8FF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AltType()
{
  return &type metadata for AltType;
}

unint64_t sub_D900C()
{
  unint64_t result;

  result = qword_29D2F0;
  if (!qword_29D2F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AltType, &type metadata for AltType);
    atomic_store(result, (unint64_t *)&qword_29D2F0);
  }
  return result;
}

uint64_t sub_D9050(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29D2F8, &enum case for SessionGroup.default(_:));
}

uint64_t static ToolTipEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295838, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D2F8, a1);
}

uint64_t sub_D9090(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29D310, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ToolTipEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295840, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D310, a1);
}

uint64_t ToolTipEvent.toolTipData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29D328);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ToolTipEvent.toolTipData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29D328);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ToolTipEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolTipEvent(0) + 20);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ToolTipEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29D3B0, (uint64_t)&nominal type descriptor for ToolTipEvent);
}

uint64_t ToolTipEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolTipEvent(0) + 20);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ToolTipEvent.pageData.modify())()
{
  type metadata accessor for ToolTipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ToolTipEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolTipEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ToolTipEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolTipEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ToolTipEvent.eventData.modify())()
{
  type metadata accessor for ToolTipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ToolTipEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29D328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ToolTipEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
}

uint64_t ToolTipEvent.Model.pageData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_1AD88(v2, v3, v4, v5);
}

uint64_t ToolTipEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolTipEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ToolTipEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29D450, (uint64_t)&nominal type descriptor for ToolTipEvent.Model);
}

uint64_t ToolTipEvent.Model.init(toolTipData:pageData:eventData:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = v6;
  *(_QWORD *)(a4 + 24) = v7;
  v8 = a2[1];
  *(_OWORD *)(a4 + 32) = *a2;
  *(_OWORD *)(a4 + 48) = v8;
  v9 = a4 + *(int *)(type metadata accessor for ToolTipEvent.Model(0) + 24);
  v10 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
}

uint64_t sub_D9478()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6174614465676170;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x447069546C6F6F74;
}

uint64_t sub_D94E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_DAAC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_D9504(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D9700();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D952C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D9700();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ToolTipEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;

  v3 = v1;
  v5 = sub_71B4(&qword_29D330);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_D9700();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ToolTipEvent.Model.CodingKeys, &type metadata for ToolTipEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v23 = *v3;
  *(_QWORD *)&v24 = v12;
  *((_QWORD *)&v24 + 1) = v13;
  v22 = 0;
  v14 = sub_D9744();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for ToolTipData, v14);
  if (!v2)
  {
    v15 = v3[3];
    v23 = v3[2];
    v24 = v15;
    v22 = 1;
    v16 = sub_1B7AC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v22, v5, &type metadata for PageData, v16);
    v17 = (uint64_t)v3 + *(int *)(type metadata accessor for ToolTipEvent.Model(0) + 24);
    LOBYTE(v23) = 2;
    v18 = type metadata accessor for EventData(0);
    v19 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v23, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_D9700()
{
  unint64_t result;

  result = qword_29D338;
  if (!qword_29D338)
  {
    result = swift_getWitnessTable(byte_20234C, &type metadata for ToolTipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D338);
  }
  return result;
}

unint64_t sub_D9744()
{
  unint64_t result;

  result = qword_29D340;
  if (!qword_29D340)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ToolTipData, &type metadata for ToolTipData);
    atomic_store(result, (unint64_t *)&qword_29D340);
  }
  return result;
}

void ToolTipEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  char v38;

  v30 = a2;
  v31 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_71B4(&qword_29D348);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolTipEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v34 = a1;
  sub_7988(a1, v12);
  v14 = sub_D9700();
  v32 = v8;
  v15 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ToolTipEvent.Model.CodingKeys, &type metadata for ToolTipEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_7DAC(v34);
  }
  else
  {
    v29 = v9;
    v35 = v5;
    v16 = v11;
    v17 = v3;
    v18 = v31;
    v38 = 0;
    v19 = sub_D9A68();
    v21 = v32;
    v20 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, &type metadata for ToolTipData, &v38, v33, &type metadata for ToolTipData, v19);
    v22 = v37;
    v23 = (uint64_t)v16;
    *v16 = v36;
    v16[1] = v22;
    v38 = 1;
    v24 = sub_1C028();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, &type metadata for PageData, &v38, v20, &type metadata for PageData, v24);
    v25 = v37;
    v16[2] = v36;
    v16[3] = v25;
    LOBYTE(v36) = 2;
    v26 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v27 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v18, &v36, v20, v18, v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v23 + *(int *)(v29 + 24), v27, v18);
    sub_D9AAC(v23, v30);
    sub_7DAC(v34);
    sub_D9AF0(v23);
  }
}

unint64_t sub_D9A68()
{
  unint64_t result;

  result = qword_29D350;
  if (!qword_29D350)
  {
    result = swift_getWitnessTable("-H\a", &type metadata for ToolTipData);
    atomic_store(result, (unint64_t *)&qword_29D350);
  }
  return result;
}

uint64_t sub_D9AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolTipEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_D9AF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ToolTipEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_D9B2C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ToolTipEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_D9B40(_QWORD *a1)
{
  return ToolTipEvent.Model.encode(to:)(a1);
}

uint64_t sub_D9B54@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295838, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D2F8, (uint64_t)sub_D9050, a1);
}

uint64_t sub_D9B78@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295840, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D310, (uint64_t)sub_D9090, a1);
}

uint64_t sub_D9B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29D328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolTipEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_29D328);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ToolTipEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_29D328);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ToolTipEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29D328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ToolTipEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29D328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ToolTipEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29D328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ToolTipEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_29D328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolTipEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DA0D4);
}

uint64_t sub_DA0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_29D328);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A08);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ToolTipEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DA184);
}

uint64_t sub_DA184(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_29D328);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A08);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_DA230(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&unk_29D3C0, (uint64_t (*)(void))sub_D9A68, (uint64_t (*)(void))sub_D9744, (uint64_t)&type metadata for ToolTipData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolTipEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      v10 = a2[5];
      a1[4] = a2[4];
      a1[5] = v10;
      a1[6] = a2[6];
      a1[7] = v9;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v9);
    }
    else
    {
      v12 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v12;
    }
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for EventData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t destroy for ToolTipEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = a1[7];
  if (v4)
  {
    v5 = a1[5];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
  }
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for ToolTipEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[7];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    a1[6] = a2[6];
    a1[7] = v8;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v10;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

_QWORD *assignWithCopy for ToolTipEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  BAEventReporter *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  BAEventReporter *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  int64_t v21;
  int64_t v22;
  id v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BAEventReporter *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;

  *a1 = *a2;
  v6 = a2[1];
  v7 = (BAEventReporter *)a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  a1[2] = a2[2];
  v15 = a2[3];
  v16 = (BAEventReporter *)a1[3];
  a1[3] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  v24 = a1 + 4;
  v25 = a2 + 4;
  v26 = a2[7];
  if (a1[7])
  {
    if (v26)
    {
      a1[4] = a2[4];
      v27 = a2[5];
      v28 = (BAEventReporter *)a1[5];
      a1[5] = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
      a1[6] = a2[6];
      v36 = a2[7];
      v37 = (BAEventReporter *)a1[7];
      a1[7] = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      sub_1E02C((uint64_t)(a1 + 4));
      v47 = *((_OWORD *)a2 + 3);
      *v24 = *v25;
      *((_OWORD *)a1 + 3) = v47;
    }
  }
  else if (v26)
  {
    a1[4] = a2[4];
    v45 = a2[5];
    a1[5] = v45;
    a1[6] = a2[6];
    v46 = a2[7];
    a1[7] = v46;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
  }
  else
  {
    v48 = *((_OWORD *)a2 + 3);
    *v24 = *v25;
    *((_OWORD *)a1 + 3) = v48;
  }
  v49 = *(int *)(a3 + 24);
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  return a1;
}

_OWORD *initializeWithTake for ToolTipEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for ToolTipEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  uint64_t v11;
  BAEventReporter *v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  int64_t v26;
  int64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  BAEventReporter *v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(BAEventReporter **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease(v12, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(BAEventReporter **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_5;
  v29 = *(_QWORD *)(a2 + 56);
  if (!v29)
  {
    sub_1E02C(a1 + 32);
LABEL_5:
    v40 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v40;
    goto LABEL_6;
  }
  v30 = *(_QWORD *)(a2 + 40);
  v31 = *(BAEventReporter **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v30;
  swift_bridgeObjectRelease(v31, v22, v23, v24, v25, v26, v27, v28);
  v32 = *(BAEventReporter **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v29;
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
LABEL_6:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v42, v43, v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolTipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DA7AC);
}

uint64_t sub_DA7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ToolTipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DA834);
}

uint64_t sub_DA834(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_DA8A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = " ";
  v4[1] = &unk_202270;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ToolTipEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_DA970 + 4 * byte_202185[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_DA9A4 + 4 * byte_202180[v4]))();
}

uint64_t sub_DA9A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DA9AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xDA9B4);
  return result;
}

uint64_t sub_DA9C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xDA9C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_DA9CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DA9D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolTipEvent.Model.CodingKeys()
{
  return &type metadata for ToolTipEvent.Model.CodingKeys;
}

unint64_t sub_DA9F4()
{
  unint64_t result;

  result = qword_29D490;
  if (!qword_29D490)
  {
    result = swift_getWitnessTable(byte_202324, &type metadata for ToolTipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D490);
  }
  return result;
}

unint64_t sub_DAA3C()
{
  unint64_t result;

  result = qword_29D498;
  if (!qword_29D498)
  {
    result = swift_getWitnessTable(byte_202294, &type metadata for ToolTipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D498);
  }
  return result;
}

unint64_t sub_DAA84()
{
  unint64_t result;

  result = qword_29D4A0;
  if (!qword_29D4A0)
  {
    result = swift_getWitnessTable(byte_2022BC, &type metadata for ToolTipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D4A0);
  }
  return result;
}

uint64_t sub_DAAC8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x447069546C6F6F74 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x447069546C6F6F74, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_DAC44()
{
  return 0xD000000000000011;
}

uint64_t sub_DAC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_DB358(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_DAC88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_DAFB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_DACB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_DAFB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SuggestionData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29D4A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_DAFB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SuggestionData.CodingKeys, &type metadata for SuggestionData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_DAFF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for OdpSuggestionType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SuggestionData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29D4C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_DAFB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SuggestionData.CodingKeys, &type metadata for SuggestionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_DB03C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for OdpSuggestionType, v13, v5, &type metadata for OdpSuggestionType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_DAEF0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SuggestionData.init(from:)(a1, a2);
}

uint64_t sub_DAF04(_QWORD *a1)
{
  return SuggestionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics14SuggestionDataV2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0;
  BAEventReporter *v1;
  BAEventReporter *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  BAEventReporter *v12;
  char v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;
  id v20;

  v0 = OdpSuggestionType.rawValue.getter();
  v2 = v1;
  v3 = OdpSuggestionType.rawValue.getter();
  if (v0 == v3 && v2 == (BAEventReporter *)v4)
  {
    v13 = 1;
    v12 = v2;
  }
  else
  {
    v12 = (BAEventReporter *)v4;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
  }
  swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
  swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
  return v13 & 1;
}

unint64_t sub_DAFB4()
{
  unint64_t result;

  result = qword_29D4B0;
  if (!qword_29D4B0)
  {
    result = swift_getWitnessTable(byte_202540, &type metadata for SuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D4B0);
  }
  return result;
}

unint64_t sub_DAFF8()
{
  unint64_t result;

  result = qword_29D4B8;
  if (!qword_29D4B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OdpSuggestionType, &type metadata for OdpSuggestionType);
    atomic_store(result, (unint64_t *)&qword_29D4B8);
  }
  return result;
}

unint64_t sub_DB03C()
{
  unint64_t result;

  result = qword_29D4C8;
  if (!qword_29D4C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OdpSuggestionType, &type metadata for OdpSuggestionType);
    atomic_store(result, (unint64_t *)&qword_29D4C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OdpSuggestionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SuggestionData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_DB164 + 4 * byte_2023A1[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_DB198 + 4 * byte_20239C[v4]))();
}

uint64_t sub_DB198(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DB1A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xDB1A8);
  return result;
}

uint64_t sub_DB1B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xDB1BCLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_DB1C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DB1C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestionData()
{
  return &type metadata for SuggestionData;
}

uint64_t storeEnumTagSinglePayload for SuggestionData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_DB224 + 4 * byte_2023A6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_DB244 + 4 * byte_2023AB[v4]))();
}

_BYTE *sub_DB224(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_DB244(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_DB24C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_DB254(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_DB25C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_DB264(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SuggestionData.CodingKeys()
{
  return &type metadata for SuggestionData.CodingKeys;
}

unint64_t sub_DB284()
{
  unint64_t result;

  result = qword_29D4D0;
  if (!qword_29D4D0)
  {
    result = swift_getWitnessTable("AX\a", &type metadata for SuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D4D0);
  }
  return result;
}

unint64_t sub_DB2CC()
{
  unint64_t result;

  result = qword_29D4D8;
  if (!qword_29D4D8)
  {
    result = swift_getWitnessTable(byte_202488, &type metadata for SuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D4D8);
  }
  return result;
}

unint64_t sub_DB314()
{
  unint64_t result;

  result = qword_29D4E0;
  if (!qword_29D4E0)
  {
    result = swift_getWitnessTable(byte_2024B0, &type metadata for SuggestionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D4E0);
  }
  return result;
}

uint64_t sub_DB358(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000000220ED0)
  {
    swift_bridgeObjectRelease(0x8000000000220ED0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000220ED0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

void EventReporter.emitPurchaseAttemptEvent(using:contentData:purchaseData:upSellData:)(uint64_t a1, objc_class *a2, void *a3, objc_class *a4)
{
  BAEventReporter *v7;
  BAEventReporter *v8;
  objc_class *v9;
  objc_class *v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  int64_t v22;
  id v23;
  BOOL v24;
  id v25;

  v7 = (BAEventReporter *)swift_allocObject(&unk_277E18, 40, 7);
  v7[1].super.isa = a2;
  *(_QWORD *)v7[1].dataProviders = a3;
  v7[2].super.isa = a4;
  v8 = (BAEventReporter *)swift_allocObject(&unk_277E40, 32, 7);
  v8[1].super.isa = (Class)sub_DB878;
  *(_QWORD *)v8[1].dataProviders = v7;
  v9 = a4;
  swift_retain(v7);
  v10 = a2;
  v11 = a3;
  Tracker.transaction(block:)(sub_53E94, v8);
  swift_release(v7, v12, v13, v14, v15, v16, v17, v18);
  swift_release(v8, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_DB494(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BAEventReporter *v5;
  BAEventReporter *v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  BAEventReporter *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  BAEventReporter *v55;
  uint64_t v56;
  unint64_t v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  id v79;
  BAEventReporter *v80;
  uint64_t v81;
  unint64_t v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  int64_t v87;
  int64_t v88;
  id v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  int64_t v94;
  int64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t result;
  uint64_t v100;
  uint64_t v101;
  unsigned int v103;
  void (*v104)(uint64_t);
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  BAEventReporter *v109;
  uint64_t v110;
  BAEventReporter *v111;
  __int16 v112;
  int v113;
  char v114;
  int v115;
  char v116;
  int v117;
  char v118;
  uint64_t v119;
  BAEventReporter *v120;
  __int128 v121;
  __int128 v122;
  BAEventReporter *v123;
  uint64_t v124;
  BAEventReporter *v125;
  __int16 v126;
  int v127;
  char v128;
  int v129;
  char v130;
  int v131;
  char v132;
  uint64_t v133;
  BAEventReporter *v134;

  sub_AF27C((uint64_t)&v121);
  v5 = (BAEventReporter *)*((_QWORD *)&v121 + 1);
  v6 = v123;
  v7 = v125;
  v8 = v134;
  v106 = v121;
  LOBYTE(v107) = v122;
  v108 = *((_QWORD *)&v122 + 1);
  v109 = v123;
  v110 = v124;
  v111 = v125;
  v112 = v126;
  v113 = v127;
  v114 = v128;
  v115 = v129;
  v116 = v130;
  v117 = v131;
  v118 = v132;
  v119 = v133;
  v120 = v134;
  v9 = sub_71B4(&qword_299FD0);
  v10 = type metadata accessor for DataEventTrait(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v100 = v13 + *(_QWORD *)(v11 + 72);
  v101 = v9;
  v105 = v12 | 7;
  v14 = swift_allocObject(v9, v100, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1F5FF0;
  v103 = enum case for DataEventTrait.onlyOnce(_:);
  v104 = *(void (**)(uint64_t))(v11 + 104);
  v104(v14 + v13);
  v15 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v106, v14, 0xD00000000000006FLL, 0x8000000000221090, 21, &type metadata for ContentData, v15);
  swift_bridgeObjectRelease(v7, v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(v6, v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease(v5, v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease((BAEventReporter *)v14, v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(v8, v44, v45, v46, v47, v48, v49, v50);
  v51 = *(BAEventReporter **)(a3 + OBJC_IVAR___BAPurchaseData_purchaseAttemptID + 8);
  v52 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseMethod);
  if (v52 >= 3)
  {
    *(_QWORD *)&v121 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseMethod);
    swift_bridgeObjectRetain(v51);
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedPurchaseMethod, &v121, &type metadata for BridgedPurchaseMethod, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v53 = *(_BYTE *)(a3 + OBJC_IVAR___BAPurchaseData_isPreorder);
    v54 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_pricingParameters);
    v55 = *(BAEventReporter **)(a3 + OBJC_IVAR___BAPurchaseData_pricingParameters + 8);
    *(_QWORD *)&v121 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseAttemptID);
    *((_QWORD *)&v121 + 1) = v51;
    LOBYTE(v122) = v52;
    BYTE1(v122) = v53;
    *((_QWORD *)&v122 + 1) = v54;
    v123 = v55;
    v56 = swift_allocObject(v101, v100, v105);
    *(_OWORD *)(v56 + 16) = xmmword_1F5FF0;
    ((void (*)(uint64_t, _QWORD, uint64_t))v104)(v56 + v13, v103, v10);
    v57 = sub_DD4AC();
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v55);
    AccessTracker.push<A>(data:traits:file:line:)(&v121, v56, 0xD00000000000006FLL, 0x8000000000221090, 22, &type metadata for PurchaseData, v57);
    swift_bridgeObjectRelease(v55, v58, v59, v60, v61, v62, v63, v64);
    swift_bridgeObjectRelease(v51, v65, v66, v67, v68, v69, v70, v71);
    swift_bridgeObjectRelease((BAEventReporter *)v56, v72, v73, v74, v75, v76, v77, v78);
    if (a4)
    {
      v79 = a4;
      sub_B2504((uint64_t)&v121);
      v80 = (BAEventReporter *)v122;
      LOWORD(v106) = v121;
      *((_QWORD *)&v106 + 1) = *((_QWORD *)&v121 + 1);
      v107 = v122;
      v81 = swift_allocObject(v101, v100, v105);
      *(_OWORD *)(v81 + 16) = xmmword_1F5FF0;
      ((void (*)(uint64_t, _QWORD, uint64_t))v104)(v81 + v13, v103, v10);
      v82 = sub_9DA58();
      AccessTracker.push<A>(data:traits:file:line:)(&v106, v81, 0xD00000000000006FLL, 0x8000000000221090, 24, &type metadata for UpSellData, v82);
      swift_bridgeObjectRelease(v80, v83, v84, v85, v86, v87, v88, v89);

      swift_bridgeObjectRelease((BAEventReporter *)v81, v90, v91, v92, v93, v94, v95, v96);
    }
    v97 = type metadata accessor for PurchaseAttemptEvent(0);
    v98 = sub_7E10(&qword_29D568, type metadata accessor for PurchaseAttemptEvent, (uint64_t)&protocol conformance descriptor for PurchaseAttemptEvent);
    v121 = 0u;
    v122 = 0u;
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v97, 0, &v121, 0, 0, v97, v98);
    return sub_88F50((uint64_t)&v121, &qword_2983D0);
  }
  return result;
}

uint64_t sub_DB878(uint64_t a1)
{
  uint64_t v1;

  return sub_DB494(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t EventReporter.emitPurchaseSuccessEvent(using:contentData:purchaseData:upSellData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_DB9AC, 0, 0);
}

uint64_t sub_DB9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = sub_DBA54;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_DBA54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_999E0, 0, 0);
}

void sub_DBAB0(uint64_t a1, uint64_t a2, objc_class *a3, void *a4, objc_class *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  BAEventReporter *v15;
  objc_class *v16;
  objc_class *v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  int64_t v22;
  id v23;
  BOOL v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  int64_t v29;
  id v30;
  BOOL v31;
  id v32;
  uint64_t v33;

  v9 = sub_71B4(&qword_29AB38);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (BAEventReporter *)swift_allocObject(&unk_278020, v13 + v11, v12 | 7);
  v14[1].super.isa = a3;
  *(_QWORD *)v14[1].dataProviders = a4;
  v14[2].super.isa = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v14 + v13, (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v15 = (BAEventReporter *)swift_allocObject(&unk_278048, 32, 7);
  v15[1].super.isa = (Class)sub_DD5BC;
  *(_QWORD *)v15[1].dataProviders = v14;
  v16 = a5;
  swift_retain(v14);
  v17 = a3;
  v18 = a4;
  Tracker.transaction(block:)(sub_54CC0, v15);
  swift_release(v14, v19, v20, v21, v22, v23, v24, v25);
  swift_release(v15, v26, v27, v28, v29, v30, v31, v32);
}

uint64_t sub_DBBF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BAEventReporter *v5;
  BAEventReporter *v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  int64_t v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  int64_t v27;
  int64_t v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  int64_t v34;
  int64_t v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  BAEventReporter *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  BAEventReporter *v55;
  uint64_t v56;
  unint64_t v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  int64_t v62;
  int64_t v63;
  id v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  id v79;
  BAEventReporter *v80;
  uint64_t v81;
  unint64_t v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  int64_t v87;
  int64_t v88;
  id v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  int64_t v94;
  int64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v105;
  void (*v106)(uint64_t);
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  BAEventReporter *v111;
  uint64_t v112;
  BAEventReporter *v113;
  __int16 v114;
  int v115;
  char v116;
  int v117;
  char v118;
  int v119;
  char v120;
  uint64_t v121;
  BAEventReporter *v122;
  __int128 v123;
  __int128 v124;
  BAEventReporter *v125;
  uint64_t v126;
  BAEventReporter *v127;
  __int16 v128;
  int v129;
  char v130;
  int v131;
  char v132;
  int v133;
  char v134;
  uint64_t v135;
  BAEventReporter *v136;

  sub_AF27C((uint64_t)&v123);
  v5 = (BAEventReporter *)*((_QWORD *)&v123 + 1);
  v6 = v125;
  v7 = v127;
  v8 = v136;
  v108 = v123;
  LOBYTE(v109) = v124;
  v110 = *((_QWORD *)&v124 + 1);
  v111 = v125;
  v112 = v126;
  v113 = v127;
  v114 = v128;
  v115 = v129;
  v116 = v130;
  v117 = v131;
  v118 = v132;
  v119 = v133;
  v120 = v134;
  v121 = v135;
  v122 = v136;
  v9 = sub_71B4(&qword_299FD0);
  v10 = type metadata accessor for DataEventTrait(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v101 = v13 + *(_QWORD *)(v11 + 72);
  v102 = v9;
  v107 = v12 | 7;
  v14 = swift_allocObject(v9, v101, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1F5FF0;
  v105 = enum case for DataEventTrait.onlyOnce(_:);
  v103 = v10;
  v106 = *(void (**)(uint64_t))(v11 + 104);
  v106(v14 + v13);
  v15 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v108, v14, 0xD00000000000006FLL, 0x8000000000221090, 37, &type metadata for ContentData, v15);
  swift_bridgeObjectRelease(v7, v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(v6, v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease(v5, v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease((BAEventReporter *)v14, v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(v8, v44, v45, v46, v47, v48, v49, v50);
  v51 = *(BAEventReporter **)(a3 + OBJC_IVAR___BAPurchaseData_purchaseAttemptID + 8);
  v52 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseMethod);
  if (v52 >= 3)
  {
    *(_QWORD *)&v123 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseMethod);
    swift_bridgeObjectRetain(v51);
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedPurchaseMethod, &v123, &type metadata for BridgedPurchaseMethod, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v53 = *(_BYTE *)(a3 + OBJC_IVAR___BAPurchaseData_isPreorder);
    v54 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_pricingParameters);
    v55 = *(BAEventReporter **)(a3 + OBJC_IVAR___BAPurchaseData_pricingParameters + 8);
    *(_QWORD *)&v123 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseAttemptID);
    *((_QWORD *)&v123 + 1) = v51;
    LOBYTE(v124) = v52;
    BYTE1(v124) = v53;
    *((_QWORD *)&v124 + 1) = v54;
    v125 = v55;
    v56 = swift_allocObject(v102, v101, v107);
    *(_OWORD *)(v56 + 16) = xmmword_1F5FF0;
    ((void (*)(uint64_t, _QWORD, uint64_t))v106)(v56 + v13, v105, v10);
    v57 = sub_DD4AC();
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v55);
    AccessTracker.push<A>(data:traits:file:line:)(&v123, v56, 0xD00000000000006FLL, 0x8000000000221090, 38, &type metadata for PurchaseData, v57);
    swift_bridgeObjectRelease(v55, v58, v59, v60, v61, v62, v63, v64);
    swift_bridgeObjectRelease(v51, v65, v66, v67, v68, v69, v70, v71);
    swift_bridgeObjectRelease((BAEventReporter *)v56, v72, v73, v74, v75, v76, v77, v78);
    if (a4)
    {
      v79 = a4;
      sub_B2504((uint64_t)&v123);
      v80 = (BAEventReporter *)v124;
      LOWORD(v108) = v123;
      *((_QWORD *)&v108 + 1) = *((_QWORD *)&v123 + 1);
      v109 = v124;
      v81 = swift_allocObject(v102, v101, v107);
      *(_OWORD *)(v81 + 16) = xmmword_1F5FF0;
      ((void (*)(uint64_t, _QWORD, uint64_t))v106)(v81 + v13, v105, v103);
      v82 = sub_9DA58();
      AccessTracker.push<A>(data:traits:file:line:)(&v108, v81, 0xD00000000000006FLL, 0x8000000000221090, 40, &type metadata for UpSellData, v82);
      swift_bridgeObjectRelease(v80, v83, v84, v85, v86, v87, v88, v89);

      swift_bridgeObjectRelease((BAEventReporter *)v81, v90, v91, v92, v93, v94, v95, v96);
    }
    v97 = type metadata accessor for PurchaseSuccessEvent(0);
    v98 = sub_7E10(&qword_29D560, type metadata accessor for PurchaseSuccessEvent, (uint64_t)&protocol conformance descriptor for PurchaseSuccessEvent);
    v123 = 0u;
    v124 = 0u;
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v97, 0, &v123, 0, 0, v97, v98);
    sub_88F50((uint64_t)&v123, &qword_2983D0);
    v99 = sub_71B4(&qword_29AB38);
    return CheckedContinuation.resume(returning:)(v99, v99);
  }
  return result;
}

uint64_t sub_DC144(void *a1, void *a2, void *a3, void *a4, void *aBlock, void *a6)
{
  _QWORD *v6;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v6[5] = a4;
  v6[6] = a6;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  v6[7] = _Block_copy(aBlock);
  v12 = a4;
  v13 = a6;
  v14 = a1;
  v15 = a2;
  v16 = a3;
  return swift_task_switch(sub_DC1C8, 0, 0);
}

uint64_t sub_DC1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = sub_DC270;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_DC270()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_DC2CC, 0, 0);
}

uint64_t sub_DC2CC()
{
  uint64_t v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(void (***)(_QWORD))(v0 + 56);
  v3 = *(void **)(v0 + 32);
  v2 = *(void **)(v0 + 40);
  v5 = *(void **)(v0 + 16);
  v4 = *(void **)(v0 + 24);

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EventReporter.emitPurchaseFailEvent(using:contentData:purchaseData:upSellData:failData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_DC358, 0, 0);
}

uint64_t sub_DC358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 56) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_DC408;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_DC408()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_999E0, 0, 0);
}

void sub_DC464(uint64_t a1, uint64_t a2, objc_class *a3, void *a4, objc_class *a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BAEventReporter *v16;
  BAEventReporter *v17;
  id v18;
  objc_class *v19;
  id v20;
  objc_class *v21;
  SEL v22;
  id v23;
  id v24;
  int64_t v25;
  id v26;
  BOOL v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  int64_t v32;
  id v33;
  BOOL v34;
  id v35;
  _QWORD v36[2];

  v36[1] = a2;
  v11 = sub_71B4(&qword_29AB38);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 48) & ~v14;
  v16 = (BAEventReporter *)swift_allocObject(&unk_277FD0, v15 + v13, v14 | 7);
  v16[1].super.isa = a3;
  *(_QWORD *)v16[1].dataProviders = a4;
  v16[2].super.isa = a5;
  *(_QWORD *)v16[2].dataProviders = a6;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v16 + v15, (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v17 = (BAEventReporter *)swift_allocObject(&unk_277FF8, 32, 7);
  v17[1].super.isa = (Class)sub_DD464;
  *(_QWORD *)v17[1].dataProviders = v16;
  v18 = a6;
  swift_retain(v16);
  v19 = a3;
  v20 = a4;
  v21 = a5;
  Tracker.transaction(block:)(sub_54CC0, v17);
  swift_release(v16, v22, v23, v24, v25, v26, v27, v28);
  swift_release(v17, v29, v30, v31, v32, v33, v34, v35);
}

uint64_t sub_DC5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  BAEventReporter *v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  unint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  int64_t v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  int64_t v38;
  int64_t v39;
  id v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  int64_t v45;
  int64_t v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  int64_t v52;
  int64_t v53;
  id v54;
  BAEventReporter *v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  BAEventReporter *v60;
  uint64_t v61;
  unint64_t v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  int64_t v67;
  int64_t v68;
  id v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  int64_t v74;
  int64_t v75;
  id v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  int64_t v81;
  int64_t v82;
  id v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  BAEventReporter *v89;
  BAEventReporter *v90;
  BAEventReporter *v91;
  uint64_t v92;
  unint64_t v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  int64_t v98;
  int64_t v99;
  id v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  int64_t v105;
  int64_t v106;
  id v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  int64_t v112;
  int64_t v113;
  id v114;
  id v115;
  BAEventReporter *v116;
  uint64_t v117;
  unint64_t v118;
  SEL v119;
  id v120;
  id v121;
  id v122;
  int64_t v123;
  int64_t v124;
  id v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  int64_t v130;
  int64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t result;
  ValueMetadata *v137;
  BAEventReporter *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  BAEventReporter *v149;
  BAEventReporter *v150;
  BAEventReporter *v151;
  __int16 v152;
  int v153;
  char v154;
  int v155;
  char v156;
  int v157;
  char v158;
  uint64_t v159;
  BAEventReporter *v160;
  __int128 v161;
  __int128 v162;
  BAEventReporter *v163;
  BAEventReporter *v164;
  BAEventReporter *v165;
  __int16 v166;
  int v167;
  char v168;
  int v169;
  char v170;
  int v171;
  char v172;
  uint64_t v173;
  BAEventReporter *v174;

  sub_AF27C((uint64_t)&v161);
  v138 = (BAEventReporter *)*((_QWORD *)&v161 + 1);
  v6 = v163;
  v7 = v165;
  v8 = v174;
  v146 = v161;
  LOBYTE(v147) = v162;
  v148 = *((_QWORD *)&v162 + 1);
  v149 = v163;
  v150 = v164;
  v151 = v165;
  v152 = v166;
  v153 = v167;
  v154 = v168;
  v155 = v169;
  v156 = v170;
  v157 = v171;
  v158 = v172;
  v159 = v173;
  v160 = v174;
  v9 = sub_71B4(&qword_299FD0);
  v10 = type metadata accessor for DataEventTrait(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = v12 | 7;
  v145 = v9;
  v141 = v13 + *(_QWORD *)(v11 + 72);
  v15 = swift_allocObject(v9, v141, v12 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1F5FF0;
  v139 = v13;
  v16 = v15 + v13;
  v140 = enum case for DataEventTrait.onlyOnce(_:);
  v17 = v10;
  v18 = *(void (**)(uint64_t))(v11 + 104);
  v18(v16);
  v19 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v146, v15, 0xD00000000000006FLL, 0x8000000000221090, 56, &type metadata for ContentData, v19);
  swift_bridgeObjectRelease(v7, v20, v21, v22, v23, v24, v25, v26);
  swift_bridgeObjectRelease(v6, v27, v28, v29, v30, v31, v32, v33);
  swift_bridgeObjectRelease(v138, v34, v35, v36, v37, v38, v39, v40);
  swift_bridgeObjectRelease((BAEventReporter *)v15, v41, v42, v43, v44, v45, v46, v47);
  swift_bridgeObjectRelease(v8, v48, v49, v50, v51, v52, v53, v54);
  v55 = *(BAEventReporter **)(a3 + OBJC_IVAR___BAPurchaseData_purchaseAttemptID + 8);
  v56 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseMethod);
  if (v56 >= 3)
  {
    *(_QWORD *)&v161 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseMethod);
    swift_bridgeObjectRetain(v55);
    v137 = &type metadata for BridgedPurchaseMethod;
LABEL_11:
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v137, &v161, v137, &type metadata for Int);
    __break(1u);
    return result;
  }
  v57 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_purchaseAttemptID);
  v58 = *(_BYTE *)(a3 + OBJC_IVAR___BAPurchaseData_isPreorder);
  v59 = *(_QWORD *)(a3 + OBJC_IVAR___BAPurchaseData_pricingParameters);
  v60 = *(BAEventReporter **)(a3 + OBJC_IVAR___BAPurchaseData_pricingParameters + 8);
  *(_QWORD *)&v161 = v57;
  *((_QWORD *)&v161 + 1) = v55;
  LOBYTE(v162) = v56;
  BYTE1(v162) = v58;
  *((_QWORD *)&v162 + 1) = v59;
  v163 = v60;
  v144 = v14;
  v61 = swift_allocObject(v145, v141, v14);
  *(_OWORD *)(v61 + 16) = xmmword_1F5FF0;
  ((void (*)(uint64_t, _QWORD, uint64_t))v18)(v61 + v139, v140, v17);
  v62 = sub_DD4AC();
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v60);
  AccessTracker.push<A>(data:traits:file:line:)(&v161, v61, 0xD00000000000006FLL, 0x8000000000221090, 57, &type metadata for PurchaseData, v62);
  swift_bridgeObjectRelease(v60, v63, v64, v65, v66, v67, v68, v69);
  swift_bridgeObjectRelease(v55, v70, v71, v72, v73, v74, v75, v76);
  swift_bridgeObjectRelease((BAEventReporter *)v61, v77, v78, v79, v80, v81, v82, v83);
  v84 = *(_QWORD *)(a4 + OBJC_IVAR___BAPurchaseFailData_purchaseFailureReason);
  v85 = v145;
  if (v84 >= 3)
  {
    *(_QWORD *)&v161 = *(_QWORD *)(a4 + OBJC_IVAR___BAPurchaseFailData_purchaseFailureReason);
    v137 = &type metadata for BridgedPurchaseFailureReason;
    goto LABEL_11;
  }
  v86 = *(_QWORD *)(a4 + OBJC_IVAR___BAPurchaseFailData_errorCode);
  if (v86)
  {
    v87 = objc_msgSend(*(id *)(a4 + OBJC_IVAR___BAPurchaseFailData_errorCode), "intValue");
    v85 = v145;
  }
  else
  {
    v87 = 0;
  }
  v88 = *(_QWORD *)(a4 + OBJC_IVAR___BAPurchaseFailData_errorDescription);
  v89 = *(BAEventReporter **)(a4 + OBJC_IVAR___BAPurchaseFailData_errorDescription + 8);
  v90 = *(BAEventReporter **)(a4 + OBJC_IVAR___BAPurchaseFailData_errorDomain);
  v91 = *(BAEventReporter **)(a4 + OBJC_IVAR___BAPurchaseFailData_errorDomain + 8);
  LOBYTE(v161) = v84;
  DWORD1(v161) = v87;
  BYTE8(v161) = v86 == 0;
  *(_QWORD *)&v162 = v88;
  *((_QWORD *)&v162 + 1) = v89;
  v163 = v90;
  v164 = v91;
  v92 = swift_allocObject(v85, v141, v144);
  *(_OWORD *)(v92 + 16) = xmmword_1F5FF0;
  ((void (*)(uint64_t, _QWORD, uint64_t))v18)(v92 + v139, v140, v17);
  v93 = sub_DD4F0();
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v91);
  AccessTracker.push<A>(data:traits:file:line:)(&v161, v92, 0xD00000000000006FLL, 0x8000000000221090, 58, &type metadata for PurchaseFailData, v93);
  swift_bridgeObjectRelease(v91, v94, v95, v96, v97, v98, v99, v100);
  swift_bridgeObjectRelease(v89, v101, v102, v103, v104, v105, v106, v107);
  swift_bridgeObjectRelease((BAEventReporter *)v92, v108, v109, v110, v111, v112, v113, v114);
  if (a5)
  {
    v115 = a5;
    sub_B2504((uint64_t)&v161);
    v116 = (BAEventReporter *)v162;
    LOWORD(v146) = v161;
    *((_QWORD *)&v146 + 1) = *((_QWORD *)&v161 + 1);
    v147 = v162;
    v117 = swift_allocObject(v145, v141, v144);
    *(_OWORD *)(v117 + 16) = xmmword_1F5FF0;
    ((void (*)(uint64_t, _QWORD, uint64_t))v18)(v117 + v139, v140, v17);
    v118 = sub_9DA58();
    AccessTracker.push<A>(data:traits:file:line:)(&v146, v117, 0xD00000000000006FLL, 0x8000000000221090, 60, &type metadata for UpSellData, v118);
    swift_bridgeObjectRelease(v116, v119, v120, v121, v122, v123, v124, v125);

    swift_bridgeObjectRelease((BAEventReporter *)v117, v126, v127, v128, v129, v130, v131, v132);
  }
  v133 = type metadata accessor for PurchaseFailEvent(0);
  v134 = sub_7E10(&qword_29D558, type metadata accessor for PurchaseFailEvent, (uint64_t)&protocol conformance descriptor for PurchaseFailEvent);
  v161 = 0u;
  v162 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v133, 0, &v161, 0, 0, v133, v134);
  sub_88F50((uint64_t)&v161, &qword_2983D0);
  v135 = sub_71B4(&qword_29AB38);
  return CheckedContinuation.resume(returning:)(v135, v135);
}

uint64_t sub_DCC68(void *a1, void *a2, void *a3, void *a4, void *a5, void *aBlock, void *a7)
{
  _QWORD *v7;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v7[6] = a5;
  v7[7] = a7;
  v7[4] = a3;
  v7[5] = a4;
  v7[2] = a1;
  v7[3] = a2;
  v7[8] = _Block_copy(aBlock);
  v14 = a4;
  v15 = a5;
  v16 = a7;
  v17 = a1;
  v18 = a2;
  v19 = a3;
  return swift_task_switch(sub_DCCF4, 0, 0);
}

uint64_t sub_DCCF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 72) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_DCDA4;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_DCDA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_DCE00, 0, 0);
}

uint64_t sub_DCE00()
{
  uint64_t v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(void (***)(_QWORD))(v0 + 64);
  v3 = *(void **)(v0 + 40);
  v2 = *(void **)(v0 + 48);
  v5 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v6 = *(void **)(v0 + 16);

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_DCE74(uint64_t a1)
{
  uint64_t v1;

  sub_DBAB0(a1, *(_QWORD *)(v1 + 16), *(objc_class **)(v1 + 24), *(void **)(v1 + 32), *(objc_class **)(v1 + 40));
}

uint64_t sub_DCE84()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 56));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_DCED8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD *v9;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (void *)v0[7];
  v8 = (void *)v0[8];
  v9 = (_QWORD *)swift_task_alloc(dword_29D4FC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_88CD4;
  return ((uint64_t (*)(void *, void *, void *, void *, void *, void *, void *))((char *)&dword_29D4F8
                                                                                         + dword_29D4F8))(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_DCF6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_9DAA0;
  return v6();
}

uint64_t sub_DCFC4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_9DAA0;
  return v7();
}

uint64_t sub_DD01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_88F50(a1, &qword_29AAB0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_277EE0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_29D520, v16);
}

uint64_t sub_DD168(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_DD1CC;
  return v6(a1);
}

uint64_t sub_DD1CC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_DD218()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_DD23C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_29D51C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_88CD4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_29D518 + dword_29D518))(a1, v4);
}

void sub_DD2AC(uint64_t a1)
{
  uint64_t v1;

  sub_DC464(a1, *(_QWORD *)(v1 + 16), *(objc_class **)(v1 + 24), *(void **)(v1 + 32), *(objc_class **)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_DD2BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_DD308()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v7 = (void *)v0[6];
  v6 = (void *)v0[7];
  v8 = (_QWORD *)swift_task_alloc(dword_29D52C);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_9DAA0;
  return ((uint64_t (*)(void *, void *, void *, void *, void *, void *))((char *)&dword_29D528 + dword_29D528))(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_DD3A0()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_DD3D4()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_71B4(&qword_29AB38);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_DD464(uint64_t a1)
{
  uint64_t v1;

  sub_71B4(&qword_29AB38);
  return sub_DC5B8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

unint64_t sub_DD4AC()
{
  unint64_t result;

  result = qword_29D548;
  if (!qword_29D548)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PurchaseData, &type metadata for PurchaseData);
    atomic_store(result, (unint64_t *)&qword_29D548);
  }
  return result;
}

unint64_t sub_DD4F0()
{
  unint64_t result;

  result = qword_29D550;
  if (!qword_29D550)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PurchaseFailData, &type metadata for PurchaseFailData);
    atomic_store(result, (unint64_t *)&qword_29D550);
  }
  return result;
}

uint64_t sub_DD534()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_71B4(&qword_29AB38);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_DD5BC(uint64_t a1)
{
  uint64_t v1;

  sub_71B4(&qword_29AB38);
  return sub_DBBF4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

void __swiftcall CampaignData.init(campaignId:fCampaignToken:fAffiliateId:fItsCampaignToken:fItsCampaignGroup:)(BookAnalytics::CampaignData *__return_ptr retstr, Swift::String_optional campaignId, Swift::String_optional fCampaignToken, Swift::String_optional fAffiliateId, Swift::String_optional fItsCampaignToken, Swift::String_optional fItsCampaignGroup)
{
  retstr->campaignId = campaignId;
  retstr->fCampaignToken = fCampaignToken;
  retstr->fAffiliateId = fAffiliateId;
  retstr->fItsCampaignToken = fItsCampaignToken;
  retstr->fItsCampaignGroup = fItsCampaignGroup;
}

uint64_t sub_DD63C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_DD674 + 4 * byte_202590[a1]))(0x6E676961706D6163, 0xEA00000000006449);
}

uint64_t sub_DD674()
{
  return 0x676961706D614366;
}

uint64_t sub_DD698()
{
  return 0x61696C6966664166;
}

unint64_t sub_DD6B8()
{
  return 0xD000000000000011;
}

uint64_t sub_DD6E0()
{
  unsigned __int8 *v0;

  return sub_DD63C(*v0);
}

uint64_t sub_DD6E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_DE46C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_DD70C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_DDF08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_DD734(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_DDF08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CampaignData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v3 = sub_71B4(&qword_29D570);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v29 = v1[3];
  v30 = v9;
  v10 = v1[4];
  v27 = v1[5];
  v28 = v10;
  v11 = v1[6];
  v25 = v1[7];
  v26 = v11;
  v12 = v1[8];
  v23 = v1[9];
  v24 = v12;
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_DDF08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CampaignData.CodingKeys, &type metadata for CampaignData.CodingKeys, v15, v13, v14);
  v36 = 0;
  v16 = v31;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v7, &v36, v3);
  if (!v16)
  {
    v18 = v27;
    v17 = v28;
    v20 = v25;
    v19 = v26;
    v35 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v29, &v35, v3);
    v34 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v34, v3);
    v33 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v33, v3);
    v32 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v23, &v32, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void CampaignData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  int64_t v16;
  int64_t v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  int64_t v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  int64_t v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  BAEventReporter *v41;
  BAEventReporter *v42;
  uint64_t v43;
  BAEventReporter *v44;
  BAEventReporter *v45;
  uint64_t v46;
  BAEventReporter *v47;
  BAEventReporter *v48;
  uint64_t v49;
  BAEventReporter *v50;
  BAEventReporter *v51;
  uint64_t v52;
  BAEventReporter *v53;
  BAEventReporter *v54;
  void (*v55)(char *, uint64_t);
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t *v63;
  BAEventReporter *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  int64_t v76;
  int64_t v77;
  id v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  int64_t v83;
  int64_t v84;
  id v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  int64_t v90;
  int64_t v91;
  id v92;
  const char *v93;
  void *v94;
  void *v95;
  void *v96;
  int64_t v97;
  int64_t v98;
  void *v99;
  BAEventReporter *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  BAEventReporter *v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;

  v5 = sub_71B4(&qword_29D580);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_DDF08();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CampaignData.CodingKeys, &type metadata for CampaignData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(0, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(0, v26, v27, v28, v29, v30, v31, v32);
    swift_bridgeObjectRelease(0, v33, v34, v35, v36, v37, v38, v39);
    v100 = 0;
  }
  else
  {
    v113 = 0;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v113, v5);
    v42 = v41;
    v112 = 1;
    swift_bridgeObjectRetain(v41);
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v112, v5);
    v45 = v44;
    v106 = v43;
    v107 = v40;
    v111 = 2;
    swift_bridgeObjectRetain(v44);
    v108 = v45;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
    v48 = v47;
    v104 = v46;
    v105 = a2;
    v110 = 3;
    swift_bridgeObjectRetain(v47);
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v5);
    v51 = v50;
    v103 = v49;
    v109 = 4;
    swift_bridgeObjectRetain(v50);
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v5);
    v54 = v53;
    v55 = *(void (**)(char *, uint64_t))(v6 + 8);
    v102 = v52;
    v55(v8, v5);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRelease(0, v56, v57, v58, v59, v60, v61, v62);
    v63 = v105;
    v64 = v108;
    *v105 = v107;
    v63[1] = (uint64_t)v42;
    v63[2] = v106;
    v63[3] = (uint64_t)v64;
    v63[4] = v104;
    v63[5] = (uint64_t)v48;
    v63[6] = v103;
    v63[7] = (uint64_t)v51;
    v63[8] = v102;
    v63[9] = (uint64_t)v54;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v54, v65, v66, v67, v68, v69, v70, v71);
    swift_bridgeObjectRelease(v51, v72, v73, v74, v75, v76, v77, v78);
    swift_bridgeObjectRelease(v48, v79, v80, v81, v82, v83, v84, v85);
    swift_bridgeObjectRelease(v64, v86, v87, v88, v89, v90, v91, v92);
    v100 = v42;
  }
  swift_bridgeObjectRelease(v100, v93, v94, v95, v96, v97, v98, v99);
}

void sub_DDC90(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  CampaignData.init(from:)(a1, a2);
}

uint64_t sub_DDCA4(_QWORD *a1)
{
  return CampaignData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics12CampaignDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v10 = a1[7];
  v9 = a1[8];
  v11 = a1[9];
  v12 = a2[1];
  v13 = a2[2];
  v15 = a2[3];
  v14 = a2[4];
  v17 = a2[5];
  v16 = a2[6];
  v18 = a2[7];
  v19 = a2[8];
  v20 = a2[9];
  if (!v3)
  {
    if (v12)
      return 0;
    goto LABEL_8;
  }
  if (!v12)
    return 0;
  v21 = *a1;
  if (v21 == *a2 && v3 == v12)
    goto LABEL_8;
  v54 = v10;
  v56 = a2[7];
  v52 = a2[8];
  v53 = v8;
  v50 = v11;
  v51 = a2[9];
  v22 = v9;
  v23 = a2[6];
  v24 = v5;
  v25 = v7;
  v26 = a2[5];
  v27 = a2[4];
  v28 = a2[2];
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v3, *a2, v12, 0);
  v13 = v28;
  v14 = v27;
  v17 = v26;
  v7 = v25;
  v5 = v24;
  v16 = v23;
  v9 = v22;
  v11 = v50;
  v20 = v51;
  v19 = v52;
  v8 = v53;
  v10 = v54;
  v18 = v56;
  v30 = v29;
  result = 0;
  if ((v30 & 1) != 0)
  {
LABEL_8:
    if (v6)
    {
      if (!v15)
        return 0;
      if (v4 != v13 || v6 != v15)
      {
        v32 = v4;
        v33 = v6;
        v34 = v15;
        v55 = v9;
        v57 = v17;
        v35 = v16;
        v36 = v5;
        v37 = v7;
        v38 = v14;
        v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v13, v34, 0);
        v14 = v38;
        v9 = v55;
        v17 = v57;
        v7 = v37;
        v5 = v36;
        v16 = v35;
        v40 = v39;
        result = 0;
        if ((v40 & 1) == 0)
          return result;
      }
    }
    else if (v15)
    {
      return 0;
    }
    if (v7)
    {
      if (!v17)
        return 0;
      if (v5 != v14 || v7 != v17)
      {
        v41 = v18;
        v42 = v9;
        v43 = v16;
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v14, v17, 0);
        v16 = v43;
        v9 = v42;
        v18 = v41;
        v45 = v44;
        result = 0;
        if ((v45 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v10)
    {
      if (!v18)
        return 0;
      if (v8 != v16 || v10 != v18)
      {
        v46 = v18;
        v47 = v9;
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v16, v46, 0);
        v9 = v47;
        v49 = v48;
        result = 0;
        if ((v49 & 1) == 0)
          return result;
      }
    }
    else if (v18)
    {
      return 0;
    }
    if (v11)
    {
      if (v20
        && (v9 == v19 && v11 == v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v19, v20, 0) & 1) != 0))
      {
        return 1;
      }
    }
    else if (!v20)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_DDF08()
{
  unint64_t result;

  result = qword_29D578;
  if (!qword_29D578)
  {
    result = swift_getWitnessTable(byte_202740, &type metadata for CampaignData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D578);
  }
  return result;
}

unint64_t sub_DDF50()
{
  unint64_t result;

  result = qword_29D588;
  if (!qword_29D588)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CampaignData, &type metadata for CampaignData);
    atomic_store(result, (unint64_t *)&qword_29D588);
  }
  return result;
}

unint64_t sub_DDF98()
{
  unint64_t result;

  result = qword_29D590;
  if (!qword_29D590)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CampaignData, &type metadata for CampaignData);
    atomic_store(result, (unint64_t *)&qword_29D590);
  }
  return result;
}

uint64_t destroy for CampaignData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

_QWORD *initializeWithCopy for CampaignData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *assignWithCopy for CampaignData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for CampaignData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

_QWORD *assignWithTake for CampaignData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[9];
  v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CampaignData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CampaignData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CampaignData()
{
  return &type metadata for CampaignData;
}

uint64_t storeEnumTagSinglePayload for CampaignData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_DE314 + 4 * byte_20259A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_DE348 + 4 * byte_202595[v4]))();
}

uint64_t sub_DE348(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DE350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xDE358);
  return result;
}

uint64_t sub_DE364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xDE36CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_DE370(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DE378(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CampaignData.CodingKeys()
{
  return &type metadata for CampaignData.CodingKeys;
}

unint64_t sub_DE398()
{
  unint64_t result;

  result = qword_29D598;
  if (!qword_29D598)
  {
    result = swift_getWitnessTable(byte_202718, &type metadata for CampaignData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D598);
  }
  return result;
}

unint64_t sub_DE3E0()
{
  unint64_t result;

  result = qword_29D5A0;
  if (!qword_29D5A0)
  {
    result = swift_getWitnessTable("Q[\a", &type metadata for CampaignData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D5A0);
  }
  return result;
}

unint64_t sub_DE428()
{
  unint64_t result;

  result = qword_29D5A8;
  if (!qword_29D5A8)
  {
    result = swift_getWitnessTable("9[\a", &type metadata for CampaignData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D5A8);
  }
  return result;
}

uint64_t sub_DE46C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6E676961706D6163 && a2 == 0xEA00000000006449)
  {
    v5 = 0xEA00000000006449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E676961706D6163, 0xEA00000000006449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x676961706D614366 && a2 == 0xEE006E656B6F546ELL)
  {
    v7 = 0xEE006E656B6F546ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676961706D614366, 0xEE006E656B6F546ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x61696C6966664166 && a2 == 0xEC00000064496574)
  {
    v8 = 0xEC00000064496574;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61696C6966664166, 0xEC00000064496574, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x8000000000221100;
    if (a2 == 0x8000000000221100)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000221100, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000000221120)
  {
    swift_bridgeObjectRelease(0x8000000000221120);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000000221120, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_DE6C4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29D5B0, &enum case for SessionGroup.default(_:));
}

uint64_t static PredictiveSearchSuggestionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295848, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D5B0, a1);
}

uint64_t sub_DE704(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29D5C8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PredictiveSearchSuggestionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295850, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D5C8, a1);
}

uint64_t PredictiveSearchSuggestionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t PredictiveSearchSuggestionEvent.Model.init(eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_DE7C8()
{
  return 0x746144746E657665;
}

uint64_t sub_DE7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    result = swift_bridgeObjectRelease(0xE900000000000061);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_DE884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_DE9DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_DE8AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_DE9DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PredictiveSearchSuggestionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_71B4(&qword_29D5E0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_DE9DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys, &type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for EventData(0);
  v12 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_DE9DC()
{
  unint64_t result;

  result = qword_29D5E8;
  if (!qword_29D5E8)
  {
    result = swift_getWitnessTable("UZ\a", &type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D5E8);
  }
  return result;
}

uint64_t PredictiveSearchSuggestionEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for EventData(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_71B4(&qword_29D5F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PredictiveSearchSuggestionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_DE9DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys, &type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_DEBF0((uint64_t)v11, v20);
  }
  return sub_7DAC(a1);
}

uint64_t type metadata accessor for PredictiveSearchSuggestionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29D6E0, (uint64_t)&nominal type descriptor for PredictiveSearchSuggestionEvent.Model);
}

uint64_t sub_DEBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PredictiveSearchSuggestionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_DEC34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PredictiveSearchSuggestionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_DEC48@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295848, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D5B0, (uint64_t)sub_DE6C4, a1);
}

uint64_t sub_DEC6C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295850, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D5C8, (uint64_t)sub_DE704, a1);
}

uint64_t initializeBufferWithCopyOfBuffer for PredictiveSearchSuggestionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PredictiveSearchSuggestionEvent(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PredictiveSearchSuggestionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PredictiveSearchSuggestionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PredictiveSearchSuggestionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PredictiveSearchSuggestionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredictiveSearchSuggestionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DEE34);
}

uint64_t sub_DEE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PredictiveSearchSuggestionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DEE80);
}

uint64_t sub_DEE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PredictiveSearchSuggestionEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_29D650, (uint64_t)&nominal type descriptor for PredictiveSearchSuggestionEvent);
}

uint64_t sub_DEED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_DF104(a1, a2, a3, (uint64_t (*)(uint64_t))sub_8734);
}

uint64_t initializeBufferWithCopyOfBuffer for PredictiveSearchSuggestionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PredictiveSearchSuggestionEvent.Model(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PredictiveSearchSuggestionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PredictiveSearchSuggestionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PredictiveSearchSuggestionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PredictiveSearchSuggestionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredictiveSearchSuggestionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DF070);
}

uint64_t sub_DF070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PredictiveSearchSuggestionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DF0B8);
}

uint64_t sub_DF0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_DF0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_DF104(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for EventData);
}

uint64_t sub_DF104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v7, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PredictiveSearchSuggestionEvent.Model.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_DF1AC + 4 * byte_202790[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_DF1CC + 4 * byte_202795[v4]))();
}

_BYTE *sub_DF1AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_DF1CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_DF1D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_DF1DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_DF1E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_DF1EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PredictiveSearchSuggestionEvent.Model.CodingKeys()
{
  return &type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys;
}

unint64_t sub_DF20C()
{
  unint64_t result;

  result = qword_29D718;
  if (!qword_29D718)
  {
    result = swift_getWitnessTable("mZ\a", &type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D718);
  }
  return result;
}

unint64_t sub_DF254()
{
  unint64_t result;

  result = qword_29D720;
  if (!qword_29D720)
  {
    result = swift_getWitnessTable(byte_202874, &type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D720);
  }
  return result;
}

unint64_t sub_DF29C()
{
  unint64_t result;

  result = qword_29D728;
  if (!qword_29D728)
  {
    result = swift_getWitnessTable(byte_20289C, &type metadata for PredictiveSearchSuggestionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D728);
  }
  return result;
}

uint64_t sub_DF2E0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29D730, &enum case for SessionGroup.default(_:));
}

uint64_t static ContentDetailsViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295858, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D730, a1);
}

uint64_t sub_DF320(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29D748, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ContentDetailsViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295860, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D748, a1);
}

uint64_t ContentDetailsViewEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContentDetailsViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29D7D8, (uint64_t)&nominal type descriptor for ContentDetailsViewEvent);
}

uint64_t ContentDetailsViewEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.contentStoreData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 24);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.contentExposureData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.maxScrollDepthData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 28);
  v4 = sub_71B4(&qword_29D760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.maxScrollDepthData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 28);
  v4 = sub_71B4(&qword_29D760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.maxScrollDepthData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.altContentTypeExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 32);
  v4 = sub_71B4(&qword_2984C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.altContentTypeExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 32);
  v4 = sub_71B4(&qword_2984C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.altContentTypeExposureData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.prevAltContentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 36);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.prevAltContentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 36);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.prevAltContentExposureData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 40);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 40);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.linkData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.flowcaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 44);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.flowcaseData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 44);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.flowcaseData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 48);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 48);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.pageData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 52);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 52);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.upSellData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.onDevicePersonalizationPropertyData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 56);
  v4 = sub_71B4(&qword_296F70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.onDevicePersonalizationPropertyData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 56);
  v4 = sub_71B4(&qword_296F70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.onDevicePersonalizationPropertyData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 60);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 60);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.suggestionData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 64);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.uppParentContentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 64);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.uppParentContentData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.dealsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 68);
  v4 = sub_71B4(&qword_297410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.dealsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 68);
  v4 = sub_71B4(&qword_297410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.dealsData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 72);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 72);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.eventData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 76);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent(0) + 76);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewEvent.timedData.modify())()
{
  type metadata accessor for ContentDetailsViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ContentDetailsViewEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_29D760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v2, v12);
  v13 = a1 + v4[9];
  v14 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v2, v14);
  v15 = a1 + v4[10];
  v16 = enum case for EventProperty.required<A>(_:);
  v17 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v2, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
  v24 = a1 + v4[14];
  v25 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v2, v25);
  v26 = a1 + v4[15];
  v27 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v26, v2, v27);
  v28 = a1 + v4[16];
  v29 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v28, v2, v29);
  v30 = a1 + v4[17];
  v31 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v30, v2, v31);
  v32 = a1 + v4[18];
  v33 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v32, v16, v33);
  v34 = a1 + v4[19];
  v35 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v34, v16, v35);
}

uint64_t ReadingSettingsContextualViewEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = v1[9];
  v12 = v1[10];
  v13 = v1[11];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

void ContentDetailsViewEvent.Model.maxScrollDepthData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 292);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 288);
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t ContentDetailsViewEvent.Model.altContentTypeExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 296);
  v3 = *(_QWORD *)(v1 + 304);
  v4 = *(_QWORD *)(v1 + 312);
  v5 = *(_QWORD *)(v1 + 320);
  v6 = *(_QWORD *)(v1 + 328);
  v7 = *(_QWORD *)(v1 + 336);
  v8 = *(_QWORD *)(v1 + 344);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(v1 + 352);
  return sub_55D18(v2, v3, v4, v5, v6, v7, v8);
}

void ContentDetailsViewEvent.Model.prevAltContentExposureData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 353);
}

_QWORD *ContentDetailsViewEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_OWORD *)(v1 + 472);
  v3 = *(_OWORD *)(v1 + 440);
  v19 = *(_OWORD *)(v1 + 456);
  v20 = v2;
  v4 = *(_OWORD *)(v1 + 472);
  v21 = *(_OWORD *)(v1 + 488);
  v5 = *(_OWORD *)(v1 + 408);
  v7 = *(_OWORD *)(v1 + 376);
  v15 = *(_OWORD *)(v1 + 392);
  v6 = v15;
  v16 = v5;
  v8 = *(_OWORD *)(v1 + 408);
  v9 = *(_OWORD *)(v1 + 440);
  v17 = *(_OWORD *)(v1 + 424);
  v10 = v17;
  v18 = v9;
  v11 = *(_OWORD *)(v1 + 376);
  v14[0] = *(_OWORD *)(v1 + 360);
  v12 = v14[0];
  v14[1] = v11;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 488);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v3;
  v22 = *(_QWORD *)(v1 + 504);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 504);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v7;
  return sub_2DC18(v14);
}

uint64_t ContentDetailsViewEvent.Model.flowcaseData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1[64];
  v3 = v1[65];
  v4 = v1[66];
  v5 = v1[67];
  v6 = v1[68];
  v7 = v1[69];
  v8 = v1[70];
  v9 = v1[71];
  v10 = v1[72];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  return sub_A68B0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t ContentDetailsViewEvent.Model.pageData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[73];
  v3 = v1[74];
  v4 = v1[75];
  v5 = v1[76];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_1AD88(v2, v3, v4, v5);
}

uint64_t ContentDetailsViewEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 632);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 616);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

__n128 ContentDetailsViewEvent.Model.onDevicePersonalizationPropertyData.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[41].n128_u64[0];
  v3 = v1[41].n128_u8[8];
  result = v1[40];
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

void ContentDetailsViewEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 665);
}

uint64_t ContentDetailsViewEvent.Model.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 672);
  v3 = *(_QWORD *)(v1 + 680);
  v4 = *(_QWORD *)(v1 + 688);
  v5 = *(_QWORD *)(v1 + 696);
  v6 = *(_QWORD *)(v1 + 704);
  v7 = *(_QWORD *)(v1 + 712);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v1 + 720);
  return sub_56034(v2, v3, v4, v5, v6, v7);
}

void ContentDetailsViewEvent.Model.dealsData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 721);
}

uint64_t ContentDetailsViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent.Model(0) + 72);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContentDetailsViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29D8A8, (uint64_t)&nominal type descriptor for ContentDetailsViewEvent.Model);
}

uint64_t ContentDetailsViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewEvent.Model(0) + 76);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewEvent.Model.init(contentData:contentStoreData:contentExposureData:maxScrollDepthData:altContentTypeExposureData:prevAltContentExposureData:linkData:flowcaseData:pageData:upSellData:onDevicePersonalizationPropertyData:suggestionData:uppParentContentData:dealsData:eventData:timedData:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, __int16 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 *a10, __int128 *a11, __int128 *a12, char *a13, __int128 *a14, char *a15, uint64_t a16, uint64_t a17)
{
  _OWORD *v18;
  uint64_t v19;
  int v20;
  char v21;
  __int16 v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v18 = (_OWORD *)(a9 + 616);
  v19 = a9 + 264;
  v20 = *(_DWORD *)(a2 + 64);
  v21 = *(_BYTE *)(a2 + 68);
  v22 = *(_WORD *)(a3 + 116);
  v23 = *(_DWORD *)(a3 + 112);
  v24 = *a4;
  v25 = *((_BYTE *)a4 + 4);
  v26 = *(_QWORD *)(a5 + 48);
  v27 = *(_BYTE *)(a5 + 56);
  v28 = *a6;
  v29 = *(_QWORD *)(a8 + 64);
  v30 = *((_QWORD *)a11 + 2);
  v31 = *((_QWORD *)a12 + 2);
  v32 = *((_BYTE *)a12 + 24);
  v33 = *a13;
  v34 = *((_BYTE *)a14 + 48);
  v35 = *a15;
  v36 = a1[1];
  *(_OWORD *)a9 = *a1;
  *(_OWORD *)(a9 + 16) = v36;
  v37 = a1[3];
  *(_OWORD *)(a9 + 32) = a1[2];
  *(_OWORD *)(a9 + 48) = v37;
  v38 = a1[5];
  *(_OWORD *)(a9 + 64) = a1[4];
  *(_OWORD *)(a9 + 80) = v38;
  v39 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)a2;
  *(_OWORD *)(a9 + 112) = v39;
  v40 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a9 + 144) = v40;
  *(_BYTE *)(a9 + 164) = v21;
  *(_DWORD *)(a9 + 160) = v20;
  v41 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a9 + 168) = *(_OWORD *)a3;
  *(_OWORD *)(a9 + 184) = v41;
  v42 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a9 + 200) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a9 + 216) = v42;
  v43 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a9 + 232) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a9 + 248) = v43;
  *(_OWORD *)v19 = *(_OWORD *)(a3 + 96);
  *(_DWORD *)(a9 + 280) = v23;
  *(_WORD *)(a9 + 284) = v22;
  *(_DWORD *)(a9 + 288) = v24;
  *(_BYTE *)(a9 + 292) = v25;
  v44 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(v19 + 48) = v44;
  *(_OWORD *)(v19 + 64) = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(a9 + 344) = v26;
  *(_BYTE *)(a9 + 352) = v27;
  *(_WORD *)(v19 + 89) = v28;
  v45 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(a9 + 360) = *(_OWORD *)a7;
  *(_OWORD *)(a9 + 376) = v45;
  v46 = *(_OWORD *)(a7 + 32);
  v47 = *(_OWORD *)(a7 + 48);
  v48 = *(_OWORD *)(a7 + 80);
  *(_OWORD *)(a9 + 424) = *(_OWORD *)(a7 + 64);
  *(_OWORD *)(a9 + 440) = v48;
  *(_OWORD *)(a9 + 392) = v46;
  *(_OWORD *)(a9 + 408) = v47;
  v49 = *(_OWORD *)(a7 + 96);
  v50 = *(_OWORD *)(a7 + 112);
  v51 = *(_OWORD *)(a7 + 128);
  *(_QWORD *)(a9 + 504) = *(_QWORD *)(a7 + 144);
  *(_OWORD *)(a9 + 472) = v50;
  *(_OWORD *)(a9 + 488) = v51;
  *(_OWORD *)(a9 + 456) = v49;
  v52 = *(_OWORD *)(a8 + 16);
  v53 = *(_OWORD *)(a8 + 32);
  v54 = *(_OWORD *)(a8 + 48);
  v55 = *a10;
  v56 = a10[1];
  v57 = *a11;
  v58 = *a12;
  v59 = *a14;
  v60 = a14[1];
  v61 = a14[2];
  *(_OWORD *)(a9 + 512) = *(_OWORD *)a8;
  *(_OWORD *)(a9 + 528) = v52;
  *(_OWORD *)(a9 + 544) = v53;
  *(_OWORD *)(a9 + 560) = v54;
  *(_QWORD *)(a9 + 576) = v29;
  *(_OWORD *)(v19 + 320) = v55;
  *(_OWORD *)(v19 + 336) = v56;
  *v18 = v57;
  *(_QWORD *)(a9 + 632) = v30;
  *(_OWORD *)(a9 + 640) = v58;
  *(_QWORD *)(a9 + 656) = v31;
  *(_BYTE *)(a9 + 664) = v32;
  *(_BYTE *)(a9 + 665) = v33;
  *(_OWORD *)(a9 + 672) = v59;
  *(_OWORD *)(a9 + 688) = v60;
  *(_OWORD *)(a9 + 704) = v61;
  *(_BYTE *)(a9 + 720) = v34;
  *(_BYTE *)(a9 + 721) = v35;
  v62 = type metadata accessor for ContentDetailsViewEvent.Model(0);
  v63 = a9 + *(int *)(v62 + 72);
  v64 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v63, a16, v64);
  v65 = a9 + *(int *)(v62 + 76);
  v66 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v65, a17, v66);
}

uint64_t sub_E0688(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E06C4 + 4 * byte_202980[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_E06C4()
{
  return 0xD000000000000010;
}

uint64_t sub_E07F4()
{
  return 0x746144736C616564;
}

uint64_t sub_E0830()
{
  unsigned __int8 *v0;

  return sub_E0688(*v0);
}

uint64_t sub_E0838@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_E5FA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E085C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E0EA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E0884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E0EA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentDetailsViewEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  int v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  __int16 v76;

  v3 = v1;
  v5 = sub_71B4(&qword_29D768);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_E0EA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentDetailsViewEvent.Model.CodingKeys, &type metadata for ContentDetailsViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v65 = *v3;
  v66 = v12;
  v13 = v3[3];
  v67 = v3[2];
  v68 = v13;
  v14 = v3[5];
  v69 = v3[4];
  v70 = v14;
  LOBYTE(v76) = 0;
  v15 = sub_17118();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v76, v5, &type metadata for ContentData, v15);
  if (!v2)
  {
    v16 = *((_DWORD *)v3 + 40);
    v17 = *((_BYTE *)v3 + 164);
    v18 = v3[7];
    v65 = v3[6];
    v66 = v18;
    v19 = v3[9];
    v67 = v3[8];
    v68 = v19;
    BYTE4(v69) = v17;
    LODWORD(v69) = v16;
    LOBYTE(v76) = 1;
    v20 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v76, v5, &type metadata for ContentStoreData, v20);
    v21 = *((_DWORD *)v3 + 70);
    v22 = *((_WORD *)v3 + 142);
    v23 = *(__int128 *)((char *)v3 + 184);
    v65 = *(__int128 *)((char *)v3 + 168);
    v66 = v23;
    v24 = *(__int128 *)((char *)v3 + 216);
    v67 = *(__int128 *)((char *)v3 + 200);
    v68 = v24;
    v25 = *(__int128 *)((char *)v3 + 248);
    v69 = *(__int128 *)((char *)v3 + 232);
    v70 = v25;
    v71 = *(__int128 *)((char *)v3 + 264);
    WORD2(v72) = v22;
    LODWORD(v72) = v21;
    LOBYTE(v76) = 2;
    v26 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v76, v5, &type metadata for ContentExposureData, v26);
    v27 = *((_BYTE *)v3 + 292);
    LODWORD(v65) = *((_DWORD *)v3 + 72);
    BYTE4(v65) = v27;
    LOBYTE(v76) = 3;
    v28 = sub_89648();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v76, v5, &type metadata for MaxScrollDepthData, v28);
    v29 = *((_QWORD *)v3 + 43);
    v30 = *((_BYTE *)v3 + 352);
    v31 = *(__int128 *)((char *)v3 + 312);
    v65 = *(__int128 *)((char *)v3 + 296);
    v66 = v31;
    v67 = *(__int128 *)((char *)v3 + 328);
    *(_QWORD *)&v68 = v29;
    BYTE8(v68) = v30;
    LOBYTE(v76) = 4;
    v32 = sub_568D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v76, v5, &type metadata for AltContentTypeExposureData, v32);
    v76 = *(_WORD *)((char *)v3 + 353);
    v75 = 5;
    v33 = sub_569A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v76, &v75, v5, &type metadata for PrevAltContentExposureData, v33);
    v74 = *((_QWORD *)v3 + 63);
    v34 = *(__int128 *)((char *)v3 + 472);
    v71 = *(__int128 *)((char *)v3 + 456);
    v72 = v34;
    v73 = *(__int128 *)((char *)v3 + 488);
    v35 = *(__int128 *)((char *)v3 + 408);
    v67 = *(__int128 *)((char *)v3 + 392);
    v68 = v35;
    v36 = *(__int128 *)((char *)v3 + 440);
    v69 = *(__int128 *)((char *)v3 + 424);
    v70 = v36;
    v37 = *(__int128 *)((char *)v3 + 376);
    v65 = *(__int128 *)((char *)v3 + 360);
    v66 = v37;
    v64 = 6;
    v38 = sub_1B7F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v65, &v64, v5, &type metadata for LinkData, v38);
    v39 = *((_QWORD *)v3 + 72);
    v40 = v3[33];
    v65 = v3[32];
    v66 = v40;
    v41 = v3[35];
    v67 = v3[34];
    v68 = v41;
    *(_QWORD *)&v69 = v39;
    v64 = 7;
    v42 = sub_21244();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v64, v5, &type metadata for FlowcaseData, v42);
    v43 = *(__int128 *)((char *)v3 + 600);
    v65 = *(__int128 *)((char *)v3 + 584);
    v66 = v43;
    v64 = 8;
    v44 = sub_1B7AC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v64, v5, &type metadata for PageData, v44);
    v45 = *((_QWORD *)v3 + 79);
    v65 = *(__int128 *)((char *)v3 + 616);
    *(_QWORD *)&v66 = v45;
    v64 = 9;
    v46 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v64, v5, &type metadata for UpSellData, v46);
    v47 = *((_QWORD *)v3 + 82);
    v48 = *((_BYTE *)v3 + 664);
    v65 = v3[40];
    *(_QWORD *)&v66 = v47;
    BYTE8(v66) = v48;
    v64 = 10;
    v49 = sub_2E728();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v64, v5, &type metadata for OnDevicePersonalizationPropertyData, v49);
    LOBYTE(v65) = *((_BYTE *)v3 + 665);
    v64 = 11;
    v50 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v64, v5, &type metadata for SuggestionData, v50);
    v51 = *((_BYTE *)v3 + 720);
    v52 = v3[43];
    v65 = v3[42];
    v66 = v52;
    v67 = v3[44];
    LOBYTE(v68) = v51;
    v64 = 12;
    v53 = sub_569E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v64, v5, &type metadata for UppParentContentData, v53);
    LOBYTE(v65) = *((_BYTE *)v3 + 721);
    v64 = 13;
    v54 = sub_36760();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v65, &v64, v5, &type metadata for DealsData, v54);
    v55 = type metadata accessor for ContentDetailsViewEvent.Model(0);
    v56 = (uint64_t)v3 + *(int *)(v55 + 72);
    LOBYTE(v65) = 14;
    v57 = type metadata accessor for EventData(0);
    v58 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v56, &v65, v5, v57, v58);
    v59 = (uint64_t)v3 + *(int *)(v55 + 76);
    LOBYTE(v65) = 15;
    v60 = type metadata accessor for TimedData(0);
    v61 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v59, &v65, v5, v60, v61);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_E0EA8()
{
  unint64_t result;

  result = qword_29D770;
  if (!qword_29D770)
  {
    result = swift_getWitnessTable(byte_202D24, &type metadata for ContentDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D770);
  }
  return result;
}

void ContentDetailsViewEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  int64_t v24;
  int64_t v25;
  void *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  int v46;
  char v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int16 v55;
  _OWORD *v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  __int128 v76;
  _OWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  v100 = a2;
  v101 = type metadata accessor for TimedData(0);
  v3 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v5 = (uint64_t *)((char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = type metadata accessor for EventData(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v7 = (uint64_t *)((char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = sub_71B4(&qword_29D778);
  v8 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for ContentDetailsViewEvent.Model(0);
  __chkstk_darwin(v103);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = v12 + 264;
  v14 = a1[3];
  v13 = a1[4];
  v107 = a1;
  sub_7988(a1, v14);
  v15 = sub_E0EA8();
  v102 = v10;
  v16 = v126;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentDetailsViewEvent.Model.CodingKeys, &type metadata for ContentDetailsViewEvent.Model.CodingKeys, v15, v14, v13);
  if (v16)
  {
    v126 = v16;
    LODWORD(v108) = 0;
    v19 = 0;
  }
  else
  {
    v99 = v7;
    v98 = v5;
    v97 = v3;
    LOBYTE(v110) = 0;
    v17 = sub_1779C();
    v18 = v108;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v116, &type metadata for ContentData, &v110, v108, &type metadata for ContentData, v17);
    v41 = v117;
    *(_OWORD *)v12 = v116;
    *((_OWORD *)v12 + 1) = v41;
    v42 = v119;
    v43 = v120;
    *((_OWORD *)v12 + 2) = v118;
    *((_OWORD *)v12 + 3) = v42;
    v44 = v121;
    *((_OWORD *)v12 + 4) = v43;
    *((_OWORD *)v12 + 5) = v44;
    LOBYTE(v110) = 1;
    v45 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v116, &type metadata for ContentStoreData, &v110, v18, &type metadata for ContentStoreData, v45);
    v46 = v120;
    v47 = BYTE4(v120);
    v48 = v117;
    *((_OWORD *)v12 + 6) = v116;
    *((_OWORD *)v12 + 7) = v48;
    v49 = v119;
    *((_OWORD *)v12 + 8) = v118;
    *((_OWORD *)v12 + 9) = v49;
    v12[164] = v47;
    *((_DWORD *)v12 + 40) = v46;
    LOBYTE(v110) = 2;
    v50 = sub_57428();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v116, &type metadata for ContentExposureData, &v110, v18, &type metadata for ContentExposureData, v50);
    v51 = v117;
    *(_OWORD *)(v12 + 168) = v116;
    *(_OWORD *)(v12 + 184) = v51;
    *(_OWORD *)(v12 + 200) = v118;
    v52 = v120;
    *(_OWORD *)(v12 + 216) = v119;
    *(_OWORD *)(v12 + 232) = v52;
    v53 = v122;
    *(_OWORD *)(v12 + 248) = v121;
    v54 = v123;
    v55 = WORD2(v123);
    v56 = v106;
    *v106 = v53;
    *((_WORD *)v56 + 10) = v55;
    *((_DWORD *)v56 + 4) = v54;
    LOBYTE(v110) = 3;
    v57 = sub_89600();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v116, &type metadata for MaxScrollDepthData, &v110, v18, &type metadata for MaxScrollDepthData, v57);
    v58 = BYTE4(v116);
    *((_DWORD *)v12 + 72) = v116;
    *((_BYTE *)v56 + 28) = v58;
    LOBYTE(v110) = 4;
    v59 = sub_573A0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v116, &type metadata for AltContentTypeExposureData, &v110, v18, &type metadata for AltContentTypeExposureData, v59);
    v60 = v119;
    v61 = BYTE8(v119);
    v62 = v117;
    v56[2] = v116;
    v56[3] = v62;
    v56[4] = v118;
    *((_QWORD *)v12 + 43) = v60;
    v12[352] = v61;
    LOBYTE(v110) = 5;
    v63 = sub_5746C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v116, &type metadata for PrevAltContentExposureData, &v110, v18, &type metadata for PrevAltContentExposureData, v63);
    *(_WORD *)((char *)v56 + 89) = v116;
    v115 = 6;
    v64 = sub_1C06C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v116, &type metadata for LinkData, &v115, v18, &type metadata for LinkData, v64);
    v65 = v123;
    v66 = v124;
    v67 = v121;
    *(_OWORD *)(v12 + 456) = v122;
    *(_OWORD *)(v12 + 472) = v65;
    *(_OWORD *)(v12 + 488) = v66;
    v68 = v119;
    v69 = v120;
    *(_OWORD *)(v12 + 392) = v118;
    *(_OWORD *)(v12 + 408) = v68;
    *((_QWORD *)v12 + 63) = v125;
    *(_OWORD *)(v12 + 424) = v69;
    *(_OWORD *)(v12 + 440) = v67;
    v70 = v117;
    *(_OWORD *)(v12 + 360) = v116;
    *(_OWORD *)(v12 + 376) = v70;
    v109 = 7;
    v71 = sub_211FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for FlowcaseData, &v109, v18, &type metadata for FlowcaseData, v71);
    v72 = v114;
    v73 = v111;
    *((_OWORD *)v12 + 32) = v110;
    *((_OWORD *)v12 + 33) = v73;
    v74 = v113;
    *((_OWORD *)v12 + 34) = v112;
    *((_OWORD *)v12 + 35) = v74;
    *((_QWORD *)v12 + 72) = v72;
    v109 = 8;
    v75 = sub_1C028();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for PageData, &v109, v18, &type metadata for PageData, v75);
    v76 = v111;
    v77 = v106;
    v106[20] = v110;
    v77[21] = v76;
    v109 = 9;
    v78 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for UpSellData, &v109, v18, &type metadata for UpSellData, v78);
    v126 = 0;
    v79 = v111;
    *(_OWORD *)(v12 + 616) = v110;
    *((_QWORD *)v12 + 79) = v79;
    v109 = 10;
    v80 = sub_2F2B0();
    v81 = v126;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for OnDevicePersonalizationPropertyData, &v109, v108, &type metadata for OnDevicePersonalizationPropertyData, v80);
    v126 = v81;
    if (!v81)
    {
      v82 = v111;
      v83 = BYTE8(v111);
      *((_OWORD *)v12 + 40) = v110;
      *((_QWORD *)v12 + 82) = v82;
      v12[664] = v83;
      v109 = 11;
      v84 = sub_2F2F4();
      v85 = v126;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for SuggestionData, &v109, v108, &type metadata for SuggestionData, v84);
      v126 = v85;
      if (!v85)
      {
        v12[665] = v110;
        v109 = 12;
        v86 = sub_574B0();
        v87 = v126;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for UppParentContentData, &v109, v108, &type metadata for UppParentContentData, v86);
        v126 = v87;
        if (v87)
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v102, v108);
          sub_7DAC(v107);
          v33 = 0;
          v32 = 0;
          LOBYTE(v40) = 1;
          v27 = 1;
          v28 = 1;
          v29 = 1;
          v30 = 1;
          v31 = 1;
          LODWORD(v108) = 1;
        }
        else
        {
          v88 = v113;
          v89 = v111;
          *((_OWORD *)v12 + 42) = v110;
          *((_OWORD *)v12 + 43) = v89;
          *((_OWORD *)v12 + 44) = v112;
          v12[720] = v88;
          v109 = 13;
          v90 = sub_370E4();
          v91 = v126;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for DealsData, &v109, v108, &type metadata for DealsData, v90);
          v126 = v91;
          if (v91
            || (v12[721] = v110,
                LOBYTE(v110) = 14,
                v92 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData), v93 = v126, KeyedDecodingContainer.decode<A>(_:forKey:)(v99, v105, &v110, v108, v105, v92), (v126 = v93) != 0))
          {
            (*(void (**)(char *, uint64_t))(v8 + 8))(v102, v108);
            sub_7DAC(v107);
            v32 = 0;
            LOBYTE(v40) = 1;
            v27 = 1;
            v28 = 1;
            v29 = 1;
            v30 = 1;
            v31 = 1;
            LODWORD(v108) = 1;
            v33 = 1;
          }
          else
          {
            (*(void (**)(char *, _QWORD *, uint64_t))(v104 + 32))(&v12[*(int *)(v103 + 72)], v99, v105);
            LOBYTE(v110) = 15;
            v94 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
            v95 = v126;
            KeyedDecodingContainer.decode<A>(_:forKey:)(v98, v101, &v110, v108, v101, v94);
            v126 = v95;
            if (!v95)
            {
              (*(void (**)(char *, uint64_t))(v8 + 8))(v102, v108);
              (*(void (**)(char *, _QWORD *, uint64_t))(v97 + 32))(&v12[*(int *)(v103 + 76)], v98, v101);
              sub_E1BE8((uint64_t)v12, v100);
              sub_7DAC(v107);
              sub_E1C2C((uint64_t)v12);
              return;
            }
            (*(void (**)(char *, uint64_t))(v8 + 8))(v102, v108);
            sub_7DAC(v107);
            LOBYTE(v40) = 1;
            v27 = 1;
            v28 = 1;
            v29 = 1;
            v30 = 1;
            v31 = 1;
            LODWORD(v108) = 1;
            v33 = 1;
            v32 = 1;
          }
        }
        goto LABEL_16;
      }
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v102, v108);
    v19 = 983;
    LODWORD(v108) = 1;
  }
  sub_7DAC(v107);
  v27 = (v19 >> 2) & 1;
  v28 = (v19 >> 4) & 1;
  v29 = (v19 >> 6) & 1;
  v30 = (v19 >> 7) & 1;
  v31 = (v19 >> 8) & 1;
  if ((v19 & 1) == 0)
  {
    v32 = 0;
    v33 = 0;
    if ((v19 & 2) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
  v33 = 0;
  v32 = 0;
  v40 = (v19 >> 1) & 1;
LABEL_16:
  sub_4D4C4(*(_QWORD *)v12, *((_QWORD *)v12 + 1), *((_QWORD *)v12 + 2), *((_QWORD *)v12 + 3), *((_QWORD *)v12 + 4), *((_QWORD *)v12 + 5), *((_QWORD *)v12 + 6), *((_QWORD *)v12 + 7), *((_QWORD *)v12 + 8), *((_QWORD *)v12 + 9), *((_QWORD *)v12 + 10), *((_QWORD *)v12 + 11));
  if ((v40 & 1) == 0)
  {
LABEL_6:
    if (v27)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  sub_57314(*((_QWORD *)v12 + 12), *((_QWORD *)v12 + 13), *((_QWORD *)v12 + 14), *((_QWORD *)v12 + 15), *((_QWORD *)v12 + 16), *((_QWORD *)v12 + 17), *((_QWORD *)v12 + 18), *((_QWORD *)v12 + 19));
  if ((v27 & 1) != 0)
  {
LABEL_7:
    sub_572A4(*((_QWORD *)v12 + 21), *((_QWORD *)v12 + 22), *((_QWORD *)v12 + 23), *((_QWORD *)v12 + 24), *((_QWORD *)v12 + 25), *((_QWORD *)v12 + 26), *((_QWORD *)v12 + 27), *((_QWORD *)v12 + 28), *((_QWORD *)v12 + 29), *((_QWORD *)v12 + 30), *((_QWORD *)v12 + 31), *((_QWORD *)v12 + 32), *((_QWORD *)v12 + 33), *((_QWORD *)v12 + 34));
    if ((v28 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  if (!v28)
  {
LABEL_8:
    if (v29)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  sub_57364(*((_QWORD *)v12 + 37), *((_QWORD *)v12 + 38), *((_QWORD *)v12 + 39), *((_QWORD *)v12 + 40), *((_QWORD *)v12 + 41), *((_QWORD *)v12 + 42), *((_QWORD *)v12 + 43));
  if ((v29 & 1) != 0)
  {
LABEL_9:
    v34 = *(_OWORD *)(v12 + 456);
    v35 = *(_OWORD *)(v12 + 488);
    v123 = *(_OWORD *)(v12 + 472);
    v124 = v35;
    v36 = *(_OWORD *)(v12 + 392);
    v37 = *(_OWORD *)(v12 + 424);
    v38 = *(_OWORD *)(v12 + 440);
    v119 = *(_OWORD *)(v12 + 408);
    v120 = v37;
    v125 = *((_QWORD *)v12 + 63);
    v121 = v38;
    v122 = v34;
    v39 = *(_OWORD *)(v12 + 376);
    v116 = *(_OWORD *)(v12 + 360);
    v117 = v39;
    v118 = v36;
    sub_2F180(&v116);
    if ((v30 & 1) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  if (!v30)
  {
LABEL_10:
    if (v31)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  sub_A8708(*((_QWORD *)v12 + 64), *((_QWORD *)v12 + 65), *((_QWORD *)v12 + 66), *((_QWORD *)v12 + 67), *((_QWORD *)v12 + 68), *((_QWORD *)v12 + 69), *((_QWORD *)v12 + 70), *((_QWORD *)v12 + 71), *((_QWORD *)v12 + 72));
  if ((v31 & 1) != 0)
  {
LABEL_11:
    sub_1BF00(*((_QWORD *)v12 + 73), *((_QWORD *)v12 + 74), *((_QWORD *)v12 + 75), *((_QWORD *)v12 + 76));
    if ((v108 & 1) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  if (!(_DWORD)v108)
  {
LABEL_12:
    if (v33)
      goto LABEL_13;
LABEL_24:
    if (!v32)
      return;
    goto LABEL_25;
  }
LABEL_23:
  swift_bridgeObjectRelease(*((BAEventReporter **)v12 + 79), v20, v21, v22, v23, v24, v25, v26);
  if ((v33 & 1) == 0)
    goto LABEL_24;
LABEL_13:
  sub_57268(*((_QWORD *)v12 + 84), *((_QWORD *)v12 + 85), *((_QWORD *)v12 + 86), *((_QWORD *)v12 + 87), *((_QWORD *)v12 + 88), *((_QWORD *)v12 + 89));
  if ((v32 & 1) == 0)
    return;
LABEL_25:
  (*(void (**)(char *, uint64_t))(v104 + 8))(&v12[*(int *)(v103 + 72)], v105);
}

uint64_t sub_E1BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentDetailsViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_E1C2C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContentDetailsViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_E1C68(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ContentDetailsViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_E1C7C(_QWORD *a1)
{
  return ContentDetailsViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_E1C90@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295858, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D730, (uint64_t)sub_DF2E0, a1);
}

uint64_t sub_E1CB4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295860, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D748, (uint64_t)sub_DF320, a1);
}

uint64_t sub_E1CD8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_29D760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v4, v13);
  v14 = a2 + a1[9];
  v15 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v4, v15);
  v16 = a2 + a1[10];
  v17 = enum case for EventProperty.required<A>(_:);
  v18 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v4, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
  v25 = a2 + a1[14];
  v26 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v25, v4, v26);
  v27 = a2 + a1[15];
  v28 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v27, v4, v28);
  v29 = a2 + a1[16];
  v30 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v29, v4, v30);
  v31 = a2 + a1[17];
  v32 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v31, v4, v32);
  v33 = a2 + a1[18];
  v34 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v33, v17, v34);
  v35 = a2 + a1[19];
  v36 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v35, v17, v36);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContentDetailsViewEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v68 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v68 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v68);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2984D0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_29D760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_2984C0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_2984D8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_297408);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[14];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_71B4(&qword_296F70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = a3[15];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    v52 = a3[16];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    v55 = sub_71B4(&qword_2984E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    v56 = a3[17];
    v57 = (char *)a1 + v56;
    v58 = (char *)a2 + v56;
    v59 = sub_71B4(&qword_297410);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    v60 = a3[18];
    v61 = (char *)a1 + v60;
    v62 = (char *)a2 + v60;
    v63 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
    v64 = a3[19];
    v65 = (char *)a1 + v64;
    v66 = (char *)a2 + v64;
    v67 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
  }
  return a1;
}

uint64_t destroy for ContentDetailsViewEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_29D760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[14];
  v24 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = a1 + a2[15];
  v26 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = a1 + a2[16];
  v28 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  v29 = a1 + a2[17];
  v30 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  v31 = a1 + a2[18];
  v32 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  v33 = a1 + a2[19];
  v34 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
}

uint64_t initializeWithCopy for ContentDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  return a1;
}

uint64_t assignWithCopy for ContentDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 24))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  return a1;
}

uint64_t initializeWithTake for ContentDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
  return a1;
}

uint64_t assignWithTake for ContentDetailsViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_29D760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = a3[15];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = a3[16];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = a3[18];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v60, v61, v62);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentDetailsViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E3284);
}

uint64_t sub_E3284(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984D0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_29D760);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_2984C0);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_2984D8);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296A10);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_297408);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_296A08);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_296F68);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v22 = sub_71B4(&qword_296F70);
                      v12 = *(_QWORD *)(v22 - 8);
                      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                      {
                        v8 = v22;
                        v13 = a3[14];
                      }
                      else
                      {
                        v23 = sub_71B4(&qword_296F78);
                        v12 = *(_QWORD *)(v23 - 8);
                        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                        {
                          v8 = v23;
                          v13 = a3[15];
                        }
                        else
                        {
                          v24 = sub_71B4(&qword_2984E8);
                          v12 = *(_QWORD *)(v24 - 8);
                          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                          {
                            v8 = v24;
                            v13 = a3[16];
                          }
                          else
                          {
                            v25 = sub_71B4(&qword_297410);
                            v12 = *(_QWORD *)(v25 - 8);
                            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                            {
                              v8 = v25;
                              v13 = a3[17];
                            }
                            else
                            {
                              v26 = sub_71B4(&qword_295D70);
                              v12 = *(_QWORD *)(v26 - 8);
                              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                              {
                                v8 = v26;
                                v13 = a3[18];
                              }
                              else
                              {
                                v8 = sub_71B4(&qword_295D78);
                                v12 = *(_QWORD *)(v8 - 8);
                                v13 = a3[19];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ContentDetailsViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E353C);
}

uint64_t sub_E353C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984D0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_29D760);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_2984C0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_2984D8);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296A10);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_297408);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_296A08);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_296F68);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v24 = sub_71B4(&qword_296F70);
                      v14 = *(_QWORD *)(v24 - 8);
                      if (*(_DWORD *)(v14 + 84) == a3)
                      {
                        v10 = v24;
                        v15 = a4[14];
                      }
                      else
                      {
                        v25 = sub_71B4(&qword_296F78);
                        v14 = *(_QWORD *)(v25 - 8);
                        if (*(_DWORD *)(v14 + 84) == a3)
                        {
                          v10 = v25;
                          v15 = a4[15];
                        }
                        else
                        {
                          v26 = sub_71B4(&qword_2984E8);
                          v14 = *(_QWORD *)(v26 - 8);
                          if (*(_DWORD *)(v14 + 84) == a3)
                          {
                            v10 = v26;
                            v15 = a4[16];
                          }
                          else
                          {
                            v27 = sub_71B4(&qword_297410);
                            v14 = *(_QWORD *)(v27 - 8);
                            if (*(_DWORD *)(v14 + 84) == a3)
                            {
                              v10 = v27;
                              v15 = a4[17];
                            }
                            else
                            {
                              v28 = sub_71B4(&qword_295D70);
                              v14 = *(_QWORD *)(v28 - 8);
                              if (*(_DWORD *)(v14 + 84) == a3)
                              {
                                v10 = v28;
                                v15 = a4[18];
                              }
                              else
                              {
                                v10 = sub_71B4(&qword_295D78);
                                v14 = *(_QWORD *)(v10 - 8);
                                v15 = a4[19];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_E37F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[16];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v34[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
    if (v5 <= 0x3F)
    {
      v34[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2985D0, (uint64_t (*)(void))sub_57428, (uint64_t (*)(void))sub_56960, (uint64_t)&type metadata for ContentExposureData);
      if (v7 <= 0x3F)
      {
        v34[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&unk_29D7E8, (uint64_t (*)(void))sub_89600, (uint64_t (*)(void))sub_89648, (uint64_t)&type metadata for MaxScrollDepthData);
        if (v9 <= 0x3F)
        {
          v34[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_2985C0, (uint64_t (*)(void))sub_573A0, (uint64_t (*)(void))sub_568D8, (uint64_t)&type metadata for AltContentTypeExposureData);
          if (v11 <= 0x3F)
          {
            v34[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_2985D8, (uint64_t (*)(void))sub_5746C, (uint64_t (*)(void))sub_569A4, (uint64_t)&type metadata for PrevAltContentExposureData);
            if (v13 <= 0x3F)
            {
              v34[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
              if (v15 <= 0x3F)
              {
                v34[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, &qword_2974A8, (uint64_t (*)(void))sub_211FC, (uint64_t (*)(void))sub_21244, (uint64_t)&type metadata for FlowcaseData);
                if (v17 <= 0x3F)
                {
                  v34[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
                  if (v19 <= 0x3F)
                  {
                    v34[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
                    if (v21 <= 0x3F)
                    {
                      v34[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_B9C8(319, &qword_297058, (uint64_t (*)(void))sub_2F2B0, (uint64_t (*)(void))sub_2E728, (uint64_t)&type metadata for OnDevicePersonalizationPropertyData);
                      if (v23 <= 0x3F)
                      {
                        v34[10] = *(_QWORD *)(v22 - 8) + 64;
                        sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
                        if (v25 <= 0x3F)
                        {
                          v34[11] = *(_QWORD *)(v24 - 8) + 64;
                          sub_B9C8(319, (unint64_t *)&unk_2985E8, (uint64_t (*)(void))sub_574B0, (uint64_t (*)(void))sub_569E8, (uint64_t)&type metadata for UppParentContentData);
                          if (v27 <= 0x3F)
                          {
                            v34[12] = *(_QWORD *)(v26 - 8) + 64;
                            sub_B9C8(319, (unint64_t *)&unk_2974B0, (uint64_t (*)(void))sub_370E4, (uint64_t (*)(void))sub_36760, (uint64_t)&type metadata for DealsData);
                            if (v29 <= 0x3F)
                            {
                              v34[13] = *(_QWORD *)(v28 - 8) + 64;
                              sub_8734(319);
                              if (v31 <= 0x3F)
                              {
                                v34[14] = *(_QWORD *)(v30 - 8) + 64;
                                sub_87D8(319);
                                if (v33 <= 0x3F)
                                {
                                  v34[15] = *(_QWORD *)(v32 - 8) + 64;
                                  swift_initStructMetadata(a1, 256, 16, v34, a1 + 16);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ContentDetailsViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
    return a1;
  }
  v6 = a2[1];
  if (v6)
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v10 = a2[17];
    if (v10)
      goto LABEL_4;
LABEL_8:
    v24 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v24;
    *(_QWORD *)(a1 + 157) = *(uint64_t *)((char *)a2 + 157);
    v25 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v25;
    v14 = a2[22];
    if (v14)
      goto LABEL_5;
    goto LABEL_9;
  }
  v21 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v21;
  v22 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v22;
  v23 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
  v10 = a2[17];
  if (!v10)
    goto LABEL_8;
LABEL_4:
  v11 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v11;
  v12 = a2[15];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = v10;
  v13 = a2[19];
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = v13;
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v13);
  v14 = a2[22];
  if (v14)
  {
LABEL_5:
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v14;
    v15 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v15;
    v16 = a2[26];
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_QWORD *)(a1 + 208) = v16;
    v17 = a2[28];
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_QWORD *)(a1 + 224) = v17;
    v18 = a2[30];
    *(_QWORD *)(a1 + 232) = a2[29];
    *(_QWORD *)(a1 + 240) = v18;
    *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
    *(_BYTE *)(a1 + 252) = *((_BYTE *)a2 + 252);
    *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
    *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
    v19 = a2[34];
    *(_QWORD *)(a1 + 264) = a2[33];
    *(_QWORD *)(a1 + 272) = v19;
    *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
    *(_WORD *)(a1 + 284) = *((_WORD *)a2 + 142);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    goto LABEL_10;
  }
LABEL_9:
  v26 = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
  *(_OWORD *)(a1 + 248) = v26;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 278) = *(uint64_t *)((char *)a2 + 278);
  v27 = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 184) = v27;
  v28 = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = v28;
LABEL_10:
  *(_DWORD *)(a1 + 288) = *((_DWORD *)a2 + 72);
  *(_BYTE *)(a1 + 292) = *((_BYTE *)a2 + 292);
  v29 = a2[38];
  if (v29)
  {
    *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
    *(_QWORD *)(a1 + 304) = v29;
    *(_WORD *)(a1 + 312) = *((_WORD *)a2 + 156);
    v30 = a2[41];
    *(_QWORD *)(a1 + 320) = a2[40];
    *(_QWORD *)(a1 + 328) = v30;
    v31 = a2[43];
    *(_QWORD *)(a1 + 336) = a2[42];
    *(_QWORD *)(a1 + 344) = v31;
    *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v32;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 337) = *(_OWORD *)((char *)a2 + 337);
  }
  *(_WORD *)(a1 + 353) = *(_WORD *)((char *)a2 + 353);
  v33 = a2[46];
  *(_QWORD *)(a1 + 360) = a2[45];
  *(_QWORD *)(a1 + 368) = v33;
  v34 = a2[48];
  *(_QWORD *)(a1 + 376) = a2[47];
  *(_QWORD *)(a1 + 384) = v34;
  v35 = a2[50];
  *(_QWORD *)(a1 + 392) = a2[49];
  *(_QWORD *)(a1 + 400) = v35;
  *(_BYTE *)(a1 + 408) = *((_BYTE *)a2 + 408);
  v36 = a2[53];
  *(_QWORD *)(a1 + 416) = a2[52];
  *(_QWORD *)(a1 + 424) = v36;
  v37 = a2[55];
  *(_QWORD *)(a1 + 432) = a2[54];
  *(_QWORD *)(a1 + 440) = v37;
  v38 = a2[57];
  *(_QWORD *)(a1 + 448) = a2[56];
  *(_QWORD *)(a1 + 456) = v38;
  v39 = a2[59];
  *(_QWORD *)(a1 + 464) = a2[58];
  *(_QWORD *)(a1 + 472) = v39;
  v40 = a2[61];
  *(_QWORD *)(a1 + 480) = a2[60];
  *(_QWORD *)(a1 + 488) = v40;
  v41 = a2[63];
  *(_QWORD *)(a1 + 496) = a2[62];
  *(_QWORD *)(a1 + 504) = v41;
  v63 = a2[65];
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  if (!v63)
  {
    v46 = *((_OWORD *)a2 + 35);
    *(_OWORD *)(a1 + 544) = *((_OWORD *)a2 + 34);
    *(_OWORD *)(a1 + 560) = v46;
    *(_QWORD *)(a1 + 576) = a2[72];
    v47 = *((_OWORD *)a2 + 33);
    *(_OWORD *)(a1 + 512) = *((_OWORD *)a2 + 32);
    *(_OWORD *)(a1 + 528) = v47;
    v44 = a2[76];
    if (v44)
      goto LABEL_15;
LABEL_17:
    v48 = *(_OWORD *)(a2 + 75);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 73);
    *(_OWORD *)(a1 + 600) = v48;
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 512) = a2[64];
  *(_QWORD *)(a1 + 520) = v63;
  *(_DWORD *)(a1 + 528) = *((_DWORD *)a2 + 132);
  *(_QWORD *)(a1 + 536) = a2[67];
  v42 = a2[68];
  *(_QWORD *)(a1 + 544) = v42;
  *(_QWORD *)(a1 + 552) = a2[69];
  *(_BYTE *)(a1 + 560) = *((_BYTE *)a2 + 560);
  *(_QWORD *)(a1 + 568) = a2[71];
  v43 = a2[72];
  *(_QWORD *)(a1 + 576) = v43;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  v44 = a2[76];
  if (!v44)
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)(a1 + 584) = a2[73];
  v45 = a2[74];
  *(_QWORD *)(a1 + 592) = v45;
  *(_QWORD *)(a1 + 600) = a2[75];
  *(_QWORD *)(a1 + 608) = v44;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v44);
LABEL_18:
  *(_WORD *)(a1 + 616) = *((_WORD *)a2 + 308);
  *(_QWORD *)(a1 + 624) = a2[78];
  v49 = a2[79];
  *(_QWORD *)(a1 + 632) = v49;
  *(_OWORD *)(a1 + 640) = *((_OWORD *)a2 + 40);
  *(_OWORD *)(a1 + 649) = *(_OWORD *)((char *)a2 + 649);
  *(_BYTE *)(a1 + 665) = *((_BYTE *)a2 + 665);
  v50 = a2[85];
  swift_bridgeObjectRetain(v49);
  if (v50)
  {
    *(_QWORD *)(a1 + 672) = a2[84];
    *(_QWORD *)(a1 + 680) = v50;
    *(_QWORD *)(a1 + 688) = a2[86];
    v51 = a2[87];
    *(_QWORD *)(a1 + 696) = v51;
    *(_QWORD *)(a1 + 704) = a2[88];
    v52 = a2[89];
    *(_QWORD *)(a1 + 712) = v52;
    *(_BYTE *)(a1 + 720) = *((_BYTE *)a2 + 720);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v52);
  }
  else
  {
    v53 = *((_OWORD *)a2 + 43);
    *(_OWORD *)(a1 + 672) = *((_OWORD *)a2 + 42);
    *(_OWORD *)(a1 + 688) = v53;
    *(_OWORD *)(a1 + 704) = *((_OWORD *)a2 + 44);
    *(_BYTE *)(a1 + 720) = *((_BYTE *)a2 + 720);
  }
  *(_BYTE *)(a1 + 721) = *((_BYTE *)a2 + 721);
  v54 = *(int *)(a3 + 72);
  v55 = a1 + v54;
  v56 = (uint64_t)a2 + v54;
  v57 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
  v58 = *(int *)(a3 + 76);
  v59 = a1 + v58;
  v60 = (uint64_t)a2 + v58;
  v61 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
  return a1;
}

uint64_t destroy for ContentDetailsViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[11]);
  }
  v5 = a1[17];
  if (v5)
  {
    swift_bridgeObjectRelease(a1[13]);
    v6 = a1[15];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[19]);
  }
  v7 = a1[22];
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v8 = a1[38];
  if (v8)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(a1[41]);
    swift_bridgeObjectRelease(a1[43]);
  }
  swift_bridgeObjectRelease(a1[46]);
  swift_bridgeObjectRelease(a1[48]);
  swift_bridgeObjectRelease(a1[50]);
  swift_bridgeObjectRelease(a1[53]);
  swift_bridgeObjectRelease(a1[55]);
  swift_bridgeObjectRelease(a1[57]);
  swift_bridgeObjectRelease(a1[59]);
  swift_bridgeObjectRelease(a1[61]);
  swift_bridgeObjectRelease(a1[63]);
  v9 = a1[65];
  if (v9)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a1[68]);
    swift_bridgeObjectRelease(a1[72]);
  }
  v10 = a1[76];
  if (v10)
  {
    v11 = a1[74];
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v11);
  }
  swift_bridgeObjectRelease(a1[79]);
  v12 = a1[85];
  if (v12)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(a1[87]);
    swift_bridgeObjectRelease(a1[89]);
  }
  v13 = (char *)a1 + *(int *)(a2 + 72);
  v14 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = (char *)a1 + *(int *)(a2 + 76);
  v16 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for ContentDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    v8 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v8;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v9 = *(_QWORD *)(a2 + 136);
    if (v9)
      goto LABEL_3;
LABEL_6:
    v22 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v22;
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    v23 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v23;
    v13 = *(_QWORD *)(a2 + 176);
    if (v13)
      goto LABEL_4;
    goto LABEL_7;
  }
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  v9 = *(_QWORD *)(a2 + 136);
  if (!v9)
    goto LABEL_6;
LABEL_3:
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v13 = *(_QWORD *)(a2 + 176);
  if (v13)
  {
LABEL_4:
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v13;
    v14 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v14;
    v15 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v15;
    v16 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = v16;
    v17 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v17;
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    v18 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v18;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
    *(_WORD *)(a1 + 284) = *(_WORD *)(a2 + 284);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    goto LABEL_8;
  }
LABEL_7:
  v24 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v24;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
  v25 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v25;
  v26 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v26;
LABEL_8:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  v27 = *(_QWORD *)(a2 + 304);
  if (v27)
  {
    *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = v27;
    *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
    v28 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = v28;
    v29 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v29;
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v30;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
  }
  *(_WORD *)(a1 + 353) = *(_WORD *)(a2 + 353);
  v31 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v31;
  v32 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v32;
  v33 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v33;
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  v34 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v34;
  v35 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v35;
  v36 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = v36;
  v37 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = v37;
  v38 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = v38;
  v39 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = v39;
  v61 = *(_QWORD *)(a2 + 520);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  if (v61)
  {
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = v61;
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    v40 = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 544) = v40;
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    v41 = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 576) = v41;
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    v42 = *(_QWORD *)(a2 + 608);
    if (v42)
    {
LABEL_13:
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      v43 = *(_QWORD *)(a2 + 592);
      *(_QWORD *)(a1 + 592) = v43;
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
      *(_QWORD *)(a1 + 608) = v42;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v42);
      goto LABEL_16;
    }
  }
  else
  {
    v44 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v44;
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    v45 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v45;
    v42 = *(_QWORD *)(a2 + 608);
    if (v42)
      goto LABEL_13;
  }
  v46 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v46;
LABEL_16:
  *(_WORD *)(a1 + 616) = *(_WORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  v47 = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 632) = v47;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 649) = *(_OWORD *)(a2 + 649);
  *(_BYTE *)(a1 + 665) = *(_BYTE *)(a2 + 665);
  v48 = *(_QWORD *)(a2 + 680);
  swift_bridgeObjectRetain(v47);
  if (v48)
  {
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
    *(_QWORD *)(a1 + 680) = v48;
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
    v49 = *(_QWORD *)(a2 + 696);
    *(_QWORD *)(a1 + 696) = v49;
    *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
    v50 = *(_QWORD *)(a2 + 712);
    *(_QWORD *)(a1 + 712) = v50;
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
  }
  else
  {
    v51 = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 688) = v51;
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
  }
  *(_BYTE *)(a1 + 721) = *(_BYTE *)(a2 + 721);
  v52 = *(int *)(a3 + 72);
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
  v56 = *(int *)(a3 + 76);
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
  return a1;
}

uint64_t assignWithCopy for ContentDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BAEventReporter *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BAEventReporter *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  BAEventReporter *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  id v33;
  int v34;
  int v35;
  uint64_t v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  BAEventReporter *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  int64_t v68;
  int64_t v69;
  id v70;
  uint64_t v71;
  BAEventReporter *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  int64_t v77;
  int64_t v78;
  id v79;
  uint64_t v80;
  BAEventReporter *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  int64_t v86;
  int64_t v87;
  id v88;
  uint64_t v89;
  BAEventReporter *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  int64_t v95;
  int64_t v96;
  id v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD *v110;
  __int128 *v111;
  BAEventReporter *v112;
  uint64_t v113;
  uint64_t v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  int64_t v119;
  int64_t v120;
  id v121;
  uint64_t v122;
  BAEventReporter *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  int64_t v128;
  int64_t v129;
  id v130;
  uint64_t v131;
  BAEventReporter *v132;
  SEL v133;
  id v134;
  id v135;
  id v136;
  int64_t v137;
  int64_t v138;
  id v139;
  uint64_t v140;
  BAEventReporter *v141;
  SEL v142;
  id v143;
  id v144;
  id v145;
  int64_t v146;
  int64_t v147;
  id v148;
  uint64_t v149;
  BAEventReporter *v150;
  SEL v151;
  id v152;
  id v153;
  id v154;
  int64_t v155;
  int64_t v156;
  id v157;
  int v158;
  int v159;
  uint64_t v160;
  BAEventReporter *v161;
  SEL v162;
  id v163;
  id v164;
  id v165;
  int64_t v166;
  int64_t v167;
  id v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  int v191;
  _OWORD *v192;
  __int128 *v193;
  BAEventReporter *v194;
  uint64_t v195;
  uint64_t v196;
  SEL v197;
  id v198;
  id v199;
  id v200;
  int64_t v201;
  int64_t v202;
  id v203;
  uint64_t v204;
  BAEventReporter *v205;
  SEL v206;
  id v207;
  id v208;
  id v209;
  int64_t v210;
  int64_t v211;
  id v212;
  uint64_t v213;
  BAEventReporter *v214;
  SEL v215;
  id v216;
  id v217;
  id v218;
  int64_t v219;
  int64_t v220;
  id v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  BAEventReporter *v232;
  SEL v233;
  id v234;
  id v235;
  id v236;
  int64_t v237;
  int64_t v238;
  id v239;
  uint64_t v240;
  BAEventReporter *v241;
  SEL v242;
  id v243;
  id v244;
  id v245;
  int64_t v246;
  int64_t v247;
  id v248;
  uint64_t v249;
  BAEventReporter *v250;
  SEL v251;
  id v252;
  id v253;
  id v254;
  int64_t v255;
  int64_t v256;
  id v257;
  uint64_t v258;
  BAEventReporter *v259;
  SEL v260;
  id v261;
  id v262;
  id v263;
  int64_t v264;
  int64_t v265;
  id v266;
  uint64_t v267;
  BAEventReporter *v268;
  SEL v269;
  id v270;
  id v271;
  id v272;
  int64_t v273;
  int64_t v274;
  id v275;
  uint64_t v276;
  BAEventReporter *v277;
  SEL v278;
  id v279;
  id v280;
  id v281;
  int64_t v282;
  int64_t v283;
  id v284;
  uint64_t v285;
  BAEventReporter *v286;
  SEL v287;
  id v288;
  id v289;
  id v290;
  int64_t v291;
  int64_t v292;
  id v293;
  uint64_t v294;
  BAEventReporter *v295;
  SEL v296;
  id v297;
  id v298;
  id v299;
  int64_t v300;
  int64_t v301;
  id v302;
  uint64_t v303;
  BAEventReporter *v304;
  SEL v305;
  id v306;
  id v307;
  id v308;
  int64_t v309;
  int64_t v310;
  id v311;
  _OWORD *v312;
  _OWORD *v313;
  BAEventReporter *v314;
  uint64_t v315;
  uint64_t v316;
  SEL v317;
  id v318;
  id v319;
  id v320;
  int64_t v321;
  int64_t v322;
  id v323;
  uint64_t v324;
  BAEventReporter *v325;
  SEL v326;
  id v327;
  id v328;
  id v329;
  int64_t v330;
  int64_t v331;
  id v332;
  uint64_t v333;
  uint64_t v334;
  BAEventReporter *v335;
  SEL v336;
  id v337;
  id v338;
  id v339;
  int64_t v340;
  int64_t v341;
  id v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  _OWORD *v353;
  _OWORD *v354;
  uint64_t v355;
  uint64_t v356;
  BAEventReporter *v357;
  SEL v358;
  id v359;
  id v360;
  id v361;
  int64_t v362;
  int64_t v363;
  id v364;
  uint64_t v365;
  BAEventReporter *v366;
  SEL v367;
  id v368;
  id v369;
  id v370;
  int64_t v371;
  int64_t v372;
  id v373;
  uint64_t v374;
  uint64_t v375;
  __int128 v376;
  __int128 v377;
  uint64_t v378;
  BAEventReporter *v379;
  SEL v380;
  id v381;
  id v382;
  id v383;
  int64_t v384;
  int64_t v385;
  id v386;
  __int128 v387;
  _OWORD *v388;
  __int128 *v389;
  BAEventReporter *v390;
  uint64_t v391;
  uint64_t v392;
  SEL v393;
  id v394;
  id v395;
  id v396;
  int64_t v397;
  int64_t v398;
  id v399;
  uint64_t v400;
  BAEventReporter *v401;
  SEL v402;
  id v403;
  id v404;
  id v405;
  int64_t v406;
  int64_t v407;
  id v408;
  uint64_t v409;
  BAEventReporter *v410;
  SEL v411;
  id v412;
  id v413;
  id v414;
  int64_t v415;
  int64_t v416;
  id v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;

  v6 = *(BAEventReporter **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(BAEventReporter **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v25 = *(_QWORD *)(a2 + 48);
      v26 = *(BAEventReporter **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
      v34 = *(_DWORD *)(a2 + 60);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_DWORD *)(a1 + 60) = v34;
      v35 = *(_DWORD *)(a2 + 68);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 68) = v35;
      *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
      *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
      *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
      *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v36 = *(_QWORD *)(a2 + 88);
      v37 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      sub_4E9F4((_QWORD *)a1);
      v51 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v51;
      v52 = *(_OWORD *)(a2 + 80);
      v54 = *(_OWORD *)(a2 + 32);
      v53 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v52;
      *(_OWORD *)(a1 + 32) = v54;
      *(_OWORD *)(a1 + 48) = v53;
    }
  }
  else if (v7)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v45 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v45;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v46 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v46;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v47 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v47;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
    v48 = *(_DWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_DWORD *)(a1 + 60) = v48;
    v49 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 68) = v49;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v50 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v50;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v50);
  }
  else
  {
    v55 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v55;
    v56 = *(_OWORD *)(a2 + 32);
    v57 = *(_OWORD *)(a2 + 48);
    v58 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v58;
    *(_OWORD *)(a1 + 32) = v56;
    *(_OWORD *)(a1 + 48) = v57;
  }
  v59 = (_OWORD *)(a1 + 96);
  v60 = (_OWORD *)(a2 + 96);
  v61 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v61)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v62 = *(_QWORD *)(a2 + 104);
      v63 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v62;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v71 = *(_QWORD *)(a2 + 120);
      v72 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v71;
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v80 = *(_QWORD *)(a2 + 136);
      v81 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v80;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v89 = *(_QWORD *)(a2 + 152);
      v90 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
      v98 = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_DWORD *)(a1 + 160) = v98;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 96));
      *v59 = *v60;
      v105 = *(_OWORD *)(a2 + 128);
      v104 = *(_OWORD *)(a2 + 144);
      v106 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
      *(_OWORD *)(a1 + 128) = v105;
      *(_OWORD *)(a1 + 144) = v104;
      *(_OWORD *)(a1 + 112) = v106;
    }
  }
  else if (v61)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v99 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v99;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v100 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v100;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v101 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v101;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v102 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v102;
    v103 = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v103;
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v102);
  }
  else
  {
    *v59 = *v60;
    v107 = *(_OWORD *)(a2 + 112);
    v108 = *(_OWORD *)(a2 + 128);
    v109 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_OWORD *)(a1 + 128) = v108;
    *(_OWORD *)(a1 + 144) = v109;
    *(_OWORD *)(a1 + 112) = v107;
  }
  v110 = (_OWORD *)(a1 + 168);
  v111 = (__int128 *)(a2 + 168);
  v112 = *(BAEventReporter **)(a1 + 176);
  v113 = *(_QWORD *)(a2 + 176);
  if (v112)
  {
    if (v113)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v114 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 176) = v114;
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRelease(v112, v115, v116, v117, v118, v119, v120, v121);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v122 = *(_QWORD *)(a2 + 192);
      v123 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v122;
      swift_bridgeObjectRetain(v122);
      swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v131 = *(_QWORD *)(a2 + 208);
      v132 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v131;
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRelease(v132, v133, v134, v135, v136, v137, v138, v139);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v140 = *(_QWORD *)(a2 + 224);
      v141 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v140;
      swift_bridgeObjectRetain(v140);
      swift_bridgeObjectRelease(v141, v142, v143, v144, v145, v146, v147, v148);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v149 = *(_QWORD *)(a2 + 240);
      v150 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v149;
      swift_bridgeObjectRetain(v149);
      swift_bridgeObjectRelease(v150, v151, v152, v153, v154, v155, v156, v157);
      v158 = *(_DWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
      *(_DWORD *)(a1 + 248) = v158;
      v159 = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      *(_DWORD *)(a1 + 256) = v159;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v160 = *(_QWORD *)(a2 + 272);
      v161 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v160;
      swift_bridgeObjectRetain(v160);
      swift_bridgeObjectRelease(v161, v162, v163, v164, v165, v166, v167, v168);
      v169 = *(_DWORD *)(a2 + 280);
      *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
      *(_DWORD *)(a1 + 280) = v169;
      *(_BYTE *)(a1 + 285) = *(_BYTE *)(a2 + 285);
    }
    else
    {
      sub_59D74((_QWORD *)(a1 + 168));
      v179 = *(_OWORD *)(a2 + 216);
      v181 = *v111;
      v180 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = v179;
      *v110 = v181;
      *(_OWORD *)(a1 + 184) = v180;
      v183 = *(_OWORD *)(a2 + 248);
      v182 = *(_OWORD *)(a2 + 264);
      v184 = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
      *(_OWORD *)(a1 + 248) = v183;
      *(_OWORD *)(a1 + 264) = v182;
      *(_OWORD *)(a1 + 232) = v184;
    }
  }
  else if (v113)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v170 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v170;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v171 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v171;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v172 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v172;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v173 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v173;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v174 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v174;
    v175 = *(_DWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
    *(_DWORD *)(a1 + 248) = v175;
    v176 = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    *(_DWORD *)(a1 + 256) = v176;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v177 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v177;
    v178 = *(_DWORD *)(a2 + 280);
    *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
    *(_DWORD *)(a1 + 280) = v178;
    *(_BYTE *)(a1 + 285) = *(_BYTE *)(a2 + 285);
    swift_bridgeObjectRetain(v170);
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRetain(v174);
    swift_bridgeObjectRetain(v177);
  }
  else
  {
    v185 = *v111;
    v186 = *(_OWORD *)(a2 + 184);
    v187 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v187;
    *v110 = v185;
    *(_OWORD *)(a1 + 184) = v186;
    v188 = *(_OWORD *)(a2 + 232);
    v189 = *(_OWORD *)(a2 + 248);
    v190 = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
    *(_OWORD *)(a1 + 248) = v189;
    *(_OWORD *)(a1 + 264) = v190;
    *(_OWORD *)(a1 + 232) = v188;
  }
  v191 = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v191;
  v192 = (_OWORD *)(a1 + 296);
  v193 = (__int128 *)(a2 + 296);
  v194 = *(BAEventReporter **)(a1 + 304);
  v195 = *(_QWORD *)(a2 + 304);
  if (v194)
  {
    if (v195)
    {
      *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
      v196 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 304) = v196;
      swift_bridgeObjectRetain(v196);
      swift_bridgeObjectRelease(v194, v197, v198, v199, v200, v201, v202, v203);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      v204 = *(_QWORD *)(a2 + 328);
      v205 = *(BAEventReporter **)(a1 + 328);
      *(_QWORD *)(a1 + 328) = v204;
      swift_bridgeObjectRetain(v204);
      swift_bridgeObjectRelease(v205, v206, v207, v208, v209, v210, v211, v212);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      v213 = *(_QWORD *)(a2 + 344);
      v214 = *(BAEventReporter **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v213;
      swift_bridgeObjectRetain(v213);
      swift_bridgeObjectRelease(v214, v215, v216, v217, v218, v219, v220, v221);
      *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    }
    else
    {
      sub_59D0C((_QWORD *)(a1 + 296));
      v226 = *(_OWORD *)(a2 + 312);
      v225 = *(_OWORD *)(a2 + 328);
      v227 = *v193;
      *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
      *(_OWORD *)(a1 + 312) = v226;
      *(_OWORD *)(a1 + 328) = v225;
      *v192 = v227;
    }
  }
  else if (v195)
  {
    *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
    v222 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 304) = v222;
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    v223 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 328) = v223;
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    v224 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 344) = v224;
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    swift_bridgeObjectRetain(v222);
    swift_bridgeObjectRetain(v223);
    swift_bridgeObjectRetain(v224);
  }
  else
  {
    v228 = *v193;
    v229 = *(_OWORD *)(a2 + 312);
    v230 = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
    *(_OWORD *)(a1 + 312) = v229;
    *(_OWORD *)(a1 + 328) = v230;
    *v192 = v228;
  }
  *(_WORD *)(a1 + 353) = *(_WORD *)(a2 + 353);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  v231 = *(_QWORD *)(a2 + 368);
  v232 = *(BAEventReporter **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v231;
  swift_bridgeObjectRetain(v231);
  swift_bridgeObjectRelease(v232, v233, v234, v235, v236, v237, v238, v239);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  v240 = *(_QWORD *)(a2 + 384);
  v241 = *(BAEventReporter **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v240;
  swift_bridgeObjectRetain(v240);
  swift_bridgeObjectRelease(v241, v242, v243, v244, v245, v246, v247, v248);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v249 = *(_QWORD *)(a2 + 400);
  v250 = *(BAEventReporter **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v249;
  swift_bridgeObjectRetain(v249);
  swift_bridgeObjectRelease(v250, v251, v252, v253, v254, v255, v256, v257);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  v258 = *(_QWORD *)(a2 + 424);
  v259 = *(BAEventReporter **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v258;
  swift_bridgeObjectRetain(v258);
  swift_bridgeObjectRelease(v259, v260, v261, v262, v263, v264, v265, v266);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  v267 = *(_QWORD *)(a2 + 440);
  v268 = *(BAEventReporter **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v267;
  swift_bridgeObjectRetain(v267);
  swift_bridgeObjectRelease(v268, v269, v270, v271, v272, v273, v274, v275);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v276 = *(_QWORD *)(a2 + 456);
  v277 = *(BAEventReporter **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v276;
  swift_bridgeObjectRetain(v276);
  swift_bridgeObjectRelease(v277, v278, v279, v280, v281, v282, v283, v284);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  v285 = *(_QWORD *)(a2 + 472);
  v286 = *(BAEventReporter **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v285;
  swift_bridgeObjectRetain(v285);
  swift_bridgeObjectRelease(v286, v287, v288, v289, v290, v291, v292, v293);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  v294 = *(_QWORD *)(a2 + 488);
  v295 = *(BAEventReporter **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v294;
  swift_bridgeObjectRetain(v294);
  swift_bridgeObjectRelease(v295, v296, v297, v298, v299, v300, v301, v302);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  v303 = *(_QWORD *)(a2 + 504);
  v304 = *(BAEventReporter **)(a1 + 504);
  *(_QWORD *)(a1 + 504) = v303;
  swift_bridgeObjectRetain(v303);
  swift_bridgeObjectRelease(v304, v305, v306, v307, v308, v309, v310, v311);
  v312 = (_OWORD *)(a1 + 512);
  v313 = (_OWORD *)(a2 + 512);
  v314 = *(BAEventReporter **)(a1 + 520);
  v315 = *(_QWORD *)(a2 + 520);
  if (v314)
  {
    if (v315)
    {
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      v316 = *(_QWORD *)(a2 + 520);
      *(_QWORD *)(a1 + 520) = v316;
      swift_bridgeObjectRetain(v316);
      swift_bridgeObjectRelease(v314, v317, v318, v319, v320, v321, v322, v323);
      *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      v324 = *(_QWORD *)(a2 + 544);
      v325 = *(BAEventReporter **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = v324;
      swift_bridgeObjectRetain(v324);
      swift_bridgeObjectRelease(v325, v326, v327, v328, v329, v330, v331, v332);
      v333 = *(_QWORD *)(a2 + 552);
      *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
      *(_QWORD *)(a1 + 552) = v333;
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      v334 = *(_QWORD *)(a2 + 576);
      v335 = *(BAEventReporter **)(a1 + 576);
      *(_QWORD *)(a1 + 576) = v334;
      swift_bridgeObjectRetain(v334);
      swift_bridgeObjectRelease(v335, v336, v337, v338, v339, v340, v341, v342);
    }
    else
    {
      sub_AC048((_QWORD *)(a1 + 512));
      *v312 = *v313;
      v348 = *(_OWORD *)(a2 + 544);
      v347 = *(_OWORD *)(a2 + 560);
      v349 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_OWORD *)(a1 + 544) = v348;
      *(_OWORD *)(a1 + 560) = v347;
      *(_OWORD *)(a1 + 528) = v349;
    }
  }
  else if (v315)
  {
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    v343 = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 520) = v343;
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    v344 = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 544) = v344;
    v345 = *(_QWORD *)(a2 + 552);
    *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
    *(_QWORD *)(a1 + 552) = v345;
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    v346 = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 576) = v346;
    swift_bridgeObjectRetain(v343);
    swift_bridgeObjectRetain(v344);
    swift_bridgeObjectRetain(v346);
  }
  else
  {
    *v312 = *v313;
    v350 = *(_OWORD *)(a2 + 528);
    v351 = *(_OWORD *)(a2 + 544);
    v352 = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 544) = v351;
    *(_OWORD *)(a1 + 560) = v352;
    *(_OWORD *)(a1 + 528) = v350;
  }
  v353 = (_OWORD *)(a1 + 584);
  v354 = (_OWORD *)(a2 + 584);
  v355 = *(_QWORD *)(a2 + 608);
  if (*(_QWORD *)(a1 + 608))
  {
    if (v355)
    {
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      v356 = *(_QWORD *)(a2 + 592);
      v357 = *(BAEventReporter **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v356;
      swift_bridgeObjectRetain(v356);
      swift_bridgeObjectRelease(v357, v358, v359, v360, v361, v362, v363, v364);
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
      v365 = *(_QWORD *)(a2 + 608);
      v366 = *(BAEventReporter **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = v365;
      swift_bridgeObjectRetain(v365);
      swift_bridgeObjectRelease(v366, v367, v368, v369, v370, v371, v372, v373);
    }
    else
    {
      sub_1E02C(a1 + 584);
      v376 = *(_OWORD *)(a2 + 600);
      *v353 = *v354;
      *(_OWORD *)(a1 + 600) = v376;
    }
  }
  else if (v355)
  {
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    v374 = *(_QWORD *)(a2 + 592);
    *(_QWORD *)(a1 + 592) = v374;
    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
    v375 = *(_QWORD *)(a2 + 608);
    *(_QWORD *)(a1 + 608) = v375;
    swift_bridgeObjectRetain(v374);
    swift_bridgeObjectRetain(v375);
  }
  else
  {
    v377 = *(_OWORD *)(a2 + 600);
    *v353 = *v354;
    *(_OWORD *)(a1 + 600) = v377;
  }
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_BYTE *)(a1 + 617) = *(_BYTE *)(a2 + 617);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  v378 = *(_QWORD *)(a2 + 632);
  v379 = *(BAEventReporter **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = v378;
  swift_bridgeObjectRetain(v378);
  swift_bridgeObjectRelease(v379, v380, v381, v382, v383, v384, v385, v386);
  v387 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 649) = *(_OWORD *)(a2 + 649);
  *(_OWORD *)(a1 + 640) = v387;
  *(_BYTE *)(a1 + 665) = *(_BYTE *)(a2 + 665);
  v388 = (_OWORD *)(a1 + 672);
  v389 = (__int128 *)(a2 + 672);
  v390 = *(BAEventReporter **)(a1 + 680);
  v391 = *(_QWORD *)(a2 + 680);
  if (v390)
  {
    if (v391)
    {
      *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
      v392 = *(_QWORD *)(a2 + 680);
      *(_QWORD *)(a1 + 680) = v392;
      swift_bridgeObjectRetain(v392);
      swift_bridgeObjectRelease(v390, v393, v394, v395, v396, v397, v398, v399);
      *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
      v400 = *(_QWORD *)(a2 + 696);
      v401 = *(BAEventReporter **)(a1 + 696);
      *(_QWORD *)(a1 + 696) = v400;
      swift_bridgeObjectRetain(v400);
      swift_bridgeObjectRelease(v401, v402, v403, v404, v405, v406, v407, v408);
      *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
      v409 = *(_QWORD *)(a2 + 712);
      v410 = *(BAEventReporter **)(a1 + 712);
      *(_QWORD *)(a1 + 712) = v409;
      swift_bridgeObjectRetain(v409);
      swift_bridgeObjectRelease(v410, v411, v412, v413, v414, v415, v416, v417);
      *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    }
    else
    {
      sub_59DA8((_QWORD *)(a1 + 672));
      v422 = *(_OWORD *)(a2 + 688);
      v421 = *(_OWORD *)(a2 + 704);
      v423 = *v389;
      *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
      *(_OWORD *)(a1 + 688) = v422;
      *(_OWORD *)(a1 + 704) = v421;
      *v388 = v423;
    }
  }
  else if (v391)
  {
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
    v418 = *(_QWORD *)(a2 + 680);
    *(_QWORD *)(a1 + 680) = v418;
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
    v419 = *(_QWORD *)(a2 + 696);
    *(_QWORD *)(a1 + 696) = v419;
    *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
    v420 = *(_QWORD *)(a2 + 712);
    *(_QWORD *)(a1 + 712) = v420;
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    swift_bridgeObjectRetain(v418);
    swift_bridgeObjectRetain(v419);
    swift_bridgeObjectRetain(v420);
  }
  else
  {
    v424 = *v389;
    v425 = *(_OWORD *)(a2 + 688);
    v426 = *(_OWORD *)(a2 + 704);
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    *(_OWORD *)(a1 + 688) = v425;
    *(_OWORD *)(a1 + 704) = v426;
    *v388 = v424;
  }
  *(_BYTE *)(a1 + 721) = *(_BYTE *)(a2 + 721);
  v427 = *(int *)(a3 + 72);
  v428 = a1 + v427;
  v429 = a2 + v427;
  v430 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v430 - 8) + 24))(v428, v429, v430);
  v431 = *(int *)(a3 + 76);
  v432 = a1 + v431;
  v433 = a2 + v431;
  v434 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v434 - 8) + 24))(v432, v433, v434);
  return a1;
}

uint64_t initializeWithTake for ContentDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v11 = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v11;
  *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
  v12 = *(_OWORD *)(a2 + 328);
  v13 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v12;
  *(_OWORD *)(a1 + 296) = v13;
  *(_WORD *)(a1 + 353) = *(_WORD *)(a2 + 353);
  v14 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v14;
  v15 = *(_OWORD *)(a2 + 392);
  v16 = *(_OWORD *)(a2 + 408);
  v17 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v17;
  *(_OWORD *)(a1 + 392) = v15;
  *(_OWORD *)(a1 + 408) = v16;
  v18 = *(_OWORD *)(a2 + 456);
  v19 = *(_OWORD *)(a2 + 472);
  v20 = *(_OWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 488) = v20;
  *(_OWORD *)(a1 + 456) = v18;
  v21 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v21;
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  v22 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v22;
  v23 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v23;
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 649) = *(_OWORD *)(a2 + 649);
  *(_BYTE *)(a1 + 665) = *(_BYTE *)(a2 + 665);
  v24 = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = v24;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  v25 = *(int *)(a3 + 72);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_WORD *)(a1 + 720) = *(_WORD *)(a2 + 720);
  v28 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  v29 = *(int *)(a3 + 76);
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  return a1;
}

uint64_t assignWithTake for ContentDetailsViewEvent.Model(uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  BAEventReporter *v11;
  uint64_t v12;
  uint64_t v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  uint64_t v22;
  BAEventReporter *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  BAEventReporter *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  int64_t v37;
  int64_t v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  BAEventReporter *v44;
  uint64_t v45;
  BAEventReporter *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  int64_t v51;
  int64_t v52;
  id v53;
  uint64_t v54;
  BAEventReporter *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  int64_t v60;
  int64_t v61;
  id v62;
  uint64_t v63;
  BAEventReporter *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  int64_t v69;
  int64_t v70;
  id v71;
  __int128 v72;
  __int128 v73;
  BAEventReporter *v74;
  uint64_t v75;
  uint64_t v76;
  BAEventReporter *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  int64_t v82;
  int64_t v83;
  id v84;
  uint64_t v85;
  BAEventReporter *v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  BAEventReporter *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  int64_t v100;
  int64_t v101;
  id v102;
  uint64_t v103;
  BAEventReporter *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  int64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  BAEventReporter *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  int64_t v118;
  int64_t v119;
  id v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  BAEventReporter *v124;
  uint64_t v125;
  uint64_t v126;
  BAEventReporter *v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  int64_t v132;
  int64_t v133;
  id v134;
  uint64_t v135;
  BAEventReporter *v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  int64_t v141;
  int64_t v142;
  id v143;
  __int128 v144;
  uint64_t v145;
  BAEventReporter *v146;
  uint64_t v147;
  BAEventReporter *v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  int64_t v153;
  int64_t v154;
  id v155;
  uint64_t v156;
  BAEventReporter *v157;
  SEL v158;
  id v159;
  id v160;
  id v161;
  int64_t v162;
  int64_t v163;
  id v164;
  uint64_t v165;
  BAEventReporter *v166;
  SEL v167;
  id v168;
  id v169;
  id v170;
  int64_t v171;
  int64_t v172;
  id v173;
  uint64_t v174;
  BAEventReporter *v175;
  SEL v176;
  id v177;
  id v178;
  id v179;
  int64_t v180;
  int64_t v181;
  id v182;
  uint64_t v183;
  BAEventReporter *v184;
  SEL v185;
  id v186;
  id v187;
  id v188;
  int64_t v189;
  int64_t v190;
  id v191;
  uint64_t v192;
  BAEventReporter *v193;
  SEL v194;
  id v195;
  id v196;
  id v197;
  int64_t v198;
  int64_t v199;
  id v200;
  uint64_t v201;
  BAEventReporter *v202;
  SEL v203;
  id v204;
  id v205;
  id v206;
  int64_t v207;
  int64_t v208;
  id v209;
  uint64_t v210;
  BAEventReporter *v211;
  SEL v212;
  id v213;
  id v214;
  id v215;
  int64_t v216;
  int64_t v217;
  id v218;
  const char *v219;
  void *v220;
  void *v221;
  void *v222;
  int64_t v223;
  int64_t v224;
  void *v225;
  BAEventReporter *v226;
  uint64_t v227;
  BAEventReporter *v228;
  SEL v229;
  id v230;
  id v231;
  id v232;
  int64_t v233;
  int64_t v234;
  id v235;
  BAEventReporter *v236;
  SEL v237;
  id v238;
  id v239;
  id v240;
  int64_t v241;
  int64_t v242;
  id v243;
  __int128 v244;
  __int128 v245;
  BAEventReporter *v246;
  BAEventReporter *v247;
  SEL v248;
  id v249;
  id v250;
  id v251;
  int64_t v252;
  int64_t v253;
  id v254;
  __int128 v255;
  BAEventReporter *v256;
  const char *v257;
  void *v258;
  void *v259;
  void *v260;
  int64_t v261;
  int64_t v262;
  void *v263;
  BAEventReporter *v264;
  uint64_t v265;
  BAEventReporter *v266;
  SEL v267;
  id v268;
  id v269;
  id v270;
  int64_t v271;
  int64_t v272;
  id v273;
  BAEventReporter *v274;
  SEL v275;
  id v276;
  id v277;
  id v278;
  int64_t v279;
  int64_t v280;
  id v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;

  v11 = *(BAEventReporter **)(a1 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if (v12)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v12;
      swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(BAEventReporter **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v13;
      swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
      v22 = *(_QWORD *)(a2 + 48);
      v23 = *(BAEventReporter **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v22;
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
      *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
      v31 = *(_QWORD *)(a2 + 88);
      v32 = *(BAEventReporter **)(a1 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v31;
      swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_6;
    }
    sub_4E9F4((_QWORD *)a1);
  }
  v40 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v40;
  v41 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v41;
  v42 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v42;
LABEL_6:
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a2 + 136))
    {
      v43 = *(_QWORD *)(a2 + 104);
      v44 = *(BAEventReporter **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v43;
      swift_bridgeObjectRelease(v44, (SEL)a2, a3, a4, a5, a6, a7, a8);
      v45 = *(_QWORD *)(a2 + 120);
      v46 = *(BAEventReporter **)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v45;
      swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
      v54 = *(_QWORD *)(a2 + 136);
      v55 = *(BAEventReporter **)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v54;
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      v63 = *(_QWORD *)(a2 + 152);
      v64 = *(BAEventReporter **)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v63;
      swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      goto LABEL_11;
    }
    sub_59D40((_QWORD *)(a1 + 96));
  }
  v72 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v72;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v73 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v73;
LABEL_11:
  v74 = *(BAEventReporter **)(a1 + 176);
  if (v74)
  {
    v75 = *(_QWORD *)(a2 + 176);
    if (v75)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v75;
      swift_bridgeObjectRelease(v74, (SEL)a2, a3, a4, a5, a6, a7, a8);
      v76 = *(_QWORD *)(a2 + 192);
      v77 = *(BAEventReporter **)(a1 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v76;
      swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
      v85 = *(_QWORD *)(a2 + 208);
      v86 = *(BAEventReporter **)(a1 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v85;
      swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
      v94 = *(_QWORD *)(a2 + 224);
      v95 = *(BAEventReporter **)(a1 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = v94;
      swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
      v103 = *(_QWORD *)(a2 + 240);
      v104 = *(BAEventReporter **)(a1 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v103;
      swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
      *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      v112 = *(_QWORD *)(a2 + 272);
      v113 = *(BAEventReporter **)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v112;
      swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
      *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
      *(_WORD *)(a1 + 284) = *(_WORD *)(a2 + 284);
      goto LABEL_16;
    }
    sub_59D74((_QWORD *)(a1 + 168));
  }
  v121 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v121;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 278) = *(_QWORD *)(a2 + 278);
  v122 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v122;
  v123 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v123;
LABEL_16:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  v124 = *(BAEventReporter **)(a1 + 304);
  if (v124)
  {
    v125 = *(_QWORD *)(a2 + 304);
    if (v125)
    {
      *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v125;
      swift_bridgeObjectRelease(v124, (SEL)a2, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
      v126 = *(_QWORD *)(a2 + 328);
      v127 = *(BAEventReporter **)(a1 + 328);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = v126;
      swift_bridgeObjectRelease(v127, v128, v129, v130, v131, v132, v133, v134);
      v135 = *(_QWORD *)(a2 + 344);
      v136 = *(BAEventReporter **)(a1 + 344);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = v135;
      swift_bridgeObjectRelease(v136, v137, v138, v139, v140, v141, v142, v143);
      *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
      goto LABEL_21;
    }
    sub_59D0C((_QWORD *)(a1 + 296));
  }
  v144 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v144;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
LABEL_21:
  *(_WORD *)(a1 + 353) = *(_WORD *)(a2 + 353);
  v145 = *(_QWORD *)(a2 + 368);
  v146 = *(BAEventReporter **)(a1 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v145;
  swift_bridgeObjectRelease(v146, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v147 = *(_QWORD *)(a2 + 384);
  v148 = *(BAEventReporter **)(a1 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v147;
  swift_bridgeObjectRelease(v148, v149, v150, v151, v152, v153, v154, v155);
  v156 = *(_QWORD *)(a2 + 400);
  v157 = *(BAEventReporter **)(a1 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v156;
  swift_bridgeObjectRelease(v157, v158, v159, v160, v161, v162, v163, v164);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  v165 = *(_QWORD *)(a2 + 424);
  v166 = *(BAEventReporter **)(a1 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v165;
  swift_bridgeObjectRelease(v166, v167, v168, v169, v170, v171, v172, v173);
  v174 = *(_QWORD *)(a2 + 440);
  v175 = *(BAEventReporter **)(a1 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v174;
  swift_bridgeObjectRelease(v175, v176, v177, v178, v179, v180, v181, v182);
  v183 = *(_QWORD *)(a2 + 456);
  v184 = *(BAEventReporter **)(a1 + 456);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = v183;
  swift_bridgeObjectRelease(v184, v185, v186, v187, v188, v189, v190, v191);
  v192 = *(_QWORD *)(a2 + 472);
  v193 = *(BAEventReporter **)(a1 + 472);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = v192;
  swift_bridgeObjectRelease(v193, v194, v195, v196, v197, v198, v199, v200);
  v201 = *(_QWORD *)(a2 + 488);
  v202 = *(BAEventReporter **)(a1 + 488);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = v201;
  swift_bridgeObjectRelease(v202, v203, v204, v205, v206, v207, v208, v209);
  v210 = *(_QWORD *)(a2 + 504);
  v211 = *(BAEventReporter **)(a1 + 504);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = v210;
  swift_bridgeObjectRelease(v211, v212, v213, v214, v215, v216, v217, v218);
  v226 = *(BAEventReporter **)(a1 + 520);
  if (v226)
  {
    v227 = *(_QWORD *)(a2 + 520);
    if (v227)
    {
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = v227;
      swift_bridgeObjectRelease(v226, v219, v220, v221, v222, v223, v224, v225);
      *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      v228 = *(BAEventReporter **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_bridgeObjectRelease(v228, v229, v230, v231, v232, v233, v234, v235);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      v236 = *(BAEventReporter **)(a1 + 576);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      swift_bridgeObjectRelease(v236, v237, v238, v239, v240, v241, v242, v243);
      goto LABEL_26;
    }
    sub_AC048((_QWORD *)(a1 + 512));
  }
  v244 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v244;
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  v245 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v245;
LABEL_26:
  if (*(_QWORD *)(a1 + 608))
  {
    if (*(_QWORD *)(a2 + 608))
    {
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      v246 = *(BAEventReporter **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
      swift_bridgeObjectRelease(v246, v219, v220, v221, v222, v223, v224, v225);
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
      v247 = *(BAEventReporter **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      swift_bridgeObjectRelease(v247, v248, v249, v250, v251, v252, v253, v254);
      goto LABEL_31;
    }
    sub_1E02C(a1 + 584);
  }
  v255 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v255;
LABEL_31:
  *(_WORD *)(a1 + 616) = *(_WORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  v256 = *(BAEventReporter **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  swift_bridgeObjectRelease(v256, v219, v220, v221, v222, v223, v224, v225);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 649) = *(_OWORD *)(a2 + 649);
  *(_BYTE *)(a1 + 665) = *(_BYTE *)(a2 + 665);
  v264 = *(BAEventReporter **)(a1 + 680);
  if (!v264)
  {
LABEL_35:
    v282 = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 688) = v282;
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    goto LABEL_36;
  }
  v265 = *(_QWORD *)(a2 + 680);
  if (!v265)
  {
    sub_59DA8((_QWORD *)(a1 + 672));
    goto LABEL_35;
  }
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = v265;
  swift_bridgeObjectRelease(v264, v257, v258, v259, v260, v261, v262, v263);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  v266 = *(BAEventReporter **)(a1 + 696);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  swift_bridgeObjectRelease(v266, v267, v268, v269, v270, v271, v272, v273);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  v274 = *(BAEventReporter **)(a1 + 712);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  swift_bridgeObjectRelease(v274, v275, v276, v277, v278, v279, v280, v281);
  *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
LABEL_36:
  *(_BYTE *)(a1 + 721) = *(_BYTE *)(a2 + 721);
  v283 = a3[18];
  v284 = a1 + v283;
  v285 = a2 + v283;
  v286 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v286 - 8) + 40))(v284, v285, v286);
  v287 = a3[19];
  v288 = a1 + v287;
  v289 = a2 + v287;
  v290 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v290 - 8) + 40))(v288, v289, v290);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E5BAC);
}

uint64_t sub_E5BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 368);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 72);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ContentDetailsViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E5C58);
}

uint64_t sub_E5C58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 368) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 72);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_E5CF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[16];

  v5[1] = &unk_202B28;
  v5[2] = &unk_202B40;
  v5[3] = &unk_202B58;
  v5[4] = &unk_202B70;
  v5[5] = &unk_202B88;
  v5[6] = &unk_202BA0;
  v5[7] = &unk_202BB8;
  v5[8] = &unk_202BD0;
  v5[9] = &unk_202BE8;
  v5[10] = &unk_202C00;
  v5[11] = &unk_202C18;
  v5[12] = &unk_202C30;
  v5[13] = &unk_202C48;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[14] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[15] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 16, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentDetailsViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_E5E50 + 4 * byte_202995[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_E5E84 + 4 * byte_202990[v4]))();
}

uint64_t sub_E5E84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E5E8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE5E94);
  return result;
}

uint64_t sub_E5EA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE5EA8);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_E5EAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E5EB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentDetailsViewEvent.Model.CodingKeys()
{
  return &type metadata for ContentDetailsViewEvent.Model.CodingKeys;
}

unint64_t sub_E5ED4()
{
  unint64_t result;

  result = qword_29D918;
  if (!qword_29D918)
  {
    result = swift_getWitnessTable(byte_202CFC, &type metadata for ContentDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D918);
  }
  return result;
}

unint64_t sub_E5F1C()
{
  unint64_t result;

  result = qword_29D920;
  if (!qword_29D920)
  {
    result = swift_getWitnessTable(byte_202C6C, &type metadata for ContentDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D920);
  }
  return result;
}

unint64_t sub_E5F64()
{
  unint64_t result;

  result = qword_29D928;
  if (!qword_29D928)
  {
    result = swift_getWitnessTable(byte_202C94, &type metadata for ContentDetailsViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D928);
  }
  return result;
}

uint64_t sub_E5FA8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000000021F200)
  {
    v7 = 0x800000000021F200;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021F220)
  {
    v8 = 0x800000000021F220;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F220, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000000221140)
  {
    v9 = 0x8000000000221140;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000000221140, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v10 = 0x800000000021F1E0;
    if (a2 == 0x800000000021F1E0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F1E0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v11 = 0x800000000021F240;
    if (a2 == 0x800000000021F240)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F240, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x65736163776F6C66 && a2 == 0xEC00000061746144)
  {
    v13 = 0xEC00000061746144;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736163776F6C66, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v14 = 0xE800000000000000;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v15 = 0xEA00000000006174;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x800000000021EE70)
  {
    v16 = 0x800000000021EE70;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x800000000021EE70, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_66;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v17 = 0xEE00617461446E6FLL;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000000021F260)
  {
    v18 = 0x800000000021F260;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F260, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0x746144736C616564 && a2 == 0xE900000000000061)
  {
    v19 = 0xE900000000000061;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144736C616564, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_84;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v20 = 0xE900000000000061;
LABEL_90:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_90;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 15;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

void __swiftcall AppData.init(appVersion:appBundleVersion:jsAppVersion:appBuildNumber:)(BookAnalytics::AppData *__return_ptr retstr, Swift::String appVersion, Swift::Int64 appBundleVersion, Swift::String jsAppVersion, Swift::String appBuildNumber)
{
  retstr->appVersion = appVersion;
  retstr->appBundleVersion = appBundleVersion;
  retstr->jsAppVersion = jsAppVersion;
  retstr->appBuildNumber = appBuildNumber;
}

uint64_t sub_E6650()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E6684 + 4 * byte_202D74[*v0]))(0x6973726556707061, 0xEA00000000006E6FLL);
}

unint64_t sub_E6684()
{
  return 0xD000000000000010;
}

uint64_t sub_E66A0()
{
  return 0x726556707041736ALL;
}

uint64_t sub_E66C0()
{
  return 0x646C697542707061;
}

uint64_t sub_E66E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_E70A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E6708(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E6C9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E6730(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E6C9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v4 = sub_71B4(&qword_29D930);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v27 = v1[3];
  v28 = v10;
  v11 = v1[4];
  v25 = v1[5];
  v26 = v11;
  v24 = v1[6];
  v12 = a1[3];
  v13 = a1[4];
  v14 = a1;
  v16 = v15;
  sub_7988(v14, v12);
  v17 = sub_E6C9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppData.CodingKeys, &type metadata for AppData.CodingKeys, v17, v12, v13);
  v32 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v9, &v32, v16);
  if (!v2)
  {
    v19 = v26;
    v18 = v27;
    v21 = v24;
    v20 = v25;
    v31 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v28, &v31, v16);
    v30 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v30, v16);
    v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v29, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v16);
}

void AppData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BAEventReporter *v13;
  BAEventReporter *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  int64_t v19;
  int64_t v20;
  id v21;
  BAEventReporter *v22;
  uint64_t v23;
  BAEventReporter *v24;
  BAEventReporter *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  int64_t v32;
  int64_t v33;
  id v34;
  BAEventReporter *v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  int64_t v41;
  int64_t v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  int64_t v48;
  int64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  BAEventReporter *v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v5 = sub_71B4(&qword_29D940);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_E6C9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppData.CodingKeys, &type metadata for AppData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v58 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v5);
    v14 = v13;
    v57 = 1;
    swift_bridgeObjectRetain(v13);
    v54 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v5);
    v56 = 2;
    v52 = KeyedDecodingContainer.decode(_:forKey:)(&v56, v5);
    v53 = v22;
    v55 = 3;
    swift_bridgeObjectRetain(v22);
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
    v25 = v24;
    v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v27 = v23;
    v26(v8, v5);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v14, v28, v29, v30, v31, v32, v33, v34);
    *a2 = v12;
    a2[1] = (uint64_t)v14;
    v35 = v53;
    v36 = v52;
    a2[2] = v54;
    a2[3] = v36;
    a2[4] = (uint64_t)v35;
    a2[5] = v27;
    a2[6] = (uint64_t)v25;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v25, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(v35, v44, v45, v46, v47, v48, v49, v50);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

void sub_E6B60(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  AppData.init(from:)(a1, a2);
}

uint64_t sub_E6B74(_QWORD *a1)
{
  return AppData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics7AppDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  char v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a2[1];
  v13 = a2[2];
  v12 = a2[3];
  v15 = a2[4];
  v14 = a2[5];
  v16 = a2[6];
  if (v4 == *a2 && v5 == v11)
  {
    if (v6 != v13)
      return 0;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v11, 0);
    result = 0;
    if ((v18 & 1) == 0 || v6 != v13)
      return result;
  }
  if (v7 == v12 && v8 == v15
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v12, v15, 0), result = 0, (v19 & 1) != 0))
  {
    if (v9 == v14 && v10 == v16)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v14, v16, 0);
  }
  return result;
}

unint64_t sub_E6C9C()
{
  unint64_t result;

  result = qword_29D938;
  if (!qword_29D938)
  {
    result = swift_getWitnessTable(byte_202F1C, &type metadata for AppData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D938);
  }
  return result;
}

unint64_t sub_E6CE4()
{
  unint64_t result;

  result = qword_29D948;
  if (!qword_29D948)
  {
    result = swift_getWitnessTable("}X\a", &type metadata for AppData);
    atomic_store(result, (unint64_t *)&qword_29D948);
  }
  return result;
}

unint64_t sub_E6D2C()
{
  unint64_t result;

  result = qword_29D950;
  if (!qword_29D950)
  {
    result = swift_getWitnessTable("eX\a", &type metadata for AppData);
    atomic_store(result, (unint64_t *)&qword_29D950);
  }
  return result;
}

uint64_t destroy for AltContentTypeExposureData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for AppData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for AppData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for AppData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

ValueMetadata *type metadata accessor for AppData()
{
  return &type metadata for AppData;
}

uint64_t storeEnumTagSinglePayload for AppData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_E6F48 + 4 * byte_202D7D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_E6F7C + 4 * byte_202D78[v4]))();
}

uint64_t sub_E6F7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E6F84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE6F8CLL);
  return result;
}

uint64_t sub_E6F98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE6FA0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_E6FA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E6FAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppData.CodingKeys()
{
  return &type metadata for AppData.CodingKeys;
}

unint64_t sub_E6FCC()
{
  unint64_t result;

  result = qword_29D958;
  if (!qword_29D958)
  {
    result = swift_getWitnessTable("eW\a", &type metadata for AppData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D958);
  }
  return result;
}

unint64_t sub_E7014()
{
  unint64_t result;
  int vars0;

  result = qword_29D960;
  if (!qword_29D960)
  {
    result = swift_getWitnessTable("%X\a", vars0);
    atomic_store(result, (unint64_t *)&qword_29D960);
  }
  return result;
}

unint64_t sub_E705C()
{
  unint64_t result;

  result = qword_29D968;
  if (!qword_29D968)
  {
    result = swift_getWitnessTable("\rX\a", &type metadata for AppData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D968);
  }
  return result;
}

uint64_t sub_E70A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6973726556707061 && a2 == 0xEA00000000006E6FLL)
  {
    v5 = 0xEA00000000006E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6973726556707061, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000000221160;
    if (a2 == 0x8000000000221160)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000000221160, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x726556707041736ALL && a2 == 0xEC0000006E6F6973)
  {
    v8 = 0xEC0000006E6F6973;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726556707041736ALL, 0xEC0000006E6F6973, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x646C697542707061 && a2 == 0xEE007265626D754ELL)
  {
    swift_bridgeObjectRelease(0xEE007265626D754ELL);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646C697542707061, 0xEE007265626D754ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_E729C()
{
  return 0x6974634172657375;
}

uint64_t sub_E72B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6974634172657375 && a2 == 0xEA00000000006E6FLL)
  {
    result = swift_bridgeObjectRelease(0xEA00000000006E6FLL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974634172657375, 0xEA00000000006E6FLL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_E7358(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E76DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E7380(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E76DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NotificationOptInActionData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_29D970);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_E76DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationOptInActionData.CodingKeys, &type metadata for NotificationOptInActionData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_E7720();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for UserAction, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NotificationOptInActionData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_29D988);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_E76DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationOptInActionData.CodingKeys, &type metadata for NotificationOptInActionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_E7764();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for UserAction, v13, v5, &type metadata for UserAction, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_E75C0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NotificationOptInActionData.init(from:)(a1, a2);
}

uint64_t sub_E75D4(_QWORD *a1)
{
  return NotificationOptInActionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics27NotificationOptInActionDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE500000000000000;
  v4 = 0x6E4974706FLL;
  if (v2 != 1)
  {
    v4 = 0x74754F74706FLL;
    v3 = 0xE600000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  v7 = 0xE500000000000000;
  v8 = 0x6E4974706FLL;
  if (*a2 != 1)
  {
    v8 = 0x74754F74706FLL;
    v7 = 0xE600000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xE700000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_E76DC()
{
  unint64_t result;

  result = qword_29D978;
  if (!qword_29D978)
  {
    result = swift_getWitnessTable(byte_203120, &type metadata for NotificationOptInActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D978);
  }
  return result;
}

unint64_t sub_E7720()
{
  unint64_t result;

  result = qword_29D980;
  if (!qword_29D980)
  {
    result = swift_getWitnessTable("q>\a", &type metadata for UserAction);
    atomic_store(result, (unint64_t *)&qword_29D980);
  }
  return result;
}

unint64_t sub_E7764()
{
  unint64_t result;

  result = qword_29D990;
  if (!qword_29D990)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UserAction, &type metadata for UserAction);
    atomic_store(result, (unint64_t *)&qword_29D990);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotificationOptInActionData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_E77FC + 4 * byte_202F75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_E7830 + 4 * byte_202F70[v4]))();
}

uint64_t sub_E7830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E7838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE7840);
  return result;
}

uint64_t sub_E784C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE7854);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_E7858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E7860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationOptInActionData()
{
  return &type metadata for NotificationOptInActionData;
}

uint64_t storeEnumTagSinglePayload for NotificationOptInActionData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_E78BC + 4 * byte_202F7A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_E78DC + 4 * byte_202F7F[v4]))();
}

_BYTE *sub_E78BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_E78DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_E78E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_E78EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_E78F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_E78FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotificationOptInActionData.CodingKeys()
{
  return &type metadata for NotificationOptInActionData.CodingKeys;
}

unint64_t sub_E791C()
{
  unint64_t result;

  result = qword_29D998;
  if (!qword_29D998)
  {
    result = swift_getWitnessTable("IW\a", &type metadata for NotificationOptInActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D998);
  }
  return result;
}

unint64_t sub_E7964()
{
  unint64_t result;

  result = qword_29D9A0;
  if (!qword_29D9A0)
  {
    result = swift_getWitnessTable("\tX\a", &type metadata for NotificationOptInActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D9A0);
  }
  return result;
}

unint64_t sub_E79AC()
{
  unint64_t result;

  result = qword_29D9A8;
  if (!qword_29D9A8)
  {
    result = swift_getWitnessTable(byte_203090, &type metadata for NotificationOptInActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29D9A8);
  }
  return result;
}

BookAnalytics::RedownloadFailureReason_optional __swiftcall RedownloadFailureReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::RedownloadFailureReason_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267A98, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t RedownloadFailureReason.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x436572756C696166;
  if (*v0 != 1)
    v1 = 0x6F436572756C6166;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_E7AB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2820C(*a1, *a2);
}

unint64_t sub_E7AC4()
{
  unint64_t result;

  result = qword_29D9B0;
  if (!qword_29D9B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RedownloadFailureReason, &type metadata for RedownloadFailureReason);
    atomic_store(result, (unint64_t *)&qword_29D9B0);
  }
  return result;
}

Swift::Int sub_E7B08()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEC0000003165646FLL;
  v3 = 0x436572756C696166;
  if (v1 != 1)
  {
    v3 = 0x6F436572756C6166;
    v2 = 0xEB00000000326564;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_E7BB8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEC0000003165646FLL;
  v3 = 0x436572756C696166;
  if (*v1 != 1)
  {
    v3 = 0x6F436572756C6166;
    v2 = 0xEB00000000326564;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_E7C44(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEC0000003165646FLL;
  v4 = 0x436572756C696166;
  if (v2 != 1)
  {
    v4 = 0x6F436572756C6166;
    v3 = 0xEB00000000326564;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::RedownloadFailureReason_optional sub_E7CF0(Swift::String *a1)
{
  return RedownloadFailureReason.init(rawValue:)(*a1);
}

void sub_E7CFC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEC0000003165646FLL;
  v5 = 0x436572756C696166;
  if (v2 != 1)
  {
    v5 = 0x6F436572756C6166;
    v4 = 0xEB00000000326564;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_E7D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E7EE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_E7DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E7EE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for RedownloadFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_E7E60 + 4 * byte_203175[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_E7E94 + 4 * byte_203170[v4]))();
}

uint64_t sub_E7E94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E7E9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE7EA4);
  return result;
}

uint64_t sub_E7EB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE7EB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_E7EBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E7EC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RedownloadFailureReason()
{
  return &type metadata for RedownloadFailureReason;
}

unint64_t sub_E7EE0()
{
  unint64_t result;

  result = qword_29D9B8;
  if (!qword_29D9B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RedownloadFailureReason, &type metadata for RedownloadFailureReason);
    atomic_store(result, (unint64_t *)&qword_29D9B8);
  }
  return result;
}

uint64_t sub_E7F24(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_29D9C0, &enum case for SessionGroup.default(_:));
}

uint64_t static DragDropEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295868, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D9C0, a1);
}

uint64_t sub_E7F64(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_29D9D8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static DragDropEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295870, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D9D8, a1);
}

uint64_t DragDropEvent.dragDropData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29D9F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DragDropEvent.dragDropData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_29D9F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t DragDropEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DragDropEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DragDropEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_29DA78, (uint64_t)&nominal type descriptor for DragDropEvent);
}

uint64_t DragDropEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DragDropEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DragDropEvent.eventData.modify())()
{
  type metadata accessor for DragDropEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t DragDropEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_29D9F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for DragDropEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t DragDropEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DragDropEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DragDropEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_29DB10, (uint64_t)&nominal type descriptor for DragDropEvent.Model);
}

uint64_t DragDropEvent.Model.init(dragDropData:eventData:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for DragDropEvent.Model(0) + 20);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_E821C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x706F724467617264;
}

uint64_t sub_E8264@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_E93B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E8288(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E843C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E82B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E843C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DragDropEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  v5 = sub_71B4(&qword_29D9F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_E843C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DragDropEvent.Model.CodingKeys, &type metadata for DragDropEvent.Model.CodingKeys, v11, v9, v10);
  v18 = *v3;
  HIBYTE(v17) = 0;
  v12 = sub_E8480();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, (char *)&v17 + 7, v5, &type metadata for DragDropData, v12);
  if (!v2)
  {
    v13 = (char *)v3 + *(int *)(type metadata accessor for DragDropEvent.Model(0) + 20);
    BYTE6(v17) = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, (char *)&v17 + 6, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_E843C()
{
  unint64_t result;

  result = qword_29DA00;
  if (!qword_29DA00)
  {
    result = swift_getWitnessTable(byte_203420, &type metadata for DragDropEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DA00);
  }
  return result;
}

unint64_t sub_E8480()
{
  unint64_t result;

  result = qword_29DA08;
  if (!qword_29DA08)
  {
    result = swift_getWitnessTable("Y/\a", &type metadata for DragDropData);
    atomic_store(result, (unint64_t *)&qword_29DA08);
  }
  return result;
}

void DragDropEvent.Model.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = a2;
  v25 = type metadata accessor for EventData(0);
  v22 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v24 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_71B4(&qword_29DA10);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DragDropEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_E843C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DragDropEvent.Model.CodingKeys, &type metadata for DragDropEvent.Model.CodingKeys, v13, v12, v11);
  if (v2)
  {
    sub_7DAC(a1);
  }
  else
  {
    v20 = a1;
    v21 = v5;
    v14 = v10;
    v15 = v24;
    v16 = v25;
    v28 = 0;
    v17 = sub_E8730();
    v18 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for DragDropData, &v28, v26, &type metadata for DragDropData, v17);
    *(_QWORD *)v14 = v29;
    v27 = 1;
    v19 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v16, &v27, v18, v16, v19);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v18);
    (*(void (**)(char *, _QWORD *, uint64_t))(v22 + 32))(&v14[*(int *)(v8 + 20)], v15, v16);
    sub_E8774((uint64_t)v14, v23);
    sub_7DAC(v20);
    sub_E87B8((uint64_t)v14);
  }
}

unint64_t sub_E8730()
{
  unint64_t result;

  result = qword_29DA18;
  if (!qword_29DA18)
  {
    result = swift_getWitnessTable("q/\a", &type metadata for DragDropData);
    atomic_store(result, (unint64_t *)&qword_29DA18);
  }
  return result;
}

uint64_t sub_E8774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DragDropEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_E87B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DragDropEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_E87F4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DragDropEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_E8808(_QWORD *a1)
{
  return DragDropEvent.Model.encode(to:)(a1);
}

uint64_t sub_E881C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295868, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_29D9C0, (uint64_t)sub_E7F24, a1);
}

uint64_t sub_E8840@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295870, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_29D9D8, (uint64_t)sub_E7F64, a1);
}

uint64_t sub_E8864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_29D9F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for DragDropEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_29D9F0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for DragDropEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_29D9F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for DragDropEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29D9F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for DragDropEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29D9F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for DragDropEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29D9F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for DragDropEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_29D9F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragDropEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E8C14);
}

uint64_t sub_E8C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_29D9F0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for DragDropEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E8C9C);
}

uint64_t sub_E8C9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_29D9F0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_E8D20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_E8DA4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_E8DA4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_29DA88)
  {
    v2 = sub_E8730();
    v3 = sub_E8480();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for DragDropData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_29DA88);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DragDropEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for EventData(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for DragDropEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for DragDropEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for DragDropEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *initializeWithTake for DragDropEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for DragDropEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragDropEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E90A0);
}

uint64_t sub_E90A0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DragDropEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E9128);
}

char *sub_E9128(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_E919C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DragDropEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_E9260 + 4 * byte_203299[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_E9294 + 4 * byte_203294[v4]))();
}

uint64_t sub_E9294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E929C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE92A4);
  return result;
}

uint64_t sub_E92B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE92B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_E92BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E92C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DragDropEvent.Model.CodingKeys()
{
  return &type metadata for DragDropEvent.Model.CodingKeys;
}

unint64_t sub_E92E4()
{
  unint64_t result;

  result = qword_29DB48;
  if (!qword_29DB48)
  {
    result = swift_getWitnessTable(byte_2033F8, &type metadata for DragDropEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DB48);
  }
  return result;
}

unint64_t sub_E932C()
{
  unint64_t result;

  result = qword_29DB50;
  if (!qword_29DB50)
  {
    result = swift_getWitnessTable("aW\a", &type metadata for DragDropEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DB50);
  }
  return result;
}

unint64_t sub_E9374()
{
  unint64_t result;

  result = qword_29DB58;
  if (!qword_29DB58)
  {
    result = swift_getWitnessTable("IW\a", &type metadata for DragDropEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_29DB58);
  }
  return result;
}

uint64_t sub_E93B8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x706F724467617264 && a2 == 0xEC00000061746144)
  {
    v5 = 0xEC00000061746144;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706F724467617264, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::ContentSubType_optional __swiftcall ContentSubType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ContentSubType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267B00, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ContentSubType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E9554 + 4 * byte_203470[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_E9554()
{
  return 7630194;
}

uint64_t sub_E9564()
{
  return 0x79616C6465786966;
}

uint64_t sub_E9584()
{
  return 0x6F69746964617274;
}

void sub_E95A4(char *a1)
{
  sub_2B74C(*a1);
}

unint64_t sub_E95B4()
{
  unint64_t result;

  result = qword_29DB60;
  if (!qword_29DB60)
  {
    result = swift_getWitnessTable("YW\a", &type metadata for ContentSubType);
    atomic_store(result, (unint64_t *)&qword_29DB60);
  }
  return result;
}

void sub_E95F8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_E9644()
{
  uint64_t v1;

  String.hash(into:)(&v1, 7630194, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

void sub_E96BC()
{
  __asm { BR              X10 }
}

uint64_t sub_E96F8(uint64_t a1)
{
  String.hash(into:)(a1, 7630194, 0xE300000000000000);
  return swift_bridgeObjectRelease(0xE300000000000000);
}

void sub_E975C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_E97A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 7630194, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

BookAnalytics::ContentSubType_optional sub_E981C(Swift::String *a1)
{
  return ContentSubType.init(rawValue:)(*a1);
}

uint64_t sub_E9828()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_E9858 + 4 * byte_203480[*v0]))();
}

void sub_E9858(_QWORD *a1@<X8>)
{
  *a1 = 7630194;
  a1[1] = 0xE300000000000000;
}

void sub_E986C(_QWORD *a1@<X8>)
{
  *a1 = 0x79616C6465786966;
  a1[1] = 0xEB0000000074756FLL;
}

void sub_E9890(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69746964617274;
  a1[1] = 0xEB000000006C616ELL;
}

uint64_t sub_E98B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E9A28();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_E9910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E9A28();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ContentSubType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_E99A8 + 4 * byte_203489[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_E99DC + 4 * byte_203484[v4]))();
}

uint64_t sub_E99DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E99E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE99ECLL);
  return result;
}

uint64_t sub_E99F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE9A00);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_E9A04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E9A0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentSubType()
{
  return &type metadata for ContentSubType;
}

unint64_t sub_E9A28()
{
  unint64_t result;

  result = qword_29DB68;
  if (!qword_29DB68)
  {
    result = swift_getWitnessTable(")W\a", &type metadata for ContentSubType);
    atomic_store(result, (unint64_t *)&qword_29DB68);
  }
  return result;
}

BookAnalytics::DefaultReadingGoal_optional __swiftcall DefaultReadingGoal.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DefaultReadingGoal_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_267B80, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DefaultReadingGoal.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 89;
  if (*v0 != 1)
    v1 = 78;
  if (*v0)
    return v1;
  else
    return 16718;
}

uint64_t sub_E9AFC(char *a1, unsigned __int8 *a2)
{
  return sub_28210(*a1, *a2);
}

unint64_t sub_E9B0C()
{
  unint64_t result;

  result = qword_29DB70;
  if (!qword_29DB70)
  {
    result = swift_getWitnessTable("5W\a", &type metadata for DefaultReadingGoal);
    atomic_store(result, (unint64_t *)&qword_29DB70);
  }
  return result;
}

Swift::Int sub_E9B50()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 89;
  if (v1 != 1)
    v2 = 78;
  if (v1)
    v3 = v2;
  else
    v3 = 16718;
  if (v1)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE200000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_E9BCC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 89;
  if (*v1 != 1)
    v2 = 78;
  if (*v1)
    v3 = v2;
  else
    v3 = 16718;
  if (*v1)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE200000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_E9C24(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 89;
  if (v2 != 1)
    v3 = 78;
  if (v2)
    v4 = v3;
  else
    v4 = 16718;
  if (v2)
    v5 = 0xE100000000000000;
  else
    v5 = 0xE200000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

BookAnalytics::DefaultReadingGoal_optional sub_E9C9C(Swift::String *a1)
{
  return DefaultReadingGoal.init(rawValue:)(*a1);
}

void sub_E9CA8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE200000000000000;
  v4 = 89;
  if (v2 != 1)
    v4 = 78;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 16718;
  if (!v5)
    v3 = 0xE100000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_E9CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E9E58();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_E9D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E9E58();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for DefaultReadingGoal(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_E9DD8 + 4 * byte_2035B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_E9E0C + 4 * byte_2035B0[v4]))();
}

uint64_t sub_E9E0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E9E14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE9E1CLL);
  return result;
}

uint64_t sub_E9E28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE9E30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_E9E34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E9E3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultReadingGoal()
{
  return &type metadata for DefaultReadingGoal;
}

unint64_t sub_E9E58()
{
  unint64_t result;

  result = qword_29DB78;
  if (!qword_29DB78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DefaultReadingGoal, &type metadata for DefaultReadingGoal);
    atomic_store(result, (unint64_t *)&qword_29DB78);
  }
  return result;
}

void sub_E9ED8(char *a1@<X8>)
{
  uint64_t v2;
  BAEventReporter *inited;
  SCNetworkReachabilityRef v4;
  Class isa;
  const char *v6;
  void *v7;
  void *v8;
  int64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  char v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  BAEventReporter *v25;
  BAEventReporter *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  void *v32;
  int64_t v33;
  void *v34;
  BOOL v35;
  void *v36;
  BAEventReporter *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  int64_t v42;
  int64_t v43;
  id v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  int64_t v49;
  int64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BAEventReporter *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  int64_t v68;
  int64_t v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  int64_t v74;
  id v75;
  BOOL v76;
  id v77;
  SEL v78;
  id v79;
  id v80;
  int64_t v81;
  id v82;
  BOOL v83;
  id v84;
  char v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  int64_t v90;
  int64_t v91;
  id v92;
  const char *v93;
  void *v94;
  void *v95;
  int64_t v96;
  void *v97;
  BOOL v98;
  void *v99;
  uint64_t v100;
  const char *v101;
  void *v102;
  void *v103;
  int64_t v104;
  void *v105;
  BOOL v106;
  void *v107;
  BAEventReporter *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  int64_t v113;
  int64_t v114;
  id v115;
  const char *v116;
  void *v117;
  void *v118;
  void *v119;
  int64_t v120;
  int64_t v121;
  void *v122;
  char v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  int64_t v128;
  int64_t v129;
  id v130;
  const char *v131;
  void *v132;
  void *v133;
  int64_t v134;
  void *v135;
  BOOL v136;
  void *v137;
  uint64_t v138;
  const char *v139;
  void *v140;
  void *v141;
  int64_t v142;
  void *v143;
  BOOL v144;
  void *v145;
  BAEventReporter *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  int64_t v151;
  int64_t v152;
  id v153;
  const char *v154;
  void *v155;
  void *v156;
  void *v157;
  int64_t v158;
  int64_t v159;
  void *v160;
  char v161;
  SEL v162;
  id v163;
  id v164;
  id v165;
  int64_t v166;
  int64_t v167;
  id v168;
  const char *v169;
  void *v170;
  void *v171;
  int64_t v172;
  void *v173;
  BOOL v174;
  void *v175;
  uint64_t v176;
  const char *v177;
  void *v178;
  void *v179;
  int64_t v180;
  void *v181;
  BOOL v182;
  void *v183;
  BAEventReporter *v184;
  SEL v185;
  id v186;
  id v187;
  id v188;
  int64_t v189;
  int64_t v190;
  id v191;
  const char *v192;
  void *v193;
  void *v194;
  void *v195;
  int64_t v196;
  int64_t v197;
  void *v198;
  char v199;
  SEL v200;
  id v201;
  id v202;
  id v203;
  int64_t v204;
  int64_t v205;
  id v206;
  const char *v207;
  void *v208;
  void *v209;
  int64_t v210;
  void *v211;
  BOOL v212;
  void *v213;
  uint64_t v214;
  const char *v215;
  void *v216;
  void *v217;
  int64_t v218;
  void *v219;
  BOOL v220;
  void *v221;
  BAEventReporter *v222;
  SEL v223;
  id v224;
  id v225;
  id v226;
  int64_t v227;
  int64_t v228;
  id v229;
  const char *v230;
  void *v231;
  void *v232;
  void *v233;
  int64_t v234;
  int64_t v235;
  void *v236;
  char v237;
  SEL v238;
  id v239;
  id v240;
  id v241;
  int64_t v242;
  int64_t v243;
  id v244;
  const char *v245;
  void *v246;
  void *v247;
  int64_t v248;
  void *v249;
  BOOL v250;
  void *v251;
  uint64_t v252;
  const char *v253;
  void *v254;
  void *v255;
  int64_t v256;
  void *v257;
  BOOL v258;
  void *v259;
  BAEventReporter *v260;
  SEL v261;
  id v262;
  id v263;
  id v264;
  int64_t v265;
  int64_t v266;
  id v267;
  const char *v268;
  void *v269;
  void *v270;
  void *v271;
  int64_t v272;
  int64_t v273;
  void *v274;
  char v275;
  SEL v276;
  id v277;
  id v278;
  id v279;
  int64_t v280;
  int64_t v281;
  id v282;
  const char *v283;
  void *v284;
  void *v285;
  int64_t v286;
  void *v287;
  BOOL v288;
  void *v289;
  uint64_t v290;
  const char *v291;
  void *v292;
  void *v293;
  int64_t v294;
  void *v295;
  BOOL v296;
  void *v297;
  BAEventReporter *v298;
  SEL v299;
  id v300;
  id v301;
  id v302;
  int64_t v303;
  int64_t v304;
  id v305;
  const char *v306;
  void *v307;
  void *v308;
  void *v309;
  int64_t v310;
  int64_t v311;
  void *v312;
  char v313;
  SEL v314;
  id v315;
  id v316;
  id v317;
  int64_t v318;
  int64_t v319;
  id v320;
  const char *v321;
  void *v322;
  void *v323;
  int64_t v324;
  void *v325;
  BOOL v326;
  void *v327;
  uint64_t v328;
  const char *v329;
  void *v330;
  void *v331;
  int64_t v332;
  void *v333;
  BOOL v334;
  void *v335;
  BAEventReporter *v336;
  SEL v337;
  id v338;
  id v339;
  id v340;
  int64_t v341;
  int64_t v342;
  id v343;
  const char *v344;
  void *v345;
  void *v346;
  void *v347;
  int64_t v348;
  int64_t v349;
  void *v350;
  char v351;
  SEL v352;
  id v353;
  id v354;
  id v355;
  int64_t v356;
  int64_t v357;
  id v358;
  const char *v359;
  void *v360;
  void *v361;
  int64_t v362;
  void *v363;
  BOOL v364;
  void *v365;
  uint64_t v366;
  const char *v367;
  void *v368;
  void *v369;
  int64_t v370;
  void *v371;
  BOOL v372;
  void *v373;
  BAEventReporter *v374;
  SEL v375;
  id v376;
  id v377;
  id v378;
  int64_t v379;
  int64_t v380;
  id v381;
  const char *v382;
  void *v383;
  void *v384;
  void *v385;
  int64_t v386;
  int64_t v387;
  void *v388;
  char v389;
  SEL v390;
  id v391;
  id v392;
  id v393;
  int64_t v394;
  int64_t v395;
  id v396;
  const char *v397;
  void *v398;
  void *v399;
  int64_t v400;
  void *v401;
  BOOL v402;
  void *v403;
  uint64_t v404;
  const char *v405;
  void *v406;
  void *v407;
  int64_t v408;
  void *v409;
  BOOL v410;
  void *v411;
  BAEventReporter *v412;
  SEL v413;
  id v414;
  id v415;
  id v416;
  int64_t v417;
  int64_t v418;
  id v419;
  const char *v420;
  void *v421;
  void *v422;
  void *v423;
  int64_t v424;
  int64_t v425;
  void *v426;
  char v427;
  SEL v428;
  id v429;
  id v430;
  id v431;
  int64_t v432;
  int64_t v433;
  id v434;
  const char *v435;
  void *v436;
  void *v437;
  int64_t v438;
  void *v439;
  BOOL v440;
  void *v441;
  uint64_t v442;
  const char *v443;
  void *v444;
  void *v445;
  int64_t v446;
  void *v447;
  BOOL v448;
  void *v449;
  BAEventReporter *v450;
  SEL v451;
  id v452;
  id v453;
  id v454;
  int64_t v455;
  int64_t v456;
  id v457;
  const char *v458;
  void *v459;
  void *v460;
  void *v461;
  int64_t v462;
  int64_t v463;
  void *v464;
  char v465;
  SEL v466;
  id v467;
  id v468;
  id v469;
  int64_t v470;
  int64_t v471;
  id v472;
  const char *v473;
  void *v474;
  void *v475;
  int64_t v476;
  void *v477;
  BOOL v478;
  void *v479;
  uint64_t v480;
  const char *v481;
  void *v482;
  void *v483;
  int64_t v484;
  void *v485;
  BOOL v486;
  void *v487;
  BAEventReporter *v488;
  SEL v489;
  id v490;
  id v491;
  id v492;
  int64_t v493;
  int64_t v494;
  id v495;
  const char *v496;
  void *v497;
  void *v498;
  void *v499;
  int64_t v500;
  int64_t v501;
  void *v502;
  char v503;
  SEL v504;
  id v505;
  id v506;
  id v507;
  int64_t v508;
  int64_t v509;
  id v510;
  const char *v511;
  void *v512;
  void *v513;
  int64_t v514;
  void *v515;
  BOOL v516;
  void *v517;
  uint64_t v518;
  BAEventReporter *v519;
  BAEventReporter *v520;
  SEL v521;
  id v522;
  id v523;
  int64_t v524;
  id v525;
  BOOL v526;
  id v527;
  char v528;
  SEL v529;
  id v530;
  id v531;
  id v532;
  int64_t v533;
  int64_t v534;
  id v535;
  SEL v536;
  id v537;
  id v538;
  id v539;
  int64_t v540;
  int64_t v541;
  id v542;
  SEL v543;
  id v544;
  id v545;
  int64_t v546;
  id v547;
  BOOL v548;
  id v549;
  uint64_t v550;
  _QWORD v551[3];
  _BYTE v552[23];
  char v553;
  sockaddr address;
  _BYTE v555[24];

  v2 = type metadata accessor for NetworkReachability();
  inited = (BAEventReporter *)swift_initStackObject(v2, v555);
  inited[1].super.isa = 0;
  *(_QWORD *)&address.sa_data[6] = 0;
  *(_QWORD *)address.sa_data = 0;
  *(_WORD *)&address.sa_len = 528;
  v4 = SCNetworkReachabilityCreateWithAddress(0, &address);
  isa = inited[1].super.isa;
  inited[1].super.isa = v4;

  sub_12445C(&v553);
  if (!v553)
  {
    swift_release(inited, v6, v7, v8, v9, v10, v11, v12);
    v13 = 13;
    goto LABEL_21;
  }
  if (v553 != 1)
  {
    sub_CB2E4();
    v14 = (void *)static OS_dispatch_queue.main.getter();
    v15 = objc_msgSend(objc_allocWithZone((Class)CoreTelephonyClient), "initWithQueue:", v14);

    *(_QWORD *)&address.sa_len = 0;
    v16 = objc_msgSend(v15, "getCurrentDataServiceDescriptorSync:", &address);
    v17 = *(void **)&address.sa_len;
    if (v16)
    {
      v18 = v16;
      *(_QWORD *)&address.sa_len = 0;
      v19 = v17;
      v20 = objc_msgSend(v15, "getCurrentRat:error:", v18, &address);
      v22 = *(void **)&address.sa_len;
      if (v20)
      {
        v23 = v20;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);
        v26 = v25;
        v27 = v22;

        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyGPRS, v28);
        v37 = (BAEventReporter *)v30;
        if (v29 == v24 && v30 == (const char *)v26)
        {
          swift_release(inited, v30, v31, v32, v33, v34, v35, v36);

          swift_bridgeObjectRelease(v26, v38, v39, v40, v41, v42, v43, v44);
LABEL_20:
          swift_bridgeObjectRelease(v26, v45, v46, v47, v48, v49, v50, v51);
          v13 = 1;
          goto LABEL_21;
        }
        v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v24, v26, 0);
        swift_bridgeObjectRelease(v37, v86, v87, v88, v89, v90, v91, v92);
        if ((v85 & 1) != 0)
        {
          swift_release(inited, v93, v94, v95, v96, v97, v98, v99);

          goto LABEL_20;
        }
        v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyEdge, v93);
        v108 = (BAEventReporter *)v101;
        if (v100 == v24 && v101 == (const char *)v26)
        {
          swift_release(inited, v101, v102, v103, v104, v105, v106, v107);

          swift_bridgeObjectRelease(v26, v109, v110, v111, v112, v113, v114, v115);
LABEL_27:
          swift_bridgeObjectRelease(v26, v116, v117, v118, v119, v120, v121, v122);
          v13 = 2;
          goto LABEL_21;
        }
        v123 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v101, v24, v26, 0);
        swift_bridgeObjectRelease(v108, v124, v125, v126, v127, v128, v129, v130);
        if ((v123 & 1) != 0)
        {
          swift_release(inited, v131, v132, v133, v134, v135, v136, v137);

          goto LABEL_27;
        }
        v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyWCDMA, v131);
        v146 = (BAEventReporter *)v139;
        if (v138 == v24 && v139 == (const char *)v26)
        {
          swift_release(inited, v139, v140, v141, v142, v143, v144, v145);

          swift_bridgeObjectRelease(v26, v147, v148, v149, v150, v151, v152, v153);
LABEL_33:
          swift_bridgeObjectRelease(v26, v154, v155, v156, v157, v158, v159, v160);
          v13 = 3;
          goto LABEL_21;
        }
        v161 = _stringCompareWithSmolCheck(_:_:expecting:)(v138, v139, v24, v26, 0);
        swift_bridgeObjectRelease(v146, v162, v163, v164, v165, v166, v167, v168);
        if ((v161 & 1) != 0)
        {
          swift_release(inited, v169, v170, v171, v172, v173, v174, v175);

          goto LABEL_33;
        }
        v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyHSDPA, v169);
        v184 = (BAEventReporter *)v177;
        if (v176 == v24 && v177 == (const char *)v26)
        {
          swift_release(inited, v177, v178, v179, v180, v181, v182, v183);

          swift_bridgeObjectRelease(v26, v185, v186, v187, v188, v189, v190, v191);
LABEL_39:
          swift_bridgeObjectRelease(v26, v192, v193, v194, v195, v196, v197, v198);
          v13 = 4;
          goto LABEL_21;
        }
        v199 = _stringCompareWithSmolCheck(_:_:expecting:)(v176, v177, v24, v26, 0);
        swift_bridgeObjectRelease(v184, v200, v201, v202, v203, v204, v205, v206);
        if ((v199 & 1) != 0)
        {
          swift_release(inited, v207, v208, v209, v210, v211, v212, v213);

          goto LABEL_39;
        }
        v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyHSUPA, v207);
        v222 = (BAEventReporter *)v215;
        if (v214 == v24 && v215 == (const char *)v26)
        {
          swift_release(inited, v215, v216, v217, v218, v219, v220, v221);

          swift_bridgeObjectRelease(v26, v223, v224, v225, v226, v227, v228, v229);
LABEL_45:
          swift_bridgeObjectRelease(v26, v230, v231, v232, v233, v234, v235, v236);
          v13 = 5;
          goto LABEL_21;
        }
        v237 = _stringCompareWithSmolCheck(_:_:expecting:)(v214, v215, v24, v26, 0);
        swift_bridgeObjectRelease(v222, v238, v239, v240, v241, v242, v243, v244);
        if ((v237 & 1) != 0)
        {
          swift_release(inited, v245, v246, v247, v248, v249, v250, v251);

          goto LABEL_45;
        }
        v252 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyCDMA1x, v245);
        v260 = (BAEventReporter *)v253;
        if (v252 == v24 && v253 == (const char *)v26)
        {
          swift_release(inited, v253, v254, v255, v256, v257, v258, v259);

          swift_bridgeObjectRelease(v26, v261, v262, v263, v264, v265, v266, v267);
LABEL_51:
          swift_bridgeObjectRelease(v26, v268, v269, v270, v271, v272, v273, v274);
          v13 = 6;
          goto LABEL_21;
        }
        v275 = _stringCompareWithSmolCheck(_:_:expecting:)(v252, v253, v24, v26, 0);
        swift_bridgeObjectRelease(v260, v276, v277, v278, v279, v280, v281, v282);
        if ((v275 & 1) != 0)
        {
          swift_release(inited, v283, v284, v285, v286, v287, v288, v289);

          goto LABEL_51;
        }
        v290 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyCDMAEVDORev0, v283);
        v298 = (BAEventReporter *)v291;
        if (v290 == v24 && v291 == (const char *)v26)
        {
          swift_release(inited, v291, v292, v293, v294, v295, v296, v297);

          swift_bridgeObjectRelease(v26, v299, v300, v301, v302, v303, v304, v305);
LABEL_57:
          swift_bridgeObjectRelease(v26, v306, v307, v308, v309, v310, v311, v312);
          v13 = 7;
          goto LABEL_21;
        }
        v313 = _stringCompareWithSmolCheck(_:_:expecting:)(v290, v291, v24, v26, 0);
        swift_bridgeObjectRelease(v298, v314, v315, v316, v317, v318, v319, v320);
        if ((v313 & 1) != 0)
        {
          swift_release(inited, v321, v322, v323, v324, v325, v326, v327);

          goto LABEL_57;
        }
        v328 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyCDMAEVDORevA, v321);
        v336 = (BAEventReporter *)v329;
        if (v328 == v24 && v329 == (const char *)v26)
        {
          swift_release(inited, v329, v330, v331, v332, v333, v334, v335);

          swift_bridgeObjectRelease(v26, v337, v338, v339, v340, v341, v342, v343);
LABEL_63:
          swift_bridgeObjectRelease(v26, v344, v345, v346, v347, v348, v349, v350);
          v13 = 8;
          goto LABEL_21;
        }
        v351 = _stringCompareWithSmolCheck(_:_:expecting:)(v328, v329, v24, v26, 0);
        swift_bridgeObjectRelease(v336, v352, v353, v354, v355, v356, v357, v358);
        if ((v351 & 1) != 0)
        {
          swift_release(inited, v359, v360, v361, v362, v363, v364, v365);

          goto LABEL_63;
        }
        v366 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyCDMAEVDORevB, v359);
        v374 = (BAEventReporter *)v367;
        if (v366 == v24 && v367 == (const char *)v26)
        {
          swift_release(inited, v367, v368, v369, v370, v371, v372, v373);

          swift_bridgeObjectRelease(v26, v375, v376, v377, v378, v379, v380, v381);
LABEL_69:
          swift_bridgeObjectRelease(v26, v382, v383, v384, v385, v386, v387, v388);
          v13 = 9;
          goto LABEL_21;
        }
        v389 = _stringCompareWithSmolCheck(_:_:expecting:)(v366, v367, v24, v26, 0);
        swift_bridgeObjectRelease(v374, v390, v391, v392, v393, v394, v395, v396);
        if ((v389 & 1) != 0)
        {
          swift_release(inited, v397, v398, v399, v400, v401, v402, v403);

          goto LABEL_69;
        }
        v404 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyeHRPD, v397);
        v412 = (BAEventReporter *)v405;
        if (v404 == v24 && v405 == (const char *)v26)
        {
          swift_release(inited, v405, v406, v407, v408, v409, v410, v411);

          swift_bridgeObjectRelease(v26, v413, v414, v415, v416, v417, v418, v419);
LABEL_75:
          swift_bridgeObjectRelease(v26, v420, v421, v422, v423, v424, v425, v426);
          v13 = 10;
          goto LABEL_21;
        }
        v427 = _stringCompareWithSmolCheck(_:_:expecting:)(v404, v405, v24, v26, 0);
        swift_bridgeObjectRelease(v412, v428, v429, v430, v431, v432, v433, v434);
        if ((v427 & 1) != 0)
        {
          swift_release(inited, v435, v436, v437, v438, v439, v440, v441);

          goto LABEL_75;
        }
        v442 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyLTE, v435);
        v450 = (BAEventReporter *)v443;
        if (v442 == v24 && v443 == (const char *)v26)
        {
          swift_release(inited, v443, v444, v445, v446, v447, v448, v449);

          swift_bridgeObjectRelease(v26, v451, v452, v453, v454, v455, v456, v457);
LABEL_81:
          swift_bridgeObjectRelease(v26, v458, v459, v460, v461, v462, v463, v464);
          v13 = 11;
          goto LABEL_21;
        }
        v465 = _stringCompareWithSmolCheck(_:_:expecting:)(v442, v443, v24, v26, 0);
        swift_bridgeObjectRelease(v450, v466, v467, v468, v469, v470, v471, v472);
        if ((v465 & 1) != 0)
        {
          swift_release(inited, v473, v474, v475, v476, v477, v478, v479);

          goto LABEL_81;
        }
        v480 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyNRNSA, v473);
        v488 = (BAEventReporter *)v481;
        if (v480 == v24 && v481 == (const char *)v26)
        {
          swift_release(inited, v481, v482, v483, v484, v485, v486, v487);

          swift_bridgeObjectRelease(v26, v489, v490, v491, v492, v493, v494, v495);
LABEL_87:
          swift_bridgeObjectRelease(v26, v496, v497, v498, v499, v500, v501, v502);
          v13 = 14;
          goto LABEL_21;
        }
        v503 = _stringCompareWithSmolCheck(_:_:expecting:)(v480, v481, v24, v26, 0);
        swift_bridgeObjectRelease(v488, v504, v505, v506, v507, v508, v509, v510);
        if ((v503 & 1) != 0)
        {
          swift_release(inited, v511, v512, v513, v514, v515, v516, v517);

          goto LABEL_87;
        }
        v518 = static String._unconditionallyBridgeFromObjectiveC(_:)(CTRadioAccessTechnologyNR, v511);
        v520 = v519;
        if (v518 == v24 && v519 == v26)
        {
          swift_bridgeObjectRelease_n(v26, 2);
          swift_release(inited, v521, v522, v523, v524, v525, v526, v527);

          v13 = 15;
          goto LABEL_21;
        }
        v528 = _stringCompareWithSmolCheck(_:_:expecting:)(v518, v519, v24, v26, 0);
        swift_bridgeObjectRelease(v26, v529, v530, v531, v532, v533, v534, v535);
        swift_bridgeObjectRelease(v520, v536, v537, v538, v539, v540, v541, v542);
        swift_release(inited, v543, v544, v545, v546, v547, v548, v549);

        if ((v528 & 1) != 0)
        {
          v13 = 15;
          goto LABEL_21;
        }
LABEL_17:
        v13 = 0;
        goto LABEL_21;
      }
      v54 = *(id *)&address.sa_len;
      v53 = _convertNSErrorToError(_:)(v22);

      swift_willThrow();
    }
    else
    {
      v52 = *(id *)&address.sa_len;
      v53 = _convertNSErrorToError(_:)(v17);

      swift_willThrow();
    }
    if (qword_295618 != -1)
      swift_once(&qword_295618, sub_5C814);
    v55 = type metadata accessor for Logger(0);
    sub_705C(v55, (uint64_t)qword_2987E8);
    swift_errorRetain(v53);
    v56 = swift_errorRetain(v53);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      *(_QWORD *)&address.sa_len = v60;
      *(_DWORD *)v59 = 136315138;
      swift_getErrorValue(v53, v552, v551);
      v61 = Error.localizedDescription.getter(v551[1], v551[2]);
      v63 = (BAEventReporter *)v62;
      v550 = sub_EB014(v61, v62, (uint64_t *)&address);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v550, v551, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
      swift_errorRelease(v53);
      swift_errorRelease(v53);
      _os_log_impl(&dword_0, v57, v58, "Could not get current data service descriptor: %s", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      swift_release(inited, v71, v72, v73, v74, v75, v76, v77);
      swift_errorRelease(v53);
    }
    else
    {

      swift_release(inited, v78, v79, v80, v81, v82, v83, v84);
      swift_errorRelease(v53);
      swift_errorRelease(v53);
      swift_errorRelease(v53);

    }
    goto LABEL_17;
  }
  swift_release(inited, v6, v7, v8, v9, v10, v11, v12);
  v13 = 12;
LABEL_21:
  *a1 = v13;
}

