id BAPrivateAllKeys()
{
  _QWORD v1[3];

  v1[0] = CFSTR("analyticsID");
  v1[1] = CFSTR("userPrivateSeed");
  v1[2] = CFSTR("contentPrivateSeed");
  return (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v1, 3));
}

id BALog()
{
  if (qword_2A7C68[0] != -1)
    dispatch_once(qword_2A7C68, &stru_265E38);
  return (id)qword_2A7C60;
}

void sub_5688(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BookAnalytics");
  v2 = (void *)qword_2A7C60;
  qword_2A7C60 = (uint64_t)v1;

}

void sub_5848(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  _QWORD v18[5];
  id v19;
  _QWORD v20[4];
  id v21;
  NSObject *v22;
  _QWORD v23[4];
  id v24;
  NSObject *v25;
  _QWORD v26[4];
  id v27;
  NSObject *v28;

  v2 = dispatch_group_create();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 3));
  dispatch_group_enter(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BDSSecureManager sharedManager](BDSSecureManager, "sharedManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userDataManager"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_5AB8;
  v26[3] = &unk_265E60;
  v6 = v3;
  v27 = v6;
  v7 = v2;
  v28 = v7;
  objc_msgSend(v5, "userDatumForKey:completion:", CFSTR("analyticsID"), v26);

  dispatch_group_enter(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BDSSecureManager sharedManager](BDSSecureManager, "sharedManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "userDataManager"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_5BD8;
  v23[3] = &unk_265E60;
  v10 = v6;
  v24 = v10;
  v11 = v7;
  v25 = v11;
  objc_msgSend(v9, "userDatumForKey:completion:", CFSTR("contentPrivateSeed"), v23);

  dispatch_group_enter(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[BDSSecureManager sharedManager](BDSSecureManager, "sharedManager"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userDataManager"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_5CF8;
  v20[3] = &unk_265E60;
  v14 = v10;
  v21 = v14;
  v22 = v11;
  v15 = v11;
  objc_msgSend(v13, "userDatumForKey:completion:", CFSTR("userPrivateSeed"), v20);

  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_5E18;
  v18[3] = &unk_265E88;
  v18[4] = *(_QWORD *)(a1 + 32);
  v19 = v14;
  v17 = v14;
  dispatch_group_notify(v15, v16, v18);

}

void sub_5AB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = BALog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    v11 = 138412546;
    v12 = v9;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "BAPrivateDataSource - analyticsID Changed to: %@, error:%@", (uint8_t *)&v11, 0x16u);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("analyticsID"));

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_5BD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = BALog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    v11 = 138412546;
    v12 = v9;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "BAPrivateDataSource - privateContentSeed Changed to: %@, error:%@", (uint8_t *)&v11, 0x16u);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("contentPrivateSeed"));

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_5CF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = BALog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    v11 = 138412546;
    v12 = v9;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "BAPrivateDataSource - privateUserSeed Changed to: %@, error:%@", (uint8_t *)&v11, 0x16u);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("userPrivateSeed"));

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_5E18(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "privateDataChanged:", *(_QWORD *)(a1 + 40));

}

void sub_5EF0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  id obj;
  _QWORD block[4];
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  NSObject *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v2 = dispatch_group_create();
  v3 = objc_alloc_init((Class)NSMutableDictionary);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = BAPrivateAllKeys();
  obj = (id)objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v23;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v23 != v7)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v8);
        dispatch_group_enter(v2);
        v10 = *(void **)(a1 + 32);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_60F4;
        v18[3] = &unk_265ED8;
        v19 = v3;
        v20 = v9;
        v21 = v2;
        objc_msgSend(v10, "fetchPrivateDataForKey:completion:", v9, v18);

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v6);
  }

  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_6124;
  block[3] = &unk_265F00;
  v12 = *(id *)(a1 + 40);
  v16 = v3;
  v17 = v12;
  v13 = v3;
  dispatch_group_notify(v2, v11, block);

}

void sub_60F4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, *(_QWORD *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_6124(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_retainBlock(*(id *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(id, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void sub_6234(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  id v37;

  v5 = a2;
  v6 = a3;
  v7 = BALog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    *(_DWORD *)buf = 138412802;
    v33 = v9;
    v34 = 2112;
    v35 = v10;
    v36 = 2112;
    v37 = v6;

  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
  if (v11
    && (v12 = (void *)v11,
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value")),
        v14 = objc_msgSend(v13, "length"),
        v13,
        v12,
        v14))
  {
    v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    v16 = objc_retainBlock(*(id *)(a1 + 40));
    v17 = v16;
    if (v16)
      (*((void (**)(id, id, id))v16 + 2))(v16, v15, v6);
  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "UUIDString"));

    if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("userPrivateSeed")) & 1) != 0
      || objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("contentPrivateSeed")))
    {
      v20 = BAGenerateSeed();
      v21 = objc_claimAutoreleasedReturnValue(v20);

      v19 = (void *)v21;
    }
    v22 = BALog();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      v24 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v33 = v24;
      v34 = 2112;
      v35 = v19;
    }

    v25 = (void *)objc_claimAutoreleasedReturnValue(+[BDSSecureManager sharedManager](BDSSecureManager, "sharedManager"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "userDataManager"));
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_64FC;
    v29[3] = &unk_265F50;
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(id *)(a1 + 40);
    v30 = v19;
    v31 = v28;
    v15 = v19;
    objc_msgSend(v26, "setUserDataValue:forKey:completion:", v15, v27, v29);

    v17 = v31;
  }

}

void sub_64FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_retainBlock(*(id *)(a1 + 40));
  v4 = v3;
  if (v3)
    (*((void (**)(id, _QWORD, id))v3 + 2))(v3, *(_QWORD *)(a1 + 32), v5);

}

void sub_6828(uint64_t a1)
{
  dispatch_group_t v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  dispatch_group_t v9;

  v2 = dispatch_group_create();
  v3 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_6908;
  v8[3] = &unk_265FC8;
  v9 = v2;
  v4 = v2;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v8);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_6A6C;
  v6[3] = &unk_265FF0;
  v7 = *(id *)(a1 + 48);
  dispatch_group_notify(v4, v5, v6);

}

void sub_6908(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = BALog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v14 = v5;
    v15 = 2112;
    v16 = v6;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "syncPrivateData: key: %@ value: %@", buf, 0x16u);
  }

  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BDSSecureManager sharedManager](BDSSecureManager, "sharedManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userDataManager"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_6A64;
  v11[3] = &unk_265FA0;
  v12 = *(id *)(a1 + 32);
  objc_msgSend(v10, "setUserDataValue:forKey:completion:", v6, v5, v11);

}

void sub_6A64(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_6A6C(uint64_t a1)
{
  void (**v1)(void);
  void (**v2)(void);

  v1 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    v1[2]();
    v1 = v2;
  }

}

void sub_6B94(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v2 = (void *)objc_opt_new(BMUserFocusComputedModeStream);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "publisherFromStartTime:", 0.0));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "last"));
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_6CB4;
  v8[3] = &unk_266080;
  v8[4] = &v9;
  v5 = objc_msgSend(v4, "sinkWithCompletion:receiveInput:", &stru_266058, v8);
  v6 = objc_retainBlock(*(id *)(a1 + 32));
  v7 = v6;
  if (v6)
    (*((void (**)(id, _QWORD))v6 + 2))(v6, *((unsigned __int8 *)v10 + 24));

  _Block_object_dispose(&v9, 8);
}

void sub_6C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_6CB4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "eventBody"));
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    LOBYTE(v3) = objc_msgSend(v3, "isStarting");
    v4 = v5;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_BYTE)v3;

}

id BAObfuscateID(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  const char *v11;
  size_t v12;
  void *v13;
  CCHmacContext v15;
  _OWORD macOut[2];

  v3 = a1;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dataUsingEncoding:", 4));
  v5 = (void *)v4;
  v6 = 0;
  if (v3 && v4)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    if (objc_msgSend(v3, "isEqual:", v7))
    {

    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
      v9 = objc_msgSend(v5, "isEqual:", v8);

      if ((v9 & 1) == 0)
      {
        memset(&v15, 0, sizeof(v15));
        v10 = objc_retainAutorelease(v5);
        CCHmacInit(&v15, 2u, objc_msgSend(v10, "bytes", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0),
          (size_t)objc_msgSend(v10, "length"));
        v11 = (const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
        v12 = strlen(v11);
        CCHmacUpdate(&v15, v11, v12);
        memset(macOut, 0, sizeof(macOut));
        CCHmacFinal(&v15, macOut);
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", macOut, 32));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "base64EncodedStringWithOptions:", 0));

        goto LABEL_8;
      }
    }
    v6 = 0;
  }
LABEL_8:

  return v6;
}

id BAGenerateSeed()
{
  void *v1;
  void *v2;
  id v3;
  _BYTE bytes[512];

  if (SecRandomCopyBytes(kSecRandomDefault, 0x200uLL, bytes))
    return 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes, 512));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "base64EncodedDataWithOptions:", 0));
  v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v2, 4);

  return v3;
}

uint64_t BARoundIntegerToSignificantFigures(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (a1 >> 63) | 1;
  v3 = 1;
  if (a2 >= 1)
  {
    do
    {
      v3 *= 10;
      --a2;
    }
    while (a2);
  }
  v4 = v2 * a1;
  if (v2 * a1 >= v3)
  {
    v6 = 1;
    do
    {
      v7 = v4;
      v4 /= 10;
      v6 *= 10;
    }
    while (v4 >= v3);
    v5 = v7 - 10 * v4 > 4;
  }
  else
  {
    v5 = 0;
    v6 = 1;
  }
  return v6 * v2 * (v5 + v4);
}

uint64_t sub_701C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_295498, &enum case for SessionGroup.default(_:));
}

uint64_t static BrowseCollectionScreenViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295490, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_295498, a1);
}

uint64_t sub_705C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_7074(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2954B8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t sub_7090(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2(0);
  sub_9260(v6, a3);
  v7 = sub_705C(v6, (uint64_t)a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, *a4, v6);
}

uint64_t static BrowseCollectionScreenViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2954B0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2954B8, a1);
}

uint64_t sub_710C@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = sub_705C(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t BrowseCollectionScreenViewEvent.collectionSummaryData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_295D68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_71B4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t BrowseCollectionScreenViewEvent.collectionSummaryData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_295D68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ScrubData.startPosition.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrowseCollectionScreenViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseCollectionScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for BrowseCollectionScreenViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_295E20, (uint64_t)&nominal type descriptor for BrowseCollectionScreenViewEvent);
}

uint64_t BrowseCollectionScreenViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseCollectionScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrowseCollectionScreenViewEvent.eventData.modify())()
{
  type metadata accessor for BrowseCollectionScreenViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrowseCollectionScreenViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseCollectionScreenViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrowseCollectionScreenViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseCollectionScreenViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*BrowseCollectionScreenViewEvent.timedData.modify())()
{
  type metadata accessor for BrowseCollectionScreenViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t BrowseCollectionScreenViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for BrowseCollectionScreenViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t BrowseCollectionScreenViewEvent.Model.collectionSummaryData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t BrowseCollectionScreenViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseCollectionScreenViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for BrowseCollectionScreenViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_295ED0, (uint64_t)&nominal type descriptor for BrowseCollectionScreenViewEvent.Model);
}

uint64_t sub_74F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t BrowseCollectionScreenViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseCollectionScreenViewEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrowseCollectionScreenViewEvent.Model.init(collectionSummaryData:eventData:timedData:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  *a4 = *a1;
  v7 = type metadata accessor for BrowseCollectionScreenViewEvent.Model(0);
  v8 = (char *)a4 + *(int *)(v7 + 20);
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a2, v9);
  v10 = (char *)a4 + *(int *)(v7 + 24);
  v11 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

BOOL sub_7604(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_7618()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_765C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_7684(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_76C4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0xD000000000000015;
}

uint64_t sub_772C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_90F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7750()
{
  return 0;
}

void sub_775C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_7768(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_79AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7790(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_79AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BrowseCollectionScreenViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  v5 = sub_71B4(&qword_295D80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_79AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys, &type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys, v11, v9, v10);
  v22 = *v3;
  HIBYTE(v21) = 0;
  v12 = sub_79F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, &type metadata for CollectionSummaryData, v12);
  if (!v2)
  {
    v13 = type metadata accessor for BrowseCollectionScreenViewEvent.Model(0);
    v14 = (char *)v3 + *(int *)(v13 + 20);
    BYTE6(v21) = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, (char *)&v21 + 6, v5, v15, v16);
    v17 = (char *)v3 + *(int *)(v13 + 24);
    BYTE5(v21) = 2;
    v18 = type metadata accessor for TimedData(0);
    v19 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, (char *)&v21 + 5, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *sub_7988(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_79AC()
{
  unint64_t result;

  result = qword_295D88;
  if (!qword_295D88)
  {
    result = swift_getWitnessTable(&unk_1F04C4, &type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295D88);
  }
  return result;
}

unint64_t sub_79F0()
{
  unint64_t result;

  result = qword_295D90;
  if (!qword_295D90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionSummaryData, &type metadata for CollectionSummaryData);
    atomic_store(result, (unint64_t *)&qword_295D90);
  }
  return result;
}

uint64_t BrowseCollectionScreenViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;

  v34 = a2;
  v35 = type metadata accessor for TimedData(0);
  v33 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v36 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_71B4(&qword_295DA8);
  v7 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BrowseCollectionScreenViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v40 = a1;
  sub_7988(a1, v13);
  v15 = sub_79AC();
  v39 = v9;
  v16 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys, &type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(v40);
  v17 = v7;
  v18 = v12;
  v41 = v4;
  v19 = v37;
  v44 = 0;
  v20 = sub_7DCC();
  v21 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v45, &type metadata for CollectionSummaryData, &v44, v38, &type metadata for CollectionSummaryData, v20);
  v32 = v18;
  *(_QWORD *)v18 = v45;
  v43 = 1;
  v22 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v23 = v6;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v19, &v43, v21, v19, v22);
  v24 = v10;
  (*(void (**)(char *, _QWORD *, uint64_t))(v41 + 32))(&v32[*(int *)(v10 + 20)], v23, v19);
  v42 = 2;
  v25 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v26 = v36;
  v27 = v21;
  v28 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v35, &v42, v27, v35, v25);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v39, v38);
  v29 = (uint64_t)v32;
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 32))(&v32[*(int *)(v24 + 24)], v26, v28);
  sub_7E50(v29, v34);
  sub_7DAC(v40);
  return sub_7E94(v29);
}

uint64_t sub_7DAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_7DCC()
{
  unint64_t result;

  result = qword_295DB0;
  if (!qword_295DB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionSummaryData, &type metadata for CollectionSummaryData);
    atomic_store(result, (unint64_t *)&qword_295DB0);
  }
  return result;
}

uint64_t sub_7E10(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_7E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseCollectionScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_7E94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseCollectionScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_7ED0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseCollectionScreenViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_7EE4(_QWORD *a1)
{
  return BrowseCollectionScreenViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_7EF8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295490, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_295498, (uint64_t)sub_701C, a1);
}

uint64_t sub_7F1C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2954B0, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2954B8, (uint64_t)sub_7074, a1);
}

uint64_t sub_7F40@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_705C(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_7FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseCollectionScreenViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_295D68);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for BrowseCollectionScreenViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for BrowseCollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for BrowseCollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for BrowseCollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for BrowseCollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseCollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_84D4);
}

uint64_t sub_84D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_295D68);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for BrowseCollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8584);
}

uint64_t sub_8584(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_295D68);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_8630(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_86D0(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_86D0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_295E30)
  {
    v2 = sub_7DCC();
    v3 = sub_79F0();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for CollectionSummaryData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_295E30);
  }
}

void sub_8734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_295E38)
  {
    v2 = type metadata accessor for EventData(255);
    v3 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v4 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v5 = type metadata accessor for EventProperty(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_295E38);
  }
}

void sub_87D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_295E40)
  {
    v2 = type metadata accessor for TimedData(255);
    v3 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v4 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    v5 = type metadata accessor for EventProperty(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_295E40);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseCollectionScreenViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for EventData(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v7;
}

uint64_t destroy for BrowseCollectionScreenViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t *initializeWithCopy for BrowseCollectionScreenViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for EventData(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *assignWithCopy for BrowseCollectionScreenViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_QWORD *initializeWithTake for BrowseCollectionScreenViewEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for BrowseCollectionScreenViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseCollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8C5C);
}

uint64_t sub_8C5C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BrowseCollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8D08);
}

char *sub_8D08(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_8DA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void type metadata accessor for SCNetworkReachability(uint64_t a1)
{
  sub_8E60(a1, &qword_295F70, (uint64_t)&unk_269940);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_8E60(a1, &qword_295F78, (uint64_t)&unk_269970);
}

void sub_8E60(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for BrowseCollectionScreenViewEvent.Model.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BrowseCollectionScreenViewEvent.Model.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseCollectionScreenViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_8F90 + 4 * byte_1F02B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_8FC4 + 4 * byte_1F02B0[v4]))();
}

uint64_t sub_8FC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8FCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8FD4);
  return result;
}

uint64_t sub_8FE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8FE8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_8FEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8FF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9000(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_9008(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BrowseCollectionScreenViewEvent.Model.CodingKeys()
{
  return &type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys;
}

unint64_t sub_9024()
{
  unint64_t result;

  result = qword_295F80;
  if (!qword_295F80)
  {
    result = swift_getWitnessTable(&unk_1F049C, &type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295F80);
  }
  return result;
}

unint64_t sub_906C()
{
  unint64_t result;

  result = qword_295F88;
  if (!qword_295F88)
  {
    result = swift_getWitnessTable(&unk_1F040C, &type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295F88);
  }
  return result;
}

unint64_t sub_90B4()
{
  unint64_t result;

  result = qword_295F90;
  if (!qword_295F90)
  {
    result = swift_getWitnessTable(&unk_1F0434, &type metadata for BrowseCollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295F90);
  }
  return result;
}

uint64_t sub_90F8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000015)
  {
    v4 = 0x800000000021E8A0;
    if (a2 == 0x800000000021E8A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000000021E8A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v6 = 0xE900000000000061;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t *sub_9260(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t MediaData.mediaID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t MediaData.mediaID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t BrickData.positionInSection.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t BrickData.positionInSection.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*MediaData.mediaType.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

BookAnalytics::SingleCollectionData __swiftcall SingleCollectionData.init(collectionID:collectionItemCount:)(Swift::String collectionID, Swift::Int32 collectionItemCount)
{
  uint64_t v2;
  BookAnalytics::SingleCollectionData result;

  *(Swift::String *)v2 = collectionID;
  *(_DWORD *)(v2 + 16) = collectionItemCount;
  result.collectionID = collectionID;
  result.collectionItemCount = collectionItemCount;
  return result;
}

BOOL static SingleCollectionData.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v10;
  _BOOL8 result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 16);
  if (v4 == *(_QWORD *)a2 && v5 == v7)
    return v6 == v8;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v7, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v6 == v8;
  return result;
}

BOOL sub_9388(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_93A0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x697463656C6C6F63;
}

uint64_t sub_93E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_9BFC(a1, a2);
  *a3 = result;
  return result;
}

void sub_940C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_9418(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9598();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_9440(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9598();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionIDData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char v17;

  v4 = sub_71B4(&qword_295F98);
  v14 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v15 = *((_DWORD *)v1 + 4);
  v10 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v10);
  v11 = sub_9598();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionIDData.CodingKeys, &type metadata for CollectionIDData.CodingKeys, v11, v10, v9);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v17, v4);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

unint64_t sub_9598()
{
  unint64_t result;

  result = qword_295FA0;
  if (!qword_295FA0)
  {
    result = swift_getWitnessTable(&unk_1F06C4, &type metadata for CollectionIDData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295FA0);
  }
  return result;
}

uint64_t CollectionIDData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  char v18;
  char v19;

  v5 = sub_71B4(&qword_295FA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_9598();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionIDData.CodingKeys, &type metadata for CollectionIDData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  v19 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
  v14 = v13;
  v18 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  sub_7DAC(a1);
  return swift_bridgeObjectRelease(v14);
}

unint64_t sub_9764()
{
  unint64_t result;

  result = qword_295FB0;
  if (!qword_295FB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionIDData, &type metadata for CollectionIDData);
    atomic_store(result, (unint64_t *)&qword_295FB0);
  }
  return result;
}

unint64_t sub_97AC()
{
  unint64_t result;

  result = qword_295FB8;
  if (!qword_295FB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionIDData, &type metadata for CollectionIDData);
    atomic_store(result, (unint64_t *)&qword_295FB8);
  }
  return result;
}

uint64_t sub_97F0()
{
  return DataEventType.toDict(timestampGranularity:)();
}

uint64_t sub_9804()
{
  return DataEventType.toDict(timestampConfiguration:)();
}

uint64_t sub_9818@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CollectionIDData.init(from:)(a1, a2);
}

uint64_t sub_982C(_QWORD *a1)
{
  return CollectionIDData.encode(to:)(a1);
}

uint64_t destroy for CollectionIDData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s13BookAnalytics16CollectionIDDataVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for CollectionIDData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for CollectionIDData(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CollectionIDData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionIDData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionIDData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionIDData()
{
  return &type metadata for CollectionIDData;
}

uint64_t getEnumTagSinglePayload for CollectionIDData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionIDData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_9A98 + 4 * byte_1F0525[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_9ACC + 4 * byte_1F0520[v4]))();
}

uint64_t sub_9ACC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9AD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x9ADCLL);
  return result;
}

uint64_t sub_9AE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x9AF0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_9AF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9AFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_9B08(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionIDData.CodingKeys()
{
  return &type metadata for CollectionIDData.CodingKeys;
}

unint64_t sub_9B28()
{
  unint64_t result;

  result = qword_295FC0;
  if (!qword_295FC0)
  {
    result = swift_getWitnessTable(&unk_1F069C, &type metadata for CollectionIDData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295FC0);
  }
  return result;
}

unint64_t sub_9B70()
{
  unint64_t result;

  result = qword_295FC8;
  if (!qword_295FC8)
  {
    result = swift_getWitnessTable(&unk_1F060C, &type metadata for CollectionIDData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295FC8);
  }
  return result;
}

unint64_t sub_9BB8()
{
  unint64_t result;

  result = qword_295FD0;
  if (!qword_295FD0)
  {
    result = swift_getWitnessTable(&unk_1F0634, &type metadata for CollectionIDData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_295FD0);
  }
  return result;
}

uint64_t sub_9BFC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x697463656C6C6F63 && a2 == 0xEC00000044496E6FLL)
  {
    v5 = 0xEC00000044496E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEC00000044496E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000000021EAD0)
  {
    swift_bridgeObjectRelease(0x800000000021EAD0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021EAD0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_9D00(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_295FD8, &enum case for SessionGroup.default(_:));
}

uint64_t static ThemeCustomizeViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2954D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_295FD8, a1);
}

uint64_t sub_9D40(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_295FF0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ThemeCustomizeViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2954D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_295FF0, a1);
}

uint64_t ThemesAndSettingViewEvent.themesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296008);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ThemesAndSettingViewEvent.themesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296008);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ThemeCustomizeViewEvent.textData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ThemeCustomizeViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2960C0, (uint64_t)&nominal type descriptor for ThemeCustomizeViewEvent);
}

uint64_t ThemeCustomizeViewEvent.textData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizeViewEvent.textData.modify())()
{
  type metadata accessor for ThemeCustomizeViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizeViewEvent.layoutOptionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 24);
  v4 = sub_71B4(&qword_296018);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizeViewEvent.layoutOptionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 24);
  v4 = sub_71B4(&qword_296018);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizeViewEvent.layoutOptionData.modify())()
{
  type metadata accessor for ThemeCustomizeViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizeViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizeViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizeViewEvent.eventData.modify())()
{
  type metadata accessor for ThemeCustomizeViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizeViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizeViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizeViewEvent.timedData.modify())()
{
  type metadata accessor for ThemeCustomizeViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizeViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ThemeCustomizeViewEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t ThemesAndSettingViewEvent.Model.themesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v4 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = v3;
  swift_bridgeObjectRetain(v4);
  return swift_bridgeObjectRetain(v2);
}

uint64_t ThemeCustomizeViewEvent.Model.textData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain(v2);
}

__n128 ThemeCustomizeViewEvent.Model.layoutOptionData.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 76);
  v3 = *(_WORD *)(v1 + 84);
  result = *(__n128 *)(v1 + 60);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u16[4] = v3;
  return result;
}

uint64_t ThemeCustomizeViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ThemeCustomizeViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_296178, (uint64_t)&nominal type descriptor for ThemeCustomizeViewEvent.Model);
}

uint64_t ThemeCustomizeViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizeViewEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizeViewEvent.Model.init(themesData:textData:layoutOptionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *a2;
  v13 = a2[1];
  v14 = *((_BYTE *)a2 + 16);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_WORD *)(a3 + 24);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(_QWORD *)(a6 + 16) = v9;
  *(_QWORD *)(a6 + 24) = v10;
  *(_BYTE *)(a6 + 32) = v11;
  *(_QWORD *)(a6 + 40) = v12;
  *(_QWORD *)(a6 + 48) = v13;
  *(_BYTE *)(a6 + 56) = v14;
  *(_OWORD *)(a6 + 60) = *(_OWORD *)a3;
  *(_QWORD *)(a6 + 76) = v15;
  *(_WORD *)(a6 + 84) = v16;
  v17 = type metadata accessor for ThemeCustomizeViewEvent.Model(0);
  v18 = a6 + *(int *)(v17 + 28);
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a4, v19);
  v20 = a6 + *(int *)(v17 + 32);
  v21 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a5, v21);
}

uint64_t sub_A410()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_A444 + 4 * byte_1F0720[*v0]))(0x614473656D656874, 0xEA00000000006174);
}

uint64_t sub_A444()
{
  return 0x6174614474786574;
}

unint64_t sub_A45C()
{
  return 0xD000000000000010;
}

uint64_t sub_A478()
{
  return 0x746144746E657665;
}

uint64_t sub_A4A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C3AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_A4C8(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_A4D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A79C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A4FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A79C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ThemeCustomizeViewEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = v1;
  v5 = sub_71B4(&qword_296020);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_A79C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ThemeCustomizeViewEvent.Model.CodingKeys, &type metadata for ThemeCustomizeViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v14 = *((_BYTE *)v3 + 32);
  v32 = *v3;
  v33 = v12;
  v34 = v13;
  v35 = v14;
  v31 = 0;
  v15 = sub_A7E0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v31, v5, &type metadata for ThemesData, v15);
  if (!v2)
  {
    v16 = *((_QWORD *)v3 + 6);
    v17 = *((_BYTE *)v3 + 56);
    *(_QWORD *)&v32 = *((_QWORD *)v3 + 5);
    *((_QWORD *)&v32 + 1) = v16;
    LOBYTE(v33) = v17;
    v31 = 1;
    v18 = sub_A824();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v31, v5, &type metadata for TextData, v18);
    v19 = *(_QWORD *)((char *)v3 + 76);
    v20 = *((_WORD *)v3 + 42);
    v32 = *(__int128 *)((char *)v3 + 60);
    v33 = v19;
    LOWORD(v34) = v20;
    v31 = 2;
    v21 = sub_A868();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v32, &v31, v5, &type metadata for LayoutOptionData, v21);
    v22 = type metadata accessor for ThemeCustomizeViewEvent.Model(0);
    v23 = (uint64_t)v3 + *(int *)(v22 + 28);
    LOBYTE(v32) = 3;
    v24 = type metadata accessor for EventData(0);
    v25 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v32, v5, v24, v25);
    v26 = (uint64_t)v3 + *(int *)(v22 + 32);
    LOBYTE(v32) = 4;
    v27 = type metadata accessor for TimedData(0);
    v28 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v32, v5, v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_A79C()
{
  unint64_t result;

  result = qword_296028;
  if (!qword_296028)
  {
    result = swift_getWitnessTable(&unk_1F092C, &type metadata for ThemeCustomizeViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296028);
  }
  return result;
}

unint64_t sub_A7E0()
{
  unint64_t result;

  result = qword_296030;
  if (!qword_296030)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemesData, &type metadata for ThemesData);
    atomic_store(result, (unint64_t *)&qword_296030);
  }
  return result;
}

unint64_t sub_A824()
{
  unint64_t result;

  result = qword_296038;
  if (!qword_296038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TextData, &type metadata for TextData);
    atomic_store(result, (unint64_t *)&qword_296038);
  }
  return result;
}

unint64_t sub_A868()
{
  unint64_t result;

  result = qword_296040;
  if (!qword_296040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutOptionData, &type metadata for LayoutOptionData);
    atomic_store(result, (unint64_t *)&qword_296040);
  }
  return result;
}

uint64_t ThemeCustomizeViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;

  v42 = a2;
  v43 = type metadata accessor for TimedData(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v44 = (uint64_t *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (uint64_t *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = sub_71B4(&qword_296048);
  v7 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ThemeCustomizeViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v48 = a1;
  sub_7988(a1, v13);
  v15 = sub_A79C();
  v47 = v9;
  v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ThemeCustomizeViewEvent.Model.CodingKeys, &type metadata for ThemeCustomizeViewEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(v48);
  v49 = v6;
  v17 = v7;
  v18 = v4;
  v19 = v45;
  v54 = 0;
  v20 = sub_AD18();
  v21 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, &type metadata for ThemesData, &v54, v46, &type metadata for ThemesData, v20);
  v22 = v51;
  v23 = v52;
  v24 = v53;
  v25 = (uint64_t)v12;
  *(_OWORD *)v12 = v50;
  *((_QWORD *)v12 + 2) = v22;
  *((_QWORD *)v12 + 3) = v23;
  v12[32] = v24;
  v54 = 1;
  v26 = sub_AD5C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, &type metadata for TextData, &v54, v21, &type metadata for TextData, v26);
  v27 = *((_QWORD *)&v50 + 1);
  v28 = v51;
  *((_QWORD *)v12 + 5) = v50;
  *((_QWORD *)v12 + 6) = v27;
  v12[56] = v28;
  v54 = 2;
  v29 = sub_ADA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, &type metadata for LayoutOptionData, &v54, v21, &type metadata for LayoutOptionData, v29);
  v40 = 0;
  v30 = v51;
  v31 = v52;
  *(_OWORD *)(v12 + 60) = v50;
  *(_QWORD *)(v12 + 76) = v30;
  *((_WORD *)v12 + 42) = v31;
  LOBYTE(v50) = 3;
  v32 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v33 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v49, v19, &v50, v21, v19, v32);
  v34 = v10;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32))(v25 + *(int *)(v10 + 28), v49, v33);
  LOBYTE(v50) = 4;
  v35 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v36 = v21;
  v37 = v43;
  v38 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v44, v43, &v50, v36, v43, v35);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v47, v46);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v41 + 32))(v25 + *(int *)(v34 + 32), v38, v37);
  sub_ADE4(v25, v42);
  sub_7DAC(v48);
  return sub_AE28(v25);
}

unint64_t sub_AD18()
{
  unint64_t result;

  result = qword_296050;
  if (!qword_296050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemesData, &type metadata for ThemesData);
    atomic_store(result, (unint64_t *)&qword_296050);
  }
  return result;
}

unint64_t sub_AD5C()
{
  unint64_t result;

  result = qword_296058;
  if (!qword_296058)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TextData, &type metadata for TextData);
    atomic_store(result, (unint64_t *)&qword_296058);
  }
  return result;
}

unint64_t sub_ADA0()
{
  unint64_t result;

  result = qword_296060;
  if (!qword_296060)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutOptionData, &type metadata for LayoutOptionData);
    atomic_store(result, (unint64_t *)&qword_296060);
  }
  return result;
}

uint64_t sub_ADE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThemeCustomizeViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_AE28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ThemeCustomizeViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_AE64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ThemeCustomizeViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_AE78(_QWORD *a1)
{
  return ThemeCustomizeViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_AE8C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2954D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_295FD8, (uint64_t)sub_9D00, a1);
}

uint64_t sub_AEB0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2954D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_295FF0, (uint64_t)sub_9D40, a1);
}

uint64_t sub_AED4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for ThemeCustomizeViewEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296008);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296010);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296018);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for ThemeCustomizeViewEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for ThemeCustomizeViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for ThemeCustomizeViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for ThemeCustomizeViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for ThemeCustomizeViewEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemeCustomizeViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B694);
}

uint64_t sub_B694(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296008);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296010);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296018);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ThemeCustomizeViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B794);
}

uint64_t sub_B794(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296008);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296010);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296018);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_B890(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, &qword_2960D0, (uint64_t (*)(void))sub_AD18, (uint64_t (*)(void))sub_A7E0, (uint64_t)&type metadata for ThemesData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2960D8, (uint64_t (*)(void))sub_AD5C, (uint64_t (*)(void))sub_A824, (uint64_t)&type metadata for TextData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2960E0, (uint64_t (*)(void))sub_ADA0, (uint64_t (*)(void))sub_A868, (uint64_t)&type metadata for LayoutOptionData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

void sub_B9C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3();
    v10 = a4();
    v11 = type metadata accessor for EventProperty(a1, a5, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ThemeCustomizeViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = *(_OWORD *)((char *)a2 + 60);
    *(_OWORD *)(a1 + 70) = *(_OWORD *)((char *)a2 + 70);
    v11 = *(int *)(a3 + 28);
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    *(_OWORD *)(a1 + 60) = v10;
    v14 = type metadata accessor for EventData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v15(v12, v13, v14);
    v16 = *(int *)(a3 + 32);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t destroy for ThemeCustomizeViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for ThemeCustomizeViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 70) = *(_OWORD *)(a2 + 70);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 60) = v9;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 32);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ThemeCustomizeViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 70) = *(_OWORD *)(a2 + 70);
  *(_OWORD *)(a1 + 60) = v12;
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = *(int *)(a3 + 32);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t initializeWithTake for ThemeCustomizeViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 70) = *(_OWORD *)(a2 + 70);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ThemeCustomizeViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 70) = *(_OWORD *)(a2 + 70);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = *(int *)(a3 + 32);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemeCustomizeViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BF8C);
}

uint64_t sub_BF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ThemeCustomizeViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C038);
}

uint64_t sub_C038(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_C0D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = "!";
  v5[1] = &unk_1F0838;
  v5[2] = &unk_1F0850;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ThemeCustomizeViewEvent.Model.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ThemeCustomizeViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_C254 + 4 * byte_1F072A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_C288 + 4 * byte_1F0725[v4]))();
}

uint64_t sub_C288(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C290(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC298);
  return result;
}

uint64_t sub_C2A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC2ACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_C2B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C2B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemeCustomizeViewEvent.Model.CodingKeys()
{
  return &type metadata for ThemeCustomizeViewEvent.Model.CodingKeys;
}

unint64_t sub_C2D8()
{
  unint64_t result;

  result = qword_2961C0;
  if (!qword_2961C0)
  {
    result = swift_getWitnessTable(&unk_1F0904, &type metadata for ThemeCustomizeViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2961C0);
  }
  return result;
}

unint64_t sub_C320()
{
  unint64_t result;

  result = qword_2961C8;
  if (!qword_2961C8)
  {
    result = swift_getWitnessTable(&unk_1F0874, &type metadata for ThemeCustomizeViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2961C8);
  }
  return result;
}

unint64_t sub_C368()
{
  unint64_t result;

  result = qword_2961D0;
  if (!qword_2961D0)
  {
    result = swift_getWitnessTable(&unk_1F089C, &type metadata for ThemeCustomizeViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2961D0);
  }
  return result;
}

uint64_t sub_C3AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x614473656D656874 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614473656D656874, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6174614474786574 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614474786574, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x800000000021EAF0;
    if (a2 == 0x800000000021EAF0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EAF0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::ICloudDriveStatus_optional __swiftcall ICloudDriveStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ICloudDriveStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2660A0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DoNotDisturbStatus.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 28271;
  if (*v0 != 1)
    v1 = 6710895;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_C684(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_285D8(*a1, *a2);
}

unint64_t sub_C694()
{
  unint64_t result;

  result = qword_2961D8;
  if (!qword_2961D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICloudDriveStatus, &type metadata for ICloudDriveStatus);
    atomic_store(result, (unint64_t *)&qword_2961D8);
  }
  return result;
}

Swift::Int sub_C6D8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE200000000000000;
  v3 = 28271;
  if (v1 != 1)
  {
    v3 = 6710895;
    v2 = 0xE300000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_C764(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE200000000000000;
  v3 = 28271;
  if (*v1 != 1)
  {
    v3 = 6710895;
    v2 = 0xE300000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_C7CC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE200000000000000;
  v4 = 28271;
  if (v2 != 1)
  {
    v4 = 6710895;
    v3 = 0xE300000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::ICloudDriveStatus_optional sub_C854(Swift::String *a1)
{
  return ICloudDriveStatus.init(rawValue:)(*a1);
}

void sub_C860(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE200000000000000;
  v5 = 28271;
  if (v2 != 1)
  {
    v5 = 6710895;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_C8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_CA20();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_C908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_CA20();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ICloudDriveStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_C9A0 + 4 * byte_1F0985[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_C9D4 + 4 * byte_1F0980[v4]))();
}

uint64_t sub_C9D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C9DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC9E4);
  return result;
}

uint64_t sub_C9F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC9F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_C9FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CA04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICloudDriveStatus()
{
  return &type metadata for ICloudDriveStatus;
}

unint64_t sub_CA20()
{
  unint64_t result;

  result = qword_2961E0;
  if (!qword_2961E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICloudDriveStatus, &type metadata for ICloudDriveStatus);
    atomic_store(result, (unint64_t *)&qword_2961E0);
  }
  return result;
}

BookAnalytics::Location_optional __swiftcall Location.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::Location_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266108, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t Location.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_CAEC + 4 * byte_1F0AA4[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_CAEC()
{
  return 0x6553656369766564;
}

uint64_t sub_CB10()
{
  return 0x656D6F636C6577;
}

unint64_t sub_CB24()
{
  return 0xD000000000000012;
}

void sub_CB40(char *a1)
{
  sub_25FCC(*a1);
}

unint64_t sub_CB50()
{
  unint64_t result;

  result = qword_2961E8;
  if (!qword_2961E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Location, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2961E8);
  }
  return result;
}

void sub_CB94()
{
  char *v0;

  sub_195090(*v0);
}

void sub_CB9C()
{
  __asm { BR              X10 }
}

uint64_t sub_CBD8(uint64_t a1)
{
  String.hash(into:)(a1, 0x6553656369766564, 0xEE0073676E697474);
  return swift_bridgeObjectRelease(0xEE0073676E697474);
}

void sub_CC40(uint64_t a1)
{
  char *v1;

  sub_1D4150(a1, *v1);
}

BookAnalytics::Location_optional sub_CC48(Swift::String *a1)
{
  return Location.init(rawValue:)(*a1);
}

uint64_t sub_CC54()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_CC84 + 4 * byte_1F0AAC[*v0]))();
}

void sub_CC84(char *a1@<X8>)
{
  strcpy(a1, "deviceSettings");
  a1[15] = -18;
}

void sub_CCAC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656D6F636C6577;
  a1[1] = v1;
}

void sub_CCC4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x800000000021D760;
}

uint64_t sub_CCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_CEE8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_CD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_CEE8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for Location(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Location(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_CE68 + 4 * byte_1F0AB5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_CE9C + 4 * byte_1F0AB0[v4]))();
}

uint64_t sub_CE9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CEA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCEACLL);
  return result;
}

uint64_t sub_CEB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCEC0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_CEC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Location()
{
  return &type metadata for Location;
}

unint64_t sub_CEE8()
{
  unint64_t result;

  result = qword_2961F0;
  if (!qword_2961F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Location, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2961F0);
  }
  return result;
}

uint64_t AppAnalyticsData.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  result = swift_getKeyPath(&unk_1F0BF0);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

void *AppAnalyticsData.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  sub_D374(v3, v4);
  sub_D374(v3, v4);
  sub_D180(v3, v4, &v10);
  sub_D380(v3, v4);
  swift_bridgeObjectRelease(v1);
  sub_D380(v3, v4);
  v5 = v10;
  if (!*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRelease(v10);
    return &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain_n(v1, 2);
  v6 = sub_DAAC(v2, v1);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease_n(v1, 2);
    return &_swiftEmptyArrayStorage;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease_n(v1, 2);
  return (void *)v8;
}

uint64_t sub_D070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

_QWORD *sub_D088@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_E224();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for DataStackKey, &type metadata for DataStackKey, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_D0D4@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_E224();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for DataStackKey, &type metadata for DataStackKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_D120(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_E224();
  swift_bridgeObjectRetain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for DataStackKey, &type metadata for DataStackKey, v1);
}

uint64_t sub_D180@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for EnvironmentValues(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    *a3 = a1;
    return sub_D374(a1, 1);
  }
  else
  {
    v10 = sub_D374(a1, 0);
    v11 = static os_log_type_t.fault.getter(v10);
    v12 = static Log.runtimeIssuesLog.getter();
    v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v18[1] = a3;
      v16 = v15;
      v20 = v15;
      *(_DWORD *)v14 = 136315138;
      v19 = sub_EB014(0x6361745361746144, 0xE90000000000006BLL, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
      _os_log_impl(&dword_0, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v9, a1);
    sub_D380(a1, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_D374(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain(a1);
  else
    return swift_retain(a1);
}

uint64_t sub_D380(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease(a1);
  else
    return swift_release(a1);
}

uint64_t sub_D38C(BAEventReporter *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  SEL v14;
  id v15;
  id v16;
  int64_t v17;
  id v18;
  BOOL v19;
  id v20;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v23 = v13;
      *(_DWORD *)v12 = 136315138;
      v22 = sub_EB014(0xD000000000000027, 0x800000000021EB70, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 4, v12 + 12);
      _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    swift_release(a1, v14, v15, v16, v17, v18, v19, v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v23;
  }
  return (uint64_t)a1;
}

uint64_t sub_D548(BAEventReporter *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v22 = v13;
      *(_DWORD *)v12 = 136315138;
      v21 = sub_EB014(0xD00000000000001BLL, 0x800000000021EB10, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
      _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    j__swift_release(a1, 0, v14, v15, v16, v17, v18, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v22;
  }
  return (uint64_t)a1;
}

uint64_t sub_D708(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v14 = a1;
  }
  else
  {
    v8 = swift_retain(a1);
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v17 = v13;
      *(_DWORD *)v12 = 136315138;
      v16 = sub_EB014(0xD000000000000013, 0x800000000021EB50, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4, v12 + 12);
      _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    sub_DF70(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v17;
  }
  return (uint64_t)a1;
}

uint64_t sub_D8D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BAEventReporter *v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  SEL v17;
  id v18;
  id v19;
  int64_t v20;
  id v21;
  BOOL v22;
  id v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  char v28;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_DEE0(v2, (uint64_t)v27);
  if (v28 == 1)
    return sub_DF28((uint64_t)v27, a1);
  v10 = (BAEventReporter *)v27[0];
  v11 = static os_log_type_t.fault.getter(v8);
  v12 = static Log.runtimeIssuesLog.getter();
  v13 = v11;
  if (os_log_type_enabled(v12, v11))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v24[1] = a1;
    v16 = v15;
    v26 = v15;
    *(_DWORD *)v14 = 136315138;
    v25 = sub_EB014(0xD000000000000017, 0x800000000021EB30, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4, v14 + 12);
    _os_log_impl(&dword_0, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, v10);
  swift_release(v10, v17, v18, v19, v20, v21, v22, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_DAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v7, a1, a2);
  swift_bridgeObjectRelease(a2);
  v5 = Hasher._finalize()();
  return sub_E010(a1, a2, v5);
}

uint64_t initializeBufferWithCopyOfBuffer for ThemesData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for AppAnalyticsData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return sub_D380(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for AppAnalyticsData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  sub_D374(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for AppAnalyticsData(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  sub_D374(v6, (char)v2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  sub_D380(v7, v8);
  return a1;
}

__n128 initializeWithTake for AppAnalyticsData(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AppAnalyticsData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v6;
  sub_D380(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppAnalyticsData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppAnalyticsData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppAnalyticsData()
{
  return &type metadata for AppAnalyticsData;
}

uint64_t getEnumTagSinglePayload for ContextAssetInfoAnalytics(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
  {
    v6 = *a1;
    v7 = v6 >= 0xC;
    v8 = v6 - 12;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 12;
    if (a2 + 12 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_DD90 + 4 * byte_1F0BE0[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ContextAssetInfoAnalytics(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 12;
  if (a3 + 12 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF4)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_DE38 + 4 * byte_1F0BEA[v5]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_DE6C + 4 * byte_1F0BE5[v5]))();
}

uint64_t sub_DE6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DE74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xDE7CLL);
  return result;
}

uint64_t sub_DE88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xDE90);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_DE94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DE9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DEA8(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 0xC)
    return v1 - 11;
  else
    return 0;
}

_BYTE *sub_DEBC(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 11;
  return result;
}

ValueMetadata *type metadata accessor for ContextAssetInfoAnalytics()
{
  return &type metadata for ContextAssetInfoAnalytics;
}

uint64_t sub_DEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_2961F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_DF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_296200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_DF70(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release(a1);
}

unint64_t sub_DF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_E010(a1, a2, v5);
}

unint64_t sub_DFE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_E0F0(a1, v4);
}

unint64_t sub_E010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_E0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_E1B4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_E1F0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_E1B4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_E1F0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

unint64_t sub_E224()
{
  unint64_t result;

  result = qword_296208;
  if (!qword_296208)
  {
    result = swift_getWitnessTable(&unk_21A090, &type metadata for DataStackKey);
    atomic_store(result, (unint64_t *)&qword_296208);
  }
  return result;
}

BookAnalytics::ExposureType_optional __swiftcall ExposureType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ExposureType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266188, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ExposureType.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6573616863727570;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_E320(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_27350(*a1, *a2);
}

unint64_t sub_E330()
{
  unint64_t result;

  result = qword_296210;
  if (!qword_296210)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ExposureType, &type metadata for ExposureType);
    atomic_store(result, (unint64_t *)&qword_296210);
  }
  return result;
}

Swift::Int sub_E374()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x6573616863727570;
  if (v1 != 1)
  {
    v3 = 0xD000000000000012;
    v2 = 0x800000000021D780;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_E418(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x6573616863727570;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000012;
    v2 = 0x800000000021D780;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_E498(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x6573616863727570;
  if (v2 != 1)
  {
    v4 = 0xD000000000000012;
    v3 = 0x800000000021D780;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::ExposureType_optional sub_E538(Swift::String *a1)
{
  return ExposureType.init(rawValue:)(*a1);
}

void sub_E544(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6573616863727570;
  if (v2 != 1)
  {
    v5 = 0xD000000000000012;
    v4 = 0x800000000021D780;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_E5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E71C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_E604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E71C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ExposureType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_E69C + 4 * byte_1F0CA1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_E6D0 + 4 * asc_1F0C9C[v4]))();
}

uint64_t sub_E6D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E6D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE6E0);
  return result;
}

uint64_t sub_E6EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE6F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_E6F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E700(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExposureType()
{
  return &type metadata for ExposureType;
}

unint64_t sub_E71C()
{
  unint64_t result;

  result = qword_296218;
  if (!qword_296218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ExposureType, &type metadata for ExposureType);
    atomic_store(result, (unint64_t *)&qword_296218);
  }
  return result;
}

void DealsData.dealType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *DealsData.dealType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

void ViewData.viewAction.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *ViewData.viewAction.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*ViewData.viewAction.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void ViewData.viewLocation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *ViewData.viewLocation.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*ViewData.viewLocation.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

BookAnalytics::ViewData __swiftcall ViewData.init(viewType:viewAction:viewLocation:)(BookAnalytics::ViewType viewType, BookAnalytics::ViewAction viewAction, BookAnalytics::ViewLocation viewLocation)
{
  _BYTE *v3;
  char v4;
  char v5;
  BookAnalytics::ViewData result;

  v4 = *(_BYTE *)viewAction;
  v5 = *(_BYTE *)viewLocation;
  *v3 = *(_BYTE *)viewType;
  v3[1] = v4;
  v3[2] = v5;
  result.viewType = viewType;
  return result;
}

uint64_t sub_E7E8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6974634177656976;
  if (*v0 != 1)
    v1 = 0x61636F4C77656976;
  if (*v0)
    return v1;
  else
    return 0x6570795477656976;
}

uint64_t sub_E850@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E874(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_ED60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E89C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_ED60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ViewData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v4 = sub_71B4(&qword_296220);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v19 = v1[2];
  v20 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_ED60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewData.CodingKeys, &type metadata for ViewData.CodingKeys, v12, v10, v11);
  v26 = v8;
  v25 = 0;
  v13 = sub_EDA4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v4, &type metadata for ViewType, v13);
  if (!v2)
  {
    v14 = v19;
    v24 = v20;
    v23 = 1;
    v15 = sub_EDE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v4, &type metadata for ViewAction, v15);
    v22 = v14;
    v21 = 2;
    v16 = sub_EE2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v4, &type metadata for ViewLocation, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ViewData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v5 = sub_71B4(&qword_296248);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_ED60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewData.CodingKeys, &type metadata for ViewData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE3(v21) = 0;
    v12 = sub_EE70();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v21 + 4), &type metadata for ViewType, (char *)&v21 + 3, v5, &type metadata for ViewType, v12);
    v13 = BYTE4(v21);
    BYTE1(v21) = 1;
    v14 = sub_EEB4();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v21 + 2), &type metadata for ViewAction, (char *)&v21 + 1, v5, &type metadata for ViewAction, v14);
    v16 = BYTE2(v21);
    v20 = 2;
    v17 = sub_EEF8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for ViewLocation, &v20, v5, &type metadata for ViewLocation, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = v21;
    *a2 = v13;
    a2[1] = v16;
    a2[2] = v18;
  }
  return sub_7DAC(a1);
}

uint64_t sub_EC14@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ViewData.init(from:)(a1, a2);
}

uint64_t sub_EC28(_QWORD *a1)
{
  return ViewData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics8ViewDataV2eeoiySbAC_ACtFZ_0(char *a1, uint64_t a2)
{
  char v2;
  int v3;
  int v4;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *(unsigned __int8 *)(a2 + 2);
  sub_25370(*a1);
  if ((v5 & 1) != 0 && (sub_254F0(v2), (v6 & 1) != 0))
  {
    v7 = 0xE700000000000000;
    v8 = 0x434F546D6F7266;
    if (v3 != 1)
    {
      v8 = 0x646165526D6F7266;
      v7 = 0xEB00000000676E69;
    }
    if (v3)
      v9 = v8;
    else
      v9 = 0x6E776F6E6B6E75;
    if (v3)
      v10 = v7;
    else
      v10 = 0xE700000000000000;
    v11 = 0xE700000000000000;
    v12 = 0x434F546D6F7266;
    if (v4 != 1)
    {
      v12 = 0x646165526D6F7266;
      v11 = 0xEB00000000676E69;
    }
    if (v4)
      v13 = v12;
    else
      v13 = 0x6E776F6E6B6E75;
    if (v4)
      v14 = v11;
    else
      v14 = 0xE700000000000000;
    if (v9 == v13 && v10 == v14)
    {
      v15 = 1;
      v14 = v10;
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v13, v14, 0);
    }
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

unint64_t sub_ED60()
{
  unint64_t result;

  result = qword_296228;
  if (!qword_296228)
  {
    result = swift_getWitnessTable(&unk_1F0F58, &type metadata for ViewData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296228);
  }
  return result;
}

unint64_t sub_EDA4()
{
  unint64_t result;

  result = qword_296230;
  if (!qword_296230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewType, &type metadata for ViewType);
    atomic_store(result, (unint64_t *)&qword_296230);
  }
  return result;
}

unint64_t sub_EDE8()
{
  unint64_t result;

  result = qword_296238;
  if (!qword_296238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewAction, &type metadata for ViewAction);
    atomic_store(result, (unint64_t *)&qword_296238);
  }
  return result;
}

unint64_t sub_EE2C()
{
  unint64_t result;

  result = qword_296240;
  if (!qword_296240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewLocation, &type metadata for ViewLocation);
    atomic_store(result, (unint64_t *)&qword_296240);
  }
  return result;
}

unint64_t sub_EE70()
{
  unint64_t result;

  result = qword_296250;
  if (!qword_296250)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewType, &type metadata for ViewType);
    atomic_store(result, (unint64_t *)&qword_296250);
  }
  return result;
}

unint64_t sub_EEB4()
{
  unint64_t result;

  result = qword_296258;
  if (!qword_296258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewAction, &type metadata for ViewAction);
    atomic_store(result, (unint64_t *)&qword_296258);
  }
  return result;
}

unint64_t sub_EEF8()
{
  unint64_t result;

  result = qword_296260;
  if (!qword_296260)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewLocation, &type metadata for ViewLocation);
    atomic_store(result, (unint64_t *)&qword_296260);
  }
  return result;
}

unint64_t sub_EF40()
{
  unint64_t result;

  result = qword_296268;
  if (!qword_296268)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewData, &type metadata for ViewData);
    atomic_store(result, (unint64_t *)&qword_296268);
  }
  return result;
}

unint64_t sub_EF88()
{
  unint64_t result;

  result = qword_296270;
  if (!qword_296270)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewData, &type metadata for ViewData);
    atomic_store(result, (unint64_t *)&qword_296270);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewData(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ViewData(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 >= 3;
  v6 = v4 - 3;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewData(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554178) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFD)
    v3 = 0;
  if (a2 > 0xFD)
  {
    *(_WORD *)result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewData()
{
  return &type metadata for ViewData;
}

uint64_t storeEnumTagSinglePayload for ViewData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_F138 + 4 * byte_1F0DBD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_F16C + 4 * byte_1F0DB8[v4]))();
}

uint64_t sub_F16C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF17CLL);
  return result;
}

uint64_t sub_F188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF190);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_F194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F19C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewData.CodingKeys()
{
  return &type metadata for ViewData.CodingKeys;
}

unint64_t sub_F1BC()
{
  unint64_t result;

  result = qword_296278;
  if (!qword_296278)
  {
    result = swift_getWitnessTable(&unk_1F0F30, &type metadata for ViewData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296278);
  }
  return result;
}

unint64_t sub_F204()
{
  unint64_t result;

  result = qword_296280;
  if (!qword_296280)
  {
    result = swift_getWitnessTable(&unk_1F0EA0, &type metadata for ViewData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296280);
  }
  return result;
}

unint64_t sub_F24C()
{
  unint64_t result;

  result = qword_296288;
  if (!qword_296288)
  {
    result = swift_getWitnessTable(&unk_1F0EC8, &type metadata for ViewData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296288);
  }
  return result;
}

uint64_t sub_F290(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6570795477656976 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795477656976, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6974634177656976 && a2 == 0xEA00000000006E6FLL)
  {
    v7 = 0xEA00000000006E6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974634177656976, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x61636F4C77656976 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease(0xEC0000006E6F6974);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61636F4C77656976, 0xEC0000006E6F6974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t MediaData.mediaType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t MediaData.mediaType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

void RoomData.roomType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *RoomData.roomType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*MediaData.mediaDuration.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RoomData.roomName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t RoomData.roomName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 48));
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*ClickData.index.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void __swiftcall RoomData.init(roomID:roomParentSection:roomType:roomName:)(BookAnalytics::RoomData *__return_ptr retstr, Swift::String roomID, Swift::String roomParentSection, BookAnalytics::RoomType roomType, Swift::String_optional roomName)
{
  BookAnalytics::RoomType v5;

  v5 = *(_BYTE *)roomType;
  retstr->roomID = roomID;
  retstr->roomParentSection = roomParentSection;
  retstr->roomType = v5;
  retstr->roomName = roomName;
}

uint64_t sub_F51C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_F550 + 4 * byte_1F0FB0[*v0]))(0xD000000000000010, 0x800000000021EBA0);
}

uint64_t sub_F550()
{
  return 0x55746E65746E6F63;
}

uint64_t sub_F574()
{
  return 0x54746E65746E6F63;
}

uint64_t sub_F594()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_F5B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_F5D4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_F5E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FBAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F608(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FBAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WantListRemovalItemData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v3 = sub_71B4(&qword_296290);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v23 = v1[3];
  v24 = v9;
  v22 = *((unsigned __int8 *)v1 + 32);
  v10 = v1[5];
  v20 = v1[6];
  v21 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_FBAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WantListRemovalItemData.CodingKeys, &type metadata for WantListRemovalItemData.CodingKeys, v13, v11, v12);
  v30 = 0;
  v14 = v25;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v30, v3);
  if (!v14)
  {
    v15 = v22;
    v17 = v20;
    v16 = v21;
    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v23, &v29, v3);
    v28 = v15;
    v27 = 2;
    v18 = sub_FBF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v3, &type metadata for ContentType, v18);
    v26 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v26, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t WantListRemovalItemData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;

  v5 = sub_71B4(&qword_2962A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_FBAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WantListRemovalItemData.CodingKeys, &type metadata for WantListRemovalItemData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  BYTE2(v31) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v31 + 2, v5);
  v14 = v13;
  v28 = v12;
  BYTE1(v31) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v31 + 1, v5);
  v17 = v16;
  v26 = v15;
  v30 = 2;
  v18 = sub_FC34();
  swift_bridgeObjectRetain(v17);
  v27 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for ContentType, &v30, v5, &type metadata for ContentType, v18);
  HIDWORD(v25) = v31;
  v29 = 3;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  v22 = v21;
  v23 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v14);
  v24 = v27;
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = v24;
  *(_BYTE *)(a2 + 32) = BYTE4(v25);
  *(_QWORD *)(a2 + 40) = v23;
  *(_QWORD *)(a2 + 48) = v22;
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_FA6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WantListRemovalItemData.init(from:)(a1, a2);
}

uint64_t sub_FA80(_QWORD *a1)
{
  return WantListRemovalItemData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics23WantListRemovalItemDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  char v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((_BYTE *)a1 + 32);
  v9 = a1[5];
  v10 = a1[6];
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[5];
  v15 = a2[6];
  if (v4 == *a2 && v5 == v11
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v11, 0), result = 0, (v16 & 1) != 0))
  {
    if (v6 == v12 && v7 == v13
      || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0), result = 0, (v18 & 1) != 0))
    {
      sub_26C28(v8);
      if ((v19 & 1) != 0)
      {
        if (v9 == v14 && v10 == v15)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v14, v15, 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_FBAC()
{
  unint64_t result;

  result = qword_296298;
  if (!qword_296298)
  {
    result = swift_getWitnessTable(&unk_1F116C, &type metadata for WantListRemovalItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296298);
  }
  return result;
}

unint64_t sub_FBF0()
{
  unint64_t result;

  result = qword_2962A0;
  if (!qword_2962A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentType, &type metadata for ContentType);
    atomic_store(result, (unint64_t *)&qword_2962A0);
  }
  return result;
}

unint64_t sub_FC34()
{
  unint64_t result;

  result = qword_2962B0;
  if (!qword_2962B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentType, &type metadata for ContentType);
    atomic_store(result, (unint64_t *)&qword_2962B0);
  }
  return result;
}

unint64_t sub_FC7C()
{
  unint64_t result;

  result = qword_2962B8;
  if (!qword_2962B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WantListRemovalItemData, &type metadata for WantListRemovalItemData);
    atomic_store(result, (unint64_t *)&qword_2962B8);
  }
  return result;
}

unint64_t sub_FCC4()
{
  unint64_t result;

  result = qword_2962C0;
  if (!qword_2962C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WantListRemovalItemData, &type metadata for WantListRemovalItemData);
    atomic_store(result, (unint64_t *)&qword_2962C0);
  }
  return result;
}

uint64_t destroy for WantListRemovalItemData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for WantListRemovalItemData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for WantListRemovalItemData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for WantListRemovalItemData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WantListRemovalItemData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for WantListRemovalItemData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WantListRemovalItemData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WantListRemovalItemData()
{
  return &type metadata for WantListRemovalItemData;
}

uint64_t storeEnumTagSinglePayload for WantListRemovalItemData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_FF90 + 4 * byte_1F0FB9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_FFC4 + 4 * byte_1F0FB4[v4]))();
}

uint64_t sub_FFC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FFCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFFD4);
  return result;
}

uint64_t sub_FFE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFFE8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_FFEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FFF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WantListRemovalItemData.CodingKeys()
{
  return &type metadata for WantListRemovalItemData.CodingKeys;
}

unint64_t sub_10014()
{
  unint64_t result;

  result = qword_2962C8;
  if (!qword_2962C8)
  {
    result = swift_getWitnessTable(&unk_1F1144, &type metadata for WantListRemovalItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2962C8);
  }
  return result;
}

unint64_t sub_1005C()
{
  unint64_t result;

  result = qword_2962D0;
  if (!qword_2962D0)
  {
    result = swift_getWitnessTable(&unk_1F10B4, &type metadata for WantListRemovalItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2962D0);
  }
  return result;
}

unint64_t sub_100A4()
{
  unint64_t result;

  result = qword_2962D8;
  if (!qword_2962D8)
  {
    result = swift_getWitnessTable(&unk_1F10DC, &type metadata for WantListRemovalItemData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2962D8);
  }
  return result;
}

uint64_t sub_100E8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x800000000021EBA0;
    if (a2 == 0x800000000021EBA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EBA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x55746E65746E6F63 && a2 == 0xED00004449726573)
  {
    v6 = 0xED00004449726573;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55746E65746E6F63, 0xED00004449726573, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079)
  {
    v7 = 0xEB00000000657079;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E65746E6F63, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x49746E65746E6F63 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease(0xE900000000000044);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E65746E6F63, 0xE900000000000044, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_102E4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2962E0, &enum case for SessionGroup.default(_:));
}

uint64_t static SeriesContextualSheetEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2954E0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2962E0, a1);
}

uint64_t sub_10324(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2962F8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SeriesContextualSheetEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2954E8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2962F8, a1);
}

uint64_t SeriesContextualSheetEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SeriesContextualSheetEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t SeriesContextualSheetEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesContextualSheetEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesContextualSheetEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_296398, (uint64_t)&nominal type descriptor for SeriesContextualSheetEvent);
}

uint64_t SeriesContextualSheetEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesContextualSheetEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesContextualSheetEvent.eventData.modify())()
{
  type metadata accessor for SeriesContextualSheetEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesContextualSheetEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesContextualSheetEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesContextualSheetEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesContextualSheetEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SeriesContextualSheetEvent.timedData.modify())()
{
  type metadata accessor for SeriesContextualSheetEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SeriesContextualSheetEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for SeriesContextualSheetEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t SeriesContextualSheetEvent.Model.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_WORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 26);
  v7 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 26) = v5;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t SeriesContextualSheetEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesContextualSheetEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SeriesContextualSheetEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_296438, (uint64_t)&nominal type descriptor for SeriesContextualSheetEvent.Model);
}

uint64_t SeriesContextualSheetEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SeriesContextualSheetEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SeriesContextualSheetEvent.Model.init(seriesData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_WORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 26);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_BYTE *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_WORD *)(a4 + 24) = v9;
  *(_BYTE *)(a4 + 26) = v10;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  v11 = type metadata accessor for SeriesContextualSheetEvent.Model(0);
  v12 = a4 + *(int *)(v11 + 20);
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  v14 = a4 + *(int *)(v11 + 24);
  v15 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a3, v15);
}

uint64_t sub_107B8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0x6144736569726573;
}

uint64_t sub_10820@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_11F7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10844(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10A8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1086C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10A8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SeriesContextualSheetEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  __int128 v32;

  v3 = v1;
  v5 = sub_71B4(&qword_296318);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_10A8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SeriesContextualSheetEvent.Model.CodingKeys, &type metadata for SeriesContextualSheetEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 8);
  v13 = v3[2];
  v14 = *((_WORD *)v3 + 12);
  v15 = *((_BYTE *)v3 + 26);
  v27 = *v3;
  v28 = v12;
  v29 = v13;
  v30 = v14;
  v31 = v15;
  v32 = *((_OWORD *)v3 + 2);
  v26 = 0;
  v16 = sub_10AD0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v5, &type metadata for SeriesData, v16);
  if (!v2)
  {
    v17 = type metadata accessor for SeriesContextualSheetEvent.Model(0);
    v18 = (uint64_t)v3 + *(int *)(v17 + 20);
    LOBYTE(v27) = 1;
    v19 = type metadata accessor for EventData(0);
    v20 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v27, v5, v19, v20);
    v21 = (uint64_t)v3 + *(int *)(v17 + 24);
    LOBYTE(v27) = 2;
    v22 = type metadata accessor for TimedData(0);
    v23 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v27, v5, v22, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10A8C()
{
  unint64_t result;

  result = qword_296320;
  if (!qword_296320)
  {
    result = swift_getWitnessTable(&unk_1F1384, &type metadata for SeriesContextualSheetEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296320);
  }
  return result;
}

unint64_t sub_10AD0()
{
  unint64_t result;

  result = qword_296328;
  if (!qword_296328)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesData, &type metadata for SeriesData);
    atomic_store(result, (unint64_t *)&qword_296328);
  }
  return result;
}

uint64_t SeriesContextualSheetEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  __int128 v49;
  char v50;

  v36 = a2;
  v37 = type metadata accessor for TimedData(0);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v38 = (uint64_t *)((char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_71B4(&qword_296330);
  v7 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeriesContextualSheetEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v42 = a1;
  sub_7988(a1, v13);
  v15 = sub_10A8C();
  v41 = v9;
  v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeriesContextualSheetEvent.Model.CodingKeys, &type metadata for SeriesContextualSheetEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(v42);
  v17 = v6;
  v43 = v7;
  v18 = (uint64_t)v12;
  v19 = v4;
  v20 = v39;
  v50 = 0;
  v21 = sub_10EA0();
  v22 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for SeriesData, &v50, v40, &type metadata for SeriesData, v21);
  v23 = v45;
  v24 = v46;
  v25 = v47;
  v26 = v48;
  *(_QWORD *)v18 = v44;
  *(_BYTE *)(v18 + 8) = v23;
  *(_QWORD *)(v18 + 16) = v24;
  *(_WORD *)(v18 + 24) = v25;
  *(_BYTE *)(v18 + 26) = v26;
  *(_OWORD *)(v18 + 32) = v49;
  LOBYTE(v44) = 1;
  v27 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v20, &v44, v22, v20, v27);
  v28 = v22;
  v29 = v10;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v19 + 32))(v18 + *(int *)(v10 + 20), v17, v20);
  LOBYTE(v44) = 2;
  v30 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v32 = v37;
  v31 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v37, &v44, v28, v37, v30);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v40);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v35 + 32))(v18 + *(int *)(v29 + 24), v31, v32);
  sub_10EE4(v18, v36);
  sub_7DAC(v42);
  return sub_10F28(v18);
}

unint64_t sub_10EA0()
{
  unint64_t result;

  result = qword_296338;
  if (!qword_296338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesData, &type metadata for SeriesData);
    atomic_store(result, (unint64_t *)&qword_296338);
  }
  return result;
}

uint64_t sub_10EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeriesContextualSheetEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10F28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeriesContextualSheetEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10F64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SeriesContextualSheetEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_10F78(_QWORD *a1)
{
  return SeriesContextualSheetEvent.Model.encode(to:)(a1);
}

uint64_t sub_10F8C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2954E0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2962E0, (uint64_t)sub_102E4, a1);
}

uint64_t sub_10FB0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2954E8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2962F8, (uint64_t)sub_10324, a1);
}

uint64_t sub_10FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for SeriesContextualSheetEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296310);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for SeriesContextualSheetEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SeriesContextualSheetEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for SeriesContextualSheetEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for SeriesContextualSheetEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SeriesContextualSheetEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesContextualSheetEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_114F8);
}

uint64_t sub_114F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296310);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SeriesContextualSheetEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_115A8);
}

uint64_t sub_115A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296310);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_11654(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_116F4(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_116F4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2963A8)
  {
    v2 = sub_10EA0();
    v3 = sub_10AD0();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for SeriesData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2963A8);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SeriesContextualSheetEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)((char *)a2 + 25);
    v7 = a2[5];
    v8 = *(int *)(a3 + 20);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v11 = type metadata accessor for EventData(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t destroy for SeriesContextualSheetEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for SeriesContextualSheetEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v10 = type metadata accessor for EventData(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t assignWithCopy for SeriesContextualSheetEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for SeriesContextualSheetEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SeriesContextualSheetEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesContextualSheetEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11BF4);
}

uint64_t sub_11BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = type metadata accessor for TimedData(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for SeriesContextualSheetEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11CAC);
}

uint64_t sub_11CAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_11D48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = "0";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SeriesContextualSheetEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_11E24 + 4 * byte_1F11C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_11E58 + 4 * byte_1F11C0[v4]))();
}

uint64_t sub_11E58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11E60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x11E68);
  return result;
}

uint64_t sub_11E74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x11E7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_11E80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_11E88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesContextualSheetEvent.Model.CodingKeys()
{
  return &type metadata for SeriesContextualSheetEvent.Model.CodingKeys;
}

unint64_t sub_11EA8()
{
  unint64_t result;

  result = qword_296478;
  if (!qword_296478)
  {
    result = swift_getWitnessTable(&unk_1F135C, &type metadata for SeriesContextualSheetEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296478);
  }
  return result;
}

unint64_t sub_11EF0()
{
  unint64_t result;

  result = qword_296480;
  if (!qword_296480)
  {
    result = swift_getWitnessTable(&unk_1F12CC, &type metadata for SeriesContextualSheetEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296480);
  }
  return result;
}

unint64_t sub_11F38()
{
  unint64_t result;

  result = qword_296488;
  if (!qword_296488)
  {
    result = swift_getWitnessTable(&unk_1F12F4, &type metadata for SeriesContextualSheetEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296488);
  }
  return result;
}

uint64_t sub_11F7C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v7 = 0xE900000000000061;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_120F4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_296490, &enum case for SessionGroup.default(_:));
}

uint64_t static WelcomeActionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2954F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296490, a1);
}

uint64_t sub_12134(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2964A8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static WelcomeActionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2954F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2964A8, a1);
}

uint64_t WelcomeActionEvent.welcomeScreenData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2964C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t WelcomeActionEvent.welcomeScreenData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2964C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t WelcomeActionEvent.welcomeActionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent(0) + 20);
  v4 = sub_71B4(&qword_2964C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WelcomeActionEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_296560, (uint64_t)&nominal type descriptor for WelcomeActionEvent);
}

uint64_t WelcomeActionEvent.welcomeActionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent(0) + 20);
  v4 = sub_71B4(&qword_2964C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WelcomeActionEvent.welcomeActionData.modify())()
{
  type metadata accessor for WelcomeActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WelcomeActionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WelcomeActionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WelcomeActionEvent.eventData.modify())()
{
  type metadata accessor for WelcomeActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WelcomeActionEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WelcomeActionEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent(0) + 28);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*WelcomeActionEvent.timedData.modify())()
{
  type metadata accessor for WelcomeActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t WelcomeActionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for WelcomeActionEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2964C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
}

void WelcomeScreenViewEvent.Model.welcomeScreenData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 4);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_DWORD *)(a1 + 4) = v2;
}

void RemoveFromWantListEvent.Model.wantListRemovalTypeData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

uint64_t WelcomeActionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WelcomeActionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_296608, (uint64_t)&nominal type descriptor for WelcomeActionEvent.Model);
}

uint64_t WelcomeActionEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeActionEvent.Model(0) + 28);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WelcomeActionEvent.Model.init(welcomeScreenData:welcomeActionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_DWORD *)(a1 + 4);
  v9 = *a2;
  *(_BYTE *)a5 = *(_BYTE *)a1;
  *(_DWORD *)(a5 + 4) = v8;
  *(_BYTE *)(a5 + 8) = v9;
  v10 = type metadata accessor for WelcomeActionEvent.Model(0);
  v11 = a5 + *(int *)(v10 + 24);
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a3, v12);
  v13 = a5 + *(int *)(v10 + 28);
  v14 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a4, v14);
}

uint64_t sub_12688()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_126BC + 4 * byte_1F13E0[*v0]))(0xD000000000000011, 0x800000000021EBC0);
}

uint64_t sub_126D0()
{
  return 0x746144746E657665;
}

uint64_t sub_126FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_13F94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_12720(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_12988();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_12748(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_12988();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WelcomeActionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _BYTE v24[4];
  int v25;

  v3 = v1;
  v5 = sub_71B4(&qword_2964D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_12988();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WelcomeActionEvent.Model.CodingKeys, &type metadata for WelcomeActionEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_DWORD *)(v3 + 4);
  v24[0] = *(_BYTE *)v3;
  v25 = v12;
  HIBYTE(v23) = 0;
  v13 = sub_129CC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, (char *)&v23 + 7, v5, &type metadata for WelcomeScreenData, v13);
  if (!v2)
  {
    BYTE6(v23) = *(_BYTE *)(v3 + 8);
    BYTE5(v23) = 1;
    v14 = sub_12A10();
    KeyedEncodingContainer.encode<A>(_:forKey:)((char *)&v23 + 6, (char *)&v23 + 5, v5, &type metadata for WelcomeActionData, v14);
    v15 = type metadata accessor for WelcomeActionEvent.Model(0);
    v16 = v3 + *(int *)(v15 + 24);
    BYTE4(v23) = 2;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, (char *)&v23 + 4, v5, v17, v18);
    v19 = v3 + *(int *)(v15 + 28);
    BYTE3(v23) = 3;
    v20 = type metadata accessor for TimedData(0);
    v21 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, (char *)&v23 + 3, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_12988()
{
  unint64_t result;

  result = qword_2964D8;
  if (!qword_2964D8)
  {
    result = swift_getWitnessTable(&unk_1F15C4, &type metadata for WelcomeActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2964D8);
  }
  return result;
}

unint64_t sub_129CC()
{
  unint64_t result;

  result = qword_2964E0;
  if (!qword_2964E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WelcomeScreenData, &type metadata for WelcomeScreenData);
    atomic_store(result, (unint64_t *)&qword_2964E0);
  }
  return result;
}

unint64_t sub_12A10()
{
  unint64_t result;

  result = qword_2964E8;
  if (!qword_2964E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WelcomeActionData, &type metadata for WelcomeActionData);
    atomic_store(result, (unint64_t *)&qword_2964E8);
  }
  return result;
}

uint64_t WelcomeActionEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v31 = a2;
  v32 = type metadata accessor for TimedData(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for EventData(0);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_71B4(&qword_2964F0);
  v6 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WelcomeActionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_12988();
  v36 = v8;
  v15 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WelcomeActionEvent.Model.CodingKeys, &type metadata for WelcomeActionEvent.Model.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_7DAC(a1);
  v16 = v5;
  v38 = v9;
  v17 = v6;
  v18 = v34;
  v19 = v35;
  v20 = v33;
  BYTE1(v42) = 0;
  v21 = sub_12DC0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for WelcomeScreenData, (char *)&v42 + 1, v37, &type metadata for WelcomeScreenData, v21);
  v22 = HIDWORD(v43);
  *v11 = v43;
  *((_DWORD *)v11 + 1) = v22;
  v41 = 1;
  v23 = sub_12E04();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for WelcomeActionData, &v41, v37, &type metadata for WelcomeActionData, v23);
  v11[8] = v42;
  v40 = 2;
  v24 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v20, &v40, v37, v20, v24);
  (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(&v11[*(int *)(v38 + 24)], v16, v20);
  v39 = 3;
  v25 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v26 = v18;
  v27 = v18;
  v28 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v32, &v39, v37, v32, v25);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v36, v37);
  (*(void (**)(char *, _QWORD *, uint64_t))(v30 + 32))(&v11[*(int *)(v38 + 28)], v26, v28);
  sub_12E48((uint64_t)v11, v31);
  sub_7DAC(a1);
  return sub_12E8C((uint64_t)v11);
}

unint64_t sub_12DC0()
{
  unint64_t result;

  result = qword_2964F8;
  if (!qword_2964F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WelcomeScreenData, &type metadata for WelcomeScreenData);
    atomic_store(result, (unint64_t *)&qword_2964F8);
  }
  return result;
}

unint64_t sub_12E04()
{
  unint64_t result;

  result = qword_296500;
  if (!qword_296500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WelcomeActionData, &type metadata for WelcomeActionData);
    atomic_store(result, (unint64_t *)&qword_296500);
  }
  return result;
}

uint64_t sub_12E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WelcomeActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_12E8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WelcomeActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_12EC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WelcomeActionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_12EDC(_QWORD *a1)
{
  return WelcomeActionEvent.Model.encode(to:)(a1);
}

uint64_t sub_12EF0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2954F0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296490, (uint64_t)sub_120F4, a1);
}

uint64_t sub_12F14@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2954F8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2964A8, (uint64_t)sub_12134, a1);
}

uint64_t sub_12F38@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2964C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
}

uint64_t *initializeBufferWithCopyOfBuffer for WelcomeActionEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_2964C0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2964C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for WelcomeActionEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2964C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for WelcomeActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2964C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for WelcomeActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2964C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for WelcomeActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2964C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for WelcomeActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_2964C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2964C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for WelcomeActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_135A0);
}

uint64_t sub_135A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_2964C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2964C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D78);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WelcomeActionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13678);
}

uint64_t sub_13678(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_2964C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2964C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D78);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1374C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_296570, (uint64_t (*)(void))sub_12DC0, (uint64_t (*)(void))sub_129CC, (uint64_t)&type metadata for WelcomeScreenData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296578, (uint64_t (*)(void))sub_12E04, (uint64_t (*)(void))sub_12A10, (uint64_t)&type metadata for WelcomeActionData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_87D8(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for WelcomeActionEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(a3 + 24);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 28);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t destroy for WelcomeActionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for WelcomeActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for WelcomeActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for WelcomeActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for WelcomeActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for WelcomeActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13C1C);
}

uint64_t sub_13C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 253)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WelcomeActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13CC0);
}

uint64_t sub_13CC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 8) = a2 + 2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_13D58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = "\b";
  v5[1] = &unk_1F14E8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WelcomeActionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_13E3C + 4 * byte_1F13E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_13E70 + 4 * byte_1F13E4[v4]))();
}

uint64_t sub_13E70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_13E78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13E80);
  return result;
}

uint64_t sub_13E8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13E94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_13E98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_13EA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WelcomeActionEvent.Model.CodingKeys()
{
  return &type metadata for WelcomeActionEvent.Model.CodingKeys;
}

unint64_t sub_13EC0()
{
  unint64_t result;

  result = qword_296648;
  if (!qword_296648)
  {
    result = swift_getWitnessTable(&unk_1F159C, &type metadata for WelcomeActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296648);
  }
  return result;
}

unint64_t sub_13F08()
{
  unint64_t result;

  result = qword_296650;
  if (!qword_296650)
  {
    result = swift_getWitnessTable(&unk_1F150C, &type metadata for WelcomeActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296650);
  }
  return result;
}

unint64_t sub_13F50()
{
  unint64_t result;

  result = qword_296658;
  if (!qword_296658)
  {
    result = swift_getWitnessTable(&unk_1F1534, &type metadata for WelcomeActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296658);
  }
  return result;
}

uint64_t sub_13F94(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x800000000021EBC0;
    if (a2 == 0x800000000021EBC0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021EBC0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v6 = 0x800000000021EBE0;
    if (a2 == 0x800000000021EBE0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021EBE0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v7 = 0xE900000000000061;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_16;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::DealsData __swiftcall DealsData.init(dealType:)(BookAnalytics::DealsData dealType)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)dealType.dealType.value;
  return dealType;
}

uint64_t sub_14160()
{
  return 1;
}

Swift::Int sub_14168()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_141A8()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_141CC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t sub_14208()
{
  return 0xD000000000000014;
}

uint64_t sub_14224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_149EC(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_1424C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_14258(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_145F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14280(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_145F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GetStartedActionData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_296660);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_145F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GetStartedActionData.CodingKeys, &type metadata for GetStartedActionData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_14638();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for GetStartedActionType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t GetStartedActionData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_296678);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_145F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GetStartedActionData.CodingKeys, &type metadata for GetStartedActionData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_1467C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for GetStartedActionType, v13, v5, &type metadata for GetStartedActionType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_144C0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GetStartedActionData.init(from:)(a1, a2);
}

uint64_t sub_144D4(_QWORD *a1)
{
  return GetStartedActionData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics20GetStartedActionDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE800000000000000;
  v4 = 0x65756E69746E6F63;
  if (v2 != 1)
  {
    v4 = 0x616E614D61746164;
    v3 = 0xEA00000000006567;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  v7 = 0xE800000000000000;
  v8 = 0x65756E69746E6F63;
  if (*a2 != 1)
  {
    v8 = 0x616E614D61746164;
    v7 = 0xEA00000000006567;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xE700000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_145F4()
{
  unint64_t result;

  result = qword_296668;
  if (!qword_296668)
  {
    result = swift_getWitnessTable(&unk_1F17C8, &type metadata for GetStartedActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296668);
  }
  return result;
}

unint64_t sub_14638()
{
  unint64_t result;

  result = qword_296670;
  if (!qword_296670)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GetStartedActionType, &type metadata for GetStartedActionType);
    atomic_store(result, (unint64_t *)&qword_296670);
  }
  return result;
}

unint64_t sub_1467C()
{
  unint64_t result;

  result = qword_296680;
  if (!qword_296680)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GetStartedActionType, &type metadata for GetStartedActionType);
    atomic_store(result, (unint64_t *)&qword_296680);
  }
  return result;
}

unint64_t sub_146C4()
{
  unint64_t result;

  result = qword_296688;
  if (!qword_296688)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GetStartedActionData, &type metadata for GetStartedActionData);
    atomic_store(result, (unint64_t *)&qword_296688);
  }
  return result;
}

unint64_t sub_1470C()
{
  unint64_t result;

  result = qword_296690;
  if (!qword_296690)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GetStartedActionData, &type metadata for GetStartedActionData);
    atomic_store(result, (unint64_t *)&qword_296690);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GetStartedActionData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1479C + 4 * byte_1F1625[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_147D0 + 4 * byte_1F1620[v4]))();
}

uint64_t sub_147D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_147D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x147E0);
  return result;
}

uint64_t sub_147EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x147F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_147F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14800(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GetStartedActionData()
{
  return &type metadata for GetStartedActionData;
}

uint64_t getEnumTagSinglePayload for GetStartedActionData.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for GetStartedActionData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_148B0 + 4 * byte_1F162A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_148D0 + 4 * byte_1F162F[v4]))();
}

_BYTE *sub_148B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_148D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_148D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_148E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_148E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_148F0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_148FC()
{
  return 0;
}

ValueMetadata *type metadata accessor for GetStartedActionData.CodingKeys()
{
  return &type metadata for GetStartedActionData.CodingKeys;
}

unint64_t sub_14918()
{
  unint64_t result;

  result = qword_296698;
  if (!qword_296698)
  {
    result = swift_getWitnessTable(&unk_1F17A0, &type metadata for GetStartedActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296698);
  }
  return result;
}

unint64_t sub_14960()
{
  unint64_t result;

  result = qword_2966A0;
  if (!qword_2966A0)
  {
    result = swift_getWitnessTable(&unk_1F1710, &type metadata for GetStartedActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2966A0);
  }
  return result;
}

unint64_t sub_149A8()
{
  unint64_t result;

  result = qword_2966A8;
  if (!qword_2966A8)
  {
    result = swift_getWitnessTable(&unk_1F1738, &type metadata for GetStartedActionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2966A8);
  }
  return result;
}

uint64_t sub_149EC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000014 && a2 == 0x800000000021EC00)
  {
    swift_bridgeObjectRelease(0x800000000021EC00);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021EC00, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

BookAnalytics::ModelType_optional __swiftcall ModelType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ModelType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2661F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ModelType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14AF8 + 4 * byte_1F1818[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_14AF8()
{
  return 0x6C61626F6C67;
}

uint64_t sub_14B0C()
{
  return 0x6E656D6D6F636572;
}

uint64_t sub_14B30()
{
  return 0x736C616F67;
}

uint64_t sub_14B44()
{
  return 0x62756C636B6F6F62;
}

uint64_t sub_14B5C()
{
  return 0x43676E6964616572;
}

void sub_14B80(char *a1)
{
  sub_24B14(*a1);
}

unint64_t sub_14B90()
{
  unint64_t result;

  result = qword_2966B0;
  if (!qword_2966B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ModelType, &type metadata for ModelType);
    atomic_store(result, (unint64_t *)&qword_2966B0);
  }
  return result;
}

void sub_14BD4()
{
  char *v0;

  sub_19515C(*v0);
}

void sub_14BDC()
{
  __asm { BR              X10 }
}

uint64_t sub_14C18(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C61626F6C67, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_14CB4(uint64_t a1)
{
  char *v1;

  sub_1D441C(a1, *v1);
}

BookAnalytics::ModelType_optional sub_14CBC(Swift::String *a1)
{
  return ModelType.init(rawValue:)(*a1);
}

uint64_t sub_14CC8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_14CF8 + 4 * byte_1F1824[*v0]))();
}

void sub_14CF8(_QWORD *a1@<X8>)
{
  *a1 = 0x6C61626F6C67;
  a1[1] = 0xE600000000000000;
}

void sub_14D10(_QWORD *a1@<X8>)
{
  *a1 = 0x6E656D6D6F636572;
  a1[1] = 0xEF736E6F69746164;
}

void sub_14D38(_QWORD *a1@<X8>)
{
  *a1 = 0x736C616F67;
  a1[1] = 0xE500000000000000;
}

void sub_14D50(_QWORD *a1@<X8>)
{
  *a1 = 0x62756C636B6F6F62;
  a1[1] = 0xE800000000000000;
}

void sub_14D6C(_QWORD *a1@<X8>)
{
  *a1 = 0x43676E6964616572;
  a1[1] = 0xEF676E696863616FLL;
}

uint64_t sub_14D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_14F98();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_14DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_14F98();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for ModelType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_14F18 + 4 * byte_1F182F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_14F4C + 4 * byte_1F182A[v4]))();
}

uint64_t sub_14F4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14F5CLL);
  return result;
}

uint64_t sub_14F68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14F70);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_14F74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelType()
{
  return &type metadata for ModelType;
}

unint64_t sub_14F98()
{
  unint64_t result;

  result = qword_2966B8;
  if (!qword_2966B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ModelType, &type metadata for ModelType);
    atomic_store(result, (unint64_t *)&qword_2966B8);
  }
  return result;
}

BookAnalytics::ScrollViewStatus_optional __swiftcall ScrollViewStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ScrollViewStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2662A0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

unint64_t sub_15038()
{
  unint64_t result;

  result = qword_2966C0;
  if (!qword_2966C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollViewStatus, &type metadata for ScrollViewStatus);
    atomic_store(result, (unint64_t *)&qword_2966C0);
  }
  return result;
}

BookAnalytics::ScrollViewStatus_optional sub_1507C(Swift::String *a1)
{
  return ScrollViewStatus.init(rawValue:)(*a1);
}

uint64_t sub_15088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_151FC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_150E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_151FC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ScrollViewStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1517C + 4 * byte_1F1955[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_151B0 + 4 * byte_1F1950[v4]))();
}

uint64_t sub_151B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_151B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x151C0);
  return result;
}

uint64_t sub_151CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x151D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_151D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_151E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewStatus()
{
  return &type metadata for ScrollViewStatus;
}

unint64_t sub_151FC()
{
  unint64_t result;

  result = qword_2966C8;
  if (!qword_2966C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollViewStatus, &type metadata for ScrollViewStatus);
    atomic_store(result, (unint64_t *)&qword_2966C8);
  }
  return result;
}

BookAnalytics::ReaderType_optional __swiftcall ReaderType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ReaderType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266308, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ReaderType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_152D0 + 4 * byte_1F1A70[*v0]))(0x655279646E657274, 0xEC00000072656461);
}

uint64_t sub_152D0()
{
  return 0x6552736569726573;
}

unint64_t sub_152E4()
{
  return 0xD000000000000010;
}

unint64_t sub_1530C()
{
  return 0xD000000000000011;
}

uint64_t sub_1532C()
{
  return 0x52636972656E6567;
}

void sub_15350(char *a1)
{
  sub_2A508(*a1);
}

unint64_t sub_15360()
{
  unint64_t result;

  result = qword_2966D0;
  if (!qword_2966D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReaderType, &type metadata for ReaderType);
    atomic_store(result, (unint64_t *)&qword_2966D0);
  }
  return result;
}

void sub_153A4()
{
  char *v0;

  sub_19525C(*v0);
}

void sub_153AC(uint64_t a1)
{
  char *v1;

  sub_1ED400(a1, *v1);
}

void sub_153B4(uint64_t a1)
{
  char *v1;

  sub_1D2C50(a1, *v1);
}

BookAnalytics::ReaderType_optional sub_153BC(Swift::String *a1)
{
  return ReaderType.init(rawValue:)(*a1);
}

uint64_t sub_153C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ReaderType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_153EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_15560();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_15448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_15560();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ReaderType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_154E0 + 4 * byte_1F1A7B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_15514 + 4 * byte_1F1A76[v4]))();
}

uint64_t sub_15514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1551C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15524);
  return result;
}

uint64_t sub_15530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15538);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1553C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReaderType()
{
  return &type metadata for ReaderType;
}

unint64_t sub_15560()
{
  unint64_t result;

  result = qword_2966D8;
  if (!qword_2966D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReaderType, &type metadata for ReaderType);
    atomic_store(result, (unint64_t *)&qword_2966D8);
  }
  return result;
}

uint64_t sub_155A4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x697463656C6C6F63;
}

uint64_t sub_155EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_15BC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_15610(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15790();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15638(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15790();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SingleCollectionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char v17;

  v4 = sub_71B4(&qword_2966E0);
  v14 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v15 = *((_DWORD *)v1 + 4);
  v10 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v10);
  v11 = sub_15790();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SingleCollectionData.CodingKeys, &type metadata for SingleCollectionData.CodingKeys, v11, v10, v9);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v17, v4);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

unint64_t sub_15790()
{
  unint64_t result;

  result = qword_2966E8;
  if (!qword_2966E8)
  {
    result = swift_getWitnessTable(&unk_1F1D48, &type metadata for SingleCollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2966E8);
  }
  return result;
}

uint64_t SingleCollectionData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  char v18;
  char v19;

  v5 = sub_71B4(&qword_2966F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_15790();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SingleCollectionData.CodingKeys, &type metadata for SingleCollectionData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  v19 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
  v14 = v13;
  v18 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  sub_7DAC(a1);
  return swift_bridgeObjectRelease(v14);
}

unint64_t sub_1595C()
{
  unint64_t result;

  result = qword_2966F8;
  if (!qword_2966F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SingleCollectionData, &type metadata for SingleCollectionData);
    atomic_store(result, (unint64_t *)&qword_2966F8);
  }
  return result;
}

unint64_t sub_159A4()
{
  unint64_t result;

  result = qword_296700;
  if (!qword_296700)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SingleCollectionData, &type metadata for SingleCollectionData);
    atomic_store(result, (unint64_t *)&qword_296700);
  }
  return result;
}

uint64_t sub_159E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleCollectionData.init(from:)(a1, a2);
}

uint64_t sub_159FC(_QWORD *a1)
{
  return SingleCollectionData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for SingleCollectionData()
{
  return &type metadata for SingleCollectionData;
}

uint64_t storeEnumTagSinglePayload for SingleCollectionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_15A6C + 4 * byte_1F1BA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_15AA0 + 4 * byte_1F1BA0[v4]))();
}

uint64_t sub_15AA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15AA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15AB0);
  return result;
}

uint64_t sub_15ABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15AC4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_15AC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15AD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SingleCollectionData.CodingKeys()
{
  return &type metadata for SingleCollectionData.CodingKeys;
}

unint64_t sub_15AF0()
{
  unint64_t result;

  result = qword_296708;
  if (!qword_296708)
  {
    result = swift_getWitnessTable(&unk_1F1D20, &type metadata for SingleCollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296708);
  }
  return result;
}

unint64_t sub_15B38()
{
  unint64_t result;

  result = qword_296710;
  if (!qword_296710)
  {
    result = swift_getWitnessTable(&unk_1F1C90, &type metadata for SingleCollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296710);
  }
  return result;
}

unint64_t sub_15B80()
{
  unint64_t result;

  result = qword_296718;
  if (!qword_296718)
  {
    result = swift_getWitnessTable(&unk_1F1CB8, &type metadata for SingleCollectionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296718);
  }
  return result;
}

uint64_t sub_15BC4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x697463656C6C6F63 && a2 == 0xEC00000044496E6FLL)
  {
    v5 = 0xEC00000044496E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEC00000044496E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021EC20)
  {
    swift_bridgeObjectRelease(0x800000000021EC20);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021EC20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::CellularRadioAccessTechnology_optional __swiftcall CellularRadioAccessTechnology.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::CellularRadioAccessTechnology_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2663B8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 16;
  if (v5 < 0x10)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t CellularRadioAccessTechnology.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_15D50 + 4 * byte_1F1DA0[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_15D50()
{
  return 1936879719;
}

uint64_t sub_15D60()
{
  return 1701274725;
}

uint64_t sub_15D70()
{
  return 0x616D646377;
}

uint64_t sub_15D84()
{
  return 0x6170647368;
}

uint64_t sub_15D98()
{
  return 0x6170757368;
}

uint64_t sub_15DB4()
{
  return 0x7831616D6463;
}

uint64_t sub_15DC8()
{
  return 0x6F647665616D6463;
}

uint64_t sub_15E00()
{
  return 0x6470726865;
}

uint64_t sub_15E14()
{
  return 6648940;
}

uint64_t sub_15E24()
{
  return 1768319351;
}

uint64_t sub_15E34()
{
  return 0x6863616552746F6ELL;
}

uint64_t sub_15E54()
{
  return 0x61736E726ELL;
}

uint64_t sub_15E68()
{
  return 29294;
}

uint64_t sub_15E74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_27028(*a1, *a2);
}

unint64_t sub_15E84()
{
  unint64_t result;

  result = qword_296720;
  if (!qword_296720)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CellularRadioAccessTechnology, &type metadata for CellularRadioAccessTechnology);
    atomic_store(result, (unint64_t *)&qword_296720);
  }
  return result;
}

Swift::Int sub_15EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = CellularRadioAccessTechnology.rawValue.getter();
  v2 = v1;
  String.hash(into:)(v4, v0, v1);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_15F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = CellularRadioAccessTechnology.rawValue.getter();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_15F7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  v1 = CellularRadioAccessTechnology.rawValue.getter();
  v3 = v2;
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

BookAnalytics::CellularRadioAccessTechnology_optional sub_15FDC(Swift::String *a1)
{
  return CellularRadioAccessTechnology.init(rawValue:)(*a1);
}

uint64_t sub_15FE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CellularRadioAccessTechnology.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1600C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_16210();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_16068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_16210();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for CellularRadioAccessTechnology(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CellularRadioAccessTechnology(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_16190 + 4 * byte_1F1DB5[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_161C4 + 4 * byte_1F1DB0[v4]))();
}

uint64_t sub_161C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_161CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x161D4);
  return result;
}

uint64_t sub_161E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x161E8);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_161EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_161F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CellularRadioAccessTechnology()
{
  return &type metadata for CellularRadioAccessTechnology;
}

unint64_t sub_16210()
{
  unint64_t result;

  result = qword_296728;
  if (!qword_296728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CellularRadioAccessTechnology, &type metadata for CellularRadioAccessTechnology);
    atomic_store(result, (unint64_t *)&qword_296728);
  }
  return result;
}

uint64_t sub_16254(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_296730, &enum case for SessionGroup.default(_:));
}

uint64_t static AudioSkipEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295500, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296730, a1);
}

uint64_t sub_16294(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_296748, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AudioSkipEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295508, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_296748, a1);
}

uint64_t PlayEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PlayEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AudioSkipEvent.skipData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 20);
  v4 = sub_71B4(&qword_296768);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AudioSkipEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_296848, (uint64_t)&nominal type descriptor for AudioSkipEvent);
}

uint64_t AudioSkipEvent.skipData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 20);
  v4 = sub_71B4(&qword_296768);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSkipEvent.skipData.modify())()
{
  type metadata accessor for AudioSkipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSkipEvent.listeningActionSourceData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 24);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioSkipEvent.listeningActionSourceData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 24);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSkipEvent.listeningActionSourceData.modify())()
{
  type metadata accessor for AudioSkipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSkipEvent.bitRateData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 28);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioSkipEvent.bitRateData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 28);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSkipEvent.bitRateData.modify())()
{
  type metadata accessor for AudioSkipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSkipEvent.errorData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 32);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioSkipEvent.errorData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 32);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSkipEvent.errorData.modify())()
{
  type metadata accessor for AudioSkipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSkipEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 36);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioSkipEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 36);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSkipEvent.seriesData.modify())()
{
  type metadata accessor for AudioSkipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSkipEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 40);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioSkipEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent(0) + 40);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AudioSkipEvent.eventData.modify())()
{
  type metadata accessor for AudioSkipEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AudioSkipEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for AudioSkipEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v2, v12);
  v13 = a1 + v4[9];
  v14 = enum case for EventProperty.optional<A>(_:);
  v15 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
}

uint64_t PlayEvent.Model.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_WORD *)(v1 + 56);
  v9 = *(_DWORD *)(v1 + 60);
  v10 = *(_BYTE *)(v1 + 64);
  v11 = *(_DWORD *)(v1 + 68);
  v12 = *(_BYTE *)(v1 + 72);
  v13 = *(_BYTE *)(v1 + 77);
  v15 = *(_QWORD *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 60) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 68) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(v1 + 73);
  *(_BYTE *)(a1 + 77) = v13;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

uint64_t AudioSkipEvent.Model.skipData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_DWORD *)(v1 + 104);
  v3 = *(_BYTE *)(v1 + 108);
  v4 = *(_WORD *)(v1 + 109);
  v6 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v7 = *(_BYTE *)(v1 + 128);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 96);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
  *(_WORD *)(a1 + 13) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v7;
  return swift_bridgeObjectRetain(v5);
}

void AudioSkipEvent.Model.listeningActionSourceData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 129);
}

void AudioSkipEvent.Model.bitRateData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 136);
  v3 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 132);
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
}

uint64_t AudioSkipEvent.Model.errorData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[19];
  v3 = v1[20];
  v4 = v1[21];
  *a1 = v1[18];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t SearchResultSelectEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[22];
  v3 = v1[23];
  v4 = v1[24];
  v5 = v1[25];
  v6 = v1[26];
  v7 = v1[27];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_16A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6 != 1)
    return swift_bridgeObjectRetain(a6);
  return result;
}

uint64_t AudioSkipEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioSkipEvent.Model(0) + 40);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AudioSkipEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_296918, (uint64_t)&nominal type descriptor for AudioSkipEvent.Model);
}

uint64_t AudioSkipEvent.Model.init(contentData:skipData:listeningActionSourceData:bitRateData:errorData:seriesData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 *a3@<X2>, int *a4@<X3>, __int128 *a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  char v16;
  int v17;
  char v18;
  char v19;
  int v20;
  char v21;
  __int16 v22;
  char v23;
  __int16 v24;
  int v25;
  char v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  v11 = *(_OWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_WORD *)(a1 + 56);
  v15 = *(_DWORD *)(a1 + 60);
  v16 = *(_BYTE *)(a1 + 64);
  v17 = *(_DWORD *)(a1 + 68);
  v18 = *(_BYTE *)(a1 + 72);
  v19 = *(_BYTE *)(a1 + 77);
  v20 = *(_DWORD *)(a2 + 8);
  v21 = *(_BYTE *)(a2 + 12);
  v22 = *(_WORD *)(a2 + 13);
  v23 = *(_BYTE *)(a2 + 32);
  v24 = *a3;
  v25 = *a4;
  v26 = *((_BYTE *)a4 + 4);
  v27 = a4[2];
  v28 = *a5;
  v30 = *((_QWORD *)a5 + 2);
  v29 = *((_QWORD *)a5 + 3);
  *(_QWORD *)a8 = *(_QWORD *)a1;
  *(_QWORD *)(a8 + 8) = v9;
  *(_BYTE *)(a8 + 16) = v10;
  *(_OWORD *)(a8 + 24) = v11;
  *(_QWORD *)(a8 + 40) = v12;
  *(_QWORD *)(a8 + 48) = v13;
  *(_WORD *)(a8 + 56) = v14;
  *(_DWORD *)(a8 + 60) = v15;
  *(_BYTE *)(a8 + 64) = v16;
  *(_DWORD *)(a8 + 68) = v17;
  *(_BYTE *)(a8 + 72) = v18;
  *(_DWORD *)(a8 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a8 + 77) = v19;
  *(_OWORD *)(a8 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a8 + 96) = *(_QWORD *)a2;
  *(_DWORD *)(a8 + 104) = v20;
  *(_BYTE *)(a8 + 108) = v21;
  *(_WORD *)(a8 + 109) = v22;
  *(_OWORD *)(a8 + 112) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a8 + 128) = v23;
  *(_WORD *)(a8 + 129) = v24;
  *(_DWORD *)(a8 + 132) = v25;
  *(_BYTE *)(a8 + 136) = v26;
  *(_DWORD *)(a8 + 140) = v27;
  *(_OWORD *)(a8 + 144) = v28;
  *(_QWORD *)(a8 + 160) = v30;
  *(_QWORD *)(a8 + 168) = v29;
  v31 = a6[1];
  *(_OWORD *)(a8 + 176) = *a6;
  *(_OWORD *)(a8 + 192) = v31;
  *(_OWORD *)(a8 + 208) = a6[2];
  v32 = a8 + *(int *)(type metadata accessor for AudioSkipEvent.Model(0) + 40);
  v33 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v32, a7, v33);
}

uint64_t sub_16C3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_16C78 + 4 * byte_1F1F10[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_16C78()
{
  return 0x6174614470696B73;
}

unint64_t sub_16C90()
{
  return 0xD000000000000019;
}

uint64_t sub_16CAC()
{
  return 0x4465746152746962;
}

uint64_t sub_16CC0()
{
  return 0x746144726F727265;
}

uint64_t sub_16D08()
{
  unsigned __int8 *v0;

  return sub_16C3C(*v0);
}

uint64_t sub_16D10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19694(a1, a2);
  *a3 = result;
  return result;
}

void sub_16D34(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_16D40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_170D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_16D68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_170D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AudioSkipEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int16 v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char v44;
  __int128 v45;
  _BYTE v46[32];
  uint64_t v47;
  __int16 v48;
  int v49;
  char v50;
  int v51;
  char v52;
  int v53;
  char v54;
  __int128 v55;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_296788);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_170D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AudioSkipEvent.Model.CodingKeys, &type metadata for AudioSkipEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v45 = *(_QWORD *)v4;
  *((_QWORD *)&v45 + 1) = v13;
  v46[0] = v14;
  *(_OWORD *)&v46[8] = v15;
  *(_QWORD *)&v46[24] = v16;
  v47 = v17;
  v48 = v18;
  v49 = v19;
  v50 = v20;
  v51 = v21;
  v52 = v22;
  v53 = *(_DWORD *)(v4 + 73);
  v54 = v23;
  v55 = *(_OWORD *)(v4 + 80);
  v44 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v44, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 104);
    v26 = *(_BYTE *)(v4 + 108);
    v27 = *(_WORD *)(v4 + 109);
    v28 = *(_BYTE *)(v4 + 128);
    *(_QWORD *)&v45 = *(_QWORD *)(v4 + 96);
    DWORD2(v45) = v25;
    BYTE12(v45) = v26;
    *(_WORD *)((char *)&v45 + 13) = v27;
    *(_OWORD *)v46 = *(_OWORD *)(v4 + 112);
    v46[16] = v28;
    v44 = 1;
    v29 = sub_1715C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v44, v6, &type metadata for SkipData, v29);
    LOWORD(v45) = *(_WORD *)(v4 + 129);
    v44 = 2;
    v30 = sub_171A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v44, v6, &type metadata for ListeningActionSourceData, v30);
    v31 = *(_BYTE *)(v4 + 136);
    v32 = *(_DWORD *)(v4 + 140);
    LODWORD(v45) = *(_DWORD *)(v4 + 132);
    BYTE4(v45) = v31;
    DWORD2(v45) = v32;
    v44 = 3;
    v33 = sub_171E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v44, v6, &type metadata for BitRateData, v33);
    v34 = *(_QWORD *)(v4 + 160);
    v35 = *(_QWORD *)(v4 + 168);
    v45 = *(_OWORD *)(v4 + 144);
    *(_QWORD *)v46 = v34;
    *(_QWORD *)&v46[8] = v35;
    v44 = 4;
    v36 = sub_17228();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v44, v6, &type metadata for ErrorData, v36);
    v37 = *(_OWORD *)(v4 + 192);
    v45 = *(_OWORD *)(v4 + 176);
    *(_OWORD *)v46 = v37;
    *(_OWORD *)&v46[16] = *(_OWORD *)(v4 + 208);
    v44 = 5;
    v38 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, &v44, v6, &type metadata for SeriesData, v38);
    v39 = v4 + *(int *)(type metadata accessor for AudioSkipEvent.Model(0) + 40);
    LOBYTE(v45) = 6;
    v40 = type metadata accessor for EventData(0);
    v41 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v39, &v45, v6, v40, v41);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_170D4()
{
  unint64_t result;

  result = qword_296790;
  if (!qword_296790)
  {
    result = swift_getWitnessTable(&unk_1F2174, &type metadata for AudioSkipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296790);
  }
  return result;
}

unint64_t sub_17118()
{
  unint64_t result;

  result = qword_296798;
  if (!qword_296798)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentData, &type metadata for ContentData);
    atomic_store(result, (unint64_t *)&qword_296798);
  }
  return result;
}

unint64_t sub_1715C()
{
  unint64_t result;

  result = qword_2967A0;
  if (!qword_2967A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SkipData, &type metadata for SkipData);
    atomic_store(result, (unint64_t *)&qword_2967A0);
  }
  return result;
}

unint64_t sub_171A0()
{
  unint64_t result;

  result = qword_2967A8;
  if (!qword_2967A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningActionSourceData, &type metadata for ListeningActionSourceData);
    atomic_store(result, (unint64_t *)&qword_2967A8);
  }
  return result;
}

unint64_t sub_171E4()
{
  unint64_t result;

  result = qword_2967B0;
  if (!qword_2967B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BitRateData, &type metadata for BitRateData);
    atomic_store(result, (unint64_t *)&qword_2967B0);
  }
  return result;
}

unint64_t sub_17228()
{
  unint64_t result;

  result = qword_2967B8;
  if (!qword_2967B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ErrorData, &type metadata for ErrorData);
    atomic_store(result, (unint64_t *)&qword_2967B8);
  }
  return result;
}

uint64_t AudioSkipEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  int v32;
  char v33;
  __int16 v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  int v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[32];
  uint64_t v56;
  __int16 v57;
  int v58;
  char v59;
  int v60;
  char v61;
  int v62;
  char v63;
  __int128 v64;
  char v65;

  v48 = a2;
  v49 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (uint64_t *)((char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = sub_71B4(&qword_2967C0);
  __chkstk_darwin(v51);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AudioSkipEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v52 = a1;
  sub_7988(a1, v11);
  v13 = sub_170D4();
  v50 = v7;
  v14 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AudioSkipEvent.Model.CodingKeys, &type metadata for AudioSkipEvent.Model.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_7DAC(v52);
  v47 = v8;
  v15 = (uint64_t)v10;
  v53 = v3;
  v16 = v49;
  v65 = 0;
  v17 = sub_1779C();
  v19 = v50;
  v18 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ContentData, &v65, v51, &type metadata for ContentData, v17);
  v20 = *((_QWORD *)&v54 + 1);
  v21 = v55[0];
  v22 = *(_OWORD *)&v55[8];
  v23 = *(_QWORD *)&v55[24];
  v24 = v56;
  v25 = v57;
  v26 = v58;
  v27 = v59;
  v28 = v60;
  v29 = v61;
  v30 = v63;
  *(_QWORD *)v15 = v54;
  *(_QWORD *)(v15 + 8) = v20;
  *(_BYTE *)(v15 + 16) = v21;
  *(_OWORD *)(v15 + 24) = v22;
  *(_QWORD *)(v15 + 40) = v23;
  *(_QWORD *)(v15 + 48) = v24;
  *(_WORD *)(v15 + 56) = v25;
  *(_DWORD *)(v15 + 60) = v26;
  *(_BYTE *)(v15 + 64) = v27;
  *(_DWORD *)(v15 + 68) = v28;
  *(_BYTE *)(v15 + 72) = v29;
  *(_DWORD *)(v15 + 73) = v62;
  *(_BYTE *)(v15 + 77) = v30;
  *(_OWORD *)(v15 + 80) = v64;
  v65 = 1;
  v31 = sub_177E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for SkipData, &v65, v18, &type metadata for SkipData, v31);
  v32 = DWORD2(v54);
  v33 = BYTE12(v54);
  v34 = *(_WORD *)((char *)&v54 + 13);
  v35 = v55[16];
  *(_QWORD *)(v15 + 96) = v54;
  *(_DWORD *)(v15 + 104) = v32;
  *(_BYTE *)(v15 + 108) = v33;
  *(_WORD *)(v15 + 109) = v34;
  *(_OWORD *)(v15 + 112) = *(_OWORD *)v55;
  *(_BYTE *)(v15 + 128) = v35;
  v65 = 2;
  v36 = sub_17824();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ListeningActionSourceData, &v65, v18, &type metadata for ListeningActionSourceData, v36);
  *(_WORD *)(v15 + 129) = v54;
  v65 = 3;
  v37 = sub_17868();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for BitRateData, &v65, v18, &type metadata for BitRateData, v37);
  v38 = BYTE4(v54);
  v39 = DWORD2(v54);
  *(_DWORD *)(v15 + 132) = v54;
  *(_BYTE *)(v15 + 136) = v38;
  *(_DWORD *)(v15 + 140) = v39;
  v65 = 4;
  v40 = sub_178AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for ErrorData, &v65, v18, &type metadata for ErrorData, v40);
  v41 = *(_OWORD *)v55;
  *(_OWORD *)(v15 + 144) = v54;
  *(_OWORD *)(v15 + 160) = v41;
  v65 = 5;
  v42 = sub_10EA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, &type metadata for SeriesData, &v65, v18, &type metadata for SeriesData, v42);
  v43 = *(_OWORD *)v55;
  *(_OWORD *)(v15 + 176) = v54;
  *(_OWORD *)(v15 + 192) = v43;
  *(_OWORD *)(v15 + 208) = *(_OWORD *)&v55[16];
  LOBYTE(v54) = 6;
  v44 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v54, v18, v16, v44);
  MEMORY[0x600000000](v19, v18);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v53 + 32))(v15 + *(int *)(v47 + 40), v5, v16);
  sub_17930(v15, v48);
  sub_7DAC(v52);
  return sub_17974(v15);
}

uint64_t sub_17788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6 != 1)
    return swift_bridgeObjectRelease(a6);
  return result;
}

unint64_t sub_1779C()
{
  unint64_t result;

  result = qword_2967C8;
  if (!qword_2967C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentData, &type metadata for ContentData);
    atomic_store(result, (unint64_t *)&qword_2967C8);
  }
  return result;
}

unint64_t sub_177E0()
{
  unint64_t result;

  result = qword_2967D0;
  if (!qword_2967D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SkipData, &type metadata for SkipData);
    atomic_store(result, (unint64_t *)&qword_2967D0);
  }
  return result;
}

unint64_t sub_17824()
{
  unint64_t result;

  result = qword_2967D8;
  if (!qword_2967D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningActionSourceData, &type metadata for ListeningActionSourceData);
    atomic_store(result, (unint64_t *)&qword_2967D8);
  }
  return result;
}

unint64_t sub_17868()
{
  unint64_t result;

  result = qword_2967E0;
  if (!qword_2967E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BitRateData, &type metadata for BitRateData);
    atomic_store(result, (unint64_t *)&qword_2967E0);
  }
  return result;
}

unint64_t sub_178AC()
{
  unint64_t result;

  result = qword_2967E8;
  if (!qword_2967E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ErrorData, &type metadata for ErrorData);
    atomic_store(result, (unint64_t *)&qword_2967E8);
  }
  return result;
}

uint64_t sub_178F0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for EventData(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_17930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudioSkipEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_17974(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AudioSkipEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_179B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AudioSkipEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_179C4(_QWORD *a1)
{
  return AudioSkipEvent.Model.encode(to:)(a1);
}

uint64_t sub_179D8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295500, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296730, (uint64_t)sub_16254, a1);
}

uint64_t sub_179FC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295508, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_296748, (uint64_t)sub_16294, a1);
}

uint64_t sub_17A20@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v4, v13);
  v14 = a2 + a1[9];
  v15 = enum case for EventProperty.optional<A>(_:);
  v16 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v4, v18);
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioSkipEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296768);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296770);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296778);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296780);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return a1;
}

uint64_t destroy for AudioSkipEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296768);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for AudioSkipEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  return a1;
}

uint64_t assignWithCopy for AudioSkipEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  return a1;
}

uint64_t initializeWithTake for AudioSkipEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  return a1;
}

uint64_t assignWithTake for AudioSkipEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioSkipEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18468);
}

uint64_t sub_18468(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296768);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296770);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296778);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296780);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296310);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v8 = sub_71B4(&qword_295D70);
              v12 = *(_QWORD *)(v8 - 8);
              v13 = a3[10];
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AudioSkipEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_185B8);
}

uint64_t sub_185B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296768);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296770);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296778);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296780);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296310);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v10 = sub_71B4(&qword_295D70);
              v14 = *(_QWORD *)(v10 - 8);
              v15 = a4[10];
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_18704(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[7];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_296860, (uint64_t (*)(void))sub_177E0, (uint64_t (*)(void))sub_1715C, (uint64_t)&type metadata for SkipData);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296868, (uint64_t (*)(void))sub_17824, (uint64_t (*)(void))sub_171A0, (uint64_t)&type metadata for ListeningActionSourceData);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_296870, (uint64_t (*)(void))sub_17868, (uint64_t (*)(void))sub_171E4, (uint64_t)&type metadata for BitRateData);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, (unint64_t *)&unk_296878, (uint64_t (*)(void))sub_178AC, (uint64_t (*)(void))sub_17228, (uint64_t)&type metadata for ErrorData);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_8734(319);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 7, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AudioSkipEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = a2[12];
    v12 = *((_DWORD *)a2 + 26);
    *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
    *(_DWORD *)(a1 + 104) = v12;
    *(_BYTE *)(a1 + 109) = *((_BYTE *)a2 + 109);
    *(_BYTE *)(a1 + 110) = *((_BYTE *)a2 + 110);
    v13 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v13;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    *(_WORD *)(a1 + 129) = *(_WORD *)((char *)a2 + 129);
    *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
    *(_QWORD *)(a1 + 132) = *(uint64_t *)((char *)a2 + 132);
    v14 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v14;
    v15 = a2[21];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_QWORD *)(a1 + 168) = v15;
    v16 = a2[27];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    if (v16 == 1)
    {
      v17 = *((_OWORD *)a2 + 12);
      *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
      *(_OWORD *)(a1 + 192) = v17;
      *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
    }
    else
    {
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
      *(_WORD *)(a1 + 201) = *(_WORD *)((char *)a2 + 201);
      *(_QWORD *)(a1 + 208) = a2[26];
      *(_QWORD *)(a1 + 216) = v16;
      swift_bridgeObjectRetain(v16);
    }
    v19 = *(int *)(a3 + 40);
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t destroy for AudioSkipEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[21]);
  v4 = a1[27];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 40);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AudioSkipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v11 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v11;
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_BYTE *)(a1 + 110) = *(_BYTE *)(a2 + 110);
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 132) = *(_QWORD *)(a2 + 132);
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v14;
  v15 = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v16;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  }
  else
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v15;
    swift_bridgeObjectRetain(v15);
  }
  v17 = *(int *)(a3 + 40);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t assignWithCopy for AudioSkipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v16 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v16;
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_BYTE *)(a1 + 110) = *(_BYTE *)(a2 + 110);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  v19 = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = v19;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v22 = *(_QWORD *)(a2 + 168);
  v23 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = (__int128 *)(a1 + 176);
  v25 = (__int128 *)(a2 + 176);
  v26 = *(_QWORD *)(a1 + 216);
  v27 = *(_QWORD *)(a2 + 216);
  if (v26 == 1)
  {
    if (v27 == 1)
    {
      v28 = *v25;
      v29 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v29;
      *v24 = v28;
    }
    else
    {
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
      *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v32 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v32;
      swift_bridgeObjectRetain(v32);
    }
  }
  else if (v27 == 1)
  {
    sub_19008(a1 + 176);
    v31 = *(_OWORD *)(a2 + 192);
    v30 = *(_OWORD *)(a2 + 208);
    *v24 = *v25;
    *(_OWORD *)(a1 + 192) = v31;
    *(_OWORD *)(a1 + 208) = v30;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
    *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v33 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v33;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRelease(v26);
  }
  v34 = *(int *)(a3 + 40);
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  return a1;
}

uint64_t sub_19008(uint64_t a1)
{
  destroy for SeriesData(a1);
  return a1;
}

uint64_t initializeWithTake for AudioSkipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(_QWORD *)(a1 + 132) = *(_QWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for AudioSkipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_WORD *)(a1 + 109) = *(_WORD *)(a2 + 109);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  v16 = *(_QWORD *)(a2 + 152);
  v17 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 168);
  v19 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a1 + 216);
  if (v20 != 1)
  {
    v21 = *(_QWORD *)(a2 + 216);
    if (v21 != 1)
    {
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v21;
      swift_bridgeObjectRelease(v20);
      goto LABEL_6;
    }
    sub_19008(a1 + 176);
  }
  v22 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v22;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
LABEL_6:
  v23 = *(int *)(a3 + 40);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioSkipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_192C0);
}

uint64_t sub_192C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AudioSkipEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19348);
}

uint64_t sub_19348(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t sub_193BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[1] = &unk_1F2038;
  v4[2] = &unk_1F2050;
  v4[3] = &unk_1F2068;
  v4[4] = &unk_1F2080;
  v4[5] = &unk_1F2098;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ViewAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioSkipEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1953C + 4 * byte_1F1F1C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_19570 + 4 * byte_1F1F17[v4]))();
}

uint64_t sub_19570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19580);
  return result;
}

uint64_t sub_1958C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19594);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_19598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_195A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioSkipEvent.Model.CodingKeys()
{
  return &type metadata for AudioSkipEvent.Model.CodingKeys;
}

unint64_t sub_195C0()
{
  unint64_t result;

  result = qword_296968;
  if (!qword_296968)
  {
    result = swift_getWitnessTable(&unk_1F214C, &type metadata for AudioSkipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296968);
  }
  return result;
}

unint64_t sub_19608()
{
  unint64_t result;

  result = qword_296970;
  if (!qword_296970)
  {
    result = swift_getWitnessTable(&unk_1F20BC, &type metadata for AudioSkipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296970);
  }
  return result;
}

unint64_t sub_19650()
{
  unint64_t result;

  result = qword_296978;
  if (!qword_296978)
  {
    result = swift_getWitnessTable(&unk_1F20E4, &type metadata for AudioSkipEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296978);
  }
  return result;
}

uint64_t sub_19694(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6174614470696B73 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614470696B73, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000019)
  {
    v8 = 0x800000000021EC40;
    if (a2 == 0x800000000021EC40)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000021EC40, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x4465746152746962 && a2 == 0xEB00000000617461)
  {
    v9 = 0xEB00000000617461;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4465746152746962, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144726F727265 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144726F727265, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t MediaData.mediaDuration.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t MediaData.mediaDuration.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  return result;
}

void __swiftcall MediaData.init(mediaID:mediaType:mediaDuration:)(BookAnalytics::MediaData *__return_ptr retstr, Swift::String mediaID, Swift::String mediaType, Swift::Int32 mediaDuration)
{
  retstr->mediaID = mediaID;
  retstr->mediaType = mediaType;
  retstr->mediaDuration = mediaDuration;
}

uint64_t sub_199DC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x707954616964656DLL;
  if (*v0 != 1)
    v1 = 0x727544616964656DLL;
  if (*v0)
    return v1;
  else
    return 0x4449616964656DLL;
}

uint64_t sub_19A48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A354(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19A6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19F00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19A94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_19F00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MediaData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char v22;
  char v23;

  v3 = sub_71B4(&qword_296980);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v17 = v1[3];
  v18 = v9;
  v20 = *((_DWORD *)v1 + 8);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_19F00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MediaData.CodingKeys, &type metadata for MediaData.CodingKeys, v12, v10, v11);
  v23 = 0;
  v13 = v19;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v7, &v23, v3);
  if (!v13)
  {
    v14 = v20;
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v17, &v22, v3);
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v21, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MediaData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v5 = sub_71B4(&qword_296990);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_19F00();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MediaData.CodingKeys, &type metadata for MediaData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  v26 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v14 = v13;
  v23 = v12;
  v25 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v17 = v16;
  v21 = v15;
  v24 = 2;
  swift_bridgeObjectRetain(v16);
  v22 = v17;
  LODWORD(v17) = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v22;
  *(_QWORD *)a2 = v23;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = v17;
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v18);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_19E34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MediaData.init(from:)(a1, a2);
}

uint64_t sub_19E48(_QWORD *a1)
{
  return MediaData.encode(to:)(a1);
}

BOOL _s13BookAnalytics9MediaDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;
  _BOOL8 result;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((_DWORD *)a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = v4 == *(_QWORD *)a2 && v5 == v9;
  if (v13
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v9, 0), result = 0, (v14 & 1) != 0))
  {
    if (v6 == v10 && v7 == v11)
      return v8 == v12;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v11, 0);
    result = 0;
    if ((v17 & 1) != 0)
      return v8 == v12;
  }
  return result;
}

unint64_t sub_19F00()
{
  unint64_t result;

  result = qword_296988;
  if (!qword_296988)
  {
    result = swift_getWitnessTable(&unk_1F2364, &type metadata for MediaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296988);
  }
  return result;
}

unint64_t sub_19F48()
{
  unint64_t result;

  result = qword_296998;
  if (!qword_296998)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaData, &type metadata for MediaData);
    atomic_store(result, (unint64_t *)&qword_296998);
  }
  return result;
}

unint64_t sub_19F90()
{
  unint64_t result;

  result = qword_2969A0;
  if (!qword_2969A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaData, &type metadata for MediaData);
    atomic_store(result, (unint64_t *)&qword_2969A0);
  }
  return result;
}

uint64_t destroy for ThemesData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for MediaData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for MediaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for MediaData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MediaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaData()
{
  return &type metadata for MediaData;
}

uint64_t storeEnumTagSinglePayload for MediaData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A1FC + 4 * byte_1F21C9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A230 + 4 * byte_1F21C4[v4]))();
}

uint64_t sub_1A230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A240);
  return result;
}

uint64_t sub_1A24C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A254);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaData.CodingKeys()
{
  return &type metadata for MediaData.CodingKeys;
}

unint64_t sub_1A280()
{
  unint64_t result;

  result = qword_2969A8;
  if (!qword_2969A8)
  {
    result = swift_getWitnessTable(&unk_1F233C, &type metadata for MediaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2969A8);
  }
  return result;
}

unint64_t sub_1A2C8()
{
  unint64_t result;

  result = qword_2969B0;
  if (!qword_2969B0)
  {
    result = swift_getWitnessTable(&unk_1F22AC, &type metadata for MediaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2969B0);
  }
  return result;
}

unint64_t sub_1A310()
{
  unint64_t result;

  result = qword_2969B8;
  if (!qword_2969B8)
  {
    result = swift_getWitnessTable(&unk_1F22D4, &type metadata for MediaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2969B8);
  }
  return result;
}

uint64_t sub_1A354(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4449616964656DLL && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449616964656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x707954616964656DLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707954616964656DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x727544616964656DLL && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease(0xED00006E6F697461);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x727544616964656DLL, 0xED00006E6F697461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A4D8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2969C0, &enum case for SessionGroup.default(_:));
}

uint64_t static MediaEngageEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295510, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2969C0, a1);
}

uint64_t sub_1A518(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2969D8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static MediaEngageEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295518, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2969D8, a1);
}

uint64_t MediaEngageEvent.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t MediaEngageEvent.mediaData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t MediaEngageEvent.mediaEngagementData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 20);
  v4 = sub_71B4(&qword_2969F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for MediaEngageEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_296AD8, (uint64_t)&nominal type descriptor for MediaEngageEvent);
}

uint64_t MediaEngageEvent.mediaEngagementData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 20);
  v4 = sub_71B4(&qword_2969F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MediaEngageEvent.mediaEngagementData.modify())()
{
  type metadata accessor for MediaEngageEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngageEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MediaEngageEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MediaEngageEvent.sectionData.modify())()
{
  type metadata accessor for MediaEngageEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngageEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 28);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MediaEngageEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 28);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MediaEngageEvent.pageData.modify())()
{
  type metadata accessor for MediaEngageEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngageEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MediaEngageEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MediaEngageEvent.eventData.modify())()
{
  type metadata accessor for MediaEngageEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngageEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MediaEngageEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MediaEngageEvent.timedData.modify())()
{
  type metadata accessor for MediaEngageEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngageEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 40);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MediaEngageEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent(0) + 40);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MediaEngageEvent.linkData.modify())()
{
  type metadata accessor for MediaEngageEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngageEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for MediaEngageEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_2969F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v8, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v8, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v8, v17);
}

uint64_t MediaEngageEvent.Model.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t MediaEngageEvent.Model.mediaEngagementData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v1 + 88);
  v5 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(_BYTE *)(v1 + 112);
  v9 = *(_BYTE *)(v1 + 113);
  v10 = *(_BYTE *)(v1 + 114);
  v11 = *(_QWORD *)(v1 + 120);
  v12 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 73) = v9;
  *(_BYTE *)(a1 + 74) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return swift_bridgeObjectRetain(v12);
}

uint64_t MediaEngageEvent.Model.sectionData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1[17];
  v3 = v1[18];
  v4 = v1[19];
  v5 = v1[20];
  v6 = v1[21];
  v7 = v1[22];
  v8 = v1[23];
  v9 = v1[24];
  v10 = v1[25];
  v11 = v1[26];
  v12 = v1[27];
  v13 = v1[28];
  v14 = v1[29];
  v15 = v1[30];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  a1[12] = v14;
  a1[13] = v15;
  return sub_1AD04(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1AD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a7);
    return swift_bridgeObjectRetain(a9);
  }
  return result;
}

uint64_t MediaEngageEvent.Model.pageData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[31];
  v3 = v1[32];
  v4 = v1[33];
  v5 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_1AD88(v2, v3, v4, v5);
}

uint64_t sub_1AD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t MediaEngageEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for MediaEngageEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_296BA8, (uint64_t)&nominal type descriptor for MediaEngageEvent.Model);
}

uint64_t MediaEngageEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MediaEngageEvent.Model(0) + 36);
  return sub_1AE44(v3, a1);
}

uint64_t sub_1AE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_296A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *MediaEngageEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5[19];

  v3 = type metadata accessor for MediaEngageEvent.Model(0);
  sub_1B1BC(v1 + *(int *)(v3 + 40), (uint64_t)v5, &qword_296A20);
  sub_1B1BC((uint64_t)v5, a1, &qword_296A20);
  return sub_1AEEC(v5);
}

uint64_t *sub_1AEEC(uint64_t *a1)
{
  sub_1AF4C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18]);
  return a1;
}

uint64_t sub_1AF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a19);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a15);
    return swift_bridgeObjectRetain(a17);
  }
  return result;
}

uint64_t MediaEngageEvent.Model.init(mediaData:mediaEngagementData:sectionData:pageData:eventData:timedData:linkData:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v40[160];

  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *((_DWORD *)a1 + 8);
  v36 = *a2;
  v37 = *a1;
  v34 = a2[2];
  v35 = a2[1];
  v12 = *((_QWORD *)a2 + 8);
  v13 = *((_BYTE *)a2 + 72);
  v14 = *((_BYTE *)a2 + 73);
  v15 = *((_BYTE *)a2 + 74);
  v16 = *((_QWORD *)a2 + 10);
  v17 = *((_QWORD *)a2 + 11);
  v32 = *a3;
  v33 = a2[3];
  v30 = a3[2];
  v31 = a3[1];
  v28 = a3[4];
  v29 = a3[3];
  v27 = a3[5];
  v25 = *((_QWORD *)a3 + 13);
  v26 = *((_QWORD *)a3 + 12);
  v24 = *a4;
  v22 = *((_QWORD *)a4 + 3);
  v23 = *((_QWORD *)a4 + 2);
  sub_1B1BC(a7, (uint64_t)v40, &qword_296A20);
  *(_OWORD *)a8 = v37;
  *(_QWORD *)(a8 + 16) = v9;
  *(_QWORD *)(a8 + 24) = v10;
  *(_DWORD *)(a8 + 32) = v11;
  *(_OWORD *)(a8 + 40) = v36;
  *(_OWORD *)(a8 + 56) = v35;
  *(_OWORD *)(a8 + 72) = v34;
  *(_OWORD *)(a8 + 88) = v33;
  *(_QWORD *)(a8 + 104) = v12;
  *(_BYTE *)(a8 + 112) = v13;
  *(_BYTE *)(a8 + 113) = v14;
  *(_BYTE *)(a8 + 114) = v15;
  *(_QWORD *)(a8 + 120) = v16;
  *(_QWORD *)(a8 + 128) = v17;
  *(_OWORD *)(a8 + 136) = v32;
  *(_OWORD *)(a8 + 152) = v31;
  *(_OWORD *)(a8 + 168) = v30;
  *(_OWORD *)(a8 + 184) = v29;
  *(_OWORD *)(a8 + 200) = v28;
  *(_OWORD *)(a8 + 216) = v27;
  *(_QWORD *)(a8 + 232) = v26;
  *(_QWORD *)(a8 + 240) = v25;
  *(_OWORD *)(a8 + 248) = v24;
  *(_QWORD *)(a8 + 264) = v23;
  *(_QWORD *)(a8 + 272) = v22;
  v18 = (int *)type metadata accessor for MediaEngageEvent.Model(0);
  v19 = a8 + v18[8];
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a5, v20);
  sub_1B1BC(a6, a8 + v18[9], &qword_296A18);
  return sub_1B1BC((uint64_t)v40, a8 + v18[10], &qword_296A20);
}

uint64_t sub_1B1BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_71B4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B200(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B238 + 4 * byte_1F23C0[a1]))(0x746144616964656DLL, 0xE900000000000061);
}

unint64_t sub_1B238()
{
  return 0xD000000000000013;
}

uint64_t sub_1B254()
{
  return 0x446E6F6974636573;
}

uint64_t sub_1B274()
{
  return 0x6174614465676170;
}

uint64_t sub_1B28C()
{
  return 0x746144746E657665;
}

uint64_t sub_1B2A0()
{
  return 0x74614464656D6974;
}

uint64_t sub_1B2B4()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_1B2CC()
{
  unsigned __int8 *v0;

  return sub_1B200(*v0);
}

uint64_t sub_1B2D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1EA24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B6E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B320(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B6E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MediaEngageEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  int *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE v47[152];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55[17];
  uint64_t v56;

  v2 = v1;
  v4 = sub_71B4(&qword_296A28);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v47[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v8 = a1[4];
  sub_7988(a1, v9);
  v10 = sub_1B6E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MediaEngageEvent.Model.CodingKeys, &type metadata for MediaEngageEvent.Model.CodingKeys, v10, v9, v8);
  v11 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  v13 = *((_DWORD *)v2 + 8);
  v48 = *v2;
  *(_QWORD *)&v49 = v11;
  *((_QWORD *)&v49 + 1) = v12;
  LODWORD(v50) = v13;
  v47[0] = 0;
  v14 = sub_19F90();
  v15 = v56;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v48, v47, v4, &type metadata for MediaData, v14);
  if (v15)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v16 = v5;
  v17 = *((_QWORD *)v2 + 6);
  v18 = *(__int128 *)((char *)v2 + 72);
  v19 = *(__int128 *)((char *)v2 + 88);
  v20 = *((_QWORD *)v2 + 13);
  v21 = *((_BYTE *)v2 + 112);
  v22 = *((_BYTE *)v2 + 113);
  v23 = *((_BYTE *)v2 + 114);
  v24 = *((_QWORD *)v2 + 15);
  v25 = *((_QWORD *)v2 + 16);
  *(_QWORD *)&v48 = *((_QWORD *)v2 + 5);
  *((_QWORD *)&v48 + 1) = v17;
  v49 = *(__int128 *)((char *)v2 + 56);
  v50 = v18;
  v51 = v19;
  *(_QWORD *)&v52 = v20;
  BYTE8(v52) = v21;
  BYTE9(v52) = v22;
  BYTE10(v52) = v23;
  *(_QWORD *)&v53 = v24;
  *((_QWORD *)&v53 + 1) = v25;
  v47[0] = 1;
  v26 = sub_1B724();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v48, v47, v4, &type metadata for MediaEngagementData, v26);
  v27 = *(__int128 *)((char *)v2 + 152);
  v48 = *(__int128 *)((char *)v2 + 136);
  v49 = v27;
  v28 = *(__int128 *)((char *)v2 + 184);
  v50 = *(__int128 *)((char *)v2 + 168);
  v51 = v28;
  v29 = *(__int128 *)((char *)v2 + 216);
  v52 = *(__int128 *)((char *)v2 + 200);
  v53 = v29;
  v54 = *(__int128 *)((char *)v2 + 232);
  v47[0] = 2;
  v30 = sub_1B768();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v48, v47, v4, &type metadata for SectionData, v30);
  v31 = *(__int128 *)((char *)v2 + 264);
  v48 = *(__int128 *)((char *)v2 + 248);
  v49 = v31;
  v47[0] = 3;
  v32 = sub_1B7AC();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v48, v47, v4, &type metadata for PageData, v32);
  v34 = (int *)type metadata accessor for MediaEngageEvent.Model(0);
  v35 = (uint64_t)v2 + v34[8];
  LOBYTE(v48) = 4;
  v36 = v7;
  v37 = v4;
  v38 = type metadata accessor for EventData(0);
  v39 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v40 = v35;
  v41 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v40, &v48, v37, v38, v39);
  v42 = (uint64_t)v2 + v34[9];
  v55[0] = 5;
  v43 = type metadata accessor for TimedData(0);
  v44 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v42, v55, v41, v43, v44);
  sub_1B1BC((uint64_t)v2 + v34[10], (uint64_t)&v48, &qword_296A20);
  sub_1B1BC((uint64_t)&v48, (uint64_t)v47, &qword_296A20);
  HIBYTE(v46) = 6;
  v45 = sub_1B7F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v47, (char *)&v46 + 7, v41, &type metadata for LinkData, v45);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v36, v41);
}

unint64_t sub_1B6E0()
{
  unint64_t result;

  result = qword_296A30;
  if (!qword_296A30)
  {
    result = swift_getWitnessTable(&unk_1F2614, &type metadata for MediaEngageEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296A30);
  }
  return result;
}

unint64_t sub_1B724()
{
  unint64_t result;

  result = qword_296A38;
  if (!qword_296A38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaEngagementData, &type metadata for MediaEngagementData);
    atomic_store(result, (unint64_t *)&qword_296A38);
  }
  return result;
}

unint64_t sub_1B768()
{
  unint64_t result;

  result = qword_296A40;
  if (!qword_296A40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SectionData, &type metadata for SectionData);
    atomic_store(result, (unint64_t *)&qword_296A40);
  }
  return result;
}

unint64_t sub_1B7AC()
{
  unint64_t result;

  result = qword_296A48;
  if (!qword_296A48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageData, &type metadata for PageData);
    atomic_store(result, (unint64_t *)&qword_296A48);
  }
  return result;
}

unint64_t sub_1B7F0()
{
  unint64_t result;

  result = qword_296A50;
  if (!qword_296A50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinkData, &type metadata for LinkData);
    atomic_store(result, (unint64_t *)&qword_296A50);
  }
  return result;
}

uint64_t MediaEngageEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[152];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;

  v47 = a2;
  v3 = sub_71B4(&qword_296A18);
  __chkstk_darwin(v3);
  v48 = (uint64_t *)((char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for EventData(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v49 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v53 = sub_71B4(&qword_296A58);
  v7 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MediaEngageEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_1B6E0();
  v52 = v9;
  v16 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MediaEngageEvent.Model.CodingKeys, &type metadata for MediaEngageEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(a1);
  v17 = v7;
  v54 = v10;
  v55[0] = 0;
  v18 = sub_19F48();
  v19 = v52;
  v20 = v53;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v56, &type metadata for MediaData, v55, v53, &type metadata for MediaData, v18);
  v21 = v57;
  v22 = v58;
  v23 = (uint64_t)v12;
  *(_OWORD *)v12 = v56;
  *((_OWORD *)v12 + 1) = v21;
  *((_DWORD *)v12 + 8) = v22;
  v55[0] = 1;
  v24 = sub_1BFA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v56, &type metadata for MediaEngagementData, v55, v20, &type metadata for MediaEngagementData, v24);
  v25 = *((_QWORD *)&v56 + 1);
  v27 = v58;
  v26 = v59;
  v28 = v60;
  v29 = BYTE8(v60);
  v30 = BYTE9(v60);
  v31 = BYTE10(v60);
  v32 = v61;
  *((_QWORD *)v12 + 5) = v56;
  *((_QWORD *)v12 + 6) = v25;
  *(_OWORD *)(v12 + 56) = v57;
  *(_OWORD *)(v12 + 72) = v27;
  *(_OWORD *)(v12 + 88) = v26;
  *((_QWORD *)v12 + 13) = v28;
  v12[112] = v29;
  v12[113] = v30;
  v12[114] = v31;
  *(_OWORD *)(v12 + 120) = v32;
  v55[0] = 2;
  v33 = sub_1BFE4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v56, &type metadata for SectionData, v55, v20, &type metadata for SectionData, v33);
  v34 = v57;
  *(_OWORD *)(v12 + 136) = v56;
  *(_OWORD *)(v12 + 152) = v34;
  v35 = v59;
  *(_OWORD *)(v12 + 168) = v58;
  *(_OWORD *)(v12 + 184) = v35;
  v36 = v61;
  *(_OWORD *)(v12 + 200) = v60;
  *(_OWORD *)(v12 + 216) = v36;
  *(_OWORD *)(v12 + 232) = v62;
  v55[0] = 3;
  v37 = sub_1C028();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v56, &type metadata for PageData, v55, v20, &type metadata for PageData, v37);
  *(_OWORD *)&stru_B8.flags = v56;
  *(_OWORD *)stru_108.sectname = v57;
  LOBYTE(v56) = 4;
  v38 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v39 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v49, v51, &v56, v20, v51, v38);
  v46 = 0;
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(v50 + 32))(*(int *)(v54 + 32), v49, v39);
  v40 = type metadata accessor for TimedData(0);
  LOBYTE(v56) = 5;
  v41 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v42 = v48;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, v40, &v56, v20, v40, v41);
  v43 = v54;
  sub_1B1BC((uint64_t)v42, v23 + *(int *)(v54 + 36), &qword_296A18);
  v63 = 6;
  v44 = sub_1C06C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v56, &type metadata for LinkData, &v63, v20, &type metadata for LinkData, v44);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v20);
  sub_1B1BC((uint64_t)&v56, (uint64_t)v55, &qword_296A20);
  sub_1B1BC((uint64_t)v55, v23 + *(int *)(v43 + 40), &qword_296A20);
  sub_1C0B0(v23, v47);
  sub_7DAC(a1);
  return sub_1C0F4(v23);
}

uint64_t sub_1BEC0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_296A18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1BF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a14);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a11);
  }
  return result;
}

unint64_t sub_1BFA0()
{
  unint64_t result;

  result = qword_296A60;
  if (!qword_296A60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaEngagementData, &type metadata for MediaEngagementData);
    atomic_store(result, (unint64_t *)&qword_296A60);
  }
  return result;
}

unint64_t sub_1BFE4()
{
  unint64_t result;

  result = qword_296A68;
  if (!qword_296A68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SectionData, &type metadata for SectionData);
    atomic_store(result, (unint64_t *)&qword_296A68);
  }
  return result;
}

unint64_t sub_1C028()
{
  unint64_t result;

  result = qword_296A70;
  if (!qword_296A70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageData, &type metadata for PageData);
    atomic_store(result, (unint64_t *)&qword_296A70);
  }
  return result;
}

unint64_t sub_1C06C()
{
  unint64_t result;

  result = qword_296A78;
  if (!qword_296A78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinkData, &type metadata for LinkData);
    atomic_store(result, (unint64_t *)&qword_296A78);
  }
  return result;
}

uint64_t sub_1C0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MediaEngageEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C0F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MediaEngageEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C130@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MediaEngageEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_1C144(_QWORD *a1)
{
  return MediaEngageEvent.Model.encode(to:)(a1);
}

uint64_t sub_1C158@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295510, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2969C0, (uint64_t)sub_1A4D8, a1);
}

uint64_t sub_1C17C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295518, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2969D8, (uint64_t)sub_1A518, a1);
}

uint64_t sub_1C1A0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_2969F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v9, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v9, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v9, v18);
}

uint64_t *initializeBufferWithCopyOfBuffer for MediaEngageEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = sub_71B4(&qword_2969F0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2969F8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A00);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return a1;
}

uint64_t destroy for MediaEngageEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2969F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for MediaEngageEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2969F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  return a1;
}

uint64_t assignWithCopy for MediaEngageEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2969F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  return a1;
}

uint64_t initializeWithTake for MediaEngageEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2969F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  return a1;
}

uint64_t assignWithTake for MediaEngageEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2969F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaEngageEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CBE8);
}

uint64_t sub_1CBE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_71B4(&qword_2969F0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2969F8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296A08);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_295D78);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v8 = sub_71B4(&qword_296A10);
              v12 = *(_QWORD *)(v8 - 8);
              v13 = a3[10];
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MediaEngageEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CD38);
}

uint64_t sub_1CD38(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = sub_71B4(&qword_2969F0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2969F8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296A08);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_295D78);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v10 = sub_71B4(&qword_296A10);
              v14 = *(_QWORD *)(v10 - 8);
              v15 = a4[10];
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1CE84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[7];

  sub_B9C8(319, &qword_296AE8, (uint64_t (*)(void))sub_19F48, (uint64_t (*)(void))sub_19F90, (uint64_t)&type metadata for MediaData);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_296AF0, (uint64_t (*)(void))sub_1BFA0, (uint64_t (*)(void))sub_1B724, (uint64_t)&type metadata for MediaEngagementData);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_87D8(319);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 7, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MediaEngageEvent.Model(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v24);
    return a1;
  }
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  v9 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  v11 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v10;
  v13 = a2[11];
  v12 = a2[12];
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v12;
  v14 = a2[13];
  *(_QWORD *)(a1 + 104) = v14;
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_WORD *)(a1 + 113) = *(_WORD *)((char *)a2 + 113);
  v15 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v15;
  v16 = a2[19];
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  if (!v16)
  {
    v25 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = v25;
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    v26 = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = v26;
    v27 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(a1 + 184) = v27;
    v22 = a2[34];
    if (v22)
      goto LABEL_4;
LABEL_7:
    v28 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v28;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = v16;
  v17 = a2[21];
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_QWORD *)(a1 + 168) = v17;
  v18 = a2[23];
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_QWORD *)(a1 + 184) = v18;
  v19 = a2[25];
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = v19;
  v20 = a2[27];
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = v20;
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
  v21 = a2[30];
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = v21;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v22 = a2[34];
  if (!v22)
    goto LABEL_7;
LABEL_4:
  v23 = a2[32];
  *(_QWORD *)(a1 + 248) = a2[31];
  *(_QWORD *)(a1 + 256) = v23;
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = v22;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v22);
LABEL_8:
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = (uint64_t)a2 + v29;
  v32 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  v33 = a3[9];
  v34 = (void *)(a1 + v33);
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for TimedData(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = sub_71B4(&qword_296A18);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v39 = a3[10];
  v40 = a1 + v39;
  v41 = (uint64_t)a2 + v39;
  v42 = *(_QWORD *)(v41 + 8);
  if (v42)
  {
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *(_QWORD *)(v40 + 8) = v42;
    v43 = *(_QWORD *)(v41 + 24);
    *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
    *(_QWORD *)(v40 + 24) = v43;
    v44 = *(_QWORD *)(v41 + 40);
    *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
    *(_QWORD *)(v40 + 40) = v44;
    *(_BYTE *)(v40 + 48) = *(_BYTE *)(v41 + 48);
    v45 = *(_QWORD *)(v41 + 64);
    *(_QWORD *)(v40 + 56) = *(_QWORD *)(v41 + 56);
    *(_QWORD *)(v40 + 64) = v45;
    v46 = *(_QWORD *)(v41 + 80);
    *(_QWORD *)(v40 + 72) = *(_QWORD *)(v41 + 72);
    *(_QWORD *)(v40 + 80) = v46;
    v47 = *(_QWORD *)(v41 + 96);
    *(_QWORD *)(v40 + 88) = *(_QWORD *)(v41 + 88);
    *(_QWORD *)(v40 + 96) = v47;
    v48 = *(_QWORD *)(v41 + 112);
    *(_QWORD *)(v40 + 104) = *(_QWORD *)(v41 + 104);
    *(_QWORD *)(v40 + 112) = v48;
    v49 = *(_QWORD *)(v41 + 128);
    *(_QWORD *)(v40 + 120) = *(_QWORD *)(v41 + 120);
    *(_QWORD *)(v40 + 128) = v49;
    v50 = *(_QWORD *)(v41 + 144);
    *(_QWORD *)(v40 + 136) = *(_QWORD *)(v41 + 136);
    *(_QWORD *)(v40 + 144) = v50;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
  }
  else
  {
    v51 = *(_OWORD *)(v41 + 112);
    *(_OWORD *)(v40 + 96) = *(_OWORD *)(v41 + 96);
    *(_OWORD *)(v40 + 112) = v51;
    *(_OWORD *)(v40 + 128) = *(_OWORD *)(v41 + 128);
    *(_QWORD *)(v40 + 144) = *(_QWORD *)(v41 + 144);
    v52 = *(_OWORD *)(v41 + 48);
    *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
    *(_OWORD *)(v40 + 48) = v52;
    v53 = *(_OWORD *)(v41 + 80);
    *(_OWORD *)(v40 + 64) = *(_OWORD *)(v41 + 64);
    *(_OWORD *)(v40 + 80) = v53;
    v54 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 16) = v54;
  }
  return a1;
}

uint64_t destroy for MediaEngageEvent.Model(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[16]);
  v4 = a1[19];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[21]);
    swift_bridgeObjectRelease(a1[23]);
    swift_bridgeObjectRelease(a1[25]);
    swift_bridgeObjectRelease(a1[27]);
    swift_bridgeObjectRelease(a1[30]);
  }
  v5 = a1[34];
  if (v5)
  {
    v6 = a1[32];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
  }
  v7 = (char *)a1 + a2[8];
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)a1 + a2[9];
  v10 = type metadata accessor for TimedData(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v12 = (_QWORD *)((char *)a1 + a2[10]);
  result = v12[1];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(v12[3]);
    swift_bridgeObjectRelease(v12[5]);
    swift_bridgeObjectRelease(v12[8]);
    swift_bridgeObjectRelease(v12[10]);
    swift_bridgeObjectRelease(v12[12]);
    swift_bridgeObjectRelease(v12[14]);
    swift_bridgeObjectRelease(v12[16]);
    return swift_bridgeObjectRelease(v12[18]);
  }
  return result;
}

uint64_t initializeWithCopy for MediaEngageEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v9;
  v12 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v11;
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v13;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_WORD *)(a1 + 113) = *(_WORD *)(a2 + 113);
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  v15 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v15)
  {
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v15;
    v16 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v16;
    v17 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v17;
    v18 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v18;
    v19 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v19;
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
    v20 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v20;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v21 = *(_QWORD *)(a2 + 272);
    if (v21)
    {
LABEL_3:
      v22 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v22;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v21;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v21);
      goto LABEL_6;
    }
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v23;
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    v24 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v24;
    v25 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v25;
    v21 = *(_QWORD *)(a2 + 272);
    if (v21)
      goto LABEL_3;
  }
  v26 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v26;
LABEL_6:
  v27 = a3[8];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[9];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = type metadata accessor for TimedData(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = sub_71B4(&qword_296A18);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = a3[10];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = *(_QWORD *)(v39 + 8);
  if (v40)
  {
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_QWORD *)(v38 + 8) = v40;
    v41 = *(_QWORD *)(v39 + 24);
    *(_QWORD *)(v38 + 16) = *(_QWORD *)(v39 + 16);
    *(_QWORD *)(v38 + 24) = v41;
    v42 = *(_QWORD *)(v39 + 40);
    *(_QWORD *)(v38 + 32) = *(_QWORD *)(v39 + 32);
    *(_QWORD *)(v38 + 40) = v42;
    *(_BYTE *)(v38 + 48) = *(_BYTE *)(v39 + 48);
    v43 = *(_QWORD *)(v39 + 64);
    *(_QWORD *)(v38 + 56) = *(_QWORD *)(v39 + 56);
    *(_QWORD *)(v38 + 64) = v43;
    v44 = *(_QWORD *)(v39 + 80);
    *(_QWORD *)(v38 + 72) = *(_QWORD *)(v39 + 72);
    *(_QWORD *)(v38 + 80) = v44;
    v45 = *(_QWORD *)(v39 + 96);
    *(_QWORD *)(v38 + 88) = *(_QWORD *)(v39 + 88);
    *(_QWORD *)(v38 + 96) = v45;
    v46 = *(_QWORD *)(v39 + 112);
    *(_QWORD *)(v38 + 104) = *(_QWORD *)(v39 + 104);
    *(_QWORD *)(v38 + 112) = v46;
    v47 = *(_QWORD *)(v39 + 128);
    *(_QWORD *)(v38 + 120) = *(_QWORD *)(v39 + 120);
    *(_QWORD *)(v38 + 128) = v47;
    v48 = *(_QWORD *)(v39 + 144);
    *(_QWORD *)(v38 + 136) = *(_QWORD *)(v39 + 136);
    *(_QWORD *)(v38 + 144) = v48;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v48);
  }
  else
  {
    v49 = *(_OWORD *)(v39 + 112);
    *(_OWORD *)(v38 + 96) = *(_OWORD *)(v39 + 96);
    *(_OWORD *)(v38 + 112) = v49;
    *(_OWORD *)(v38 + 128) = *(_OWORD *)(v39 + 128);
    *(_QWORD *)(v38 + 144) = *(_QWORD *)(v39 + 144);
    v50 = *(_OWORD *)(v39 + 48);
    *(_OWORD *)(v38 + 32) = *(_OWORD *)(v39 + 32);
    *(_OWORD *)(v38 + 48) = v50;
    v51 = *(_OWORD *)(v39 + 80);
    *(_OWORD *)(v38 + 64) = *(_OWORD *)(v39 + 64);
    *(_OWORD *)(v38 + 80) = v51;
    v52 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *(_OWORD *)(v38 + 16) = v52;
  }
  return a1;
}

uint64_t assignWithCopy for MediaEngageEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = (_OWORD *)(a1 + 136);
  v21 = (_OWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a1 + 152);
  v23 = *(_QWORD *)(a2 + 152);
  if (v22)
  {
    if (v23)
    {
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v24 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 152) = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v22);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v25 = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v27 = *(_QWORD *)(a2 + 184);
      v28 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v29 = *(_QWORD *)(a2 + 200);
      v30 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v29;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRelease(v30);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v31 = *(_QWORD *)(a2 + 216);
      v32 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease(v32);
      v33 = *(_DWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
      *(_DWORD *)(a1 + 224) = v33;
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v34 = *(_QWORD *)(a2 + 240);
      v35 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      sub_1DFF8((_QWORD *)(a1 + 136));
      v44 = *(_OWORD *)(a2 + 152);
      v43 = *(_OWORD *)(a2 + 168);
      *v20 = *v21;
      *(_OWORD *)(a1 + 152) = v44;
      *(_OWORD *)(a1 + 168) = v43;
      v45 = *(_OWORD *)(a2 + 232);
      v47 = *(_OWORD *)(a2 + 184);
      v46 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v45;
      *(_OWORD *)(a1 + 184) = v47;
      *(_OWORD *)(a1 + 200) = v46;
    }
  }
  else if (v23)
  {
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v36 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v36;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v37 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 168) = v37;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v38 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v38;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v39 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v39;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v40 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v40;
    v41 = *(_DWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
    *(_DWORD *)(a1 + 224) = v41;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v42 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v42;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v42);
  }
  else
  {
    v48 = *v21;
    v49 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v49;
    *v20 = v48;
    v50 = *(_OWORD *)(a2 + 184);
    v51 = *(_OWORD *)(a2 + 200);
    v52 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v52;
    *(_OWORD *)(a1 + 184) = v50;
    *(_OWORD *)(a1 + 200) = v51;
  }
  v53 = (_OWORD *)(a1 + 248);
  v54 = (_OWORD *)(a2 + 248);
  v55 = *(_QWORD *)(a2 + 272);
  if (*(_QWORD *)(a1 + 272))
  {
    if (v55)
    {
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      v56 = *(_QWORD *)(a2 + 256);
      v57 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v58 = *(_QWORD *)(a2 + 272);
      v59 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v58;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRelease(v59);
    }
    else
    {
      sub_1E02C(a1 + 248);
      v62 = *(_OWORD *)(a2 + 264);
      *v53 = *v54;
      *(_OWORD *)(a1 + 264) = v62;
    }
  }
  else if (v55)
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v60 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 256) = v60;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v61 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v61;
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v61);
  }
  else
  {
    v63 = *(_OWORD *)(a2 + 264);
    *v53 = *v54;
    *(_OWORD *)(a1 + 264) = v63;
  }
  v64 = a3[8];
  v65 = a1 + v64;
  v66 = a2 + v64;
  v67 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  v68 = a3[9];
  v69 = (void *)(a1 + v68);
  v70 = (void *)(a2 + v68);
  v71 = type metadata accessor for TimedData(0);
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
  v74 = v73(v69, 1, v71);
  v75 = v73(v70, 1, v71);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v72 + 16))(v69, v70, v71);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v75)
  {
    (*(void (**)(void *, uint64_t))(v72 + 8))(v69, v71);
LABEL_20:
    v76 = sub_71B4(&qword_296A18);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v72 + 24))(v69, v70, v71);
LABEL_21:
  v77 = a3[10];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = *(_QWORD *)(a1 + v77 + 8);
  v81 = *(_QWORD *)(v79 + 8);
  if (v80)
  {
    if (v81)
    {
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v82 = *(_QWORD *)(v79 + 8);
      *(_QWORD *)(v78 + 8) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v80);
      *(_QWORD *)(v78 + 16) = *(_QWORD *)(v79 + 16);
      v83 = *(_QWORD *)(v79 + 24);
      v84 = *(_QWORD *)(v78 + 24);
      *(_QWORD *)(v78 + 24) = v83;
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRelease(v84);
      *(_QWORD *)(v78 + 32) = *(_QWORD *)(v79 + 32);
      v85 = *(_QWORD *)(v79 + 40);
      v86 = *(_QWORD *)(v78 + 40);
      *(_QWORD *)(v78 + 40) = v85;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRelease(v86);
      *(_BYTE *)(v78 + 48) = *(_BYTE *)(v79 + 48);
      *(_QWORD *)(v78 + 56) = *(_QWORD *)(v79 + 56);
      v87 = *(_QWORD *)(v79 + 64);
      v88 = *(_QWORD *)(v78 + 64);
      *(_QWORD *)(v78 + 64) = v87;
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRelease(v88);
      *(_QWORD *)(v78 + 72) = *(_QWORD *)(v79 + 72);
      v89 = *(_QWORD *)(v79 + 80);
      v90 = *(_QWORD *)(v78 + 80);
      *(_QWORD *)(v78 + 80) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v90);
      *(_QWORD *)(v78 + 88) = *(_QWORD *)(v79 + 88);
      v91 = *(_QWORD *)(v79 + 96);
      v92 = *(_QWORD *)(v78 + 96);
      *(_QWORD *)(v78 + 96) = v91;
      swift_bridgeObjectRetain(v91);
      swift_bridgeObjectRelease(v92);
      *(_QWORD *)(v78 + 104) = *(_QWORD *)(v79 + 104);
      v93 = *(_QWORD *)(v79 + 112);
      v94 = *(_QWORD *)(v78 + 112);
      *(_QWORD *)(v78 + 112) = v93;
      swift_bridgeObjectRetain(v93);
      swift_bridgeObjectRelease(v94);
      *(_QWORD *)(v78 + 120) = *(_QWORD *)(v79 + 120);
      v95 = *(_QWORD *)(v79 + 128);
      v96 = *(_QWORD *)(v78 + 128);
      *(_QWORD *)(v78 + 128) = v95;
      swift_bridgeObjectRetain(v95);
      swift_bridgeObjectRelease(v96);
      *(_QWORD *)(v78 + 136) = *(_QWORD *)(v79 + 136);
      v97 = *(_QWORD *)(v79 + 144);
      v98 = *(_QWORD *)(v78 + 144);
      *(_QWORD *)(v78 + 144) = v97;
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRelease(v98);
    }
    else
    {
      sub_1E060((_QWORD *)v78);
      v108 = *(_OWORD *)(v79 + 16);
      *(_OWORD *)v78 = *(_OWORD *)v79;
      *(_OWORD *)(v78 + 16) = v108;
      v109 = *(_OWORD *)(v79 + 80);
      v111 = *(_OWORD *)(v79 + 32);
      v110 = *(_OWORD *)(v79 + 48);
      *(_OWORD *)(v78 + 64) = *(_OWORD *)(v79 + 64);
      *(_OWORD *)(v78 + 80) = v109;
      *(_OWORD *)(v78 + 32) = v111;
      *(_OWORD *)(v78 + 48) = v110;
      v113 = *(_OWORD *)(v79 + 112);
      v112 = *(_OWORD *)(v79 + 128);
      v114 = *(_OWORD *)(v79 + 96);
      *(_QWORD *)(v78 + 144) = *(_QWORD *)(v79 + 144);
      *(_OWORD *)(v78 + 112) = v113;
      *(_OWORD *)(v78 + 128) = v112;
      *(_OWORD *)(v78 + 96) = v114;
    }
  }
  else if (v81)
  {
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v99 = *(_QWORD *)(v79 + 8);
    *(_QWORD *)(v78 + 8) = v99;
    *(_QWORD *)(v78 + 16) = *(_QWORD *)(v79 + 16);
    v100 = *(_QWORD *)(v79 + 24);
    *(_QWORD *)(v78 + 24) = v100;
    *(_QWORD *)(v78 + 32) = *(_QWORD *)(v79 + 32);
    v101 = *(_QWORD *)(v79 + 40);
    *(_QWORD *)(v78 + 40) = v101;
    *(_BYTE *)(v78 + 48) = *(_BYTE *)(v79 + 48);
    *(_QWORD *)(v78 + 56) = *(_QWORD *)(v79 + 56);
    v102 = *(_QWORD *)(v79 + 64);
    *(_QWORD *)(v78 + 64) = v102;
    *(_QWORD *)(v78 + 72) = *(_QWORD *)(v79 + 72);
    v103 = *(_QWORD *)(v79 + 80);
    *(_QWORD *)(v78 + 80) = v103;
    *(_QWORD *)(v78 + 88) = *(_QWORD *)(v79 + 88);
    v104 = *(_QWORD *)(v79 + 96);
    *(_QWORD *)(v78 + 96) = v104;
    *(_QWORD *)(v78 + 104) = *(_QWORD *)(v79 + 104);
    v105 = *(_QWORD *)(v79 + 112);
    *(_QWORD *)(v78 + 112) = v105;
    *(_QWORD *)(v78 + 120) = *(_QWORD *)(v79 + 120);
    v106 = *(_QWORD *)(v79 + 128);
    *(_QWORD *)(v78 + 128) = v106;
    *(_QWORD *)(v78 + 136) = *(_QWORD *)(v79 + 136);
    v107 = *(_QWORD *)(v79 + 144);
    *(_QWORD *)(v78 + 144) = v107;
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRetain(v107);
  }
  else
  {
    v115 = *(_OWORD *)(v79 + 16);
    *(_OWORD *)v78 = *(_OWORD *)v79;
    *(_OWORD *)(v78 + 16) = v115;
    v116 = *(_OWORD *)(v79 + 32);
    v117 = *(_OWORD *)(v79 + 48);
    v118 = *(_OWORD *)(v79 + 80);
    *(_OWORD *)(v78 + 64) = *(_OWORD *)(v79 + 64);
    *(_OWORD *)(v78 + 80) = v118;
    *(_OWORD *)(v78 + 32) = v116;
    *(_OWORD *)(v78 + 48) = v117;
    v119 = *(_OWORD *)(v79 + 96);
    v120 = *(_OWORD *)(v79 + 112);
    v121 = *(_OWORD *)(v79 + 128);
    *(_QWORD *)(v78 + 144) = *(_QWORD *)(v79 + 144);
    *(_OWORD *)(v78 + 112) = v120;
    *(_OWORD *)(v78 + 128) = v121;
    *(_OWORD *)(v78 + 96) = v119;
  }
  return a1;
}

_QWORD *sub_1DFF8(_QWORD *a1)
{
  destroy for SectionData(a1);
  return a1;
}

uint64_t sub_1E02C(uint64_t a1)
{
  destroy for ThemesData(a1);
  return a1;
}

_QWORD *sub_1E060(_QWORD *a1)
{
  destroy for LinkData(a1);
  return a1;
}

uint64_t initializeWithTake for MediaEngageEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[9];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for TimedData(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_71B4(&qword_296A18);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[10];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 112);
  *(_OWORD *)(v18 + 96) = *(_OWORD *)(v19 + 96);
  *(_OWORD *)(v18 + 112) = v20;
  *(_OWORD *)(v18 + 128) = *(_OWORD *)(v19 + 128);
  *(_QWORD *)(v18 + 144) = *(_QWORD *)(v19 + 144);
  v21 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48) = v21;
  v22 = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80) = v22;
  v23 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v23;
  return a1;
}

uint64_t assignWithTake for MediaEngageEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v15;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a1 + 152);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 152);
    if (v20)
    {
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v20;
      swift_bridgeObjectRelease(v19);
      v21 = *(_QWORD *)(a2 + 168);
      v22 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v21;
      swift_bridgeObjectRelease(v22);
      v23 = *(_QWORD *)(a2 + 184);
      v24 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = v23;
      swift_bridgeObjectRelease(v24);
      v25 = *(_QWORD *)(a2 + 200);
      v26 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v25;
      swift_bridgeObjectRelease(v26);
      v27 = *(_QWORD *)(a2 + 216);
      v28 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v27;
      swift_bridgeObjectRelease(v28);
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
      v29 = *(_QWORD *)(a2 + 240);
      v30 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v29;
      swift_bridgeObjectRelease(v30);
      goto LABEL_6;
    }
    sub_1DFF8((_QWORD *)(a1 + 136));
  }
  v31 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v31;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  v32 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v32;
  v33 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v33;
LABEL_6:
  if (*(_QWORD *)(a1 + 272))
  {
    if (*(_QWORD *)(a2 + 272))
    {
      v34 = *(_QWORD *)(a2 + 256);
      v35 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v34;
      swift_bridgeObjectRelease(v35);
      v36 = *(_QWORD *)(a2 + 272);
      v37 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v36;
      swift_bridgeObjectRelease(v37);
      goto LABEL_11;
    }
    sub_1E02C(a1 + 248);
  }
  v38 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v38;
LABEL_11:
  v39 = a3[8];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[9];
  v44 = (void *)(a1 + v43);
  v45 = (void *)(a2 + v43);
  v46 = type metadata accessor for TimedData(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v50)
  {
    (*(void (**)(void *, uint64_t))(v47 + 8))(v44, v46);
LABEL_16:
    v51 = sub_71B4(&qword_296A18);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v47 + 40))(v44, v45, v46);
LABEL_17:
  v52 = a3[10];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = *(_QWORD *)(a1 + v52 + 8);
  if (!v55)
  {
LABEL_21:
    v73 = *(_OWORD *)(v54 + 112);
    *(_OWORD *)(v53 + 96) = *(_OWORD *)(v54 + 96);
    *(_OWORD *)(v53 + 112) = v73;
    *(_OWORD *)(v53 + 128) = *(_OWORD *)(v54 + 128);
    *(_QWORD *)(v53 + 144) = *(_QWORD *)(v54 + 144);
    v74 = *(_OWORD *)(v54 + 48);
    *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
    *(_OWORD *)(v53 + 48) = v74;
    v75 = *(_OWORD *)(v54 + 80);
    *(_OWORD *)(v53 + 64) = *(_OWORD *)(v54 + 64);
    *(_OWORD *)(v53 + 80) = v75;
    v76 = *(_OWORD *)(v54 + 16);
    *(_OWORD *)v53 = *(_OWORD *)v54;
    *(_OWORD *)(v53 + 16) = v76;
    return a1;
  }
  v56 = *(_QWORD *)(v54 + 8);
  if (!v56)
  {
    sub_1E060((_QWORD *)v53);
    goto LABEL_21;
  }
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *(_QWORD *)(v53 + 8) = v56;
  swift_bridgeObjectRelease(v55);
  v57 = *(_QWORD *)(v54 + 24);
  v58 = *(_QWORD *)(v53 + 24);
  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v54 + 16);
  *(_QWORD *)(v53 + 24) = v57;
  swift_bridgeObjectRelease(v58);
  v59 = *(_QWORD *)(v54 + 40);
  v60 = *(_QWORD *)(v53 + 40);
  *(_QWORD *)(v53 + 32) = *(_QWORD *)(v54 + 32);
  *(_QWORD *)(v53 + 40) = v59;
  swift_bridgeObjectRelease(v60);
  *(_BYTE *)(v53 + 48) = *(_BYTE *)(v54 + 48);
  v61 = *(_QWORD *)(v54 + 64);
  v62 = *(_QWORD *)(v53 + 64);
  *(_QWORD *)(v53 + 56) = *(_QWORD *)(v54 + 56);
  *(_QWORD *)(v53 + 64) = v61;
  swift_bridgeObjectRelease(v62);
  v63 = *(_QWORD *)(v54 + 80);
  v64 = *(_QWORD *)(v53 + 80);
  *(_QWORD *)(v53 + 72) = *(_QWORD *)(v54 + 72);
  *(_QWORD *)(v53 + 80) = v63;
  swift_bridgeObjectRelease(v64);
  v65 = *(_QWORD *)(v54 + 96);
  v66 = *(_QWORD *)(v53 + 96);
  *(_QWORD *)(v53 + 88) = *(_QWORD *)(v54 + 88);
  *(_QWORD *)(v53 + 96) = v65;
  swift_bridgeObjectRelease(v66);
  v67 = *(_QWORD *)(v54 + 112);
  v68 = *(_QWORD *)(v53 + 112);
  *(_QWORD *)(v53 + 104) = *(_QWORD *)(v54 + 104);
  *(_QWORD *)(v53 + 112) = v67;
  swift_bridgeObjectRelease(v68);
  v69 = *(_QWORD *)(v54 + 128);
  v70 = *(_QWORD *)(v53 + 128);
  *(_QWORD *)(v53 + 120) = *(_QWORD *)(v54 + 120);
  *(_QWORD *)(v53 + 128) = v69;
  swift_bridgeObjectRelease(v70);
  v71 = *(_QWORD *)(v54 + 144);
  v72 = *(_QWORD *)(v53 + 144);
  *(_QWORD *)(v53 + 136) = *(_QWORD *)(v54 + 136);
  *(_QWORD *)(v53 + 144) = v71;
  swift_bridgeObjectRelease(v72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaEngageEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E628);
}

uint64_t sub_1E628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_71B4(&qword_296A18);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MediaEngageEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E6D8);
}

uint64_t sub_1E6D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_71B4(&qword_296A18);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1E778(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "$";
  v6[1] = &unk_1F24F0;
  v6[2] = &unk_1F2508;
  v6[3] = &unk_1F2520;
  v2 = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_1E82C(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      v6[6] = &unk_1F2538;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_1E82C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_296BB8)
  {
    v2 = type metadata accessor for TimedData(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_296BB8);
  }
}

uint64_t storeEnumTagSinglePayload for MediaEngageEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1E8CC + 4 * byte_1F23CC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1E900 + 4 * byte_1F23C7[v4]))();
}

uint64_t sub_1E900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1E910);
  return result;
}

uint64_t sub_1E91C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1E924);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1E928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaEngageEvent.Model.CodingKeys()
{
  return &type metadata for MediaEngageEvent.Model.CodingKeys;
}

unint64_t sub_1E950()
{
  unint64_t result;

  result = qword_296C00;
  if (!qword_296C00)
  {
    result = swift_getWitnessTable(&unk_1F25EC, &type metadata for MediaEngageEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C00);
  }
  return result;
}

unint64_t sub_1E998()
{
  unint64_t result;

  result = qword_296C08;
  if (!qword_296C08)
  {
    result = swift_getWitnessTable("͏\a", &type metadata for MediaEngageEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C08);
  }
  return result;
}

unint64_t sub_1E9E0()
{
  unint64_t result;

  result = qword_296C10;
  if (!qword_296C10)
  {
    result = swift_getWitnessTable(&unk_1F2584, &type metadata for MediaEngageEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C10);
  }
  return result;
}

uint64_t sub_1EA24(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x746144616964656DLL && a2 == 0xE900000000000061)
  {
    v5 = 0xE900000000000061;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144616964656DLL, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x800000000021EC60;
    if (a2 == 0x800000000021EC60)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021EC60, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v8 = 0xEB00000000617461;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    v11 = 0xE900000000000061;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

BookAnalytics::SortBy_optional __swiftcall SortBy.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SortBy_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266558, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SortBy.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1EDC0 + 4 * byte_1F2664[*v0]))(0x6E69646E65637361, 0xE900000000000067);
}

uint64_t sub_1EDC0()
{
  return 0x69646E6563736564;
}

uint64_t sub_1EDDC()
{
  return 0x44657361656C6572;
}

uint64_t sub_1EDFC()
{
  return 0x6972616C75706F70;
}

uint64_t sub_1EE18()
{
  return 0x656C746974;
}

void sub_1EE2C(char *a1)
{
  sub_26598(*a1);
}

unint64_t sub_1EE3C()
{
  unint64_t result;

  result = qword_296C18;
  if (!qword_296C18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SortBy, &type metadata for SortBy);
    atomic_store(result, (unint64_t *)&qword_296C18);
  }
  return result;
}

void sub_1EE80()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1EED0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x69646E6563736564, 0xEA0000000000676ELL);
  swift_bridgeObjectRelease(0xEA0000000000676ELL);
  return Hasher._finalize()();
}

void sub_1EF64()
{
  __asm { BR              X10 }
}

uint64_t sub_1EFA4(uint64_t a1)
{
  String.hash(into:)(a1, 0x69646E6563736564, 0xEA0000000000676ELL);
  return swift_bridgeObjectRelease(0xEA0000000000676ELL);
}

void sub_1F024(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1F070()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x69646E6563736564, 0xEA0000000000676ELL);
  swift_bridgeObjectRelease(0xEA0000000000676ELL);
  return Hasher._finalize()();
}

BookAnalytics::SortBy_optional sub_1F104(Swift::String *a1)
{
  return SortBy.init(rawValue:)(*a1);
}

uint64_t sub_1F110()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1F144 + 4 * byte_1F2678[*v0]))();
}

void sub_1F144(_QWORD *a1@<X8>)
{
  *a1 = 0x69646E6563736564;
  a1[1] = 0xEA0000000000676ELL;
}

void sub_1F164(_QWORD *a1@<X8>)
{
  *a1 = 0x44657361656C6572;
  a1[1] = 0xEB00000000657461;
}

void sub_1F188(_QWORD *a1@<X8>)
{
  *a1 = 0x6972616C75706F70;
  a1[1] = 0xEA00000000007974;
}

void sub_1F1A8(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1F1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1F334();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1F21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1F334();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SortBy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1F2B4 + 4 * byte_1F2682[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1F2E8 + 4 * byte_1F267D[v4]))();
}

uint64_t sub_1F2E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F2F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1F2F8);
  return result;
}

uint64_t sub_1F304(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1F30CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1F310(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1F318(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SortBy()
{
  return &type metadata for SortBy;
}

unint64_t sub_1F334()
{
  unint64_t result;

  result = qword_296C20;
  if (!qword_296C20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SortBy, &type metadata for SortBy);
    atomic_store(result, (unint64_t *)&qword_296C20);
  }
  return result;
}

uint64_t AppData.appBundleVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t AppData.appBundleVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t ClickData.targetType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t ClickData.targetType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*ClickData.targetType.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t LinkData.previousSeriesID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t LinkData.previousSeriesID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 64));
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*LinkData.previousSeriesID.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngagementData.isBuffering.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MediaEngagementData.isBuffering.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t (*LinkData.previousGenreID.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngagementData.isFailed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t MediaEngagementData.isFailed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 73) = result;
  return result;
}

uint64_t (*MediaEngagementData.isFailed.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t MediaEngagementData.isMediaCompleted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t MediaEngagementData.isMediaCompleted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 74) = result;
  return result;
}

uint64_t (*MediaEngagementData.isMediaCompleted.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SearchResultsItemTypeData.section.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t SearchResultsItemTypeData.section.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 88));
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*SearchResultsItemTypeData.section.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void __swiftcall MediaEngagementData.init(mediaPlayMethod:mediaTimePlayed:mediaUserAction:videoMode:muteStatus:isBuffering:isFailed:isMediaCompleted:isPlaying:)(BookAnalytics::MediaEngagementData *__return_ptr retstr, Swift::String mediaPlayMethod, Swift::Int64 mediaTimePlayed, Swift::String mediaUserAction, Swift::String videoMode, Swift::String muteStatus, Swift::Bool isBuffering, Swift::Bool isFailed, Swift::Bool isMediaCompleted, Swift::String isPlaying)
{
  retstr->mediaPlayMethod = mediaPlayMethod;
  retstr->mediaTimePlayed = mediaTimePlayed;
  retstr->mediaUserAction = mediaUserAction;
  retstr->videoMode = videoMode;
  retstr->muteStatus = muteStatus;
  retstr->isBuffering = isBuffering;
  retstr->isFailed = isFailed;
  retstr->isMediaCompleted = isMediaCompleted;
  retstr->isPlaying = isPlaying;
}

uint64_t sub_1F578(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1F5B8 + 4 * byte_1F27A0[a1]))(0x616C50616964656DLL, 0xEF646F6874654D79);
}

uint64_t sub_1F5B8()
{
  return 0x6D6954616964656DLL;
}

uint64_t sub_1F5DC()
{
  return 0x657355616964656DLL;
}

uint64_t sub_1F600()
{
  return 0x646F4D6F65646976;
}

uint64_t sub_1F61C()
{
  return 0x746174536574756DLL;
}

uint64_t sub_1F638()
{
  return 0x7265666675427369;
}

uint64_t sub_1F658()
{
  return 0x64656C6961467369;
}

unint64_t sub_1F670()
{
  return 0xD000000000000010;
}

uint64_t sub_1F68C()
{
  return 0x6E6979616C507369;
}

uint64_t sub_1F6AC()
{
  unsigned __int8 *v0;

  return sub_1F578(*v0);
}

uint64_t sub_1F6B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2061C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1F6D8(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1F6E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20074();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1F70C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_20074();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MediaEngagementData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v3 = sub_71B4(&qword_296C28);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v33 = v1[3];
  v34 = v9;
  v10 = v1[4];
  v31 = v1[5];
  v32 = v10;
  v11 = v1[6];
  v28 = v1[7];
  v29 = v1[8];
  v30 = v11;
  LODWORD(v11) = *((unsigned __int8 *)v1 + 72);
  v26 = *((unsigned __int8 *)v1 + 73);
  v27 = v11;
  v25 = *((unsigned __int8 *)v1 + 74);
  v12 = v1[10];
  v23 = v1[11];
  v24 = v12;
  v14 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v14);
  v15 = sub_20074();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MediaEngagementData.CodingKeys, &type metadata for MediaEngagementData.CodingKeys, v15, v14, v13);
  v44 = 0;
  v16 = v35;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v44, v3);
  if (!v16)
  {
    v17 = v32;
    v18 = v33;
    v20 = v30;
    v19 = v31;
    v43 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v34, &v43, v3);
    v42 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v17, &v42, v3);
    v41 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v41, v3);
    v40 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v40, v3);
    v39 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v39, v3);
    v38 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v38, v3);
    v37 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v37, v3);
    v36 = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v23, &v36, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MediaEngagementData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v5 = sub_71B4(&qword_296C38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_20074();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MediaEngagementData.CodingKeys, &type metadata for MediaEngagementData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  v48 = 0;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
  v15 = v14;
  v47 = 1;
  swift_bridgeObjectRetain(v14);
  v38 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v5);
  v46 = 2;
  v36 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  v37 = v13;
  v45 = 3;
  v39 = v16;
  swift_bridgeObjectRetain(v16);
  v17 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v5);
  v19 = v18;
  v35 = v17;
  v44 = 4;
  swift_bridgeObjectRetain(v18);
  v33 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
  v34 = v20;
  v43 = 5;
  swift_bridgeObjectRetain(v20);
  v32 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5);
  v42 = 6;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v5);
  v41 = 7;
  v29 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
  v40 = 8;
  v30 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
  v22 = v21;
  v31 &= 1u;
  v32 &= 1u;
  v29 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v15);
  v23 = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)a2 = v37;
  *(_QWORD *)(a2 + 8) = v15;
  v24 = v36;
  *(_QWORD *)(a2 + 16) = v38;
  *(_QWORD *)(a2 + 24) = v24;
  v26 = v34;
  v25 = v35;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v25;
  v27 = v33;
  *(_QWORD *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v27;
  *(_QWORD *)(a2 + 64) = v26;
  *(_BYTE *)(a2 + 72) = v32;
  *(_BYTE *)(a2 + 73) = v31;
  *(_BYTE *)(a2 + 74) = v29;
  *(_QWORD *)(a2 + 80) = v30;
  *(_QWORD *)(a2 + 88) = v22;
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v23);
  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_1FE44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MediaEngagementData.init(from:)(a1, a2);
}

uint64_t sub_1FE58(_QWORD *a1)
{
  return MediaEngagementData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics19MediaEngagementDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v25 = a1[11];
  v26 = a1[10];
  v23 = *(_QWORD *)(a2 + 88);
  v24 = *(_QWORD *)(a2 + 80);
  v29 = *((unsigned __int8 *)a1 + 72);
  v30 = *((unsigned __int8 *)a1 + 73);
  v35 = a1[8];
  v36 = a1[7];
  v27 = *(unsigned __int8 *)(a2 + 72);
  v28 = *(unsigned __int8 *)(a2 + 73);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_QWORD *)(a2 + 56);
  v31 = *(unsigned __int8 *)(a2 + 74);
  v32 = *((unsigned __int8 *)a1 + 74);
  if (v4 == *(_QWORD *)a2 && v5 == v11)
  {
    if (v6 != v13)
      return 0;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v11, 0);
    result = 0;
    if ((v17 & 1) == 0 || v6 != v13)
      return result;
  }
  if (v8 == v12 && v7 == v15
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v12, v15, 0), result = 0, (v19 & 1) != 0))
  {
    if (v9 == v14 && v10 == v16
      || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v14, v16, 0), result = 0, (v20 & 1) != 0))
    {
      v21 = v32 ^ v31;
      if (v36 == v34 && v35 == v33)
      {
        if (((v29 ^ v27 | v30 ^ v28 | v21) & 1) != 0)
          return 0;
      }
      else
      {
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v35, v34, v33, 0);
        result = 0;
        if ((v29 ^ v27) & 1 | ((v22 & 1) == 0) | (v30 ^ v28 | v21) & 1)
          return result;
      }
      if (v26 == v24 && v25 == v23)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v24, v23, 0);
    }
  }
  return result;
}

unint64_t sub_20074()
{
  unint64_t result;

  result = qword_296C30;
  if (!qword_296C30)
  {
    result = swift_getWitnessTable(&unk_1F2968, &type metadata for MediaEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C30);
  }
  return result;
}

uint64_t destroy for MediaEngagementData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for MediaEngagementData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for MediaEngagementData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for ContentData(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for MediaEngagementData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaEngagementData()
{
  return &type metadata for MediaEngagementData;
}

uint64_t getEnumTagSinglePayload for MediaEngagementData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaEngagementData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_204C4 + 4 * byte_1F27AE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_204F8 + 4 * byte_1F27A9[v4]))();
}

uint64_t sub_204F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20508);
  return result;
}

uint64_t sub_20514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2051CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_20520(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20528(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaEngagementData.CodingKeys()
{
  return &type metadata for MediaEngagementData.CodingKeys;
}

unint64_t sub_20548()
{
  unint64_t result;

  result = qword_296C40;
  if (!qword_296C40)
  {
    result = swift_getWitnessTable(&unk_1F2940, &type metadata for MediaEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C40);
  }
  return result;
}

unint64_t sub_20590()
{
  unint64_t result;

  result = qword_296C48;
  if (!qword_296C48)
  {
    result = swift_getWitnessTable(&unk_1F28B0, &type metadata for MediaEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C48);
  }
  return result;
}

unint64_t sub_205D8()
{
  unint64_t result;

  result = qword_296C50;
  if (!qword_296C50)
  {
    result = swift_getWitnessTable(&unk_1F28D8, &type metadata for MediaEngagementData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C50);
  }
  return result;
}

uint64_t sub_2061C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x616C50616964656DLL && a2 == 0xEF646F6874654D79)
  {
    v5 = 0xEF646F6874654D79;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616C50616964656DLL, 0xEF646F6874654D79, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D6954616964656DLL && a2 == 0xEF646579616C5065)
  {
    v7 = 0xEF646579616C5065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6954616964656DLL, 0xEF646579616C5065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x657355616964656DLL && a2 == 0xEF6E6F6974634172)
  {
    v8 = 0xEF6E6F6974634172;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657355616964656DLL, 0xEF6E6F6974634172, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x646F4D6F65646976 && a2 == 0xE900000000000065)
  {
    v9 = 0xE900000000000065;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F4D6F65646976, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746174536574756DLL && a2 == 0xEA00000000007375)
  {
    v10 = 0xEA00000000007375;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746174536574756DLL, 0xEA00000000007375, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x7265666675427369 && a2 == 0xEB00000000676E69)
  {
    v11 = 0xEB00000000676E69;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265666675427369, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x64656C6961467369 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C6961467369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000010)
  {
    v13 = 0x800000000021EC80;
    if (a2 == 0x800000000021EC80)
      goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EC80, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0x6E6979616C507369 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease(0xE900000000000067);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6979616C507369, 0xE900000000000067, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t YIRSourceData.longestAudiobook.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t YIRSourceData.longestAudiobook.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

void __swiftcall FlowcaseData.init(name:positionInSection:flowcaseID:lastRefreshedTimestamp:flowcaseType:)(BookAnalytics::FlowcaseData *__return_ptr retstr, Swift::String name, Swift::Int32 positionInSection, Swift::String flowcaseID, Swift::Int64_optional lastRefreshedTimestamp, Swift::String_optional flowcaseType)
{
  retstr->name = name;
  retstr->positionInSection = positionInSection;
  retstr->flowcaseID = flowcaseID;
  retstr->lastRefreshedTimestamp.value = lastRefreshedTimestamp.value;
  retstr->lastRefreshedTimestamp.is_nil = lastRefreshedTimestamp.is_nil;
  retstr->flowcaseType = flowcaseType;
}

uint64_t sub_20AA4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20AD0 + 4 * byte_1F29B8[a1]))(1701667182, 0xE400000000000000);
}

unint64_t sub_20AD0()
{
  return 0xD000000000000011;
}

uint64_t sub_20AEC()
{
  return 0x65736163776F6C66;
}

uint64_t sub_20B38()
{
  unsigned __int8 *v0;

  return sub_20AA4(*v0);
}

uint64_t sub_20B40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_216A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20B64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_211B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_20B8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_211B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowcaseData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = sub_71B4(&qword_296C58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v26 = *((_DWORD *)v1 + 4);
  v9 = v1[3];
  v24 = v1[4];
  v25 = v9;
  v23 = v1[5];
  v22 = *((unsigned __int8 *)v1 + 48);
  v10 = v1[7];
  v20 = v1[8];
  v21 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_211B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FlowcaseData.CodingKeys, &type metadata for FlowcaseData.CodingKeys, v13, v11, v12);
  v32 = 0;
  v14 = v27;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v32, v3);
  if (!v14)
  {
    v16 = v24;
    v15 = v25;
    v17 = v22;
    v18 = v23;
    v31 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v31, v3);
    v30 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v30, v3);
    v29 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v17, &v29, v3);
    v28 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v20, &v28, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FlowcaseData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v5 = sub_71B4(&qword_296C68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_211B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FlowcaseData.CodingKeys, &type metadata for FlowcaseData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v25 = 0;
  }
  else
  {
    v36 = 0;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
    v15 = v14;
    v35 = 1;
    swift_bridgeObjectRetain(v14);
    v30 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v34 = 2;
    v29 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
    v33 = 3;
    v31 = v16;
    swift_bridgeObjectRetain(v16);
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
    v27 = v18;
    v28 = v17;
    v32 = 4;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    v21 = v20;
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23 = v19;
    v22(v8, v5);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(0);
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v15;
    *(_DWORD *)(a2 + 16) = v30;
    v24 = v31;
    *(_QWORD *)(a2 + 24) = v29;
    *(_QWORD *)(a2 + 32) = v24;
    *(_QWORD *)(a2 + 40) = v28;
    *(_BYTE *)(a2 + 48) = v27 & 1;
    *(_QWORD *)(a2 + 56) = v23;
    *(_QWORD *)(a2 + 64) = v21;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v24);
    v25 = v15;
  }
  return swift_bridgeObjectRelease(v25);
}

uint64_t sub_2103C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FlowcaseData.init(from:)(a1, a2);
}

uint64_t sub_21050(_QWORD *a1)
{
  return FlowcaseData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics12FlowcaseDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v7 = a1[3];
  v8 = a1[4];
  v9 = *((_BYTE *)a1 + 48);
  v22 = a1[7];
  v23 = a1[5];
  v24 = a1[8];
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(unsigned __int8 *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 56);
  if (v4 == *(_QWORD *)a2 && v5 == v10)
  {
    if (v6 != v11)
      return 0;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v10, 0);
    result = 0;
    if ((v17 & 1) == 0 || v6 != v11)
      return result;
  }
  if (v7 == v12 && v8 == v13
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v12, v13, 0), result = 0, (v19 & 1) != 0))
  {
    if ((v9 & 1) != 0)
    {
      if (!v15)
        return 0;
    }
    else
    {
      if (v23 == v14)
        v20 = v15;
      else
        v20 = 1;
      if ((v20 & 1) != 0)
        return 0;
    }
    if (v24)
    {
      if (!v16
        || (v22 != v21 || v24 != v16) && (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v21, v16, 0) & 1) == 0)
      {
        return 0;
      }
    }
    else if (v16)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_211B4()
{
  unint64_t result;

  result = qword_296C60;
  if (!qword_296C60)
  {
    result = swift_getWitnessTable(&unk_1F2B68, &type metadata for FlowcaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C60);
  }
  return result;
}

unint64_t sub_211FC()
{
  unint64_t result;

  result = qword_296C70;
  if (!qword_296C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowcaseData, &type metadata for FlowcaseData);
    atomic_store(result, (unint64_t *)&qword_296C70);
  }
  return result;
}

unint64_t sub_21244()
{
  unint64_t result;

  result = qword_296C78;
  if (!qword_296C78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowcaseData, &type metadata for FlowcaseData);
    atomic_store(result, (unint64_t *)&qword_296C78);
  }
  return result;
}

uint64_t destroy for FlowcaseData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for FlowcaseData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for FlowcaseData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for FlowcaseData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FlowcaseData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowcaseData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FlowcaseData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowcaseData()
{
  return &type metadata for FlowcaseData;
}

uint64_t storeEnumTagSinglePayload for FlowcaseData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2154C + 4 * byte_1F29C2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21580 + 4 * byte_1F29BD[v4]))();
}

uint64_t sub_21580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21590);
  return result;
}

uint64_t sub_2159C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x215A4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_215A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_215B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowcaseData.CodingKeys()
{
  return &type metadata for FlowcaseData.CodingKeys;
}

unint64_t sub_215D0()
{
  unint64_t result;

  result = qword_296C80;
  if (!qword_296C80)
  {
    result = swift_getWitnessTable(&unk_1F2B40, &type metadata for FlowcaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C80);
  }
  return result;
}

unint64_t sub_21618()
{
  unint64_t result;

  result = qword_296C88;
  if (!qword_296C88)
  {
    result = swift_getWitnessTable(&unk_1F2AB0, &type metadata for FlowcaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C88);
  }
  return result;
}

unint64_t sub_21660()
{
  unint64_t result;

  result = qword_296C90;
  if (!qword_296C90)
  {
    result = swift_getWitnessTable(&unk_1F2AD8, &type metadata for FlowcaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296C90);
  }
  return result;
}

uint64_t sub_216A4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x800000000021ECA0;
    if (a2 == 0x800000000021ECA0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021ECA0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x65736163776F6C66 && a2 == 0xEA00000000004449)
  {
    v8 = 0xEA00000000004449;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736163776F6C66, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000000021ECC0)
  {
    v9 = 0x800000000021ECC0;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000000021ECC0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x65736163776F6C66 && a2 == 0xEC00000065707954)
  {
    swift_bridgeObjectRelease(0xEC00000065707954);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65736163776F6C66, 0xEC00000065707954, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::ErrorData __swiftcall ErrorData.init(errorCode:errorDescription:)(Swift::String errorCode, Swift::String errorDescription)
{
  Swift::String *v2;
  BookAnalytics::ErrorData result;

  *v2 = errorCode;
  v2[1] = errorDescription;
  result.errorDescription = errorDescription;
  result.errorCode = errorCode;
  return result;
}

uint64_t sub_218C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6570795465676170;
  else
    return 0x444965676170;
}

uint64_t sub_21900@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2209C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21924(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_21D1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2194C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_21D1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = sub_71B4(&qword_296C98);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v15 = v1[3];
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_21D1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageData.CodingKeys, &type metadata for PageData.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v19, v4);
  if (!v2)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v15, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

uint64_t PageData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v5 = sub_71B4(&qword_296CA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_21D1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageData.CodingKeys, &type metadata for PageData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v12 = 0;
    sub_7DAC(a1);
  }
  else
  {
    v23 = 0;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v23, v5);
    v12 = v14;
    v22 = 1;
    swift_bridgeObjectRetain(v14);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20 = v15;
    v19(v8, v5);
    *a2 = v13;
    a2[1] = v12;
    a2[2] = v20;
    a2[3] = v18;
    swift_bridgeObjectRetain(v18);
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v18);
  }
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_21C4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return PageData.init(from:)(a1, a2);
}

uint64_t sub_21C60(_QWORD *a1)
{
  return PageData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics8PageDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t result;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  if (!v3)
  {
    if (!v6)
    {
LABEL_11:
      if (v4 == v7 && v5 == v8)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0);
    }
    return 0;
  }
  if (!v6)
    return 0;
  v9 = *a1;
  if (v9 == *a2 && v3 == v6)
    goto LABEL_11;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v3, *a2, v6, 0);
  result = 0;
  if ((v11 & 1) != 0)
    goto LABEL_11;
  return result;
}

unint64_t sub_21D1C()
{
  unint64_t result;

  result = qword_296CA0;
  if (!qword_296CA0)
  {
    result = swift_getWitnessTable(&unk_1F2D54, &type metadata for PageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296CA0);
  }
  return result;
}

_QWORD *initializeWithCopy for ErrorData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for ErrorData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for ErrorData(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ErrorData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PageData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PageData()
{
  return &type metadata for PageData;
}

uint64_t storeEnumTagSinglePayload for PageData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21F44 + 4 * byte_1F2BBD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21F78 + 4 * byte_1F2BB8[v4]))();
}

uint64_t sub_21F78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21F80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21F88);
  return result;
}

uint64_t sub_21F94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21F9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageData.CodingKeys()
{
  return &type metadata for PageData.CodingKeys;
}

unint64_t sub_21FC8()
{
  unint64_t result;

  result = qword_296CB0;
  if (!qword_296CB0)
  {
    result = swift_getWitnessTable(&unk_1F2D2C, &type metadata for PageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296CB0);
  }
  return result;
}

unint64_t sub_22010()
{
  unint64_t result;

  result = qword_296CB8;
  if (!qword_296CB8)
  {
    result = swift_getWitnessTable(&unk_1F2C9C, &type metadata for PageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296CB8);
  }
  return result;
}

unint64_t sub_22058()
{
  unint64_t result;

  result = qword_296CC0;
  if (!qword_296CC0)
  {
    result = swift_getWitnessTable(&unk_1F2CC4, &type metadata for PageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296CC0);
  }
  return result;
}

uint64_t sub_2209C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x444965676170 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965676170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6570795465676170 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6570795465676170, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double OnDevicePersonalizationPropertyData.lockedIn.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void OnDevicePersonalizationPropertyData.lockedIn.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*ScrubData.totalLength.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void ReadingGoalsData.dailyReadingGoalStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

_BYTE *ReadingGoalsData.dailyReadingGoalStatus.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = *result;
  return result;
}

uint64_t ReadingGoalsData.weeklyGoalsStatus.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

uint64_t ReadingGoalsData.weeklyGoalsStatus.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t (*ReadingSettingsData.brightnessLevel.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

double ReadingGoalsData.lastLongestGoalReachedDate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void ReadingGoalsData.lastLongestGoalReachedDate.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

void LinkData.linkActionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

_BYTE *LinkData.linkActionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = *result;
  return result;
}

uint64_t (*ClickData.outBoundURL.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

double ReadingGoalsData.defaultYearlyReadingGoalChangeDate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void ReadingGoalsData.defaultYearlyReadingGoalChangeDate.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t ReadingGoalsData.yearlyReadingGoalCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t ReadingGoalsData.yearlyReadingGoalCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*UserEventStorageData.playCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void ReadingGoalsData.yearlyReadingGoalStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 72);
}

_BYTE *ReadingGoalsData.yearlyReadingGoalStatus.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = *result;
  return result;
}

void __swiftcall ReadingGoalsData.init(defaultReadingGoal:defaultReadingGoalChangeDate:dailyReadingGoalDuration:dailyReadingGoalStatus:weeklyGoalsStatus:longestGoalReachedDays:lastLongestGoalReachedDate:defaultYearlyReadingGoal:defaultYearlyReadingGoalChangeDate:yearlyReadingGoalCount:yearlyReadingGoalStatus:)(BookAnalytics::ReadingGoalsData *__return_ptr retstr, BookAnalytics::DefaultReadingGoal defaultReadingGoal, Swift::Double defaultReadingGoalChangeDate, Swift::Int64 dailyReadingGoalDuration, BookAnalytics::DailyReadingGoalStatus dailyReadingGoalStatus, Swift::Int32 weeklyGoalsStatus, Swift::Int32 longestGoalReachedDays, Swift::Double lastLongestGoalReachedDate, BookAnalytics::DefaultReadingGoal defaultYearlyReadingGoal, Swift::Double defaultYearlyReadingGoalChangeDate, Swift::Int64 yearlyReadingGoalCount, BookAnalytics::DailyReadingGoalStatus yearlyReadingGoalStatus)
{
  BookAnalytics::DailyReadingGoalStatus v12;
  BookAnalytics::DefaultReadingGoal v13;
  BookAnalytics::DailyReadingGoalStatus v14;

  v12 = *(_BYTE *)dailyReadingGoalStatus;
  v13 = *(_BYTE *)defaultYearlyReadingGoal;
  v14 = *(_BYTE *)yearlyReadingGoalStatus;
  retstr->defaultReadingGoal = *(_BYTE *)defaultReadingGoal;
  retstr->defaultReadingGoalChangeDate = defaultReadingGoalChangeDate;
  retstr->dailyReadingGoalDuration = dailyReadingGoalDuration;
  retstr->dailyReadingGoalStatus = v12;
  retstr->weeklyGoalsStatus = weeklyGoalsStatus;
  retstr->longestGoalReachedDays = longestGoalReachedDays;
  retstr->lastLongestGoalReachedDate = lastLongestGoalReachedDate;
  retstr->defaultYearlyReadingGoal = v13;
  retstr->defaultYearlyReadingGoalChangeDate = defaultYearlyReadingGoalChangeDate;
  retstr->yearlyReadingGoalCount = yearlyReadingGoalCount;
  retstr->yearlyReadingGoalStatus = v14;
}

uint64_t sub_2229C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_222D8 + 4 * byte_1F2DB0[a1]))(0xD000000000000012, 0x800000000021ECE0);
}

uint64_t sub_222D8()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_22384()
{
  unsigned __int8 *v0;

  return sub_2229C(*v0);
}

uint64_t sub_2238C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2322C(a1, a2);
  *a3 = result;
  return result;
}

void sub_223B0(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_223BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_22D44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_223E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_22D44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadingGoalsData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  double v9;
  int v10;
  unsigned int v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v4 = sub_71B4(&qword_296CC8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((double *)v1 + 1);
  v32 = *((_QWORD *)v1 + 2);
  v10 = v1[24];
  v30 = *((_DWORD *)v1 + 7);
  v31 = v10;
  v11 = *((_DWORD *)v1 + 8);
  v12 = *((double *)v1 + 5);
  v28 = v1[48];
  v29 = v11;
  v13 = *((double *)v1 + 7);
  v27 = *((_QWORD *)v1 + 8);
  v26 = v1[72];
  v14 = a1[3];
  v15 = a1[4];
  sub_7988(a1, v14);
  v16 = sub_22D44();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadingGoalsData.CodingKeys, &type metadata for ReadingGoalsData.CodingKeys, v16, v14, v15);
  v47 = v8;
  v17 = v7;
  v46 = 0;
  v18 = sub_22D88();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v47, &v46, v4, &type metadata for DefaultReadingGoal, v18);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20 = v32;
  v21 = v30;
  v22 = v31;
  v23 = v5;
  v45 = 1;
  KeyedEncodingContainer.encode(_:forKey:)(&v45, v4, v9);
  v44 = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v20, &v44, v4);
  v43 = v22;
  v42 = 3;
  v24 = sub_22DCC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v42, v4, &type metadata for DailyReadingGoalStatus, v24);
  v41 = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v21, &v41, v4);
  v40 = 5;
  KeyedEncodingContainer.encode(_:forKey:)(v29, &v40, v4);
  v39 = 6;
  KeyedEncodingContainer.encode(_:forKey:)(&v39, v4, v12);
  v38 = v28;
  v37 = 7;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v37, v4, &type metadata for DefaultReadingGoal, v18);
  v36 = 8;
  KeyedEncodingContainer.encode(_:forKey:)(&v36, v4, v13);
  v35 = 9;
  KeyedEncodingContainer.encode(_:forKey:)(v27, &v35, v4);
  v34 = v26;
  v33 = 10;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v4, &type metadata for DailyReadingGoalStatus, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v17, v4);
}

uint64_t ReadingGoalsData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v5 = sub_71B4(&qword_296CE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_22D44();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadingGoalsData.CodingKeys, &type metadata for ReadingGoalsData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE3(v35) = 0;
    v12 = sub_22E10();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v35 + 4), &type metadata for DefaultReadingGoal, (char *)&v35 + 3, v5, &type metadata for DefaultReadingGoal, v12);
    v13 = BYTE4(v35);
    BYTE2(v35) = 1;
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v35 + 2, v5);
    v15 = v14;
    BYTE1(v35) = 2;
    v16 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v35 + 1, v5);
    v30 = v13;
    v31 = v16;
    v34 = 3;
    v17 = sub_22E54();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v35, &type metadata for DailyReadingGoalStatus, &v34, v5, &type metadata for DailyReadingGoalStatus, v17);
    v29 = v17;
    v28 = v35;
    HIBYTE(v33) = 4;
    LODWORD(v17) = KeyedDecodingContainer.decode(_:forKey:)((char *)&v33 + 7, v5);
    BYTE6(v33) = 5;
    v27 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v33 + 6, v5);
    BYTE5(v33) = 6;
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v33 + 5, v5);
    v19 = v18;
    BYTE3(v33) = 7;
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v33 + 4), &type metadata for DefaultReadingGoal, (char *)&v33 + 3, v5, &type metadata for DefaultReadingGoal, v12);
    LOBYTE(v12) = BYTE4(v33);
    BYTE2(v33) = 8;
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v33 + 2, v5);
    v21 = v20;
    BYTE1(v33) = 9;
    v26 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v33 + 1, v5);
    v32 = 10;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &type metadata for DailyReadingGoalStatus, &v32, v5, &type metadata for DailyReadingGoalStatus, v29);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v23 = v33;
    *(_BYTE *)a2 = v30;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v31;
    *(_BYTE *)(a2 + 24) = v28;
    v24 = v27;
    *(_DWORD *)(a2 + 28) = v17;
    *(_DWORD *)(a2 + 32) = v24;
    *(_QWORD *)(a2 + 40) = v19;
    *(_BYTE *)(a2 + 48) = v12;
    *(_QWORD *)(a2 + 56) = v21;
    *(_QWORD *)(a2 + 64) = v26;
    *(_BYTE *)(a2 + 72) = v23;
  }
  return sub_7DAC(a1);
}

uint64_t sub_22A88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReadingGoalsData.init(from:)(a1, a2);
}

uint64_t sub_22A9C(_QWORD *a1)
{
  return ReadingGoalsData.encode(to:)(a1);
}

void _s13BookAnalytics16ReadingGoalsDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  double v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;
  double v17;
  char v18;
  char v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;

  if (!*(_BYTE *)a1)
  {
    v2 = 0xE200000000000000;
    v3 = 16718;
    if (*(_BYTE *)a2)
      goto LABEL_6;
    goto LABEL_9;
  }
  v2 = 0xE100000000000000;
  if (*(_BYTE *)a1 != 1)
  {
    v3 = 78;
    if (*(_BYTE *)a2)
      goto LABEL_6;
LABEL_9:
    v4 = 0xE200000000000000;
    v5 = 16718;
    goto LABEL_11;
  }
  v3 = 89;
  if (!*(_BYTE *)a2)
    goto LABEL_9;
LABEL_6:
  v4 = 0xE100000000000000;
  if (*(_BYTE *)a2 == 1)
    v5 = 89;
  else
    v5 = 78;
LABEL_11:
  v6 = *(_BYTE *)(a1 + 24);
  v29 = *(unsigned __int8 *)(a1 + 48);
  v30 = *(unsigned __int8 *)(a2 + 48);
  v26 = *(_BYTE *)(a1 + 72);
  v7 = *(double *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 28);
  v31 = *(_DWORD *)(a1 + 32);
  v10 = *(double *)(a1 + 40);
  v11 = *(double *)(a1 + 56);
  v12 = *(double *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v15 = *(_DWORD *)(a2 + 28);
  v14 = *(_DWORD *)(a2 + 32);
  v16 = *(double *)(a2 + 40);
  v17 = *(double *)(a2 + 56);
  v27 = *(_QWORD *)(a2 + 64);
  v28 = *(_QWORD *)(a1 + 64);
  if (v3 == v5 && v2 == v4)
  {
    swift_bridgeObjectRelease_n(v2, 2);
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v5, v4, 0);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v4);
    if ((v18 & 1) == 0)
      return;
  }
  if (v7 == v12 && v8 == v13)
  {
    sub_282E0(v6);
    if ((v19 & 1) != 0 && v9 == v15 && v31 == v14 && v10 == v16)
    {
      if (v29)
      {
        v20 = v30;
        v21 = 0xE100000000000000;
        if (v29 == 1)
        {
          v22 = 89;
          if (!v30)
          {
LABEL_30:
            v23 = 0xE200000000000000;
            v24 = 16718;
            if (v22 != 16718)
              goto LABEL_35;
            goto LABEL_33;
          }
        }
        else
        {
          v22 = 78;
          if (!v30)
            goto LABEL_30;
        }
      }
      else
      {
        v21 = 0xE200000000000000;
        v22 = 16718;
        v20 = v30;
        if (!v30)
          goto LABEL_30;
      }
      v23 = 0xE100000000000000;
      if (v20 == 1)
      {
        v24 = 89;
        if (v22 != 89)
          goto LABEL_35;
      }
      else
      {
        v24 = 78;
        if (v22 != 78)
          goto LABEL_35;
      }
LABEL_33:
      if (v21 == v23)
      {
        swift_bridgeObjectRelease_n(v21, 2);
LABEL_36:
        if (v11 == v17 && v28 == v27)
          sub_282E0(v26);
        return;
      }
LABEL_35:
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, v24, v23, 0);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v23);
      if ((v25 & 1) == 0)
        return;
      goto LABEL_36;
    }
  }
}

unint64_t sub_22D44()
{
  unint64_t result;

  result = qword_296CD0;
  if (!qword_296CD0)
  {
    result = swift_getWitnessTable(&unk_1F2F84, &type metadata for ReadingGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296CD0);
  }
  return result;
}

unint64_t sub_22D88()
{
  unint64_t result;

  result = qword_296CD8;
  if (!qword_296CD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DefaultReadingGoal, &type metadata for DefaultReadingGoal);
    atomic_store(result, (unint64_t *)&qword_296CD8);
  }
  return result;
}

unint64_t sub_22DCC()
{
  unint64_t result;

  result = qword_296CE0;
  if (!qword_296CE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DailyReadingGoalStatus, &type metadata for DailyReadingGoalStatus);
    atomic_store(result, (unint64_t *)&qword_296CE0);
  }
  return result;
}

unint64_t sub_22E10()
{
  unint64_t result;

  result = qword_296CF0;
  if (!qword_296CF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DefaultReadingGoal, &type metadata for DefaultReadingGoal);
    atomic_store(result, (unint64_t *)&qword_296CF0);
  }
  return result;
}

unint64_t sub_22E54()
{
  unint64_t result;

  result = qword_296CF8;
  if (!qword_296CF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DailyReadingGoalStatus, &type metadata for DailyReadingGoalStatus);
    atomic_store(result, (unint64_t *)&qword_296CF8);
  }
  return result;
}

unint64_t sub_22E9C()
{
  unint64_t result;

  result = qword_296D00;
  if (!qword_296D00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingGoalsData, &type metadata for ReadingGoalsData);
    atomic_store(result, (unint64_t *)&qword_296D00);
  }
  return result;
}

unint64_t sub_22EE4()
{
  unint64_t result;

  result = qword_296D08;
  if (!qword_296D08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingGoalsData, &type metadata for ReadingGoalsData);
    atomic_store(result, (unint64_t *)&qword_296D08);
  }
  return result;
}

__n128 initializeWithCopy for ReadingGoalsData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ReadingGoalsData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[73])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadingGoalsData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReadingGoalsData()
{
  return &type metadata for ReadingGoalsData;
}

uint64_t getEnumTagSinglePayload for ReadingGoalsData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadingGoalsData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_230D4 + 4 * byte_1F2DC0[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23108 + 4 * byte_1F2DBB[v4]))();
}

uint64_t sub_23108(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23110(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23118);
  return result;
}

uint64_t sub_23124(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2312CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23130(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23138(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingGoalsData.CodingKeys()
{
  return &type metadata for ReadingGoalsData.CodingKeys;
}

unint64_t sub_23158()
{
  unint64_t result;

  result = qword_296D10;
  if (!qword_296D10)
  {
    result = swift_getWitnessTable(&unk_1F2F5C, &type metadata for ReadingGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296D10);
  }
  return result;
}

unint64_t sub_231A0()
{
  unint64_t result;

  result = qword_296D18;
  if (!qword_296D18)
  {
    result = swift_getWitnessTable(&unk_1F2ECC, &type metadata for ReadingGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296D18);
  }
  return result;
}

unint64_t sub_231E8()
{
  unint64_t result;

  result = qword_296D20;
  if (!qword_296D20)
  {
    result = swift_getWitnessTable(&unk_1F2EF4, &type metadata for ReadingGoalsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296D20);
  }
  return result;
}

uint64_t sub_2322C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0xD000000000000012 && a2 == 0x800000000021ECE0)
  {
    v4 = 0x800000000021ECE0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021ECE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x800000000021ED00)
  {
    v6 = 0x800000000021ED00;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000000021ED00, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD000000000000018)
  {
    v7 = 0x800000000021ED20;
    if (a2 == 0x800000000021ED20)
      goto LABEL_17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000000021ED20, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000016)
  {
    v8 = 0x800000000021ED40;
    if (a2 == 0x800000000021ED40)
      goto LABEL_22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000000021ED40, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021ED60)
  {
    v9 = 0x800000000021ED60;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021ED60, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD000000000000016)
  {
    v10 = 0x800000000021ED80;
    if (a2 == 0x800000000021ED80)
      goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000000021ED80, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000000021EDA0)
  {
    v11 = 0x800000000021EDA0;
LABEL_39:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021EDA0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_39;
  }
  if (a1 == 0xD000000000000018)
  {
    v12 = 0x800000000021EDC0;
    if (a2 == 0x800000000021EDC0)
      goto LABEL_44;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000000021EDC0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x800000000021EDE0)
  {
    v13 = 0x800000000021EDE0;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x800000000021EDE0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0xD000000000000016)
  {
    v14 = 0x800000000021EE10;
    if (a2 == 0x800000000021EE10)
      goto LABEL_55;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000000021EE10, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x800000000021EE30)
  {
    swift_bridgeObjectRelease(0x800000000021EE30);
    return 10;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000000021EE30, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_23618(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_296D28, &enum case for SessionGroup.default(_:));
}

uint64_t static AccountEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295520, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296D28, a1);
}

uint64_t sub_23658(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_296D40, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AccountEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295528, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_296D40, a1);
}

uint64_t AccountEvent.accountData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296D58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AccountEvent.accountData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296D58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AccountEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AccountEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_296DE0, (uint64_t)&nominal type descriptor for AccountEvent);
}

uint64_t AccountEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AccountEvent.eventData.modify())()
{
  type metadata accessor for AccountEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AccountEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for AccountEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

void CellularToggleEvent.Model.cellularData.getter(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

uint64_t AccountEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AccountEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_296E78, (uint64_t)&nominal type descriptor for AccountEvent.Model);
}

uint64_t AccountEvent.Model.init(accountData:eventData:)@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for AccountEvent.Model(0) + 20);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_2391C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x44746E756F636361;
}

uint64_t sub_23964@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23988(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_23B3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_239B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_23B3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AccountEvent.Model.encode(to:)(_QWORD *a1)
{
  __int16 *v1;
  uint64_t v2;
  __int16 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  __int16 v20;

  v3 = v1;
  v5 = sub_71B4(&qword_296D60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_23B3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccountEvent.Model.CodingKeys, &type metadata for AccountEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_23B80();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for AccountData, v12);
  if (!v2)
  {
    v13 = (char *)v3 + *(int *)(type metadata accessor for AccountEvent.Model(0) + 20);
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23B3C()
{
  unint64_t result;

  result = qword_296D68;
  if (!qword_296D68)
  {
    result = swift_getWitnessTable(&unk_1F3184, &type metadata for AccountEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296D68);
  }
  return result;
}

unint64_t sub_23B80()
{
  unint64_t result;

  result = qword_296D70;
  if (!qword_296D70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountData, &type metadata for AccountData);
    atomic_store(result, (unint64_t *)&qword_296D70);
  }
  return result;
}

uint64_t AccountEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_296D78);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccountEvent.Model(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_23B3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccountEvent.Model.CodingKeys, &type metadata for AccountEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = v8;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_23E18();
    v19 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for AccountData, &v33, v31, &type metadata for AccountData, v18);
    v24 = v14;
    *(_WORD *)v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(char *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_23E5C(v22, v21);
  }
  return sub_7DAC(a1);
}

unint64_t sub_23E18()
{
  unint64_t result;

  result = qword_296D80;
  if (!qword_296D80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountData, &type metadata for AccountData);
    atomic_store(result, (unint64_t *)&qword_296D80);
  }
  return result;
}

uint64_t sub_23E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccountEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccountEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_23EB4(_QWORD *a1)
{
  return AccountEvent.Model.encode(to:)(a1);
}

uint64_t sub_23EC8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295520, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296D28, (uint64_t)sub_23618, a1);
}

uint64_t sub_23EEC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295528, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_296D40, (uint64_t)sub_23658, a1);
}

uint64_t sub_23F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for AccountEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_296D58);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for AccountEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_296D58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AccountEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for AccountEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AccountEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AccountEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_296D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_242C0);
}

uint64_t sub_242C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_296D58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AccountEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_24348);
}

uint64_t sub_24348(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_296D58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_243CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_24450(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_24450(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_296DF0)
  {
    v2 = sub_23E18();
    v3 = sub_23B80();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for AccountData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_296DF0);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AccountEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for EventData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AccountEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_WORD *initializeWithCopy for AccountEvent.Model(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for AccountEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_WORD *initializeWithTake for AccountEvent.Model(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_WORD *assignWithTake for AccountEvent.Model(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_246F8);
}

uint64_t sub_246F8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AccountEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_24778);
}

_BYTE *sub_24778(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_247E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1F30A8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccountEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248A8 + 4 * byte_1F2FDD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248DC + 4 * byte_1F2FD8[v4]))();
}

uint64_t sub_248DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248ECLL);
  return result;
}

uint64_t sub_248F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24900);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24904(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2490C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountEvent.Model.CodingKeys()
{
  return &type metadata for AccountEvent.Model.CodingKeys;
}

unint64_t sub_2492C()
{
  unint64_t result;

  result = qword_296EB0;
  if (!qword_296EB0)
  {
    result = swift_getWitnessTable(&unk_1F315C, &type metadata for AccountEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296EB0);
  }
  return result;
}

unint64_t sub_24974()
{
  unint64_t result;

  result = qword_296EB8;
  if (!qword_296EB8)
  {
    result = swift_getWitnessTable(&unk_1F30CC, &type metadata for AccountEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296EB8);
  }
  return result;
}

unint64_t sub_249BC()
{
  unint64_t result;

  result = qword_296EC0;
  if (!qword_296EC0)
  {
    result = swift_getWitnessTable(&unk_1F30F4, &type metadata for AccountEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296EC0);
  }
  return result;
}

uint64_t sub_24A00(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x44746E756F636361 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E756F636361, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_24B14(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24B64(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24C08 + 4 * byte_1F31DA[a2]))(0x6C61626F6C67);
}

uint64_t sub_24C08(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C61626F6C67 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C61626F6C67, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_24CFC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000070;
  v3 = 0x6F72446563697270;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 1701147238;
    else
      v5 = 0x6E776F6E6B6E75;
    if (v4 == 1)
      v6 = 0xE400000000000000;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6F72446563697270;
  v6 = 0xE900000000000070;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 1701147238;
    else
      v3 = 0x6E776F6E6B6E75;
    if (v7 == 1)
      v2 = 0xE400000000000000;
    else
      v2 = 0xE700000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_24E04(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24E54(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24EE4 + 4 * byte_1F31E6[a2]))(0x696C43656C746974);
}

uint64_t sub_24EE4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x696C43656C746974 && v1 == 0xEA00000000006B63)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x696C43656C746974, 0xEA00000000006B63, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006B63);
  return v2 & 1;
}

void sub_24FC4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_25030(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_25134 + 4 * byte_1F31F7[a2]))(0x6D61536F69647561);
}

uint64_t sub_25134(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D61536F69647561 && v1 == 0xEB00000000656C70)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D61536F69647561, 0xEB00000000656C70, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000656C70);
  return v2 & 1;
}

uint64_t sub_252B4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x796C746E65636572;
  else
    v3 = 0x6553746E65636572;
  if (v2)
    v4 = 0xEE00736568637261;
  else
    v4 = 0xEE00646577656956;
  if ((a2 & 1) != 0)
    v5 = 0x796C746E65636572;
  else
    v5 = 0x6553746E65636572;
  if ((a2 & 1) != 0)
    v6 = 0xEE00646577656956;
  else
    v6 = 0xEE00736568637261;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_25370(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_253C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_25434 + 4 * byte_1F3207[a2]))(7368564);
}

uint64_t sub_25434(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 7368564 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 7368564, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

void sub_254F0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_25540(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_255F0 + 4 * byte_1F3213[a2]))(0xD000000000000015);
}

uint64_t sub_255F0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x800000000021DB70;
  if (a1 == 0xD000000000000015 && v1 == 0x800000000021DB70)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000015, 0x800000000021DB70, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_256F8(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x434F546D6F7266;
    else
      v4 = 0x646165526D6F7266;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xEB00000000676E69;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x434F546D6F7266;
      else
        v2 = 0x646165526D6F7266;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xEB00000000676E69;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_25820(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_25870(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_258DC + 4 * byte_1F321F[a2]))(0x746E65636572);
}

uint64_t sub_258DC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E65636572 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E65636572, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_25990(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x64726177726F66;
    else
      v4 = 1801675106;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE400000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x64726177726F66;
      else
        v2 = 1801675106;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE400000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_25A98(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_25AF0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_25B54 + 4 * byte_1F3228[a2]))(0x61546E6F74747562);
}

uint64_t sub_25B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v3 = a2 + 9;
  if (a1 == 0x61546E6F74747562 && v2 == v3)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, 0x61546E6F74747562, a2 + 9, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_25BEC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_25C3C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_25CF0 + 4 * byte_1F3232[a2]))(0x6F6F527265707573);
}

uint64_t sub_25CF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F6F527265707573 && v1 == 0xE90000000000006DLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6F6F527265707573, 0xE90000000000006DLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE90000000000006DLL);
  return v2 & 1;
}

void sub_25DF4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_25E44(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_25EE4 + 4 * byte_1F323D[a2]))(0x65536E497478656ELL);
}

uint64_t sub_25EE4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65536E497478656ELL && v1 == 0xEC00000073656972)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65536E497478656ELL, 0xEC00000073656972, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000073656972);
  return v2 & 1;
}

void sub_25FCC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2601C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2608C + 4 * byte_1F3246[a2]))(0x6553656369766564);
}

uint64_t sub_2608C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6553656369766564 && v1 == 0xEE0073676E697474)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6553656369766564, 0xEE0073676E697474, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEE0073676E697474);
  return v2 & 1;
}

uint64_t sub_26140(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x47676E6964616572;
    else
      v4 = 0x616F47736B6F6F62;
    if (v3 == 1)
      v5 = 0xEB000000006C616FLL;
    else
      v5 = 0xE90000000000006CLL;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x47676E6964616572;
      else
        v2 = 0x616F47736B6F6F62;
      if (v6 == 1)
        v7 = 0xEB000000006C616FLL;
      else
        v7 = 0xE90000000000006CLL;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_26270(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_262C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_26374 + 4 * byte_1F3251[a2]))(0x4E676E6964616572);
}

uint64_t sub_26374(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4E676E6964616572 && v1 == 0xEA0000000000776FLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x4E676E6964616572, 0xEA0000000000776FLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA0000000000776FLL);
  return v2 & 1;
}

uint64_t sub_26480(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000073656972;
  v3 = 0x65536E497478656ELL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65536E4965726F6DLL;
    else
      v5 = 0x6E776F6E6B6E75;
    if (v4 == 1)
      v6 = 0xEC00000073656972;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_14;
  }
  else
  {
    v5 = 0x65536E497478656ELL;
    v6 = 0xEC00000073656972;
    v7 = a2;
    if (!a2)
      goto LABEL_14;
  }
  if (v7 == 1)
    v3 = 0x65536E4965726F6DLL;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v7 != 1)
    v2 = 0xE700000000000000;
LABEL_14:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_26598(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_265F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_26678 + 4 * byte_1F325D[a2]))(0x69646E6563736564);
}

uint64_t sub_26678(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x69646E6563736564 && v1 == 0xEA0000000000676ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x69646E6563736564, 0xEA0000000000676ELL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA0000000000676ELL);
  return v2 & 1;
}

void sub_26748(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_26798(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_26808 + 4 * byte_1F3268[a2]))(6647407);
}

uint64_t sub_26808(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6647407 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6647407, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

uint64_t sub_268C8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7070617369446E6FLL;
  else
    v3 = 0x7261657070416E6FLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEB00000000726165;
  if ((a2 & 1) != 0)
    v5 = 0x7070617369446E6FLL;
  else
    v5 = 0x7261657070416E6FLL;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000726165;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_26974(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0xD000000000000011;
  if (v2)
    v4 = 0x800000000021E0A0;
  else
    v4 = 0x800000000021E0C0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000014;
  else
    v5 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v6 = 0x800000000021E0C0;
  else
    v6 = 0x800000000021E0A0;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_26A1C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6564646968;
  else
    v3 = 0x656C6269736976;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6E6564646968;
  else
    v5 = 0x656C6269736976;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_26ABC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_26B20(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_26B80 + 4 * byte_1F3272[a2]))(0x656C626967696C65);
}

uint64_t sub_26B80(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C626967696C65 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656C626967696C65, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

void sub_26C28(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_26C78(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_26D14 + 4 * byte_1F327D[a2]))(1802465122);
}

uint64_t sub_26D14(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1802465122 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1802465122, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_26E08(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_26E58(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_26F14 + 4 * byte_1F328C[a2]))(0x746E65636572);
}

uint64_t sub_26F14(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E65636572 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E65636572, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_27028(uint64_t a1, uint64_t a2)
{
  return sub_2ABBC(a1, a2, CellularRadioAccessTechnology.rawValue.getter);
}

void sub_27034(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_27084(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_27130 + 4 * byte_1F329B[a2]))(0x746E65636572);
}

uint64_t sub_27130(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E65636572 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E65636572, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_27248(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E4974706FLL;
    else
      v4 = 0x74754F74706FLL;
    if (v3 == 1)
      v5 = 0xE500000000000000;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6E4974706FLL;
      else
        v2 = 0x74754F74706FLL;
      if (v6 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_27350(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6573616863727570;
    else
      v4 = 0xD000000000000012;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0x800000000021D780;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6573616863727570;
      else
        v2 = 0xD000000000000012;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0x800000000021D780;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_27468(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x656C676E6973;
    else
      v4 = 2037277037;
    if (v3 == 1)
      v5 = 0xE600000000000000;
    else
      v5 = 0xE400000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x656C676E6973;
      else
        v2 = 2037277037;
      if (v6 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE400000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_27568(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_275B8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_27694 + 4 * byte_1F32A9[a2]))(0x546567617373656DLL);
}

uint64_t sub_27694(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x546567617373656DLL && v1 == 0xEA00000000007061)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x546567617373656DLL, 0xEA00000000007061, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000007061);
  return v2 & 1;
}

uint64_t sub_277BC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000012;
    else
      v4 = 0xD00000000000001ALL;
    if (v3 == 1)
      v5 = 0x800000000021E3F0;
    else
      v5 = 0x800000000021E410;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0xD000000000000012;
      else
        v2 = 0xD00000000000001ALL;
      if (v6 == 1)
        v7 = 0x800000000021E3F0;
      else
        v7 = 0x800000000021E410;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_278C4(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6375646F72506773;
    else
      v4 = 0x6F725047536E6F6ELL;
    if (v3 == 1)
      v5 = 0xEC0000006E6F6974;
    else
      v5 = 0xEF6E6F6974637564;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6375646F72506773;
      else
        v2 = 0x6F725047536E6F6ELL;
      if (v6 == 1)
        v7 = 0xEC0000006E6F6974;
      else
        v7 = 0xEF6E6F6974637564;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_27A04(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  char v7;

  v2 = 0xEC000000656C6261;
  v3 = 0x6863616552746F6ELL;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x800000000021E180;
    else
      v4 = 0x800000000021E1A0;
    v5 = 0xD000000000000010;
    v6 = a2;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v5 = 0x6863616552746F6ELL;
  v4 = 0xEC000000656C6261;
  v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1)
      v2 = 0x800000000021E180;
    else
      v2 = 0x800000000021E1A0;
    v3 = 0xD000000000000010;
  }
LABEL_10:
  if (v5 == v3 && v4 == v2)
  {
    v7 = 1;
    v2 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  return v7 & 1;
}

void sub_27B0C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_27B5C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_27C18 + 4 * byte_1F32B8[a2]))(0x7070416E69);
}

uint64_t sub_27C18(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7070416E69 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7070416E69, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_27D34(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_27D84(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_27E38 + 4 * byte_1F32C8[a2]))(0x656369766564);
}

uint64_t sub_27E38(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656369766564 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656369766564, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_27F4C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_27F9C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_28014 + 4 * byte_1F32D6[a2]))(28271);
}

uint64_t sub_28014(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 28271 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 28271, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

uint64_t sub_280DC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000012;
    else
      v4 = 0x6F4465766F6D6572;
    if (v3 == 1)
      v5 = 0x800000000021E4F0;
    else
      v5 = 0xEE0064616F6C6E77;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0xD000000000000012;
      else
        v2 = 0x6F4465766F6D6572;
      if (v6 == 1)
        v7 = 0x800000000021E4F0;
      else
        v7 = 0xEE0064616F6C6E77;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_28210(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 89;
    else
      v2 = 78;
    v3 = 0xE100000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 89;
      else
        v5 = 78;
      v6 = 0xE100000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE200000000000000;
    v2 = 16718;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE200000000000000;
  v5 = 16718;
  if (v2 != 16718)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v5, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v3;
LABEL_16:
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_282E0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_28318(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2838C + 4 * byte_1F32E0[a2]))(0x64656863616572);
}

uint64_t sub_2838C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64656863616572 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64656863616572, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

void sub_28440(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_28490(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_28510 + 4 * byte_1F32E9[a2]))(0x7972617262696CLL);
}

uint64_t sub_28510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x7972617262696CLL && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7972617262696CLL, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_285DC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x726F727265;
    else
      v4 = 0x64656C65636E6163;
    if (v3 == 1)
      v5 = 0xE500000000000000;
    else
      v5 = 0xE800000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x726F727265;
      else
        v2 = 0x64656C65636E6163;
      if (v6 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE800000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_286EC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2873C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_287B8 + 4 * byte_1F32F2[a2]))(0x756F72676B636162);
}

uint64_t sub_287B8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x756F72676B636162 && v1 == 0xEC0000006465646ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x756F72676B636162, 0xEC0000006465646ELL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC0000006465646ELL);
  return v2 & 1;
}

uint64_t sub_28878(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x65756E69746E6F63;
    else
      v4 = 0x616E614D61746164;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0xEA00000000006567;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x65756E69746E6F63;
      else
        v2 = 0x616E614D61746164;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xEA00000000006567;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_28998(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 1802465122;
    else
      v4 = 0x6F6F626F69647561;
    if (v3 == 1)
      v5 = 0xE400000000000000;
    else
      v5 = 0xE90000000000006BLL;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 1802465122;
      else
        v2 = 0x6F6F626F69647561;
      if (v6 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE90000000000006BLL;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_28AA8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_28AF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_28BD4 + 4 * byte_1F3301[a2]))(0x6574696877);
}

uint64_t sub_28BD4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6574696877 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6574696877, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_28D28(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x6564696C73;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1819440483;
    else
      v3 = 1701736302;
    v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 1819440483;
      else
        v2 = 1701736302;
      v6 = 0xE400000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6564696C73;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE500000000000000;
  if (v3 != 0x6564696C73)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_28E18(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x7469617274726F70;
    else
      v4 = 0x70616373646E616CLL;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0xE900000000000065;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x7469617274726F70;
      else
        v2 = 0x70616373646E616CLL;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE900000000000065;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_28F38(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x6E776F6E6B6E75;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1684632167;
    else
      v3 = 1953720684;
    v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 1684632167;
      else
        v2 = 1953720684;
      v6 = 0xE400000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6E776F6E6B6E75;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE700000000000000;
  if (v3 != 0x6E776F6E6B6E75)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_29030(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_29080(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_290CC + 4 * byte_1F3310[a2]))(24945);
}

uint64_t sub_290CC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 24945 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 24945, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

void sub_2915C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_291AC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_29218 + 4 * byte_1F3319[a2]))(0x656D6F636C6577);
}

uint64_t sub_29218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x656D6F636C6577 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656D6F636C6577, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_292CC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 1885956979;
    else
      v4 = 0x65756E69746E6F63;
    if (v3 == 1)
      v5 = 0xE400000000000000;
    else
      v5 = 0xE800000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 1885956979;
      else
        v2 = 0x65756E69746E6F63;
      if (v6 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE800000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_293D4(uint64_t a1, uint64_t a2)
{
  return sub_2ABBC(a1, a2, OdpSuggestionType.rawValue.getter);
}

uint64_t sub_293E0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x436572756C696166;
    else
      v4 = 0x6F436572756C6166;
    if (v3 == 1)
      v5 = 0xEC0000003165646FLL;
    else
      v5 = 0xEB00000000326564;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x436572756C696166;
      else
        v2 = 0x6F436572756C6166;
      if (v6 == 1)
        v7 = 0xEC0000003165646FLL;
      else
        v7 = 0xEB00000000326564;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_29518(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E49676F6CLL;
    else
      v4 = 0x74754F676F6CLL;
    if (v3 == 1)
      v5 = 0xE500000000000000;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6E49676F6CLL;
      else
        v2 = 0x74754F676F6CLL;
      if (v6 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_29620(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_29670(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_29748 + 4 * byte_1F3326[a2]))(0x7542686372616573);
}

uint64_t sub_29748(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7542686372616573 && v1 == 0xEF7061546E6F7474)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7542686372616573, 0xEF7061546E6F7474, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF7061546E6F7474);
  return v2 & 1;
}

uint64_t sub_2986C(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x6E776F6E6B6E75;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6C616E7265746E69;
    else
      v3 = 0x6C616E7265747865;
    v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 0x6C616E7265746E69;
      else
        v2 = 0x6C616E7265747865;
      v6 = 0xE800000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6E776F6E6B6E75;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE700000000000000;
  if (v3 != 0x6E776F6E6B6E75)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_2995C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_299AC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_29A0C + 4 * byte_1F3332[a2]))(1868785010);
}

uint64_t sub_29A0C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1868785010 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1868785010, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_29AB0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_29B14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_29B74 + 4 * byte_1F333A[a2]))(0x6573616863727570);
}

uint64_t sub_29B74(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6573616863727570 && v1 == 0xE900000000000064)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6573616863727570, 0xE900000000000064, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000064);
  return v2 & 1;
}

uint64_t sub_29C1C(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x73736563637573;
    else
      v4 = 0x6C65636E6163;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x73736563637573;
      else
        v2 = 0x6C65636E6163;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_29D2C(uint64_t a1, uint64_t a2)
{
  return sub_2ABBC(a1, a2, DialogActionType.rawValue.getter);
}

void sub_29D38(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_29D88(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_29E00 + 4 * byte_1F3342[a2]))(0x75426C65636E6163);
}

uint64_t sub_29E00(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x75426C65636E6163 && v1 == 0xEF7061546E6F7474)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x75426C65636E6163, 0xEF7061546E6F7474, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF7061546E6F7474);
  return v2 & 1;
}

void sub_29EBC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_29F0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_29F74 + 4 * byte_1F334A[a2]))(0x6572616873);
}

uint64_t sub_29F74(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6572616873 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6572616873, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_2A020(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x654D6E6F69746361;
    else
      v4 = 6516596;
    if (v3 == 1)
      v5 = 0xEA0000000000756ELL;
    else
      v5 = 0xE300000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x654D6E6F69746361;
      else
        v2 = 6516596;
      if (v6 == 1)
        v7 = 0xEA0000000000756ELL;
      else
        v7 = 0xE300000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_2A130(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2A180(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2A1DC + 4 * byte_1F3352[a2]))(16718);
}

uint64_t sub_2A1DC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 16718 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 16718, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

void sub_2A280(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2A2D0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2A338 + 4 * byte_1F335A[a2]))(0x676E69746172);
}

uint64_t sub_2A338(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x676E69746172 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x676E69746172, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_2A3E4(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x64656C62616E65;
    else
      v4 = 0x64656C6261736964;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE800000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x64656C62616E65;
      else
        v2 = 0x64656C6261736964;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE800000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_2A4FC(uint64_t a1, uint64_t a2)
{
  return sub_2ABBC(a1, a2, FrameName.rawValue.getter);
}

void sub_2A508(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2A56C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2A604 + 4 * byte_1F3364[a2]))(0x6552736569726573);
}

uint64_t sub_2A604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6552736569726573 && v2 == v1)
  {
    v3 = 1;
    v1 = v2;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, 0x6552736569726573, v1, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return v3 & 1;
}

uint64_t sub_2A6E8(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E6F43664F646E65;
    else
      v4 = 0x6F6F42664F646E65;
    if (v3 == 1)
      v5 = 0xEC000000746E6574;
    else
      v5 = 0xE90000000000006BLL;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6E6F43664F646E65;
      else
        v2 = 0x6F6F42664F646E65;
      if (v6 == 1)
        v7 = 0xEC000000746E6574;
      else
        v7 = 0xE90000000000006BLL;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_2A818(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2A868(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2A940 + 4 * byte_1F3372[a2]))(0x6573616863727570);
}

uint64_t sub_2A940(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6573616863727570 && v1 == 0xE900000000000064)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6573616863727570, 0xE900000000000064, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000064);
  return v2 & 1;
}

uint64_t sub_2AA78(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6143746964657263;
    else
      v4 = 0x6974706D65646572;
    if (v3 == 1)
      v5 = 0xEA00000000006472;
    else
      v5 = 0xEE0065646F436E6FLL;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6143746964657263;
      else
        v2 = 0x6974706D65646572;
      if (v6 == 1)
        v7 = 0xEA00000000006472;
      else
        v7 = 0xEE0065646F436E6FLL;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_2ABB0(uint64_t a1, uint64_t a2)
{
  return sub_2ABBC(a1, a2, LocationType.rawValue.getter);
}

uint64_t sub_2ABBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  v4 = a3();
  v6 = v5;
  v7 = a3();
  if (v4 == v7 && v6 == v8)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

void sub_2AC54(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2ACA4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2AD90 + 4 * byte_1F3382[a2]))(0x6C616E7265747865);
}

uint64_t sub_2AD90(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C616E7265747865 && v1 == 0xEC0000006B6E694CLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C616E7265747865, 0xEC0000006B6E694CLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC0000006B6E694CLL);
  return v2 & 1;
}

uint64_t sub_2AEDC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 28271;
    else
      v4 = 6710895;
    if (v3 == 1)
      v5 = 0xE200000000000000;
    else
      v5 = 0xE300000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 28271;
      else
        v2 = 6710895;
      if (v6 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE300000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_2AFCC(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x6E776F6E6B6E75;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1684828003;
    else
      v3 = 1836212599;
    v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 1684828003;
      else
        v2 = 1836212599;
      v6 = 0xE400000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6E776F6E6B6E75;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE700000000000000;
  if (v3 != 0x6E776F6E6B6E75)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_2B0C4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2B114(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2B1B4 + 4 * byte_1F3391[a2]))(0x68736F6F7773);
}

uint64_t sub_2B1B4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x68736F6F7773 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x68736F6F7773, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_2B2AC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2B2FC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2B378 + 4 * byte_1F339D[a2]))(0x68736F6F7773);
}

uint64_t sub_2B378(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x68736F6F7773 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x68736F6F7773, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_2B43C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2B4A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2B550 + 4 * byte_1F33A9[a2]))(0x656C62627562);
}

uint64_t sub_2B550(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C62627562 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656C62627562, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_2B65C(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 7562617;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 28526;
    else
      v4 = 0x6E776F6E6B6E75;
    if (v3 == 1)
      v5 = 0xE200000000000000;
    else
      v5 = 0xE700000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 28526;
      else
        v2 = 0x6E776F6E6B6E75;
      if (v6 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE700000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE300000000000000;
    v4 = 7562617;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v4 != 7562617)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_2B74C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2B79C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2B804 + 4 * byte_1F33B4[a2]))(7630194);
}

uint64_t sub_2B804(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 7630194 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 7630194, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

uint64_t sub_2B8B4(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6E776F6E6B6E75;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x756F4265726F7473;
    else
      v4 = 0x65726F74536E6F6ELL;
    if (v3 == 1)
      v5 = 0xEB00000000746867;
    else
      v5 = 0xEE00746867756F42;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x756F4265726F7473;
      else
        v2 = 0x65726F74536E6F6ELL;
      if (v6 == 1)
        v7 = 0xEB00000000746867;
      else
        v7 = 0xEE00746867756F42;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6E776F6E6B6E75;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_2B9F4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2BA4C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2BAB4 + 4 * byte_1F33BC[a2]))(0x6465726564726FLL);
}

uint64_t sub_2BAB4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6465726564726FLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6465726564726FLL, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

uint64_t sub_2BB60(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x6E776F6E6B6E75;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x64756F6C4369;
    else
      v3 = 0x73656E755469;
    v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 0x64756F6C4369;
      else
        v2 = 0x73656E755469;
      v6 = 0xE600000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6E776F6E6B6E75;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE700000000000000;
  if (v3 != 0x6E776F6E6B6E75)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_2BC68(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2BCCC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2BD8C + 4 * byte_1F33C7[a2]))(0x65536E497478656ELL);
}

uint64_t sub_2BD8C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65536E497478656ELL && v1 == 0xEC00000073656972)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65536E497478656ELL, 0xEC00000073656972, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000073656972);
  return v2 & 1;
}

void sub_2BEA0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2BEE0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2BF4C + 4 * byte_1F33D2[a2]))(0x6574656C706D6F63);
}

uint64_t sub_2BF4C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6574656C706D6F63 && v1 == 0xE900000000000064)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6574656C706D6F63, 0xE900000000000064, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000064);
  return v2 & 1;
}

void sub_2BFFC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2C04C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2C188 + 4 * byte_1F33E0[a2]))(0xD000000000000013);
}

uint64_t sub_2C188(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x800000000021E7F0;
  if (a1 == 0xD000000000000013 && v1 == 0x800000000021E7F0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000013, 0x800000000021E7F0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void static SearchEndData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2C374@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2C3E8 + 4 * byte_1F33EE[a1]))(0x75426C65636E6163);
}

uint64_t sub_2C3E8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x75426C65636E6163 && v1 == 0xEF7061546E6F7474)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x75426C65636E6163, 0xEF7061546E6F7474, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF7061546E6F7474);
  return v2 & 1;
}

uint64_t sub_2C4A4()
{
  return 0x6E45686372616573;
}

uint64_t sub_2C4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E45686372616573 && a2 == 0xEF646F6874654D64)
  {
    result = swift_bridgeObjectRelease(0xEF646F6874654D64);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E45686372616573, 0xEF646F6874654D64, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_2C580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2C81C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2C5A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2C81C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchEndData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_296EC8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_2C81C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchEndData.CodingKeys, &type metadata for SearchEndData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_2C860();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for SearchEndMethod, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SearchEndData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_296EE0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_2C81C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchEndData.CodingKeys, &type metadata for SearchEndData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_2C8A4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for SearchEndMethod, v13, v5, &type metadata for SearchEndMethod, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

void sub_2C7E8(char *a1)
{
  sub_29D38(*a1);
}

uint64_t sub_2C7F4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SearchEndData.init(from:)(a1, a2);
}

uint64_t sub_2C808(_QWORD *a1)
{
  return SearchEndData.encode(to:)(a1);
}

unint64_t sub_2C81C()
{
  unint64_t result;

  result = qword_296ED0;
  if (!qword_296ED0)
  {
    result = swift_getWitnessTable(&unk_1F3598, &type metadata for SearchEndData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296ED0);
  }
  return result;
}

unint64_t sub_2C860()
{
  unint64_t result;

  result = qword_296ED8;
  if (!qword_296ED8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchEndMethod, &type metadata for SearchEndMethod);
    atomic_store(result, (unint64_t *)&qword_296ED8);
  }
  return result;
}

unint64_t sub_2C8A4()
{
  unint64_t result;

  result = qword_296EE8;
  if (!qword_296EE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchEndMethod, &type metadata for SearchEndMethod);
    atomic_store(result, (unint64_t *)&qword_296EE8);
  }
  return result;
}

unint64_t sub_2C8EC()
{
  unint64_t result;

  result = qword_296EF0;
  if (!qword_296EF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchEndData, &type metadata for SearchEndData);
    atomic_store(result, (unint64_t *)&qword_296EF0);
  }
  return result;
}

unint64_t sub_2C934()
{
  unint64_t result;

  result = qword_296EF8;
  if (!qword_296EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchEndData, &type metadata for SearchEndData);
    atomic_store(result, (unint64_t *)&qword_296EF8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchEndData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2C9C4 + 4 * byte_1F33F7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2C9F8 + 4 * byte_1F33F2[v4]))();
}

uint64_t sub_2C9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2CA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2CA08);
  return result;
}

uint64_t sub_2CA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2CA1CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2CA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2CA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchEndData()
{
  return &type metadata for SearchEndData;
}

uint64_t storeEnumTagSinglePayload for SearchEndData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2CA84 + 4 * byte_1F33FC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2CAA4 + 4 * byte_1F3401[v4]))();
}

_BYTE *sub_2CA84(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2CAA4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2CAAC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2CAB4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2CABC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2CAC4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SearchEndData.CodingKeys()
{
  return &type metadata for SearchEndData.CodingKeys;
}

unint64_t sub_2CAE4()
{
  unint64_t result;

  result = qword_296F00;
  if (!qword_296F00)
  {
    result = swift_getWitnessTable(&unk_1F3570, &type metadata for SearchEndData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296F00);
  }
  return result;
}

unint64_t sub_2CB2C()
{
  unint64_t result;

  result = qword_296F08;
  if (!qword_296F08)
  {
    result = swift_getWitnessTable(&unk_1F34E0, &type metadata for SearchEndData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296F08);
  }
  return result;
}

unint64_t sub_2CB74()
{
  unint64_t result;

  result = qword_296F10;
  if (!qword_296F10)
  {
    result = swift_getWitnessTable(&unk_1F3508, &type metadata for SearchEndData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296F10);
  }
  return result;
}

BookAnalytics::MangaFlag_optional __swiftcall MangaFlag.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::MangaFlag_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2665F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t MangaFlag.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 28526;
  if (*v0 != 1)
    v1 = 0x6E776F6E6B6E75;
  if (*v0)
    return v1;
  else
    return 7562617;
}

uint64_t sub_2CC58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2B65C(*a1, *a2);
}

unint64_t sub_2CC68()
{
  unint64_t result;

  result = qword_296F18;
  if (!qword_296F18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MangaFlag, &type metadata for MangaFlag);
    atomic_store(result, (unint64_t *)&qword_296F18);
  }
  return result;
}

Swift::Int sub_2CCAC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE200000000000000;
  v3 = 28526;
  if (v1 != 1)
  {
    v3 = 0x6E776F6E6B6E75;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 7562617;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE300000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_2CD38(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE200000000000000;
  v3 = 28526;
  if (*v1 != 1)
  {
    v3 = 0x6E776F6E6B6E75;
    v2 = 0xE700000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 7562617;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE300000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_2CDA0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE200000000000000;
  v4 = 28526;
  if (v2 != 1)
  {
    v4 = 0x6E776F6E6B6E75;
    v3 = 0xE700000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 7562617;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE300000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::MangaFlag_optional sub_2CE28(Swift::String *a1)
{
  return MangaFlag.init(rawValue:)(*a1);
}

void sub_2CE34(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0xE200000000000000;
  v5 = 28526;
  if (v2 != 1)
  {
    v5 = 0x6E776F6E6B6E75;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 7562617;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_2CE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2CFF4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_2CEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2CFF4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for MangaFlag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2CF74 + 4 * byte_1F35ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2CFA8 + 4 * byte_1F35E8[v4]))();
}

uint64_t sub_2CFA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2CFB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2CFB8);
  return result;
}

uint64_t sub_2CFC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2CFCCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2CFD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2CFD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MangaFlag()
{
  return &type metadata for MangaFlag;
}

unint64_t sub_2CFF4()
{
  unint64_t result;

  result = qword_296F20;
  if (!qword_296F20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MangaFlag, &type metadata for MangaFlag);
    atomic_store(result, (unint64_t *)&qword_296F20);
  }
  return result;
}

uint64_t sub_2D038(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_296F28, &enum case for SessionGroup.default(_:));
}

uint64_t static SectionExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295530, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296F28, a1);
}

uint64_t sub_2D078(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_296F40, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static SectionExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295538, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_296F40, a1);
}

uint64_t FlowcaseExposureEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FlowcaseExposureEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t SectionExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SectionExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_297030, (uint64_t)&nominal type descriptor for SectionExposureEvent);
}

uint64_t SectionExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.linkData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.readingGoalsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296F58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.readingGoalsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296F58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.readingGoalsData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.booksGoalsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296F60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.booksGoalsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296F60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.booksGoalsData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.pageData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.upSellData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.onDevicePersonalizationPropertyData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_296F70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.onDevicePersonalizationPropertyData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_296F70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.onDevicePersonalizationPropertyData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.seriesData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.suggestionData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 52);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 52);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.eventData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 56);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent(0) + 56);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SectionExposureEvent.timedData.modify())()
{
  type metadata accessor for SectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t SectionExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for SectionExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v8, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v8, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v8, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v8, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v8, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
  v24 = a1 + v4[14];
  v25 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v2, v25);
}

uint64_t FlowcaseExposureEvent.Model.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_DWORD *)(v1 + 4);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 80);
  v11 = *(_DWORD *)(v1 + 88);
  v12 = *(_BYTE *)(v1 + 92);
  v13 = *(_QWORD *)(v1 + 96);
  v14 = *(_QWORD *)(v1 + 104);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_DWORD *)(a1 + 4) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  v15 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 80) = v10;
  *(_DWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 92) = v12;
  v16 = v15;
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return swift_bridgeObjectRetain(v16);
}

_QWORD *SectionExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_OWORD *)(v1 + 224);
  v3 = *(_OWORD *)(v1 + 192);
  v19 = *(_OWORD *)(v1 + 208);
  v20 = v2;
  v4 = *(_OWORD *)(v1 + 224);
  v21 = *(_OWORD *)(v1 + 240);
  v5 = *(_OWORD *)(v1 + 160);
  v7 = *(_OWORD *)(v1 + 128);
  v15 = *(_OWORD *)(v1 + 144);
  v6 = v15;
  v16 = v5;
  v8 = *(_OWORD *)(v1 + 160);
  v9 = *(_OWORD *)(v1 + 192);
  v17 = *(_OWORD *)(v1 + 176);
  v10 = v17;
  v18 = v9;
  v11 = *(_OWORD *)(v1 + 128);
  v14[0] = *(_OWORD *)(v1 + 112);
  v12 = v14[0];
  v14[1] = v11;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 240);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v3;
  v22 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 256);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v7;
  return sub_2DC18(v14);
}

_QWORD *sub_2DC18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[12];
  v8 = a1[14];
  v9 = a1[16];
  swift_bridgeObjectRetain(a1[18]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

__n128 SectionExposureEvent.Model.readingGoalsData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 328);
  v3 = *(_BYTE *)(v1 + 336);
  v4 = *(_OWORD *)(v1 + 280);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 264);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 296);
  v6 = *(_OWORD *)(v1 + 312);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v2;
  *(_BYTE *)(a1 + 72) = v3;
  return result;
}

__n128 SectionExposureEvent.Model.booksGoalsData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 376);
  result = *(__n128 *)(v1 + 344);
  v4 = *(_OWORD *)(v1 + 360);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t SectionExposureEvent.Model.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 408);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 384);
  v3 = *(_OWORD *)(v1 + 392);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t SectionExposureEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 432);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 416);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

__n128 SectionExposureEvent.Model.onDevicePersonalizationPropertyData.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 456);
  v3 = *(_BYTE *)(v1 + 464);
  result = *(__n128 *)(v1 + 440);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

uint64_t SectionExposureEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[59];
  v3 = v1[60];
  v4 = v1[61];
  v5 = v1[62];
  v6 = v1[63];
  v7 = v1[64];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

void SectionExposureEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 520);
}

uint64_t SectionExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent.Model(0) + 52);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SectionExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_297110, (uint64_t)&nominal type descriptor for SectionExposureEvent.Model);
}

uint64_t SectionExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SectionExposureEvent.Model(0) + 56);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SectionExposureEvent.Model.init(sectionData:linkData:readingGoalsData:booksGoalsData:pageData:upSellData:onDevicePersonalizationPropertyData:seriesData:suggestionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>, char *a10, uint64_t a11, uint64_t a12)
{
  int v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v13 = *(_DWORD *)(a1 + 4);
  v14 = (_OWORD *)(a9 + 264);
  v15 = *(_OWORD *)(a1 + 8);
  v16 = *(_OWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_DWORD *)(a1 + 88);
  v20 = *(_BYTE *)(a1 + 92);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 104);
  v23 = *(_QWORD *)(a3 + 64);
  v24 = *(_BYTE *)(a3 + 72);
  v25 = *(_BYTE *)(a4 + 32);
  v26 = *(_QWORD *)(a5 + 16);
  v27 = *(_QWORD *)(a5 + 24);
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(_QWORD *)(a7 + 16);
  v30 = *(_BYTE *)(a7 + 24);
  v31 = *a10;
  *(_BYTE *)a9 = *(_BYTE *)a1;
  *(_DWORD *)(a9 + 4) = v13;
  *(_OWORD *)(a9 + 8) = v15;
  *(_OWORD *)(a9 + 24) = v16;
  *(_QWORD *)(a9 + 40) = v17;
  *(_QWORD *)(a9 + 48) = v18;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a9 + 72) = *(_OWORD *)(a1 + 72);
  *(_DWORD *)(a9 + 88) = v19;
  *(_BYTE *)(a9 + 92) = v20;
  *(_QWORD *)(a9 + 96) = v21;
  *(_QWORD *)(a9 + 104) = v22;
  v32 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a9 + 112) = *(_OWORD *)a2;
  *(_OWORD *)(a9 + 128) = v32;
  v33 = *(_OWORD *)(a2 + 32);
  v34 = *(_OWORD *)(a2 + 48);
  v35 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a9 + 176) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a9 + 192) = v35;
  *(_OWORD *)(a9 + 144) = v33;
  *(_OWORD *)(a9 + 160) = v34;
  v36 = *(_OWORD *)(a2 + 96);
  v37 = *(_OWORD *)(a2 + 112);
  v38 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a9 + 256) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a9 + 224) = v37;
  *(_OWORD *)(a9 + 240) = v38;
  *(_OWORD *)(a9 + 208) = v36;
  v39 = *(_OWORD *)(a3 + 16);
  *v14 = *(_OWORD *)a3;
  v14[1] = v39;
  v40 = *(_OWORD *)(a3 + 48);
  v14[2] = *(_OWORD *)(a3 + 32);
  v14[3] = v40;
  *(_QWORD *)(a9 + 328) = v23;
  *(_BYTE *)(a9 + 336) = v24;
  v41 = *(_OWORD *)(a4 + 16);
  v14[5] = *(_OWORD *)a4;
  v14[6] = v41;
  *(_BYTE *)(a9 + 376) = v25;
  *(_OWORD *)(a9 + 384) = *(_OWORD *)a5;
  *(_QWORD *)(a9 + 400) = v26;
  *(_QWORD *)(a9 + 408) = v27;
  *(_OWORD *)(a9 + 416) = *(_OWORD *)a6;
  *(_QWORD *)(a9 + 432) = v28;
  v14[11] = *(_OWORD *)a7;
  *(_QWORD *)(a9 + 456) = v29;
  *(_BYTE *)(a9 + 464) = v30;
  v42 = a8[1];
  v14[13] = *a8;
  v14[14] = v42;
  v14[15] = a8[2];
  *(_BYTE *)(a9 + 520) = v31;
  v43 = type metadata accessor for SectionExposureEvent.Model(0);
  v44 = a9 + *(int *)(v43 + 52);
  v45 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v44, a11, v45);
  v46 = a9 + *(int *)(v43 + 56);
  v47 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v46, a12, v47);
}

uint64_t sub_2DFE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2E01C + 4 * byte_1F3700[a1]))(0x446E6F6974636573, 0xEB00000000617461);
}

uint64_t sub_2E01C()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_2E088()
{
  return 0x61446C6C65537075;
}

uint64_t sub_2E0D4()
{
  return 0x746144746E657665;
}

uint64_t sub_2E100()
{
  return 0x6974736567677573;
}

uint64_t sub_2E124()
{
  unsigned __int8 *v0;

  return sub_2DFE0(*v0);
}

uint64_t sub_2E12C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_31D40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2E150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2E65C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2E178(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2E65C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SectionExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  char v72[4];
  int v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v2 = v1;
  v4 = sub_71B4(&qword_296F80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v8 = a1[4];
  sub_7988(a1, v9);
  v10 = sub_2E65C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SectionExposureEvent.Model.CodingKeys, &type metadata for SectionExposureEvent.Model.CodingKeys, v10, v9, v8);
  v11 = *((_DWORD *)v2 + 1);
  v12 = *(_OWORD *)(v2 + 8);
  v13 = *(_OWORD *)(v2 + 24);
  v14 = *((_QWORD *)v2 + 5);
  v15 = *((_QWORD *)v2 + 6);
  v16 = *((_DWORD *)v2 + 22);
  v17 = v2[92];
  v18 = *((_QWORD *)v2 + 12);
  v19 = *((_QWORD *)v2 + 13);
  v72[0] = *v2;
  v73 = v11;
  v74 = v12;
  v75 = v13;
  v76 = v14;
  v77 = v15;
  v78 = *(_OWORD *)(v2 + 56);
  v79 = *(_OWORD *)(v2 + 72);
  v80 = v16;
  v81 = v17;
  v82 = v18;
  v83 = v19;
  v71 = 0;
  v20 = sub_1B768();
  v21 = v84;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v72, &v71, v4, &type metadata for SectionData, v20);
  if (v21)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22 = *((_OWORD *)v2 + 14);
  v67 = *((_OWORD *)v2 + 13);
  v68 = v22;
  v69 = *((_OWORD *)v2 + 15);
  v70 = *((_QWORD *)v2 + 32);
  v23 = *((_OWORD *)v2 + 10);
  v63 = *((_OWORD *)v2 + 9);
  v64 = v23;
  v24 = *((_OWORD *)v2 + 12);
  v65 = *((_OWORD *)v2 + 11);
  v66 = v24;
  v25 = *((_OWORD *)v2 + 8);
  v61 = *((_OWORD *)v2 + 7);
  v62 = v25;
  v60 = 1;
  v26 = sub_1B7F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v61, &v60, v4, &type metadata for LinkData, v26);
  v27 = *((_QWORD *)v2 + 41);
  v28 = v2[336];
  v29 = *(_OWORD *)(v2 + 280);
  v61 = *(_OWORD *)(v2 + 264);
  v62 = v29;
  v30 = *(_OWORD *)(v2 + 312);
  v63 = *(_OWORD *)(v2 + 296);
  v64 = v30;
  *(_QWORD *)&v65 = v27;
  BYTE8(v65) = v28;
  v60 = 2;
  v31 = sub_22EE4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v61, &v60, v4, &type metadata for ReadingGoalsData, v31);
  v32 = v5;
  v33 = v2[376];
  v34 = *(_OWORD *)(v2 + 360);
  v61 = *(_OWORD *)(v2 + 344);
  v62 = v34;
  LOBYTE(v63) = v33;
  v60 = 3;
  v35 = sub_2E6A0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v61, &v60, v4, &type metadata for BooksGoalsData, v35);
  v36 = *((_QWORD *)v2 + 50);
  v37 = *((_QWORD *)v2 + 51);
  v61 = *((_OWORD *)v2 + 24);
  *(_QWORD *)&v62 = v36;
  *((_QWORD *)&v62 + 1) = v37;
  v60 = 4;
  v38 = sub_1B7AC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v61, &v60, v4, &type metadata for PageData, v38);
  v39 = *((_QWORD *)v2 + 54);
  v61 = *((_OWORD *)v2 + 26);
  *(_QWORD *)&v62 = v39;
  v60 = 5;
  v40 = sub_2E6E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v61, &v60, v4, &type metadata for UpSellData, v40);
  v41 = *((_QWORD *)v2 + 57);
  v42 = v2[464];
  v61 = *(_OWORD *)(v2 + 440);
  *(_QWORD *)&v62 = v41;
  BYTE8(v62) = v42;
  v60 = 6;
  v43 = sub_2E728();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v61, &v60, v4, &type metadata for OnDevicePersonalizationPropertyData, v43);
  v44 = *(_OWORD *)(v2 + 488);
  v61 = *(_OWORD *)(v2 + 472);
  v62 = v44;
  v63 = *(_OWORD *)(v2 + 504);
  v60 = 7;
  v45 = sub_10AD0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v61, &v60, v4, &type metadata for SeriesData, v45);
  LOBYTE(v61) = v2[520];
  v60 = 8;
  v46 = sub_2E76C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v61, &v60, v4, &type metadata for SuggestionData, v46);
  v47 = type metadata accessor for SectionExposureEvent.Model(0);
  v48 = &v2[*(int *)(v47 + 52)];
  LOBYTE(v61) = 9;
  v49 = v7;
  v50 = v4;
  v51 = type metadata accessor for EventData(0);
  v52 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v53 = v48;
  v54 = v50;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v53, &v61, v50, v51, v52);
  v55 = &v2[*(int *)(v47 + 56)];
  LOBYTE(v61) = 10;
  v56 = type metadata accessor for TimedData(0);
  v57 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v55, &v61, v54, v56, v57);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v49, v54);
}

unint64_t sub_2E65C()
{
  unint64_t result;

  result = qword_296F88;
  if (!qword_296F88)
  {
    result = swift_getWitnessTable(&unk_1F39EC, &type metadata for SectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_296F88);
  }
  return result;
}

unint64_t sub_2E6A0()
{
  unint64_t result;

  result = qword_296F90;
  if (!qword_296F90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksGoalsData, &type metadata for BooksGoalsData);
    atomic_store(result, (unint64_t *)&qword_296F90);
  }
  return result;
}

unint64_t sub_2E6E4()
{
  unint64_t result;

  result = qword_296F98;
  if (!qword_296F98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpSellData, &type metadata for UpSellData);
    atomic_store(result, (unint64_t *)&qword_296F98);
  }
  return result;
}

unint64_t sub_2E728()
{
  unint64_t result;

  result = qword_296FA0;
  if (!qword_296FA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnDevicePersonalizationPropertyData, &type metadata for OnDevicePersonalizationPropertyData);
    atomic_store(result, (unint64_t *)&qword_296FA0);
  }
  return result;
}

unint64_t sub_2E76C()
{
  unint64_t result;

  result = qword_296FA8;
  if (!qword_296FA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SuggestionData, &type metadata for SuggestionData);
    atomic_store(result, (unint64_t *)&qword_296FA8);
  }
  return result;
}

uint64_t SectionExposureEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t result;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  __int128 v46;
  char *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  char v61;
  __int128 v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  char v96;
  _BYTE v97[48];
  _BYTE v98[48];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v81 = a2;
  v3 = type metadata accessor for TimedData(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (_QWORD **)((char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = type metadata accessor for EventData(0);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v8 = (_QWORD **)((char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v83 = sub_71B4(&qword_296FB0);
  v9 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for SectionExposureEvent.Model(0);
  __chkstk_darwin(v85);
  v88 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v87 = a1;
  sub_7988(a1, v14);
  v15 = sub_2E65C();
  v82 = v11;
  v16 = v103;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SectionExposureEvent.Model.CodingKeys, &type metadata for SectionExposureEvent.Model.CodingKeys, v15, v14, v13);
  if (v16)
  {
    v21 = 0;
    v22 = v88;
    v103 = v16;
    result = sub_7DAC(v87);
    v24 = 0;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v80 = v8;
    v17 = v9;
    v78 = v6;
    v79 = v3;
    v18 = v81;
    LOBYTE(v90) = 0;
    v19 = sub_1BFE4();
    v20 = v83;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v97, &type metadata for SectionData, &v90, v83, &type metadata for SectionData, v19);
    v39 = *(_DWORD *)&v97[4];
    v40 = *(_OWORD *)&v97[8];
    v41 = *(_OWORD *)&v97[24];
    v42 = *(_QWORD *)&v97[40];
    v43 = *(_QWORD *)v98;
    v44 = *(_DWORD *)&v98[40];
    v45 = v98[44];
    v46 = v99;
    v47 = v88;
    *v88 = v97[0];
    *((_DWORD *)v47 + 1) = v39;
    *(_OWORD *)(v47 + 8) = v40;
    *(_OWORD *)(v47 + 24) = v41;
    *((_QWORD *)v47 + 5) = v42;
    *((_QWORD *)v47 + 6) = v43;
    *(_OWORD *)(v47 + 56) = *(_OWORD *)&v98[8];
    *(_OWORD *)(v47 + 72) = *(_OWORD *)&v98[24];
    *((_DWORD *)v47 + 22) = v44;
    v47[92] = v45;
    *((_OWORD *)v47 + 6) = v46;
    v96 = 1;
    v48 = sub_1C06C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v97, &type metadata for LinkData, &v96, v20, &type metadata for LinkData, v48);
    v49 = v100;
    v50 = v101;
    v51 = *(_OWORD *)&v98[32];
    *((_OWORD *)v47 + 13) = v99;
    *((_OWORD *)v47 + 14) = v49;
    *((_OWORD *)v47 + 15) = v50;
    v52 = *(_OWORD *)v98;
    v53 = *(_OWORD *)&v98[16];
    *((_OWORD *)v47 + 9) = *(_OWORD *)&v97[32];
    *((_OWORD *)v47 + 10) = v52;
    *((_QWORD *)v47 + 32) = v102;
    *((_OWORD *)v47 + 11) = v53;
    *((_OWORD *)v47 + 12) = v51;
    v54 = *(_OWORD *)&v97[16];
    *((_OWORD *)v47 + 7) = *(_OWORD *)v97;
    *((_OWORD *)v47 + 8) = v54;
    v89 = 2;
    v55 = sub_22E9C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v90, &type metadata for ReadingGoalsData, &v89, v20, &type metadata for ReadingGoalsData, v55);
    v56 = v94;
    v57 = v95;
    v58 = v91;
    *(_OWORD *)(v47 + 264) = v90;
    *(_OWORD *)(v47 + 280) = v58;
    v59 = v93;
    *(_OWORD *)(v47 + 296) = v92;
    *(_OWORD *)(v47 + 312) = v59;
    *((_QWORD *)v47 + 41) = v56;
    v47[336] = v57;
    v89 = 3;
    v60 = sub_2F228();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v90, &type metadata for BooksGoalsData, &v89, v20, &type metadata for BooksGoalsData, v60);
    v61 = v92;
    v62 = v91;
    *(_OWORD *)(v47 + 344) = v90;
    *(_OWORD *)(v47 + 360) = v62;
    v47[376] = v61;
    v89 = 4;
    v63 = sub_1C028();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v90, &type metadata for PageData, &v89, v20, &type metadata for PageData, v63);
    v64 = v91;
    *((_OWORD *)v47 + 24) = v90;
    *((_OWORD *)v47 + 25) = v64;
    v89 = 5;
    v65 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v90, &type metadata for UpSellData, &v89, v20, &type metadata for UpSellData, v65);
    v66 = v91;
    *((_OWORD *)v47 + 26) = v90;
    *((_QWORD *)v47 + 54) = v66;
    v89 = 6;
    v67 = sub_2F2B0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v90, &type metadata for OnDevicePersonalizationPropertyData, &v89, v20, &type metadata for OnDevicePersonalizationPropertyData, v67);
    v68 = v91;
    v69 = BYTE8(v91);
    *(_OWORD *)(v47 + 440) = v90;
    *((_QWORD *)v47 + 57) = v68;
    v47[464] = v69;
    v89 = 7;
    v70 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v90, &type metadata for SeriesData, &v89, v20, &type metadata for SeriesData, v70);
    v71 = v91;
    *(_OWORD *)(v47 + 472) = v90;
    *(_OWORD *)(v47 + 488) = v71;
    *(_OWORD *)(v47 + 504) = v92;
    v89 = 8;
    v72 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v90, &type metadata for SuggestionData, &v89, v20, &type metadata for SuggestionData, v72);
    v103 = 0;
    v47[520] = v90;
    LOBYTE(v90) = 9;
    v73 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    v74 = v103;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v80, v86, &v90, v20, v86, v73);
    v103 = v74;
    if (v74)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v82, v83);
      sub_7DAC(v87);
      LODWORD(v87) = 0;
      LODWORD(v83) = 1;
      v24 = 1;
      v26 = 1;
    }
    else
    {
      (*(void (**)(char *, _QWORD *, uint64_t))(v84 + 32))(&v88[*(int *)(v85 + 52)], v80, v86);
      LOBYTE(v90) = 10;
      v75 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
      v76 = v103;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v78, v79, &v90, v83, v79, v75);
      v103 = v76;
      if (!v76)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v82, v83);
        v77 = (uint64_t)v88;
        (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 32))(&v88[*(int *)(v85 + 56)], v78, v79);
        sub_2F338(v77, v18);
        sub_7DAC(v87);
        return sub_2F37C(v77);
      }
      (*(void (**)(char *, uint64_t))(v17 + 8))(v82, v83);
      sub_7DAC(v87);
      LODWORD(v83) = 1;
      v24 = 1;
      v26 = 1;
      LODWORD(v87) = 1;
    }
    v22 = v88;
    v28 = *((_QWORD *)v88 + 2);
    v29 = *((_QWORD *)v88 + 4);
    v30 = *((_QWORD *)v88 + 6);
    v31 = *((_QWORD *)v88 + 8);
    v32 = *((_QWORD *)v88 + 10);
    swift_bridgeObjectRelease(*((_QWORD *)v88 + 13));
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v31);
    result = swift_bridgeObjectRelease(v32);
    v25 = (int)v87;
    v21 = 1;
    if ((v83 & 1) != 0)
    {
      v33 = *((_OWORD *)v22 + 13);
      v34 = *((_OWORD *)v22 + 15);
      v100 = *((_OWORD *)v22 + 14);
      v101 = v34;
      v35 = *((_OWORD *)v22 + 9);
      v36 = *((_OWORD *)v22 + 11);
      v37 = *((_OWORD *)v22 + 12);
      *(_OWORD *)v98 = *((_OWORD *)v22 + 10);
      *(_OWORD *)&v98[16] = v36;
      v102 = *((_QWORD *)v22 + 32);
      *(_OWORD *)&v98[32] = v37;
      v99 = v33;
      v38 = *((_OWORD *)v22 + 8);
      *(_OWORD *)v97 = *((_OWORD *)v22 + 7);
      *(_OWORD *)&v97[16] = v38;
      *(_OWORD *)&v97[32] = v35;
      sub_2F180(v97);
LABEL_5:
      v27 = *((_QWORD *)v22 + 49);
      swift_bridgeObjectRelease(*((_QWORD *)v22 + 51));
      result = swift_bridgeObjectRelease(v27);
      if ((v21 & 1) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  if (v24)
    goto LABEL_5;
  if (!v21)
  {
LABEL_6:
    if (v26)
      goto LABEL_7;
LABEL_13:
    if (!v25)
      return result;
    return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(&v22[*(int *)(v85 + 52)], v86);
  }
LABEL_12:
  result = swift_bridgeObjectRelease(*((_QWORD *)v22 + 54));
  if ((v26 & 1) == 0)
    goto LABEL_13;
LABEL_7:
  result = sub_17788(*((_QWORD *)v22 + 59), *((_QWORD *)v22 + 60), *((_QWORD *)v22 + 61), *((_QWORD *)v22 + 62), *((_QWORD *)v22 + 63), *((_QWORD *)v22 + 64));
  if ((v25 & 1) == 0)
    return result;
  return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(&v22[*(int *)(v85 + 52)], v86);
}

_QWORD *sub_2F180(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[8];
  v5 = a1[10];
  v6 = a1[12];
  v7 = a1[14];
  v8 = a1[16];
  v9 = a1[18];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

unint64_t sub_2F228()
{
  unint64_t result;

  result = qword_296FB8;
  if (!qword_296FB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksGoalsData, &type metadata for BooksGoalsData);
    atomic_store(result, (unint64_t *)&qword_296FB8);
  }
  return result;
}

unint64_t sub_2F26C()
{
  unint64_t result;

  result = qword_296FC0;
  if (!qword_296FC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpSellData, &type metadata for UpSellData);
    atomic_store(result, (unint64_t *)&qword_296FC0);
  }
  return result;
}

unint64_t sub_2F2B0()
{
  unint64_t result;

  result = qword_296FC8;
  if (!qword_296FC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnDevicePersonalizationPropertyData, &type metadata for OnDevicePersonalizationPropertyData);
    atomic_store(result, (unint64_t *)&qword_296FC8);
  }
  return result;
}

unint64_t sub_2F2F4()
{
  unint64_t result;

  result = qword_296FD0;
  if (!qword_296FD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SuggestionData, &type metadata for SuggestionData);
    atomic_store(result, (unint64_t *)&qword_296FD0);
  }
  return result;
}

uint64_t sub_2F338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SectionExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2F37C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SectionExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2F3B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SectionExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_2F3CC(_QWORD *a1)
{
  return SectionExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_2F3E0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295530, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_296F28, (uint64_t)sub_2D038, a1);
}

uint64_t sub_2F404@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295538, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_296F40, (uint64_t)sub_2D078, a1);
}

uint64_t sub_2F428@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v9, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v9, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v9, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v9, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v9, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
  v25 = a2 + a1[14];
  v26 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v25, v4, v26);
}

uint64_t *initializeBufferWithCopyOfBuffer for SectionExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v48 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v48 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v48);
  }
  else
  {
    v7 = sub_71B4(&qword_296A00);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296F58);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296F60);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296F70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[14];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  }
  return a1;
}

uint64_t destroy for SectionExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[14];
  v24 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

uint64_t initializeWithCopy for SectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  return a1;
}

uint64_t assignWithCopy for SectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  return a1;
}

uint64_t initializeWithTake for SectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t assignWithTake for SectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_30380);
}

uint64_t sub_30380(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_71B4(&qword_296A00);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296A10);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296F58);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296F60);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296A08);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296F68);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296F70);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296310);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_296F78);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_295D70);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v8 = sub_71B4(&qword_295D78);
                      v12 = *(_QWORD *)(v8 - 8);
                      v13 = a3[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SectionExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_30570);
}

uint64_t sub_30570(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_71B4(&qword_296A00);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296A10);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296F58);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296F60);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296A08);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296F68);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296F70);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296310);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_296F78);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_295D70);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v10 = sub_71B4(&qword_295D78);
                      v14 = *(_QWORD *)(v10 - 8);
                      v15 = a4[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_3075C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[11];

  sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
  if (v3 <= 0x3F)
  {
    v24[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
    if (v5 <= 0x3F)
    {
      v24[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_297040, (uint64_t (*)(void))sub_22E9C, (uint64_t (*)(void))sub_22EE4, (uint64_t)&type metadata for ReadingGoalsData);
      if (v7 <= 0x3F)
      {
        v24[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_297048, (uint64_t (*)(void))sub_2F228, (uint64_t (*)(void))sub_2E6A0, (uint64_t)&type metadata for BooksGoalsData);
        if (v9 <= 0x3F)
        {
          v24[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
          if (v11 <= 0x3F)
          {
            v24[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
            if (v13 <= 0x3F)
            {
              v24[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, &qword_297058, (uint64_t (*)(void))sub_2F2B0, (uint64_t (*)(void))sub_2E728, (uint64_t)&type metadata for OnDevicePersonalizationPropertyData);
              if (v15 <= 0x3F)
              {
                v24[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                if (v17 <= 0x3F)
                {
                  v24[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
                  if (v19 <= 0x3F)
                  {
                    v24[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_8734(319);
                    if (v21 <= 0x3F)
                    {
                      v24[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_87D8(319);
                      if (v23 <= 0x3F)
                      {
                        v24[10] = *(_QWORD *)(v22 - 8) + 64;
                        swift_initStructMetadata(a1, 256, 11, v24, a1 + 16);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SectionExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v21);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    v6 = a2[2];
    *(_QWORD *)(v4 + 8) = a2[1];
    *(_QWORD *)(v4 + 16) = v6;
    v42 = a2[4];
    *(_QWORD *)(v4 + 24) = a2[3];
    *(_QWORD *)(v4 + 32) = v42;
    v41 = a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v41;
    v40 = a2[8];
    *(_QWORD *)(v4 + 56) = a2[7];
    *(_QWORD *)(v4 + 64) = v40;
    v39 = a2[10];
    *(_QWORD *)(v4 + 72) = a2[9];
    *(_QWORD *)(v4 + 80) = v39;
    *(_DWORD *)(v4 + 88) = *((_DWORD *)a2 + 22);
    *(_BYTE *)(v4 + 92) = *((_BYTE *)a2 + 92);
    v38 = a2[13];
    *(_QWORD *)(v4 + 96) = a2[12];
    *(_QWORD *)(v4 + 104) = v38;
    v37 = a2[15];
    *(_QWORD *)(v4 + 112) = a2[14];
    *(_QWORD *)(v4 + 120) = v37;
    v36 = a2[17];
    *(_QWORD *)(v4 + 128) = a2[16];
    *(_QWORD *)(v4 + 136) = v36;
    v35 = a2[19];
    *(_QWORD *)(v4 + 144) = a2[18];
    *(_QWORD *)(v4 + 152) = v35;
    *(_BYTE *)(v4 + 160) = *((_BYTE *)a2 + 160);
    v34 = a2[22];
    *(_QWORD *)(v4 + 168) = a2[21];
    *(_QWORD *)(v4 + 176) = v34;
    v33 = a2[24];
    *(_QWORD *)(v4 + 184) = a2[23];
    *(_QWORD *)(v4 + 192) = v33;
    v7 = a2[26];
    *(_QWORD *)(v4 + 200) = a2[25];
    *(_QWORD *)(v4 + 208) = v7;
    v32 = a2[28];
    *(_QWORD *)(v4 + 216) = a2[27];
    *(_QWORD *)(v4 + 224) = v32;
    v31 = a2[30];
    *(_QWORD *)(v4 + 232) = a2[29];
    *(_QWORD *)(v4 + 240) = v31;
    v8 = a2[32];
    *(_QWORD *)(v4 + 248) = a2[31];
    *(_QWORD *)(v4 + 256) = v8;
    v9 = *(_OWORD *)(a2 + 33);
    v10 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(v4 + 321) = *(_OWORD *)((char *)a2 + 321);
    v11 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(v4 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(v4 + 312) = v11;
    *(_OWORD *)(v4 + 264) = v9;
    *(_OWORD *)(v4 + 280) = v10;
    v12 = *(_OWORD *)(a2 + 43);
    v13 = *(_OWORD *)(a2 + 45);
    *(_BYTE *)(v4 + 376) = *((_BYTE *)a2 + 376);
    *(_OWORD *)(v4 + 344) = v12;
    *(_OWORD *)(v4 + 360) = v13;
    v14 = a2[49];
    *(_QWORD *)(v4 + 384) = a2[48];
    *(_QWORD *)(v4 + 392) = v14;
    v15 = a2[51];
    *(_QWORD *)(v4 + 400) = a2[50];
    *(_QWORD *)(v4 + 408) = v15;
    *(_BYTE *)(v4 + 416) = *((_BYTE *)a2 + 416);
    *(_BYTE *)(v4 + 417) = *((_BYTE *)a2 + 417);
    v16 = a2[54];
    *(_QWORD *)(v4 + 424) = a2[53];
    *(_QWORD *)(v4 + 432) = v16;
    v17 = *(_OWORD *)(a2 + 55);
    *(_OWORD *)(v4 + 449) = *(_OWORD *)((char *)a2 + 449);
    *(_OWORD *)(v4 + 440) = v17;
    v18 = a2 + 59;
    v19 = a2[64];
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    if (v19 == 1)
    {
      v20 = *(_OWORD *)(a2 + 61);
      *(_OWORD *)(v4 + 472) = *v18;
      *(_OWORD *)(v4 + 488) = v20;
      *(_OWORD *)(v4 + 504) = *(_OWORD *)(a2 + 63);
    }
    else
    {
      *(_QWORD *)(v4 + 472) = a2[59];
      *(_BYTE *)(v4 + 480) = *((_BYTE *)a2 + 480);
      *(_QWORD *)(v4 + 488) = a2[61];
      *(_BYTE *)(v4 + 496) = *((_BYTE *)a2 + 496);
      *(_WORD *)(v4 + 497) = *(_WORD *)((char *)a2 + 497);
      *(_QWORD *)(v4 + 504) = a2[63];
      *(_QWORD *)(v4 + 512) = v19;
      swift_bridgeObjectRetain(v19);
    }
    *(_BYTE *)(v4 + 520) = *((_BYTE *)a2 + 520);
    v22 = *(int *)(a3 + 52);
    v23 = v4 + v22;
    v24 = (uint64_t)a2 + v22;
    v25 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v26 = *(int *)(a3 + 56);
    v27 = v4 + v26;
    v28 = (uint64_t)a2 + v26;
    v29 = type metadata accessor for TimedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  }
  return v4;
}

uint64_t destroy for SectionExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[32]);
  swift_bridgeObjectRelease(a1[49]);
  swift_bridgeObjectRelease(a1[51]);
  swift_bridgeObjectRelease(a1[54]);
  v4 = a1[64];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 52);
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(a2 + 56);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v40 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v40;
  v39 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v39;
  v38 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v38;
  v37 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v37;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v36 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v36;
  v35 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v35;
  v34 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v34;
  v33 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v33;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v32 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v32;
  v31 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v31;
  v30 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v30;
  v6 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v6;
  v29 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v29;
  v7 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v7;
  v8 = *(_OWORD *)(a2 + 264);
  v9 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  v10 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v10;
  *(_OWORD *)(a1 + 264) = v8;
  *(_OWORD *)(a1 + 280) = v9;
  v11 = *(_OWORD *)(a2 + 344);
  v12 = *(_OWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_OWORD *)(a1 + 344) = v11;
  *(_OWORD *)(a1 + 360) = v12;
  v13 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v13;
  v14 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v14;
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_BYTE *)(a1 + 417) = *(_BYTE *)(a2 + 417);
  v15 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v15;
  v16 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 449) = *(_OWORD *)(a2 + 449);
  *(_OWORD *)(a1 + 440) = v16;
  v17 = a2 + 472;
  v18 = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  if (v18 == 1)
  {
    v19 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)v17;
    *(_OWORD *)(a1 + 488) = v19;
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(v17 + 32);
  }
  else
  {
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
    *(_WORD *)(a1 + 497) = *(_WORD *)(v17 + 25);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = v18;
    swift_bridgeObjectRetain(v18);
  }
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  v20 = *(int *)(a3 + 52);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = *(int *)(a3 + 56);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  return a1;
}

uint64_t assignWithCopy for SectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v25 = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a2 + 208);
  v30 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v31 = *(_QWORD *)(a2 + 224);
  v32 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v33 = *(_QWORD *)(a2 + 240);
  v34 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v35 = *(_QWORD *)(a2 + 256);
  v36 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  v37 = *(_OWORD *)(a2 + 280);
  v38 = *(_OWORD *)(a2 + 296);
  v39 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 296) = v38;
  *(_OWORD *)(a1 + 312) = v39;
  *(_OWORD *)(a1 + 280) = v37;
  v40 = *(_OWORD *)(a2 + 344);
  v41 = *(_OWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_OWORD *)(a1 + 344) = v40;
  *(_OWORD *)(a1 + 360) = v41;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v42 = *(_QWORD *)(a2 + 392);
  v43 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v44 = *(_QWORD *)(a2 + 408);
  v45 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_BYTE *)(a1 + 417) = *(_BYTE *)(a2 + 417);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  v46 = *(_QWORD *)(a2 + 432);
  v47 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 449) = *(_OWORD *)(a2 + 449);
  *(_OWORD *)(a1 + 440) = v48;
  v49 = (__int128 *)(a1 + 472);
  v50 = (__int128 *)(a2 + 472);
  v51 = *(_QWORD *)(a1 + 512);
  v52 = *(_QWORD *)(a2 + 512);
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      v53 = *v50;
      v54 = *(_OWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
      *(_OWORD *)(a1 + 504) = v54;
      *v49 = v53;
    }
    else
    {
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
      *(_BYTE *)(a1 + 497) = *(_BYTE *)(a2 + 497);
      *(_BYTE *)(a1 + 498) = *(_BYTE *)(a2 + 498);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      v57 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 512) = v57;
      swift_bridgeObjectRetain(v57);
    }
  }
  else if (v52 == 1)
  {
    sub_19008(a1 + 472);
    v56 = *(_OWORD *)(a2 + 488);
    v55 = *(_OWORD *)(a2 + 504);
    *v49 = *v50;
    *(_OWORD *)(a1 + 488) = v56;
    *(_OWORD *)(a1 + 504) = v55;
  }
  else
  {
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
    *(_BYTE *)(a1 + 497) = *(_BYTE *)(a2 + 497);
    *(_BYTE *)(a1 + 498) = *(_BYTE *)(a2 + 498);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    v58 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 512) = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease(v51);
  }
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  v59 = *(int *)(a3 + 52);
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v60, v61, v62);
  v63 = *(int *)(a3 + 56);
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  return a1;
}

uint64_t initializeWithTake for SectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = *(_OWORD *)(a2 + 192);
  v14 = *(_OWORD *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 224);
  v16 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v14;
  v17 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v17;
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  v18 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v18;
  v19 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v19;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  v20 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v20;
  v21 = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 449) = *(_OWORD *)(a2 + 449);
  v22 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v22;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  v23 = *(int *)(a3 + 52);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)(a1 + 416) = v21;
  v26 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = *(int *)(a3 + 56);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  return a1;
}

uint64_t assignWithTake for SectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v24 = *(_QWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 192);
  v27 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 208);
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 240);
  v33 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(a2 + 256);
  v35 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v36;
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  v37 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v37;
  v38 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v38;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  v39 = *(_QWORD *)(a2 + 392);
  v40 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v39;
  swift_bridgeObjectRelease(v40);
  v41 = *(_QWORD *)(a2 + 408);
  v42 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v41;
  swift_bridgeObjectRelease(v42);
  *(_WORD *)(a1 + 416) = *(_WORD *)(a2 + 416);
  v43 = *(_QWORD *)(a2 + 432);
  v44 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v43;
  swift_bridgeObjectRelease(v44);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 449) = *(_OWORD *)(a2 + 449);
  v45 = *(_QWORD *)(a1 + 512);
  if (v45 != 1)
  {
    v46 = *(_QWORD *)(a2 + 512);
    if (v46 != 1)
    {
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
      *(_WORD *)(a1 + 497) = *(_WORD *)(a2 + 497);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      *(_QWORD *)(a1 + 512) = v46;
      swift_bridgeObjectRelease(v45);
      goto LABEL_6;
    }
    sub_19008(a1 + 472);
  }
  v47 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v47;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_6:
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  v48 = *(int *)(a3 + 52);
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
  v52 = *(int *)(a3 + 56);
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 40))(v53, v54, v55);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_31974);
}

uint64_t sub_31974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 52);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_31A20);
}

uint64_t sub_31A20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 52);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_31ABC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[0] = "p";
  v5[1] = &unk_1F3868;
  v5[2] = &unk_1F3880;
  v5[3] = &unk_1F3898;
  v5[4] = &unk_1F38B0;
  v5[5] = &unk_1F38C8;
  v5[6] = &unk_1F38E0;
  v5[7] = &unk_1F38F8;
  v5[8] = &unk_1F3910;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[9] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[10] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 11, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SectionExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_31BE8 + 4 * byte_1F3710[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_31C1C + 4 * byte_1F370B[v4]))();
}

uint64_t sub_31C1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_31C24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x31C2CLL);
  return result;
}

uint64_t sub_31C38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x31C40);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_31C44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_31C4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SectionExposureEvent.Model.CodingKeys()
{
  return &type metadata for SectionExposureEvent.Model.CodingKeys;
}

unint64_t sub_31C6C()
{
  unint64_t result;

  result = qword_297170;
  if (!qword_297170)
  {
    result = swift_getWitnessTable(&unk_1F39C4, &type metadata for SectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297170);
  }
  return result;
}

unint64_t sub_31CB4()
{
  unint64_t result;

  result = qword_297178;
  if (!qword_297178)
  {
    result = swift_getWitnessTable(&unk_1F3934, &type metadata for SectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297178);
  }
  return result;
}

unint64_t sub_31CFC()
{
  unint64_t result;

  result = qword_297180;
  if (!qword_297180)
  {
    result = swift_getWitnessTable(&unk_1F395C, &type metadata for SectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297180);
  }
  return result;
}

uint64_t sub_31D40(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x800000000021EE50;
    if (a2 == 0x800000000021EE50)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EE50, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x616F47736B6F6F62 && a2 == 0xEE0061746144736CLL)
  {
    v9 = 0xEE0061746144736CLL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616F47736B6F6F62, 0xEE0061746144736CLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x800000000021EE70)
  {
    v12 = 0x800000000021EE70;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x800000000021EE70, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v13 = 0xEA00000000006174;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v14 = 0xEE00617461446E6FLL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v15 = 0xE900000000000061;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_32208(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_297188, &enum case for SessionGroup.default(_:));
}

uint64_t static CollectionDescriptionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295540, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297188, a1);
}

uint64_t sub_32248(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2971A0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static CollectionDescriptionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295548, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2971A0, a1);
}

uint64_t CollectionDescriptionEvent.collectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2971B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CollectionDescriptionEvent.collectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2971B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t CollectionDescriptionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionDescriptionEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionDescriptionEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_297240, (uint64_t)&nominal type descriptor for CollectionDescriptionEvent);
}

uint64_t CollectionDescriptionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionDescriptionEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionDescriptionEvent.eventData.modify())()
{
  type metadata accessor for CollectionDescriptionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionDescriptionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for CollectionDescriptionEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t CollectionDescriptionEvent.Model.collectionData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t CollectionDescriptionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionDescriptionEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionDescriptionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2972D8, (uint64_t)&nominal type descriptor for CollectionDescriptionEvent.Model);
}

uint64_t CollectionDescriptionEvent.Model.init(collectionData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 16);
  v5 = a3 + *(int *)(type metadata accessor for CollectionDescriptionEvent.Model(0) + 20);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_32538()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x697463656C6C6F63;
}

uint64_t sub_32584@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_33758(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_325A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_32764();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_325D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_32764();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionDescriptionEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  __int128 v21;

  v3 = v1;
  v5 = sub_71B4(&qword_2971C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_32764();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionDescriptionEvent.Model.CodingKeys, &type metadata for CollectionDescriptionEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 8);
  v20[0] = *(_QWORD *)v3;
  v20[1] = v12;
  v21 = *(_OWORD *)(v3 + 16);
  v19 = 0;
  v13 = sub_327A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v19, v5, &type metadata for CollectionData, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for CollectionDescriptionEvent.Model(0) + 20);
    LOBYTE(v20[0]) = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v20, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_32764()
{
  unint64_t result;

  result = qword_2971C8;
  if (!qword_2971C8)
  {
    result = swift_getWitnessTable(&unk_1F3BF4, &type metadata for CollectionDescriptionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2971C8);
  }
  return result;
}

unint64_t sub_327A8()
{
  unint64_t result;

  result = qword_2971D0;
  if (!qword_2971D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionData, &type metadata for CollectionData);
    atomic_store(result, (unint64_t *)&qword_2971D0);
  }
  return result;
}

uint64_t CollectionDescriptionEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  char v35;

  v28 = a2;
  v4 = type metadata accessor for EventData(0);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  __chkstk_darwin(v4);
  v29 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_71B4(&qword_2971D8);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CollectionDescriptionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v13);
  v14 = sub_32764();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionDescriptionEvent.Model.CodingKeys, &type metadata for CollectionDescriptionEvent.Model.CodingKeys, v14, v13, v12);
  if (v2)
    return sub_7DAC(a1);
  v26 = v9;
  v27 = a1;
  v15 = v6;
  v16 = (uint64_t)v11;
  v18 = v29;
  v17 = v30;
  v19 = v31;
  v35 = 0;
  v20 = sub_32A60();
  v21 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, &type metadata for CollectionData, &v35, v32, &type metadata for CollectionData, v20);
  v22 = v33[1];
  *(_QWORD *)v16 = v33[0];
  *(_QWORD *)(v16 + 8) = v22;
  *(_OWORD *)(v16 + 16) = v34;
  LOBYTE(v33[0]) = 1;
  v23 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, v33, v21, v19, v23);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v21);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v16 + *(int *)(v26 + 20), v18, v19);
  sub_32AA4(v16, v28);
  sub_7DAC(v27);
  return sub_32AE8(v16);
}

unint64_t sub_32A60()
{
  unint64_t result;

  result = qword_2971E0;
  if (!qword_2971E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionData, &type metadata for CollectionData);
    atomic_store(result, (unint64_t *)&qword_2971E0);
  }
  return result;
}

uint64_t sub_32AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CollectionDescriptionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_32AE8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CollectionDescriptionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_32B24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CollectionDescriptionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_32B38(_QWORD *a1)
{
  return CollectionDescriptionEvent.Model.encode(to:)(a1);
}

uint64_t sub_32B4C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295540, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297188, (uint64_t)sub_32208, a1);
}

uint64_t sub_32B70@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295548, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2971A0, (uint64_t)sub_32248, a1);
}

uint64_t sub_32B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionDescriptionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_2971B8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for CollectionDescriptionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for CollectionDescriptionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for CollectionDescriptionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CollectionDescriptionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for CollectionDescriptionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionDescriptionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_32F44);
}

uint64_t sub_32F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_2971B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CollectionDescriptionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_32FCC);
}

uint64_t sub_32FCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_2971B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_33050(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_330D4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_330D4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_297250)
  {
    v2 = sub_32A60();
    v3 = sub_327A8();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for CollectionData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_297250);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionDescriptionEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for EventData(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for CollectionDescriptionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CollectionDescriptionEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EventData(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for CollectionDescriptionEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for CollectionDescriptionEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for CollectionDescriptionEvent.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionDescriptionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_33444);
}

uint64_t sub_33444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CollectionDescriptionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_334CC);
}

uint64_t sub_334CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_33540(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = " ";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionDescriptionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_33600 + 4 * byte_1F3A45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_33634 + 4 * byte_1F3A40[v4]))();
}

uint64_t sub_33634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3363C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x33644);
  return result;
}

uint64_t sub_33650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x33658);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_3365C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_33664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionDescriptionEvent.Model.CodingKeys()
{
  return &type metadata for CollectionDescriptionEvent.Model.CodingKeys;
}

unint64_t sub_33684()
{
  unint64_t result;

  result = qword_297310;
  if (!qword_297310)
  {
    result = swift_getWitnessTable(&unk_1F3BCC, &type metadata for CollectionDescriptionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297310);
  }
  return result;
}

unint64_t sub_336CC()
{
  unint64_t result;

  result = qword_297318;
  if (!qword_297318)
  {
    result = swift_getWitnessTable(&unk_1F3B3C, &type metadata for CollectionDescriptionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297318);
  }
  return result;
}

unint64_t sub_33714()
{
  unint64_t result;

  result = qword_297320;
  if (!qword_297320)
  {
    result = swift_getWitnessTable(&unk_1F3B64, &type metadata for CollectionDescriptionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297320);
  }
  return result;
}

uint64_t sub_33758(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x697463656C6C6F63 && a2 == 0xEE00617461446E6FLL)
  {
    v5 = 0xEE00617461446E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void ClickData.linkActionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *ClickData.linkActionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t PurchaseData.isPreorder.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t PurchaseData.isPreorder.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*OnDevicePersonalizationPropertyData.onDevicePersonalizationUserStatus.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void __swiftcall PurchaseData.init(purchaseAttemptID:purchaseMethod:isPreorder:pricingParameters:)(BookAnalytics::PurchaseData *__return_ptr retstr, Swift::String purchaseAttemptID, BookAnalytics::PurchaseMethod_optional purchaseMethod, Swift::Bool isPreorder, Swift::String pricingParameters)
{
  BookAnalytics::PurchaseMethod v5;

  v5 = *(_BYTE *)purchaseMethod.value;
  retstr->purchaseAttemptID = purchaseAttemptID;
  retstr->purchaseMethod.value = v5;
  retstr->isPreorder = isPreorder;
  retstr->pricingParameters = pricingParameters;
}

uint64_t sub_338CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_33900 + 4 * byte_1F3C44[*v0]))(0xD000000000000011, 0x800000000021EEA0);
}

uint64_t sub_33900()
{
  return 0x6573616863727570;
}

uint64_t sub_33924()
{
  return 0x64726F6572507369;
}

uint64_t sub_33954@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_344DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_33978(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_33FEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_339A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_33FEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PurchaseData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = sub_71B4(&qword_297328);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = *((unsigned __int8 *)v1 + 16);
  v22 = *((unsigned __int8 *)v1 + 17);
  v23 = v9;
  v10 = v1[3];
  v20 = v1[4];
  v21 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_33FEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PurchaseData.CodingKeys, &type metadata for PurchaseData.CodingKeys, v13, v11, v12);
  v29 = 0;
  v14 = v24;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v7, &v29, v3);
  if (!v14)
  {
    v15 = v22;
    v17 = v20;
    v16 = v21;
    v28 = v23;
    v27 = 1;
    v18 = sub_34030();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, &v27, v3, &type metadata for PurchaseMethod, v18);
    v26 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v26, v3);
    v25 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v25, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PurchaseData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v5 = sub_71B4(&qword_297340);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_33FEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PurchaseData.CodingKeys, &type metadata for PurchaseData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  BYTE1(v28) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v28 + 1, v5);
  v14 = v13;
  v27 = 1;
  v15 = sub_34074();
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v28, &type metadata for PurchaseMethod, &v27, v5, &type metadata for PurchaseMethod, v15);
  v24 = v28;
  v26 = 2;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v25 = 3;
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v19 = v18;
  v23 &= 1u;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21 = v16;
  v20(v8, v5);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_BYTE *)(a2 + 16) = v24;
  *(_BYTE *)(a2 + 17) = v23;
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v19;
  swift_bridgeObjectRetain(v19);
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v19);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_33DA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PurchaseData.init(from:)(a1, a2);
}

uint64_t sub_33DB4(_QWORD *a1)
{
  return PurchaseData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics12PurchaseDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = *((unsigned __int8 *)a1 + 17);
  v8 = a1[3];
  v9 = a1[4];
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 16);
  v12 = *(unsigned __int8 *)(a2 + 17);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  if (v4 == *(_QWORD *)a2 && v5 == v10
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v10, 0), result = 0, (v15 & 1) != 0))
  {
    if (v6 == 3)
    {
      result = 0;
      if (v11 != 3)
        return result;
      goto LABEL_25;
    }
    if (v11 == 3)
      return 0;
    v17 = 0x6E776F6E6B6E75;
    if (v6)
    {
      if (v6 == 1)
      {
        v18 = 0x6143746964657263;
        v19 = 0xEA00000000006472;
        if (v11)
          goto LABEL_12;
LABEL_18:
        v20 = 0xE700000000000000;
        if (v18 != 0x6E776F6E6B6E75)
          goto LABEL_24;
        goto LABEL_21;
      }
      v18 = 0x6974706D65646572;
      v19 = 0xEE0065646F436E6FLL;
      if (!v11)
        goto LABEL_18;
    }
    else
    {
      v19 = 0xE700000000000000;
      v18 = 0x6E776F6E6B6E75;
      if (!v11)
        goto LABEL_18;
    }
LABEL_12:
    if (v11 == 1)
    {
      v17 = 0x6143746964657263;
      v20 = 0xEA00000000006472;
      if (v18 != 0x6143746964657263)
        goto LABEL_24;
    }
    else
    {
      v17 = 0x6974706D65646572;
      v20 = 0xEE0065646F436E6FLL;
      if (v18 != 0x6974706D65646572)
        goto LABEL_24;
    }
LABEL_21:
    if (v19 == v20)
    {
      swift_bridgeObjectRelease_n(v19, 2);
      if (v7 == v12)
      {
LABEL_26:
        if (v8 == v13 && v9 == v14)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v13, v14, 0);
      }
      return 0;
    }
LABEL_24:
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v17, v20, 0);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v20);
    result = 0;
    if ((v21 & 1) == 0)
      return result;
LABEL_25:
    if (((v7 ^ v12) & 1) != 0)
      return result;
    goto LABEL_26;
  }
  return result;
}

unint64_t sub_33FEC()
{
  unint64_t result;

  result = qword_297330;
  if (!qword_297330)
  {
    result = swift_getWitnessTable(&unk_1F3DF0, &type metadata for PurchaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297330);
  }
  return result;
}

unint64_t sub_34030()
{
  unint64_t result;

  result = qword_297338;
  if (!qword_297338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PurchaseMethod, &type metadata for PurchaseMethod);
    atomic_store(result, (unint64_t *)&qword_297338);
  }
  return result;
}

unint64_t sub_34074()
{
  unint64_t result;

  result = qword_297348;
  if (!qword_297348)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PurchaseMethod, &type metadata for PurchaseMethod);
    atomic_store(result, (unint64_t *)&qword_297348);
  }
  return result;
}

unint64_t sub_340BC()
{
  unint64_t result;

  result = qword_297350;
  if (!qword_297350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PurchaseData, &type metadata for PurchaseData);
    atomic_store(result, (unint64_t *)&qword_297350);
  }
  return result;
}

unint64_t sub_34104()
{
  unint64_t result;

  result = qword_297358;
  if (!qword_297358)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PurchaseData, &type metadata for PurchaseData);
    atomic_store(result, (unint64_t *)&qword_297358);
  }
  return result;
}

uint64_t destroy for PurchaseData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for PurchaseData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for PurchaseData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for PurchaseData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PurchaseData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurchaseData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PurchaseData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PurchaseData()
{
  return &type metadata for PurchaseData;
}

uint64_t storeEnumTagSinglePayload for PurchaseData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_34384 + 4 * byte_1F3C4D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_343B8 + 4 * byte_1F3C48[v4]))();
}

uint64_t sub_343B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_343C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x343C8);
  return result;
}

uint64_t sub_343D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x343DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_343E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_343E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseData.CodingKeys()
{
  return &type metadata for PurchaseData.CodingKeys;
}

unint64_t sub_34408()
{
  unint64_t result;

  result = qword_297360;
  if (!qword_297360)
  {
    result = swift_getWitnessTable(&unk_1F3DC8, &type metadata for PurchaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297360);
  }
  return result;
}

unint64_t sub_34450()
{
  unint64_t result;

  result = qword_297368;
  if (!qword_297368)
  {
    result = swift_getWitnessTable(&unk_1F3D38, &type metadata for PurchaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297368);
  }
  return result;
}

unint64_t sub_34498()
{
  unint64_t result;

  result = qword_297370;
  if (!qword_297370)
  {
    result = swift_getWitnessTable(&unk_1F3D60, &type metadata for PurchaseData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297370);
  }
  return result;
}

uint64_t sub_344DC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x800000000021EEA0;
    if (a2 == 0x800000000021EEA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021EEA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6573616863727570 && a2 == 0xEE00646F6874654DLL)
  {
    v6 = 0xEE00646F6874654DLL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6573616863727570, 0xEE00646F6874654DLL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x64726F6572507369 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64726F6572507369, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021EEC0)
  {
    swift_bridgeObjectRelease(0x800000000021EEC0);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021EEC0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::DisplayType_optional __swiftcall DisplayType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::DisplayType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266658, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t DisplayType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1684632167;
  if (*v0 != 1)
    v1 = 1953720684;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_34760(char *a1, unsigned __int8 *a2)
{
  return sub_28F38(*a1, *a2);
}

unint64_t sub_34770()
{
  unint64_t result;

  result = qword_297378;
  if (!qword_297378)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DisplayType, &type metadata for DisplayType);
    atomic_store(result, (unint64_t *)&qword_297378);
  }
  return result;
}

Swift::Int sub_347B4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 1684632167;
  if (v1 != 1)
    v2 = 1953720684;
  if (v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_34844(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 1684632167;
  if (*v1 != 1)
    v2 = 1953720684;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (*v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_348B0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 1684632167;
  if (v2 != 1)
    v3 = 1953720684;
  if (v2)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

BookAnalytics::DisplayType_optional sub_3493C(Swift::String *a1)
{
  return DisplayType.init(rawValue:)(*a1);
}

void sub_34948(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 1684632167;
  if (v2 != 1)
    v4 = 1953720684;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6E776F6E6B6E75;
  if (!v5)
    v3 = 0xE400000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_34998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_34B0C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_349F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_34B0C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for DisplayType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_34A8C + 4 * byte_1F3E45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_34AC0 + 4 * byte_1F3E40[v4]))();
}

uint64_t sub_34AC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_34AC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x34AD0);
  return result;
}

uint64_t sub_34ADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x34AE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_34AE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_34AF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayType()
{
  return &type metadata for DisplayType;
}

unint64_t sub_34B0C()
{
  unint64_t result;

  result = qword_297380;
  if (!qword_297380)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DisplayType, &type metadata for DisplayType);
    atomic_store(result, (unint64_t *)&qword_297380);
  }
  return result;
}

uint64_t sub_34B54()
{
  return 0x546C61766F6D6572;
}

uint64_t sub_34B74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x546C61766F6D6572 && a2 == 0xEB00000000657079)
  {
    result = swift_bridgeObjectRelease(0xEB00000000657079);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x546C61766F6D6572, 0xEB00000000657079, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_34C20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_34FC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_34C48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_34FC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WantListRemovalTypeData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_297388);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_34FC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WantListRemovalTypeData.CodingKeys, &type metadata for WantListRemovalTypeData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_35008();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for RemovalType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t WantListRemovalTypeData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_2973A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_34FC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WantListRemovalTypeData.CodingKeys, &type metadata for WantListRemovalTypeData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_3504C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for RemovalType, v13, v5, &type metadata for RemovalType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_34E88@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return WantListRemovalTypeData.init(from:)(a1, a2);
}

uint64_t sub_34E9C(_QWORD *a1)
{
  return WantListRemovalTypeData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics23WantListRemovalTypeDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x800000000021E4F0;
  v4 = 0xD000000000000012;
  if (v2 == 1)
  {
    v5 = 0x800000000021E4F0;
  }
  else
  {
    v4 = 0x6F4465766F6D6572;
    v5 = 0xEE0064616F6C6E77;
  }
  if (*a1)
    v6 = v4;
  else
    v6 = 0x6E776F6E6B6E75;
  if (v2)
    v7 = v5;
  else
    v7 = 0xE700000000000000;
  v8 = 0xD000000000000012;
  if (*a2 != 1)
  {
    v8 = 0x6F4465766F6D6572;
    v3 = 0xEE0064616F6C6E77;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6E776F6E6B6E75;
  if (*a2)
    v10 = v3;
  else
    v10 = 0xE700000000000000;
  if (v6 == v9 && v7 == v10)
  {
    v11 = 1;
    v10 = v7;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

unint64_t sub_34FC4()
{
  unint64_t result;

  result = qword_297390;
  if (!qword_297390)
  {
    result = swift_getWitnessTable(&unk_1F410C, &type metadata for WantListRemovalTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297390);
  }
  return result;
}

unint64_t sub_35008()
{
  unint64_t result;

  result = qword_297398;
  if (!qword_297398)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RemovalType, &type metadata for RemovalType);
    atomic_store(result, (unint64_t *)&qword_297398);
  }
  return result;
}

unint64_t sub_3504C()
{
  unint64_t result;

  result = qword_2973A8;
  if (!qword_2973A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RemovalType, &type metadata for RemovalType);
    atomic_store(result, (unint64_t *)&qword_2973A8);
  }
  return result;
}

unint64_t sub_35094()
{
  unint64_t result;

  result = qword_2973B0;
  if (!qword_2973B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WantListRemovalTypeData, &type metadata for WantListRemovalTypeData);
    atomic_store(result, (unint64_t *)&qword_2973B0);
  }
  return result;
}

unint64_t sub_350DC()
{
  unint64_t result;

  result = qword_2973B8;
  if (!qword_2973B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WantListRemovalTypeData, &type metadata for WantListRemovalTypeData);
    atomic_store(result, (unint64_t *)&qword_2973B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WantListRemovalTypeData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_3516C + 4 * byte_1F3F65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_351A0 + 4 * byte_1F3F60[v4]))();
}

uint64_t sub_351A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_351A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x351B0);
  return result;
}

uint64_t sub_351BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x351C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_351C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_351D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WantListRemovalTypeData()
{
  return &type metadata for WantListRemovalTypeData;
}

uint64_t storeEnumTagSinglePayload for WantListRemovalTypeData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_3522C + 4 * byte_1F3F6A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_3524C + 4 * byte_1F3F6F[v4]))();
}

_BYTE *sub_3522C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_3524C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_35254(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_3525C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_35264(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_3526C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WantListRemovalTypeData.CodingKeys()
{
  return &type metadata for WantListRemovalTypeData.CodingKeys;
}

unint64_t sub_3528C()
{
  unint64_t result;

  result = qword_2973C0;
  if (!qword_2973C0)
  {
    result = swift_getWitnessTable(&unk_1F40E4, &type metadata for WantListRemovalTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2973C0);
  }
  return result;
}

unint64_t sub_352D4()
{
  unint64_t result;

  result = qword_2973C8;
  if (!qword_2973C8)
  {
    result = swift_getWitnessTable("Չ\a", &type metadata for WantListRemovalTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2973C8);
  }
  return result;
}

unint64_t sub_3531C()
{
  unint64_t result;

  result = qword_2973D0;
  if (!qword_2973D0)
  {
    result = swift_getWitnessTable(&unk_1F407C, &type metadata for WantListRemovalTypeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2973D0);
  }
  return result;
}

uint64_t sub_35360(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2973D8, &enum case for SessionGroup.default(_:));
}

uint64_t static FlowcaseExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295550, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2973D8, a1);
}

uint64_t sub_353A0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2973F0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static FlowcaseExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295558, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2973F0, a1);
}

uint64_t FlowcaseExposureEvent.flowcaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for FlowcaseExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_297498, (uint64_t)&nominal type descriptor for FlowcaseExposureEvent);
}

uint64_t FlowcaseExposureEvent.flowcaseData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.flowcaseData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.linkData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.pageData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_296A08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.pageData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.mediaData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_2969F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.mediaData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.upSellData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 40);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.suggestionData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.dealsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_297410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.dealsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 44);
  v4 = sub_71B4(&qword_297410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.dealsData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.eventData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 52);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent(0) + 52);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FlowcaseExposureEvent.timedData.modify())()
{
  type metadata accessor for FlowcaseExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t FlowcaseExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for FlowcaseExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = enum case for EventProperty.optional<A>(_:);
  v13 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v11, v12, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v12, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v12, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v12, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
}

uint64_t FlowcaseExposureEvent.Model.flowcaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(_DWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = *(_QWORD *)(v1 + 144);
  v6 = *(_QWORD *)(v1 + 152);
  v7 = *(_BYTE *)(v1 + 160);
  v9 = *(_QWORD *)(v1 + 168);
  v8 = *(_QWORD *)(v1 + 176);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v5);
}

_QWORD *FlowcaseExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[6];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_OWORD *)(v1 + 232);
  v12[2] = *(_OWORD *)(v1 + 216);
  v12[3] = v2;
  v3 = *(_OWORD *)(v1 + 248);
  v4 = *(_OWORD *)(v1 + 200);
  v12[0] = *(_OWORD *)(v1 + 184);
  v12[1] = v4;
  v5 = *(_OWORD *)(v1 + 296);
  v6 = *(_OWORD *)(v1 + 264);
  v13 = *(_OWORD *)(v1 + 280);
  v14 = v5;
  v7 = *(_OWORD *)(v1 + 296);
  v15 = *(_OWORD *)(v1 + 312);
  v8 = *(_OWORD *)(v1 + 264);
  v12[4] = v3;
  v12[5] = v8;
  v16 = *(_QWORD *)(v1 + 328);
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 312);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 328);
  v9 = *(_OWORD *)(v1 + 232);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 216);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 248);
  *(_OWORD *)(a1 + 80) = v6;
  v10 = *(_OWORD *)(v1 + 200);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 184);
  *(_OWORD *)(a1 + 16) = v10;
  return sub_2DC18(v12);
}

uint64_t FlowcaseExposureEvent.Model.pageData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 360);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 336);
  v3 = *(_OWORD *)(v1 + 344);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v2);
}

uint64_t FlowcaseExposureEvent.Model.mediaData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(v1 + 368);
  v3 = *(_QWORD *)(v1 + 376);
  v4 = *(_QWORD *)(v1 + 384);
  v5 = *(_QWORD *)(v1 + 392);
  v6 = *(_DWORD *)(v1 + 400);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  return sub_35E04(v2, v3, v4, v5);
}

uint64_t sub_35E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t FlowcaseExposureEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 424);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 408);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

void FlowcaseExposureEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 432);
}

void FlowcaseExposureEvent.Model.dealsData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 433);
}

uint64_t FlowcaseExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent.Model(0) + 48);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for FlowcaseExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_297558, (uint64_t)&nominal type descriptor for FlowcaseExposureEvent.Model);
}

uint64_t FlowcaseExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowcaseExposureEvent.Model(0) + 52);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowcaseExposureEvent.Model.init(sectionData:flowcaseData:linkData:pageData:mediaData:upSellData:suggestionData:dealsData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  char v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v12 = *(_DWORD *)(a1 + 4);
  v13 = *(_OWORD *)(a1 + 8);
  v14 = *(_OWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_DWORD *)(a1 + 88);
  v18 = *(_BYTE *)(a1 + 92);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *a2;
  v22 = a2[1];
  v23 = *((_DWORD *)a2 + 4);
  v24 = *(_OWORD *)(a2 + 3);
  v25 = a2[5];
  v26 = *((_BYTE *)a2 + 48);
  v27 = *(_QWORD *)(a4 + 16);
  v28 = *(_QWORD *)(a4 + 24);
  v29 = *(_DWORD *)(a5 + 32);
  v30 = *(_QWORD *)(a6 + 16);
  v31 = *a7;
  v32 = *a8;
  *(_BYTE *)a9 = *(_BYTE *)a1;
  *(_DWORD *)(a9 + 4) = v12;
  *(_OWORD *)(a9 + 8) = v13;
  *(_OWORD *)(a9 + 24) = v14;
  *(_QWORD *)(a9 + 40) = v15;
  *(_QWORD *)(a9 + 48) = v16;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a9 + 72) = *(_OWORD *)(a1 + 72);
  *(_DWORD *)(a9 + 88) = v17;
  *(_BYTE *)(a9 + 92) = v18;
  *(_QWORD *)(a9 + 96) = v19;
  *(_QWORD *)(a9 + 104) = v20;
  *(_QWORD *)(a9 + 112) = v21;
  *(_QWORD *)(a9 + 120) = v22;
  *(_DWORD *)(a9 + 128) = v23;
  *(_OWORD *)(a9 + 136) = v24;
  *(_QWORD *)(a9 + 152) = v25;
  *(_BYTE *)(a9 + 160) = v26;
  *(_OWORD *)(a9 + 168) = *(_OWORD *)(a2 + 7);
  v33 = (_OWORD *)(a9 + 184);
  v34 = *(_OWORD *)(a3 + 96);
  v35 = *(_OWORD *)(a3 + 128);
  v33[7] = *(_OWORD *)(a3 + 112);
  v33[8] = v35;
  *(_QWORD *)(a9 + 328) = *(_QWORD *)(a3 + 144);
  v36 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a9 + 216) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a9 + 232) = v36;
  v37 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a9 + 248) = *(_OWORD *)(a3 + 64);
  v33[5] = v37;
  v33[6] = v34;
  v38 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a9 + 184) = *(_OWORD *)a3;
  *(_OWORD *)(a9 + 200) = v38;
  *(_OWORD *)(a9 + 336) = *(_OWORD *)a4;
  *(_QWORD *)(a9 + 352) = v27;
  *(_QWORD *)(a9 + 360) = v28;
  v39 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 368) = *(_OWORD *)a5;
  *(_OWORD *)(a9 + 384) = v39;
  *(_DWORD *)(a9 + 400) = v29;
  *(_OWORD *)(a9 + 408) = *(_OWORD *)a6;
  *(_QWORD *)(a9 + 424) = v30;
  *(_BYTE *)(a9 + 432) = v31;
  *(_BYTE *)(a9 + 433) = v32;
  v40 = type metadata accessor for FlowcaseExposureEvent.Model(0);
  v41 = a9 + *(int *)(v40 + 48);
  v42 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v41, a10, v42);
  v43 = a9 + *(int *)(v40 + 52);
  v44 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v43, a11, v44);
}

uint64_t sub_360A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_360DC + 4 * byte_1F4160[a1]))(0x446E6F6974636573, 0xEB00000000617461);
}

uint64_t sub_360DC()
{
  return 0x65736163776F6C66;
}

uint64_t sub_360FC()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_36124()
{
  return 0x746144616964656DLL;
}

uint64_t sub_361B0()
{
  unsigned __int8 *v0;

  return sub_360A0(*v0);
}

uint64_t sub_361B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_399B8(a1, a2);
  *a3 = result;
  return result;
}

void sub_361DC(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_361E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3671C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_36210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3671C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowcaseExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char v53;
  _OWORD v54[3];
  _BYTE v55[48];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  _QWORD v61[2];
  int v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  __int128 v66;

  v3 = v1;
  v5 = sub_71B4(&qword_297418);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_3671C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FlowcaseExposureEvent.Model.CodingKeys, &type metadata for FlowcaseExposureEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_DWORD *)(v3 + 4);
  v13 = *(_OWORD *)(v3 + 8);
  v14 = *(_OWORD *)(v3 + 24);
  v15 = *(_QWORD *)(v3 + 40);
  v16 = *(_QWORD *)(v3 + 48);
  v17 = *(_DWORD *)(v3 + 88);
  v18 = *(_BYTE *)(v3 + 92);
  v19 = *(_QWORD *)(v3 + 96);
  v20 = *(_QWORD *)(v3 + 104);
  LOBYTE(v54[0]) = *(_BYTE *)v3;
  DWORD1(v54[0]) = v12;
  *(_OWORD *)((char *)v54 + 8) = v13;
  *(_OWORD *)((char *)&v54[1] + 8) = v14;
  *((_QWORD *)&v54[2] + 1) = v15;
  *(_QWORD *)v55 = v16;
  *(_OWORD *)&v55[8] = *(_OWORD *)(v3 + 56);
  *(_OWORD *)&v55[24] = *(_OWORD *)(v3 + 72);
  *(_DWORD *)&v55[40] = v17;
  v55[44] = v18;
  *(_QWORD *)&v56 = v19;
  *((_QWORD *)&v56 + 1) = v20;
  LOBYTE(v61[0]) = 0;
  v21 = sub_1B768();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v54, v61, v5, &type metadata for SectionData, v21);
  if (!v2)
  {
    v22 = *(_QWORD *)(v3 + 120);
    v23 = *(_DWORD *)(v3 + 128);
    v24 = *(_OWORD *)(v3 + 136);
    v25 = *(_QWORD *)(v3 + 152);
    v26 = *(_BYTE *)(v3 + 160);
    v61[0] = *(_QWORD *)(v3 + 112);
    v61[1] = v22;
    v62 = v23;
    v63 = v24;
    v64 = v25;
    v65 = v26;
    v66 = *(_OWORD *)(v3 + 168);
    v60 = 1;
    v27 = sub_21244();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v61, &v60, v5, &type metadata for FlowcaseData, v27);
    v28 = *(_OWORD *)(v3 + 232);
    v54[2] = *(_OWORD *)(v3 + 216);
    *(_OWORD *)v55 = v28;
    v29 = *(_OWORD *)(v3 + 200);
    v54[0] = *(_OWORD *)(v3 + 184);
    v54[1] = v29;
    v30 = *(_OWORD *)(v3 + 296);
    v31 = *(_OWORD *)(v3 + 312);
    v32 = *(_OWORD *)(v3 + 264);
    v56 = *(_OWORD *)(v3 + 280);
    v57 = v30;
    v59 = *(_QWORD *)(v3 + 328);
    v58 = v31;
    *(_OWORD *)&v55[16] = *(_OWORD *)(v3 + 248);
    *(_OWORD *)&v55[32] = v32;
    v53 = 2;
    v33 = sub_1B7F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v54, &v53, v5, &type metadata for LinkData, v33);
    v34 = *(_QWORD *)(v3 + 352);
    v35 = *(_QWORD *)(v3 + 360);
    v54[0] = *(_OWORD *)(v3 + 336);
    *(_QWORD *)&v54[1] = v34;
    *((_QWORD *)&v54[1] + 1) = v35;
    v53 = 3;
    v36 = sub_1B7AC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v54, &v53, v5, &type metadata for PageData, v36);
    v37 = *(_DWORD *)(v3 + 400);
    v38 = *(_OWORD *)(v3 + 384);
    v54[0] = *(_OWORD *)(v3 + 368);
    v54[1] = v38;
    LODWORD(v54[2]) = v37;
    v53 = 4;
    v39 = sub_19F90();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v54, &v53, v5, &type metadata for MediaData, v39);
    v40 = *(_QWORD *)(v3 + 424);
    v54[0] = *(_OWORD *)(v3 + 408);
    *(_QWORD *)&v54[1] = v40;
    v53 = 5;
    v41 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v54, &v53, v5, &type metadata for UpSellData, v41);
    LOBYTE(v54[0]) = *(_BYTE *)(v3 + 432);
    v53 = 6;
    v42 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v54, &v53, v5, &type metadata for SuggestionData, v42);
    LOBYTE(v54[0]) = *(_BYTE *)(v3 + 433);
    v53 = 7;
    v43 = sub_36760();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v54, &v53, v5, &type metadata for DealsData, v43);
    v44 = type metadata accessor for FlowcaseExposureEvent.Model(0);
    v45 = v3 + *(int *)(v44 + 48);
    LOBYTE(v54[0]) = 8;
    v46 = type metadata accessor for EventData(0);
    v47 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v45, v54, v5, v46, v47);
    v48 = v3 + *(int *)(v44 + 52);
    LOBYTE(v54[0]) = 9;
    v49 = type metadata accessor for TimedData(0);
    v50 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v48, v54, v5, v49, v50);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_3671C()
{
  unint64_t result;

  result = qword_297420;
  if (!qword_297420)
  {
    result = swift_getWitnessTable(&unk_1F4424, &type metadata for FlowcaseExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297420);
  }
  return result;
}

unint64_t sub_36760()
{
  unint64_t result;

  result = qword_297428;
  if (!qword_297428)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DealsData, &type metadata for DealsData);
    atomic_store(result, (unint64_t *)&qword_297428);
  }
  return result;
}

uint64_t FlowcaseExposureEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  __int128 v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  int v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _BYTE *v62;
  __int128 v63;
  __int128 v64;
  int v65;
  _BYTE v66[48];
  _BYTE v67[48];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  char v73;

  v54 = a2;
  v3 = type metadata accessor for TimedData(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = type metadata accessor for EventData(0);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v8 = (uint64_t *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = sub_71B4(&qword_297430);
  v9 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for FlowcaseExposureEvent.Model(0);
  __chkstk_darwin(v58);
  v62 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v60 = a1;
  sub_7988(a1, v14);
  v15 = sub_3671C();
  v55 = v11;
  v16 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FlowcaseExposureEvent.Model.CodingKeys, &type metadata for FlowcaseExposureEvent.Model.CodingKeys, v15, v14, v13);
  if (v16)
    return sub_7DAC(v60);
  v61 = v8;
  LOBYTE(v63) = 0;
  v17 = sub_1BFE4();
  v18 = v56;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v66, &type metadata for SectionData, &v63, v56, &type metadata for SectionData, v17);
  v19 = *(_DWORD *)&v66[4];
  v20 = *(_OWORD *)&v66[8];
  v21 = *(_OWORD *)&v66[24];
  v22 = *(_QWORD *)&v66[40];
  v23 = *(_QWORD *)v67;
  v24 = *(_DWORD *)&v67[40];
  v25 = v67[44];
  v26 = v68;
  v27 = v62;
  *v62 = v66[0];
  *((_DWORD *)v27 + 1) = v19;
  *(_OWORD *)(v27 + 8) = v20;
  *(_OWORD *)(v27 + 24) = v21;
  *((_QWORD *)v27 + 5) = v22;
  *((_QWORD *)v27 + 6) = v23;
  *(_OWORD *)(v27 + 56) = *(_OWORD *)&v67[8];
  *(_OWORD *)(v27 + 72) = *(_OWORD *)&v67[24];
  *((_DWORD *)v27 + 22) = v24;
  v27[92] = v25;
  *((_OWORD *)v27 + 6) = v26;
  LOBYTE(v63) = 1;
  v28 = sub_211FC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v66, &type metadata for FlowcaseData, &v63, v18, &type metadata for FlowcaseData, v28);
  v29 = *(_QWORD *)&v66[8];
  v30 = *(_DWORD *)&v66[16];
  v31 = *(_OWORD *)&v66[24];
  v32 = *(_QWORD *)&v66[40];
  v33 = v67[0];
  *((_QWORD *)v27 + 14) = *(_QWORD *)v66;
  *((_QWORD *)v27 + 15) = v29;
  *((_DWORD *)v27 + 32) = v30;
  *(_OWORD *)(v27 + 136) = v31;
  *((_QWORD *)v27 + 19) = v32;
  v27[160] = v33;
  *(_OWORD *)(v27 + 168) = *(_OWORD *)&v67[8];
  v73 = 2;
  v34 = sub_1C06C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v66, &type metadata for LinkData, &v73, v18, &type metadata for LinkData, v34);
  v35 = *(_OWORD *)v67;
  *(_OWORD *)(v27 + 216) = *(_OWORD *)&v66[32];
  *(_OWORD *)(v27 + 232) = v35;
  v36 = *(_OWORD *)&v67[32];
  *(_OWORD *)(v27 + 248) = *(_OWORD *)&v67[16];
  v37 = *(_OWORD *)&v66[16];
  *(_OWORD *)(v27 + 184) = *(_OWORD *)v66;
  *(_OWORD *)(v27 + 200) = v37;
  v38 = v68;
  v39 = v70;
  *(_OWORD *)(v27 + 296) = v69;
  *(_OWORD *)(v27 + 312) = v39;
  *((_QWORD *)v27 + 41) = v71;
  *(_OWORD *)(v27 + 264) = v36;
  *(_OWORD *)(v27 + 280) = v38;
  v72 = 3;
  v40 = sub_1C028();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for PageData, &v72, v18, &type metadata for PageData, v40);
  v41 = v64;
  *((_OWORD *)v27 + 21) = v63;
  *((_OWORD *)v27 + 22) = v41;
  v72 = 4;
  v42 = sub_19F48();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for MediaData, &v72, v18, &type metadata for MediaData, v42);
  v43 = v65;
  v44 = v64;
  *((_OWORD *)v27 + 23) = v63;
  *((_OWORD *)v27 + 24) = v44;
  *((_DWORD *)v27 + 100) = v43;
  v72 = 5;
  v45 = sub_2F26C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for UpSellData, &v72, v18, &type metadata for UpSellData, v45);
  v46 = v64;
  *(_OWORD *)(v27 + 408) = v63;
  *((_QWORD *)v27 + 53) = v46;
  v72 = 6;
  v47 = sub_2F2F4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for SuggestionData, &v72, v18, &type metadata for SuggestionData, v47);
  v27[432] = v63;
  v72 = 7;
  v48 = sub_370E4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v63, &type metadata for DealsData, &v72, v18, &type metadata for DealsData, v48);
  v27[433] = v63;
  LOBYTE(v63) = 8;
  v49 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v61, v59, &v63, v18, v59, v49);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v57 + 32))(&v27[*(int *)(v58 + 48)], v61, v59);
  LOBYTE(v63) = 9;
  v50 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v3, &v63, v18, v3, v50);
  v61 = 0;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v55, v56);
  v51 = (uint64_t)v62;
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v4 + 32))(&v62[*(int *)(v58 + 52)], v6, v3);
  sub_37128(v51, v54);
  sub_7DAC(v60);
  return sub_3716C(v51);
}

uint64_t sub_370B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

unint64_t sub_370E4()
{
  unint64_t result;

  result = qword_297438;
  if (!qword_297438)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DealsData, &type metadata for DealsData);
    atomic_store(result, (unint64_t *)&qword_297438);
  }
  return result;
}

uint64_t sub_37128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FlowcaseExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_3716C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FlowcaseExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_371A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FlowcaseExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_371BC(_QWORD *a1)
{
  return FlowcaseExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_371D0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295550, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2973D8, (uint64_t)sub_35360, a1);
}

uint64_t sub_371F4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295558, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2973F0, (uint64_t)sub_353A0, a1);
}

uint64_t sub_37218@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = enum case for EventProperty.optional<A>(_:);
  v14 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v13, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v13, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v13, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
}

uint64_t *initializeBufferWithCopyOfBuffer for FlowcaseExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v44 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v44 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v44);
  }
  else
  {
    v7 = sub_71B4(&qword_296A00);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297408);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296A08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_2969F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_297410);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  }
  return a1;
}

uint64_t destroy for FlowcaseExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

uint64_t initializeWithCopy for FlowcaseExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  return a1;
}

uint64_t assignWithCopy for FlowcaseExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  return a1;
}

uint64_t initializeWithTake for FlowcaseExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  return a1;
}

uint64_t assignWithTake for FlowcaseExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2969F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_297410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowcaseExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3802C);
}

uint64_t sub_3802C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_71B4(&qword_296A00);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297408);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A10);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296A08);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_2969F0);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296F68);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296F78);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_297410);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_295D70);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v8 = sub_71B4(&qword_295D78);
                    v12 = *(_QWORD *)(v8 - 8);
                    v13 = a3[13];
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for FlowcaseExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_381F4);
}

uint64_t sub_381F4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = sub_71B4(&qword_296A00);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297408);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A10);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296A08);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_2969F0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296F68);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296F78);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_297410);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_295D70);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v10 = sub_71B4(&qword_295D78);
                    v14 = *(_QWORD *)(v10 - 8);
                    v15 = a4[13];
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_383B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[10];

  sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
  if (v3 <= 0x3F)
  {
    v22[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2974A8, (uint64_t (*)(void))sub_211FC, (uint64_t (*)(void))sub_21244, (uint64_t)&type metadata for FlowcaseData);
    if (v5 <= 0x3F)
    {
      v22[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
      if (v7 <= 0x3F)
      {
        v22[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_296B00, (uint64_t (*)(void))sub_1C028, (uint64_t (*)(void))sub_1B7AC, (uint64_t)&type metadata for PageData);
        if (v9 <= 0x3F)
        {
          v22[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_296AE8, (uint64_t (*)(void))sub_19F48, (uint64_t (*)(void))sub_19F90, (uint64_t)&type metadata for MediaData);
          if (v11 <= 0x3F)
          {
            v22[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
            if (v13 <= 0x3F)
            {
              v22[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
              if (v15 <= 0x3F)
              {
                v22[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, (unint64_t *)&unk_2974B0, (uint64_t (*)(void))sub_370E4, (uint64_t (*)(void))sub_36760, (uint64_t)&type metadata for DealsData);
                if (v17 <= 0x3F)
                {
                  v22[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_8734(319);
                  if (v19 <= 0x3F)
                  {
                    v22[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_87D8(319);
                    if (v21 <= 0x3F)
                    {
                      v22[9] = *(_QWORD *)(v20 - 8) + 64;
                      swift_initStructMetadata(a1, 256, 10, v22, a1 + 16);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for FlowcaseExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    v6 = a2[2];
    *(_QWORD *)(v4 + 8) = a2[1];
    *(_QWORD *)(v4 + 16) = v6;
    v40 = a2[4];
    *(_QWORD *)(v4 + 24) = a2[3];
    *(_QWORD *)(v4 + 32) = v40;
    v39 = a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v39;
    v38 = a2[8];
    *(_QWORD *)(v4 + 56) = a2[7];
    *(_QWORD *)(v4 + 64) = v38;
    v37 = a2[10];
    *(_QWORD *)(v4 + 72) = a2[9];
    *(_QWORD *)(v4 + 80) = v37;
    *(_DWORD *)(v4 + 88) = *((_DWORD *)a2 + 22);
    *(_BYTE *)(v4 + 92) = *((_BYTE *)a2 + 92);
    v36 = a2[13];
    *(_QWORD *)(v4 + 96) = a2[12];
    *(_QWORD *)(v4 + 104) = v36;
    v35 = a2[15];
    *(_QWORD *)(v4 + 112) = a2[14];
    *(_QWORD *)(v4 + 120) = v35;
    *(_DWORD *)(v4 + 128) = *((_DWORD *)a2 + 32);
    v34 = a2[18];
    *(_QWORD *)(v4 + 136) = a2[17];
    *(_QWORD *)(v4 + 144) = v34;
    *(_BYTE *)(v4 + 160) = *((_BYTE *)a2 + 160);
    *(_QWORD *)(v4 + 152) = a2[19];
    v33 = a2[22];
    *(_QWORD *)(v4 + 168) = a2[21];
    *(_QWORD *)(v4 + 176) = v33;
    v32 = a2[24];
    *(_QWORD *)(v4 + 184) = a2[23];
    *(_QWORD *)(v4 + 192) = v32;
    v31 = a2[26];
    *(_QWORD *)(v4 + 200) = a2[25];
    *(_QWORD *)(v4 + 208) = v31;
    v30 = a2[28];
    *(_QWORD *)(v4 + 216) = a2[27];
    *(_QWORD *)(v4 + 224) = v30;
    *(_BYTE *)(v4 + 232) = *((_BYTE *)a2 + 232);
    v7 = a2[31];
    *(_QWORD *)(v4 + 240) = a2[30];
    *(_QWORD *)(v4 + 248) = v7;
    v8 = a2[33];
    *(_QWORD *)(v4 + 256) = a2[32];
    *(_QWORD *)(v4 + 264) = v8;
    v9 = a2[35];
    *(_QWORD *)(v4 + 272) = a2[34];
    *(_QWORD *)(v4 + 280) = v9;
    v10 = a2[37];
    *(_QWORD *)(v4 + 288) = a2[36];
    *(_QWORD *)(v4 + 296) = v10;
    v11 = a2[39];
    *(_QWORD *)(v4 + 304) = a2[38];
    *(_QWORD *)(v4 + 312) = v11;
    v12 = a2[41];
    *(_QWORD *)(v4 + 320) = a2[40];
    *(_QWORD *)(v4 + 328) = v12;
    v13 = a2[43];
    *(_QWORD *)(v4 + 336) = a2[42];
    *(_QWORD *)(v4 + 344) = v13;
    v14 = a2[45];
    *(_QWORD *)(v4 + 352) = a2[44];
    *(_QWORD *)(v4 + 360) = v14;
    v29 = a2[47];
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    if (v29)
    {
      *(_QWORD *)(v4 + 368) = a2[46];
      *(_QWORD *)(v4 + 376) = v29;
      v15 = a2[49];
      *(_QWORD *)(v4 + 384) = a2[48];
      *(_QWORD *)(v4 + 392) = v15;
      *(_DWORD *)(v4 + 400) = *((_DWORD *)a2 + 100);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 24);
      *(_OWORD *)(v4 + 368) = *((_OWORD *)a2 + 23);
      *(_OWORD *)(v4 + 384) = v17;
      *(_DWORD *)(v4 + 400) = *((_DWORD *)a2 + 100);
    }
    *(_WORD *)(v4 + 408) = *((_WORD *)a2 + 204);
    v18 = a2[53];
    *(_QWORD *)(v4 + 416) = a2[52];
    *(_QWORD *)(v4 + 424) = v18;
    *(_WORD *)(v4 + 432) = *((_WORD *)a2 + 216);
    v19 = *(int *)(a3 + 48);
    v20 = v4 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for EventData(0);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_bridgeObjectRetain(v18);
    v23(v20, v21, v22);
    v24 = *(int *)(a3 + 52);
    v25 = v4 + v24;
    v26 = (uint64_t)a2 + v24;
    v27 = type metadata accessor for TimedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return v4;
}

uint64_t destroy for FlowcaseExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[33]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[37]);
  swift_bridgeObjectRelease(a1[39]);
  swift_bridgeObjectRelease(a1[41]);
  swift_bridgeObjectRelease(a1[43]);
  swift_bridgeObjectRelease(a1[45]);
  v4 = a1[47];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[49]);
  }
  swift_bridgeObjectRelease(a1[53]);
  v5 = (char *)a1 + *(int *)(a2 + 48);
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(a2 + 52);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for FlowcaseExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v38 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v38;
  v37 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v37;
  v36 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v36;
  v35 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v34 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v34;
  v33 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v33;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v32 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v32;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v31 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v31;
  v30 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v30;
  v29 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v29;
  v28 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v28;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v6 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v6;
  v7 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v7;
  v8 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v8;
  v9 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v9;
  v10 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v10;
  v11 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v11;
  v12 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v12;
  v13 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v13;
  v27 = *(_QWORD *)(a2 + 376);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  if (v27)
  {
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = v27;
    v14 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = v14;
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v15;
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  }
  *(_WORD *)(a1 + 408) = *(_WORD *)(a2 + 408);
  v16 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v16;
  *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 432);
  v17 = *(int *)(a3 + 48);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain(v16);
  v21(v18, v19, v20);
  v22 = *(int *)(a3 + 52);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  return a1;
}

uint64_t assignWithCopy for FlowcaseExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v26 = *(_QWORD *)(a2 + 192);
  v27 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v28 = *(_QWORD *)(a2 + 208);
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v30 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v32 = *(_QWORD *)(a2 + 248);
  v33 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v34 = *(_QWORD *)(a2 + 264);
  v35 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v36 = *(_QWORD *)(a2 + 280);
  v37 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v38 = *(_QWORD *)(a2 + 296);
  v39 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v40 = *(_QWORD *)(a2 + 312);
  v41 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v42 = *(_QWORD *)(a2 + 328);
  v43 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  v44 = *(_QWORD *)(a2 + 344);
  v45 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  v46 = *(_QWORD *)(a2 + 360);
  v47 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (_OWORD *)(a1 + 368);
  v49 = (_OWORD *)(a2 + 368);
  v50 = *(_QWORD *)(a1 + 376);
  v51 = *(_QWORD *)(a2 + 376);
  if (v50)
  {
    if (v51)
    {
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      v52 = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 376) = v52;
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRelease(v50);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      v53 = *(_QWORD *)(a2 + 392);
      v54 = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v54);
      *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    }
    else
    {
      sub_39158(a1 + 368);
      v57 = *(_DWORD *)(a2 + 400);
      v58 = *(_OWORD *)(a2 + 384);
      *v48 = *v49;
      *(_OWORD *)(a1 + 384) = v58;
      *(_DWORD *)(a1 + 400) = v57;
    }
  }
  else if (v51)
  {
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    v55 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 376) = v55;
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    v56 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 392) = v56;
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
  }
  else
  {
    v59 = *v49;
    v60 = *(_OWORD *)(a2 + 384);
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    *v48 = v59;
    *(_OWORD *)(a1 + 384) = v60;
  }
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  *(_BYTE *)(a1 + 409) = *(_BYTE *)(a2 + 409);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  v61 = *(_QWORD *)(a2 + 424);
  v62 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
  v63 = *(int *)(a3 + 48);
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  v67 = *(int *)(a3 + 52);
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  return a1;
}

uint64_t sub_39158(uint64_t a1)
{
  destroy for ThemesData(a1);
  return a1;
}

uint64_t initializeWithTake for FlowcaseExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v13 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v13;
  v14 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v14;
  v15 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v15;
  v16 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v16;
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  v17 = *(int *)(a3 + 48);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 432);
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = *(int *)(a3 + 52);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  return a1;
}

uint64_t assignWithTake for FlowcaseExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v20;
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v22 = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 192);
  v25 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 208);
  v27 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 224);
  v29 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v28;
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v30 = *(_QWORD *)(a2 + 248);
  v31 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 264);
  v33 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(a2 + 280);
  v35 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(a2 + 296);
  v37 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v36;
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(a2 + 312);
  v39 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v38;
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(a2 + 328);
  v41 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v40;
  swift_bridgeObjectRelease(v41);
  v42 = *(_QWORD *)(a2 + 344);
  v43 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v42;
  swift_bridgeObjectRelease(v43);
  v44 = *(_QWORD *)(a2 + 360);
  v45 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v44;
  swift_bridgeObjectRelease(v45);
  v46 = *(_QWORD *)(a1 + 376);
  if (!v46)
    goto LABEL_5;
  v47 = *(_QWORD *)(a2 + 376);
  if (!v47)
  {
    sub_39158(a1 + 368);
LABEL_5:
    v50 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v50;
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v47;
  swift_bridgeObjectRelease(v46);
  v48 = *(_QWORD *)(a2 + 392);
  v49 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v48;
  swift_bridgeObjectRelease(v49);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
LABEL_6:
  *(_WORD *)(a1 + 408) = *(_WORD *)(a2 + 408);
  v51 = *(_QWORD *)(a2 + 424);
  v52 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v51;
  swift_bridgeObjectRelease(v52);
  *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 432);
  v53 = *(int *)(a3 + 48);
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 40))(v54, v55, v56);
  v57 = *(int *)(a3 + 52);
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 40))(v58, v59, v60);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowcaseExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_39568);
}

uint64_t sub_39568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 48);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FlowcaseExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_39614);
}

uint64_t sub_39614(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 48);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_396B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[10];

  v5[0] = "p";
  v5[1] = &unk_1F42B8;
  v5[2] = &unk_1F42D0;
  v5[3] = &unk_1F42E8;
  v5[4] = &unk_1F4300;
  v5[5] = &unk_1F4318;
  v5[6] = &unk_1F4330;
  v5[7] = &unk_1F4348;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[8] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[9] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 10, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FlowcaseExposureEvent.Model.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FlowcaseExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_39860 + 4 * byte_1F416F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_39894 + 4 * byte_1F416A[v4]))();
}

uint64_t sub_39894(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3989C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x398A4);
  return result;
}

uint64_t sub_398B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x398B8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_398BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_398C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowcaseExposureEvent.Model.CodingKeys()
{
  return &type metadata for FlowcaseExposureEvent.Model.CodingKeys;
}

unint64_t sub_398E4()
{
  unint64_t result;

  result = qword_2975B0;
  if (!qword_2975B0)
  {
    result = swift_getWitnessTable(&unk_1F43FC, &type metadata for FlowcaseExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2975B0);
  }
  return result;
}

unint64_t sub_3992C()
{
  unint64_t result;

  result = qword_2975B8;
  if (!qword_2975B8)
  {
    result = swift_getWitnessTable(&unk_1F436C, &type metadata for FlowcaseExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2975B8);
  }
  return result;
}

unint64_t sub_39974()
{
  unint64_t result;

  result = qword_2975C0;
  if (!qword_2975C0)
  {
    result = swift_getWitnessTable(&unk_1F4394, &type metadata for FlowcaseExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2975C0);
  }
  return result;
}

uint64_t sub_399B8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65736163776F6C66 && a2 == 0xEC00000061746144)
  {
    v7 = 0xEC00000061746144;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736163776F6C66, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6174614465676170 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746144616964656DLL && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144616964656DLL, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v12 = 0xEE00617461446E6FLL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x746144736C616564 && a2 == 0xE900000000000061)
  {
    v13 = 0xE900000000000061;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144736C616564, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v14 = 0xE900000000000061;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t AppAnalyticsAdditionalData.supportsUnifiedProductPage.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___BAAppAnalyticsAdditionalData_supportsUnifiedProductPage);
}

uint64_t AppAnalyticsAdditionalData.editionKind.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BAAppAnalyticsAdditionalData_editionKind);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BAAppAnalyticsAdditionalData_editionKind + 8));
  return v1;
}

unint64_t static AppAnalyticsAdditionalData.supportsUnifiedProductPageKey.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static AppAnalyticsAdditionalData.editionKindKey.getter()
{
  return 0x4B6E6F6974696465;
}

id AppAnalyticsAdditionalData.__allocating_init(supportsUnifiedProductPage:editionKind:)(char a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  _BYTE *v7;
  _QWORD *v8;
  objc_super v10;

  v7 = objc_allocWithZone(v3);
  v7[OBJC_IVAR___BAAppAnalyticsAdditionalData_supportsUnifiedProductPage] = a1;
  v8 = &v7[OBJC_IVAR___BAAppAnalyticsAdditionalData_editionKind];
  *v8 = a2;
  v8[1] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, "init");
}

id AppAnalyticsAdditionalData.init(supportsUnifiedProductPage:editionKind:)(char a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _QWORD *v4;
  objc_super v6;

  v3[OBJC_IVAR___BAAppAnalyticsAdditionalData_supportsUnifiedProductPage] = a1;
  v4 = &v3[OBJC_IVAR___BAAppAnalyticsAdditionalData_editionKind];
  *v4 = a2;
  v4[1] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for AppAnalyticsAdditionalData();
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for AppAnalyticsAdditionalData()
{
  return objc_opt_self(BAAppAnalyticsAdditionalData);
}

unint64_t sub_3A138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = sub_71B4(&qword_2975D8);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_1F4480;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 40) = 0x800000000021EEE0;
  *(_BYTE *)(inited + 48) = *(_BYTE *)(v0 + OBJC_IVAR___BAAppAnalyticsAdditionalData_supportsUnifiedProductPage);
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = 0x4B6E6F6974696465;
  *(_QWORD *)(inited + 88) = 0xEB00000000646E69;
  v4 = *(_QWORD *)(v0 + OBJC_IVAR___BAAppAnalyticsAdditionalData_editionKind);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___BAAppAnalyticsAdditionalData_editionKind + 8);
  *(_QWORD *)(inited + 120) = sub_71B4(&qword_2975E0);
  *(_QWORD *)(inited + 96) = v4;
  *(_QWORD *)(inited + 104) = v3;
  swift_bridgeObjectRetain(v3);
  return sub_3A210(inited);
}

unint64_t sub_3A210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BAEventReporter *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  const char *v13;
  void *v14;
  void *v15;
  int64_t v16;
  void *v17;
  BOOL v18;
  void *v19;
  Class isa;
  BOOL v21;
  objc_class *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = (BAEventReporter *)&_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_71B4(&qword_297628);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (BAEventReporter *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_3A82C(v7, (uint64_t)&v23, &qword_297630);
    v8 = v23;
    v9 = v24;
    result = sub_DF7C(v23, v24);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)((char *)v4[3].super.isa + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_3A81C(&v25, (_OWORD *)(*(_QWORD *)v4[3].dataProviders + 32 * result));
    isa = v4[1].super.isa;
    v21 = __OFADD__(isa, 1);
    v22 = (Class)((char *)isa + 1);
    if (v21)
      goto LABEL_11;
    v4[1].super.isa = v22;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4, v13, v14, v15, v16, v17, v18, v19);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_3A344(BAEventReporter *a1, const char *a2, void *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  Class isa;
  uint64_t v10;
  BAEventReporter *v11;
  Class v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  BOOL v25;
  void *v26;
  Class v27;
  BOOL v28;
  objc_class *v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = (BAEventReporter *)&_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_71B4(&qword_297618);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (BAEventReporter *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  v14 = (uint64_t)&a1[2];
  swift_retain(v10);
  while (1)
  {
    sub_3A82C(v14, (uint64_t)v30, &qword_297620);
    result = sub_DFE0((uint64_t)v30);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t)v11[3].super.isa + 40 * result;
    v18 = v30[0];
    v19 = v30[1];
    *(_QWORD *)(v17 + 32) = v31;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (unint64_t)sub_3A81C(&v32, (_OWORD *)(*(_QWORD *)v11[3].dataProviders + 32 * result));
    v27 = v11[1].super.isa;
    v28 = __OFADD__(v27, 1);
    v29 = (Class)((char *)v27 + 1);
    if (v28)
      goto LABEL_11;
    v11[1].super.isa = v29;
    v14 += 72;
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_3A484(BAEventReporter *a1, const char *a2, void *a3, void *a4, void *a5, int64_t a6, int64_t a7, void *a8)
{
  Class isa;
  uint64_t v10;
  BAEventReporter *v11;
  Class v12;
  BAEventReporter *v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  unint64_t result;
  const char *v18;
  void *v19;
  void *v20;
  int64_t v21;
  void *v22;
  BOOL v23;
  void *v24;
  uint64_t *v25;
  Class v26;
  BOOL v27;
  objc_class *v28;

  isa = a1[1].super.isa;
  if (!isa)
  {
    v11 = (BAEventReporter *)&_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_71B4(&qword_297610);
  v10 = static _DictionaryStorage.allocate(capacity:)(isa);
  v11 = (BAEventReporter *)v10;
  v12 = a1[1].super.isa;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  swift_retain(v10);
  v13 = a1 + 3;
  while (1)
  {
    v14 = (uint64_t)v13[-1].super.isa;
    v15 = *(_QWORD *)v13[-1].dataProviders;
    v16 = v13->super.isa;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    result = sub_DAAC(v14, v15);
    if ((v18 & 1) != 0)
      break;
    *(Class *)((char *)&v11[4].super.isa + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) = (Class)(*(uint64_t *)((char *)&v11[4].super.isa + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) | (1 << result));
    v25 = (uint64_t *)((char *)v11[3].super.isa + 16 * result);
    *v25 = v14;
    v25[1] = v15;
    *(_QWORD *)(*(_QWORD *)v11[3].dataProviders + 8 * result) = v16;
    v26 = v11[1].super.isa;
    v27 = __OFADD__(v26, 1);
    v28 = (Class)((char *)v26 + 1);
    if (v27)
      goto LABEL_11;
    v11[1].super.isa = v28;
    v13 = (BAEventReporter *)((char *)v13 + 24);
    v12 = (Class)((char *)v12 - 1);
    if (!v12)
    {
      swift_release(v11, v18, v19, v20, v21, v22, v23, v24);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id Utilities.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void AppAnalyticsAdditionalData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookAnalytics.AppAnalyticsAdditionalData", 40, "init()", 6, 0);
  __break(1u);
}

id AppAnalyticsAdditionalData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppAnalyticsAdditionalData();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id _s13BookAnalytics03AppB14AdditionalDataC4data10dictionaryACSgSDySSypG_tFZ_0(uint64_t a1)
{
  unint64_t v2;
  char v3;
  char v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  _BYTE *v10;
  _QWORD *v11;
  objc_super v13;
  _QWORD v14[2];
  _BYTE v15[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v2 = sub_DF7C(0xD00000000000001ALL, 0x800000000021EEE0);
  if ((v3 & 1) == 0)
    return 0;
  sub_3A870(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v15);
  if ((swift_dynamicCast(v14, v15, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
    return 0;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v4 = v14[0];
  v5 = sub_DF7C(0x4B6E6F6974696465, 0xEB00000000646E69);
  if ((v6 & 1) == 0)
    return 0;
  sub_3A870(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v15);
  if ((swift_dynamicCast(v14, v15, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v7 = v14[0];
  v8 = v14[1];
  v9 = (objc_class *)type metadata accessor for AppAnalyticsAdditionalData();
  v10 = objc_allocWithZone(v9);
  v10[OBJC_IVAR___BAAppAnalyticsAdditionalData_supportsUnifiedProductPage] = v4;
  v11 = &v10[OBJC_IVAR___BAAppAnalyticsAdditionalData_editionKind];
  *v11 = v7;
  v11[1] = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  return objc_msgSendSuper2(&v13, "init");
}

uint64_t method lookup function for AppAnalyticsAdditionalData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AppAnalyticsAdditionalData);
}

uint64_t dispatch thunk of BridgedCollectionIDData.__allocating_init(collectionID:collectionMemberCount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AppAnalyticsAdditionalData.dictionary()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.sectname[swift_isaMask & *v0])();
}

_OWORD *sub_3A81C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_3A82C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_71B4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_3A870(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

BookAnalytics::LocationType_optional __swiftcall LocationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  char *v3;
  uint64_t v4;
  BookAnalytics::LocationType_optional result;
  char v6;
  char v7;

  object = rawValue._object;
  v3 = v1;
  v4 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_2666C0, rawValue._countAndFlagsBits, rawValue._object, &unk_295D58);
  result.value = swift_bridgeObjectRelease(object);
  v6 = 0;
  v7 = 14;
  switch(v4)
  {
    case 0:
      goto LABEL_16;
    case 1:
      v6 = 1;
      goto LABEL_16;
    case 2:
      v6 = 2;
      goto LABEL_16;
    case 3:
      v6 = 3;
      goto LABEL_16;
    case 4:
      v6 = 4;
      goto LABEL_16;
    case 5:
      v6 = 5;
      goto LABEL_16;
    case 6:
      v6 = 6;
      goto LABEL_16;
    case 7:
      v6 = 7;
      goto LABEL_16;
    case 8:
      v6 = 8;
      goto LABEL_16;
    case 9:
      v6 = 9;
      goto LABEL_16;
    case 10:
      v6 = 10;
      goto LABEL_16;
    case 11:
      v6 = 11;
      goto LABEL_16;
    case 12:
      v6 = 12;
      goto LABEL_16;
    case 13:
      v6 = 13;
LABEL_16:
      v7 = v6;
      break;
    case 14:
      break;
    case 15:
      v7 = 15;
      break;
    case 16:
      v7 = 16;
      break;
    case 17:
      v7 = 17;
      break;
    case 18:
      v7 = 18;
      break;
    case 19:
      v7 = 19;
      break;
    case 20:
      v7 = 20;
      break;
    case 21:
      v7 = 21;
      break;
    case 22:
      v7 = 22;
      break;
    case 23:
      v7 = 23;
      break;
    case 24:
      v7 = 24;
      break;
    case 25:
      v7 = 25;
      break;
    case 26:
      v7 = 26;
      break;
    case 27:
      v7 = 27;
      break;
    case 28:
      v7 = 28;
      break;
    case 29:
      v7 = 29;
      break;
    case 30:
      v7 = 30;
      break;
    case 31:
      v7 = 31;
      break;
    default:
      v7 = 32;
      break;
  }
  *v3 = v7;
  return result;
}

uint64_t LocationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_3AA50 + 4 * byte_1F44E0[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_3AA50()
{
  return 0x6461655274736F70;
}

unint64_t sub_3AA70()
{
  return 0xD000000000000019;
}

uint64_t sub_3AD84()
{
  return 0x6E6F74747562;
}

uint64_t sub_3AD98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2ABB0(*a1, *a2);
}

unint64_t sub_3ADA8()
{
  unint64_t result;

  result = qword_297638;
  if (!qword_297638)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationType, &type metadata for LocationType);
    atomic_store(result, (unint64_t *)&qword_297638);
  }
  return result;
}

Swift::Int sub_3ADEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = LocationType.rawValue.getter();
  v2 = v1;
  String.hash(into:)(v4, v0, v1);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_3AE50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = LocationType.rawValue.getter();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_3AEA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  v1 = LocationType.rawValue.getter();
  v3 = v2;
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

BookAnalytics::LocationType_optional sub_3AF00(Swift::String *a1)
{
  return LocationType.init(rawValue:)(*a1);
}

uint64_t sub_3AF0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = LocationType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_3AF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_3B134();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_3AF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_3B134();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for LocationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE1)
    goto LABEL_17;
  if (a2 + 31 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 31) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 31;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 31;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 31;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x20;
  v8 = v6 - 32;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 31 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 31) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE0)
    return ((uint64_t (*)(void))((char *)&loc_3B0B4 + 4 * byte_1F4505[v4]))();
  *a1 = a2 + 31;
  return ((uint64_t (*)(void))((char *)sub_3B0E8 + 4 * byte_1F4500[v4]))();
}

uint64_t sub_3B0E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3B0F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3B0F8);
  return result;
}

uint64_t sub_3B104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3B10CLL);
  *(_BYTE *)result = a2 + 31;
  return result;
}

uint64_t sub_3B110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3B118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationType()
{
  return &type metadata for LocationType;
}

unint64_t sub_3B134()
{
  unint64_t result;

  result = qword_297640;
  if (!qword_297640)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationType, &type metadata for LocationType);
    atomic_store(result, (unint64_t *)&qword_297640);
  }
  return result;
}

uint64_t sub_3B178(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_297648, &enum case for SessionGroup.default(_:));
}

uint64_t static RatingEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295560, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297648, a1);
}

uint64_t sub_3B1B8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_297660, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static RatingEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295568, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297660, a1);
}

uint64_t RatingEvent.ratingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 20);
  v4 = sub_71B4(&qword_297678);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RatingEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_297700, (uint64_t)&nominal type descriptor for RatingEvent);
}

uint64_t RatingEvent.ratingData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 20);
  v4 = sub_71B4(&qword_297678);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RatingEvent.ratingData.modify())()
{
  type metadata accessor for RatingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RatingEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RatingEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 24);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RatingEvent.upSellData.modify())()
{
  type metadata accessor for RatingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RatingEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 28);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RatingEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 28);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RatingEvent.seriesData.modify())()
{
  type metadata accessor for RatingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RatingEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RatingEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RatingEvent.eventData.modify())()
{
  type metadata accessor for RatingEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t RatingEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for RatingEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_297678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v8, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

void LoveEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

uint64_t RemoveReviewAndRatingEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 120);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t AddToCollectionEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[16];
  v3 = v1[17];
  v4 = v1[18];
  v5 = v1[19];
  v6 = v1[20];
  v7 = v1[21];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t RatingEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RatingEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RatingEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2977A8, (uint64_t)&nominal type descriptor for RatingEvent.Model);
}

uint64_t RatingEvent.Model.init(contentData:ratingData:upSellData:seriesData:eventData:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 77);
  v18 = *a2;
  v19 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_QWORD *)(a6 + 8) = v7;
  *(_BYTE *)(a6 + 16) = v8;
  *(_OWORD *)(a6 + 24) = v9;
  *(_QWORD *)(a6 + 40) = v10;
  *(_QWORD *)(a6 + 48) = v11;
  *(_WORD *)(a6 + 56) = v12;
  *(_DWORD *)(a6 + 60) = v13;
  *(_BYTE *)(a6 + 64) = v14;
  *(_DWORD *)(a6 + 68) = v15;
  *(_BYTE *)(a6 + 72) = v16;
  *(_DWORD *)(a6 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a6 + 77) = v17;
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(a1 + 80);
  *(_BYTE *)(a6 + 96) = v18;
  *(_OWORD *)(a6 + 104) = *(_OWORD *)a3;
  *(_QWORD *)(a6 + 120) = v19;
  v20 = a4[1];
  *(_OWORD *)(a6 + 128) = *a4;
  *(_OWORD *)(a6 + 144) = v20;
  *(_OWORD *)(a6 + 160) = a4[2];
  v21 = a6 + *(int *)(type metadata accessor for RatingEvent.Model(0) + 32);
  v22 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a5, v22);
}

uint64_t sub_3B798()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_3B7D0 + 4 * byte_1F4690[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

uint64_t sub_3B7D0()
{
  return 0x6144676E69746172;
}

uint64_t sub_3B80C()
{
  return 0x746144746E657665;
}

uint64_t sub_3B828@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_3D748(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_3B84C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3BB28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3B874(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3BB28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RatingEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  __int128 v36;
  _BYTE v37[32];
  uint64_t v38;
  __int16 v39;
  int v40;
  char v41;
  int v42;
  char v43;
  int v44;
  char v45;
  __int128 v46;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_297680);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_3BB28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RatingEvent.Model.CodingKeys, &type metadata for RatingEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v36 = *(_QWORD *)v4;
  *((_QWORD *)&v36 + 1) = v13;
  v37[0] = v14;
  *(_OWORD *)&v37[8] = v15;
  *(_QWORD *)&v37[24] = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v41 = v20;
  v42 = v21;
  v43 = v22;
  v44 = *(_DWORD *)(v4 + 73);
  v45 = v23;
  v46 = *(_OWORD *)(v4 + 80);
  v35 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    LOBYTE(v36) = *(_BYTE *)(v4 + 96);
    v35 = 1;
    v25 = sub_3BB6C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v6, &type metadata for RatingData, v25);
    v26 = *(_QWORD *)(v4 + 120);
    v36 = *(_OWORD *)(v4 + 104);
    *(_QWORD *)v37 = v26;
    v35 = 2;
    v27 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, &v35, v6, &type metadata for UpSellData, v27);
    v28 = *(_OWORD *)(v4 + 144);
    v36 = *(_OWORD *)(v4 + 128);
    *(_OWORD *)v37 = v28;
    *(_OWORD *)&v37[16] = *(_OWORD *)(v4 + 160);
    v35 = 3;
    v29 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v36, &v35, v6, &type metadata for SeriesData, v29);
    v30 = v4 + *(int *)(type metadata accessor for RatingEvent.Model(0) + 32);
    LOBYTE(v36) = 4;
    v31 = type metadata accessor for EventData(0);
    v32 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v30, &v36, v6, v31, v32);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_3BB28()
{
  unint64_t result;

  result = qword_297688;
  if (!qword_297688)
  {
    result = swift_getWitnessTable(&unk_1F48A4, &type metadata for RatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297688);
  }
  return result;
}

unint64_t sub_3BB6C()
{
  unint64_t result;

  result = qword_297690;
  if (!qword_297690)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RatingData, &type metadata for RatingData);
    atomic_store(result, (unint64_t *)&qword_297690);
  }
  return result;
}

uint64_t RatingEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  __int128 v46;
  _BYTE v47[32];
  uint64_t v48;
  __int16 v49;
  int v50;
  char v51;
  int v52;
  char v53;
  int v54;
  char v55;
  __int128 v56;
  char v57;

  v40 = a2;
  v41 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v5 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = sub_71B4(&qword_297698);
  v6 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RatingEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v44 = a1;
  sub_7988(a1, v12);
  v14 = sub_3BB28();
  v42 = v8;
  v15 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RatingEvent.Model.CodingKeys, &type metadata for RatingEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(v44);
  v38 = v9;
  v39 = v3;
  v45 = v6;
  v16 = v41;
  v57 = 0;
  v17 = sub_1779C();
  v18 = v42;
  v19 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, &type metadata for ContentData, &v57, v43, &type metadata for ContentData, v17);
  v20 = *((_QWORD *)&v46 + 1);
  v21 = v47[0];
  v22 = *(_OWORD *)&v47[8];
  v23 = *(_QWORD *)&v47[24];
  v24 = v48;
  v25 = v49;
  v26 = v50;
  v27 = v51;
  v28 = v52;
  v29 = v53;
  v30 = v55;
  *(_QWORD *)v11 = v46;
  *((_QWORD *)v11 + 1) = v20;
  v11[16] = v21;
  *(_OWORD *)(v11 + 24) = v22;
  *((_QWORD *)v11 + 5) = v23;
  *((_QWORD *)v11 + 6) = v24;
  *((_WORD *)v11 + 28) = v25;
  *((_DWORD *)v11 + 15) = v26;
  v11[64] = v27;
  *((_DWORD *)v11 + 17) = v28;
  v11[72] = v29;
  *(_DWORD *)(v11 + 73) = v54;
  v11[77] = v30;
  *((_OWORD *)v11 + 5) = v56;
  v57 = 1;
  v31 = sub_3BFD0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, &type metadata for RatingData, &v57, v19, &type metadata for RatingData, v31);
  v11[96] = v46;
  v57 = 2;
  v32 = sub_2F26C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v46, &type metadata for UpSellData, &v57, v19, &type metadata for UpSellData, v32);
  v33 = *(_QWORD *)v47;
  *(_OWORD *)(v11 + 104) = v46;
  *((_QWORD *)v11 + 15) = v33;
  v57 = 3;
  v34 = sub_10EA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v46, &type metadata for SeriesData, &v57, v19, &type metadata for SeriesData, v34);
  v35 = *(_OWORD *)v47;
  *((_OWORD *)v11 + 8) = v46;
  *((_OWORD *)v11 + 9) = v35;
  *((_OWORD *)v11 + 10) = *(_OWORD *)&v47[16];
  LOBYTE(v46) = 4;
  v36 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v16, &v46, v19, v16, v36);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v19);
  (*(void (**)(char *, _QWORD *, uint64_t))(v39 + 32))(&v11[*(int *)(v38 + 32)], v5, v16);
  sub_3C014((uint64_t)v11, v40);
  sub_7DAC(v44);
  return sub_3C058((uint64_t)v11);
}

unint64_t sub_3BFD0()
{
  unint64_t result;

  result = qword_2976A0;
  if (!qword_2976A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RatingData, &type metadata for RatingData);
    atomic_store(result, (unint64_t *)&qword_2976A0);
  }
  return result;
}

uint64_t sub_3C014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RatingEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_3C058(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RatingEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_3C094@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RatingEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_3C0A8(_QWORD *a1)
{
  return RatingEvent.Model.encode(to:)(a1);
}

uint64_t sub_3C0BC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295560, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297648, (uint64_t)sub_3B178, a1);
}

uint64_t sub_3C0E0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295568, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297660, (uint64_t)sub_3B1B8, a1);
}

uint64_t sub_3C104@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_297678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v9, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for RatingEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297678);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for RatingEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297678);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for RatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for RatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for RatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for RatingEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for RatingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3C8C4);
}

uint64_t sub_3C8C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297678);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296F68);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296310);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RatingEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3C9C4);
}

uint64_t sub_3C9C4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297678);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296F68);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296310);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_3CAC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_297710, (uint64_t (*)(void))sub_3BFD0, (uint64_t (*)(void))sub_3BB6C, (uint64_t)&type metadata for RatingData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RatingEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_BYTE *)(a1 + 105) = *((_BYTE *)a2 + 105);
    v12 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v12;
    v13 = a2[21];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v13 == 1)
    {
      v14 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v14;
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    }
    else
    {
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)((char *)a2 + 153);
      *(_QWORD *)(a1 + 160) = a2[20];
      *(_QWORD *)(a1 + 168) = v13;
      swift_bridgeObjectRetain(v13);
    }
    v16 = *(int *)(a3 + 32);
    v17 = a1 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for RatingEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = a1[21];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for RatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v12 == 1)
  {
    v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v12;
    swift_bridgeObjectRetain(v12);
  }
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for RatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (__int128 *)(a1 + 128);
  v19 = (__int128 *)(a2 + 128);
  v20 = *(_QWORD *)(a1 + 168);
  v21 = *(_QWORD *)(a2 + 168);
  if (v20 == 1)
  {
    if (v21 == 1)
    {
      v22 = *v19;
      v23 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v23;
      *v18 = v22;
    }
    else
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v26 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 168) = v26;
      swift_bridgeObjectRetain(v26);
    }
  }
  else if (v21 == 1)
  {
    sub_19008(a1 + 128);
    v25 = *(_OWORD *)(a2 + 144);
    v24 = *(_OWORD *)(a2 + 160);
    *v18 = *v19;
    *(_OWORD *)(a1 + 144) = v25;
    *(_OWORD *)(a1 + 160) = v24;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v27 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 168) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v20);
  }
  v28 = *(int *)(a3 + 32);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  return a1;
}

uint64_t initializeWithTake for RatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for RatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 168);
  if (v16 != 1)
  {
    v17 = *(_QWORD *)(a2 + 168);
    if (v17 != 1)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v17;
      swift_bridgeObjectRelease(v16);
      goto LABEL_6;
    }
    sub_19008(a1 + 128);
  }
  v18 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v18;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_6:
  v19 = *(int *)(a3 + 32);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for RatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3D418);
}

uint64_t sub_3D418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RatingEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3D4A0);
}

uint64_t sub_3D4A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_3D514(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = &unk_1F4798;
  v4[2] = &unk_1F47B0;
  v4[3] = &unk_1F47C8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RatingEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_3D5F0 + 4 * byte_1F469A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_3D624 + 4 * byte_1F4695[v4]))();
}

uint64_t sub_3D624(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3D62C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3D634);
  return result;
}

uint64_t sub_3D640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3D648);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_3D64C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3D654(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RatingEvent.Model.CodingKeys()
{
  return &type metadata for RatingEvent.Model.CodingKeys;
}

unint64_t sub_3D674()
{
  unint64_t result;

  result = qword_2977F0;
  if (!qword_2977F0)
  {
    result = swift_getWitnessTable(&unk_1F487C, &type metadata for RatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2977F0);
  }
  return result;
}

unint64_t sub_3D6BC()
{
  unint64_t result;

  result = qword_2977F8;
  if (!qword_2977F8)
  {
    result = swift_getWitnessTable(&unk_1F47EC, &type metadata for RatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2977F8);
  }
  return result;
}

unint64_t sub_3D704()
{
  unint64_t result;

  result = qword_297800;
  if (!qword_297800)
  {
    result = swift_getWitnessTable(&unk_1F4814, &type metadata for RatingEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297800);
  }
  return result;
}

uint64_t sub_3D748(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6144676E69746172 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144676E69746172, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v9 = 0xEA00000000006174;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::ExposureTypeView_optional __swiftcall ExposureTypeView.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ExposureTypeView_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2669E0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ExposureTypeView.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C676E6973;
  if (*v0 != 1)
    v1 = 2037277037;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_3DA4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_27468(*a1, *a2);
}

unint64_t sub_3DA5C()
{
  unint64_t result;

  result = qword_297808;
  if (!qword_297808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ExposureTypeView, &type metadata for ExposureTypeView);
    atomic_store(result, (unint64_t *)&qword_297808);
  }
  return result;
}

Swift::Int sub_3DAA0()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE600000000000000;
  v3 = 0x656C676E6973;
  if (v1 != 1)
  {
    v3 = 2037277037;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_3DB34(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE600000000000000;
  v3 = 0x656C676E6973;
  if (*v1 != 1)
  {
    v3 = 2037277037;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_3DBA4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE600000000000000;
  v4 = 0x656C676E6973;
  if (v2 != 1)
  {
    v4 = 2037277037;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::ExposureTypeView_optional sub_3DC34(Swift::String *a1)
{
  return ExposureTypeView.init(rawValue:)(*a1);
}

void sub_3DC40(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x656C676E6973;
  if (v2 != 1)
  {
    v5 = 2037277037;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_3DC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_3DE08();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_3DCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_3DE08();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ExposureTypeView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_3DD88 + 4 * byte_1F4905[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_3DDBC + 4 * byte_1F4900[v4]))();
}

uint64_t sub_3DDBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3DDC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3DDCCLL);
  return result;
}

uint64_t sub_3DDD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3DDE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_3DDE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3DDEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExposureTypeView()
{
  return &type metadata for ExposureTypeView;
}

unint64_t sub_3DE08()
{
  unint64_t result;

  result = qword_297810;
  if (!qword_297810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ExposureTypeView, &type metadata for ExposureTypeView);
    atomic_store(result, (unint64_t *)&qword_297810);
  }
  return result;
}

uint64_t sub_3DE4C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_297818, &enum case for SessionGroup.default(_:));
}

uint64_t static AnnotationViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295570, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297818, a1);
}

uint64_t sub_3DE8C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_297830, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AnnotationViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295578, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297830, a1);
}

uint64_t AnnotationViewEvent.viewData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationViewEvent(0) + 20);
  v4 = sub_71B4(&qword_297848);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AnnotationViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2978C0, (uint64_t)&nominal type descriptor for AnnotationViewEvent);
}

uint64_t AnnotationViewEvent.viewData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationViewEvent(0) + 20);
  v4 = sub_71B4(&qword_297848);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AnnotationViewEvent.viewData.modify())()
{
  type metadata accessor for AnnotationViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AnnotationViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AnnotationViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AnnotationViewEvent.eventData.modify())()
{
  type metadata accessor for AnnotationViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AnnotationViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for AnnotationViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

void AnnotationActionEvent.Model.viewData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 98);
  *(_WORD *)a1 = *(_WORD *)(v1 + 96);
  *(_BYTE *)(a1 + 2) = v2;
}

uint64_t AnnotationViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnnotationViewEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AnnotationViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_297960, (uint64_t)&nominal type descriptor for AnnotationViewEvent.Model);
}

uint64_t AnnotationViewEvent.Model.init(contentData:viewData:eventData:)@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  v16 = *a2;
  v17 = *((_BYTE *)a2 + 2);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_WORD *)(a4 + 96) = v16;
  *(_BYTE *)(a4 + 98) = v17;
  v18 = a4 + *(int *)(type metadata accessor for AnnotationViewEvent.Model(0) + 24);
  v19 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
}

uint64_t sub_3E240()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6174614477656976;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_3E2A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_3F950(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_3E2CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3E520();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3E2F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3E520();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AnnotationViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  _QWORD v33[2];
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  char v40;
  int v41;
  char v42;
  int v43;
  char v44;
  __int128 v45;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_297850);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_3E520();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnnotationViewEvent.Model.CodingKeys, &type metadata for AnnotationViewEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v33[0] = *(_QWORD *)v4;
  v33[1] = v13;
  v34 = v14;
  v35 = v15;
  v36 = v16;
  v37 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = *(_DWORD *)(v4 + 73);
  v44 = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v32 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v32, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_BYTE *)(v4 + 98);
    LOWORD(v33[0]) = *(_WORD *)(v4 + 96);
    BYTE2(v33[0]) = v25;
    v32 = 1;
    v26 = sub_EF88();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v32, v6, &type metadata for ViewData, v26);
    v27 = v4 + *(int *)(type metadata accessor for AnnotationViewEvent.Model(0) + 24);
    LOBYTE(v33[0]) = 2;
    v28 = type metadata accessor for EventData(0);
    v29 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v27, v33, v6, v28, v29);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_3E520()
{
  unint64_t result;

  result = qword_297858;
  if (!qword_297858)
  {
    result = swift_getWitnessTable(&unk_1F4BF4, &type metadata for AnnotationViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297858);
  }
  return result;
}

uint64_t AnnotationViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  char v50;
  int v51;
  char v52;
  int v53;
  char v54;
  __int128 v55;
  char v56;

  v37 = a2;
  v38 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_71B4(&qword_297860);
  v6 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AnnotationViewEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v41 = a1;
  sub_7988(a1, v12);
  v14 = sub_3E520();
  v39 = v8;
  v15 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AnnotationViewEvent.Model.CodingKeys, &type metadata for AnnotationViewEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(v41);
  v42 = v9;
  v16 = v6;
  v17 = v5;
  v18 = v38;
  v56 = 0;
  v19 = sub_1779C();
  v21 = v39;
  v20 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, &type metadata for ContentData, &v56, v40, &type metadata for ContentData, v19);
  v22 = v43[1];
  v23 = v44;
  v24 = v45;
  v25 = v46;
  v26 = v47;
  v27 = v48;
  v28 = v49;
  v29 = v50;
  v30 = v51;
  v31 = v52;
  v32 = v54;
  *(_QWORD *)v11 = v43[0];
  *((_QWORD *)v11 + 1) = v22;
  v11[16] = v23;
  *(_OWORD *)(v11 + 24) = v24;
  *((_QWORD *)v11 + 5) = v25;
  *((_QWORD *)v11 + 6) = v26;
  *((_WORD *)v11 + 28) = v27;
  *((_DWORD *)v11 + 15) = v28;
  v11[64] = v29;
  *((_DWORD *)v11 + 17) = v30;
  v11[72] = v31;
  *(_DWORD *)(v11 + 73) = v53;
  v11[77] = v32;
  *((_OWORD *)v11 + 5) = v55;
  v56 = 1;
  v33 = sub_EF40();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, &type metadata for ViewData, &v56, v20, &type metadata for ViewData, v33);
  v34 = BYTE2(v43[0]);
  *((_WORD *)v11 + 48) = v43[0];
  v11[98] = v34;
  LOBYTE(v43[0]) = 2;
  v35 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v43, v20, v18, v35);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v20);
  (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v42 + 24)], v17, v18);
  sub_3E890((uint64_t)v11, v37);
  sub_7DAC(v41);
  return sub_3E8D4((uint64_t)v11);
}

uint64_t sub_3E890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnnotationViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_3E8D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnnotationViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_3E910@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AnnotationViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_3E924(_QWORD *a1)
{
  return AnnotationViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_3E938@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295570, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297818, (uint64_t)sub_3DE4C, a1);
}

uint64_t sub_3E95C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295578, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297830, (uint64_t)sub_3DE8C, a1);
}

uint64_t sub_3E980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnotationViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297848);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for AnnotationViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for AnnotationViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for AnnotationViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for AnnotationViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for AnnotationViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotationViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3EEA4);
}

uint64_t sub_3EEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297848);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AnnotationViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3EF54);
}

uint64_t sub_3EF54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297848);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_3F000(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_2978D0, (uint64_t (*)(void))sub_EF40, (uint64_t (*)(void))sub_EF88, (uint64_t)&type metadata for ViewData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for AnnotationViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t)a2 + v10;
    v12 = a1 + v10;
    *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v12, v11, v13);
  }
  return v3;
}

uint64_t destroy for AnnotationViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AnnotationViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  v9 = *(int *)(a3 + 24);
  v10 = a2 + v9;
  v11 = a1 + v9;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v11, v10, v12);
  return a1;
}

uint64_t assignWithCopy for AnnotationViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for AnnotationViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v7 = *(int *)(a3 + 24);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

uint64_t assignWithTake for AnnotationViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotationViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3F634);
}

uint64_t sub_3F634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AnnotationViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3F6BC);
}

uint64_t sub_3F6BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_3F730(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_1F4B18;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnnotationViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_3F7F8 + 4 * byte_1F4A25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_3F82C + 4 * byte_1F4A20[v4]))();
}

uint64_t sub_3F82C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3F834(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3F83CLL);
  return result;
}

uint64_t sub_3F848(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3F850);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_3F854(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3F85C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationViewEvent.Model.CodingKeys()
{
  return &type metadata for AnnotationViewEvent.Model.CodingKeys;
}

unint64_t sub_3F87C()
{
  unint64_t result;

  result = qword_2979A0;
  if (!qword_2979A0)
  {
    result = swift_getWitnessTable(&unk_1F4BCC, &type metadata for AnnotationViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2979A0);
  }
  return result;
}

unint64_t sub_3F8C4()
{
  unint64_t result;

  result = qword_2979A8;
  if (!qword_2979A8)
  {
    result = swift_getWitnessTable(&unk_1F4B3C, &type metadata for AnnotationViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2979A8);
  }
  return result;
}

unint64_t sub_3F90C()
{
  unint64_t result;

  result = qword_2979B0;
  if (!qword_2979B0)
  {
    result = swift_getWitnessTable(&unk_1F4B64, &type metadata for AnnotationViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2979B0);
  }
  return result;
}

uint64_t sub_3F950(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6174614477656976 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614477656976, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BookAnalytics::DebugData __swiftcall DebugData.init(name:)(BookAnalytics::DebugData name)
{
  BookAnalytics::DebugData *v1;

  *v1 = name;
  return name;
}

uint64_t static DebugData.== infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t sub_3FB00()
{
  return 1953394534;
}

uint64_t sub_3FB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1953394534 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1953394534, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_3FB94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3FCD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3FBBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_3FCD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FontData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_71B4(&qword_2979B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_3FCD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FontData.CodingKeys, &type metadata for FontData.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_3FCD0()
{
  unint64_t result;

  result = qword_2979C0;
  if (!qword_2979C0)
  {
    result = swift_getWitnessTable(&unk_1F4DDC, &type metadata for FontData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2979C0);
  }
  return result;
}

uint64_t FontData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_71B4(&qword_2979C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_3FCD0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FontData.CodingKeys, &type metadata for FontData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

unint64_t sub_3FE34()
{
  unint64_t result;

  result = qword_2979D0;
  if (!qword_2979D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FontData, &type metadata for FontData);
    atomic_store(result, (unint64_t *)&qword_2979D0);
  }
  return result;
}

unint64_t sub_3FE7C()
{
  unint64_t result;

  result = qword_2979D8;
  if (!qword_2979D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FontData, &type metadata for FontData);
    atomic_store(result, (unint64_t *)&qword_2979D8);
  }
  return result;
}

uint64_t sub_3FEC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FontData.init(from:)(a1, a2);
}

_QWORD *initializeBufferWithCopyOfBuffer for DataStackID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for DataStackID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for DataStackID(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for DataStackID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStackID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataStackID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FontData()
{
  return &type metadata for FontData;
}

uint64_t storeEnumTagSinglePayload for FontData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_40050 + 4 * byte_1F4C44[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_40070 + 4 * byte_1F4C49[v4]))();
}

_BYTE *sub_40050(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_40070(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_40078(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_40080(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_40088(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_40090(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FontData.CodingKeys()
{
  return &type metadata for FontData.CodingKeys;
}

unint64_t sub_400B0()
{
  unint64_t result;

  result = qword_2979E0;
  if (!qword_2979E0)
  {
    result = swift_getWitnessTable(&unk_1F4DB4, &type metadata for FontData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2979E0);
  }
  return result;
}

unint64_t sub_400F8()
{
  unint64_t result;

  result = qword_2979E8;
  if (!qword_2979E8)
  {
    result = swift_getWitnessTable(&unk_1F4D24, &type metadata for FontData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2979E8);
  }
  return result;
}

unint64_t sub_40140()
{
  unint64_t result;

  result = qword_2979F0;
  if (!qword_2979F0)
  {
    result = swift_getWitnessTable(&unk_1F4D4C, &type metadata for FontData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2979F0);
  }
  return result;
}

uint64_t sub_40188(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2979F8, &enum case for SessionGroup.default(_:));
}

uint64_t static CollectionExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295580, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2979F8, a1);
}

uint64_t sub_401C8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_297A10, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static CollectionExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295588, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297A10, a1);
}

uint64_t CollectionExposureEvent.exposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_297AB0, (uint64_t)&nominal type descriptor for CollectionExposureEvent);
}

uint64_t CollectionExposureEvent.exposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_297A28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionExposureEvent.exposureData.modify())()
{
  type metadata accessor for CollectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionExposureEvent.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CollectionExposureEvent.linkData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_296A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionExposureEvent.linkData.modify())()
{
  type metadata accessor for CollectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CollectionExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionExposureEvent.eventData.modify())()
{
  type metadata accessor for CollectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CollectionExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionExposureEvent.timedData.modify())()
{
  type metadata accessor for CollectionExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for CollectionExposureEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
}

uint64_t CollectionExposureEvent.Model.exposureData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = v1[10];
  v9 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  return sub_40660(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_40660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

_QWORD *CollectionExposureEvent.Model.linkData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[19];

  sub_406FC(v1 + 96, (uint64_t)v4);
  sub_406FC((uint64_t)v4, a1);
  return sub_41240(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AF4C);
}

uint64_t sub_406FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_71B4(&qword_296A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CollectionExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_297B58, (uint64_t)&nominal type descriptor for CollectionExposureEvent.Model);
}

uint64_t CollectionExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionExposureEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CollectionExposureEvent.Model.init(collectionData:exposureData:linkData:eventData:timedData:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[152];

  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v21 = *a2;
  v22 = *a1;
  v19 = a2[2];
  v20 = a2[1];
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_QWORD *)a2 + 7);
  sub_406FC(a3, (uint64_t)v23);
  *(_OWORD *)a6 = v22;
  *(_QWORD *)(a6 + 16) = v9;
  *(_QWORD *)(a6 + 24) = v10;
  *(_OWORD *)(a6 + 32) = v21;
  *(_OWORD *)(a6 + 48) = v20;
  *(_OWORD *)(a6 + 64) = v19;
  *(_QWORD *)(a6 + 80) = v11;
  *(_QWORD *)(a6 + 88) = v12;
  sub_406FC((uint64_t)v23, a6 + 96);
  v13 = type metadata accessor for CollectionExposureEvent.Model(0);
  v14 = a6 + *(int *)(v13 + 28);
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a4, v15);
  v16 = a6 + *(int *)(v13 + 32);
  v17 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a5, v17);
}

uint64_t sub_408E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_40920 + 4 * byte_1F4E30[*v0]))(0x697463656C6C6F63, 0xEE00617461446E6FLL);
}

uint64_t sub_40920()
{
  return 0x657275736F707865;
}

uint64_t sub_40940()
{
  return 0x617461446B6E696CLL;
}

uint64_t sub_40958()
{
  return 0x746144746E657665;
}

uint64_t sub_40984@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_42FFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_409A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_40CB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_409D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_40CB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[152];
  _QWORD v31[2];
  __int128 v32;
  char v33;
  _OWORD v34[5];
  uint64_t v35;

  v2 = v1;
  v4 = sub_71B4(&qword_297A30);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v8 = a1[4];
  sub_7988(a1, v9);
  v10 = sub_40CB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionExposureEvent.Model.CodingKeys, &type metadata for CollectionExposureEvent.Model.CodingKeys, v10, v9, v8);
  v11 = *(_QWORD *)(v2 + 8);
  v31[0] = *(_QWORD *)v2;
  v31[1] = v11;
  v32 = *(_OWORD *)(v2 + 16);
  v30[0] = 0;
  v12 = sub_327A8();
  v13 = v35;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v31, v30, v4, &type metadata for CollectionData, v12);
  if (v13)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v5;
  v15 = *(_OWORD *)(v2 + 48);
  v34[0] = *(_OWORD *)(v2 + 32);
  v34[1] = v15;
  v16 = *(_OWORD *)(v2 + 80);
  v34[2] = *(_OWORD *)(v2 + 64);
  v34[3] = v16;
  v33 = 1;
  v17 = sub_40CF4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, &v33, v4, &type metadata for ExposureData, v17);
  sub_406FC(v2 + 96, (uint64_t)v31);
  sub_406FC((uint64_t)v31, (uint64_t)v30);
  HIBYTE(v29) = 2;
  v18 = sub_1B7F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v30, (char *)&v29 + 7, v4, &type metadata for LinkData, v18);
  v20 = type metadata accessor for CollectionExposureEvent.Model(0);
  v21 = v2 + *(int *)(v20 + 28);
  v30[0] = 3;
  v22 = v4;
  v23 = type metadata accessor for EventData(0);
  v24 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v35 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, v30, v22, v23, v24);
  v25 = v2 + *(int *)(v20 + 32);
  v30[0] = 4;
  v26 = type metadata accessor for TimedData(0);
  v27 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v28 = v35;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25, v30, v35, v26, v27);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v7, v28);
}

unint64_t sub_40CB0()
{
  unint64_t result;

  result = qword_297A38;
  if (!qword_297A38)
  {
    result = swift_getWitnessTable(&unk_1F503C, &type metadata for CollectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297A38);
  }
  return result;
}

unint64_t sub_40CF4()
{
  unint64_t result;

  result = qword_297A40;
  if (!qword_297A40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ExposureData, &type metadata for ExposureData);
    atomic_store(result, (unint64_t *)&qword_297A40);
  }
  return result;
}

uint64_t CollectionExposureEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  _BYTE v46[159];
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;

  v37 = a2;
  v39 = type metadata accessor for TimedData(0);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (_QWORD *)((char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v40 = (_QWORD *)((char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = sub_71B4(&qword_297A48);
  v6 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CollectionExposureEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_40CB0();
  v44 = v8;
  v15 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionExposureEvent.Model.CodingKeys, &type metadata for CollectionExposureEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(a1);
  v34 = v9;
  v35 = v6;
  v52 = a1;
  v16 = (uint64_t)v11;
  v17 = v42;
  v46[0] = 0;
  v18 = sub_32A60();
  v19 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for CollectionData, v46, v43, &type metadata for CollectionData, v18);
  v20 = *((_QWORD *)&v48 + 1);
  *(_QWORD *)v11 = v48;
  *((_QWORD *)v11 + 1) = v20;
  *((_OWORD *)v11 + 1) = v49;
  v46[0] = 1;
  v21 = sub_411FC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, &type metadata for ExposureData, v46, v19, &type metadata for ExposureData, v21);
  v22 = v49;
  *((_OWORD *)v11 + 2) = v48;
  *((_OWORD *)v11 + 3) = v22;
  v23 = v51;
  *((_OWORD *)v11 + 4) = v50;
  *((_OWORD *)v11 + 5) = v23;
  v47 = 2;
  v24 = sub_1C06C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v48, &type metadata for LinkData, &v47, v19, &type metadata for LinkData, v24);
  v33[1] = 0;
  sub_406FC((uint64_t)&v48, (uint64_t)v46);
  sub_406FC((uint64_t)v46, (uint64_t)(v11 + 96));
  v45 = 3;
  v25 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v26 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v17, &v45, v19, v17, v25);
  v27 = v34;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v41 + 32))(v16 + *(int *)(v34 + 28), v26, v17);
  v45 = 4;
  v28 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v29 = v38;
  v30 = v19;
  v31 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v39, &v45, v30, v39, v28);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v44, v43);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v36 + 32))(v16 + *(int *)(v27 + 32), v29, v31);
  sub_41390(v16, v37);
  sub_7DAC(v52);
  return sub_413D4(v16);
}

unint64_t sub_411FC()
{
  unint64_t result;

  result = qword_297A50;
  if (!qword_297A50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ExposureData, &type metadata for ExposureData);
    atomic_store(result, (unint64_t *)&qword_297A50);
  }
  return result;
}

_QWORD *sub_41240(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18]);
  return a1;
}

uint64_t sub_412A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a13);
    swift_bridgeObjectRelease(a15);
    swift_bridgeObjectRelease(a17);
    return swift_bridgeObjectRelease(a19);
  }
  return result;
}

uint64_t sub_41340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_41390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CollectionExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_413D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CollectionExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_41410@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CollectionExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_41424(_QWORD *a1)
{
  return CollectionExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_41438@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295580, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2979F8, (uint64_t)sub_40188, a1);
}

uint64_t sub_4145C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295588, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297A10, (uint64_t)sub_401C8, a1);
}

uint64_t sub_41480@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionExposureEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_2971B8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297A28);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A10);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for CollectionExposureEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for CollectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for CollectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for CollectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for CollectionExposureEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_2971B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_41C40);
}

uint64_t sub_41C40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_2971B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297A28);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A10);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CollectionExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_41D40);
}

uint64_t sub_41D40(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_2971B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297A28);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A10);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_41E3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, (unint64_t *)&qword_297250, (uint64_t (*)(void))sub_32A60, (uint64_t (*)(void))sub_327A8, (uint64_t)&type metadata for CollectionData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_297AC0, (uint64_t (*)(void))sub_411FC, (uint64_t (*)(void))sub_40CF4, (uint64_t)&type metadata for ExposureData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_296B08, (uint64_t (*)(void))sub_1C06C, (uint64_t (*)(void))sub_1B7F0, (uint64_t)&type metadata for LinkData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for CollectionExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v9;
      v10 = a2[7];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v10;
      v11 = a2[9];
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v11;
      v12 = a2[11];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v12;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      v13 = a2[13];
      if (v13)
      {
LABEL_4:
        *(_QWORD *)(a1 + 96) = a2[12];
        *(_QWORD *)(a1 + 104) = v13;
        v14 = a2[15];
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v14;
        v15 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v15;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        v16 = a2[20];
        *(_QWORD *)(a1 + 152) = a2[19];
        *(_QWORD *)(a1 + 160) = v16;
        v17 = a2[22];
        *(_QWORD *)(a1 + 168) = a2[21];
        *(_QWORD *)(a1 + 176) = v17;
        v39 = v6;
        v18 = a2[24];
        *(_QWORD *)(a1 + 184) = a2[23];
        *(_QWORD *)(a1 + 192) = v18;
        v19 = a2[26];
        *(_QWORD *)(a1 + 200) = a2[25];
        *(_QWORD *)(a1 + 208) = v19;
        v20 = a2[28];
        *(_QWORD *)(a1 + 216) = a2[27];
        *(_QWORD *)(a1 + 224) = v20;
        v21 = a2[30];
        *(_QWORD *)(a1 + 232) = a2[29];
        *(_QWORD *)(a1 + 240) = v21;
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        v22 = v18;
        v6 = v39;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
LABEL_8:
        v30 = *(int *)(v6 + 28);
        v31 = a1 + v30;
        v32 = (uint64_t)a2 + v30;
        v33 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
        v34 = *(int *)(v6 + 32);
        v35 = a1 + v34;
        v36 = (uint64_t)a2 + v34;
        v37 = type metadata accessor for TimedData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
        return a1;
      }
    }
    else
    {
      v24 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v24;
      v25 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v25;
      v13 = a2[13];
      if (v13)
        goto LABEL_4;
    }
    v26 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 208) = v26;
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
    *(_QWORD *)(a1 + 240) = a2[30];
    v27 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v27;
    v28 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v28;
    v29 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v29;
    goto LABEL_8;
  }
  v23 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v23);
  return a1;
}

uint64_t destroy for CollectionExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = a1[5];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[11]);
  }
  v5 = a1[13];
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[20]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
  }
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + *(int *)(a2 + 32);
  v9 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for CollectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (!v8)
  {
    v22 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v22;
    v23 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v23;
    v12 = *(_QWORD *)(a2 + 104);
    if (v12)
      goto LABEL_3;
LABEL_5:
    v24 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v24;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v25;
    v26 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
    v27 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v27;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v12 = *(_QWORD *)(a2 + 104);
  if (!v12)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v14;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v15;
  v16 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v16;
  v37 = a3;
  v17 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v17;
  v18 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v18;
  v19 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v19;
  v20 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v20;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  v21 = v17;
  a3 = v37;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
LABEL_6:
  v28 = *(int *)(a3 + 28);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = *(int *)(a3 + 32);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  return a1;
}

uint64_t assignWithCopy for CollectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 32);
  v11 = (__int128 *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a2 + 40);
  if (v12)
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v15 = *(_QWORD *)(a2 + 56);
      v16 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v17 = *(_QWORD *)(a2 + 72);
      v18 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v19 = *(_QWORD *)(a2 + 88);
      v20 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      sub_4294C((_QWORD *)(a1 + 32));
      v25 = *(_OWORD *)(a2 + 80);
      v27 = *v11;
      v26 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v25;
      *v10 = v27;
      *(_OWORD *)(a1 + 48) = v26;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v21 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v22;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v23 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v23;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v24 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v24;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }
  else
  {
    v28 = *v11;
    v29 = *(_OWORD *)(a2 + 48);
    v30 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v30;
    *v10 = v28;
    *(_OWORD *)(a1 + 48) = v29;
  }
  v31 = (_OWORD *)(a1 + 96);
  v32 = (_OWORD *)(a2 + 96);
  v33 = *(_QWORD *)(a1 + 104);
  v34 = *(_QWORD *)(a2 + 104);
  if (v33)
  {
    if (v34)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v35 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRelease(v33);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v36 = *(_QWORD *)(a2 + 120);
      v37 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v38 = *(_QWORD *)(a2 + 136);
      v39 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v38;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease(v39);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v40 = *(_QWORD *)(a2 + 160);
      v41 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v42 = *(_QWORD *)(a2 + 176);
      v43 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v42;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease(v43);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v44 = *(_QWORD *)(a2 + 192);
      v45 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v46 = *(_QWORD *)(a2 + 208);
      v47 = *(_QWORD *)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v46;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v47);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v48 = *(_QWORD *)(a2 + 224);
      v49 = *(_QWORD *)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v48;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease(v49);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v50 = *(_QWORD *)(a2 + 240);
      v51 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v50;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v51);
    }
    else
    {
      sub_1E060((_QWORD *)(a1 + 96));
      v62 = *(_OWORD *)(a2 + 112);
      *v31 = *v32;
      *(_OWORD *)(a1 + 112) = v62;
      v63 = *(_OWORD *)(a2 + 176);
      v65 = *(_OWORD *)(a2 + 128);
      v64 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v63;
      *(_OWORD *)(a1 + 128) = v65;
      *(_OWORD *)(a1 + 144) = v64;
      v67 = *(_OWORD *)(a2 + 208);
      v66 = *(_OWORD *)(a2 + 224);
      v68 = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 208) = v67;
      *(_OWORD *)(a1 + 224) = v66;
      *(_OWORD *)(a1 + 192) = v68;
    }
  }
  else if (v34)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v52 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v52;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v53 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v53;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v54 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v54;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v55 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v55;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v85 = a3;
    v56 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v56;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v57 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v57;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v58 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 208) = v58;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v59 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v59;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v60 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 240) = v60;
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    v61 = v56;
    a3 = v85;
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
  }
  else
  {
    v69 = *(_OWORD *)(a2 + 112);
    *v31 = *v32;
    *(_OWORD *)(a1 + 112) = v69;
    v70 = *(_OWORD *)(a2 + 128);
    v71 = *(_OWORD *)(a2 + 144);
    v72 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v72;
    *(_OWORD *)(a1 + 128) = v70;
    *(_OWORD *)(a1 + 144) = v71;
    v73 = *(_OWORD *)(a2 + 192);
    v74 = *(_OWORD *)(a2 + 208);
    v75 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v74;
    *(_OWORD *)(a1 + 224) = v75;
    *(_OWORD *)(a1 + 192) = v73;
  }
  v76 = *(int *)(a3 + 28);
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
  v80 = *(int *)(a3 + 32);
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v81, v82, v83);
  return a1;
}

_QWORD *sub_4294C(_QWORD *a1)
{
  destroy for ExposureData(a1);
  return a1;
}

uint64_t initializeWithTake for CollectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v9 = *(_OWORD *)(a2 + 224);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v9;
  v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v11;
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = *(int *)(a3 + 32);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for CollectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 40);
    if (v11)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v11;
      swift_bridgeObjectRelease(v10);
      v12 = *(_QWORD *)(a2 + 56);
      v13 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v12;
      swift_bridgeObjectRelease(v13);
      v14 = *(_QWORD *)(a2 + 72);
      v15 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v14;
      swift_bridgeObjectRelease(v15);
      v16 = *(_QWORD *)(a2 + 88);
      v17 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v16;
      swift_bridgeObjectRelease(v17);
      goto LABEL_6;
    }
    sub_4294C((_QWORD *)(a1 + 32));
  }
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
LABEL_6:
  v20 = *(_QWORD *)(a1 + 104);
  if (!v20)
  {
LABEL_10:
    v38 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v38;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v39 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v39;
    v40 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v40;
    v41 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v41;
    goto LABEL_11;
  }
  v21 = *(_QWORD *)(a2 + 104);
  if (!v21)
  {
    sub_1E060((_QWORD *)(a1 + 96));
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v21;
  swift_bridgeObjectRelease(v20);
  v22 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 136);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v24;
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v26 = *(_QWORD *)(a2 + 160);
  v27 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 176);
  v29 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 192);
  v31 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 208);
  v33 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(a2 + 224);
  v35 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(a2 + 240);
  v37 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v36;
  swift_bridgeObjectRelease(v37);
LABEL_11:
  v42 = *(int *)(a3 + 28);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 40))(v43, v44, v45);
  v46 = *(int *)(a3 + 32);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 40))(v47, v48, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_42C6C);
}

uint64_t sub_42C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CollectionExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_42D18);
}

uint64_t sub_42D18(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_42DB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = " ";
  v5[1] = &unk_1F4F48;
  v5[2] = &unk_1F4F60;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_42EA4 + 4 * byte_1F4E3A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_42ED8 + 4 * byte_1F4E35[v4]))();
}

uint64_t sub_42ED8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_42EE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x42EE8);
  return result;
}

uint64_t sub_42EF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x42EFCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_42F00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_42F08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionExposureEvent.Model.CodingKeys()
{
  return &type metadata for CollectionExposureEvent.Model.CodingKeys;
}

unint64_t sub_42F28()
{
  unint64_t result;

  result = qword_297BA0;
  if (!qword_297BA0)
  {
    result = swift_getWitnessTable(&unk_1F5014, &type metadata for CollectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297BA0);
  }
  return result;
}

unint64_t sub_42F70()
{
  unint64_t result;

  result = qword_297BA8;
  if (!qword_297BA8)
  {
    result = swift_getWitnessTable(&unk_1F4F84, &type metadata for CollectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297BA8);
  }
  return result;
}

unint64_t sub_42FB8()
{
  unint64_t result;

  result = qword_297BB0;
  if (!qword_297BB0)
  {
    result = swift_getWitnessTable(&unk_1F4FAC, &type metadata for CollectionExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297BB0);
  }
  return result;
}

uint64_t sub_42FFC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x697463656C6C6F63 && a2 == 0xEE00617461446E6FLL)
  {
    v5 = 0xEE00617461446E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEC00000061746144)
  {
    v7 = 0xEC00000061746144;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x617461446B6E696CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446B6E696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BookAnalytics::ViewSource_optional __swiftcall ViewSource.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ViewSource_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266A48, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ViewSource.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x654D6E6F69746361;
  if (*v0 != 1)
    v1 = 6516596;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_4331C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2A020(*a1, *a2);
}

unint64_t sub_4332C()
{
  unint64_t result;

  result = qword_297BB8;
  if (!qword_297BB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewSource, &type metadata for ViewSource);
    atomic_store(result, (unint64_t *)&qword_297BB8);
  }
  return result;
}

Swift::Int sub_43370()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEA0000000000756ELL;
  v3 = 0x654D6E6F69746361;
  if (v1 != 1)
  {
    v3 = 6516596;
    v2 = 0xE300000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_4340C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEA0000000000756ELL;
  v3 = 0x654D6E6F69746361;
  if (*v1 != 1)
  {
    v3 = 6516596;
    v2 = 0xE300000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_43484(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEA0000000000756ELL;
  v4 = 0x654D6E6F69746361;
  if (v2 != 1)
  {
    v4 = 6516596;
    v3 = 0xE300000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::ViewSource_optional sub_4351C(Swift::String *a1)
{
  return ViewSource.init(rawValue:)(*a1);
}

void sub_43528(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEA0000000000756ELL;
  v5 = 0x654D6E6F69746361;
  if (v2 != 1)
  {
    v5 = 6516596;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_43584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_436F8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_435E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_436F8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ViewSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_43678 + 4 * byte_1F5091[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_436AC + 4 * byte_1F508C[v4]))();
}

uint64_t sub_436AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_436B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x436BCLL);
  return result;
}

uint64_t sub_436C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x436D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_436D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_436DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewSource()
{
  return &type metadata for ViewSource;
}

unint64_t sub_436F8()
{
  unint64_t result;

  result = qword_297BC0;
  if (!qword_297BC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewSource, &type metadata for ViewSource);
    atomic_store(result, (unint64_t *)&qword_297BC0);
  }
  return result;
}

uint64_t sub_4373C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_297BC8, &enum case for SessionGroup.default(_:));
}

uint64_t static NotificationOptInActionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295590, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297BC8, a1);
}

uint64_t sub_4377C(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_297BE0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static NotificationOptInActionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295598, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297BE0, a1);
}

uint64_t NotificationOptInActionEvent.notificationOptInActionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_297BF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t NotificationOptInActionEvent.notificationOptInActionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_297BF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t NotificationOptInActionEvent.notificationOptInLocationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationOptInActionEvent(0) + 20);
  v4 = sub_71B4(&qword_297C00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for NotificationOptInActionEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_297CB0, (uint64_t)&nominal type descriptor for NotificationOptInActionEvent);
}

uint64_t NotificationOptInActionEvent.notificationOptInLocationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationOptInActionEvent(0) + 20);
  v4 = sub_71B4(&qword_297C00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NotificationOptInActionEvent.notificationOptInLocationData.modify())()
{
  type metadata accessor for NotificationOptInActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t NotificationOptInActionEvent.notificationOptInTypeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationOptInActionEvent(0) + 24);
  v4 = sub_71B4(&qword_297C08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NotificationOptInActionEvent.notificationOptInTypeData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationOptInActionEvent(0) + 24);
  v4 = sub_71B4(&qword_297C08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NotificationOptInActionEvent.notificationOptInTypeData.modify())()
{
  type metadata accessor for NotificationOptInActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t NotificationOptInActionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationOptInActionEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NotificationOptInActionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationOptInActionEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NotificationOptInActionEvent.eventData.modify())()
{
  type metadata accessor for NotificationOptInActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t NotificationOptInActionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_297BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for NotificationOptInActionEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_297C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = enum case for EventProperty.optional<A>(_:);
  v9 = sub_71B4(&qword_297C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t NotificationOptInActionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NotificationOptInActionEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for NotificationOptInActionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_297D60, (uint64_t)&nominal type descriptor for NotificationOptInActionEvent.Model);
}

uint64_t NotificationOptInActionEvent.Model.init(notificationOptInActionData:notificationOptInLocationData:notificationOptInTypeData:eventData:)@<X0>(_BYTE *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  char v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;

  v6 = *a2;
  v7 = *a3;
  *a5 = *a1;
  a5[1] = v6;
  a5[2] = v7;
  v8 = &a5[*(int *)(type metadata accessor for NotificationOptInActionEvent.Model(0) + 28)];
  v9 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a4, v9);
}

uint64_t sub_43C3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_43C78 + 4 * byte_1F51B0[a1]))(0xD00000000000001BLL, 0x800000000021EFF0);
}

uint64_t sub_43C78()
{
  uint64_t v0;

  return v0 + 4;
}

unint64_t sub_43C90()
{
  return 0xD000000000000019;
}

uint64_t sub_43CAC()
{
  return 0x746144746E657665;
}

uint64_t sub_43CC8()
{
  unsigned __int8 *v0;

  return sub_43C3C(*v0);
}

uint64_t sub_43CD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_45338(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_43CF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_43F28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_43D1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_43F28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NotificationOptInActionEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_71B4(&qword_297C10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_43F28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationOptInActionEvent.Model.CodingKeys, &type metadata for NotificationOptInActionEvent.Model.CodingKeys, v11, v9, v10);
  v26 = *v3;
  v25 = 0;
  v12 = sub_43F6C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for NotificationOptInActionData, v12);
  if (!v2)
  {
    v24 = v3[1];
    v23 = 1;
    v13 = sub_43FB0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for NotificationOptInLocationData, v13);
    v22 = v3[2];
    v21 = 2;
    v14 = sub_43FF4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v21, v5, &type metadata for NotificationOptInTypeData, v14);
    v15 = &v3[*(int *)(type metadata accessor for NotificationOptInActionEvent.Model(0) + 28)];
    v20 = 3;
    v16 = type metadata accessor for EventData(0);
    v17 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_43F28()
{
  unint64_t result;

  result = qword_297C18;
  if (!qword_297C18)
  {
    result = swift_getWitnessTable(&unk_1F53B4, &type metadata for NotificationOptInActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297C18);
  }
  return result;
}

unint64_t sub_43F6C()
{
  unint64_t result;

  result = qword_297C20;
  if (!qword_297C20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationOptInActionData, &type metadata for NotificationOptInActionData);
    atomic_store(result, (unint64_t *)&qword_297C20);
  }
  return result;
}

unint64_t sub_43FB0()
{
  unint64_t result;

  result = qword_297C28;
  if (!qword_297C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationOptInLocationData, &type metadata for NotificationOptInLocationData);
    atomic_store(result, (unint64_t *)&qword_297C28);
  }
  return result;
}

unint64_t sub_43FF4()
{
  unint64_t result;

  result = qword_297C30;
  if (!qword_297C30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationOptInTypeData, &type metadata for NotificationOptInTypeData);
    atomic_store(result, (unint64_t *)&qword_297C30);
  }
  return result;
}

uint64_t NotificationOptInActionEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v26 = a2;
  v3 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_71B4(&qword_297C38);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NotificationOptInActionEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_43F28();
  v29 = v8;
  v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationOptInActionEvent.Model.CodingKeys, &type metadata for NotificationOptInActionEvent.Model.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v31 = v9;
    v16 = v5;
    v17 = v28;
    BYTE3(v34) = 0;
    v18 = sub_442EC();
    v19 = v29;
    v20 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v34 + 4), &type metadata for NotificationOptInActionData, (char *)&v34 + 3, v30, &type metadata for NotificationOptInActionData, v18);
    *v11 = BYTE4(v34);
    BYTE1(v34) = 1;
    v21 = sub_44330();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v34 + 2), &type metadata for NotificationOptInLocationData, (char *)&v34 + 1, v20, &type metadata for NotificationOptInLocationData, v21);
    v11[1] = BYTE2(v34);
    v33 = 2;
    v22 = sub_44374();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v34, &type metadata for NotificationOptInTypeData, &v33, v20, &type metadata for NotificationOptInTypeData, v22);
    v11[2] = v34;
    v32 = 3;
    v24 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, &v32, v20, v17, v24);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v20);
    v25 = v26;
    (*(void (**)(char *, _QWORD *, uint64_t))(v27 + 32))(&v11[*(int *)(v31 + 28)], v16, v17);
    sub_443B8((uint64_t)v11, v25);
  }
  return sub_7DAC(a1);
}

unint64_t sub_442EC()
{
  unint64_t result;

  result = qword_297C40;
  if (!qword_297C40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationOptInActionData, &type metadata for NotificationOptInActionData);
    atomic_store(result, (unint64_t *)&qword_297C40);
  }
  return result;
}

unint64_t sub_44330()
{
  unint64_t result;

  result = qword_297C48;
  if (!qword_297C48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationOptInLocationData, &type metadata for NotificationOptInLocationData);
    atomic_store(result, (unint64_t *)&qword_297C48);
  }
  return result;
}

unint64_t sub_44374()
{
  unint64_t result;

  result = qword_297C50;
  if (!qword_297C50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationOptInTypeData, &type metadata for NotificationOptInTypeData);
    atomic_store(result, (unint64_t *)&qword_297C50);
  }
  return result;
}

uint64_t sub_443B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotificationOptInActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_443FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NotificationOptInActionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_44410(_QWORD *a1)
{
  return NotificationOptInActionEvent.Model.encode(to:)(a1);
}

uint64_t sub_44424@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295590, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297BC8, (uint64_t)sub_4373C, a1);
}

uint64_t sub_44448@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295598, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297BE0, (uint64_t)sub_4377C, a1);
}

uint64_t sub_4446C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_297BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_297C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = enum case for EventProperty.optional<A>(_:);
  v10 = sub_71B4(&qword_297C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for NotificationOptInActionEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_297BF8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297C00);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_297C08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for NotificationOptInActionEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_297BF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297C00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_297C08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for NotificationOptInActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_297BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for NotificationOptInActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_297BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for NotificationOptInActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_297BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for NotificationOptInActionEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_297BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_297C08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationOptInActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_44AE8);
}

uint64_t sub_44AE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_297BF8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297C00);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_297C08);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for NotificationOptInActionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_44BC0);
}

uint64_t sub_44BC0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_297BF8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297C00);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_297C08);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_44C94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, &qword_297CC0, (uint64_t (*)(void))sub_442EC, (uint64_t (*)(void))sub_43F6C, (uint64_t)&type metadata for NotificationOptInActionData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_297CC8, (uint64_t (*)(void))sub_44330, (uint64_t (*)(void))sub_43FB0, (uint64_t)&type metadata for NotificationOptInLocationData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_297CD0, (uint64_t (*)(void))sub_44374, (uint64_t (*)(void))sub_43FF4, (uint64_t)&type metadata for NotificationOptInTypeData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for NotificationOptInActionEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v5 = *(int *)(a3 + 28);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for NotificationOptInActionEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for NotificationOptInActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for NotificationOptInActionEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for NotificationOptInActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for NotificationOptInActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationOptInActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4501C);
}

uint64_t sub_4501C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NotificationOptInActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4509C);
}

_BYTE *sub_4509C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_4510C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1F52A8;
  v4[1] = &unk_1F52C0;
  v4[2] = &unk_1F52D8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotificationOptInActionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_451E0 + 4 * byte_1F51B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_45214 + 4 * byte_1F51B4[v4]))();
}

uint64_t sub_45214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4521C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x45224);
  return result;
}

uint64_t sub_45230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x45238);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_4523C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_45244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationOptInActionEvent.Model.CodingKeys()
{
  return &type metadata for NotificationOptInActionEvent.Model.CodingKeys;
}

unint64_t sub_45264()
{
  unint64_t result;

  result = qword_297DA0;
  if (!qword_297DA0)
  {
    result = swift_getWitnessTable(&unk_1F538C, &type metadata for NotificationOptInActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297DA0);
  }
  return result;
}

unint64_t sub_452AC()
{
  unint64_t result;

  result = qword_297DA8;
  if (!qword_297DA8)
  {
    result = swift_getWitnessTable(&unk_1F52FC, &type metadata for NotificationOptInActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297DA8);
  }
  return result;
}

unint64_t sub_452F4()
{
  unint64_t result;

  result = qword_297DB0;
  if (!qword_297DB0)
  {
    result = swift_getWitnessTable(&unk_1F5324, &type metadata for NotificationOptInActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297DB0);
  }
  return result;
}

uint64_t sub_45338(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD00000000000001BLL)
  {
    v4 = 0x800000000021EFF0;
    if (a2 == 0x800000000021EFF0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000000021EFF0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x800000000021F010)
  {
    v6 = 0x800000000021F010;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000000021F010, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000019)
  {
    v7 = 0x800000000021F030;
    if (a2 == 0x800000000021F030)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000021F030, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_454E4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_297DB8, &enum case for SessionGroup.default(_:));
}

uint64_t static PlayEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297DB8, a1);
}

uint64_t sub_45524(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_297DD0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PlayEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297DD0, a1);
}

uint64_t PlayEvent.listeningSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 20);
  v4 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PlayEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_297EA0, (uint64_t)&nominal type descriptor for PlayEvent);
}

uint64_t PlayEvent.listeningSessionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 20);
  v4 = sub_71B4(&qword_297DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.listeningSessionData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.listeningActionSourceData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 24);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.listeningActionSourceData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 24);
  v4 = sub_71B4(&qword_296770);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.listeningActionSourceData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.bitRateData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 28);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.bitRateData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 28);
  v4 = sub_71B4(&qword_296778);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.bitRateData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.errorData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 32);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.errorData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 32);
  v4 = sub_71B4(&qword_296780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.errorData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 36);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.upSellData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.doNotDisturbData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 40);
  v4 = sub_71B4(&qword_297DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.doNotDisturbData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 40);
  v4 = sub_71B4(&qword_297DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.doNotDisturbData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.seriesData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.eventData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 52);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 52);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.timedData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.userEmbeddingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 56);
  v4 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.userEmbeddingData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent(0) + 56);
  v4 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PlayEvent.userEmbeddingData.modify())()
{
  type metadata accessor for PlayEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PlayEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PlayEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v2, v10);
  v11 = a1 + v4[8];
  v12 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v2, v12);
  v13 = a1 + v4[9];
  v14 = enum case for EventProperty.optional<A>(_:);
  v15 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v14, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
  v24 = a1 + v4[14];
  v25 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v14, v25);
}

uint64_t PlayEvent.Model.listeningSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  char v11;
  char v12;
  int v13;
  char v14;
  char v15;

  v2 = *(_BYTE *)(v1 + 100);
  v3 = *(_DWORD *)(v1 + 104);
  v4 = *(_BYTE *)(v1 + 108);
  v5 = *(_DWORD *)(v1 + 112);
  v7 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v8 = *(_BYTE *)(v1 + 136);
  v9 = *(_BYTE *)(v1 + 137);
  v10 = *(_DWORD *)(v1 + 140);
  v11 = *(_BYTE *)(v1 + 144);
  v12 = *(_BYTE *)(v1 + 145);
  v13 = *(_DWORD *)(v1 + 148);
  v14 = *(_BYTE *)(v1 + 152);
  v15 = *(_BYTE *)(v1 + 153);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 96);
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 41) = v9;
  *(_DWORD *)(a1 + 44) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 49) = v12;
  *(_DWORD *)(a1 + 52) = v13;
  *(_BYTE *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 57) = v15;
  return swift_bridgeObjectRetain(v6);
}

void PlayEvent.Model.listeningActionSourceData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 154);
}

void PlayEvent.Model.bitRateData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 160);
  v3 = *(_DWORD *)(v1 + 164);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 156);
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
}

uint64_t PlayEvent.Model.errorData.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[22];
  v3 = v1[23];
  v4 = v1[24];
  *a1 = v1[21];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t PlayEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 216);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 200);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

void PlayEvent.Model.doNotDisturbData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 224);
}

uint64_t PlayEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[29];
  v3 = v1[30];
  v4 = v1[31];
  v5 = v1[32];
  v6 = v1[33];
  v7 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t PlayEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent.Model(0) + 48);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PlayEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_297F70, (uint64_t)&nominal type descriptor for PlayEvent.Model);
}

uint64_t PlayEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PlayEvent.Model(0) + 52);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlayEvent.Model.userEmbeddingData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PlayEvent.Model(0) + 56));
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t PlayEvent.Model.init(contentData:listeningSessionData:listeningActionSourceData:bitRateData:errorData:upSellData:doNotDisturbData:seriesData:eventData:timedData:userEmbeddingData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, _WORD *a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;

  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a9 = *(_QWORD *)a1;
  *(_QWORD *)(a9 + 8) = v13;
  *(_BYTE *)(a9 + 16) = *(_BYTE *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a9 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a9 + 48) = v14;
  v15 = *(_OWORD *)(a1 + 24);
  *(_WORD *)(a9 + 56) = *(_WORD *)(a1 + 56);
  *(_DWORD *)(a9 + 60) = *(_DWORD *)(a1 + 60);
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(a1 + 64);
  *(_DWORD *)(a9 + 68) = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a9 + 24) = v15;
  *(_BYTE *)(a9 + 72) = v16;
  *(_DWORD *)(a9 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a9 + 77) = *(_BYTE *)(a1 + 77);
  v17 = *(_OWORD *)(a1 + 80);
  *(_DWORD *)(a9 + 96) = *(_DWORD *)a2;
  *(_BYTE *)(a9 + 100) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a9 + 104) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a9 + 108) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a9 + 136) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a9 + 137) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a9 + 140) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a9 + 144) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a9 + 145) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a9 + 148) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a9 + 152) = *(_BYTE *)(a2 + 56);
  v18 = *(_DWORD *)(a2 + 16);
  v19 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a9 + 153) = *(_BYTE *)(a2 + 57);
  *(_WORD *)(a9 + 154) = *a3;
  *(_DWORD *)(a9 + 156) = *(_DWORD *)a4;
  *(_BYTE *)(a9 + 160) = *(_BYTE *)(a4 + 4);
  v20 = a8[1];
  *(_OWORD *)(a9 + 232) = *a8;
  *(_OWORD *)(a9 + 264) = a8[2];
  v21 = *a5;
  *(_DWORD *)(a9 + 164) = *(_DWORD *)(a4 + 8);
  v22 = *((_QWORD *)a5 + 3);
  *(_QWORD *)(a9 + 184) = *((_QWORD *)a5 + 2);
  *(_QWORD *)(a9 + 192) = v22;
  *(_OWORD *)(a9 + 80) = v17;
  *(_DWORD *)(a9 + 112) = v18;
  v23 = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a9 + 120) = v19;
  v24 = *a6;
  *(_QWORD *)(a9 + 216) = v23;
  *(_WORD *)(a9 + 224) = *a7;
  v25 = *a12;
  *(_OWORD *)(a9 + 168) = v21;
  *(_OWORD *)(a9 + 200) = v24;
  *(_OWORD *)(a9 + 248) = v20;
  v26 = (int *)type metadata accessor for PlayEvent.Model(0);
  v27 = a9 + v26[12];
  v28 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v27, a10, v28);
  v29 = a9 + v26[13];
  v30 = type metadata accessor for TimedData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a11, v30);
  *(_QWORD *)(a9 + v26[14]) = v25;
  return result;
}

uint64_t sub_462C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_46304 + 4 * byte_1F5408[a1]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_46304()
{
  return 0xD000000000000014;
}

uint64_t sub_463F0()
{
  unsigned __int8 *v0;

  return sub_462C8(*v0);
}

uint64_t sub_463F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_49AA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_4641C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4692C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_46444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4692C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PlayEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  int v31;
  char v32;
  char v33;
  int v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;
  char v61;
  __int128 v62;
  _BYTE v63[32];
  uint64_t v64;
  __int16 v65;
  int v66;
  char v67;
  int v68;
  char v69;
  int v70;
  char v71;
  __int128 v72;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_297E00);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_4692C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PlayEvent.Model.CodingKeys, &type metadata for PlayEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v62 = *(_QWORD *)v4;
  *((_QWORD *)&v62 + 1) = v13;
  v63[0] = v14;
  *(_OWORD *)&v63[8] = v15;
  *(_QWORD *)&v63[24] = v16;
  v64 = v17;
  v65 = v18;
  v66 = v19;
  v67 = v20;
  v68 = v21;
  v69 = v22;
  v70 = *(_DWORD *)(v4 + 73);
  v71 = v23;
  v72 = *(_OWORD *)(v4 + 80);
  v61 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v61, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_BYTE *)(v4 + 100);
    v26 = *(_DWORD *)(v4 + 104);
    v27 = *(_BYTE *)(v4 + 108);
    v28 = *(_DWORD *)(v4 + 112);
    v29 = *(_BYTE *)(v4 + 136);
    v30 = *(_BYTE *)(v4 + 137);
    v31 = *(_DWORD *)(v4 + 140);
    v32 = *(_BYTE *)(v4 + 144);
    v33 = *(_BYTE *)(v4 + 145);
    v34 = *(_DWORD *)(v4 + 148);
    v35 = *(_BYTE *)(v4 + 152);
    v36 = *(_BYTE *)(v4 + 153);
    LODWORD(v62) = *(_DWORD *)(v4 + 96);
    BYTE4(v62) = v25;
    DWORD2(v62) = v26;
    BYTE12(v62) = v27;
    *(_DWORD *)v63 = v28;
    *(_OWORD *)&v63[8] = *(_OWORD *)(v4 + 120);
    v63[24] = v29;
    v63[25] = v30;
    *(_DWORD *)&v63[28] = v31;
    LOBYTE(v64) = v32;
    BYTE1(v64) = v33;
    HIDWORD(v64) = v34;
    LOBYTE(v65) = v35;
    HIBYTE(v65) = v36;
    v61 = 1;
    v37 = sub_46970();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v61, v6, &type metadata for ListeningSessionData, v37);
    LOWORD(v62) = *(_WORD *)(v4 + 154);
    v61 = 2;
    v38 = sub_171A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v61, v6, &type metadata for ListeningActionSourceData, v38);
    v39 = *(_BYTE *)(v4 + 160);
    v40 = *(_DWORD *)(v4 + 164);
    LODWORD(v62) = *(_DWORD *)(v4 + 156);
    BYTE4(v62) = v39;
    DWORD2(v62) = v40;
    v61 = 3;
    v41 = sub_171E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v61, v6, &type metadata for BitRateData, v41);
    v42 = *(_QWORD *)(v4 + 184);
    v43 = *(_QWORD *)(v4 + 192);
    v62 = *(_OWORD *)(v4 + 168);
    *(_QWORD *)v63 = v42;
    *(_QWORD *)&v63[8] = v43;
    v61 = 4;
    v44 = sub_17228();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v61, v6, &type metadata for ErrorData, v44);
    v45 = *(_QWORD *)(v4 + 216);
    v62 = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v63 = v45;
    v61 = 5;
    v46 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v61, v6, &type metadata for UpSellData, v46);
    LOWORD(v62) = *(_WORD *)(v4 + 224);
    v61 = 6;
    v47 = sub_469B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, &v61, v6, &type metadata for DoNotDisturbData, v47);
    v48 = *(_OWORD *)(v4 + 248);
    v49 = *(_OWORD *)(v4 + 264);
    v62 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)v63 = v48;
    *(_OWORD *)&v63[16] = v49;
    v61 = 7;
    v50 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v61, v6, &type metadata for SeriesData, v50);
    v51 = (int *)type metadata accessor for PlayEvent.Model(0);
    v52 = v4 + v51[12];
    LOBYTE(v62) = 8;
    v53 = type metadata accessor for EventData(0);
    v54 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v52, &v62, v6, v53, v54);
    v55 = v4 + v51[13];
    LOBYTE(v62) = 9;
    v56 = type metadata accessor for TimedData(0);
    v57 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v55, &v62, v6, v56, v57);
    *(_QWORD *)&v62 = *(_QWORD *)(v4 + v51[14]);
    v61 = 10;
    v58 = sub_469F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v62, &v61, v6, &type metadata for UserEmbeddingData, v58);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_4692C()
{
  unint64_t result;

  result = qword_297E08;
  if (!qword_297E08)
  {
    result = swift_getWitnessTable(&unk_1F56EC, &type metadata for PlayEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297E08);
  }
  return result;
}

unint64_t sub_46970()
{
  unint64_t result;

  result = qword_297E10;
  if (!qword_297E10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningSessionData, &type metadata for ListeningSessionData);
    atomic_store(result, (unint64_t *)&qword_297E10);
  }
  return result;
}

unint64_t sub_469B4()
{
  unint64_t result;

  result = qword_297E18;
  if (!qword_297E18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DoNotDisturbData, &type metadata for DoNotDisturbData);
    atomic_store(result, (unint64_t *)&qword_297E18);
  }
  return result;
}

unint64_t sub_469F8()
{
  unint64_t result;

  result = qword_297E20;
  if (!qword_297E20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserEmbeddingData, &type metadata for UserEmbeddingData);
    atomic_store(result, (unint64_t *)&qword_297E20);
  }
  return result;
}

uint64_t PlayEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  char v32;
  int v33;
  char v34;
  char v35;
  unint64_t v36;
  char v37;
  int v38;
  char v39;
  int v40;
  char v41;
  char v42;
  int v43;
  char v44;
  char v45;
  int v46;
  char v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  int v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int *v74;
  __int128 v75;
  _BYTE v76[32];
  uint64_t v77;
  __int16 v78;
  int v79;
  char v80;
  int v81;
  char v82;
  int v83;
  char v84;
  __int128 v85;
  int v86;
  char v87;

  v65 = a2;
  v70 = type metadata accessor for TimedData(0);
  v68 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v5 = (uint64_t *)((char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = type metadata accessor for EventData(0);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v7 = (uint64_t *)((char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = sub_71B4(&qword_297E28);
  v8 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = (int *)type metadata accessor for PlayEvent.Model(0);
  __chkstk_darwin(v74);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v72 = a1;
  sub_7988(a1, v14);
  v15 = sub_4692C();
  v66 = v10;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PlayEvent.Model.CodingKeys, &type metadata for PlayEvent.Model.CodingKeys, v15, v14, v13);
  if (v2)
  {
    v73 = v2;
    result = sub_7DAC(v72);
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v87 = 0;
    v16 = sub_1779C();
    v17 = v67;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v75, &type metadata for ContentData, &v87, v67, &type metadata for ContentData, v16);
    v25 = *((_QWORD *)&v75 + 1);
    v26 = v76[0];
    v27 = *(_OWORD *)&v76[8];
    v28 = *(_QWORD *)&v76[24];
    v29 = v77;
    v30 = v78;
    v31 = v79;
    v32 = v80;
    v33 = v81;
    v34 = v82;
    v35 = v84;
    *(_QWORD *)v12 = v75;
    *((_QWORD *)v12 + 1) = v25;
    v12[16] = v26;
    *(_OWORD *)(v12 + 24) = v27;
    *((_QWORD *)v12 + 5) = v28;
    *((_QWORD *)v12 + 6) = v29;
    *((_WORD *)v12 + 28) = v30;
    *((_DWORD *)v12 + 15) = v31;
    v12[64] = v32;
    *((_DWORD *)v12 + 17) = v33;
    v12[72] = v34;
    *(_DWORD *)(v12 + 73) = v83;
    v12[77] = v35;
    *((_OWORD *)v12 + 5) = v85;
    v87 = 1;
    v36 = sub_4724C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v75, &type metadata for ListeningSessionData, &v87, v17, &type metadata for ListeningSessionData, v36);
    v37 = BYTE4(v75);
    v38 = DWORD2(v75);
    v39 = BYTE12(v75);
    v40 = *(_DWORD *)v76;
    v41 = v76[24];
    v42 = v76[25];
    v43 = *(_DWORD *)&v76[28];
    v44 = v77;
    v45 = BYTE1(v77);
    v46 = HIDWORD(v77);
    v47 = v78;
    v48 = HIBYTE(v78);
    *((_DWORD *)v12 + 24) = v75;
    v12[100] = v37;
    *((_DWORD *)v12 + 26) = v38;
    v12[108] = v39;
    *((_DWORD *)v12 + 28) = v40;
    *(_OWORD *)(v12 + 120) = *(_OWORD *)&v76[8];
    v12[136] = v41;
    v12[137] = v42;
    *((_DWORD *)v12 + 35) = v43;
    v12[144] = v44;
    v12[145] = v45;
    *((_DWORD *)v12 + 37) = v46;
    v12[152] = v47;
    v12[153] = v48;
    v87 = 2;
    v49 = sub_17824();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v75, &type metadata for ListeningActionSourceData, &v87, v17, &type metadata for ListeningActionSourceData, v49);
    *((_WORD *)v12 + 77) = v75;
    v87 = 3;
    v50 = sub_17868();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v75, &type metadata for BitRateData, &v87, v17, &type metadata for BitRateData, v50);
    v51 = BYTE4(v75);
    v52 = DWORD2(v75);
    *((_DWORD *)v12 + 39) = v75;
    v12[160] = v51;
    *((_DWORD *)v12 + 41) = v52;
    v87 = 4;
    v53 = sub_178AC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v75, &type metadata for ErrorData, &v87, v17, &type metadata for ErrorData, v53);
    v54 = *(_OWORD *)v76;
    *(_OWORD *)(v12 + 168) = v75;
    *(_OWORD *)(v12 + 184) = v54;
    v87 = 5;
    v55 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v75, &type metadata for UpSellData, &v87, v17, &type metadata for UpSellData, v55);
    v56 = *(_QWORD *)v76;
    *(_OWORD *)(v12 + 200) = v75;
    *((_QWORD *)v12 + 27) = v56;
    v87 = 6;
    v57 = sub_47290();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v75, &type metadata for DoNotDisturbData, &v87, v17, &type metadata for DoNotDisturbData, v57);
    *((_WORD *)v12 + 112) = v75;
    v87 = 7;
    v58 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v75, &type metadata for SeriesData, &v87, v17, &type metadata for SeriesData, v58);
    v86 = 1;
    v59 = *(_OWORD *)v76;
    *(_OWORD *)(v12 + 232) = v75;
    v60 = *(_OWORD *)&v76[16];
    *(_OWORD *)(v12 + 248) = v59;
    *(_OWORD *)(v12 + 264) = v60;
    LOBYTE(v75) = 8;
    v61 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v71, &v75, v17, v71, v61);
    (*(void (**)(char *, _QWORD *, uint64_t))(v69 + 32))(&v12[v74[12]], v7, v71);
    LOBYTE(v75) = 9;
    v62 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v70, &v75, v17, v70, v62);
    v73 = 0;
    (*(void (**)(char *, _QWORD *, uint64_t))(v68 + 32))(&v12[v74[13]], v5, v70);
    v87 = 10;
    v63 = sub_472D4();
    v64 = v73;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v75, &type metadata for UserEmbeddingData, &v87, v67, &type metadata for UserEmbeddingData, v63);
    v73 = v64;
    if (!v64)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v66, v67);
      *(_QWORD *)&v12[v74[14]] = v75;
      sub_47318((uint64_t)v12, v65);
      sub_7DAC(v72);
      return sub_4735C((uint64_t)v12);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v66, v67);
    v20 = 1;
    v19 = 1;
    sub_7DAC(v72);
    v22 = *((_QWORD *)v12 + 1);
    v23 = *((_QWORD *)v12 + 4);
    v24 = *((_QWORD *)v12 + 11);
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 6));
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
    LOBYTE(v23) = v86;
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 16));
    v21 = *((_QWORD *)v12 + 22);
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 24));
    swift_bridgeObjectRelease(v21);
    result = swift_bridgeObjectRelease(*((_QWORD *)v12 + 27));
    if ((v23 & 1) != 0)
    {
      sub_17788(*((_QWORD *)v12 + 29), *((_QWORD *)v12 + 30), *((_QWORD *)v12 + 31), *((_QWORD *)v12 + 32), *((_QWORD *)v12 + 33), *((_QWORD *)v12 + 34));
      goto LABEL_9;
    }
  }
  if (v20)
  {
LABEL_9:
    result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(&v12[v74[12]], v71);
    if ((v19 & 1) == 0)
      return result;
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(&v12[v74[13]], v70);
  }
  if (!v19)
    return result;
  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(&v12[v74[13]], v70);
}

unint64_t sub_4724C()
{
  unint64_t result;

  result = qword_297E30;
  if (!qword_297E30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListeningSessionData, &type metadata for ListeningSessionData);
    atomic_store(result, (unint64_t *)&qword_297E30);
  }
  return result;
}

unint64_t sub_47290()
{
  unint64_t result;

  result = qword_297E38;
  if (!qword_297E38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DoNotDisturbData, &type metadata for DoNotDisturbData);
    atomic_store(result, (unint64_t *)&qword_297E38);
  }
  return result;
}

unint64_t sub_472D4()
{
  unint64_t result;

  result = qword_297E40;
  if (!qword_297E40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserEmbeddingData, &type metadata for UserEmbeddingData);
    atomic_store(result, (unint64_t *)&qword_297E40);
  }
  return result;
}

uint64_t sub_47318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlayEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4735C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlayEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_47398@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PlayEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_473AC(_QWORD *a1)
{
  return PlayEvent.Model.encode(to:)(a1);
}

uint64_t sub_473C0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_297DB8, (uint64_t)sub_454E4, a1);
}

uint64_t sub_473E4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_297DD0, (uint64_t)sub_45524, a1);
}

uint64_t sub_47408@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v4, v11);
  v12 = a2 + a1[8];
  v13 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v4, v13);
  v14 = a2 + a1[9];
  v15 = enum case for EventProperty.optional<A>(_:);
  v16 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v4, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v15, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
  v25 = a2 + a1[14];
  v26 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v25, v15, v26);
}

uint64_t *initializeBufferWithCopyOfBuffer for PlayEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v48 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v48 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v48);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_297DE8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296770);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296778);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_296780);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_297DF0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[14];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_71B4(&qword_297DF8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  }
  return a1;
}

uint64_t destroy for PlayEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[14];
  v24 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

uint64_t initializeWithCopy for PlayEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  return a1;
}

uint64_t assignWithCopy for PlayEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  return a1;
}

uint64_t initializeWithTake for PlayEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t assignWithTake for PlayEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_297DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_296780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_48360);
}

uint64_t sub_48360(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_297DE8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296770);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296778);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_296780);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_296F68);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_297DF0);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296310);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_295D70);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_295D78);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v8 = sub_71B4(&qword_297DF8);
                      v12 = *(_QWORD *)(v8 - 8);
                      v13 = a3[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PlayEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_48550);
}

uint64_t sub_48550(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_297DE8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296770);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296778);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_296780);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_296F68);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_297DF0);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296310);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_295D70);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_295D78);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v10 = sub_71B4(&qword_297DF8);
                      v14 = *(_QWORD *)(v10 - 8);
                      v15 = a4[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_4873C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[11];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v24[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_297EB0, (uint64_t (*)(void))sub_4724C, (uint64_t (*)(void))sub_46970, (uint64_t)&type metadata for ListeningSessionData);
    if (v5 <= 0x3F)
    {
      v24[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296868, (uint64_t (*)(void))sub_17824, (uint64_t (*)(void))sub_171A0, (uint64_t)&type metadata for ListeningActionSourceData);
      if (v7 <= 0x3F)
      {
        v24[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_296870, (uint64_t (*)(void))sub_17868, (uint64_t (*)(void))sub_171E4, (uint64_t)&type metadata for BitRateData);
        if (v9 <= 0x3F)
        {
          v24[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, (unint64_t *)&unk_296878, (uint64_t (*)(void))sub_178AC, (uint64_t (*)(void))sub_17228, (uint64_t)&type metadata for ErrorData);
          if (v11 <= 0x3F)
          {
            v24[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
            if (v13 <= 0x3F)
            {
              v24[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, &qword_297EB8, (uint64_t (*)(void))sub_47290, (uint64_t (*)(void))sub_469B4, (uint64_t)&type metadata for DoNotDisturbData);
              if (v15 <= 0x3F)
              {
                v24[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                if (v17 <= 0x3F)
                {
                  v24[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_8734(319);
                  if (v19 <= 0x3F)
                  {
                    v24[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_87D8(319);
                    if (v21 <= 0x3F)
                    {
                      v24[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_B9C8(319, (unint64_t *)&unk_297EC0, (uint64_t (*)(void))sub_472D4, (uint64_t (*)(void))sub_469F8, (uint64_t)&type metadata for UserEmbeddingData);
                      if (v23 <= 0x3F)
                      {
                        v24[10] = *(_QWORD *)(v22 - 8) + 64;
                        swift_initStructMetadata(a1, 256, 11, v24, a1 + 16);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PlayEvent.Model(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v30 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v30;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v9 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v9;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v10 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v10;
    *(_BYTE *)(a1 + 100) = *((_BYTE *)a2 + 100);
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    v11 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v11;
    *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
    *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
    *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
    v12 = *((_DWORD *)a2 + 37);
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    *(_DWORD *)(a1 + 148) = v12;
    *(_BYTE *)(a1 + 153) = *((_BYTE *)a2 + 153);
    *(_WORD *)(a1 + 154) = *((_WORD *)a2 + 77);
    *(_DWORD *)(a1 + 164) = *((_DWORD *)a2 + 41);
    *(_QWORD *)(a1 + 156) = *(uint64_t *)((char *)a2 + 156);
    v13 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v13;
    v14 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v14;
    *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
    *(_BYTE *)(a1 + 201) = *((_BYTE *)a2 + 201);
    v15 = a2[27];
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_QWORD *)(a1 + 216) = v15;
    *(_WORD *)(a1 + 224) = *((_WORD *)a2 + 112);
    v16 = a2[34];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    if (v16 == 1)
    {
      v17 = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(a1 + 248) = v17;
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    }
    else
    {
      *(_QWORD *)(a1 + 232) = a2[29];
      *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
      *(_QWORD *)(a1 + 248) = a2[31];
      *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)((char *)a2 + 257);
      *(_QWORD *)(a1 + 264) = a2[33];
      *(_QWORD *)(a1 + 272) = v16;
      swift_bridgeObjectRetain(v16);
    }
    v19 = a3[12];
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[13];
    v24 = a1 + v23;
    v25 = (uint64_t)a2 + v23;
    v26 = type metadata accessor for TimedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
    v27 = a3[14];
    v28 = *(uint64_t *)((char *)a2 + v27);
    *(_QWORD *)(a1 + v27) = v28;
    swift_bridgeObjectRetain(v28);
  }
  return a1;
}

uint64_t destroy for PlayEvent.Model(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[27]);
  v4 = a1[34];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + a2[12];
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + a2[13];
  v8 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14]));
}

uint64_t initializeWithCopy for PlayEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v8;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v11 = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = v11;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  v12 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v13;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v14;
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  v15 = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v16;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  }
  else
  {
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v15;
    swift_bridgeObjectRetain(v15);
  }
  v17 = a3[12];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[13];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  v25 = a3[14];
  v26 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t assignWithCopy for PlayEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v16;
  v17 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v17;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v20 = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_DWORD *)(a1 + 140) = v20;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  v21 = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = v21;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  v22 = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = v22;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v23 = *(_QWORD *)(a2 + 176);
  v24 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v25 = *(_QWORD *)(a2 + 192);
  v26 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v27 = *(_QWORD *)(a2 + 216);
  v28 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  v29 = (__int128 *)(a1 + 232);
  v30 = (__int128 *)(a2 + 232);
  v31 = *(_QWORD *)(a1 + 272);
  v32 = *(_QWORD *)(a2 + 272);
  if (v31 == 1)
  {
    if (v32 == 1)
    {
      v33 = *v30;
      v34 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v34;
      *v29 = v33;
    }
    else
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
      *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v37 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 272) = v37;
      swift_bridgeObjectRetain(v37);
    }
  }
  else if (v32 == 1)
  {
    sub_19008(a1 + 232);
    v36 = *(_OWORD *)(a2 + 248);
    v35 = *(_OWORD *)(a2 + 264);
    *v29 = *v30;
    *(_OWORD *)(a1 + 248) = v36;
    *(_OWORD *)(a1 + 264) = v35;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v38 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v38;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRelease(v31);
  }
  v39 = a3[12];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[13];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = a3[14];
  v48 = *(_QWORD *)(a1 + v47);
  v49 = *(_QWORD *)(a2 + v47);
  *(_QWORD *)(a1 + v47) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v48);
  return a1;
}

uint64_t initializeWithTake for PlayEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  v9 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v10;
  *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  v11 = *(_OWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v12;
  v13 = a3[12];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)(a1 + 232) = v11;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[13];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for PlayEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  v16 = *(_QWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 192);
  v19 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v18;
  swift_bridgeObjectRelease(v19);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  v20 = *(_QWORD *)(a2 + 216);
  v21 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v20;
  swift_bridgeObjectRelease(v21);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  v22 = *(_QWORD *)(a1 + 272);
  if (v22 != 1)
  {
    v23 = *(_QWORD *)(a2 + 272);
    if (v23 != 1)
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v23;
      swift_bridgeObjectRelease(v22);
      goto LABEL_6;
    }
    sub_19008(a1 + 232);
  }
  v24 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v24;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
LABEL_6:
  v25 = a3[12];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  v29 = a3[13];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  v33 = a3[14];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_bridgeObjectRelease(v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_496DC);
}

uint64_t sub_496DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 48);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PlayEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_49788);
}

uint64_t sub_49788(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 48);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_49824(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[1] = &unk_1F5568;
  v5[2] = &unk_1F5580;
  v5[3] = &unk_1F5598;
  v5[4] = &unk_1F55B0;
  v5[5] = &unk_1F55C8;
  v5[6] = &unk_1F55E0;
  v5[7] = &unk_1F55F8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[8] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[9] = *(_QWORD *)(result - 8) + 64;
      v5[10] = &unk_1F5610;
      swift_initStructMetadata(a1, 256, 11, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlayEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_4994C + 4 * byte_1F5418[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_49980 + 4 * byte_1F5413[v4]))();
}

uint64_t sub_49980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_49988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x49990);
  return result;
}

uint64_t sub_4999C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x499A4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_499A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_499B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayEvent.Model.CodingKeys()
{
  return &type metadata for PlayEvent.Model.CodingKeys;
}

unint64_t sub_499D0()
{
  unint64_t result;

  result = qword_297FD0;
  if (!qword_297FD0)
  {
    result = swift_getWitnessTable(&unk_1F56C4, &type metadata for PlayEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297FD0);
  }
  return result;
}

unint64_t sub_49A18()
{
  unint64_t result;

  result = qword_297FD8;
  if (!qword_297FD8)
  {
    result = swift_getWitnessTable(&unk_1F5634, &type metadata for PlayEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297FD8);
  }
  return result;
}

unint64_t sub_49A60()
{
  unint64_t result;

  result = qword_297FE0;
  if (!qword_297FE0)
  {
    result = swift_getWitnessTable(&unk_1F565C, &type metadata for PlayEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297FE0);
  }
  return result;
}

uint64_t sub_49AA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x800000000021F050;
    if (a2 == 0x800000000021F050)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F050, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000000021EC40)
  {
    v8 = 0x800000000021EC40;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000021EC40, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x4465746152746962 && a2 == 0xEB00000000617461)
  {
    v9 = 0xEB00000000617461;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4465746152746962, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144726F727265 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144726F727265, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x800000000021F070;
    if (a2 == 0x800000000021F070)
      goto LABEL_42;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F070, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v13 = 0xEA00000000006174;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v14 = 0xE900000000000061;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    v15 = 0xE900000000000061;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F090)
  {
    swift_bridgeObjectRelease(0x800000000021F090);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F090, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

void static DialogData.== infix(_:_:)(char *a1)
{
  sub_2BFFC(*a1);
}

uint64_t sub_49F4C()
{
  return 0x7954676F6C616964;
}

uint64_t sub_49F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7954676F6C616964 && a2 == 0xEA00000000006570)
  {
    result = swift_bridgeObjectRelease(0xEA00000000006570);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7954676F6C616964, 0xEA00000000006570, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_4A008(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4A154();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4A030(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4A154();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DialogData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_297FE8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_4A154();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DialogData.CodingKeys, &type metadata for DialogData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_4A198();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for DialogType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_4A154()
{
  unint64_t result;

  result = qword_297FF0;
  if (!qword_297FF0)
  {
    result = swift_getWitnessTable(&unk_1F58DC, &type metadata for DialogData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_297FF0);
  }
  return result;
}

unint64_t sub_4A198()
{
  unint64_t result;

  result = qword_297FF8;
  if (!qword_297FF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DialogType, &type metadata for DialogType);
    atomic_store(result, (unint64_t *)&qword_297FF8);
  }
  return result;
}

uint64_t DialogData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_298000);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_4A154();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DialogData.CodingKeys, &type metadata for DialogData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_4A2F8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for DialogType, v13, v5, &type metadata for DialogType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

unint64_t sub_4A2F8()
{
  unint64_t result;

  result = qword_298008;
  if (!qword_298008)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DialogType, &type metadata for DialogType);
    atomic_store(result, (unint64_t *)&qword_298008);
  }
  return result;
}

unint64_t sub_4A340()
{
  unint64_t result;

  result = qword_298010;
  if (!qword_298010)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DialogData, &type metadata for DialogData);
    atomic_store(result, (unint64_t *)&qword_298010);
  }
  return result;
}

unint64_t sub_4A388()
{
  unint64_t result;

  result = qword_298018;
  if (!qword_298018)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DialogData, &type metadata for DialogData);
    atomic_store(result, (unint64_t *)&qword_298018);
  }
  return result;
}

uint64_t sub_4A3CC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DialogData.init(from:)(a1, a2);
}

uint64_t sub_4A3E0(_QWORD *a1)
{
  return DialogData.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for DialogData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_4A440 + 4 * byte_1F5741[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_4A474 + 4 * byte_1F573C[v4]))();
}

uint64_t sub_4A474(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4A47C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x4A484);
  return result;
}

uint64_t sub_4A490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x4A498);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_4A49C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4A4A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogData()
{
  return &type metadata for DialogData;
}

uint64_t storeEnumTagSinglePayload for DialogData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_4A500 + 4 * byte_1F5746[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_4A520 + 4 * byte_1F574B[v4]))();
}

_BYTE *sub_4A500(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_4A520(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_4A528(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_4A530(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_4A538(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_4A540(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DialogData.CodingKeys()
{
  return &type metadata for DialogData.CodingKeys;
}

unint64_t sub_4A560()
{
  unint64_t result;

  result = qword_298020;
  if (!qword_298020)
  {
    result = swift_getWitnessTable(&unk_1F58B4, &type metadata for DialogData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298020);
  }
  return result;
}

unint64_t sub_4A5A8()
{
  unint64_t result;

  result = qword_298028;
  if (!qword_298028)
  {
    result = swift_getWitnessTable(&unk_1F5824, &type metadata for DialogData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298028);
  }
  return result;
}

unint64_t sub_4A5F0()
{
  unint64_t result;

  result = qword_298030;
  if (!qword_298030)
  {
    result = swift_getWitnessTable(&unk_1F584C, &type metadata for DialogData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298030);
  }
  return result;
}

uint64_t sub_4A634(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_298038, &enum case for SessionGroup.default(_:));
}

uint64_t static ContentDetailsViewScrollEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298038, a1);
}

uint64_t sub_4A674(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_298050, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ContentDetailsViewScrollEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298050, a1);
}

uint64_t ContentDetailsViewScrollEvent.scrollData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewScrollEvent(0) + 20);
  v4 = sub_71B4(&qword_298068);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContentDetailsViewScrollEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2980F0, (uint64_t)&nominal type descriptor for ContentDetailsViewScrollEvent);
}

uint64_t ContentDetailsViewScrollEvent.scrollData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewScrollEvent(0) + 20);
  v4 = sub_71B4(&qword_298068);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewScrollEvent.scrollData.modify())()
{
  type metadata accessor for ContentDetailsViewScrollEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewScrollEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewScrollEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ContentDetailsViewScrollEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewScrollEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ContentDetailsViewScrollEvent.eventData.modify())()
{
  type metadata accessor for ContentDetailsViewScrollEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentDetailsViewScrollEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ContentDetailsViewScrollEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_298068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

double ContentDetailsViewScrollEvent.Model.scrollData.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 96);
  *a1 = result;
  return result;
}

uint64_t ContentDetailsViewScrollEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ContentDetailsViewScrollEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContentDetailsViewScrollEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_298190, (uint64_t)&nominal type descriptor for ContentDetailsViewScrollEvent.Model);
}

uint64_t ContentDetailsViewScrollEvent.Model.init(contentData:scrollData:eventData:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_WORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 68);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 77);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v9;
  *(_WORD *)(a4 + 56) = v10;
  *(_DWORD *)(a4 + 60) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 68) = v13;
  *(_BYTE *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v15;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a4 + 96) = *a2;
  v16 = a4 + *(int *)(type metadata accessor for ContentDetailsViewScrollEvent.Model(0) + 24);
  v17 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
}

uint64_t sub_4AA18()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x61446C6C6F726373;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_4AA84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_4C11C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_4AAA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4ACF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4AAD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4ACF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentDetailsViewScrollEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;
  char v41;
  int v42;
  char v43;
  __int128 v44;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_298070);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_4ACF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys, &type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v32[0] = *(_QWORD *)v4;
  v32[1] = v13;
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v40 = v21;
  v41 = v22;
  v42 = *(_DWORD *)(v4 + 73);
  v43 = v23;
  v44 = *(_OWORD *)(v4 + 80);
  v31 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v31, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v32[0] = *(_QWORD *)(v4 + 96);
    v31 = 1;
    v25 = sub_4AD38();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v31, v6, &type metadata for ScrollData, v25);
    v26 = v4 + *(int *)(type metadata accessor for ContentDetailsViewScrollEvent.Model(0) + 24);
    LOBYTE(v32[0]) = 2;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v32, v6, v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_4ACF4()
{
  unint64_t result;

  result = qword_298078;
  if (!qword_298078)
  {
    result = swift_getWitnessTable(&unk_1F5B0C, &type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298078);
  }
  return result;
}

unint64_t sub_4AD38()
{
  unint64_t result;

  result = qword_298080;
  if (!qword_298080)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollData, &type metadata for ScrollData);
    atomic_store(result, (unint64_t *)&qword_298080);
  }
  return result;
}

uint64_t ContentDetailsViewScrollEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  int v50;
  char v51;
  int v52;
  char v53;
  __int128 v54;
  char v55;

  v36 = a2;
  v37 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_71B4(&qword_298088);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContentDetailsViewScrollEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v40 = a1;
  sub_7988(a1, v12);
  v14 = sub_4ACF4();
  v38 = v8;
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys, &type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(v40);
  v41 = v9;
  v16 = v6;
  v17 = v5;
  v18 = v37;
  v55 = 0;
  v19 = sub_1779C();
  v21 = v38;
  v20 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v42, &type metadata for ContentData, &v55, v39, &type metadata for ContentData, v19);
  v22 = v42[1];
  v23 = v43;
  v24 = v44;
  v25 = v45;
  v26 = v46;
  v27 = v47;
  v28 = v48;
  v29 = v49;
  v30 = v50;
  v31 = v51;
  v32 = v53;
  *(_QWORD *)v11 = v42[0];
  *((_QWORD *)v11 + 1) = v22;
  v11[16] = v23;
  *(_OWORD *)(v11 + 24) = v24;
  *((_QWORD *)v11 + 5) = v25;
  *((_QWORD *)v11 + 6) = v26;
  *((_WORD *)v11 + 28) = v27;
  *((_DWORD *)v11 + 15) = v28;
  v11[64] = v29;
  *((_DWORD *)v11 + 17) = v30;
  v11[72] = v31;
  *(_DWORD *)(v11 + 73) = v52;
  v11[77] = v32;
  *((_OWORD *)v11 + 5) = v54;
  v55 = 1;
  v33 = sub_4B0A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v42, &type metadata for ScrollData, &v55, v20, &type metadata for ScrollData, v33);
  *((_QWORD *)v11 + 12) = v42[0];
  LOBYTE(v42[0]) = 2;
  v34 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v42, v20, v18, v34);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v20);
  (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v11[*(int *)(v41 + 24)], v17, v18);
  sub_4B0E4((uint64_t)v11, v36);
  sub_7DAC(v40);
  return sub_4B128((uint64_t)v11);
}

unint64_t sub_4B0A0()
{
  unint64_t result;

  result = qword_298090;
  if (!qword_298090)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollData, &type metadata for ScrollData);
    atomic_store(result, (unint64_t *)&qword_298090);
  }
  return result;
}

uint64_t sub_4B0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentDetailsViewScrollEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4B128(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContentDetailsViewScrollEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_4B164@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ContentDetailsViewScrollEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_4B178(_QWORD *a1)
{
  return ContentDetailsViewScrollEvent.Model.encode(to:)(a1);
}

uint64_t sub_4B18C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955B0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298038, (uint64_t)sub_4A634, a1);
}

uint64_t sub_4B1B0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955B8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298050, (uint64_t)sub_4A674, a1);
}

uint64_t sub_4B1D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_298068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContentDetailsViewScrollEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_298068);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ContentDetailsViewScrollEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_298068);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ContentDetailsViewScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ContentDetailsViewScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ContentDetailsViewScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ContentDetailsViewScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentDetailsViewScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4B6F8);
}

uint64_t sub_4B6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_298068);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ContentDetailsViewScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4B7A8);
}

uint64_t sub_4B7A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_298068);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_4B854(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_298100, (uint64_t (*)(void))sub_4B0A0, (uint64_t (*)(void))sub_4AD38, (uint64_t)&type metadata for ScrollData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ContentDetailsViewScrollEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v8 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v8;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t)a2 + v10;
    v12 = a1 + v10;
    *(_QWORD *)(a1 + 96) = a2[12];
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v12, v11, v13);
  }
  return v3;
}

uint64_t initializeWithCopy for ContentDetailsViewScrollEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(int *)(a3 + 24);
  v10 = a2 + v9;
  v11 = a1 + v9;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v11, v10, v12);
  return a1;
}

uint64_t assignWithCopy for ContentDetailsViewScrollEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for ContentDetailsViewScrollEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

uint64_t assignWithTake for ContentDetailsViewScrollEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentDetailsViewScrollEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4BE00);
}

uint64_t sub_4BE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ContentDetailsViewScrollEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4BE88);
}

uint64_t sub_4BE88(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_4BEFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_1F5A30;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentDetailsViewScrollEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_4BFC4 + 4 * byte_1F5935[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_4BFF8 + 4 * byte_1F5930[v4]))();
}

uint64_t sub_4BFF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4C000(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x4C008);
  return result;
}

uint64_t sub_4C014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x4C01CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_4C020(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4C028(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentDetailsViewScrollEvent.Model.CodingKeys()
{
  return &type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys;
}

unint64_t sub_4C048()
{
  unint64_t result;

  result = qword_2981D0;
  if (!qword_2981D0)
  {
    result = swift_getWitnessTable(&unk_1F5AE4, &type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2981D0);
  }
  return result;
}

unint64_t sub_4C090()
{
  unint64_t result;

  result = qword_2981D8;
  if (!qword_2981D8)
  {
    result = swift_getWitnessTable(&unk_1F5A54, &type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2981D8);
  }
  return result;
}

unint64_t sub_4C0D8()
{
  unint64_t result;

  result = qword_2981E0;
  if (!qword_2981E0)
  {
    result = swift_getWitnessTable(&unk_1F5A7C, &type metadata for ContentDetailsViewScrollEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2981E0);
  }
  return result;
}

uint64_t sub_4C11C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x61446C6C6F726373 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C6F726373, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_4C2A0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2981E8, &enum case for SessionGroup.default(_:));
}

uint64_t static ThemeCustomizedEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2981E8, a1);
}

uint64_t sub_4C2E0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_298200, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ThemeCustomizedEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298200, a1);
}

uint64_t ThemeCustomizedEvent.textData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 20);
  v4 = sub_71B4(&qword_296010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ThemeCustomizedEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_298288, (uint64_t)&nominal type descriptor for ThemeCustomizedEvent);
}

uint64_t ThemeCustomizedEvent.textData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 20);
  v4 = sub_71B4(&qword_296010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizedEvent.textData.modify())()
{
  type metadata accessor for ThemeCustomizedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizedEvent.layoutOptionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 24);
  v4 = sub_71B4(&qword_296018);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizedEvent.layoutOptionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 24);
  v4 = sub_71B4(&qword_296018);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizedEvent.layoutOptionData.modify())()
{
  type metadata accessor for ThemeCustomizedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizedEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 28);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizedEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 28);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizedEvent.contentData.modify())()
{
  type metadata accessor for ThemeCustomizedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizedEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizedEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 32);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizedEvent.eventData.modify())()
{
  type metadata accessor for ThemeCustomizedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizedEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizedEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent(0) + 36);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemeCustomizedEvent.timedData.modify())()
{
  type metadata accessor for ThemeCustomizedEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemeCustomizedEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for ThemeCustomizedEvent(0);
  v5 = a1 + v4[5];
  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + v4[6];
  v8 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + v4[7];
  v10 = enum case for EventProperty.optional<A>(_:);
  v11 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v2, v15);
}

void ThemeCustomizedEvent.Model.layoutOptionData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  int v4;
  char v5;
  int v6;
  char v7;
  char v8;

  v2 = *(_DWORD *)(v1 + 64);
  v3 = *(_BYTE *)(v1 + 68);
  v4 = *(_DWORD *)(v1 + 72);
  v5 = *(_BYTE *)(v1 + 76);
  v6 = *(_DWORD *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 84);
  v8 = *(_BYTE *)(v1 + 85);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 60);
  *(_DWORD *)(a1 + 4) = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v8;
}

uint64_t ThemeCustomizedEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[11];
  v3 = v1[12];
  v4 = v1[13];
  v5 = v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v8 = v1[17];
  v9 = v1[18];
  v10 = v1[19];
  v11 = v1[20];
  v12 = v1[21];
  v13 = v1[22];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_4C8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t ThemeCustomizedEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent.Model(0) + 32);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ThemeCustomizedEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_298328, (uint64_t)&nominal type descriptor for ThemeCustomizedEvent.Model);
}

uint64_t ThemeCustomizedEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemeCustomizedEvent.Model(0) + 36);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemeCustomizedEvent.Model.init(themesData:textData:layoutOptionData:contentData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  char v21;
  int v22;
  char v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_OWORD *)a7 = *(_OWORD *)a1;
  v10 = a4[1];
  *(_OWORD *)(a7 + 88) = *a4;
  *(_OWORD *)(a7 + 104) = v10;
  v11 = a4[3];
  *(_OWORD *)(a7 + 120) = a4[2];
  *(_OWORD *)(a7 + 136) = v11;
  v12 = a4[5];
  *(_OWORD *)(a7 + 152) = a4[4];
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *a2;
  v17 = a2[1];
  v18 = *((_BYTE *)a2 + 16);
  v19 = *a3;
  v20 = *((_DWORD *)a3 + 1);
  v21 = a3[8];
  v22 = *((_DWORD *)a3 + 3);
  v23 = a3[16];
  v24 = *((_DWORD *)a3 + 5);
  v25 = a3[24];
  v26 = a3[25];
  *(_QWORD *)(a7 + 16) = v13;
  *(_QWORD *)(a7 + 24) = v14;
  *(_BYTE *)(a7 + 32) = v15;
  *(_QWORD *)(a7 + 40) = v16;
  *(_QWORD *)(a7 + 48) = v17;
  *(_BYTE *)(a7 + 56) = v18;
  *(_BYTE *)(a7 + 60) = v19;
  *(_DWORD *)(a7 + 64) = v20;
  *(_BYTE *)(a7 + 68) = v21;
  *(_DWORD *)(a7 + 72) = v22;
  *(_BYTE *)(a7 + 76) = v23;
  *(_DWORD *)(a7 + 80) = v24;
  *(_BYTE *)(a7 + 84) = v25;
  *(_BYTE *)(a7 + 85) = v26;
  *(_OWORD *)(a7 + 168) = v12;
  v27 = type metadata accessor for ThemeCustomizedEvent.Model(0);
  v28 = a7 + *(int *)(v27 + 32);
  v29 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, a5, v29);
  v30 = a7 + *(int *)(v27 + 36);
  v31 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v30, a6, v31);
}

uint64_t sub_4CAE4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_4CB18 + 4 * byte_1F5B60[*v0]))(0x614473656D656874, 0xEA00000000006174);
}

uint64_t sub_4CB18()
{
  return 0x6174614474786574;
}

unint64_t sub_4CB30()
{
  return 0xD000000000000010;
}

uint64_t sub_4CB4C()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_4CB6C()
{
  return 0x746144746E657665;
}

uint64_t sub_4CB98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_4F07C(a1, a2);
  *a3 = result;
  return result;
}

void sub_4CBBC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_4CBC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4CF14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4CBF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4CF14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ThemeCustomizedEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int v19;
  char v20;
  int v21;
  char v22;
  int v23;
  char v24;
  char v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v3 = v1;
  v5 = sub_71B4(&qword_298218);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_4CF14();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ThemeCustomizedEvent.Model.CodingKeys, &type metadata for ThemeCustomizedEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v14 = *((_BYTE *)v3 + 32);
  v39 = *v3;
  *(_QWORD *)&v40 = v12;
  *((_QWORD *)&v40 + 1) = v13;
  LOBYTE(v41) = v14;
  v45 = 0;
  v15 = sub_A7E0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v45, v5, &type metadata for ThemesData, v15);
  if (!v2)
  {
    v16 = *((_QWORD *)v3 + 6);
    v17 = *((_BYTE *)v3 + 56);
    *(_QWORD *)&v39 = *((_QWORD *)v3 + 5);
    *((_QWORD *)&v39 + 1) = v16;
    LOBYTE(v40) = v17;
    v45 = 1;
    v18 = sub_A824();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v45, v5, &type metadata for TextData, v18);
    v19 = *((_DWORD *)v3 + 16);
    v20 = *((_BYTE *)v3 + 68);
    v21 = *((_DWORD *)v3 + 18);
    v22 = *((_BYTE *)v3 + 76);
    v23 = *((_DWORD *)v3 + 20);
    v24 = *((_BYTE *)v3 + 84);
    v25 = *((_BYTE *)v3 + 85);
    LOBYTE(v39) = *((_BYTE *)v3 + 60);
    DWORD1(v39) = v19;
    BYTE8(v39) = v20;
    HIDWORD(v39) = v21;
    LOBYTE(v40) = v22;
    DWORD1(v40) = v23;
    BYTE8(v40) = v24;
    BYTE9(v40) = v25;
    v45 = 2;
    v26 = sub_A868();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v45, v5, &type metadata for LayoutOptionData, v26);
    v27 = *(__int128 *)((char *)v3 + 104);
    v39 = *(__int128 *)((char *)v3 + 88);
    v40 = v27;
    v28 = *(__int128 *)((char *)v3 + 136);
    v41 = *(__int128 *)((char *)v3 + 120);
    v42 = v28;
    v29 = *(__int128 *)((char *)v3 + 168);
    v43 = *(__int128 *)((char *)v3 + 152);
    v44 = v29;
    v45 = 3;
    v30 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v45, v5, &type metadata for ContentData, v30);
    v31 = type metadata accessor for ThemeCustomizedEvent.Model(0);
    v32 = (uint64_t)v3 + *(int *)(v31 + 32);
    LOBYTE(v39) = 4;
    v33 = type metadata accessor for EventData(0);
    v34 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v39, v5, v33, v34);
    v35 = (uint64_t)v3 + *(int *)(v31 + 36);
    LOBYTE(v39) = 5;
    v36 = type metadata accessor for TimedData(0);
    v37 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v39, v5, v36, v37);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_4CF14()
{
  unint64_t result;

  result = qword_298220;
  if (!qword_298220)
  {
    result = swift_getWitnessTable(&unk_1F5D94, &type metadata for ThemeCustomizedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298220);
  }
  return result;
}

uint64_t ThemeCustomizedEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  int v27;
  char v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD v44[2];
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;

  v47 = a2;
  v49 = type metadata accessor for TimedData(0);
  v46 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (_QWORD *)((char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v6 = (_QWORD *)((char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_71B4(&qword_298228);
  v7 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ThemeCustomizedEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v53 = a1;
  sub_7988(a1, v13);
  v15 = sub_4CF14();
  v52 = v9;
  v16 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ThemeCustomizedEvent.Model.CodingKeys, &type metadata for ThemeCustomizedEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(v53);
  v45 = v6;
  v17 = v7;
  v18 = v49;
  v54 = v4;
  v61 = 0;
  v19 = sub_AD18();
  v20 = v50;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ThemesData, &v61, v50, &type metadata for ThemesData, v19);
  v21 = v56;
  v22 = v57;
  *(_OWORD *)v12 = v55;
  *((_OWORD *)v12 + 1) = v21;
  v12[32] = v22;
  v61 = 1;
  v23 = sub_AD5C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for TextData, &v61, v20, &type metadata for TextData, v23);
  v24 = *((_QWORD *)&v55 + 1);
  v25 = v56;
  *((_QWORD *)v12 + 5) = v55;
  *((_QWORD *)v12 + 6) = v24;
  v12[56] = v25;
  v61 = 2;
  v26 = sub_ADA0();
  v44[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for LayoutOptionData, &v61, v20, &type metadata for LayoutOptionData, v26);
  v27 = DWORD1(v55);
  v28 = BYTE8(v55);
  v29 = HIDWORD(v55);
  v30 = v56;
  v31 = DWORD1(v56);
  v32 = BYTE8(v56);
  v33 = BYTE9(v56);
  v12[60] = v55;
  *((_DWORD *)v12 + 16) = v27;
  v12[68] = v28;
  *((_DWORD *)v12 + 18) = v29;
  v12[76] = v30;
  *((_DWORD *)v12 + 20) = v31;
  v12[84] = v32;
  v12[85] = v33;
  v61 = 3;
  v34 = sub_1779C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for ContentData, &v61, v20, &type metadata for ContentData, v34);
  v35 = v56;
  *(_OWORD *)(v12 + 88) = v55;
  *(_OWORD *)(v12 + 104) = v35;
  v36 = v58;
  *(_OWORD *)(v12 + 120) = v57;
  *(_OWORD *)(v12 + 136) = v36;
  v37 = v60;
  *(_OWORD *)(v12 + 152) = v59;
  *(_OWORD *)(v12 + 168) = v37;
  LOBYTE(v55) = 4;
  v38 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v39 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v45, v51, &v55, v20, v51, v38);
  (*(void (**)(char *, _QWORD *, uint64_t))(v54 + 32))(&v12[*(int *)(v10 + 32)], v39, v51);
  LOBYTE(v55) = 5;
  v40 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v41 = v20;
  v42 = v48;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v48, v18, &v55, v41, v18, v40);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v52, v50);
  (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 32))(&v12[*(int *)(v10 + 36)], v42, v18);
  sub_4D514((uint64_t)v12, v47);
  sub_7DAC(v53);
  return sub_4D558((uint64_t)v12);
}

uint64_t sub_4D4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a12);
  }
  return result;
}

uint64_t sub_4D514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThemeCustomizedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4D558(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ThemeCustomizedEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_4D594@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ThemeCustomizedEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_4D5A8(_QWORD *a1)
{
  return ThemeCustomizedEvent.Model.encode(to:)(a1);
}

uint64_t sub_4D5BC@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955C0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2981E8, (uint64_t)sub_4C2A0, a1);
}

uint64_t sub_4D5E0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955C8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298200, (uint64_t)sub_4C2E0, a1);
}

uint64_t sub_4D604@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = enum case for EventProperty.optional<A>(_:);
  v12 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v4, v16);
}

uint64_t *initializeBufferWithCopyOfBuffer for ThemeCustomizedEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = sub_71B4(&qword_296008);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296010);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296018);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for ThemeCustomizedEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for ThemeCustomizedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  return a1;
}

uint64_t assignWithCopy for ThemeCustomizedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for ThemeCustomizedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for ThemeCustomizedEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemeCustomizedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4DF08);
}

uint64_t sub_4DF08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_71B4(&qword_296008);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296010);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296018);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296760);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_295D70);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v8 = sub_71B4(&qword_295D78);
            v12 = *(_QWORD *)(v8 - 8);
            v13 = a3[9];
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ThemeCustomizedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4E030);
}

uint64_t sub_4E030(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_71B4(&qword_296008);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296010);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296018);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296760);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_295D70);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v10 = sub_71B4(&qword_295D78);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[9];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_4E154(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];

  sub_B9C8(319, &qword_2960D0, (uint64_t (*)(void))sub_AD18, (uint64_t (*)(void))sub_A7E0, (uint64_t)&type metadata for ThemesData);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2960D8, (uint64_t (*)(void))sub_AD5C, (uint64_t (*)(void))sub_A824, (uint64_t)&type metadata for TextData);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&unk_2960E0, (uint64_t (*)(void))sub_ADA0, (uint64_t (*)(void))sub_A868, (uint64_t)&type metadata for LayoutOptionData);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_8734(319);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_87D8(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ThemeCustomizedEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = *(_OWORD *)((char *)a2 + 60);
    *(_OWORD *)(a1 + 70) = *(_OWORD *)((char *)a2 + 70);
    *(_OWORD *)(a1 + 60) = v10;
    v11 = a2[12];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v11)
    {
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = v11;
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      v12 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v12;
      v13 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v13;
      *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
      *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 39);
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      *(_DWORD *)(a1 + 161) = *(_DWORD *)((char *)a2 + 161);
      *(_BYTE *)(a1 + 165) = *((_BYTE *)a2 + 165);
      v14 = a2[22];
      *(_QWORD *)(a1 + 168) = a2[21];
      *(_QWORD *)(a1 + 176) = v14;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(a1 + 136) = v16;
      v17 = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(a1 + 168) = v17;
      v18 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = v18;
    }
    v19 = *(int *)(a3 + 32);
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = *(int *)(a3 + 36);
    v24 = a1 + v23;
    v25 = (uint64_t)a2 + v23;
    v26 = type metadata accessor for TimedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  }
  return a1;
}

uint64_t destroy for ThemeCustomizedEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  v4 = a1[12];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[22]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(a2 + 36);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ThemeCustomizedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 70) = *(_OWORD *)(a2 + 70);
  *(_OWORD *)(a1 + 60) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v10)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v10;
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v11;
    v12 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v12;
    *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_DWORD *)(a1 + 161) = *(_DWORD *)(a2 + 161);
    *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
    v13 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v14;
    v15 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v15;
    v16 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v16;
  }
  v17 = *(int *)(a3 + 32);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = *(int *)(a3 + 36);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  return a1;
}

uint64_t assignWithCopy for ThemeCustomizedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v12 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v12;
  v13 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v13;
  v14 = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  v15 = (_OWORD *)(a1 + 88);
  v16 = (_OWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a2 + 96);
  if (v17)
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v19 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v17);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v20 = *(_QWORD *)(a2 + 120);
      v21 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v22 = *(_QWORD *)(a2 + 136);
      v23 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
      v24 = *(_DWORD *)(a2 + 148);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_DWORD *)(a1 + 148) = v24;
      v25 = *(_DWORD *)(a2 + 156);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_DWORD *)(a1 + 156) = v25;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a2 + 176);
      v27 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 88));
      v34 = *(_OWORD *)(a2 + 104);
      *v15 = *v16;
      *(_OWORD *)(a1 + 104) = v34;
      v35 = *(_OWORD *)(a2 + 168);
      v37 = *(_OWORD *)(a2 + 120);
      v36 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v35;
      *(_OWORD *)(a1 + 120) = v37;
      *(_OWORD *)(a1 + 136) = v36;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v28 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v28;
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v29 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v29;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v30 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v30;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
    v31 = *(_DWORD *)(a2 + 148);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_DWORD *)(a1 + 148) = v31;
    v32 = *(_DWORD *)(a2 + 156);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_DWORD *)(a1 + 156) = v32;
    *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v33 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v33;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
  }
  else
  {
    v38 = *(_OWORD *)(a2 + 104);
    *v15 = *v16;
    *(_OWORD *)(a1 + 104) = v38;
    v39 = *(_OWORD *)(a2 + 120);
    v40 = *(_OWORD *)(a2 + 136);
    v41 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v41;
    *(_OWORD *)(a1 + 120) = v39;
    *(_OWORD *)(a1 + 136) = v40;
  }
  v42 = *(int *)(a3 + 32);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  v46 = *(int *)(a3 + 36);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 24))(v47, v48, v49);
  return a1;
}

_QWORD *sub_4E9F4(_QWORD *a1)
{
  destroy for ContentData(a1);
  return a1;
}

uint64_t initializeWithTake for ThemeCustomizedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 70) = *(_OWORD *)(a2 + 70);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 120);
  v8 = *(_OWORD *)(a2 + 136);
  v9 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 120) = v7;
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for ThemeCustomizedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  v12 = *(_QWORD *)(a1 + 96);
  if (!v12)
    goto LABEL_5;
  v13 = *(_QWORD *)(a2 + 96);
  if (!v13)
  {
    sub_4E9F4((_QWORD *)(a1 + 88));
LABEL_5:
    v20 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v20;
    v21 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v21;
    v22 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v22;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  swift_bridgeObjectRelease(v17);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 161) = *(_DWORD *)(a2 + 161);
  *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
  v18 = *(_QWORD *)(a2 + 176);
  v19 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v18;
  swift_bridgeObjectRelease(v19);
LABEL_6:
  v23 = *(int *)(a3 + 32);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = *(int *)(a3 + 36);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemeCustomizedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4ECE4);
}

uint64_t sub_4ECE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ThemeCustomizedEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4ED90);
}

uint64_t sub_4ED90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_4EE2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = "!";
  v5[1] = &unk_1F5C88;
  v5[2] = &unk_1F5CA0;
  v5[3] = &unk_1F5CB8;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ThemeCustomizedEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_4EF24 + 4 * byte_1F5B6B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_4EF58 + 4 * byte_1F5B66[v4]))();
}

uint64_t sub_4EF58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4EF60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x4EF68);
  return result;
}

uint64_t sub_4EF74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x4EF7CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_4EF80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4EF88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemeCustomizedEvent.Model.CodingKeys()
{
  return &type metadata for ThemeCustomizedEvent.Model.CodingKeys;
}

unint64_t sub_4EFA8()
{
  unint64_t result;

  result = qword_298370;
  if (!qword_298370)
  {
    result = swift_getWitnessTable(&unk_1F5D6C, &type metadata for ThemeCustomizedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298370);
  }
  return result;
}

unint64_t sub_4EFF0()
{
  unint64_t result;

  result = qword_298378;
  if (!qword_298378)
  {
    result = swift_getWitnessTable(&unk_1F5CDC, &type metadata for ThemeCustomizedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298378);
  }
  return result;
}

unint64_t sub_4F038()
{
  unint64_t result;

  result = qword_298380;
  if (!qword_298380)
  {
    result = swift_getWitnessTable(&unk_1F5D04, &type metadata for ThemeCustomizedEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298380);
  }
  return result;
}

uint64_t sub_4F07C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x614473656D656874 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614473656D656874, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6174614474786574 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614474786574, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x800000000021EAF0;
    if (a2 == 0x800000000021EAF0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021EAF0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v9 = 0xEB00000000617461;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v10 = 0xE900000000000061;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t ReadingGoalsDurationData.prevGoalDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ReadingGoalsDurationData.prevGoalDuration.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

BookAnalytics::YearlyGoalsReachedData __swiftcall YearlyGoalsReachedData.init(defaultYearlyReadingGoal:yearlyReadingGoalCount:)(BookAnalytics::DefaultReadingGoal defaultYearlyReadingGoal, Swift::Int64 yearlyReadingGoalCount)
{
  uint64_t v2;
  BookAnalytics::YearlyGoalsReachedData result;

  *(_BYTE *)v2 = *(_BYTE *)defaultYearlyReadingGoal;
  *(_QWORD *)(v2 + 8) = yearlyReadingGoalCount;
  result.yearlyReadingGoalCount = yearlyReadingGoalCount;
  result.defaultYearlyReadingGoal = defaultYearlyReadingGoal;
  return result;
}

unint64_t sub_4F354()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0xD000000000000018;
}

uint64_t sub_4F394@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_4FAC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_4F3B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4F7B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4F3E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_4F7B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t YearlyGoalsReachedData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_71B4(&qword_298388);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = *((_QWORD *)v1 + 1);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_4F7B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for YearlyGoalsReachedData.CodingKeys, &type metadata for YearlyGoalsReachedData.CodingKeys, v11, v9, v10);
  v18 = v8;
  v17 = 0;
  v12 = sub_22D88();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, &type metadata for DefaultReadingGoal, v12);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t YearlyGoalsReachedData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v5 = sub_71B4(&qword_298398);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_4F7B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for YearlyGoalsReachedData.CodingKeys, &type metadata for YearlyGoalsReachedData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v18 = 0;
    v12 = sub_22E10();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for DefaultReadingGoal, &v18, v5, &type metadata for DefaultReadingGoal, v12);
    v13 = v19;
    v17 = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v14;
  }
  return sub_7DAC(a1);
}

uint64_t sub_4F6A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return YearlyGoalsReachedData.init(from:)(a1, a2);
}

uint64_t sub_4F6B8(_QWORD *a1)
{
  return YearlyGoalsReachedData.encode(to:)(a1);
}

BOOL _s13BookAnalytics22YearlyGoalsReachedDataV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _BOOL8 result;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = 89;
  if (v2 != 1)
    v5 = 78;
  if (*a1)
    v6 = v5;
  else
    v6 = 16718;
  if (v2)
    v7 = 0xE100000000000000;
  else
    v7 = 0xE200000000000000;
  v8 = 89;
  if (*(_BYTE *)a2 != 1)
    v8 = 78;
  if (*(_BYTE *)a2)
    v9 = v8;
  else
    v9 = 16718;
  if (*(_BYTE *)a2)
    v10 = 0xE100000000000000;
  else
    v10 = 0xE200000000000000;
  if (v6 == v9 && v7 == v10)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v10);
    result = 0;
    if ((v11 & 1) == 0)
      return result;
  }
  return v3 == v4;
}

unint64_t sub_4F7B8()
{
  unint64_t result;

  result = qword_298390;
  if (!qword_298390)
  {
    result = swift_getWitnessTable(&unk_1F5F9C, &type metadata for YearlyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298390);
  }
  return result;
}

unint64_t sub_4F800()
{
  unint64_t result;

  result = qword_2983A0;
  if (!qword_2983A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for YearlyGoalsReachedData, &type metadata for YearlyGoalsReachedData);
    atomic_store(result, (unint64_t *)&qword_2983A0);
  }
  return result;
}

unint64_t sub_4F848()
{
  unint64_t result;

  result = qword_2983A8;
  if (!qword_2983A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for YearlyGoalsReachedData, &type metadata for YearlyGoalsReachedData);
    atomic_store(result, (unint64_t *)&qword_2983A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for YearlyGoalsReachedData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[16])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for YearlyGoalsReachedData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for YearlyGoalsReachedData()
{
  return &type metadata for YearlyGoalsReachedData;
}

uint64_t storeEnumTagSinglePayload for YearlyGoalsReachedData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_4F96C + 4 * byte_1F5DF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_4F9A0 + 4 * byte_1F5DF0[v4]))();
}

uint64_t sub_4F9A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4F9A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x4F9B0);
  return result;
}

uint64_t sub_4F9BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x4F9C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_4F9C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4F9D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for YearlyGoalsReachedData.CodingKeys()
{
  return &type metadata for YearlyGoalsReachedData.CodingKeys;
}

unint64_t sub_4F9F0()
{
  unint64_t result;

  result = qword_2983B0;
  if (!qword_2983B0)
  {
    result = swift_getWitnessTable(&unk_1F5F74, &type metadata for YearlyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2983B0);
  }
  return result;
}

unint64_t sub_4FA38()
{
  unint64_t result;

  result = qword_2983B8;
  if (!qword_2983B8)
  {
    result = swift_getWitnessTable(&unk_1F5EE4, &type metadata for YearlyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2983B8);
  }
  return result;
}

unint64_t sub_4FA80()
{
  unint64_t result;

  result = qword_2983C0;
  if (!qword_2983C0)
  {
    result = swift_getWitnessTable(&unk_1F5F0C, &type metadata for YearlyGoalsReachedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2983C0);
  }
  return result;
}

uint64_t sub_4FAC4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000018 && a2 == 0x800000000021EDC0)
  {
    v4 = 0x800000000021EDC0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000000021EDC0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000000021EE10)
  {
    swift_bridgeObjectRelease(0x800000000021EE10);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000000021EE10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void EventReporter.emitAddToCollectionEvent(using:for:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, id a8, unint64_t a9, unint64_t a10)
{
  void *v10;
  char v11;
  char v12;
  unsigned int v18;
  id v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  uint64_t v23;
  BAEventReporter *v24;
  id v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  SEL v35;
  id v36;
  id v37;
  int64_t v38;
  id v39;
  BOOL v40;
  id v41;
  ValueMetadata *v42;
  void *v43;
  unsigned int v44;
  char v46;
  unint64_t v47;

  v11 = a6;
  if (a6 >= 3)
  {
    v47 = a6;
    v42 = &type metadata for BridgedContentAcquisitionType;
    goto LABEL_15;
  }
  v12 = a7;
  if (a7 >= 7)
  {
    v47 = a7;
    v42 = &type metadata for BridgedContentType;
    goto LABEL_15;
  }
  if (a8)
  {
    v18 = objc_msgSend(a8, "intValue");
    if (a9 < 4)
      goto LABEL_5;
    goto LABEL_10;
  }
  v18 = 0;
  if (a9 >= 4)
  {
LABEL_10:
    v47 = a9;
    v42 = &type metadata for BridgedSeriesType;
LABEL_15:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v42, &v47, v42, &type metadata for Int);
    __break(1u);
    return;
  }
LABEL_5:
  v44 = v18;
  v46 = v12;
  if (a10 >= 3)
  {
    v47 = a10;
    v42 = &type metadata for BridgedProductionType;
    goto LABEL_15;
  }
  v19 = a1;
  if (a1 || (v19 = sub_CB320()) != 0)
  {
    v43 = a1;
    v20 = a5;
    v21 = v10;
    v22 = a8 == 0;
    v23 = swift_allocObject(&unk_26DE98, 96, 7);
    *(_QWORD *)(v23 + 16) = v21;
    *(_QWORD *)(v23 + 24) = a4;
    *(_QWORD *)(v23 + 32) = v20;
    *(_BYTE *)(v23 + 40) = v46;
    *(_BYTE *)(v23 + 41) = v11;
    *(_QWORD *)(v23 + 48) = v19;
    *(_DWORD *)(v23 + 56) = v44;
    *(_BYTE *)(v23 + 60) = v22;
    *(_BYTE *)(v23 + 61) = 0x2010004u >> (8 * a9);
    *(_BYTE *)(v23 + 62) = a10;
    *(_QWORD *)(v23 + 64) = a2;
    *(_QWORD *)(v23 + 72) = a3;
    *(_QWORD *)(v23 + 80) = 0;
    *(_QWORD *)(v23 + 88) = 0;
    v24 = (BAEventReporter *)swift_allocObject(&unk_26DEC0, 32, 7);
    v24[1].super.isa = (Class)sub_53E88;
    *(_QWORD *)v24[1].dataProviders = v23;
    v25 = v43;
    swift_bridgeObjectRetain(a3);
    v26 = v21;
    swift_bridgeObjectRetain(v20);
    v27 = v19;
    swift_retain(v23);
    Tracker.transaction(block:)(sub_53E94, v24);

    swift_release((BAEventReporter *)v23, v28, v29, v30, v31, v32, v33, v34);
    swift_release(v24, v35, v36, v37, v38, v39, v40, v41);
  }
}

void EventReporter.emitAddToCollectionEvent(using:for:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, char *a7, uint64_t a8, char *a9, char *a10)
{
  void *v10;
  char v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  id v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  SEL v35;
  id v36;
  id v37;
  int64_t v38;
  id v39;
  BOOL v40;
  id v41;
  char v42;
  char v43;

  v17 = *a6;
  v18 = *a7;
  v42 = *a10;
  v43 = *a9;
  v19 = a1;
  if (a1 || (v19 = sub_CB320()) != 0)
  {
    v20 = swift_allocObject(&unk_26DEE8, 96, 7);
    v21 = a2;
    v22 = a5;
    v23 = (BAEventReporter *)v20;
    *(_QWORD *)(v20 + 16) = v10;
    *(_QWORD *)(v20 + 24) = a4;
    *(_QWORD *)(v20 + 32) = v22;
    *(_BYTE *)(v20 + 40) = v18;
    *(_BYTE *)(v20 + 41) = v17;
    *(_QWORD *)(v20 + 48) = v19;
    *(_DWORD *)(v20 + 56) = a8;
    *(_BYTE *)(v20 + 60) = BYTE4(a8) & 1;
    *(_BYTE *)(v20 + 61) = v43;
    *(_BYTE *)(v20 + 62) = v42;
    *(_QWORD *)(v20 + 64) = v21;
    *(_QWORD *)(v20 + 72) = a3;
    *(_QWORD *)(v20 + 80) = 0;
    *(_QWORD *)(v20 + 88) = 0;
    v24 = (BAEventReporter *)swift_allocObject(&unk_26DF10, 32, 7);
    v24[1].super.isa = (Class)sub_53E88;
    *(_QWORD *)v24[1].dataProviders = v23;
    v25 = a1;
    swift_bridgeObjectRetain(a3);
    v26 = v10;
    swift_bridgeObjectRetain(v22);
    v27 = v19;
    swift_retain(v23);
    Tracker.transaction(block:)(sub_54CC0, v24);

    swift_release(v23, v28, v29, v30, v31, v32, v33, v34);
    swift_release(v24, v35, v36, v37, v38, v39, v40, v41);
  }
}

uint64_t sub_4FF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, unint64_t a8, unsigned __int8 a9, unsigned __int8 a10, __int128 a11, __int128 a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a5;
  v34 = a6;
  v33 = a9;
  v32 = a10;
  sub_CAB80(a3, a4, &v35, &v34, a7, a8 | ((HIDWORD(a8) & 1) << 32), &v33, &v32, (uint64_t)&v36);
  v28 = v39;
  v29 = v38;
  v30 = v40;
  v31 = *((_QWORD *)&v36 + 1);
  v12 = sub_71B4(&qword_299FD0);
  v13 = type metadata accessor for DataEventTrait(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = v16 + *(_QWORD *)(v14 + 72);
  v18 = v15 | 7;
  v19 = swift_allocObject(v12, v17, v15 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_1F5FF0;
  v20 = enum case for DataEventTrait.onlyOnce(_:);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104);
  v21(v19 + v16, enum case for DataEventTrait.onlyOnce(_:), v13);
  v22 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v36, v19, 0xD000000000000072, 0x800000000021F160, 58, &type metadata for ContentData, v22);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v30);
  v36 = a11;
  v37 = a12;
  v23 = swift_allocObject(v12, v17, v18);
  *(_OWORD *)(v23 + 16) = xmmword_1F5FF0;
  v21(v23 + v16, v20, v13);
  v24 = sub_54A68();
  AccessTracker.push<A>(data:traits:file:line:)(&v36, v23, 0xD000000000000072, 0x800000000021F160, 59, &type metadata for CollectionData, v24);
  swift_bridgeObjectRelease(v23);
  v25 = type metadata accessor for AddToCollectionEvent(0);
  v26 = sub_7E10(&qword_298448, type metadata accessor for AddToCollectionEvent, (uint64_t)&protocol conformance descriptor for AddToCollectionEvent);
  v36 = 0u;
  v37 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v25, 0, &v36, 0, 0, v25, v26);
  return sub_54960((uint64_t)&v36);
}

void EventReporter.emitAddToCollectionEvent(using:for:with:)(void *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  BAEventReporter *v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  _OWORD v32[6];

  v8 = a4[3];
  v32[2] = a4[2];
  v32[3] = v8;
  v9 = a4[5];
  v32[4] = a4[4];
  v32[5] = v9;
  v10 = a4[1];
  v32[0] = *a4;
  v32[1] = v10;
  v11 = a1;
  if (a1 || (v11 = sub_CB320()) != 0)
  {
    v12 = swift_allocObject(&unk_26DF38, 144, 7);
    v13 = a4[3];
    *(_OWORD *)(v12 + 48) = a4[2];
    *(_OWORD *)(v12 + 64) = v13;
    v14 = a4[5];
    *(_OWORD *)(v12 + 80) = a4[4];
    *(_OWORD *)(v12 + 96) = v14;
    v15 = a4[1];
    *(_OWORD *)(v12 + 16) = *a4;
    *(_OWORD *)(v12 + 32) = v15;
    *(_QWORD *)(v12 + 112) = a2;
    *(_QWORD *)(v12 + 120) = a3;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 136) = 0;
    v16 = (BAEventReporter *)swift_allocObject(&unk_26DF60, 32, 7);
    v16[1].super.isa = (Class)sub_53FB0;
    *(_QWORD *)v16[1].dataProviders = v12;
    v17 = a1;
    swift_bridgeObjectRetain(a3);
    sub_53FBC(v32);
    swift_retain(v12);
    Tracker.transaction(block:)(sub_54CC0, v16);

    swift_release((BAEventReporter *)v12, v18, v19, v20, v21, v22, v23, v24);
    swift_release(v16, v25, v26, v27, v28, v29, v30, v31);
  }
}

uint64_t sub_50374(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)&v26 = a5;
  *((_QWORD *)&v26 + 1) = a6;
  *(_QWORD *)&v25 = a3;
  *((_QWORD *)&v25 + 1) = a4;
  v6 = a2[3];
  v29 = a2[2];
  v30 = v6;
  v7 = a2[5];
  v31 = a2[4];
  v32 = v7;
  v8 = a2[1];
  v27 = *a2;
  v28 = v8;
  v9 = sub_71B4(&qword_299FD0);
  v10 = type metadata accessor for DataEventTrait(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = v13 + *(_QWORD *)(v11 + 72);
  v15 = v12 | 7;
  v16 = swift_allocObject(v9, v14, v12 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  v17 = enum case for DataEventTrait.onlyOnce(_:);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  v18(v16 + v13, enum case for DataEventTrait.onlyOnce(_:), v10);
  v19 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v27, v16, 0xD000000000000072, 0x800000000021F160, 74, &type metadata for ContentData, v19);
  swift_bridgeObjectRelease(v16);
  v27 = v25;
  v28 = v26;
  v20 = swift_allocObject(v9, v14, v15);
  *(_OWORD *)(v20 + 16) = xmmword_1F5FF0;
  v18(v20 + v13, v17, v10);
  v21 = sub_54A68();
  AccessTracker.push<A>(data:traits:file:line:)(&v27, v20, 0xD000000000000072, 0x800000000021F160, 75, &type metadata for CollectionData, v21);
  swift_bridgeObjectRelease(v20);
  v22 = type metadata accessor for AddToCollectionEvent(0);
  v23 = sub_7E10(&qword_298448, type metadata accessor for AddToCollectionEvent, (uint64_t)&protocol conformance descriptor for AddToCollectionEvent);
  v27 = 0u;
  v28 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v22, 0, &v27, 0, 0, v22, v23);
  return sub_54960((uint64_t)&v27);
}

void EventReporter.emitCollectionAddEvent(using:for:with:)(void *a1, uint64_t a2, objc_class *a3, objc_class *a4)
{
  id v8;
  BAEventReporter *v9;
  BAEventReporter *v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  int64_t v22;
  id v23;
  BOOL v24;
  id v25;

  v8 = a1;
  if (a1 || (v8 = sub_CB320()) != 0)
  {
    v9 = (BAEventReporter *)swift_allocObject(&unk_26DF88, 40, 7);
    v9[1].super.isa = a4;
    *(_QWORD *)v9[1].dataProviders = a2;
    v9[2].super.isa = a3;
    v10 = (BAEventReporter *)swift_allocObject(&unk_26DFB0, 32, 7);
    v10[1].super.isa = (Class)sub_54010;
    *(_QWORD *)v10[1].dataProviders = v9;
    v11 = a1;
    swift_bridgeObjectRetain(a3);
    swift_retain(v9);
    Tracker.transaction(block:)(sub_54CC0, v10);

    swift_release(v9, v12, v13, v14, v15, v16, v17, v18);
    swift_release(v10, v19, v20, v21, v22, v23, v24, v25);
  }
}

void EventReporter.emitCollectionDescriptionEvent(using:for:)(uint64_t a1, objc_class *a2, uint64_t a3)
{
  BAEventReporter *v5;
  BAEventReporter *v6;
  SEL v7;
  id v8;
  id v9;
  int64_t v10;
  id v11;
  BOOL v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  int64_t v17;
  id v18;
  BOOL v19;
  id v20;

  v5 = (BAEventReporter *)swift_allocObject(&unk_26DFD8, 32, 7);
  v5[1].super.isa = a2;
  *(_QWORD *)v5[1].dataProviders = a3;
  v6 = (BAEventReporter *)swift_allocObject(&unk_26E000, 32, 7);
  v6[1].super.isa = (Class)sub_54048;
  *(_QWORD *)v6[1].dataProviders = v5;
  swift_bridgeObjectRetain(a3);
  swift_retain(v5);
  Tracker.transaction(block:)(sub_54CC0, v6);
  swift_release(v5, v7, v8, v9, v10, v11, v12, v13);
  swift_release(v6, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_50818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  v15 = 0uLL;
  v4 = sub_71B4(&qword_299FD0);
  v5 = type metadata accessor for DataEventTrait(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v4, v8 + *(_QWORD *)(v6 + 72), v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9 + v8, enum case for DataEventTrait.onlyOnce(_:), v5);
  v10 = sub_54A68();
  swift_bridgeObjectRetain(a3);
  AccessTracker.push<A>(data:traits:file:line:)(&v14, v9, 0xD000000000000072, 0x800000000021F160, 94, &type metadata for CollectionData, v10);
  swift_bridgeObjectRelease(0);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v9);
  v11 = type metadata accessor for CollectionDescriptionEvent(0);
  v12 = sub_7E10(&qword_298438, type metadata accessor for CollectionDescriptionEvent, (uint64_t)&protocol conformance descriptor for CollectionDescriptionEvent);
  v14 = 0u;
  v15 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v11, 0, &v14, 0, 0, v11, v12);
  return sub_54960((uint64_t)&v14);
}

void EventReporter.emitCollectionRemoveEvent(using:for:with:)(void *a1, uint64_t a2, objc_class *a3, objc_class *a4)
{
  id v8;
  BAEventReporter *v9;
  BAEventReporter *v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  int64_t v22;
  id v23;
  BOOL v24;
  id v25;

  v8 = a1;
  if (a1 || (v8 = sub_CB320()) != 0)
  {
    v9 = (BAEventReporter *)swift_allocObject(&unk_26E028, 40, 7);
    v9[1].super.isa = a4;
    *(_QWORD *)v9[1].dataProviders = a2;
    v9[2].super.isa = a3;
    v10 = (BAEventReporter *)swift_allocObject(&unk_26E050, 32, 7);
    v10[1].super.isa = (Class)sub_54050;
    *(_QWORD *)v10[1].dataProviders = v9;
    v11 = a1;
    swift_bridgeObjectRetain(a3);
    swift_retain(v9);
    Tracker.transaction(block:)(sub_54CC0, v10);

    swift_release(v9, v12, v13, v14, v15, v16, v17, v18);
    swift_release(v10, v19, v20, v21, v22, v23, v24, v25);
  }
}

uint64_t sub_50B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  swift_bridgeObjectRetain(a4);
  result = BARoundIntegerToSignificantFigures(a2, 2);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_QWORD *)&v25 = a3;
    *((_QWORD *)&v25 + 1) = a4;
    LODWORD(v26) = result;
    v16 = sub_71B4(&qword_299FD0);
    v17 = type metadata accessor for DataEventTrait(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned __int8 *)(v18 + 80);
    v20 = (v19 + 32) & ~v19;
    v21 = swift_allocObject(v16, v20 + *(_QWORD *)(v18 + 72), v19 | 7);
    *(_OWORD *)(v21 + 16) = xmmword_1F5FF0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v21 + v20, enum case for DataEventTrait.onlyOnce(_:), v17);
    v22 = sub_54B78();
    AccessTracker.push<A>(data:traits:file:line:)(&v25, v21, 0xD000000000000072, 0x800000000021F160, a5, &type metadata for SingleCollectionData, v22);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v21);
    v23 = a6(0);
    v24 = sub_7E10(a7, a6, a8);
    v25 = 0u;
    v26 = 0u;
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v23, 0, &v25, 0, 0, v23, v24);
    return sub_54960((uint64_t)&v25);
  }
  __break(1u);
  return result;
}

void EventReporter.emitLibraryDataEditEvent(using:with:for:result:)(void *a1, objc_class *a2, objc_class *a3, char a4)
{
  id v8;
  BAEventReporter *v9;
  BAEventReporter *v10;
  id v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;

  v8 = a1;
  if (a1 || (v8 = sub_CB320()) != 0)
  {
    v9 = (BAEventReporter *)swift_allocObject(&unk_26E078, 41, 7);
    v9[1].super.isa = a2;
    *(_QWORD *)v9[1].dataProviders = v8;
    v9[2].super.isa = a3;
    v9[2].dataProviders[0] = a4 & 1;
    v10 = (BAEventReporter *)swift_allocObject(&unk_26E0A0, 32, 7);
    v10[1].super.isa = (Class)sub_5408C;
    *(_QWORD *)v10[1].dataProviders = v9;
    v11 = a1;
    swift_bridgeObjectRetain(a2);
    v12 = v8;
    swift_retain(v9);
    Tracker.transaction(block:)(sub_54CC0, v10);

    swift_release(v9, v13, v14, v15, v16, v17, v18, v19);
    swift_release(v10, v20, v21, v22, v23, v24, v25, v26);
  }
}

uint64_t sub_50EF8(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, char a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  unint64_t *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _OWORD v26[2];
  _BYTE v27[16];

  v8 = a3;
  v14 = sub_54104(a2, (uint64_t)v8, (uint64_t)v27, v9, v10, v11, v12, v13);

  if (a4 >= 4)
  {
    *(_QWORD *)&v26[0] = a4;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedEditActionType, v26, &type metadata for BridgedEditActionType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v26[0] = v14;
    if ((a5 & 1) != 0)
      v15 = 1;
    else
      v15 = 2;
    BYTE8(v26[0]) = a4;
    BYTE9(v26[0]) = v15;
    v16 = sub_71B4(&qword_299FD0);
    v17 = type metadata accessor for DataEventTrait(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned __int8 *)(v18 + 80);
    v20 = (v19 + 32) & ~v19;
    v21 = swift_allocObject(v16, v20 + *(_QWORD *)(v18 + 72), v19 | 7);
    *(_OWORD *)(v21 + 16) = xmmword_1F5FF0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v21 + v20, enum case for DataEventTrait.onlyOnce(_:), v17);
    v22 = sub_54B34();
    AccessTracker.push<A>(data:traits:file:line:)(v26, v21, 0xD000000000000072, 0x800000000021F160, 119, &type metadata for LibraryEditData, v22);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v21);
    v23 = type metadata accessor for LibraryDataEditEvent(0);
    v24 = sub_7E10(&qword_298420, type metadata accessor for LibraryDataEditEvent, (uint64_t)&protocol conformance descriptor for LibraryDataEditEvent);
    memset(v26, 0, sizeof(v26));
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v23, 0, v26, 0, 0, v23, v24);
    return sub_54960((uint64_t)v26);
  }
  return result;
}

void EventReporter.emitMarkAsFinishedEvent(using:for:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, id a6, unint64_t a7, unint64_t a8)
{
  void *v8;
  char v9;
  char v10;
  unsigned int v17;
  id v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BAEventReporter *v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  int64_t v29;
  id v30;
  BOOL v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  int64_t v36;
  id v37;
  BOOL v38;
  id v39;
  ValueMetadata *v40;
  void *v41;
  unsigned int v42;
  unint64_t v43;

  v9 = a4;
  if (a4 >= 3)
  {
    v43 = a4;
    v40 = &type metadata for BridgedContentAcquisitionType;
    goto LABEL_15;
  }
  v10 = a5;
  if (a5 >= 7)
  {
    v43 = a5;
    v40 = &type metadata for BridgedContentType;
    goto LABEL_15;
  }
  if (a6)
  {
    v17 = objc_msgSend(a6, "intValue");
    if (a7 < 4)
      goto LABEL_5;
    goto LABEL_10;
  }
  v17 = 0;
  if (a7 >= 4)
  {
LABEL_10:
    v43 = a7;
    v40 = &type metadata for BridgedSeriesType;
LABEL_15:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v40, &v43, v40, &type metadata for Int);
    __break(1u);
    return;
  }
LABEL_5:
  v42 = v17;
  if (a8 >= 3)
  {
    v43 = a8;
    v40 = &type metadata for BridgedProductionType;
    goto LABEL_15;
  }
  v18 = a1;
  if (a1 || (v18 = sub_CB320()) != 0)
  {
    v41 = a1;
    v19 = a3;
    v20 = a6 == 0;
    v21 = swift_allocObject(&unk_26E0C8, 64, 7);
    *(_QWORD *)(v21 + 16) = v8;
    *(_QWORD *)(v21 + 24) = a2;
    *(_QWORD *)(v21 + 32) = v19;
    *(_BYTE *)(v21 + 40) = v10;
    *(_BYTE *)(v21 + 41) = v9;
    *(_QWORD *)(v21 + 48) = v18;
    *(_DWORD *)(v21 + 56) = v42;
    *(_BYTE *)(v21 + 60) = v20;
    *(_BYTE *)(v21 + 61) = 0x2010004u >> (8 * a7);
    *(_BYTE *)(v21 + 62) = a8;
    *(_BYTE *)(v21 + 63) = 2;
    v22 = (BAEventReporter *)swift_allocObject(&unk_26E0F0, 32, 7);
    v22[1].super.isa = (Class)sub_540A4;
    *(_QWORD *)v22[1].dataProviders = v21;
    v23 = v41;
    v24 = v8;
    swift_bridgeObjectRetain(v19);
    v25 = v18;
    swift_retain(v21);
    Tracker.transaction(block:)(sub_54CC0, v22);

    swift_release((BAEventReporter *)v21, v26, v27, v28, v29, v30, v31, v32);
    swift_release(v22, v33, v34, v35, v36, v37, v38, v39);
  }
}

void EventReporter.emitMarkAsFinishedEvent(using:for:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:isFinishedDateSet:)(void *a1, uint64_t a2, uint64_t a3, char *a4, char *a5, uint64_t a6, char *a7, char *a8, char a9)
{
  void *v9;
  char v14;
  char v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  BAEventReporter *v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  int64_t v27;
  id v28;
  BOOL v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  int64_t v34;
  id v35;
  BOOL v36;
  id v37;
  char v38;

  v14 = *a4;
  v15 = *a5;
  v38 = *a7;
  v16 = *a8;
  v17 = a1;
  if (a1 || (v17 = sub_CB320()) != 0)
  {
    v18 = a3;
    v19 = swift_allocObject(&unk_26E118, 64, 7);
    *(_QWORD *)(v19 + 16) = v9;
    *(_QWORD *)(v19 + 24) = a2;
    *(_QWORD *)(v19 + 32) = v18;
    *(_BYTE *)(v19 + 40) = v15;
    *(_BYTE *)(v19 + 41) = v14;
    *(_QWORD *)(v19 + 48) = v17;
    *(_DWORD *)(v19 + 56) = a6;
    *(_BYTE *)(v19 + 60) = BYTE4(a6) & 1;
    *(_BYTE *)(v19 + 61) = v38;
    *(_BYTE *)(v19 + 62) = v16;
    *(_BYTE *)(v19 + 63) = a9;
    v20 = (BAEventReporter *)swift_allocObject(&unk_26E140, 32, 7);
    v20[1].super.isa = (Class)sub_540A4;
    *(_QWORD *)v20[1].dataProviders = v19;
    v21 = a1;
    v22 = v9;
    swift_bridgeObjectRetain(v18);
    v23 = v17;
    swift_retain(v19);
    Tracker.transaction(block:)(sub_54CC0, v20);

    swift_release((BAEventReporter *)v19, v24, v25, v26, v27, v28, v29, v30);
    swift_release(v20, v31, v32, v33, v34, v35, v36, v37);
  }
}

uint64_t sub_5157C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, unint64_t a8, unsigned __int8 a9, unsigned __int8 a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  char v21;
  int v22;
  char v23;
  uint8x8_t v24;
  int16x8_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int16x8_t v50;
  char v51;
  int v52;
  char v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  int v73;
  char v74;
  int v75;
  char v76;
  __int32 v77;
  char v78;
  uint64_t v79;
  uint64_t v80;

  v65 = a5;
  v64 = a6;
  v63 = a9;
  v62 = a10;
  sub_CAB80(a3, a4, &v65, &v64, a7, a8 | ((HIDWORD(a8) & 1) << 32), &v63, &v62, (uint64_t)&v66);
  v12 = *((_QWORD *)&v66 + 1);
  v11 = v66;
  v13 = v67;
  v14 = *((_QWORD *)&v67 + 1);
  v15 = v68;
  v16 = v69;
  v17 = v70;
  v18 = v71;
  v19 = v72;
  v20 = v73;
  v21 = v74;
  v22 = v75;
  v23 = v76;
  v24.i32[0] = v77;
  v25 = (int16x8_t)vmovl_u8(v24);
  v26 = v78;
  v27 = v79;
  v28 = v80;
  if (a11 == 2)
  {
    v29 = enum case for DataEventTrait.onlyOnce(_:);
  }
  else
  {
    LOBYTE(v66) = a11;
    v52 = v75;
    v53 = v74;
    v61 = v78;
    v60 = v11;
    v59 = v67;
    v57 = v69;
    v58 = *((_QWORD *)&v67 + 1);
    v55 = v72;
    v56 = v71;
    v54 = v73;
    v51 = v76;
    v50 = v25;
    v49 = v79;
    v30 = sub_71B4(&qword_299FD0);
    v31 = type metadata accessor for DataEventTrait(0);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned __int8 *)(v32 + 80);
    v34 = (v33 + 32) & ~v33;
    v35 = swift_allocObject(v30, v34 + *(_QWORD *)(v32 + 72), v33 | 7);
    *(_OWORD *)(v35 + 16) = xmmword_1F5FF0;
    v36 = v35 + v34;
    v29 = enum case for DataEventTrait.onlyOnce(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v36, enum case for DataEventTrait.onlyOnce(_:), v31);
    v37 = sub_54AB0();
    AccessTracker.push<A>(data:traits:file:line:)(&v66, v35, 0xD000000000000072, 0x800000000021F160, 162, &type metadata for MarkedData, v37);
    swift_bridgeObjectRelease(v35);
    v27 = v49;
    v25 = v50;
    v23 = v51;
    v22 = v52;
    v21 = v53;
    v20 = v54;
    v19 = v55;
    v18 = v56;
    v16 = v57;
    v14 = v58;
    v13 = v59;
    v11 = v60;
    v26 = v61;
  }
  *(_QWORD *)&v66 = v11;
  *((_QWORD *)&v66 + 1) = v12;
  LOBYTE(v67) = v13;
  *((_QWORD *)&v67 + 1) = v14;
  v68 = v15;
  v69 = v16;
  v70 = v17;
  v71 = v18;
  v72 = v19;
  v73 = v20;
  v74 = v21;
  v75 = v22;
  v76 = v23;
  v77 = vmovn_s16(v25).u32[0];
  v78 = v26;
  v79 = v27;
  v80 = v28;
  v38 = v28;
  v39 = sub_71B4(&qword_299FD0);
  v40 = type metadata accessor for DataEventTrait(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(unsigned __int8 *)(v41 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(v39, v43 + *(_QWORD *)(v41 + 72), v42 | 7);
  *(_OWORD *)(v44 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 104))(v44 + v43, v29, v40);
  v45 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v66, v44, 0xD000000000000072, 0x800000000021F160, 164, &type metadata for ContentData, v45);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v38);
  v46 = type metadata accessor for MarkAsFinishedEvent(0);
  v47 = sub_7E10(&qword_298408, type metadata accessor for MarkAsFinishedEvent, (uint64_t)&protocol conformance descriptor for MarkAsFinishedEvent);
  v66 = 0u;
  v67 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v46, 0, &v66, 0, 0, v46, v47);
  return sub_54960((uint64_t)&v66);
}

void EventReporter.emitMarkAsFinishedEvent(using:with:markedData:)(void *a1, _OWORD *a2, char *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  BAEventReporter *v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  int64_t v26;
  id v27;
  BOOL v28;
  id v29;
  _OWORD v30[6];

  v5 = a2[3];
  v30[2] = a2[2];
  v30[3] = v5;
  v6 = a2[5];
  v30[4] = a2[4];
  v30[5] = v6;
  v7 = a2[1];
  v30[0] = *a2;
  v30[1] = v7;
  v8 = a1;
  v9 = *a3;
  if (a1 || (v8 = sub_CB320()) != 0)
  {
    v10 = swift_allocObject(&unk_26E168, 120, 7);
    v11 = a2[3];
    *(_OWORD *)(v10 + 56) = a2[2];
    *(_OWORD *)(v10 + 72) = v11;
    v12 = a2[5];
    *(_OWORD *)(v10 + 88) = a2[4];
    *(_OWORD *)(v10 + 104) = v12;
    v13 = a2[1];
    *(_OWORD *)(v10 + 24) = *a2;
    *(_BYTE *)(v10 + 16) = v9;
    *(_OWORD *)(v10 + 40) = v13;
    v14 = (BAEventReporter *)swift_allocObject(&unk_26E190, 32, 7);
    v14[1].super.isa = (Class)sub_54430;
    *(_QWORD *)v14[1].dataProviders = v10;
    v15 = a1;
    sub_53FBC(v30);
    swift_retain(v10);
    Tracker.transaction(block:)(sub_54CC0, v14);

    swift_release((BAEventReporter *)v10, v16, v17, v18, v19, v20, v21, v22);
    swift_release(v14, v23, v24, v25, v26, v27, v28, v29);
  }
}

uint64_t sub_51A64(uint64_t a1, char a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (a2 == 3)
  {
    v4 = enum case for DataEventTrait.onlyOnce(_:);
  }
  else
  {
    LOBYTE(v25) = a2;
    v5 = sub_71B4(&qword_299FD0);
    v6 = type metadata accessor for DataEventTrait(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = (v8 + 32) & ~v8;
    v10 = swift_allocObject(v5, v9 + *(_QWORD *)(v7 + 72), v8 | 7);
    *(_OWORD *)(v10 + 16) = xmmword_1F5FF0;
    v4 = enum case for DataEventTrait.onlyOnce(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v10 + v9, enum case for DataEventTrait.onlyOnce(_:), v6);
    v11 = sub_54AB0();
    AccessTracker.push<A>(data:traits:file:line:)(&v25, v10, 0xD000000000000072, 0x800000000021F160, 182, &type metadata for MarkedData, v11);
    swift_bridgeObjectRelease(v10);
  }
  v12 = a3[3];
  v27 = a3[2];
  v28 = v12;
  v13 = a3[5];
  v29 = a3[4];
  v30 = v13;
  v14 = a3[1];
  v25 = *a3;
  v26 = v14;
  v15 = sub_71B4(&qword_299FD0);
  v16 = type metadata accessor for DataEventTrait(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(v15, v19 + *(_QWORD *)(v17 + 72), v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(v20 + v19, v4, v16);
  v21 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v25, v20, 0xD000000000000072, 0x800000000021F160, 184, &type metadata for ContentData, v21);
  swift_bridgeObjectRelease(v20);
  v22 = type metadata accessor for MarkAsFinishedEvent(0);
  v23 = sub_7E10(&qword_298408, type metadata accessor for MarkAsFinishedEvent, (uint64_t)&protocol conformance descriptor for MarkAsFinishedEvent);
  v25 = 0u;
  v26 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v22, 0, &v25, 0, 0, v22, v23);
  return sub_54960((uint64_t)&v25);
}

void EventReporter.emitRemoveFromCollectionEvent(using:for:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, id a8, unint64_t a9, unint64_t a10)
{
  void *v10;
  char v11;
  char v12;
  unsigned int v18;
  id v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  uint64_t v23;
  BAEventReporter *v24;
  id v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  SEL v35;
  id v36;
  id v37;
  int64_t v38;
  id v39;
  BOOL v40;
  id v41;
  ValueMetadata *v42;
  void *v43;
  unsigned int v44;
  char v46;
  unint64_t v47;

  v11 = a6;
  if (a6 >= 3)
  {
    v47 = a6;
    v42 = &type metadata for BridgedContentAcquisitionType;
    goto LABEL_15;
  }
  v12 = a7;
  if (a7 >= 7)
  {
    v47 = a7;
    v42 = &type metadata for BridgedContentType;
    goto LABEL_15;
  }
  if (a8)
  {
    v18 = objc_msgSend(a8, "intValue");
    if (a9 < 4)
      goto LABEL_5;
    goto LABEL_10;
  }
  v18 = 0;
  if (a9 >= 4)
  {
LABEL_10:
    v47 = a9;
    v42 = &type metadata for BridgedSeriesType;
LABEL_15:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v42, &v47, v42, &type metadata for Int);
    __break(1u);
    return;
  }
LABEL_5:
  v44 = v18;
  v46 = v12;
  if (a10 >= 3)
  {
    v47 = a10;
    v42 = &type metadata for BridgedProductionType;
    goto LABEL_15;
  }
  v19 = a1;
  if (a1 || (v19 = sub_CB320()) != 0)
  {
    v43 = a1;
    v20 = a5;
    v21 = v10;
    v22 = a8 == 0;
    v23 = swift_allocObject(&unk_26E1B8, 96, 7);
    *(_QWORD *)(v23 + 16) = v21;
    *(_QWORD *)(v23 + 24) = a4;
    *(_QWORD *)(v23 + 32) = v20;
    *(_BYTE *)(v23 + 40) = v46;
    *(_BYTE *)(v23 + 41) = v11;
    *(_QWORD *)(v23 + 48) = v19;
    *(_DWORD *)(v23 + 56) = v44;
    *(_BYTE *)(v23 + 60) = v22;
    *(_BYTE *)(v23 + 61) = 0x2010004u >> (8 * a9);
    *(_BYTE *)(v23 + 62) = a10;
    *(_QWORD *)(v23 + 64) = a2;
    *(_QWORD *)(v23 + 72) = a3;
    *(_QWORD *)(v23 + 80) = 0;
    *(_QWORD *)(v23 + 88) = 0;
    v24 = (BAEventReporter *)swift_allocObject(&unk_26E1E0, 32, 7);
    v24[1].super.isa = (Class)sub_54440;
    *(_QWORD *)v24[1].dataProviders = v23;
    v25 = v43;
    swift_bridgeObjectRetain(a3);
    v26 = v21;
    swift_bridgeObjectRetain(v20);
    v27 = v19;
    swift_retain(v23);
    Tracker.transaction(block:)(sub_54CC0, v24);

    swift_release((BAEventReporter *)v23, v28, v29, v30, v31, v32, v33, v34);
    swift_release(v24, v35, v36, v37, v38, v39, v40, v41);
  }
}

void EventReporter.emitRemoveFromCollectionEvent(using:for:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, char *a7, uint64_t a8, char *a9, char *a10)
{
  void *v10;
  char v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BAEventReporter *v23;
  BAEventReporter *v24;
  id v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  int64_t v31;
  id v32;
  BOOL v33;
  id v34;
  SEL v35;
  id v36;
  id v37;
  int64_t v38;
  id v39;
  BOOL v40;
  id v41;
  char v42;
  char v43;

  v17 = *a6;
  v18 = *a7;
  v42 = *a10;
  v43 = *a9;
  v19 = a1;
  if (a1 || (v19 = sub_CB320()) != 0)
  {
    v20 = swift_allocObject(&unk_26E208, 96, 7);
    v21 = a2;
    v22 = a5;
    v23 = (BAEventReporter *)v20;
    *(_QWORD *)(v20 + 16) = v10;
    *(_QWORD *)(v20 + 24) = a4;
    *(_QWORD *)(v20 + 32) = v22;
    *(_BYTE *)(v20 + 40) = v18;
    *(_BYTE *)(v20 + 41) = v17;
    *(_QWORD *)(v20 + 48) = v19;
    *(_DWORD *)(v20 + 56) = a8;
    *(_BYTE *)(v20 + 60) = BYTE4(a8) & 1;
    *(_BYTE *)(v20 + 61) = v43;
    *(_BYTE *)(v20 + 62) = v42;
    *(_QWORD *)(v20 + 64) = v21;
    *(_QWORD *)(v20 + 72) = a3;
    *(_QWORD *)(v20 + 80) = 0;
    *(_QWORD *)(v20 + 88) = 0;
    v24 = (BAEventReporter *)swift_allocObject(&unk_26E230, 32, 7);
    v24[1].super.isa = (Class)sub_54440;
    *(_QWORD *)v24[1].dataProviders = v23;
    v25 = a1;
    swift_bridgeObjectRetain(a3);
    v26 = v10;
    swift_bridgeObjectRetain(v22);
    v27 = v19;
    swift_retain(v23);
    Tracker.transaction(block:)(sub_54CC0, v24);

    swift_release(v23, v28, v29, v30, v31, v32, v33, v34);
    swift_release(v24, v35, v36, v37, v38, v39, v40, v41);
  }
}

uint64_t sub_52050(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, void (*a11)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4, a2);
  v17 = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5, v16);
  v20 = v19;
  v21 = a3;
  v22 = a8;
  v23 = a1;
  a11(a3, v15, v17, v18, v20, a6, a7, a8, a9, a10);

  swift_bridgeObjectRelease(v17);
  return swift_bridgeObjectRelease(v20);
}

uint64_t sub_52138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, unint64_t a8, unsigned __int8 a9, unsigned __int8 a10, __int128 a11, __int128 a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a5;
  v34 = a6;
  v33 = a9;
  v32 = a10;
  sub_CAB80(a3, a4, &v35, &v34, a7, a8 | ((HIDWORD(a8) & 1) << 32), &v33, &v32, (uint64_t)&v36);
  v28 = v39;
  v29 = v38;
  v30 = v40;
  v31 = *((_QWORD *)&v36 + 1);
  v12 = sub_71B4(&qword_299FD0);
  v13 = type metadata accessor for DataEventTrait(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = v16 + *(_QWORD *)(v14 + 72);
  v18 = v15 | 7;
  v19 = swift_allocObject(v12, v17, v15 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_1F5FF0;
  v20 = enum case for DataEventTrait.onlyOnce(_:);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104);
  v21(v19 + v16, enum case for DataEventTrait.onlyOnce(_:), v13);
  v22 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v36, v19, 0xD000000000000072, 0x800000000021F160, 230, &type metadata for ContentData, v22);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v30);
  v36 = a11;
  v37 = a12;
  v23 = swift_allocObject(v12, v17, v18);
  *(_OWORD *)(v23 + 16) = xmmword_1F5FF0;
  v21(v23 + v16, v20, v13);
  v24 = sub_54A68();
  AccessTracker.push<A>(data:traits:file:line:)(&v36, v23, 0xD000000000000072, 0x800000000021F160, 231, &type metadata for CollectionData, v24);
  swift_bridgeObjectRelease(v23);
  v25 = type metadata accessor for RemoveFromCollectionEvent(0);
  v26 = sub_7E10(&qword_298400, type metadata accessor for RemoveFromCollectionEvent, (uint64_t)&protocol conformance descriptor for RemoveFromCollectionEvent);
  v36 = 0u;
  v37 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v25, 0, &v36, 0, 0, v25, v26);
  return sub_54960((uint64_t)&v36);
}

void EventReporter.emitRemoveFromCollectionEvent(using:for:with:)(void *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  BAEventReporter *v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  int64_t v28;
  id v29;
  BOOL v30;
  id v31;
  _OWORD v32[6];

  v8 = a4[3];
  v32[2] = a4[2];
  v32[3] = v8;
  v9 = a4[5];
  v32[4] = a4[4];
  v32[5] = v9;
  v10 = a4[1];
  v32[0] = *a4;
  v32[1] = v10;
  v11 = a1;
  if (a1 || (v11 = sub_CB320()) != 0)
  {
    v12 = swift_allocObject(&unk_26E258, 144, 7);
    v13 = a4[3];
    *(_OWORD *)(v12 + 48) = a4[2];
    *(_OWORD *)(v12 + 64) = v13;
    v14 = a4[5];
    *(_OWORD *)(v12 + 80) = a4[4];
    *(_OWORD *)(v12 + 96) = v14;
    v15 = a4[1];
    *(_OWORD *)(v12 + 16) = *a4;
    *(_OWORD *)(v12 + 32) = v15;
    *(_QWORD *)(v12 + 112) = a2;
    *(_QWORD *)(v12 + 120) = a3;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 136) = 0;
    v16 = (BAEventReporter *)swift_allocObject(&unk_26E280, 32, 7);
    v16[1].super.isa = (Class)sub_54604;
    *(_QWORD *)v16[1].dataProviders = v12;
    v17 = a1;
    swift_bridgeObjectRetain(a3);
    sub_53FBC(v32);
    swift_retain(v12);
    Tracker.transaction(block:)(sub_54CC0, v16);

    swift_release((BAEventReporter *)v12, v18, v19, v20, v21, v22, v23, v24);
    swift_release(v16, v25, v26, v27, v28, v29, v30, v31);
  }
}

uint64_t sub_52530(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void *, uint64_t, uint64_t, id))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4, a2);
  v12 = v11;
  v13 = a3;
  v14 = a5;
  v15 = a1;
  a6(a3, v10, v12, v14);

  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_525BC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)&v26 = a5;
  *((_QWORD *)&v26 + 1) = a6;
  *(_QWORD *)&v25 = a3;
  *((_QWORD *)&v25 + 1) = a4;
  v6 = a2[3];
  v29 = a2[2];
  v30 = v6;
  v7 = a2[5];
  v31 = a2[4];
  v32 = v7;
  v8 = a2[1];
  v27 = *a2;
  v28 = v8;
  v9 = sub_71B4(&qword_299FD0);
  v10 = type metadata accessor for DataEventTrait(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = v13 + *(_QWORD *)(v11 + 72);
  v15 = v12 | 7;
  v16 = swift_allocObject(v9, v14, v12 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1F5FF0;
  v17 = enum case for DataEventTrait.onlyOnce(_:);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  v18(v16 + v13, enum case for DataEventTrait.onlyOnce(_:), v10);
  v19 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v27, v16, 0xD000000000000072, 0x800000000021F160, 245, &type metadata for ContentData, v19);
  swift_bridgeObjectRelease(v16);
  v27 = v25;
  v28 = v26;
  v20 = swift_allocObject(v9, v14, v15);
  *(_OWORD *)(v20 + 16) = xmmword_1F5FF0;
  v18(v20 + v13, v17, v10);
  v21 = sub_54A68();
  AccessTracker.push<A>(data:traits:file:line:)(&v27, v20, 0xD000000000000072, 0x800000000021F160, 246, &type metadata for CollectionData, v21);
  swift_bridgeObjectRelease(v20);
  v22 = type metadata accessor for RemoveFromCollectionEvent(0);
  v23 = sub_7E10(&qword_298400, type metadata accessor for RemoveFromCollectionEvent, (uint64_t)&protocol conformance descriptor for RemoveFromCollectionEvent);
  v27 = 0u;
  v28 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v22, 0, &v27, 0, 0, v22, v23);
  return sub_54960((uint64_t)&v27);
}

void EventReporter.emitRemoveFromWantListEvent(using:for:with:)(objc_class *a1, uint64_t a2, objc_class *a3, uint64_t a4)
{
  BAEventReporter *v8;
  BAEventReporter *v9;
  objc_class *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;

  v8 = (BAEventReporter *)swift_allocObject(&unk_26E2A8, 48, 7);
  v8[1].super.isa = a1;
  *(_QWORD *)v8[1].dataProviders = a2;
  v8[2].super.isa = a3;
  *(_QWORD *)v8[2].dataProviders = a4;
  v9 = (BAEventReporter *)swift_allocObject(&unk_26E2D0, 32, 7);
  v9[1].super.isa = (Class)sub_54618;
  *(_QWORD *)v9[1].dataProviders = v8;
  v10 = a1;
  swift_bridgeObjectRetain(a3);
  swift_retain(v8);
  Tracker.transaction(block:)(sub_54CC0, v9);
  swift_release(v8, v11, v12, v13, v14, v15, v16, v17);
  swift_release(v9, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_52868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  void *Strong;
  NSString v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  _BYTE v42[24];

  v8 = a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v42, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v8);
  if (!Strong)
    goto LABEL_5;
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(Strong, "contentPrivateIDForContentID:", v10);

  swift_unknownObjectRelease(Strong);
  if (!v11)
  {
    Strong = 0;
LABEL_5:
    v14 = 0xE000000000000000;
    goto LABEL_6;
  }
  Strong = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);
  v14 = v13;

LABEL_6:
  v15 = swift_unknownObjectWeakLoadStrong(v8);
  if (v15
    && (v16 = (void *)v15,
        v17 = String._bridgeToObjectiveC()(),
        v18 = objc_msgSend(v16, "contentUserIDForContentID:", v17),
        v17,
        swift_unknownObjectRelease(v16),
        v18))
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0xE000000000000000;
  }
  if (a5 >= 7)
  {
    *(_QWORD *)&v41[0] = a5;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for BridgedContentType, v41, &type metadata for BridgedContentType, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v23 = sub_71B4(&qword_2983D8);
    v24 = swift_allocObject(v23, 88, 7);
    *(_OWORD *)(v24 + 16) = xmmword_1F5FF0;
    *(_QWORD *)(v24 + 32) = Strong;
    *(_QWORD *)(v24 + 40) = v14;
    *(_QWORD *)(v24 + 48) = v20;
    *(_QWORD *)(v24 + 56) = v22;
    *(_BYTE *)(v24 + 64) = a5;
    *(_QWORD *)(v24 + 72) = a3;
    *(_QWORD *)(v24 + 80) = a4;
    *(_QWORD *)&v41[0] = v24;
    v40 = sub_71B4(&qword_299FD0);
    v25 = type metadata accessor for DataEventTrait(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned __int8 *)(v26 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = v28 + *(_QWORD *)(v26 + 72);
    v39 = v27 | 7;
    v30 = swift_allocObject(v40, v29, v27 | 7);
    *(_OWORD *)(v30 + 16) = xmmword_1F5FF0;
    v31 = enum case for DataEventTrait.onlyOnce(_:);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 104);
    v32(v30 + v28, enum case for DataEventTrait.onlyOnce(_:), v25);
    v33 = sub_549E0();
    swift_bridgeObjectRetain(a4);
    AccessTracker.push<A>(data:traits:file:line:)(v41, v30, 0xD000000000000072, 0x800000000021F160, 260, &type metadata for WantListRemovalData, v33);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v30);
    LOBYTE(v41[0]) = 1;
    v34 = swift_allocObject(v40, v29, v39);
    *(_OWORD *)(v34 + 16) = xmmword_1F5FF0;
    v32(v34 + v28, v31, v25);
    v35 = sub_54A24();
    AccessTracker.push<A>(data:traits:file:line:)(v41, v34, 0xD000000000000072, 0x800000000021F160, 261, &type metadata for WantListRemovalTypeData, v35);
    swift_bridgeObjectRelease(v34);
    v36 = type metadata accessor for RemoveFromWantListEvent(0);
    v37 = sub_7E10(&qword_2983F0, type metadata accessor for RemoveFromWantListEvent, (uint64_t)&protocol conformance descriptor for RemoveFromWantListEvent);
    memset(v41, 0, sizeof(v41));
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v36, 0, v41, 0, 0, v36, v37);
    return sub_54960((uint64_t)v41);
  }
  return result;
}

_QWORD *EventReporter.emitRemoveFromWantListEvent(using:with:)()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  BAEventReporter *v4;
  SEL v5;
  id v6;
  id v7;
  int64_t v8;
  id v9;
  BOOL v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  int64_t v15;
  id v16;
  BOOL v17;
  id v18;
  _OWORD v20[6];

  sub_AF27C((uint64_t)v20);
  v0 = swift_allocObject(&unk_26E2F8, 112, 7);
  v1 = v20[3];
  *(_OWORD *)(v0 + 48) = v20[2];
  *(_OWORD *)(v0 + 64) = v1;
  v2 = v20[5];
  *(_OWORD *)(v0 + 80) = v20[4];
  *(_OWORD *)(v0 + 96) = v2;
  v3 = v20[1];
  *(_OWORD *)(v0 + 16) = v20[0];
  *(_OWORD *)(v0 + 32) = v3;
  v4 = (BAEventReporter *)swift_allocObject(&unk_26E320, 32, 7);
  v4[1].super.isa = (Class)sub_54628;
  *(_QWORD *)v4[1].dataProviders = v0;
  sub_53FBC(v20);
  swift_retain(v0);
  Tracker.transaction(block:)(sub_54CC0, v4);
  swift_release((BAEventReporter *)v0, v5, v6, v7, v8, v9, v10, v11);
  swift_release(v4, v12, v13, v14, v15, v16, v17, v18);
  return sub_54654(v20);
}

void EventReporter.emitRemoveFromWantListEvent(using:with:)(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  BAEventReporter *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;
  _OWORD v25[6];

  v3 = a2[3];
  v25[2] = a2[2];
  v25[3] = v3;
  v4 = a2[5];
  v25[4] = a2[4];
  v25[5] = v4;
  v5 = a2[1];
  v25[0] = *a2;
  v25[1] = v5;
  v6 = swift_allocObject(&unk_26E348, 112, 7);
  v7 = a2[3];
  *(_OWORD *)(v6 + 48) = a2[2];
  *(_OWORD *)(v6 + 64) = v7;
  v8 = a2[5];
  *(_OWORD *)(v6 + 80) = a2[4];
  *(_OWORD *)(v6 + 96) = v8;
  v9 = a2[1];
  *(_OWORD *)(v6 + 16) = *a2;
  *(_OWORD *)(v6 + 32) = v9;
  v10 = (BAEventReporter *)swift_allocObject(&unk_26E370, 32, 7);
  v10[1].super.isa = (Class)sub_54CB8;
  *(_QWORD *)v10[1].dataProviders = v6;
  sub_53FBC(v25);
  swift_retain(v6);
  Tracker.transaction(block:)(sub_54CC0, v10);
  swift_release((BAEventReporter *)v6, v11, v12, v13, v14, v15, v16, v17);
  swift_release(v10, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_52F40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];

  v2 = a2[3];
  v3 = a2[4];
  v4 = a2[5];
  v5 = a2[6];
  v6 = *((_BYTE *)a2 + 16);
  v7 = *a2;
  v8 = a2[1];
  v26 = v5;
  v27 = v8;
  v9 = sub_71B4(&qword_2983D8);
  v10 = swift_allocObject(v9, 88, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1F5FF0;
  *(_QWORD *)(v10 + 32) = v2;
  *(_QWORD *)(v10 + 40) = v3;
  *(_QWORD *)(v10 + 48) = v4;
  *(_QWORD *)(v10 + 56) = v5;
  *(_BYTE *)(v10 + 64) = v6;
  *(_QWORD *)(v10 + 72) = v7;
  *(_QWORD *)(v10 + 80) = v8;
  *(_QWORD *)&v29[0] = v10;
  v28 = sub_71B4(&qword_299FD0);
  v11 = type metadata accessor for DataEventTrait(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = v14 + *(_QWORD *)(v12 + 72);
  v16 = v13 | 7;
  v17 = swift_allocObject(v28, v15, v13 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1F5FF0;
  v18 = enum case for DataEventTrait.onlyOnce(_:);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104);
  v19(v17 + v14, enum case for DataEventTrait.onlyOnce(_:), v11);
  v20 = sub_549E0();
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  AccessTracker.push<A>(data:traits:file:line:)(v29, v17, 0xD000000000000072, 0x800000000021F160, 276, &type metadata for WantListRemovalData, v20);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v17);
  LOBYTE(v29[0]) = 1;
  v21 = swift_allocObject(v28, v15, v16);
  *(_OWORD *)(v21 + 16) = xmmword_1F5FF0;
  v19(v21 + v14, v18, v11);
  v22 = sub_54A24();
  AccessTracker.push<A>(data:traits:file:line:)(v29, v21, 0xD000000000000072, 0x800000000021F160, 277, &type metadata for WantListRemovalTypeData, v22);
  swift_bridgeObjectRelease(v21);
  v23 = type metadata accessor for RemoveFromWantListEvent(0);
  v24 = sub_7E10(&qword_2983F0, type metadata accessor for RemoveFromWantListEvent, (uint64_t)&protocol conformance descriptor for RemoveFromWantListEvent);
  memset(v29, 0, sizeof(v29));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v23, 0, v29, 0, 0, v23, v24);
  return sub_54960((uint64_t)v29);
}

void EventReporter.emitRemoveFromWantToReadEvent(using:for:)(objc_class *a1, uint64_t a2, objc_class *a3)
{
  objc_class *v6;
  BAEventReporter *v7;
  BAEventReporter *v8;
  objc_class *v9;
  objc_class *v10;
  SEL v11;
  id v12;
  id v13;
  int64_t v14;
  id v15;
  BOOL v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  int64_t v21;
  id v22;
  BOOL v23;
  id v24;

  v6 = a1;
  if (a1 || (v6 = (objc_class *)sub_CB320()) != 0)
  {
    v7 = (BAEventReporter *)swift_allocObject(&unk_26E398, 40, 7);
    v7[1].super.isa = v6;
    *(_QWORD *)v7[1].dataProviders = a2;
    v7[2].super.isa = a3;
    v8 = (BAEventReporter *)swift_allocObject(&unk_26E3C0, 32, 7);
    v8[1].super.isa = (Class)sub_546B4;
    *(_QWORD *)v8[1].dataProviders = v7;
    v9 = a1;
    v10 = v6;
    swift_bridgeObjectRetain(a3);
    swift_retain(v7);
    Tracker.transaction(block:)(sub_54CC0, v8);

    swift_release(v7, v11, v12, v13, v14, v15, v16, v17);
    swift_release(v8, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t sub_53264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *Strong;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  _BYTE v40[24];

  v6 = a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
  swift_beginAccess(a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v40, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
  if (!Strong)
    goto LABEL_5;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(Strong, "contentPrivateIDForContentID:", v8);

  swift_unknownObjectRelease(Strong);
  if (!v9)
  {
    Strong = 0;
LABEL_5:
    v12 = 0xE000000000000000;
    goto LABEL_6;
  }
  Strong = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);
  v12 = v11;

LABEL_6:
  v13 = swift_unknownObjectWeakLoadStrong(v6);
  if (v13
    && (v14 = (void *)v13,
        v15 = String._bridgeToObjectiveC()(),
        v16 = objc_msgSend(v14, "contentUserIDForContentID:", v15),
        v15,
        swift_unknownObjectRelease(v14),
        v16))
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0xE000000000000000;
  }
  v21 = sub_71B4(&qword_2983D8);
  v22 = swift_allocObject(v21, 88, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1F5FF0;
  *(_QWORD *)(v22 + 32) = Strong;
  *(_QWORD *)(v22 + 40) = v12;
  *(_QWORD *)(v22 + 48) = v18;
  *(_QWORD *)(v22 + 56) = v20;
  *(_BYTE *)(v22 + 64) = 0;
  *(_QWORD *)(v22 + 72) = a3;
  *(_QWORD *)(v22 + 80) = a4;
  *(_QWORD *)&v39[0] = v22;
  v38 = sub_71B4(&qword_299FD0);
  v23 = type metadata accessor for DataEventTrait(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = v26 + *(_QWORD *)(v24 + 72);
  v37 = v25 | 7;
  v28 = swift_allocObject(v38, v27, v25 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_1F5FF0;
  v29 = enum case for DataEventTrait.onlyOnce(_:);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 104);
  v30(v28 + v26, enum case for DataEventTrait.onlyOnce(_:), v23);
  v31 = sub_549E0();
  swift_bridgeObjectRetain(a4);
  AccessTracker.push<A>(data:traits:file:line:)(v39, v28, 0xD000000000000072, 0x800000000021F160, 291, &type metadata for WantListRemovalData, v31);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v28);
  LOBYTE(v39[0]) = 1;
  v32 = swift_allocObject(v38, v27, v37);
  *(_OWORD *)(v32 + 16) = xmmword_1F5FF0;
  v30(v32 + v26, v29, v23);
  v33 = sub_54A24();
  AccessTracker.push<A>(data:traits:file:line:)(v39, v32, 0xD000000000000072, 0x800000000021F160, 292, &type metadata for WantListRemovalTypeData, v33);
  swift_bridgeObjectRelease(v32);
  v34 = type metadata accessor for RemoveFromWantListEvent(0);
  v35 = sub_7E10(&qword_2983F0, type metadata accessor for RemoveFromWantListEvent, (uint64_t)&protocol conformance descriptor for RemoveFromWantListEvent);
  memset(v39, 0, sizeof(v39));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v34, 0, v39, 0, 0, v34, v35);
  return sub_54960((uint64_t)v39);
}

void EventReporter.emitWantListAddEvent(using:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, id a6, unint64_t a7, unint64_t a8)
{
  void *v8;
  char v9;
  char v10;
  unsigned int v17;
  id v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BAEventReporter *v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  int64_t v29;
  id v30;
  BOOL v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  int64_t v36;
  id v37;
  BOOL v38;
  id v39;
  ValueMetadata *v40;
  void *v41;
  unsigned int v42;
  unint64_t v43;

  v9 = a4;
  if (a4 >= 3)
  {
    v43 = a4;
    v40 = &type metadata for BridgedContentAcquisitionType;
    goto LABEL_15;
  }
  v10 = a5;
  if (a5 >= 7)
  {
    v43 = a5;
    v40 = &type metadata for BridgedContentType;
    goto LABEL_15;
  }
  if (a6)
  {
    v17 = objc_msgSend(a6, "intValue");
    if (a7 < 4)
      goto LABEL_5;
    goto LABEL_10;
  }
  v17 = 0;
  if (a7 >= 4)
  {
LABEL_10:
    v43 = a7;
    v40 = &type metadata for BridgedSeriesType;
LABEL_15:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v40, &v43, v40, &type metadata for Int);
    __break(1u);
    return;
  }
LABEL_5:
  v42 = v17;
  if (a8 >= 3)
  {
    v43 = a8;
    v40 = &type metadata for BridgedProductionType;
    goto LABEL_15;
  }
  v18 = a1;
  if (a1 || (v18 = sub_CB320()) != 0)
  {
    v41 = a1;
    v19 = a3;
    v20 = a6 == 0;
    v21 = swift_allocObject(&unk_26E3E8, 63, 7);
    *(_QWORD *)(v21 + 16) = v8;
    *(_QWORD *)(v21 + 24) = a2;
    *(_QWORD *)(v21 + 32) = v19;
    *(_BYTE *)(v21 + 40) = v10;
    *(_BYTE *)(v21 + 41) = v9;
    *(_QWORD *)(v21 + 48) = v18;
    *(_DWORD *)(v21 + 56) = v42;
    *(_BYTE *)(v21 + 60) = v20;
    *(_BYTE *)(v21 + 61) = 0x2010004u >> (8 * a7);
    *(_BYTE *)(v21 + 62) = a8;
    v22 = (BAEventReporter *)swift_allocObject(&unk_26E410, 32, 7);
    v22[1].super.isa = (Class)sub_546C8;
    *(_QWORD *)v22[1].dataProviders = v21;
    v23 = v41;
    v24 = v8;
    swift_bridgeObjectRetain(v19);
    v25 = v18;
    swift_retain(v21);
    Tracker.transaction(block:)(sub_54CC0, v22);

    swift_release((BAEventReporter *)v21, v26, v27, v28, v29, v30, v31, v32);
    swift_release(v22, v33, v34, v35, v36, v37, v38, v39);
  }
}

void EventReporter.emitWantListAddEvent(using:contentID:contentAcquisitionType:contentType:supplementalContentCount:seriesType:productionType:)(void *a1, uint64_t a2, uint64_t a3, char *a4, char *a5, uint64_t a6, char *a7, char *a8)
{
  void *v8;
  char v13;
  char v14;
  char v15;
  char v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BAEventReporter *v21;
  BAEventReporter *v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  int64_t v29;
  id v30;
  BOOL v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  int64_t v36;
  id v37;
  BOOL v38;
  id v39;

  v13 = *a4;
  v14 = *a5;
  v15 = *a7;
  v16 = *a8;
  v17 = a1;
  if (a1 || (v17 = sub_CB320()) != 0)
  {
    v18 = swift_allocObject(&unk_26E438, 63, 7);
    v19 = v15;
    v20 = a3;
    v21 = (BAEventReporter *)v18;
    *(_QWORD *)(v18 + 16) = v8;
    *(_QWORD *)(v18 + 24) = a2;
    *(_QWORD *)(v18 + 32) = v20;
    *(_BYTE *)(v18 + 40) = v14;
    *(_BYTE *)(v18 + 41) = v13;
    *(_QWORD *)(v18 + 48) = v17;
    *(_DWORD *)(v18 + 56) = a6;
    *(_BYTE *)(v18 + 60) = BYTE4(a6) & 1;
    *(_BYTE *)(v18 + 61) = v19;
    *(_BYTE *)(v18 + 62) = v16;
    v22 = (BAEventReporter *)swift_allocObject(&unk_26E460, 32, 7);
    v22[1].super.isa = (Class)sub_546C8;
    *(_QWORD *)v22[1].dataProviders = v21;
    v23 = a1;
    v24 = v8;
    swift_bridgeObjectRetain(v20);
    v25 = v17;
    swift_retain(v21);
    Tracker.transaction(block:)(sub_54CC0, v22);

    swift_release(v21, v26, v27, v28, v29, v30, v31, v32);
    swift_release(v22, v33, v34, v35, v36, v37, v38, v39);
  }
}

uint64_t sub_538F4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void (*a10)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4, a2);
  v16 = v15;
  v17 = a3;
  v18 = a7;
  v19 = a1;
  a10(a3, v14, v16, a5, a6, a7, a8, a9);

  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_539A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, unint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a5;
  v26 = a6;
  v25 = a9;
  v24 = a10;
  sub_CAB80(a3, a4, &v27, &v26, a7, a8 | ((HIDWORD(a8) & 1) << 32), &v25, &v24, (uint64_t)v28);
  v10 = *((_QWORD *)&v28[0] + 1);
  v11 = v29;
  v12 = v30;
  v13 = v31;
  v14 = sub_71B4(&qword_299FD0);
  v15 = type metadata accessor for DataEventTrait(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(v14, v18 + *(_QWORD *)(v16 + 72), v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v19 + v18, enum case for DataEventTrait.onlyOnce(_:), v15);
  v20 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(v28, v19, 0xD000000000000072, 0x800000000021F160, 332, &type metadata for ContentData, v20);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v13);
  v21 = type metadata accessor for WantListAddEvent(0);
  v22 = sub_7E10(&qword_2983C8, type metadata accessor for WantListAddEvent, (uint64_t)&protocol conformance descriptor for WantListAddEvent);
  memset(v28, 0, sizeof(v28));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v21, 0, v28, 0, 0, v21, v22);
  return sub_54960((uint64_t)v28);
}

void EventReporter.emitWantListAddEvent(using:with:)(void *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  BAEventReporter *v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  int64_t v17;
  id v18;
  BOOL v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  int64_t v24;
  id v25;
  BOOL v26;
  id v27;
  _OWORD v28[6];

  v4 = a2[3];
  v28[2] = a2[2];
  v28[3] = v4;
  v5 = a2[5];
  v28[4] = a2[4];
  v28[5] = v5;
  v6 = a2[1];
  v28[0] = *a2;
  v28[1] = v6;
  v7 = a1;
  if (a1 || (v7 = sub_CB320()) != 0)
  {
    v8 = swift_allocObject(&unk_26E488, 112, 7);
    v9 = a2[3];
    *(_OWORD *)(v8 + 48) = a2[2];
    *(_OWORD *)(v8 + 64) = v9;
    v10 = a2[5];
    *(_OWORD *)(v8 + 80) = a2[4];
    *(_OWORD *)(v8 + 96) = v10;
    v11 = a2[1];
    *(_OWORD *)(v8 + 16) = *a2;
    *(_OWORD *)(v8 + 32) = v11;
    v12 = (BAEventReporter *)swift_allocObject(&unk_26E4B0, 32, 7);
    v12[1].super.isa = (Class)sub_54858;
    *(_QWORD *)v12[1].dataProviders = v8;
    v13 = a1;
    sub_53FBC(v28);
    swift_retain(v8);
    Tracker.transaction(block:)(sub_54CC0, v12);

    swift_release((BAEventReporter *)v8, v14, v15, v16, v17, v18, v19, v20);
    swift_release(v12, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t sub_53D34(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = a2[3];
  v17 = a2[2];
  v18 = v2;
  v3 = a2[5];
  v19 = a2[4];
  v20 = v3;
  v4 = a2[1];
  v15 = *a2;
  v16 = v4;
  v5 = sub_71B4(&qword_299FD0);
  v6 = type metadata accessor for DataEventTrait(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v5, v9 + *(_QWORD *)(v7 + 72), v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1F5FF0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v10 + v9, enum case for DataEventTrait.onlyOnce(_:), v6);
  v11 = sub_5491C();
  AccessTracker.push<A>(data:traits:file:line:)(&v15, v10, 0xD000000000000072, 0x800000000021F160, 347, &type metadata for ContentData, v11);
  swift_bridgeObjectRelease(v10);
  v12 = type metadata accessor for WantListAddEvent(0);
  v13 = sub_7E10(&qword_2983C8, type metadata accessor for WantListAddEvent, (uint64_t)&protocol conformance descriptor for WantListAddEvent);
  v15 = 0u;
  v16 = 0u;
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v12, 0, &v15, 0, 0, v12, v13);
  return sub_54960((uint64_t)&v15);
}

uint64_t sub_53E88(uint64_t a1)
{
  return sub_54494(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, __int16, _QWORD, _QWORD, _QWORD, _QWORD))sub_4FF7C);
}

uint64_t sub_53E94(uint64_t a1)
{
  uint64_t v1;

  return sub_1E12AC(a1, *(uint64_t (**)(void))(v1 + 16));
}

_QWORD *_s13BookAnalytics13EventReporterC019emitAddToCollectionC05using3for4withyAA9BATrackerCSg_SSAA18BridgedContentDataCtF_0(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  BAEventReporter *v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;
  _OWORD v28[6];

  sub_AF27C((uint64_t)v28);
  v6 = a1;
  if (a1 || (v6 = sub_CB320()) != 0)
  {
    v7 = swift_allocObject(&unk_26E7A8, 144, 7);
    v8 = v28[3];
    *(_OWORD *)(v7 + 48) = v28[2];
    *(_OWORD *)(v7 + 64) = v8;
    v9 = v28[5];
    *(_OWORD *)(v7 + 80) = v28[4];
    *(_OWORD *)(v7 + 96) = v9;
    v10 = v28[1];
    *(_OWORD *)(v7 + 16) = v28[0];
    *(_OWORD *)(v7 + 32) = v10;
    *(_QWORD *)(v7 + 112) = a2;
    *(_QWORD *)(v7 + 120) = a3;
    *(_QWORD *)(v7 + 128) = 0;
    *(_QWORD *)(v7 + 136) = 0;
    v11 = (BAEventReporter *)swift_allocObject(&unk_26E7D0, 32, 7);
    v11[1].super.isa = (Class)sub_53FB0;
    *(_QWORD *)v11[1].dataProviders = v7;
    v12 = a1;
    swift_bridgeObjectRetain(a3);
    sub_53FBC(v28);
    swift_retain(v7);
    Tracker.transaction(block:)(sub_54CC0, v11);

    swift_release((BAEventReporter *)v7, v13, v14, v15, v16, v17, v18, v19);
    swift_release(v11, v20, v21, v22, v23, v24, v25, v26);
  }
  return sub_54654(v28);
}

uint64_t sub_53FB0(uint64_t a1)
{
  return sub_54C0C(a1, (uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_50374);
}

_QWORD *sub_53FBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[6];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_54010(uint64_t a1)
{
  uint64_t *v1;

  return sub_50B40(a1, v1[2], v1[3], v1[4], 85, type metadata accessor for CollectionAddEvent, &qword_298440, (uint64_t)&protocol conformance descriptor for CollectionAddEvent);
}

uint64_t sub_54048(uint64_t a1)
{
  uint64_t v1;

  return sub_50818(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_54050(uint64_t a1)
{
  uint64_t *v1;

  return sub_50B40(a1, v1[2], v1[3], v1[4], 104, type metadata accessor for CollectionRemoveEvent, &qword_298430, (uint64_t)&protocol conformance descriptor for CollectionRemoveEvent);
}

uint64_t sub_5408C(uint64_t a1)
{
  uint64_t v1;

  return sub_50EF8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_5409C()
{
  return sub_546D4(64);
}

uint64_t sub_540A8()
{
  return sub_546D4(64);
}

uint64_t sub_540B0(uint64_t a1)
{
  uint64_t v1;

  return sub_5157C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_BYTE *)(v1 + 41), *(_QWORD *)(v1 + 48), *(unsigned int *)(v1 + 56) | ((unint64_t)*(unsigned __int8 *)(v1 + 60) << 32), *(_WORD *)(v1 + 61), HIBYTE(*(_WORD *)(v1 + 61)), *(_BYTE *)(v1 + 63));
}

unint64_t *sub_54104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL a7, void *a8)
{
  int64_t v8;
  unint64_t *v9;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *Strong;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  void *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42[24];
  unint64_t *v43;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v8)
  {
    v43 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_B2D10(0, v8, 0, a4, a5, a6, a7, a8);
    v9 = (unint64_t *)&_swiftEmptyArrayStorage;
    v12 = a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate;
    swift_beginAccess(a2 + OBJC_IVAR____TtC13BookAnalytics9BATracker_sessionOperationDelegate, v42, 0, 0);
    v13 = (unint64_t *)(a1 + 40);
    v39 = v12;
    do
    {
      v15 = *(v13 - 1);
      v14 = *v13;
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v12);
      swift_bridgeObjectRetain(v14);
      if (Strong
        && (v17 = String._bridgeToObjectiveC()(),
            v18 = objc_msgSend(Strong, "contentPrivateIDForContentID:", v17),
            v17,
            swift_unknownObjectRelease(Strong),
            v18))
      {
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
        v40 = v21;
        v41 = v20;

      }
      else
      {
        v40 = 0xE000000000000000;
        v41 = 0;
      }
      v22 = swift_unknownObjectWeakLoadStrong(v12);
      if (v22
        && (v28 = (void *)v22,
            v29 = String._bridgeToObjectiveC()(),
            v30 = objc_msgSend(v28, "contentUserIDForContentID:", v29),
            v29,
            swift_unknownObjectRelease(v28),
            v30))
      {
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);
        v34 = v33;

      }
      else
      {
        v32 = 0;
        v34 = 0xE000000000000000;
      }
      v43 = v9;
      v36 = v9[2];
      v35 = v9[3];
      if (v36 >= v35 >> 1)
      {
        sub_B2D10(v35 > 1, v36 + 1, (char *)&dword_0 + 1, v23, v24, v25, v26, v27);
        v9 = v43;
      }
      v13 += 2;
      v9[2] = v36 + 1;
      v37 = &v9[6 * v36];
      v37[4] = v41;
      v37[5] = v40;
      v37[6] = v32;
      v37[7] = v34;
      v37[8] = v15;
      v37[9] = v14;
      --v8;
      v12 = v39;
    }
    while (v8);
  }
  return v9;
}

_QWORD *_s13BookAnalytics13EventReporterC018emitMarkAsFinishedC05using4with10markedDatayAA9BATrackerCSg_AA014BridgedContentL0CAA0n6MarkedL0CSgtF_0(void *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  BAEventReporter *v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;
  _OWORD v28[6];

  sub_AF27C((uint64_t)v28);
  if (!a3)
  {
    v5 = 3;
    v6 = a1;
    if (!a1)
      goto LABEL_5;
LABEL_6:
    v7 = swift_allocObject(&unk_26E758, 120, 7);
    v8 = v28[3];
    *(_OWORD *)(v7 + 56) = v28[2];
    *(_OWORD *)(v7 + 72) = v8;
    v9 = v28[5];
    *(_OWORD *)(v7 + 88) = v28[4];
    *(_OWORD *)(v7 + 104) = v9;
    v10 = v28[1];
    *(_OWORD *)(v7 + 24) = v28[0];
    *(_BYTE *)(v7 + 16) = v5;
    *(_OWORD *)(v7 + 40) = v10;
    v11 = (BAEventReporter *)swift_allocObject(&unk_26E780, 32, 7);
    v11[1].super.isa = (Class)sub_54C28;
    *(_QWORD *)v11[1].dataProviders = v7;
    v12 = a1;
    sub_53FBC(v28);
    swift_retain(v7);
    Tracker.transaction(block:)(sub_54CC0, v11);

    swift_release((BAEventReporter *)v7, v13, v14, v15, v16, v17, v18, v19);
    swift_release(v11, v20, v21, v22, v23, v24, v25, v26);
    return sub_54654(v28);
  }
  v5 = *(_BYTE *)(a3 + OBJC_IVAR___BAMarkedData_isFinishedDateSet);
  v6 = a1;
  if (a1)
    goto LABEL_6;
LABEL_5:
  v6 = sub_CB320();
  if (v6)
    goto LABEL_6;
  return sub_54654(v28);
}

uint64_t sub_54430(uint64_t a1)
{
  uint64_t v1;

  return sub_51A64(a1, *(_BYTE *)(v1 + 16), (__int128 *)(v1 + 24));
}

uint64_t sub_54440(uint64_t a1)
{
  return sub_54494(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, __int16, _QWORD, _QWORD, _QWORD, _QWORD))sub_52138);
}

uint64_t sub_54450()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_54494(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, __int16, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  __int16 v4;

  v4 = *(_WORD *)(v2 + 61);
  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(unsigned __int8 *)(v2 + 41), *(_QWORD *)(v2 + 48), *(unsigned int *)(v2 + 56) | ((unint64_t)*(unsigned __int8 *)(v2 + 60) << 32), v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

_QWORD *_s13BookAnalytics13EventReporterC024emitRemoveFromCollectionC05using3for4withyAA9BATrackerCSg_SSAA18BridgedContentDataCtF_0(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  BAEventReporter *v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  BOOL v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  int64_t v23;
  id v24;
  BOOL v25;
  id v26;
  _OWORD v28[6];

  sub_AF27C((uint64_t)v28);
  v6 = a1;
  if (a1 || (v6 = sub_CB320()) != 0)
  {
    v7 = swift_allocObject(&unk_26E708, 144, 7);
    v8 = v28[3];
    *(_OWORD *)(v7 + 48) = v28[2];
    *(_OWORD *)(v7 + 64) = v8;
    v9 = v28[5];
    *(_OWORD *)(v7 + 80) = v28[4];
    *(_OWORD *)(v7 + 96) = v9;
    v10 = v28[1];
    *(_OWORD *)(v7 + 16) = v28[0];
    *(_OWORD *)(v7 + 32) = v10;
    *(_QWORD *)(v7 + 112) = a2;
    *(_QWORD *)(v7 + 120) = a3;
    *(_QWORD *)(v7 + 128) = 0;
    *(_QWORD *)(v7 + 136) = 0;
    v11 = (BAEventReporter *)swift_allocObject(&unk_26E730, 32, 7);
    v11[1].super.isa = (Class)sub_54604;
    *(_QWORD *)v11[1].dataProviders = v7;
    v12 = a1;
    swift_bridgeObjectRetain(a3);
    sub_53FBC(v28);
    swift_retain(v7);
    Tracker.transaction(block:)(sub_54CC0, v11);

    swift_release((BAEventReporter *)v7, v13, v14, v15, v16, v17, v18, v19);
    swift_release(v11, v20, v21, v22, v23, v24, v25, v26);
  }
  return sub_54654(v28);
}

uint64_t sub_54604(uint64_t a1)
{
  return sub_54C0C(a1, (uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_525BC);
}

uint64_t sub_54610()
{
  return sub_5486C(48);
}

uint64_t sub_54618(uint64_t a1)
{
  uint64_t v1;

  return sub_52868(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_54628(uint64_t a1)
{
  uint64_t v1;

  return sub_52F40(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_54630()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_54654(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[11];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_546AC()
{
  return sub_5486C(40);
}

uint64_t sub_546B4(uint64_t a1)
{
  uint64_t *v1;

  return sub_53264(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_546C0()
{
  return sub_546D4(63);
}

uint64_t sub_546CC()
{
  return sub_546D4(63);
}

uint64_t sub_546D4(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_54714(uint64_t a1)
{
  uint64_t v1;

  return sub_539A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_BYTE *)(v1 + 41), *(_QWORD *)(v1 + 48), *(unsigned int *)(v1 + 56) | ((unint64_t)*(unsigned __int8 *)(v1 + 60) << 32), *(_WORD *)(v1 + 61), HIBYTE(*(_WORD *)(v1 + 61)));
}

_QWORD *_s13BookAnalytics13EventReporterC015emitWantListAddC05using4withyAA9BATrackerCSg_AA18BridgedContentDataCtF_0(void *a1)
{
  id v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  BAEventReporter *v7;
  id v8;
  SEL v9;
  id v10;
  id v11;
  int64_t v12;
  id v13;
  BOOL v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  int64_t v19;
  id v20;
  BOOL v21;
  id v22;
  _OWORD v24[6];

  sub_AF27C((uint64_t)v24);
  v2 = a1;
  if (a1 || (v2 = sub_CB320()) != 0)
  {
    v3 = swift_allocObject(&unk_26E6B8, 112, 7);
    v4 = v24[3];
    *(_OWORD *)(v3 + 48) = v24[2];
    *(_OWORD *)(v3 + 64) = v4;
    v5 = v24[5];
    *(_OWORD *)(v3 + 80) = v24[4];
    *(_OWORD *)(v3 + 96) = v5;
    v6 = v24[1];
    *(_OWORD *)(v3 + 16) = v24[0];
    *(_OWORD *)(v3 + 32) = v6;
    v7 = (BAEventReporter *)swift_allocObject(&unk_26E6E0, 32, 7);
    v7[1].super.isa = (Class)sub_54CBC;
    *(_QWORD *)v7[1].dataProviders = v3;
    v8 = a1;
    sub_53FBC(v24);
    swift_retain(v3);
    Tracker.transaction(block:)(sub_54CC0, v7);

    swift_release((BAEventReporter *)v3, v9, v10, v11, v12, v13, v14, v15);
    swift_release(v7, v16, v17, v18, v19, v20, v21, v22);
  }
  return sub_54654(v24);
}

uint64_t sub_54858(uint64_t a1)
{
  uint64_t v1;

  return sub_53D34(a1, (__int128 *)(v1 + 16));
}

uint64_t sub_54864()
{
  return sub_5486C(48);
}

uint64_t sub_5486C(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_548A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_548D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_548F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_5491C()
{
  unint64_t result;

  result = qword_299FF0;
  if (!qword_299FF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentData, &type metadata for ContentData);
    atomic_store(result, (unint64_t *)&qword_299FF0);
  }
  return result;
}

uint64_t sub_54960(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_71B4(&qword_2983D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_549A4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

unint64_t sub_549E0()
{
  unint64_t result;

  result = qword_2983E0;
  if (!qword_2983E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WantListRemovalData, &type metadata for WantListRemovalData);
    atomic_store(result, (unint64_t *)&qword_2983E0);
  }
  return result;
}

unint64_t sub_54A24()
{
  unint64_t result;

  result = qword_2983E8;
  if (!qword_2983E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WantListRemovalTypeData, &type metadata for WantListRemovalTypeData);
    atomic_store(result, (unint64_t *)&qword_2983E8);
  }
  return result;
}

unint64_t sub_54A68()
{
  unint64_t result;

  result = qword_2983F8;
  if (!qword_2983F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionData, &type metadata for CollectionData);
    atomic_store(result, (unint64_t *)&qword_2983F8);
  }
  return result;
}

unint64_t sub_54AB0()
{
  unint64_t result;

  result = qword_298410;
  if (!qword_298410)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarkedData, &type metadata for MarkedData);
    atomic_store(result, (unint64_t *)&qword_298410);
  }
  return result;
}

uint64_t sub_54AF8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocObject(v0, 120, 7);
}

unint64_t sub_54B34()
{
  unint64_t result;

  result = qword_298418;
  if (!qword_298418)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryEditData, &type metadata for LibraryEditData);
    atomic_store(result, (unint64_t *)&qword_298418);
  }
  return result;
}

unint64_t sub_54B78()
{
  unint64_t result;

  result = qword_298428;
  if (!qword_298428)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SingleCollectionData, &type metadata for SingleCollectionData);
    atomic_store(result, (unint64_t *)&qword_298428);
  }
  return result;
}

uint64_t sub_54BC0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  return swift_deallocObject(v0, 144, 7);
}

uint64_t sub_54C0C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2 + 2, v2[14], v2[15], v2[16], v2[17]);
}

uint64_t sub_54CC8()
{
  return 0x4449726F68747561;
}

uint64_t sub_54CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x4449726F68747561 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4449726F68747561, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_54D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_54EB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_54D9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_54EB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AuthorData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_71B4(&qword_298450);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_54EB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AuthorData.CodingKeys, &type metadata for AuthorData.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_54EB0()
{
  unint64_t result;

  result = qword_298458;
  if (!qword_298458)
  {
    result = swift_getWitnessTable(&unk_1F6198, &type metadata for AuthorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298458);
  }
  return result;
}

uint64_t AuthorData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_71B4(&qword_298460);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_54EB0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AuthorData.CodingKeys, &type metadata for AuthorData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_7DAC(a1);
}

unint64_t sub_55014()
{
  unint64_t result;

  result = qword_298468;
  if (!qword_298468)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AuthorData, &type metadata for AuthorData);
    atomic_store(result, (unint64_t *)&qword_298468);
  }
  return result;
}

unint64_t sub_5505C()
{
  unint64_t result;

  result = qword_298470;
  if (!qword_298470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AuthorData, &type metadata for AuthorData);
    atomic_store(result, (unint64_t *)&qword_298470);
  }
  return result;
}

uint64_t sub_550A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AuthorData.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for AuthorData()
{
  return &type metadata for AuthorData;
}

uint64_t storeEnumTagSinglePayload for AuthorData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_55104 + 4 * byte_1F6000[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_55124 + 4 * byte_1F6005[v4]))();
}

_BYTE *sub_55104(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_55124(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_5512C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_55134(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_5513C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_55144(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AuthorData.CodingKeys()
{
  return &type metadata for AuthorData.CodingKeys;
}

unint64_t sub_55164()
{
  unint64_t result;

  result = qword_298478;
  if (!qword_298478)
  {
    result = swift_getWitnessTable(&unk_1F6170, &type metadata for AuthorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298478);
  }
  return result;
}

unint64_t sub_551AC()
{
  unint64_t result;

  result = qword_298480;
  if (!qword_298480)
  {
    result = swift_getWitnessTable(&unk_1F60E0, &type metadata for AuthorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298480);
  }
  return result;
}

unint64_t sub_551F4()
{
  unint64_t result;

  result = qword_298488;
  if (!qword_298488)
  {
    result = swift_getWitnessTable(&unk_1F6108, &type metadata for AuthorData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298488);
  }
  return result;
}

uint64_t sub_55238(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_298490, &enum case for SessionGroup.default(_:));
}

uint64_t static PurchaseSuccessEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298490, a1);
}

uint64_t sub_55278(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2984A8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PurchaseSuccessEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2955D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2984A8, a1);
}

uint64_t PurchaseSuccessEvent.altContentTypeExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2984C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PurchaseSuccessEvent.altContentTypeExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2984C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t PurchaseSuccessEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PurchaseSuccessEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2985B0, (uint64_t)&nominal type descriptor for PurchaseSuccessEvent);
}

uint64_t PurchaseSuccessEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.contentData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 24);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 24);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.contentStoreData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 28);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.contentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 28);
  v4 = sub_71B4(&qword_2984D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.contentExposureData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.prevAltContentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 32);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.prevAltContentExposureData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 32);
  v4 = sub_71B4(&qword_2984D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.prevAltContentExposureData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.purchaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 36);
  v4 = sub_71B4(&qword_2984E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.purchaseData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 36);
  v4 = sub_71B4(&qword_2984E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.purchaseData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 40);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 40);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.upSellData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.seriesData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.suggestionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 48);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.suggestionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 48);
  v4 = sub_71B4(&qword_296F78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.suggestionData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 52);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.uppParentContentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 52);
  v4 = sub_71B4(&qword_2984E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.uppParentContentData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 56);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PurchaseSuccessEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent(0) + 56);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PurchaseSuccessEvent.eventData.modify())()
{
  type metadata accessor for PurchaseSuccessEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PurchaseSuccessEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PurchaseSuccessEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.required<A>(_:);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
  v12 = a1 + v4[8];
  v13 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v2, v13);
  v14 = a1 + v4[9];
  v15 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v6, v15);
  v16 = a1 + v4[10];
  v17 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
  v18 = a1 + v4[11];
  v19 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v2, v19);
  v20 = a1 + v4[12];
  v21 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + v4[13];
  v23 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
  v24 = a1 + v4[14];
  v25 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v6, v25);
}

uint64_t PurchaseSuccessEvent.Model.altContentTypeExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(v1 + 56);
  return sub_55D18(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_55D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t PurchaseSuccessEvent.Model.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_BYTE *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v5 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 104);
  v7 = *(_QWORD *)(v1 + 112);
  v8 = *(_WORD *)(v1 + 120);
  v9 = *(_DWORD *)(v1 + 124);
  v10 = *(_BYTE *)(v1 + 128);
  v11 = *(_DWORD *)(v1 + 132);
  v12 = *(_BYTE *)(v1 + 136);
  v13 = *(_BYTE *)(v1 + 141);
  v15 = *(_QWORD *)(v1 + 144);
  v14 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 60) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 68) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(v1 + 137);
  *(_BYTE *)(a1 + 77) = v13;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

uint64_t PurchaseSuccessEvent.Model.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;

  v2 = *(_QWORD *)(v1 + 160);
  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 200);
  v8 = *(_QWORD *)(v1 + 208);
  v9 = *(_QWORD *)(v1 + 216);
  v10 = *(_BYTE *)(v1 + 228);
  v11 = *(_DWORD *)(v1 + 224);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 68) = v10;
  *(_DWORD *)(a1 + 64) = v11;
  return sub_55E40(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_55E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t PurchaseSuccessEvent.Model.contentExposureData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  v2 = *(_QWORD *)(v1 + 232);
  v3 = *(_QWORD *)(v1 + 240);
  v4 = v1 + 232;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 56);
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(_QWORD *)(v4 + 72);
  v13 = *(_QWORD *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 88);
  v15 = *(_QWORD *)(v4 + 96);
  v16 = *(_QWORD *)(v4 + 104);
  v17 = *(_WORD *)(v4 + 116);
  v18 = *(_DWORD *)(v4 + 112);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_WORD *)(a1 + 116) = v17;
  *(_DWORD *)(a1 + 112) = v18;
  return sub_55F10(v2, v3, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_55F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }
  return result;
}

void PurchaseSuccessEvent.Model.prevAltContentExposureData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 350);
}

uint64_t PurchaseSuccessEvent.Model.purchaseData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 360);
  v3 = *(_BYTE *)(v1 + 368);
  v4 = *(_BYTE *)(v1 + 369);
  v5 = *(_QWORD *)(v1 + 376);
  v6 = *(_QWORD *)(v1 + 384);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 352);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v6);
}

uint64_t PurchaseSuccessEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 408);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 392);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t PurchaseSuccessEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[52];
  v3 = v1[53];
  v4 = v1[54];
  v5 = v1[55];
  v6 = v1[56];
  v7 = v1[57];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

void PurchaseSuccessEvent.Model.suggestionData.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 464);
}

uint64_t PurchaseSuccessEvent.Model.uppParentContentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 472);
  v3 = *(_QWORD *)(v1 + 480);
  v4 = *(_QWORD *)(v1 + 488);
  v5 = *(_QWORD *)(v1 + 496);
  v6 = *(_QWORD *)(v1 + 504);
  v7 = *(_QWORD *)(v1 + 512);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v1 + 520);
  return sub_56034(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_56034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t PurchaseSuccessEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PurchaseSuccessEvent.Model(0) + 56);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PurchaseSuccessEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_298698, (uint64_t)&nominal type descriptor for PurchaseSuccessEvent.Model);
}

uint64_t PurchaseSuccessEvent.Model.init(altContentTypeExposureData:contentData:contentStoreData:contentExposureData:prevAltContentExposureData:purchaseData:upSellData:seriesData:suggestionData:uppParentContentData:eventData:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10, uint64_t a11, uint64_t a12)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = *((_BYTE *)a1 + 56);
  *(_QWORD *)(a9 + 48) = *((_QWORD *)a1 + 6);
  *(_BYTE *)(a9 + 56) = v15;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a9 + 64) = *(_QWORD *)a2;
  *(_QWORD *)(a9 + 72) = v16;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a9 + 104) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a9 + 112) = v17;
  v18 = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a9 + 120) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a9 + 124) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a9 + 132) = *(_DWORD *)(a2 + 68);
  v19 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)a9 = v12;
  *(_OWORD *)(a9 + 16) = v13;
  *(_OWORD *)(a9 + 32) = v14;
  *(_OWORD *)(a9 + 88) = v18;
  *(_BYTE *)(a9 + 136) = v19;
  *(_DWORD *)(a9 + 137) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a9 + 141) = *(_BYTE *)(a2 + 77);
  v20 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a9 + 228) = *((_BYTE *)a3 + 68);
  v21 = *a3;
  v22 = a3[1];
  v23 = a3[2];
  v24 = a3[3];
  *(_DWORD *)(a9 + 224) = *((_DWORD *)a3 + 16);
  *(_WORD *)(a9 + 348) = *((_WORD *)a4 + 58);
  v25 = *a4;
  v26 = a4[1];
  v27 = a4[2];
  v28 = a4[3];
  v29 = a4[4];
  v30 = a4[5];
  v31 = a4[6];
  LOWORD(v17) = *a5;
  *(_DWORD *)(a9 + 344) = *((_DWORD *)a4 + 28);
  *(_WORD *)(a9 + 350) = v17;
  v32 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a9 + 352) = *(_QWORD *)a6;
  *(_QWORD *)(a9 + 360) = v32;
  *(_BYTE *)(a9 + 368) = *(_BYTE *)(a6 + 16);
  *(_BYTE *)(a9 + 369) = *(_BYTE *)(a6 + 17);
  v33 = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a9 + 376) = *(_QWORD *)(a6 + 24);
  *(_QWORD *)(a9 + 384) = v33;
  v34 = *a7;
  *(_QWORD *)(a9 + 408) = *((_QWORD *)a7 + 2);
  *(_OWORD *)(a9 + 264) = v27;
  *(_OWORD *)(a9 + 280) = v28;
  *(_OWORD *)(a9 + 296) = v29;
  *(_OWORD *)(a9 + 312) = v30;
  *(_OWORD *)(a9 + 328) = v31;
  *(_OWORD *)(a9 + 392) = v34;
  v35 = *(_OWORD *)(a11 + 16);
  v36 = *(_OWORD *)(a11 + 32);
  *(_OWORD *)(a9 + 472) = *(_OWORD *)a11;
  *(_OWORD *)(a9 + 488) = v35;
  *(_OWORD *)(a9 + 504) = v36;
  v37 = *a8;
  v38 = a8[1];
  v39 = a8[2];
  *(_BYTE *)(a9 + 464) = *a10;
  *(_BYTE *)(a9 + 520) = *(_BYTE *)(a11 + 48);
  *(_OWORD *)(a9 + 144) = v20;
  *(_OWORD *)(a9 + 160) = v21;
  *(_OWORD *)(a9 + 176) = v22;
  *(_OWORD *)(a9 + 192) = v23;
  *(_OWORD *)(a9 + 208) = v24;
  *(_OWORD *)(a9 + 232) = v25;
  *(_OWORD *)(a9 + 248) = v26;
  *(_OWORD *)(a9 + 416) = v37;
  *(_OWORD *)(a9 + 432) = v38;
  *(_OWORD *)(a9 + 448) = v39;
  v40 = a9 + *(int *)(type metadata accessor for PurchaseSuccessEvent.Model(0) + 56);
  v41 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v40, a12, v41);
}

uint64_t sub_5625C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_56294 + 4 * byte_1F61F0[a1]))(0xD00000000000001ALL, 0x800000000021F1E0);
}

uint64_t sub_56294()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_562B4(uint64_t a1)
{
  return a1 - 10;
}

uint64_t sub_56344()
{
  return 0x746144746E657665;
}

uint64_t sub_56360()
{
  return 0x6974736567677573;
}

uint64_t sub_56384()
{
  unsigned __int8 *v0;

  return sub_5625C(*v0);
}

uint64_t sub_5638C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_5A690(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_563B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56894();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_563D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_56894();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PurchaseSuccessEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  int v33;
  __int16 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v58;
  _BYTE v59[32];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int16 v65;
  char v66;

  v3 = v1;
  v5 = sub_71B4(&qword_2984F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v59[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_56894();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PurchaseSuccessEvent.Model.CodingKeys, &type metadata for PurchaseSuccessEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 6);
  v13 = *((_BYTE *)v3 + 56);
  v14 = v3[1];
  v58 = *v3;
  *(_OWORD *)v59 = v14;
  *(_OWORD *)&v59[16] = v3[2];
  *(_QWORD *)&v60 = v12;
  BYTE8(v60) = v13;
  v66 = 0;
  v15 = sub_568D8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for AltContentTypeExposureData, v15);
  if (!v2)
  {
    v16 = *((_QWORD *)v3 + 9);
    v17 = *((_BYTE *)v3 + 80);
    v18 = *(__int128 *)((char *)v3 + 88);
    v19 = *((_QWORD *)v3 + 13);
    v20 = *((_QWORD *)v3 + 14);
    v21 = *((_WORD *)v3 + 60);
    v22 = *((_DWORD *)v3 + 31);
    v23 = *((_BYTE *)v3 + 128);
    v24 = *((_DWORD *)v3 + 33);
    v25 = *((_BYTE *)v3 + 136);
    v26 = *((unsigned __int8 *)v3 + 141);
    *(_QWORD *)&v58 = *((_QWORD *)v3 + 8);
    *((_QWORD *)&v58 + 1) = v16;
    v59[0] = v17;
    *(_OWORD *)&v59[8] = v18;
    *(_QWORD *)&v59[24] = v19;
    *(_QWORD *)&v60 = v20;
    WORD4(v60) = v21;
    HIDWORD(v60) = v22;
    LOBYTE(v61) = v23;
    DWORD1(v61) = v24;
    BYTE8(v61) = v25;
    *(_DWORD *)((char *)&v61 + 9) = *(_DWORD *)((char *)v3 + 137);
    BYTE13(v61) = v26;
    v62 = v3[9];
    v66 = 1;
    v27 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v58, &v66, v5, &type metadata for ContentData, v27);
    v28 = *((_DWORD *)v3 + 56);
    v29 = *((_BYTE *)v3 + 228);
    v30 = v3[11];
    v58 = v3[10];
    *(_OWORD *)v59 = v30;
    v31 = v3[13];
    *(_OWORD *)&v59[16] = v3[12];
    v60 = v31;
    BYTE4(v61) = v29;
    LODWORD(v61) = v28;
    v66 = 2;
    v32 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for ContentStoreData, v32);
    v33 = *((_DWORD *)v3 + 86);
    v34 = *((_WORD *)v3 + 174);
    v35 = *(__int128 *)((char *)v3 + 248);
    v58 = *(__int128 *)((char *)v3 + 232);
    *(_OWORD *)v59 = v35;
    v36 = *(__int128 *)((char *)v3 + 280);
    *(_OWORD *)&v59[16] = *(__int128 *)((char *)v3 + 264);
    v60 = v36;
    v37 = *(__int128 *)((char *)v3 + 312);
    v61 = *(__int128 *)((char *)v3 + 296);
    v62 = v37;
    v63 = *(__int128 *)((char *)v3 + 328);
    v65 = v34;
    v64 = v33;
    v66 = 3;
    v38 = sub_56960();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for ContentExposureData, v38);
    LOWORD(v58) = *((_WORD *)v3 + 175);
    v66 = 4;
    v39 = sub_569A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for PrevAltContentExposureData, v39);
    v40 = *((_QWORD *)v3 + 45);
    v41 = *((_BYTE *)v3 + 368);
    v42 = *((_BYTE *)v3 + 369);
    v43 = *((_QWORD *)v3 + 47);
    v44 = *((_QWORD *)v3 + 48);
    *(_QWORD *)&v58 = *((_QWORD *)v3 + 44);
    *((_QWORD *)&v58 + 1) = v40;
    v59[0] = v41;
    v59[1] = v42;
    *(_QWORD *)&v59[8] = v43;
    *(_QWORD *)&v59[16] = v44;
    v66 = 5;
    v45 = sub_34104();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v58, &v66, v5, &type metadata for PurchaseData, v45);
    v46 = *((_QWORD *)v3 + 51);
    v58 = *(__int128 *)((char *)v3 + 392);
    *(_QWORD *)v59 = v46;
    v66 = 6;
    v47 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for UpSellData, v47);
    v48 = v3[27];
    v58 = v3[26];
    *(_OWORD *)v59 = v48;
    *(_OWORD *)&v59[16] = v3[28];
    v66 = 7;
    v49 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for SeriesData, v49);
    LOBYTE(v58) = *((_BYTE *)v3 + 464);
    v66 = 8;
    v50 = sub_2E76C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for SuggestionData, v50);
    v51 = *((_BYTE *)v3 + 520);
    v52 = *(__int128 *)((char *)v3 + 488);
    v58 = *(__int128 *)((char *)v3 + 472);
    *(_OWORD *)v59 = v52;
    *(_OWORD *)&v59[16] = *(__int128 *)((char *)v3 + 504);
    LOBYTE(v60) = v51;
    v66 = 9;
    v53 = sub_569E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v66, v5, &type metadata for UppParentContentData, v53);
    v54 = (uint64_t)v3 + *(int *)(type metadata accessor for PurchaseSuccessEvent.Model(0) + 56);
    LOBYTE(v58) = 10;
    v55 = type metadata accessor for EventData(0);
    v56 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v54, &v58, v5, v55, v56);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_56894()
{
  unint64_t result;

  result = qword_2984F8;
  if (!qword_2984F8)
  {
    result = swift_getWitnessTable(&unk_1F64F4, &type metadata for PurchaseSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2984F8);
  }
  return result;
}

unint64_t sub_568D8()
{
  unint64_t result;

  result = qword_298500;
  if (!qword_298500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AltContentTypeExposureData, &type metadata for AltContentTypeExposureData);
    atomic_store(result, (unint64_t *)&qword_298500);
  }
  return result;
}

unint64_t sub_5691C()
{
  unint64_t result;

  result = qword_298508;
  if (!qword_298508)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentStoreData, &type metadata for ContentStoreData);
    atomic_store(result, (unint64_t *)&qword_298508);
  }
  return result;
}

unint64_t sub_56960()
{
  unint64_t result;

  result = qword_298510;
  if (!qword_298510)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentExposureData, &type metadata for ContentExposureData);
    atomic_store(result, (unint64_t *)&qword_298510);
  }
  return result;
}

unint64_t sub_569A4()
{
  unint64_t result;

  result = qword_298518;
  if (!qword_298518)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PrevAltContentExposureData, &type metadata for PrevAltContentExposureData);
    atomic_store(result, (unint64_t *)&qword_298518);
  }
  return result;
}

unint64_t sub_569E8()
{
  unint64_t result;

  result = qword_298520;
  if (!qword_298520)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UppParentContentData, &type metadata for UppParentContentData);
    atomic_store(result, (unint64_t *)&qword_298520);
  }
  return result;
}

uint64_t PurchaseSuccessEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  int v45;
  char v46;
  char v47;
  unint64_t v48;
  int v49;
  char v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  int v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  char v74;
  __int128 v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _OWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  __int128 v89;
  _BYTE v90[32];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  __int16 v96;
  int v97;
  char v98;

  v81 = a2;
  v83 = type metadata accessor for EventData(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v5 = (uint64_t *)((char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85 = sub_71B4(&qword_298528);
  v6 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PurchaseSuccessEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v11 + 264;
  v87 = a1;
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_56894();
  v84 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PurchaseSuccessEvent.Model.CodingKeys, &type metadata for PurchaseSuccessEvent.Model.CodingKeys, v14, v12, v13);
  if (v2)
  {
    v88 = v2;
    v20 = 0;
    result = sub_7DAC(v87);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v80 = v5;
    v15 = v6;
    v16 = v82;
    v17 = v83;
    v98 = 0;
    v18 = sub_573A0();
    v19 = v85;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for AltContentTypeExposureData, &v98, v85, &type metadata for AltContentTypeExposureData, v18);
    v33 = v91;
    v34 = BYTE8(v91);
    v35 = *(_OWORD *)v90;
    *(_OWORD *)v11 = v89;
    *((_OWORD *)v11 + 1) = v35;
    *((_OWORD *)v11 + 2) = *(_OWORD *)&v90[16];
    *((_QWORD *)v11 + 6) = v33;
    v11[56] = v34;
    v98 = 1;
    v36 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v89, &type metadata for ContentData, &v98, v19, &type metadata for ContentData, v36);
    v37 = *((_QWORD *)&v89 + 1);
    v38 = v90[0];
    v39 = *(_OWORD *)&v90[8];
    v40 = *(_QWORD *)&v90[24];
    v41 = v91;
    v42 = WORD4(v91);
    v43 = HIDWORD(v91);
    v44 = v92;
    v45 = DWORD1(v92);
    v46 = BYTE8(v92);
    v47 = BYTE13(v92);
    *((_QWORD *)v11 + 8) = v89;
    *((_QWORD *)v11 + 9) = v37;
    v11[80] = v38;
    *(_OWORD *)(v11 + 88) = v39;
    *((_QWORD *)v11 + 13) = v40;
    *((_QWORD *)v11 + 14) = v41;
    *((_WORD *)v11 + 60) = v42;
    *((_DWORD *)v11 + 31) = v43;
    v11[128] = v44;
    *((_DWORD *)v11 + 33) = v45;
    v11[136] = v46;
    *(_DWORD *)(v11 + 137) = *(_DWORD *)((char *)&v92 + 9);
    v11[141] = v47;
    *((_OWORD *)v11 + 9) = v93;
    v98 = 2;
    v48 = sub_573E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for ContentStoreData, &v98, v19, &type metadata for ContentStoreData, v48);
    v49 = v92;
    v50 = BYTE4(v92);
    v51 = *(_OWORD *)v90;
    *((_OWORD *)v11 + 10) = v89;
    *((_OWORD *)v11 + 11) = v51;
    v52 = v91;
    *((_OWORD *)v11 + 12) = *(_OWORD *)&v90[16];
    *((_OWORD *)v11 + 13) = v52;
    v11[228] = v50;
    *((_DWORD *)v11 + 56) = v49;
    v98 = 3;
    v53 = sub_57428();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for ContentExposureData, &v98, v19, &type metadata for ContentExposureData, v53);
    v54 = v95;
    v55 = v96;
    v56 = *(_OWORD *)v90;
    *(_OWORD *)(v11 + 232) = v89;
    *(_OWORD *)(v11 + 248) = v56;
    v57 = v91;
    v58 = v86;
    *v86 = *(_OWORD *)&v90[16];
    v58[1] = v57;
    v59 = v93;
    v58[2] = v92;
    v58[3] = v59;
    v58[4] = v94;
    *((_WORD *)v58 + 42) = v55;
    *((_DWORD *)v58 + 20) = v54;
    v98 = 4;
    v60 = sub_5746C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for PrevAltContentExposureData, &v98, v19, &type metadata for PrevAltContentExposureData, v60);
    *((_WORD *)v11 + 175) = v89;
    v98 = 5;
    v61 = sub_340BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v89, &type metadata for PurchaseData, &v98, v19, &type metadata for PurchaseData, v61);
    v62 = *((_QWORD *)&v89 + 1);
    v63 = v90[0];
    v64 = v90[1];
    v65 = *(_QWORD *)&v90[8];
    v66 = *(_QWORD *)&v90[16];
    *((_QWORD *)v11 + 44) = v89;
    *((_QWORD *)v11 + 45) = v62;
    v11[368] = v63;
    v11[369] = v64;
    *((_QWORD *)v11 + 47) = v65;
    *((_QWORD *)v11 + 48) = v66;
    v98 = 6;
    v67 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for UpSellData, &v98, v19, &type metadata for UpSellData, v67);
    v68 = *(_QWORD *)v90;
    v86[8] = v89;
    *((_QWORD *)v11 + 51) = v68;
    v98 = 7;
    v69 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for SeriesData, &v98, v19, &type metadata for SeriesData, v69);
    v97 = 1;
    v70 = *(_OWORD *)v90;
    *((_OWORD *)v11 + 26) = v89;
    *((_OWORD *)v11 + 27) = v70;
    *((_OWORD *)v11 + 28) = *(_OWORD *)&v90[16];
    v98 = 8;
    v71 = sub_2F2F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for SuggestionData, &v98, v19, &type metadata for SuggestionData, v71);
    v11[464] = v89;
    v98 = 9;
    v73 = sub_574B0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v89, &type metadata for UppParentContentData, &v98, v19, &type metadata for UppParentContentData, v73);
    v88 = 0;
    v74 = v91;
    v75 = *(_OWORD *)v90;
    v76 = v86;
    v86[13] = v89;
    v76[14] = v75;
    v76[15] = *(_OWORD *)&v90[16];
    v11[520] = v74;
    LOBYTE(v89) = 10;
    v77 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    v78 = v88;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v80, v17, &v89, v85, v17, v77);
    v88 = v78;
    if (!v78)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v84, v85);
      (*(void (**)(char *, _QWORD *, uint64_t))(v16 + 32))(&v11[*(int *)(v9 + 56)], v80, v17);
      sub_574F4((uint64_t)v11, v81);
      sub_7DAC(v87);
      return sub_57538((uint64_t)v11);
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v84, v85);
    v72 = v97;
    sub_7DAC(v87);
    v20 = 1;
    sub_57364(*(_QWORD *)v11, *((_QWORD *)v11 + 1), *((_QWORD *)v11 + 2), *((_QWORD *)v11 + 3), *((_QWORD *)v11 + 4), *((_QWORD *)v11 + 5), *((_QWORD *)v11 + 6));
    LODWORD(v87) = 1;
    v27 = *((_QWORD *)v11 + 9);
    v28 = v72;
    v29 = *((_QWORD *)v11 + 12);
    v30 = *((_QWORD *)v11 + 19);
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 14));
    v31 = v29;
    v24 = v28;
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v27);
    v32 = v30;
    v23 = 1;
    v25 = 1;
    v22 = 1;
    result = swift_bridgeObjectRelease(v32);
    if ((v87 & 1) != 0)
    {
      sub_57314(*((_QWORD *)v11 + 20), *((_QWORD *)v11 + 21), *((_QWORD *)v11 + 22), *((_QWORD *)v11 + 23), *((_QWORD *)v11 + 24), *((_QWORD *)v11 + 25), *((_QWORD *)v11 + 26), *((_QWORD *)v11 + 27));
      goto LABEL_12;
    }
  }
  if (!v22)
  {
    if (!v20)
      goto LABEL_13;
LABEL_6:
    v26 = *((_QWORD *)v11 + 45);
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 48));
    result = swift_bridgeObjectRelease(v26);
    if ((v25 & 1) != 0)
      goto LABEL_14;
LABEL_7:
    if (!v24)
      goto LABEL_15;
    goto LABEL_8;
  }
LABEL_12:
  result = sub_572A4(*((_QWORD *)v11 + 29), *((_QWORD *)v11 + 30), *((_QWORD *)v11 + 31), *((_QWORD *)v11 + 32), *((_QWORD *)v11 + 33), *((_QWORD *)v11 + 34), *((_QWORD *)v11 + 35), *((_QWORD *)v11 + 36), *((_QWORD *)v11 + 37), *((_QWORD *)v11 + 38), *((_QWORD *)v11 + 39), *((_QWORD *)v11 + 40), *((_QWORD *)v11 + 41), *((_QWORD *)v11 + 42));
  if ((v20 & 1) != 0)
    goto LABEL_6;
LABEL_13:
  if (!v25)
    goto LABEL_7;
LABEL_14:
  result = swift_bridgeObjectRelease(*((_QWORD *)v11 + 51));
  if ((v24 & 1) == 0)
  {
LABEL_15:
    if (!v23)
      return result;
    return sub_57268(*((_QWORD *)v11 + 59), *((_QWORD *)v11 + 60), *((_QWORD *)v11 + 61), *((_QWORD *)v11 + 62), *((_QWORD *)v11 + 63), *((_QWORD *)v11 + 64));
  }
LABEL_8:
  result = sub_17788(*((_QWORD *)v11 + 52), *((_QWORD *)v11 + 53), *((_QWORD *)v11 + 54), *((_QWORD *)v11 + 55), *((_QWORD *)v11 + 56), *((_QWORD *)v11 + 57));
  if ((v23 & 1) == 0)
    return result;
  return sub_57268(*((_QWORD *)v11 + 59), *((_QWORD *)v11 + 60), *((_QWORD *)v11 + 61), *((_QWORD *)v11 + 62), *((_QWORD *)v11 + 63), *((_QWORD *)v11 + 64));
}

uint64_t sub_57268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t sub_572A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    return swift_bridgeObjectRelease(a14);
  }
  return result;
}

uint64_t sub_57314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_57364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

unint64_t sub_573A0()
{
  unint64_t result;

  result = qword_298530;
  if (!qword_298530)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AltContentTypeExposureData, &type metadata for AltContentTypeExposureData);
    atomic_store(result, (unint64_t *)&qword_298530);
  }
  return result;
}

unint64_t sub_573E4()
{
  unint64_t result;

  result = qword_298538;
  if (!qword_298538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentStoreData, &type metadata for ContentStoreData);
    atomic_store(result, (unint64_t *)&qword_298538);
  }
  return result;
}

unint64_t sub_57428()
{
  unint64_t result;

  result = qword_298540;
  if (!qword_298540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentExposureData, &type metadata for ContentExposureData);
    atomic_store(result, (unint64_t *)&qword_298540);
  }
  return result;
}

unint64_t sub_5746C()
{
  unint64_t result;

  result = qword_298548;
  if (!qword_298548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PrevAltContentExposureData, &type metadata for PrevAltContentExposureData);
    atomic_store(result, (unint64_t *)&qword_298548);
  }
  return result;
}

unint64_t sub_574B0()
{
  unint64_t result;

  result = qword_298550;
  if (!qword_298550)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UppParentContentData, &type metadata for UppParentContentData);
    atomic_store(result, (unint64_t *)&qword_298550);
  }
  return result;
}

uint64_t sub_574F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PurchaseSuccessEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_57538(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PurchaseSuccessEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_57574@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PurchaseSuccessEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_57588(_QWORD *a1)
{
  return PurchaseSuccessEvent.Model.encode(to:)(a1);
}

uint64_t sub_5759C@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955D0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298490, (uint64_t)sub_55238, a1);
}

uint64_t sub_575C0@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2955D8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2984A8, (uint64_t)sub_55278, a1);
}

uint64_t sub_575E4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v4, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v7, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v4, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v4, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
  v25 = a2 + a1[14];
  v26 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v25, v7, v26);
}

uint64_t *initializeBufferWithCopyOfBuffer for PurchaseSuccessEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v48 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v48 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v48);
  }
  else
  {
    v7 = sub_71B4(&qword_2984C0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_2984D0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_2984D8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_2984E0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_296F78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_2984E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[14];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  }
  return a1;
}

uint64_t destroy for PurchaseSuccessEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[14];
  v24 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

uint64_t initializeWithCopy for PurchaseSuccessEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  return a1;
}

uint64_t assignWithCopy for PurchaseSuccessEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  return a1;
}

uint64_t initializeWithTake for PurchaseSuccessEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t assignWithTake for PurchaseSuccessEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2984C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_2984D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_2984D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_2984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_296F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_2984E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurchaseSuccessEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5853C);
}

uint64_t sub_5853C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_71B4(&qword_2984C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_2984C8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_2984D0);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_2984D8);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_2984E0);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_296F68);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296310);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_296F78);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_2984E8);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v8 = sub_71B4(&qword_295D70);
                      v12 = *(_QWORD *)(v8 - 8);
                      v13 = a3[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PurchaseSuccessEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5872C);
}

uint64_t sub_5872C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_71B4(&qword_2984C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_2984C8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_2984D0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_2984D8);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_2984E0);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_296F68);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296310);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_296F78);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_2984E8);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v10 = sub_71B4(&qword_295D70);
                      v14 = *(_QWORD *)(v10 - 8);
                      v15 = a4[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_58918(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[11];

  sub_B9C8(319, &qword_2985C0, (uint64_t (*)(void))sub_573A0, (uint64_t (*)(void))sub_568D8, (uint64_t)&type metadata for AltContentTypeExposureData);
  if (v3 <= 0x3F)
  {
    v24[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v24[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
      if (v7 <= 0x3F)
      {
        v24[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_2985D0, (uint64_t (*)(void))sub_57428, (uint64_t (*)(void))sub_56960, (uint64_t)&type metadata for ContentExposureData);
        if (v9 <= 0x3F)
        {
          v24[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_2985D8, (uint64_t (*)(void))sub_5746C, (uint64_t (*)(void))sub_569A4, (uint64_t)&type metadata for PrevAltContentExposureData);
          if (v11 <= 0x3F)
          {
            v24[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, &qword_2985E0, (uint64_t (*)(void))sub_340BC, (uint64_t (*)(void))sub_34104, (uint64_t)&type metadata for PurchaseData);
            if (v13 <= 0x3F)
            {
              v24[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
              if (v15 <= 0x3F)
              {
                v24[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                if (v17 <= 0x3F)
                {
                  v24[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_B9C8(319, (unint64_t *)&unk_297060, (uint64_t (*)(void))sub_2F2F4, (uint64_t (*)(void))sub_2E76C, (uint64_t)&type metadata for SuggestionData);
                  if (v19 <= 0x3F)
                  {
                    v24[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_B9C8(319, (unint64_t *)&unk_2985E8, (uint64_t (*)(void))sub_574B0, (uint64_t (*)(void))sub_569E8, (uint64_t)&type metadata for UppParentContentData);
                    if (v21 <= 0x3F)
                    {
                      v24[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_8734(319);
                      if (v23 <= 0x3F)
                      {
                        v24[10] = *(_QWORD *)(v22 - 8) + 64;
                        swift_initStructMetadata(a1, 256, 11, v24, a1 + 16);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PurchaseSuccessEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v10);
    return a1;
  }
  v7 = a2[1];
  if (v7)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  v12 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v13 = a2[12];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v13;
  v14 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v14;
  *(_WORD *)(a1 + 120) = *((_WORD *)a2 + 60);
  v15 = *((_DWORD *)a2 + 31);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_DWORD *)(a1 + 124) = v15;
  *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)((char *)a2 + 137);
  *(_BYTE *)(a1 + 141) = *((_BYTE *)a2 + 141);
  v16 = a2[19];
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = v16;
  v17 = a2[25];
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  if (!v17)
  {
    v27 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 208) = v27;
    *(_QWORD *)(a1 + 221) = *(uint64_t *)((char *)a2 + 221);
    v28 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v28;
    v21 = a2[30];
    if (v21)
      goto LABEL_8;
LABEL_10:
    v29 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v29;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_QWORD *)(a1 + 342) = *(uint64_t *)((char *)a2 + 342);
    v30 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v30;
    v31 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 280) = v31;
    goto LABEL_11;
  }
  v18 = a2[21];
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_QWORD *)(a1 + 168) = v18;
  v19 = a2[23];
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_QWORD *)(a1 + 184) = v19;
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = v17;
  v20 = a2[27];
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = v20;
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  v21 = a2[30];
  if (!v21)
    goto LABEL_10;
LABEL_8:
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = v21;
  v22 = a2[32];
  *(_QWORD *)(a1 + 248) = a2[31];
  *(_QWORD *)(a1 + 256) = v22;
  v23 = a2[34];
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = v23;
  v24 = a2[36];
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_QWORD *)(a1 + 288) = v24;
  v25 = a2[38];
  *(_QWORD *)(a1 + 296) = a2[37];
  *(_QWORD *)(a1 + 304) = v25;
  *(_DWORD *)(a1 + 312) = *((_DWORD *)a2 + 78);
  *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 324);
  v26 = a2[42];
  *(_QWORD *)(a1 + 328) = a2[41];
  *(_QWORD *)(a1 + 336) = v26;
  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 + 86);
  *(_WORD *)(a1 + 348) = *((_WORD *)a2 + 174);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
LABEL_11:
  *(_WORD *)(a1 + 350) = *((_WORD *)a2 + 175);
  v32 = a2[45];
  *(_QWORD *)(a1 + 352) = a2[44];
  *(_QWORD *)(a1 + 360) = v32;
  *(_WORD *)(a1 + 368) = *((_WORD *)a2 + 184);
  v33 = a2[48];
  *(_QWORD *)(a1 + 376) = a2[47];
  *(_QWORD *)(a1 + 384) = v33;
  *(_WORD *)(a1 + 392) = *((_WORD *)a2 + 196);
  v34 = a2[51];
  *(_QWORD *)(a1 + 400) = a2[50];
  *(_QWORD *)(a1 + 408) = v34;
  v35 = a2[57];
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  if (v35 == 1)
  {
    v36 = *((_OWORD *)a2 + 27);
    *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
    *(_OWORD *)(a1 + 432) = v36;
    *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
  }
  else
  {
    *(_QWORD *)(a1 + 416) = a2[52];
    *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
    *(_QWORD *)(a1 + 432) = a2[54];
    *(_BYTE *)(a1 + 440) = *((_BYTE *)a2 + 440);
    *(_WORD *)(a1 + 441) = *(_WORD *)((char *)a2 + 441);
    *(_QWORD *)(a1 + 448) = a2[56];
    *(_QWORD *)(a1 + 456) = v35;
    swift_bridgeObjectRetain(v35);
  }
  *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
  v37 = a2[60];
  if (v37)
  {
    *(_QWORD *)(a1 + 472) = a2[59];
    *(_QWORD *)(a1 + 480) = v37;
    v38 = a2[62];
    *(_QWORD *)(a1 + 488) = a2[61];
    *(_QWORD *)(a1 + 496) = v38;
    v39 = a2[64];
    *(_QWORD *)(a1 + 504) = a2[63];
    *(_QWORD *)(a1 + 512) = v39;
    *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
  }
  else
  {
    v40 = *(_OWORD *)(a2 + 61);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 59);
    *(_OWORD *)(a1 + 488) = v40;
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
    *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
  }
  v41 = *(int *)(a3 + 56);
  v42 = a1 + v41;
  v43 = (uint64_t)a2 + v41;
  v44 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
  return a1;
}

uint64_t destroy for PurchaseSuccessEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v4 = a1[1];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[6]);
  }
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[19]);
  v5 = a1[25];
  if (v5)
  {
    swift_bridgeObjectRelease(a1[21]);
    v6 = a1[23];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[27]);
  }
  v7 = a1[30];
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(a1[32]);
    swift_bridgeObjectRelease(a1[34]);
    swift_bridgeObjectRelease(a1[36]);
    swift_bridgeObjectRelease(a1[38]);
    swift_bridgeObjectRelease(a1[42]);
  }
  swift_bridgeObjectRelease(a1[45]);
  swift_bridgeObjectRelease(a1[48]);
  swift_bridgeObjectRelease(a1[51]);
  v8 = a1[57];
  if (v8 != 1)
    swift_bridgeObjectRelease(v8);
  v9 = a1[60];
  if (v9)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a1[62]);
    swift_bridgeObjectRelease(a1[64]);
  }
  v10 = (char *)a1 + *(int *)(a2 + 56);
  v11 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for PurchaseSuccessEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  v13 = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = v13;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)(a2 + 137);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  v15 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v16;
    v17 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v17;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v15;
    v18 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v18;
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    v19 = *(_QWORD *)(a2 + 240);
    if (v19)
    {
LABEL_6:
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v19;
      v20 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v20;
      v21 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v21;
      v22 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v22;
      v23 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v23;
      *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
      *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
      v24 = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v24;
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
      *(_WORD *)(a1 + 348) = *(_WORD *)(a2 + 348);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      goto LABEL_9;
    }
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v25;
    *(_QWORD *)(a1 + 221) = *(_QWORD *)(a2 + 221);
    v26 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
    v19 = *(_QWORD *)(a2 + 240);
    if (v19)
      goto LABEL_6;
  }
  v27 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v27;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 342) = *(_QWORD *)(a2 + 342);
  v28 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v28;
  v29 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v29;
LABEL_9:
  *(_WORD *)(a1 + 350) = *(_WORD *)(a2 + 350);
  v30 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v30;
  *(_WORD *)(a1 + 368) = *(_WORD *)(a2 + 368);
  v31 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v31;
  *(_WORD *)(a1 + 392) = *(_WORD *)(a2 + 392);
  v32 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v32;
  v33 = *(_QWORD *)(a2 + 456);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  if (v33 == 1)
  {
    v34 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v34;
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  }
  else
  {
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
    *(_WORD *)(a1 + 441) = *(_WORD *)(a2 + 441);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = v33;
    swift_bridgeObjectRetain(v33);
  }
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v35 = *(_QWORD *)(a2 + 480);
  if (v35)
  {
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = v35;
    v36 = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = v36;
    v37 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = v37;
    *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
  }
  else
  {
    v38 = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 488) = v38;
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  }
  v39 = *(int *)(a3 + 56);
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  return a1;
}

uint64_t assignWithCopy for PurchaseSuccessEvent.Model(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  __int128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    if (v7)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v6);
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v9 = *((_QWORD *)a2 + 4);
      v10 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      v11 = *((_QWORD *)a2 + 6);
      v12 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    }
    else
    {
      sub_59D0C((_QWORD *)a1);
      v17 = a2[1];
      v16 = a2[2];
      v18 = *a2;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = v16;
      *(_OWORD *)a1 = v18;
    }
  }
  else if (v7)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v13 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v14 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    v15 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 48) = v15;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
  }
  else
  {
    v19 = *a2;
    v20 = a2[1];
    v21 = a2[2];
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *(_OWORD *)(a1 + 16) = v20;
    *(_OWORD *)(a1 + 32) = v21;
    *(_OWORD *)a1 = v19;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v22 = *((_QWORD *)a2 + 9);
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  v24 = *((_QWORD *)a2 + 12);
  v25 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  v26 = *((_QWORD *)a2 + 14);
  v27 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_BYTE *)(a1 + 121) = *((_BYTE *)a2 + 121);
  v28 = *((_DWORD *)a2 + 31);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_DWORD *)(a1 + 124) = v28;
  v29 = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v29;
  *(_BYTE *)(a1 + 137) = *((_BYTE *)a2 + 137);
  *(_BYTE *)(a1 + 138) = *((_BYTE *)a2 + 138);
  *(_BYTE *)(a1 + 139) = *((_BYTE *)a2 + 139);
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 140);
  *(_BYTE *)(a1 + 141) = *((_BYTE *)a2 + 141);
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  v30 = *((_QWORD *)a2 + 19);
  v31 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = (_OWORD *)(a1 + 160);
  v33 = a2 + 10;
  v34 = *((_QWORD *)a2 + 25);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v34)
    {
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      v35 = *((_QWORD *)a2 + 21);
      v36 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRelease(v36);
      *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
      v37 = *((_QWORD *)a2 + 23);
      v38 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v38);
      *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
      v39 = *((_QWORD *)a2 + 25);
      v40 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v39;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRelease(v40);
      *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
      v41 = *((_QWORD *)a2 + 27);
      v42 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v41;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRelease(v42);
      v43 = *((_DWORD *)a2 + 56);
      *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
      *(_DWORD *)(a1 + 224) = v43;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 160));
      *v32 = *v33;
      v50 = a2[12];
      v49 = a2[13];
      v51 = a2[11];
      *(_QWORD *)(a1 + 221) = *(_QWORD *)((char *)a2 + 221);
      *(_OWORD *)(a1 + 192) = v50;
      *(_OWORD *)(a1 + 208) = v49;
      *(_OWORD *)(a1 + 176) = v51;
    }
  }
  else if (v34)
  {
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    v44 = *((_QWORD *)a2 + 21);
    *(_QWORD *)(a1 + 168) = v44;
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    v45 = *((_QWORD *)a2 + 23);
    *(_QWORD *)(a1 + 184) = v45;
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    v46 = *((_QWORD *)a2 + 25);
    *(_QWORD *)(a1 + 200) = v46;
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    v47 = *((_QWORD *)a2 + 27);
    *(_QWORD *)(a1 + 216) = v47;
    v48 = *((_DWORD *)a2 + 56);
    *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
    *(_DWORD *)(a1 + 224) = v48;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
  }
  else
  {
    *v32 = *v33;
    v52 = a2[11];
    v53 = a2[12];
    v54 = a2[13];
    *(_QWORD *)(a1 + 221) = *(_QWORD *)((char *)a2 + 221);
    *(_OWORD *)(a1 + 192) = v53;
    *(_OWORD *)(a1 + 208) = v54;
    *(_OWORD *)(a1 + 176) = v52;
  }
  v55 = (_OWORD *)(a1 + 232);
  v56 = (__int128 *)((char *)a2 + 232);
  v57 = *(_QWORD *)(a1 + 240);
  v58 = *((_QWORD *)a2 + 30);
  if (v57)
  {
    if (v58)
    {
      *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
      v59 = *((_QWORD *)a2 + 30);
      *(_QWORD *)(a1 + 240) = v59;
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRelease(v57);
      *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
      v60 = *((_QWORD *)a2 + 32);
      v61 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v60;
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRelease(v61);
      *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
      v62 = *((_QWORD *)a2 + 34);
      v63 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v62;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRelease(v63);
      *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
      v64 = *((_QWORD *)a2 + 36);
      v65 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v64;
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRelease(v65);
      *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
      v66 = *((_QWORD *)a2 + 38);
      v67 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 304) = v66;
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRelease(v67);
      v68 = *((_DWORD *)a2 + 78);
      *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
      *(_DWORD *)(a1 + 312) = v68;
      v69 = *((_DWORD *)a2 + 80);
      *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 324);
      *(_DWORD *)(a1 + 320) = v69;
      *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
      v70 = *((_QWORD *)a2 + 42);
      v71 = *(_QWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 336) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease(v71);
      v72 = *((_DWORD *)a2 + 86);
      *(_BYTE *)(a1 + 348) = *((_BYTE *)a2 + 348);
      *(_DWORD *)(a1 + 344) = v72;
      *(_BYTE *)(a1 + 349) = *((_BYTE *)a2 + 349);
    }
    else
    {
      sub_59D74((_QWORD *)(a1 + 232));
      v82 = *(__int128 *)((char *)a2 + 280);
      v84 = *v56;
      v83 = *(__int128 *)((char *)a2 + 248);
      *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
      *(_OWORD *)(a1 + 280) = v82;
      *v55 = v84;
      *(_OWORD *)(a1 + 248) = v83;
      v86 = *(__int128 *)((char *)a2 + 312);
      v85 = *(__int128 *)((char *)a2 + 328);
      v87 = *(__int128 *)((char *)a2 + 296);
      *(_QWORD *)(a1 + 342) = *(_QWORD *)((char *)a2 + 342);
      *(_OWORD *)(a1 + 312) = v86;
      *(_OWORD *)(a1 + 328) = v85;
      *(_OWORD *)(a1 + 296) = v87;
    }
  }
  else if (v58)
  {
    *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
    v73 = *((_QWORD *)a2 + 30);
    *(_QWORD *)(a1 + 240) = v73;
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
    v74 = *((_QWORD *)a2 + 32);
    *(_QWORD *)(a1 + 256) = v74;
    *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
    v75 = *((_QWORD *)a2 + 34);
    *(_QWORD *)(a1 + 272) = v75;
    *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
    v76 = *((_QWORD *)a2 + 36);
    *(_QWORD *)(a1 + 288) = v76;
    *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
    v77 = *((_QWORD *)a2 + 38);
    *(_QWORD *)(a1 + 304) = v77;
    v78 = *((_DWORD *)a2 + 78);
    *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
    *(_DWORD *)(a1 + 312) = v78;
    v79 = *((_DWORD *)a2 + 80);
    *(_BYTE *)(a1 + 324) = *((_BYTE *)a2 + 324);
    *(_DWORD *)(a1 + 320) = v79;
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
    v80 = *((_QWORD *)a2 + 42);
    *(_QWORD *)(a1 + 336) = v80;
    v81 = *((_DWORD *)a2 + 86);
    *(_BYTE *)(a1 + 348) = *((_BYTE *)a2 + 348);
    *(_DWORD *)(a1 + 344) = v81;
    *(_BYTE *)(a1 + 349) = *((_BYTE *)a2 + 349);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v80);
  }
  else
  {
    v88 = *v56;
    v89 = *(__int128 *)((char *)a2 + 248);
    v90 = *(__int128 *)((char *)a2 + 280);
    *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
    *(_OWORD *)(a1 + 280) = v90;
    *v55 = v88;
    *(_OWORD *)(a1 + 248) = v89;
    v91 = *(__int128 *)((char *)a2 + 296);
    v92 = *(__int128 *)((char *)a2 + 312);
    v93 = *(__int128 *)((char *)a2 + 328);
    *(_QWORD *)(a1 + 342) = *(_QWORD *)((char *)a2 + 342);
    *(_OWORD *)(a1 + 312) = v92;
    *(_OWORD *)(a1 + 328) = v93;
    *(_OWORD *)(a1 + 296) = v91;
  }
  *(_WORD *)(a1 + 350) = *((_WORD *)a2 + 175);
  *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
  v94 = *((_QWORD *)a2 + 45);
  v95 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95);
  *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
  *(_BYTE *)(a1 + 369) = *((_BYTE *)a2 + 369);
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  v96 = *((_QWORD *)a2 + 48);
  v97 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  *(_BYTE *)(a1 + 392) = *((_BYTE *)a2 + 392);
  *(_BYTE *)(a1 + 393) = *((_BYTE *)a2 + 393);
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
  v98 = *((_QWORD *)a2 + 51);
  v99 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = (__int128 *)(a1 + 416);
  v101 = a2 + 26;
  v102 = *(_QWORD *)(a1 + 456);
  v103 = *((_QWORD *)a2 + 57);
  if (v102 == 1)
  {
    if (v103 == 1)
    {
      v104 = *v101;
      v105 = a2[28];
      *(_OWORD *)(a1 + 432) = a2[27];
      *(_OWORD *)(a1 + 448) = v105;
      *v100 = v104;
    }
    else
    {
      *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
      *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
      *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
      *(_BYTE *)(a1 + 440) = *((_BYTE *)a2 + 440);
      *(_BYTE *)(a1 + 441) = *((_BYTE *)a2 + 441);
      *(_BYTE *)(a1 + 442) = *((_BYTE *)a2 + 442);
      *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
      v108 = *((_QWORD *)a2 + 57);
      *(_QWORD *)(a1 + 456) = v108;
      swift_bridgeObjectRetain(v108);
    }
  }
  else if (v103 == 1)
  {
    sub_19008(a1 + 416);
    v107 = a2[27];
    v106 = a2[28];
    *v100 = *v101;
    *(_OWORD *)(a1 + 432) = v107;
    *(_OWORD *)(a1 + 448) = v106;
  }
  else
  {
    *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
    *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
    *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
    *(_BYTE *)(a1 + 440) = *((_BYTE *)a2 + 440);
    *(_BYTE *)(a1 + 441) = *((_BYTE *)a2 + 441);
    *(_BYTE *)(a1 + 442) = *((_BYTE *)a2 + 442);
    *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
    v109 = *((_QWORD *)a2 + 57);
    *(_QWORD *)(a1 + 456) = v109;
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRelease(v102);
  }
  *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
  v110 = (_OWORD *)(a1 + 472);
  v111 = (__int128 *)((char *)a2 + 472);
  v112 = *(_QWORD *)(a1 + 480);
  v113 = *((_QWORD *)a2 + 60);
  if (v112)
  {
    if (v113)
    {
      *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
      v114 = *((_QWORD *)a2 + 60);
      *(_QWORD *)(a1 + 480) = v114;
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRelease(v112);
      *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
      v115 = *((_QWORD *)a2 + 62);
      v116 = *(_QWORD *)(a1 + 496);
      *(_QWORD *)(a1 + 496) = v115;
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRelease(v116);
      *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
      v117 = *((_QWORD *)a2 + 64);
      v118 = *(_QWORD *)(a1 + 512);
      *(_QWORD *)(a1 + 512) = v117;
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRelease(v118);
      *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
    }
    else
    {
      sub_59DA8((_QWORD *)(a1 + 472));
      v123 = *(__int128 *)((char *)a2 + 488);
      v122 = *(__int128 *)((char *)a2 + 504);
      v124 = *v111;
      *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
      *(_OWORD *)(a1 + 488) = v123;
      *(_OWORD *)(a1 + 504) = v122;
      *v110 = v124;
    }
  }
  else if (v113)
  {
    *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
    v119 = *((_QWORD *)a2 + 60);
    *(_QWORD *)(a1 + 480) = v119;
    *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
    v120 = *((_QWORD *)a2 + 62);
    *(_QWORD *)(a1 + 496) = v120;
    *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
    v121 = *((_QWORD *)a2 + 64);
    *(_QWORD *)(a1 + 512) = v121;
    *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v121);
  }
  else
  {
    v125 = *v111;
    v126 = *(__int128 *)((char *)a2 + 488);
    v127 = *(__int128 *)((char *)a2 + 504);
    *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
    *(_OWORD *)(a1 + 488) = v126;
    *(_OWORD *)(a1 + 504) = v127;
    *v110 = v125;
  }
  v128 = *(int *)(a3 + 56);
  v129 = a1 + v128;
  v130 = (uint64_t)a2 + v128;
  v131 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 24))(v129, v130, v131);
  return a1;
}

_QWORD *sub_59D0C(_QWORD *a1)
{
  destroy for AltContentTypeExposureData(a1);
  return a1;
}

_QWORD *sub_59D40(_QWORD *a1)
{
  destroy for ExposureData(a1);
  return a1;
}

_QWORD *sub_59D74(_QWORD *a1)
{
  destroy for ContentExposureData(a1);
  return a1;
}

_QWORD *sub_59DA8(_QWORD *a1)
{
  destroy for UppParentContentData(a1);
  return a1;
}

uint64_t initializeWithTake for PurchaseSuccessEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_QWORD *)(a1 + 221) = *(_QWORD *)(a2 + 221);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  v10 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v10;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 342) = *(_QWORD *)(a2 + 342);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v11;
  *(_WORD *)(a1 + 350) = *(_WORD *)(a2 + 350);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v12 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v12;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  v13 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v13;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v14 = *(_OWORD *)(a2 + 472);
  v15 = *(_OWORD *)(a2 + 488);
  v16 = *(_OWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  *(_OWORD *)(a1 + 488) = v15;
  *(_OWORD *)(a1 + 504) = v16;
  v17 = *(int *)(a3 + 56);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + 472) = v14;
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for PurchaseSuccessEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      swift_bridgeObjectRelease(v6);
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      v8 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v8;
      swift_bridgeObjectRelease(v9);
      v10 = *(_QWORD *)(a2 + 48);
      v11 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v10;
      swift_bridgeObjectRelease(v11);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      goto LABEL_6;
    }
    sub_59D0C((_QWORD *)a1);
  }
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
LABEL_6:
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRelease(v18);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 137) = *(_DWORD *)(a2 + 137);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  v19 = *(_QWORD *)(a2 + 152);
  v20 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v19;
  swift_bridgeObjectRelease(v20);
  if (*(_QWORD *)(a1 + 200))
  {
    if (*(_QWORD *)(a2 + 200))
    {
      v21 = *(_QWORD *)(a2 + 168);
      v22 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v21;
      swift_bridgeObjectRelease(v22);
      v23 = *(_QWORD *)(a2 + 184);
      v24 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = v23;
      swift_bridgeObjectRelease(v24);
      v25 = *(_QWORD *)(a2 + 200);
      v26 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v25;
      swift_bridgeObjectRelease(v26);
      v27 = *(_QWORD *)(a2 + 216);
      v28 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v27;
      swift_bridgeObjectRelease(v28);
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
      goto LABEL_11;
    }
    sub_59D40((_QWORD *)(a1 + 160));
  }
  v29 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v29;
  *(_QWORD *)(a1 + 221) = *(_QWORD *)(a2 + 221);
  v30 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v30;
LABEL_11:
  v31 = *(_QWORD *)(a1 + 240);
  if (v31)
  {
    v32 = *(_QWORD *)(a2 + 240);
    if (v32)
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v32;
      swift_bridgeObjectRelease(v31);
      v33 = *(_QWORD *)(a2 + 256);
      v34 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v33;
      swift_bridgeObjectRelease(v34);
      v35 = *(_QWORD *)(a2 + 272);
      v36 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v35;
      swift_bridgeObjectRelease(v36);
      v37 = *(_QWORD *)(a2 + 288);
      v38 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v37;
      swift_bridgeObjectRelease(v38);
      v39 = *(_QWORD *)(a2 + 304);
      v40 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v39;
      swift_bridgeObjectRelease(v40);
      *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
      *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
      v41 = *(_QWORD *)(a2 + 336);
      v42 = *(_QWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v41;
      swift_bridgeObjectRelease(v42);
      *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
      *(_WORD *)(a1 + 348) = *(_WORD *)(a2 + 348);
      goto LABEL_16;
    }
    sub_59D74((_QWORD *)(a1 + 232));
  }
  v43 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v43;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 342) = *(_QWORD *)(a2 + 342);
  v44 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v44;
  v45 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v45;
LABEL_16:
  *(_WORD *)(a1 + 350) = *(_WORD *)(a2 + 350);
  v46 = *(_QWORD *)(a2 + 360);
  v47 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v46;
  swift_bridgeObjectRelease(v47);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_BYTE *)(a1 + 369) = *(_BYTE *)(a2 + 369);
  v48 = *(_QWORD *)(a2 + 384);
  v49 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v48;
  swift_bridgeObjectRelease(v49);
  *(_WORD *)(a1 + 392) = *(_WORD *)(a2 + 392);
  v50 = *(_QWORD *)(a2 + 408);
  v51 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v50;
  swift_bridgeObjectRelease(v51);
  v52 = *(_QWORD *)(a1 + 456);
  if (v52 == 1)
  {
LABEL_19:
    v54 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v54;
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    goto LABEL_21;
  }
  v53 = *(_QWORD *)(a2 + 456);
  if (v53 == 1)
  {
    sub_19008(a1 + 416);
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_WORD *)(a1 + 441) = *(_WORD *)(a2 + 441);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = v53;
  swift_bridgeObjectRelease(v52);
LABEL_21:
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v55 = *(_QWORD *)(a1 + 480);
  if (!v55)
  {
LABEL_25:
    v61 = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 488) = v61;
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
    goto LABEL_26;
  }
  v56 = *(_QWORD *)(a2 + 480);
  if (!v56)
  {
    sub_59DA8((_QWORD *)(a1 + 472));
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v56;
  swift_bridgeObjectRelease(v55);
  v57 = *(_QWORD *)(a2 + 496);
  v58 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v57;
  swift_bridgeObjectRelease(v58);
  v59 = *(_QWORD *)(a2 + 512);
  v60 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v59;
  swift_bridgeObjectRelease(v60);
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
LABEL_26:
  v62 = *(int *)(a3 + 56);
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 40))(v63, v64, v65);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurchaseSuccessEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5A324);
}

uint64_t sub_5A324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 56), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PurchaseSuccessEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5A3AC);
}

uint64_t sub_5A3AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }
  return result;
}

uint64_t sub_5A420(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = "9";
  v4[1] = &unk_1F6358;
  v4[2] = &unk_1F6370;
  v4[3] = &unk_1F6388;
  v4[4] = &unk_1F63A0;
  v4[5] = &unk_1F63B8;
  v4[6] = &unk_1F63D0;
  v4[7] = &unk_1F63E8;
  v4[8] = &unk_1F6400;
  v4[9] = &unk_1F6418;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PurchaseSuccessEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_5A538 + 4 * byte_1F6200[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_5A56C + 4 * byte_1F61FB[v4]))();
}

uint64_t sub_5A56C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5A574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5A57CLL);
  return result;
}

uint64_t sub_5A588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5A590);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_5A594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5A59C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseSuccessEvent.Model.CodingKeys()
{
  return &type metadata for PurchaseSuccessEvent.Model.CodingKeys;
}

unint64_t sub_5A5BC()
{
  unint64_t result;

  result = qword_2986F8;
  if (!qword_2986F8)
  {
    result = swift_getWitnessTable(&unk_1F64CC, &type metadata for PurchaseSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2986F8);
  }
  return result;
}

unint64_t sub_5A604()
{
  unint64_t result;

  result = qword_298700;
  if (!qword_298700)
  {
    result = swift_getWitnessTable(&unk_1F643C, &type metadata for PurchaseSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298700);
  }
  return result;
}

unint64_t sub_5A64C()
{
  unint64_t result;

  result = qword_298708;
  if (!qword_298708)
  {
    result = swift_getWitnessTable(&unk_1F6464, &type metadata for PurchaseSuccessEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298708);
  }
  return result;
}

uint64_t sub_5A690(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0xD00000000000001ALL)
  {
    v4 = 0x800000000021F1E0;
    if (a2 == 0x800000000021F1E0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F1E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000000021F200)
  {
    v7 = 0x800000000021F200;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021F220)
  {
    v8 = 0x800000000021F220;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F220, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v9 = 0x800000000021F240;
    if (a2 == 0x800000000021F240)
      goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F240, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0x6573616863727570 && a2 == 0xEC00000061746144)
  {
    v10 = 0xEC00000061746144;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6573616863727570, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v11 = 0xEA00000000006174;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v12 = 0xEA00000000006174;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_46;
  }
  if (a1 == 0x6974736567677573 && a2 == 0xEE00617461446E6FLL)
  {
    v13 = 0xEE00617461446E6FLL;
LABEL_52:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974736567677573, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_52;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000000021F260)
  {
    v14 = 0x800000000021F260;
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F260, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_58;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 10;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t GenreData.contentType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t GenreData.contentType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t ClickData.outBoundURL.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t ClickData.outBoundURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t ContentExposureData.cellSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t ContentExposureData.cellSize.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72));
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

unint64_t ContentExposureData.positionInSubSection.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 80) | ((unint64_t)*(unsigned __int8 *)(v0 + 84) << 32);
}

uint64_t ContentExposureData.positionInSubSection.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 80) = result;
  *(_BYTE *)(v1 + 84) = BYTE4(result) & 1;
  return result;
}

unint64_t ContentExposureData.subSectionID.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 88) | ((unint64_t)*(unsigned __int8 *)(v0 + 92) << 32);
}

uint64_t ContentExposureData.subSectionID.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 88) = result;
  *(_BYTE *)(v1 + 92) = BYTE4(result) & 1;
  return result;
}

uint64_t (*LinkData.previousCollectionID.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureData.subSectionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t ContentExposureData.subSectionName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 104));
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*UserEventStorageData.sampleBooksDownloadedCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

unint64_t ContentExposureData.subSectionPosition.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 112) | ((unint64_t)*(unsigned __int8 *)(v0 + 116) << 32);
}

uint64_t ContentExposureData.subSectionPosition.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 112) = result;
  *(_BYTE *)(v1 + 116) = BYTE4(result) & 1;
  return result;
}

uint64_t (*UserEventStorageData.ratedBookCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ContentExposureData.hasLanguageTag.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 117);
}

uint64_t ContentExposureData.hasLanguageTag.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 117) = result;
  return result;
}

uint64_t (*ContentExposureData.hasLanguageTag.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void __swiftcall ContentExposureData.init(sectionType:sectionID:sectionName:positionInSection:cellSize:positionInSubSection:subSectionID:subSectionName:subSectionPosition:hasLanguageTag:)(BookAnalytics::ContentExposureData *__return_ptr retstr, Swift::String sectionType, Swift::String sectionID, Swift::String sectionName, Swift::String positionInSection, Swift::String cellSize, Swift::Int32_optional positionInSubSection, Swift::Int32_optional subSectionID, Swift::String_optional subSectionName, Swift::Int32_optional subSectionPosition, Swift::Bool_optional hasLanguageTag)
{
  retstr->sectionType = sectionType;
  retstr->sectionID = sectionID;
  retstr->sectionName = sectionName;
  retstr->positionInSection = positionInSection;
  retstr->cellSize = cellSize;
  retstr->positionInSubSection.value = positionInSubSection.value;
  retstr->positionInSubSection.is_nil = positionInSubSection.is_nil;
  retstr->subSectionID.value = subSectionID.value;
  retstr->subSectionID.is_nil = subSectionID.is_nil;
  retstr->subSectionName = subSectionName;
  retstr->subSectionPosition.value = subSectionPosition.value;
  retstr->subSectionPosition.is_nil = subSectionPosition.is_nil;
  retstr->hasLanguageTag = hasLanguageTag;
}

uint64_t sub_5AE08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_5AE48 + 4 * byte_1F6550[a1]))(0x546E6F6974636573, 0xEB00000000657079);
}

uint64_t sub_5AE48()
{
  return 0x496E6F6974636573;
}

uint64_t sub_5AE64()
{
  return 0x4E6E6F6974636573;
}

unint64_t sub_5AE84()
{
  return 0xD000000000000011;
}

uint64_t sub_5AEA0()
{
  return 0x657A69536C6C6563;
}

unint64_t sub_5AEB8()
{
  return 0xD000000000000014;
}

uint64_t sub_5AF24()
{
  return 0x75676E614C736168;
}

uint64_t sub_5AF48()
{
  unsigned __int8 *v0;

  return sub_5AE08(*v0);
}

uint64_t sub_5AF50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_5C170(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_5AF74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5BBB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5AF9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5BBB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ContentExposureData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[3];
  char v45;
  _BYTE v46[14];
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v3 = sub_71B4(&qword_298710);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = *v1;
  v7 = v1[1];
  v8 = v1[2];
  v41 = v1[3];
  v42 = v8;
  v9 = v1[4];
  v39 = v1[5];
  v40 = v9;
  v10 = v1[6];
  v37 = v1[7];
  v38 = v10;
  v11 = v1[9];
  v35 = v1[8];
  v36 = v11;
  v34 = *((unsigned int *)v1 + 20);
  v33 = *((unsigned __int8 *)v1 + 84);
  v32 = *((unsigned int *)v1 + 22);
  v31 = *((unsigned __int8 *)v1 + 92);
  v12 = v1[13];
  v29 = v1[12];
  v30 = v12;
  v28 = *((unsigned int *)v1 + 28);
  v27 = *((unsigned __int8 *)v1 + 116);
  v13 = *((unsigned __int8 *)v1 + 117);
  v14 = a1[3];
  v15 = a1[4];
  v16 = a1;
  v17 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_7988(v16, v14);
  v18 = sub_5BBB4();
  v19 = v14;
  v20 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentExposureData.CodingKeys, &type metadata for ContentExposureData.CodingKeys, v18, v19, v15);
  v53 = 0;
  v21 = v43;
  KeyedEncodingContainer.encode(_:forKey:)(v6, v7, &v53, v3);
  if (!v21)
  {
    v22 = v39;
    v23 = v40;
    v24 = v38;
    v52 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v42, v41, &v52, v20);
    v51 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v22, &v51, v20);
    v50 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v37, &v50, v20);
    v49 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v49, v20);
    v48 = 5;
    v46[13] = v33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34 | ((unint64_t)v33 << 32), &v48, v20);
    v47 = 6;
    v46[1] = v31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32 | ((unint64_t)v31 << 32), &v47, v20);
    v46[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, v46, v20);
    v45 = 8;
    v44[1] = v27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28 | ((unint64_t)v27 << 32), &v45, v20);
    v44[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v44, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v17, v20);
}

uint64_t ContentExposureData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;

  v5 = sub_71B4(&qword_298720);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_5BBB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentExposureData.CodingKeys, &type metadata for ContentExposureData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    v38 = 0;
  }
  else
  {
    v61 = 0;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v61, v5);
    v15 = v14;
    v60 = 1;
    swift_bridgeObjectRetain(v14);
    v46 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v5);
    v47 = a2;
    v59 = 2;
    v17 = v16;
    swift_bridgeObjectRetain(v16);
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v59, v5);
    v51 = v17;
    v45 = v18;
    v58 = 3;
    v20 = v19;
    swift_bridgeObjectRetain(v19);
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v5);
    v50 = v20;
    v44 = v21;
    v57 = 4;
    v23 = v22;
    swift_bridgeObjectRetain(v22);
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v5);
    v49 = v23;
    v43 = v24;
    v56 = 5;
    v26 = v25;
    swift_bridgeObjectRetain(v25);
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v56, v5);
    v48 = v26;
    v42 = v27;
    v55 = 6;
    v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v55, v5);
    v54 = 7;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v5);
    v30 = v29;
    v40 = v28;
    v53 = 8;
    swift_bridgeObjectRetain(v29);
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
    v52 = 9;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v32 = v46;
    v33 = v47;
    *v47 = v13;
    v33[1] = v15;
    v35 = v50;
    v34 = v51;
    v33[2] = v32;
    v33[3] = v34;
    v33[4] = v45;
    v33[5] = v35;
    v37 = v48;
    v36 = v49;
    v33[6] = v44;
    v33[7] = v36;
    v33[8] = v43;
    v33[9] = v37;
    BYTE4(v32) = BYTE4(v42);
    *((_DWORD *)v33 + 20) = v42;
    *((_BYTE *)v33 + 84) = BYTE4(v32) & 1;
    BYTE4(v32) = BYTE4(v41);
    *((_DWORD *)v33 + 22) = v41;
    *((_BYTE *)v33 + 92) = BYTE4(v32) & 1;
    v33[12] = v40;
    v33[13] = v30;
    BYTE4(v32) = BYTE4(v39);
    *((_DWORD *)v33 + 28) = v39;
    *((_BYTE *)v33 + 116) = BYTE4(v32) & 1;
    *((_BYTE *)v33 + 117) = v31;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v34);
    v38 = v15;
  }
  return swift_bridgeObjectRelease(v38);
}

uint64_t sub_5B86C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ContentExposureData.init(from:)(a1, a2);
}

uint64_t sub_5B880(_QWORD *a1)
{
  return ContentExposureData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics19ContentExposureDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  char v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v49 = a1[7];
  v50 = a1[6];
  v48 = a1[8];
  v46 = a1[9];
  v44 = *((_BYTE *)a1 + 84);
  v36 = *((_DWORD *)a1 + 22);
  v41 = *((_DWORD *)a1 + 20);
  v42 = *((_BYTE *)a1 + 92);
  v34 = a1[12];
  v38 = a1[13];
  v32 = *((_BYTE *)a1 + 116);
  v29 = *((_DWORD *)a1 + 28);
  v30 = *((unsigned __int8 *)a1 + 117);
  v10 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v47 = *(_QWORD *)(a2 + 64);
  v45 = *(_QWORD *)(a2 + 72);
  v43 = *(unsigned __int8 *)(a2 + 84);
  v35 = *(_DWORD *)(a2 + 88);
  v39 = *(unsigned __int8 *)(a2 + 92);
  v40 = *(_DWORD *)(a2 + 80);
  v33 = *(_QWORD *)(a2 + 96);
  v37 = *(_QWORD *)(a2 + 104);
  v31 = *(unsigned __int8 *)(a2 + 116);
  v27 = *(_DWORD *)(a2 + 112);
  v28 = *(unsigned __int8 *)(a2 + 117);
  if (v4 == *(_QWORD *)a2 && v5 == v10
    || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v10, 0), result = 0, (v17 & 1) != 0))
  {
    if (v6 == v12 && v8 == v11
      || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v12, v11, 0), result = 0, (v19 & 1) != 0))
    {
      if (v7 == v14 && v9 == v13
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v14, v13, 0), result = 0, (v20 & 1) != 0))
      {
        if (v50 == v15 && v49 == v16
          || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v49, v15, v16, 0), result = 0, (v21 & 1) != 0))
        {
          if (v48 == v47 && v46 == v45
            || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v46, v47, v45, 0), result = 0, (v22 & 1) != 0))
          {
            if ((v44 & 1) != 0)
            {
              if (!v43)
                return 0;
            }
            else
            {
              v23 = v43;
              if (v41 != v40)
                v23 = 1;
              if ((v23 & 1) != 0)
                return 0;
            }
            if ((v42 & 1) != 0)
            {
              if (!v39)
                return 0;
            }
            else
            {
              v24 = v39;
              if (v36 != v35)
                v24 = 1;
              if ((v24 & 1) != 0)
                return 0;
            }
            if (v38)
            {
              if (v37)
              {
                if (v34 != v33 || v38 != v37)
                {
                  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v38, v33, v37, 0);
                  result = 0;
                  if ((v25 & 1) == 0)
                    return result;
                }
LABEL_35:
                if ((v32 & 1) != 0)
                {
                  if (!v31)
                    return 0;
                }
                else
                {
                  v26 = v31;
                  if (v29 != v27)
                    v26 = 1;
                  if ((v26 & 1) != 0)
                    return 0;
                }
                if (v30 == 2)
                {
                  if (v28 != 2)
                    return 0;
                }
                else if (v28 == 2 || ((((v30 & 1) == 0) ^ v28) & 1) == 0)
                {
                  return 0;
                }
                return 1;
              }
            }
            else if (!v37)
            {
              goto LABEL_35;
            }
            return 0;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_5BBB4()
{
  unint64_t result;

  result = qword_298718;
  if (!qword_298718)
  {
    result = swift_getWitnessTable(&unk_1F6728, &type metadata for ContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298718);
  }
  return result;
}

uint64_t destroy for ContentExposureData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for ContentExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for ContentExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v14;
  v15 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v18;
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  return a1;
}

__n128 initializeWithTake for ContentExposureData(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 110) = *(_QWORD *)((char *)a2 + 110);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ContentExposureData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a1 + 116) = *(_WORD *)(a2 + 116);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentExposureData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 118))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentExposureData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 118) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 118) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentExposureData()
{
  return &type metadata for ContentExposureData;
}

uint64_t storeEnumTagSinglePayload for ContentExposureData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_5C018 + 4 * byte_1F655F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_5C04C + 4 * byte_1F655A[v4]))();
}

uint64_t sub_5C04C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5C054(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5C05CLL);
  return result;
}

uint64_t sub_5C068(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5C070);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_5C074(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5C07C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentExposureData.CodingKeys()
{
  return &type metadata for ContentExposureData.CodingKeys;
}

unint64_t sub_5C09C()
{
  unint64_t result;

  result = qword_298728;
  if (!qword_298728)
  {
    result = swift_getWitnessTable(&unk_1F6700, &type metadata for ContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298728);
  }
  return result;
}

unint64_t sub_5C0E4()
{
  unint64_t result;

  result = qword_298730;
  if (!qword_298730)
  {
    result = swift_getWitnessTable(&unk_1F6670, &type metadata for ContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298730);
  }
  return result;
}

unint64_t sub_5C12C()
{
  unint64_t result;

  result = qword_298738;
  if (!qword_298738)
  {
    result = swift_getWitnessTable(&unk_1F6698, &type metadata for ContentExposureData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298738);
  }
  return result;
}

uint64_t sub_5C170(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x546E6F6974636573 && a2 == 0xEB00000000657079)
  {
    v4 = 0xEB00000000657079;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x546E6F6974636573, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x496E6F6974636573 && a2 == 0xE900000000000044)
  {
    v6 = 0xE900000000000044;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496E6F6974636573, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x4E6E6F6974636573 && a2 == 0xEB00000000656D61)
  {
    v7 = 0xEB00000000656D61;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6974636573, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x800000000021ECA0;
    if (a2 == 0x800000000021ECA0)
      goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021ECA0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0x657A69536C6C6563 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A69536C6C6563, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000000021F280)
  {
    v10 = 0x800000000021F280;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F280, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x6974636553627573 && a2 == 0xEC00000044496E6FLL)
  {
    v11 = 0xEC00000044496E6FLL;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974636553627573, 0xEC00000044496E6FLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x6974636553627573 && a2 == 0xEE00656D614E6E6FLL)
  {
    v12 = 0xEE00656D614E6E6FLL;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974636553627573, 0xEE00656D614E6E6FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_47;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000000021F2A0)
  {
    v13 = 0x800000000021F2A0;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F2A0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_53;
  }
  if (a1 == 0x75676E614C736168 && a2 == 0xEE00676154656761)
  {
    swift_bridgeObjectRelease(0xEE00676154656761);
    return 9;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x75676E614C736168, 0xEE00676154656761, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_5C5EC(uint64_t a1)
{
  return sub_5C838(a1, qword_298740, 0xD000000000000021, 0x800000000021F400);
}

uint64_t static Logger.analyticsController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_2955E0, (uint64_t)qword_298740, (uint64_t)sub_5C5EC, a1);
}

uint64_t sub_5C62C(uint64_t a1)
{
  return sub_5C838(a1, qword_298758, 0xD00000000000002ELL, 0x800000000021F3D0);
}

uint64_t static Logger.appAnalyticsActionImplementation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_2955E8, (uint64_t)qword_298758, (uint64_t)sub_5C62C, a1);
}

uint64_t sub_5C66C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_705C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_5C6D4(uint64_t a1)
{
  return sub_5C838(a1, qword_298770, 0xD000000000000018, 0x800000000021F3B0);
}

uint64_t static Logger.appManager.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_2955F0, (uint64_t)qword_298770, (uint64_t)sub_5C6D4, a1);
}

uint64_t sub_5C714(uint64_t a1)
{
  return sub_5C838(a1, qword_298788, 0xD000000000000021, 0x800000000021F380);
}

uint64_t static Logger.debugEventProcessor.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_2955F8, (uint64_t)qword_298788, (uint64_t)sub_5C714, a1);
}

uint64_t sub_5C754(uint64_t a1)
{
  return sub_5C838(a1, qword_2987A0, 0xD00000000000001BLL, 0x800000000021F360);
}

uint64_t static Logger.eventReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_295600, (uint64_t)qword_2987A0, (uint64_t)sub_5C754, a1);
}

uint64_t sub_5C794(uint64_t a1)
{
  return sub_5C838(a1, qword_2987B8, 0xD00000000000001FLL, 0x800000000021F340);
}

uint64_t static Logger.eventViewModifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_295608, (uint64_t)qword_2987B8, (uint64_t)sub_5C794, a1);
}

uint64_t sub_5C7D4(uint64_t a1)
{
  return sub_5C838(a1, qword_2987D0, 0xD000000000000035, 0x800000000021F300);
}

uint64_t static Logger.hostingControllerVisibilityStateManager.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_295610, (uint64_t)qword_2987D0, (uint64_t)sub_5C7D4, a1);
}

uint64_t sub_5C814(uint64_t a1)
{
  return sub_5C838(a1, qword_2987E8, 0xD000000000000017, 0x800000000021F2E0);
}

uint64_t sub_5C838(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_9260(v7, a2);
  sub_705C(v7, (uint64_t)a2);
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000000021F2C0, a3, a4);
}

uint64_t static Logger.utilities.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_5C66C(&qword_295618, (uint64_t)qword_2987E8, (uint64_t)sub_5C814, a1);
}

unint64_t ListeningSessionData.startTime.getter()
{
  unsigned int *v0;

  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
}

uint64_t ListeningSessionData.startTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t ScrubData.totalLength.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t ScrubData.totalLength.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

BookAnalytics::BitRateData __swiftcall BitRateData.init(prevBitRate:bitRate:)(Swift::Int32_optional prevBitRate, Swift::Int32 bitRate)
{
  uint64_t v2;
  BookAnalytics::BitRateData result;

  *(_DWORD *)v2 = prevBitRate.value;
  *(_BYTE *)(v2 + 4) = prevBitRate.is_nil;
  *(_DWORD *)(v2 + 8) = bitRate;
  result.prevBitRate = prevBitRate;
  result.bitRate = bitRate;
  return result;
}

BOOL static BitRateData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 4);
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 4))
      return 0;
  }
  else
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t sub_5C98C()
{
  _BYTE *v0;

  if (*v0)
    return 0x65746152746962;
  else
    return 0x5274694276657270;
}

uint64_t sub_5C9D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_5CF50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_5C9F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5CB74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5CA1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5CB74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BitRateData.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  unsigned int v15;
  unsigned __int8 v16;
  char v17;
  char v18;

  v3 = sub_71B4(&qword_298800);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_BYTE *)v1 + 4);
  v15 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_5CB74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BitRateData.CodingKeys, &type metadata for BitRateData.CodingKeys, v11, v9, v10);
  v18 = 0;
  v16 = v8;
  v12 = v14[1];
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7 | ((unint64_t)v8 << 32), &v18, v3);
  if (!v12)
  {
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v17, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_5CB74()
{
  unint64_t result;

  result = qword_298808;
  if (!qword_298808)
  {
    result = swift_getWitnessTable(&unk_1F6918, &type metadata for BitRateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298808);
  }
  return result;
}

uint64_t BitRateData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_71B4(&qword_298810);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_5CB74();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BitRateData.CodingKeys, &type metadata for BitRateData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_DWORD *)a2 = v12;
    *(_BYTE *)(a2 + 4) = BYTE4(v12) & 1;
    *(_DWORD *)(a2 + 8) = v13;
  }
  return sub_7DAC(a1);
}

uint64_t sub_5CD14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BitRateData.init(from:)(a1, a2);
}

uint64_t sub_5CD28(_QWORD *a1)
{
  return BitRateData.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for BitRateData(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for BitRateData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BitRateData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BitRateData()
{
  return &type metadata for BitRateData;
}

uint64_t storeEnumTagSinglePayload for BitRateData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_5CDF8 + 4 * byte_1F677D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_5CE2C + 4 * byte_1F6778[v4]))();
}

uint64_t sub_5CE2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5CE34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5CE3CLL);
  return result;
}

uint64_t sub_5CE48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5CE50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_5CE54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5CE5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BitRateData.CodingKeys()
{
  return &type metadata for BitRateData.CodingKeys;
}

unint64_t sub_5CE7C()
{
  unint64_t result;

  result = qword_298818;
  if (!qword_298818)
  {
    result = swift_getWitnessTable(&unk_1F68F0, &type metadata for BitRateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298818);
  }
  return result;
}

unint64_t sub_5CEC4()
{
  unint64_t result;

  result = qword_298820;
  if (!qword_298820)
  {
    result = swift_getWitnessTable(&unk_1F6860, &type metadata for BitRateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298820);
  }
  return result;
}

unint64_t sub_5CF0C()
{
  unint64_t result;

  result = qword_298828;
  if (!qword_298828)
  {
    result = swift_getWitnessTable(&unk_1F6888, &type metadata for BitRateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298828);
  }
  return result;
}

uint64_t sub_5CF50(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x5274694276657270 && a2 == 0xEB00000000657461)
  {
    v5 = 0xEB00000000657461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5274694276657270, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65746152746962 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746152746962, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BookAnalytics::RecoType_optional __swiftcall RecoType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::RecoType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266AB0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t RecoType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_5D0E0 + 4 * byte_1F6968[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_5D0E0()
{
  return 0x65536E497478656ELL;
}

uint64_t sub_5D100()
{
  return 0x6D6F724665726F6DLL;
}

uint64_t sub_5D124()
{
  return 0x48676E6964616572;
}

unint64_t sub_5D148()
{
  return 0xD000000000000010;
}

void sub_5D164(char *a1)
{
  sub_25DF4(*a1);
}

unint64_t sub_5D174()
{
  unint64_t result;

  result = qword_298830;
  if (!qword_298830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecoType, &type metadata for RecoType);
    atomic_store(result, (unint64_t *)&qword_298830);
  }
  return result;
}

void sub_5D1B8()
{
  char *v0;

  sub_19535C(*v0);
}

void sub_5D1C0()
{
  __asm { BR              X10 }
}

uint64_t sub_5D1FC(uint64_t a1)
{
  String.hash(into:)(a1, 0x65536E497478656ELL, 0xEC00000073656972);
  return swift_bridgeObjectRelease(0xEC00000073656972);
}

void sub_5D294(uint64_t a1)
{
  char *v1;

  sub_1D4218(a1, *v1);
}

BookAnalytics::RecoType_optional sub_5D29C(Swift::String *a1)
{
  return RecoType.init(rawValue:)(*a1);
}

uint64_t sub_5D2A8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_5D2D8 + 4 * byte_1F6972[*v0]))();
}

void sub_5D2D8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "nextInSeries");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_5D2FC(char *a1@<X8>)
{
  strcpy(a1, "moreFromAuthor");
  a1[15] = -18;
}

void sub_5D324(char *a1@<X8>)
{
  strcpy(a1, "readingHistory");
  a1[15] = -18;
}

void sub_5D34C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000000021DB50;
}

uint64_t sub_5D36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_5D4E0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_5D3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_5D4E0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for RecoType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_5D460 + 4 * byte_1F697C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_5D494 + 4 * byte_1F6977[v4]))();
}

uint64_t sub_5D494(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5D49C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5D4A4);
  return result;
}

uint64_t sub_5D4B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5D4B8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_5D4BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5D4C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecoType()
{
  return &type metadata for RecoType;
}

unint64_t sub_5D4E0()
{
  unint64_t result;

  result = qword_298838;
  if (!qword_298838)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecoType, &type metadata for RecoType);
    atomic_store(result, (unint64_t *)&qword_298838);
  }
  return result;
}

uint64_t sub_5D524(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_298840, &enum case for SessionGroup.default(_:));
}

uint64_t static PreorderAttemptEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295620, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298840, a1);
}

uint64_t sub_5D564(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_298858, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static PreorderAttemptEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295628, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298858, a1);
}

uint64_t PreorderAttemptEvent.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PreorderAttemptEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_2988E0, (uint64_t)&nominal type descriptor for PreorderAttemptEvent);
}

uint64_t PreorderAttemptEvent.contentStoreData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderAttemptEvent(0) + 20);
  v4 = sub_71B4(&qword_2984C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderAttemptEvent.contentStoreData.modify())()
{
  type metadata accessor for PreorderAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderAttemptEvent.sectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PreorderAttemptEvent.sectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderAttemptEvent(0) + 24);
  v4 = sub_71B4(&qword_296A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderAttemptEvent.sectionData.modify())()
{
  type metadata accessor for PreorderAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderAttemptEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PreorderAttemptEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderAttemptEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PreorderAttemptEvent.eventData.modify())()
{
  type metadata accessor for PreorderAttemptEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t PreorderAttemptEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for PreorderAttemptEvent(0);
  v5 = a1 + v4[5];
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + v4[6];
  v9 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v6, v9);
  v10 = a1 + v4[7];
  v11 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v2, v11);
}

uint64_t GiftEvent.Model.contentStoreData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v1 + 136);
  v8 = *(_QWORD *)(v1 + 144);
  v9 = *(_QWORD *)(v1 + 152);
  v10 = *(_BYTE *)(v1 + 164);
  v11 = *(_DWORD *)(v1 + 160);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 68) = v10;
  *(_DWORD *)(a1 + 64) = v11;
  return sub_55E40(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t RedownloadCompleteEvent.Model.sectionData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1[21];
  v3 = v1[22];
  v4 = v1[23];
  v5 = v1[24];
  v6 = v1[25];
  v7 = v1[26];
  v8 = v1[27];
  v9 = v1[28];
  v10 = v1[29];
  v11 = v1[30];
  v12 = v1[31];
  v13 = v1[32];
  v14 = v1[33];
  v15 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  a1[12] = v14;
  a1[13] = v15;
  return sub_1AD04(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t PreorderAttemptEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PreorderAttemptEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PreorderAttemptEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_298978, (uint64_t)&nominal type descriptor for PreorderAttemptEvent.Model);
}

uint64_t PreorderAttemptEvent.Model.init(contentData:contentStoreData:sectionData:eventData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v7;
  *(_BYTE *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 24) = v9;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v11;
  *(_WORD *)(a5 + 56) = v12;
  *(_DWORD *)(a5 + 60) = v13;
  *(_BYTE *)(a5 + 64) = v14;
  *(_DWORD *)(a5 + 68) = v15;
  *(_BYTE *)(a5 + 72) = v16;
  v17 = *(_DWORD *)(a1 + 73);
  v18 = *a2;
  v19 = a2[1];
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 96) = v18;
  v20 = a2[2];
  v21 = a2[3];
  *(_OWORD *)(a5 + 112) = v19;
  *(_OWORD *)(a5 + 128) = v20;
  *(_OWORD *)(a5 + 144) = v21;
  v22 = a3[1];
  *(_OWORD *)(a5 + 168) = *a3;
  *(_OWORD *)(a5 + 184) = v22;
  v23 = a3[3];
  *(_OWORD *)(a5 + 200) = a3[2];
  *(_OWORD *)(a5 + 216) = v23;
  v24 = a3[5];
  *(_OWORD *)(a5 + 232) = a3[4];
  v25 = *(_BYTE *)(a1 + 77);
  LODWORD(v10) = *((_DWORD *)a2 + 16);
  LOBYTE(v11) = *((_BYTE *)a2 + 68);
  *(_DWORD *)(a5 + 73) = v17;
  *(_BYTE *)(a5 + 77) = v25;
  *(_BYTE *)(a5 + 164) = v11;
  *(_DWORD *)(a5 + 160) = v10;
  *(_OWORD *)(a5 + 248) = v24;
  *(_OWORD *)(a5 + 264) = a3[6];
  v26 = a5 + *(int *)(type metadata accessor for PreorderAttemptEvent.Model(0) + 28);
  v27 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a4, v27);
}

uint64_t sub_5DAF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_5DB30 + 4 * byte_1F6AA0[*v0]))(0x44746E65746E6F63, 0xEB00000000617461);
}

unint64_t sub_5DB30()
{
  return 0xD000000000000010;
}

uint64_t sub_5DB4C()
{
  return 0x446E6F6974636573;
}

uint64_t sub_5DB60()
{
  return 0x746144746E657665;
}

uint64_t sub_5DB7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_5FD14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_5DBA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5DE60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5DBC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5DE60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PreorderAttemptEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_298870);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_5DE60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PreorderAttemptEvent.Model.CodingKeys, &type metadata for PreorderAttemptEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  *(_QWORD *)&v41 = *(_QWORD *)v4;
  *((_QWORD *)&v41 + 1) = v13;
  v42[0] = v14;
  *(_OWORD *)&v42[8] = v15;
  *(_QWORD *)&v42[24] = v16;
  *(_QWORD *)&v43 = v17;
  WORD4(v43) = v18;
  HIDWORD(v43) = v19;
  LOBYTE(v44) = v20;
  DWORD1(v44) = v21;
  BYTE8(v44) = v22;
  *(_DWORD *)((char *)&v44 + 9) = *(_DWORD *)(v4 + 73);
  BYTE13(v44) = v23;
  v45 = *(_OWORD *)(v4 + 80);
  v47 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = *(_DWORD *)(v4 + 160);
    v26 = *(_BYTE *)(v4 + 164);
    v27 = *(_OWORD *)(v4 + 112);
    v41 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v42 = v27;
    v28 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)&v42[16] = *(_OWORD *)(v4 + 128);
    v43 = v28;
    BYTE4(v44) = v26;
    LODWORD(v44) = v25;
    v47 = 1;
    v29 = sub_5691C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for ContentStoreData, v29);
    v30 = *(_OWORD *)(v4 + 184);
    v31 = *(_OWORD *)(v4 + 200);
    v41 = *(_OWORD *)(v4 + 168);
    *(_OWORD *)v42 = v30;
    v32 = *(_OWORD *)(v4 + 216);
    v33 = *(_OWORD *)(v4 + 232);
    *(_OWORD *)&v42[16] = v31;
    v43 = v32;
    v34 = *(_OWORD *)(v4 + 248);
    v35 = *(_OWORD *)(v4 + 264);
    v44 = v33;
    v45 = v34;
    v46 = v35;
    v47 = 2;
    v36 = sub_1B768();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v47, v6, &type metadata for SectionData, v36);
    v37 = v4 + *(int *)(type metadata accessor for PreorderAttemptEvent.Model(0) + 28);
    LOBYTE(v41) = 3;
    v38 = type metadata accessor for EventData(0);
    v39 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v37, &v41, v6, v38, v39);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_5DE60()
{
  unint64_t result;

  result = qword_298878;
  if (!qword_298878)
  {
    result = swift_getWitnessTable(&unk_1F6C9C, &type metadata for PreorderAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298878);
  }
  return result;
}

uint64_t PreorderAttemptEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  _BYTE v56[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;

  v49 = a2;
  v50 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v5 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_71B4(&qword_298880);
  v6 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PreorderAttemptEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v53 = a1;
  sub_7988(a1, v12);
  v14 = sub_5DE60();
  v51 = v8;
  v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PreorderAttemptEvent.Model.CodingKeys, &type metadata for PreorderAttemptEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(v53);
  v54 = v9;
  v16 = v6;
  v17 = v5;
  v18 = v3;
  v19 = v50;
  v61 = 0;
  v20 = sub_1779C();
  v21 = v51;
  v22 = v52;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for ContentData, &v61, v52, &type metadata for ContentData, v20);
  v23 = *((_QWORD *)&v55 + 1);
  v24 = v56[0];
  v25 = *(_OWORD *)&v56[8];
  v26 = *(_QWORD *)&v56[24];
  v27 = v57;
  v28 = WORD4(v57);
  v29 = HIDWORD(v57);
  v30 = v58;
  v31 = DWORD1(v58);
  v32 = BYTE8(v58);
  v33 = BYTE13(v58);
  *(_QWORD *)v11 = v55;
  *((_QWORD *)v11 + 1) = v23;
  v11[16] = v24;
  *(_OWORD *)(v11 + 24) = v25;
  *((_QWORD *)v11 + 5) = v26;
  *((_QWORD *)v11 + 6) = v27;
  *((_WORD *)v11 + 28) = v28;
  *((_DWORD *)v11 + 15) = v29;
  v11[64] = v30;
  *((_DWORD *)v11 + 17) = v31;
  v11[72] = v32;
  *(_DWORD *)(v11 + 73) = *(_DWORD *)((char *)&v58 + 9);
  v11[77] = v33;
  *((_OWORD *)v11 + 5) = v59;
  v61 = 1;
  v34 = sub_573E4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for ContentStoreData, &v61, v22, &type metadata for ContentStoreData, v34);
  v35 = v58;
  v36 = BYTE4(v58);
  v37 = *(_OWORD *)v56;
  *((_OWORD *)v11 + 6) = v55;
  *((_OWORD *)v11 + 7) = v37;
  v38 = v57;
  *((_OWORD *)v11 + 8) = *(_OWORD *)&v56[16];
  *((_OWORD *)v11 + 9) = v38;
  v11[164] = v36;
  *((_DWORD *)v11 + 40) = v35;
  v61 = 2;
  v39 = sub_1BFE4();
  v48[1] = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v55, &type metadata for SectionData, &v61, v22, &type metadata for SectionData, v39);
  v40 = *(_OWORD *)v56;
  *(_OWORD *)(v11 + 168) = v55;
  v41 = *(_OWORD *)&v56[16];
  v42 = v57;
  *(_OWORD *)(v11 + 184) = v40;
  *(_OWORD *)(v11 + 200) = v41;
  v43 = v58;
  v44 = v59;
  *(_OWORD *)(v11 + 216) = v42;
  *(_OWORD *)(v11 + 232) = v43;
  v45 = v60;
  *(_OWORD *)(v11 + 248) = v44;
  *(_OWORD *)(v11 + 264) = v45;
  LOBYTE(v55) = 3;
  v46 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v19, &v55, v22, v19, v46);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v52);
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v11[*(int *)(v54 + 28)], v17, v19);
  sub_5E2EC((uint64_t)v11, v49);
  sub_7DAC(v53);
  return sub_5E330((uint64_t)v11);
}

uint64_t sub_5E2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreorderAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_5E330(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PreorderAttemptEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_5E36C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PreorderAttemptEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_5E380(_QWORD *a1)
{
  return PreorderAttemptEvent.Model.encode(to:)(a1);
}

uint64_t sub_5E394@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295620, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298840, (uint64_t)sub_5D524, a1);
}

uint64_t sub_5E3B8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295628, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298858, (uint64_t)sub_5D564, a1);
}

uint64_t sub_5E3DC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + a1[6];
  v10 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v7, v10);
  v11 = a2 + a1[7];
  v12 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v11, v4, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for PreorderAttemptEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_2984C8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_296A00);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for PreorderAttemptEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for PreorderAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for PreorderAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for PreorderAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for PreorderAttemptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_2984C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_296A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreorderAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5EA58);
}

uint64_t sub_5EA58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_2984C8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_296A00);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PreorderAttemptEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5EB30);
}

uint64_t sub_5EB30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_2984C8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_296A00);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_5EC04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, &qword_2985C8, (uint64_t (*)(void))sub_573E4, (uint64_t (*)(void))sub_5691C, (uint64_t)&type metadata for ContentStoreData);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_296AF8, (uint64_t (*)(void))sub_1BFE4, (uint64_t (*)(void))sub_1B768, (uint64_t)&type metadata for SectionData);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PreorderAttemptEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[17];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      v13 = a2[13];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v13;
      v14 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v12;
      v15 = a2[19];
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_QWORD *)(a1 + 152) = v15;
      *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
      *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v15);
      v16 = a2[23];
      if (v16)
      {
LABEL_4:
        *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
        *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
        *(_QWORD *)(a1 + 176) = a2[22];
        *(_QWORD *)(a1 + 184) = v16;
        v17 = a2[25];
        *(_QWORD *)(a1 + 192) = a2[24];
        *(_QWORD *)(a1 + 200) = v17;
        v18 = a2[27];
        *(_QWORD *)(a1 + 208) = a2[26];
        *(_QWORD *)(a1 + 216) = v18;
        v19 = a2[29];
        *(_QWORD *)(a1 + 224) = a2[28];
        *(_QWORD *)(a1 + 232) = v19;
        v20 = a2[31];
        *(_QWORD *)(a1 + 240) = a2[30];
        *(_QWORD *)(a1 + 248) = v20;
        *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
        *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
        v21 = a2[34];
        *(_QWORD *)(a1 + 264) = a2[33];
        *(_QWORD *)(a1 + 272) = v21;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
LABEL_8:
        v28 = *(int *)(a3 + 28);
        v29 = a1 + v28;
        v30 = (uint64_t)a2 + v28;
        v31 = type metadata accessor for EventData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        return a1;
      }
    }
    else
    {
      v23 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v23;
      *(_QWORD *)(a1 + 157) = *(uint64_t *)((char *)a2 + 157);
      v24 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v24;
      v16 = a2[23];
      if (v16)
        goto LABEL_4;
    }
    v25 = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 248) = v25;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    v26 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    *(_OWORD *)(a1 + 184) = v26;
    v27 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = v27;
    goto LABEL_8;
  }
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v22);
  return a1;
}

uint64_t destroy for PreorderAttemptEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = a1[17];
  if (v4)
  {
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = a1[23];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a1[25]);
    swift_bridgeObjectRelease(a1[27]);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v7 = (char *)a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for PreorderAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (!v11)
  {
    v21 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v22;
    v15 = *(_QWORD *)(a2 + 184);
    if (v15)
      goto LABEL_3;
LABEL_5:
    v23 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v23;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    v24 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v24;
    v25 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v25;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v15 = *(_QWORD *)(a2 + 184);
  if (!v15)
    goto LABEL_5;
LABEL_3:
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v15;
  v16 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v16;
  v17 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v17;
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v18;
  v19 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v19;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v20 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v20;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
LABEL_6:
  v26 = *(int *)(a3 + 28);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  return a1;
}

uint64_t assignWithCopy for PreorderAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = (_OWORD *)(a1 + 96);
  v17 = (_OWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v19 = *(_QWORD *)(a2 + 104);
      v20 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v21 = *(_QWORD *)(a2 + 120);
      v22 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v23 = *(_QWORD *)(a2 + 136);
      v24 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v23;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRelease(v24);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v25 = *(_QWORD *)(a2 + 152);
      v26 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26);
      v27 = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_DWORD *)(a1 + 160) = v27;
    }
    else
    {
      sub_59D40((_QWORD *)(a1 + 96));
      *v16 = *v17;
      v34 = *(_OWORD *)(a2 + 128);
      v33 = *(_OWORD *)(a2 + 144);
      v35 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
      *(_OWORD *)(a1 + 128) = v34;
      *(_OWORD *)(a1 + 144) = v33;
      *(_OWORD *)(a1 + 112) = v35;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v28 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v28;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v29 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v29;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v30 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v30;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v31 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v31;
    v32 = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v32;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
  }
  else
  {
    *v16 = *v17;
    v36 = *(_OWORD *)(a2 + 112);
    v37 = *(_OWORD *)(a2 + 128);
    v38 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_OWORD *)(a1 + 128) = v37;
    *(_OWORD *)(a1 + 144) = v38;
    *(_OWORD *)(a1 + 112) = v36;
  }
  v39 = (_OWORD *)(a1 + 168);
  v40 = (_OWORD *)(a2 + 168);
  v41 = *(_QWORD *)(a1 + 184);
  v42 = *(_QWORD *)(a2 + 184);
  if (v41)
  {
    if (v42)
    {
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v43 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 184) = v43;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRelease(v41);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v44 = *(_QWORD *)(a2 + 200);
      v45 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v46 = *(_QWORD *)(a2 + 216);
      v47 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v46;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v47);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v48 = *(_QWORD *)(a2 + 232);
      v49 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v48;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease(v49);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v50 = *(_QWORD *)(a2 + 248);
      v51 = *(_QWORD *)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v50;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v51);
      v52 = *(_DWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
      *(_DWORD *)(a1 + 256) = v52;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v53 = *(_QWORD *)(a2 + 272);
      v54 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v54);
    }
    else
    {
      sub_1DFF8((_QWORD *)(a1 + 168));
      v63 = *(_OWORD *)(a2 + 184);
      v62 = *(_OWORD *)(a2 + 200);
      *v39 = *v40;
      *(_OWORD *)(a1 + 184) = v63;
      *(_OWORD *)(a1 + 200) = v62;
      v64 = *(_OWORD *)(a2 + 264);
      v66 = *(_OWORD *)(a2 + 216);
      v65 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v64;
      *(_OWORD *)(a1 + 216) = v66;
      *(_OWORD *)(a1 + 232) = v65;
    }
  }
  else if (v42)
  {
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v55 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v55;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v56 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v56;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v57 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v57;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v58 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v58;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v59 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v59;
    v60 = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
    *(_DWORD *)(a1 + 256) = v60;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v61 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v61;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v61);
  }
  else
  {
    v67 = *v40;
    v68 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v68;
    *v39 = v67;
    v69 = *(_OWORD *)(a2 + 216);
    v70 = *(_OWORD *)(a2 + 232);
    v71 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v71;
    *(_OWORD *)(a1 + 216) = v69;
    *(_OWORD *)(a1 + 232) = v70;
  }
  v72 = *(int *)(a3 + 28);
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  return a1;
}

uint64_t initializeWithTake for PreorderAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for PreorderAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  if (*(_QWORD *)(a1 + 136))
  {
    v14 = *(_QWORD *)(a2 + 136);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 104);
      v16 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v15;
      swift_bridgeObjectRelease(v16);
      v17 = *(_QWORD *)(a2 + 120);
      v18 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v17;
      swift_bridgeObjectRelease(v18);
      v19 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v14;
      swift_bridgeObjectRelease(v19);
      v20 = *(_QWORD *)(a2 + 152);
      v21 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v20;
      swift_bridgeObjectRelease(v21);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      goto LABEL_6;
    }
    sub_59D40((_QWORD *)(a1 + 96));
  }
  v22 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
  v23 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v23;
LABEL_6:
  v24 = *(_QWORD *)(a1 + 184);
  if (!v24)
  {
LABEL_10:
    v36 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v36;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    v37 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v37;
    v38 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v38;
    goto LABEL_11;
  }
  v25 = *(_QWORD *)(a2 + 184);
  if (!v25)
  {
    sub_1DFF8((_QWORD *)(a1 + 168));
    goto LABEL_10;
  }
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v25;
  swift_bridgeObjectRelease(v24);
  v26 = *(_QWORD *)(a2 + 200);
  v27 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 216);
  v29 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 232);
  v31 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 248);
  v33 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v32;
  swift_bridgeObjectRelease(v33);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  v34 = *(_QWORD *)(a2 + 272);
  v35 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v34;
  swift_bridgeObjectRelease(v35);
LABEL_11:
  v39 = *(int *)(a3 + 28);
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreorderAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5F9EC);
}

uint64_t sub_5F9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PreorderAttemptEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5FA74);
}

uint64_t sub_5FA74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_5FAE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_1F6BA8;
  v4[2] = &unk_1F6BC0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreorderAttemptEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_5FBBC + 4 * byte_1F6AA9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_5FBF0 + 4 * byte_1F6AA4[v4]))();
}

uint64_t sub_5FBF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5FBF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5FC00);
  return result;
}

uint64_t sub_5FC0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5FC14);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_5FC18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5FC20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreorderAttemptEvent.Model.CodingKeys()
{
  return &type metadata for PreorderAttemptEvent.Model.CodingKeys;
}

unint64_t sub_5FC40()
{
  unint64_t result;

  result = qword_2989B8;
  if (!qword_2989B8)
  {
    result = swift_getWitnessTable(&unk_1F6C74, &type metadata for PreorderAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2989B8);
  }
  return result;
}

unint64_t sub_5FC88()
{
  unint64_t result;

  result = qword_2989C0;
  if (!qword_2989C0)
  {
    result = swift_getWitnessTable(&unk_1F6BE4, &type metadata for PreorderAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2989C0);
  }
  return result;
}

unint64_t sub_5FCD0()
{
  unint64_t result;

  result = qword_2989C8;
  if (!qword_2989C8)
  {
    result = swift_getWitnessTable(&unk_1F6C0C, &type metadata for PreorderAttemptEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2989C8);
  }
  return result;
}

uint64_t sub_5FD14(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F200;
    if (a2 == 0x800000000021F200)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F200, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x446E6F6974636573 && a2 == 0xEB00000000617461)
  {
    v8 = 0xEB00000000617461;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x446E6F6974636573, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t static SingleCollectionData.data(with:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  swift_bridgeObjectRetain(a3);
  result = BARoundIntegerToSignificantFigures(a1, 2);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_QWORD *)a4 = a2;
    *(_QWORD *)(a4 + 8) = a3;
    *(_DWORD *)(a4 + 16) = result;
    return result;
  }
  __break(1u);
  return result;
}

BookAnalytics::LaunchType_optional __swiftcall LaunchType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::LaunchType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266B48, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t LaunchType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1684828003;
  if (*v0 != 1)
    v1 = 1836212599;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_6000C(char *a1, unsigned __int8 *a2)
{
  return sub_2AFCC(*a1, *a2);
}

unint64_t sub_6001C()
{
  unint64_t result;

  result = qword_2989D0;
  if (!qword_2989D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LaunchType, &type metadata for LaunchType);
    atomic_store(result, (unint64_t *)&qword_2989D0);
  }
  return result;
}

Swift::Int sub_60060()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 1684828003;
  if (v1 != 1)
    v2 = 1836212599;
  if (v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_600F0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 1684828003;
  if (*v1 != 1)
    v2 = 1836212599;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x6E776F6E6B6E75;
  if (*v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_6015C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 1684828003;
  if (v2 != 1)
    v3 = 1836212599;
  if (v2)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

BookAnalytics::LaunchType_optional sub_601E8(Swift::String *a1)
{
  return LaunchType.init(rawValue:)(*a1);
}

void sub_601F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 1684828003;
  if (v2 != 1)
    v4 = 1836212599;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6E776F6E6B6E75;
  if (!v5)
    v3 = 0xE400000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_60244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_603B8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_602A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_603B8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for LaunchType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_60338 + 4 * byte_1F6CF1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_6036C + 4 * byte_1F6CEC[v4]))();
}

uint64_t sub_6036C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_60374(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6037CLL);
  return result;
}

uint64_t sub_60388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x60390);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_60394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6039C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LaunchType()
{
  return &type metadata for LaunchType;
}

unint64_t sub_603B8()
{
  unint64_t result;

  result = qword_2989D8;
  if (!qword_2989D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LaunchType, &type metadata for LaunchType);
    atomic_store(result, (unint64_t *)&qword_2989D8);
  }
  return result;
}

uint64_t sub_603FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  int v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char v32;
  char *v33;
  int v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v43 = a8;
  v45 = a6;
  v47 = a1;
  v11 = type metadata accessor for Optional(0, a4);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  ((void (*)(void))__chkstk_darwin)();
  v46 = (char *)&v38 - v12;
  v44 = type metadata accessor for Optional(0, a3);
  v13 = *(_QWORD *)(v44 - 8);
  v14 = ((uint64_t (*)(void))__chkstk_darwin)();
  v16 = (char *)&v38 - v15;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = __chkstk_darwin(v14);
  v39 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v38 - v21;
  v23 = *(_QWORD *)(a3 - 8);
  v24 = __chkstk_darwin(v20);
  v26 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v38 - v27;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v42 = a2;
  v29(v22, a2, a4);
  v30 = swift_dynamicCast(v16, v22, a4, a3, 6);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (v30)
  {
    v31(v16, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v28, v16, a3);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v28, a3, v45);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, a3);
  }
  else
  {
    v31(v16, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v44);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v47, a3);
    v33 = v46;
    v34 = swift_dynamicCast(v46, v26, a3, a4, 6);
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    if (v34)
    {
      v35(v33, 0, 1, a4);
      v36 = v39;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v39, v33, a4);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v42, a4, v43);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, a4);
    }
    else
    {
      v35(v33, 1, 1, a4);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v41);
      v32 = 0;
    }
  }
  return v32 & 1;
}

uint64_t ==~ infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = sub_7988(a1, v3);
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = sub_7988(a2, v7);
  return sub_603FC((uint64_t)v6, (uint64_t)v10, v3, v7, v4, v5, v8, v9);
}

uint64_t sub_60744(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2989E0, &enum case for SessionGroup.default(_:));
}

uint64_t static ShareSheetExposureEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295630, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2989E0, a1);
}

uint64_t sub_60784(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2989F8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ShareSheetExposureEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295638, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2989F8, a1);
}

uint64_t ShareSheetExposureEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSheetExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShareSheetExposureEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_298A80, (uint64_t)&nominal type descriptor for ShareSheetExposureEvent);
}

uint64_t ShareSheetExposureEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSheetExposureEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ShareSheetExposureEvent.eventData.modify())()
{
  type metadata accessor for ShareSheetExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ShareSheetExposureEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSheetExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ShareSheetExposureEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSheetExposureEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ShareSheetExposureEvent.timedData.modify())()
{
  type metadata accessor for ShareSheetExposureEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ShareSheetExposureEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ShareSheetExposureEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t ShareSheetExposureEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSheetExposureEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShareSheetExposureEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_298B18, (uint64_t)&nominal type descriptor for ShareSheetExposureEvent.Model);
}

uint64_t ShareSheetExposureEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShareSheetExposureEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ShareSheetExposureEvent.Model.init(contentData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_WORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_BYTE *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 77);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = v8;
  *(_OWORD *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_QWORD *)(a4 + 48) = v11;
  *(_WORD *)(a4 + 56) = v12;
  *(_DWORD *)(a4 + 60) = v13;
  *(_BYTE *)(a4 + 64) = v14;
  *(_DWORD *)(a4 + 68) = v15;
  *(_BYTE *)(a4 + 72) = v16;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)(a1 + 73);
  *(_BYTE *)(a4 + 77) = v17;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a1 + 80);
  v18 = type metadata accessor for ShareSheetExposureEvent.Model(0);
  v19 = a4 + *(int *)(v18 + 20);
  v20 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a2, v20);
  v21 = a4 + *(int *)(v18 + 24);
  v22 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a3, v22);
}

uint64_t sub_60B9C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0x44746E65746E6F63;
}

uint64_t sub_60C08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_62524(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_60C2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60EA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_60C54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_60EA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShareSheetExposureEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  _QWORD v35[2];
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  char v42;
  int v43;
  char v44;
  int v45;
  char v46;
  __int128 v47;

  v3 = v2;
  v4 = v1;
  v6 = sub_71B4(&qword_298A10);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v10);
  v12 = sub_60EA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareSheetExposureEvent.Model.CodingKeys, &type metadata for ShareSheetExposureEvent.Model.CodingKeys, v12, v10, v11);
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_BYTE *)(v4 + 16);
  v15 = *(_OWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 48);
  v18 = *(_WORD *)(v4 + 56);
  v19 = *(_DWORD *)(v4 + 60);
  v20 = *(_BYTE *)(v4 + 64);
  v21 = *(_DWORD *)(v4 + 68);
  v22 = *(_BYTE *)(v4 + 72);
  v23 = *(_BYTE *)(v4 + 77);
  v35[0] = *(_QWORD *)v4;
  v35[1] = v13;
  v36 = v14;
  v37 = v15;
  v38 = v16;
  v39 = v17;
  v40 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = *(_DWORD *)(v4 + 73);
  v46 = v23;
  v47 = *(_OWORD *)(v4 + 80);
  v34 = 0;
  v24 = sub_17118();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v34, v6, &type metadata for ContentData, v24);
  if (!v3)
  {
    v25 = type metadata accessor for ShareSheetExposureEvent.Model(0);
    v26 = v4 + *(int *)(v25 + 20);
    LOBYTE(v35[0]) = 1;
    v27 = type metadata accessor for EventData(0);
    v28 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v35, v6, v27, v28);
    v29 = v4 + *(int *)(v25 + 24);
    LOBYTE(v35[0]) = 2;
    v30 = type metadata accessor for TimedData(0);
    v31 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, v35, v6, v30, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_60EA4()
{
  unint64_t result;

  result = qword_298A18;
  if (!qword_298A18)
  {
    result = swift_getWitnessTable(&unk_1F6FCC, &type metadata for ShareSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298A18);
  }
  return result;
}

uint64_t ShareSheetExposureEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  char v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD v50[2];
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  char v57;
  int v58;
  char v59;
  int v60;
  char v61;
  __int128 v62;
  char v63;

  v42 = a2;
  v43 = type metadata accessor for TimedData(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v44 = (uint64_t *)((char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_71B4(&qword_298A20);
  v7 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ShareSheetExposureEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v48 = a1;
  sub_7988(a1, v14);
  v15 = sub_60EA4();
  v47 = v9;
  v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShareSheetExposureEvent.Model.CodingKeys, &type metadata for ShareSheetExposureEvent.Model.CodingKeys, v15, v14, v13);
  if (v16)
    return sub_7DAC(v48);
  v17 = v6;
  v49 = v7;
  v40 = v4;
  v18 = v45;
  v63 = 0;
  v19 = sub_1779C();
  v20 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v50, &type metadata for ContentData, &v63, v46, &type metadata for ContentData, v19);
  v21 = v50[1];
  v22 = v51;
  v23 = v52;
  v24 = v53;
  v25 = v54;
  v26 = v55;
  v27 = v56;
  v28 = v57;
  v29 = v58;
  v30 = v59;
  v31 = v61;
  *(_QWORD *)v12 = v50[0];
  *((_QWORD *)v12 + 1) = v21;
  v12[16] = v22;
  *(_OWORD *)(v12 + 24) = v23;
  *((_QWORD *)v12 + 5) = v24;
  *((_QWORD *)v12 + 6) = v25;
  *((_WORD *)v12 + 28) = v26;
  *((_DWORD *)v12 + 15) = v27;
  v12[64] = v28;
  *((_DWORD *)v12 + 17) = v29;
  v12[72] = v30;
  *(_DWORD *)(v12 + 73) = v60;
  v12[77] = v31;
  *((_OWORD *)v12 + 5) = v62;
  LOBYTE(v50[0]) = 1;
  v32 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  v33 = v18;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, v50, v20, v18, v32);
  v34 = v10;
  (*(void (**)(char *, _QWORD *, uint64_t))(v40 + 32))(&v12[*(int *)(v10 + 20)], v17, v33);
  LOBYTE(v50[0]) = 2;
  v35 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v36 = v43;
  v37 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v44, v43, v50, v20, v43, v35);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v20);
  (*(void (**)(char *, _QWORD *, uint64_t))(v41 + 32))(&v12[*(int *)(v34 + 24)], v37, v36);
  sub_612E8((uint64_t)v12, v42);
  sub_7DAC(v48);
  return sub_6132C((uint64_t)v12);
}

uint64_t sub_612E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareSheetExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_6132C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShareSheetExposureEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_61368@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ShareSheetExposureEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_6137C(_QWORD *a1)
{
  return ShareSheetExposureEvent.Model.encode(to:)(a1);
}

uint64_t sub_61390@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295630, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2989E0, (uint64_t)sub_60744, a1);
}

uint64_t sub_613B4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295638, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2989F8, (uint64_t)sub_60784, a1);
}

uint64_t sub_613D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for ShareSheetExposureEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296760);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ShareSheetExposureEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ShareSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ShareSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ShareSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ShareSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_618FC);
}

uint64_t sub_618FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296760);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ShareSheetExposureEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_619AC);
}

uint64_t sub_619AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296760);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_61A58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_61AF8(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_61AF8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_296858)
  {
    v2 = sub_1779C();
    v3 = sub_17118();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for ContentData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_296858);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ShareSheetExposureEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 73) = *(_DWORD *)((char *)a2 + 73);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v11 = a2[11];
    v12 = *(int *)(a3 + 20);
    v22 = a1 + v12;
    v13 = (uint64_t)a2 + v12;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v14 = type metadata accessor for EventData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v15(v22, v13, v14);
    v16 = *(int *)(a3 + 24);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t destroy for ShareSheetExposureEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for ShareSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v8;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v13 = type metadata accessor for EventData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ShareSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v12;
  v13 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v13;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(a3 + 20);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

_OWORD *initializeWithTake for ShareSheetExposureEvent.Model(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[1];
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  *a1 = *a2;
  a1[1] = v8;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for ShareSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 20);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_621A8);
}

uint64_t sub_621A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ShareSheetExposureEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_62254);
}

uint64_t sub_62254(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_622F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ShareSheetExposureEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_623CC + 4 * byte_1F6E15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_62400 + 4 * byte_1F6E10[v4]))();
}

uint64_t sub_62400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_62408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x62410);
  return result;
}

uint64_t sub_6241C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x62424);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_62428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_62430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareSheetExposureEvent.Model.CodingKeys()
{
  return &type metadata for ShareSheetExposureEvent.Model.CodingKeys;
}

unint64_t sub_62450()
{
  unint64_t result;

  result = qword_298B58;
  if (!qword_298B58)
  {
    result = swift_getWitnessTable(&unk_1F6FA4, &type metadata for ShareSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298B58);
  }
  return result;
}

unint64_t sub_62498()
{
  unint64_t result;

  result = qword_298B60;
  if (!qword_298B60)
  {
    result = swift_getWitnessTable(&unk_1F6F14, &type metadata for ShareSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298B60);
  }
  return result;
}

unint64_t sub_624E0()
{
  unint64_t result;

  result = qword_298B68;
  if (!qword_298B68)
  {
    result = swift_getWitnessTable(&unk_1F6F3C, &type metadata for ShareSheetExposureEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298B68);
  }
  return result;
}

uint64_t sub_62524(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v7 = 0xE900000000000061;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_626A8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_298B70, &enum case for SessionGroup.default(_:));
}

uint64_t static InitialAppStateQueryEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295640, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298B70, a1);
}

uint64_t sub_626E8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_298B88, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static InitialAppStateQueryEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295648, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298B88, a1);
}

uint64_t InitialAppStateQueryEvent.libraryData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_298BA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t InitialAppStateQueryEvent.libraryData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_298BA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t InitialAppStateQueryEvent.readingNowData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 20);
  v4 = sub_71B4(&qword_298BA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for InitialAppStateQueryEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_298C40, (uint64_t)&nominal type descriptor for InitialAppStateQueryEvent);
}

uint64_t InitialAppStateQueryEvent.readingNowData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 20);
  v4 = sub_71B4(&qword_298BA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InitialAppStateQueryEvent.readingNowData.modify())()
{
  type metadata accessor for InitialAppStateQueryEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InitialAppStateQueryEvent.collectionSummaryData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 24);
  v4 = sub_71B4(&qword_295D68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InitialAppStateQueryEvent.collectionSummaryData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 24);
  v4 = sub_71B4(&qword_295D68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InitialAppStateQueryEvent.collectionSummaryData.modify())()
{
  type metadata accessor for InitialAppStateQueryEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InitialAppStateQueryEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InitialAppStateQueryEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 28);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InitialAppStateQueryEvent.eventData.modify())()
{
  type metadata accessor for InitialAppStateQueryEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InitialAppStateQueryEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InitialAppStateQueryEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent(0) + 32);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InitialAppStateQueryEvent.timedData.modify())()
{
  type metadata accessor for InitialAppStateQueryEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t InitialAppStateQueryEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *Event;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  Event = (int *)type metadata accessor for InitialAppStateQueryEvent(0);
  v5 = a1 + Event[5];
  v6 = sub_71B4(&qword_298BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + Event[6];
  v8 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + Event[7];
  v10 = enum case for EventProperty.required<A>(_:);
  v11 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  v12 = a1 + Event[8];
  v13 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v10, v13);
}

uint64_t InitialAppStateQueryEvent.Model.readingNowData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t InitialAppStateQueryEvent.Model.collectionSummaryData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t InitialAppStateQueryEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent.Model(0) + 28);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for InitialAppStateQueryEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_298CF0, (uint64_t)&nominal type descriptor for InitialAppStateQueryEvent.Model);
}

uint64_t InitialAppStateQueryEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InitialAppStateQueryEvent.Model(0) + 32);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InitialAppStateQueryEvent.Model.init(libraryData:readingNowData:collectionSummaryData:eventData:timedData:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v9 = *a2;
  v10 = *a3;
  *a6 = *a1;
  a6[1] = v9;
  a6[2] = v10;
  v11 = type metadata accessor for InitialAppStateQueryEvent.Model(0);
  v12 = (char *)a6 + *(int *)(v11 + 28);
  v13 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a4, v13);
  v14 = (char *)a6 + *(int *)(v11 + 32);
  v15 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a5, v15);
}

uint64_t sub_62D28()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_62D60 + 4 * byte_1F7020[*v0]))(0x447972617262696CLL, 0xEB00000000617461);
}

uint64_t sub_62D60()
{
  return 0x4E676E6964616572;
}

unint64_t sub_62D84()
{
  return 0xD000000000000015;
}

uint64_t sub_62DA0()
{
  return 0x746144746E657665;
}

uint64_t sub_62DCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_64A2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_62DF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_63090();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_62E18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_63090();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InitialAppStateQueryEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v5 = sub_71B4(&qword_298BB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_63090();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InitialAppStateQueryEvent.Model.CodingKeys, &type metadata for InitialAppStateQueryEvent.Model.CodingKeys, v11, v9, v10);
  v24 = *v3;
  HIBYTE(v23) = 0;
  v12 = sub_630D4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, (char *)&v23 + 7, v5, &type metadata for LibraryData, v12);
  if (!v2)
  {
    v24 = v3[1];
    HIBYTE(v23) = 1;
    v13 = sub_63118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, (char *)&v23 + 7, v5, &type metadata for ReadingNowData, v13);
    v24 = v3[2];
    HIBYTE(v23) = 2;
    v14 = sub_79F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, (char *)&v23 + 7, v5, &type metadata for CollectionSummaryData, v14);
    v15 = type metadata accessor for InitialAppStateQueryEvent.Model(0);
    v16 = (char *)v3 + *(int *)(v15 + 28);
    LOBYTE(v24) = 3;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v24, v5, v17, v18);
    v19 = (char *)v3 + *(int *)(v15 + 32);
    LOBYTE(v24) = 4;
    v20 = type metadata accessor for TimedData(0);
    v21 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v24, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_63090()
{
  unint64_t result;

  result = qword_298BB8;
  if (!qword_298BB8)
  {
    result = swift_getWitnessTable(&unk_1F71FC, &type metadata for InitialAppStateQueryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298BB8);
  }
  return result;
}

unint64_t sub_630D4()
{
  unint64_t result;

  result = qword_298BC0;
  if (!qword_298BC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryData, &type metadata for LibraryData);
    atomic_store(result, (unint64_t *)&qword_298BC0);
  }
  return result;
}

unint64_t sub_63118()
{
  unint64_t result;

  result = qword_298BC8;
  if (!qword_298BC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingNowData, &type metadata for ReadingNowData);
    atomic_store(result, (unint64_t *)&qword_298BC8);
  }
  return result;
}

uint64_t InitialAppStateQueryEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;

  v34 = a2;
  v36 = type metadata accessor for TimedData(0);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for EventData(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_71B4(&qword_298BD0);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for InitialAppStateQueryEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_7988(a1, v13);
  v15 = sub_63090();
  v40 = v9;
  v16 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InitialAppStateQueryEvent.Model.CodingKeys, &type metadata for InitialAppStateQueryEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(a1);
  v32 = v6;
  v17 = v7;
  v41 = a1;
  v18 = v12;
  v20 = v37;
  v19 = v38;
  v42 = 0;
  v21 = sub_635B4();
  v22 = v39;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for LibraryData, &v42, v39, &type metadata for LibraryData, v21);
  *(_QWORD *)v18 = v43;
  v42 = 1;
  v23 = sub_635F8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for ReadingNowData, &v42, v22, &type metadata for ReadingNowData, v23);
  *((_QWORD *)v18 + 1) = v43;
  v42 = 2;
  v24 = sub_7DCC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for CollectionSummaryData, &v42, v22, &type metadata for CollectionSummaryData, v24);
  v31 = 0;
  *((_QWORD *)v18 + 2) = v43;
  LOBYTE(v43) = 3;
  v25 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v19, &v43, v22, v19, v25);
  (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 32))(&v18[*(int *)(v10 + 28)], v32, v19);
  LOBYTE(v43) = 4;
  v26 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v27 = v35;
  v28 = v22;
  v29 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v36, &v43, v28, v36, v26);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v40, v39);
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 32))(&v18[*(int *)(v10 + 32)], v27, v29);
  sub_6363C((uint64_t)v18, v34);
  sub_7DAC(v41);
  return sub_63680((uint64_t)v18);
}

unint64_t sub_635B4()
{
  unint64_t result;

  result = qword_298BD8;
  if (!qword_298BD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryData, &type metadata for LibraryData);
    atomic_store(result, (unint64_t *)&qword_298BD8);
  }
  return result;
}

unint64_t sub_635F8()
{
  unint64_t result;

  result = qword_298BE0;
  if (!qword_298BE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingNowData, &type metadata for ReadingNowData);
    atomic_store(result, (unint64_t *)&qword_298BE0);
  }
  return result;
}

uint64_t sub_6363C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InitialAppStateQueryEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_63680(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InitialAppStateQueryEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_636BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InitialAppStateQueryEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_636D0(_QWORD *a1)
{
  return InitialAppStateQueryEvent.Model.encode(to:)(a1);
}

uint64_t sub_636E4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295640, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298B70, (uint64_t)sub_626A8, a1);
}

uint64_t sub_63708@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295648, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298B88, (uint64_t)sub_626E8, a1);
}

uint64_t sub_6372C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_298BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = enum case for EventProperty.required<A>(_:);
  v12 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v11, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for InitialAppStateQueryEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = sub_71B4(&qword_298BA0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_298BA8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for InitialAppStateQueryEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_298BA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for InitialAppStateQueryEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for InitialAppStateQueryEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for InitialAppStateQueryEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for InitialAppStateQueryEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_71B4(&qword_298BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_298BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitialAppStateQueryEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_63EE4);
}

uint64_t sub_63EE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_71B4(&qword_298BA0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_298BA8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_295D68);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_295D70);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v8 = sub_71B4(&qword_295D78);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[8];
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for InitialAppStateQueryEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_63FE4);
}

uint64_t sub_63FE4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_71B4(&qword_298BA0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_298BA8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_295D68);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_295D70);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v10 = sub_71B4(&qword_295D78);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[8];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_640E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_B9C8(319, &qword_298C50, (uint64_t (*)(void))sub_635B4, (uint64_t (*)(void))sub_630D4, (uint64_t)&type metadata for LibraryData);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&unk_298C58, (uint64_t (*)(void))sub_635F8, (uint64_t (*)(void))sub_63118, (uint64_t)&type metadata for ReadingNowData);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, (unint64_t *)&qword_295E30, (uint64_t (*)(void))sub_7DCC, (uint64_t (*)(void))sub_79F0, (uint64_t)&type metadata for CollectionSummaryData);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_8734(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_87D8(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for InitialAppStateQueryEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    v9 = a2[2];
    a1[1] = v8;
    a1[2] = v9;
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for EventData(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    v15 = *(int *)(a3 + 32);
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v7;
}

uint64_t destroy for InitialAppStateQueryEvent.Model(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t *initializeWithCopy for InitialAppStateQueryEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[2];
  a1[2] = v8;
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for EventData(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t *assignWithCopy for InitialAppStateQueryEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[2];
  v11 = a2[2];
  a1[2] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(a3 + 32);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for InitialAppStateQueryEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for InitialAppStateQueryEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for EventData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitialAppStateQueryEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_646A0);
}

uint64_t sub_646A0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for EventData(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 28);
    }
    else
    {
      v11 = type metadata accessor for TimedData(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for InitialAppStateQueryEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_64758);
}

char *sub_64758(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_647F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = "\b";
  v5[1] = "\b";
  v5[2] = "\b";
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InitialAppStateQueryEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_648D4 + 4 * byte_1F702A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_64908 + 4 * byte_1F7025[v4]))();
}

uint64_t sub_64908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x64918);
  return result;
}

uint64_t sub_64924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6492CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_64930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_64938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InitialAppStateQueryEvent.Model.CodingKeys()
{
  return &type metadata for InitialAppStateQueryEvent.Model.CodingKeys;
}

unint64_t sub_64958()
{
  unint64_t result;

  result = qword_298D38;
  if (!qword_298D38)
  {
    result = swift_getWitnessTable(&unk_1F71D4, &type metadata for InitialAppStateQueryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298D38);
  }
  return result;
}

unint64_t sub_649A0()
{
  unint64_t result;

  result = qword_298D40;
  if (!qword_298D40)
  {
    result = swift_getWitnessTable(&unk_1F7144, &type metadata for InitialAppStateQueryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298D40);
  }
  return result;
}

unint64_t sub_649E8()
{
  unint64_t result;

  result = qword_298D48;
  if (!qword_298D48)
  {
    result = swift_getWitnessTable(&unk_1F716C, &type metadata for InitialAppStateQueryEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298D48);
  }
  return result;
}

uint64_t sub_64A2C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x447972617262696CLL && a2 == 0xEB00000000617461)
  {
    v5 = 0xEB00000000617461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x447972617262696CLL, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4E676E6964616572 && a2 == 0xEE0061746144776FLL)
  {
    v7 = 0xEE0061746144776FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E676E6964616572, 0xEE0061746144776FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015)
  {
    v8 = 0x800000000021E8A0;
    if (a2 == 0x800000000021E8A0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000000021E8A0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v9 = 0xE900000000000061;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_64C94(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_298D50, &enum case for SessionGroup.default(_:));
}

uint64_t static GetStartedViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295650, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298D50, a1);
}

uint64_t sub_64CD4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_298D68, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static GetStartedViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295658, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298D68, a1);
}

uint64_t PredictiveSearchSuggestionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PredictiveSearchSuggestionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t GetStartedViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GetStartedViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GetStartedViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_298DF0, (uint64_t)&nominal type descriptor for GetStartedViewEvent);
}

uint64_t GetStartedViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GetStartedViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GetStartedViewEvent.timedData.modify())()
{
  type metadata accessor for GetStartedViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GetStartedViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for GetStartedViewEvent(0) + 20);
  v5 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t PredictiveSearchSuggestionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GetStartedViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GetStartedViewEvent.Model(0) + 20);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GetStartedViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_298E80, (uint64_t)&nominal type descriptor for GetStartedViewEvent.Model);
}

uint64_t GetStartedViewEvent.Model.init(eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v7 = a3 + *(int *)(type metadata accessor for GetStartedViewEvent.Model(0) + 20);
  v8 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t sub_64FE8()
{
  _BYTE *v0;

  if (*v0)
    return 0x74614464656D6974;
  else
    return 0x746144746E657665;
}

uint64_t sub_65020@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_66128(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_65044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_65218();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6506C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_65218();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GetStartedViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_298D80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_65218();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GetStartedViewEvent.Model.CodingKeys, &type metadata for GetStartedViewEvent.Model.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for EventData(0);
  v13 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for GetStartedViewEvent.Model(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for TimedData(0);
    v16 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_65218()
{
  unint64_t result;

  result = qword_298D88;
  if (!qword_298D88)
  {
    result = swift_getWitnessTable(&unk_1F73F0, &type metadata for GetStartedViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298D88);
  }
  return result;
}

uint64_t GetStartedViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t StartedView;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v26 = a2;
  v28 = type metadata accessor for TimedData(0);
  v25 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_71B4(&qword_298D90);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  StartedView = type metadata accessor for GetStartedViewEvent.Model(0);
  __chkstk_darwin(StartedView);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_7988(a1, v12);
  v14 = sub_65218();
  v31 = v8;
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GetStartedViewEvent.Model.CodingKeys, &type metadata for GetStartedViewEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(a1);
  v16 = v6;
  v17 = (uint64_t)v11;
  v18 = a1;
  v19 = v27;
  v20 = v28;
  v35 = 0;
  v21 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v30, &v35, v32, v30, v21);
  v33 = v4;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v17, v29, v30);
  v34 = 1;
  v22 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, &v34, v32, v20, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v31, v32);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v17 + *(int *)(StartedView + 20), v19, v20);
  sub_6552C(v17, v26);
  sub_7DAC(v18);
  return sub_65570(v17);
}

uint64_t sub_6552C(uint64_t a1, uint64_t a2)
{
  uint64_t StartedView;

  StartedView = type metadata accessor for GetStartedViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(StartedView - 8) + 16))(a2, a1, StartedView);
  return a2;
}

uint64_t sub_65570(uint64_t a1)
{
  uint64_t StartedView;

  StartedView = type metadata accessor for GetStartedViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(StartedView - 8) + 8))(a1, StartedView);
  return a1;
}

uint64_t sub_655AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GetStartedViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_655C0(_QWORD *a1)
{
  return GetStartedViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_655D4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295650, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298D50, (uint64_t)sub_64C94, a1);
}

uint64_t sub_655F8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295658, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298D68, (uint64_t)sub_64CD4, a1);
}

uint64_t sub_6561C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for GetStartedViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_295D70);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for GetStartedViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for GetStartedViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for GetStartedViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for GetStartedViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for GetStartedViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetStartedViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_659CC);
}

uint64_t sub_659CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_295D70);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D78);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GetStartedViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_65A54);
}

uint64_t sub_65A54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_295D70);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D78);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_65AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_65EFC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_8734, (uint64_t (*)(uint64_t))sub_87D8);
}

uint64_t *initializeBufferWithCopyOfBuffer for GetStartedViewEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for GetStartedViewEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for GetStartedViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for GetStartedViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for GetStartedViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for GetStartedViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetStartedViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_65DEC);
}

uint64_t sub_65DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for EventData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for TimedData(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GetStartedViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_65E6C);
}

uint64_t sub_65E6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for EventData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for TimedData(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_65EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_65EFC(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData);
}

uint64_t sub_65EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  result = a4(319);
  if (v8 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    result = a5(319);
    if (v9 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v10, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GetStartedViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_65FD0 + 4 * byte_1F7255[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_66004 + 4 * byte_1F7250[v4]))();
}

uint64_t sub_66004(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6600C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x66014);
  return result;
}

uint64_t sub_66020(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x66028);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_6602C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_66034(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GetStartedViewEvent.Model.CodingKeys()
{
  return &type metadata for GetStartedViewEvent.Model.CodingKeys;
}

unint64_t sub_66054()
{
  unint64_t result;

  result = qword_298EB8;
  if (!qword_298EB8)
  {
    result = swift_getWitnessTable(&unk_1F73C8, &type metadata for GetStartedViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298EB8);
  }
  return result;
}

unint64_t sub_6609C()
{
  unint64_t result;

  result = qword_298EC0;
  if (!qword_298EC0)
  {
    result = swift_getWitnessTable(&unk_1F7338, &type metadata for GetStartedViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298EC0);
  }
  return result;
}

unint64_t sub_660E4()
{
  unint64_t result;

  result = qword_298EC8;
  if (!qword_298EC8)
  {
    result = swift_getWitnessTable(&unk_1F7360, &type metadata for GetStartedViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298EC8);
  }
  return result;
}

uint64_t sub_66128(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v5 = 0xE900000000000061;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t CollectionSummaryData.collectionSummary.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t CollectionSummaryData.collectionSummary.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

BookAnalytics::CollectionSummaryData __swiftcall CollectionSummaryData.init(collectionSummary:)(BookAnalytics::CollectionSummaryData collectionSummary)
{
  BookAnalytics::CollectionSummaryData *v1;

  v1->collectionSummary._rawValue = collectionSummary.collectionSummary._rawValue;
  return collectionSummary;
}

uint64_t static CollectionSummaryData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_66338(*a1, *a2);
}

uint64_t sub_66274(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_66338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v12;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_DWORD *)(a2 + 48);
    v4 = (_DWORD *)(a1 + 48);
    do
    {
      v5 = *((_QWORD *)v4 - 2);
      v6 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      v8 = *((_QWORD *)v3 - 2);
      v9 = *((_QWORD *)v3 - 1);
      v10 = *v3;
      if (v5 == v8 && v6 == v9)
      {
        if (v7 != v10)
          return 0;
      }
      else
      {
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v8, v9, 0);
        result = 0;
        if ((v12 & 1) == 0 || v7 != v10)
          return result;
      }
      v3 += 6;
      v4 += 6;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_663E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v13;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_DWORD *)(a1 + 48);
  v8 = *(unsigned __int8 *)(a1 + 52);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_DWORD *)(a2 + 48);
  if (v5 == v9 && v6 == v10)
  {
    if (v7 == v11)
      goto LABEL_12;
    return 0;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  result = 0;
  if ((v13 & 1) != 0 && v7 == v11)
LABEL_12:
    __asm { BR              X8 }
  return result;
}

uint64_t sub_666B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2[2])
    return 0;
  if (v2 && (_QWORD *)a1 != a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(unsigned __int8 *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 56);
    v7 = a2[4];
    v8 = a2[5];
    v9 = a2[6];
    v13 = a2[7];
    if ((v3 == v7 && v4 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v7, v8, 0) & 1) != 0)
      && (v5 == v9 && v12 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v12, v9, v13, 0) & 1) != 0))
    {
      __asm { BR              X8 }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_66AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  BOOL v12;
  _OWORD v14[4];
  _OWORD v15[4];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v10 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = (__int128 *)(a1 + 80);
      v5 = (__int128 *)(a2 + 48);
      do
      {
        v6 = *(v4 - 2);
        v15[0] = *(v4 - 3);
        v15[1] = v6;
        v7 = *v4;
        v15[2] = *(v4 - 1);
        v15[3] = v7;
        v8 = *v5;
        v14[0] = *(v5 - 1);
        v14[1] = v8;
        v9 = v5[2];
        v14[2] = v5[1];
        v14[3] = v9;
        v10 = _s13BookAnalytics25RemoteConfigNamespaceDataV2eeoiySbAC_ACtFZ_0((uint64_t *)v15, v14);
        v12 = v3-- != 0;
        if ((v10 & 1) == 0)
          break;
        v4 += 4;
        v5 += 4;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_66B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  float *v15;
  float *v16;
  uint64_t i;
  float v18;
  float v19;
  float v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v6 = (_QWORD *)(v4 + 24 * v3);
      v7 = v6[1];
      v8 = v6[2];
      v9 = (_QWORD *)(v5 + 24 * v3);
      v10 = v9[1];
      v11 = v9[2];
      v12 = *v6 == *v9 && v7 == v10;
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v6, v7, *v9, v10, 0) & 1) == 0)
        break;
      v13 = *(_QWORD *)(v8 + 16);
      if (v13 != *(_QWORD *)(v11 + 16))
        break;
      if (v13)
        v14 = v8 == v11;
      else
        v14 = 1;
      if (!v14)
      {
        if (*(float *)(v8 + 32) != *(float *)(v11 + 32))
          return 0;
        if (v13 != 1)
        {
          if (*(float *)(v8 + 36) != *(float *)(v11 + 36))
            return 0;
          v15 = (float *)(v8 + 40);
          v16 = (float *)(v11 + 40);
          for (i = v13 - 2; i; --i)
          {
            v18 = *v15++;
            v19 = v18;
            v20 = *v16++;
            if (v19 != v20)
              return 0;
          }
        }
      }
      if (++v3 == v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

BOOL sub_66C60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_66CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    v3 = a2;
    if (a1 != a2)
    {
      v4 = 0;
      v21 = a1;
      while (1)
      {
        v5 = a1 + v4;
        v6 = *(_QWORD *)(a1 + v4 + 32);
        v7 = *(_QWORD *)(v5 + 40);
        v8 = *(_DWORD *)(v5 + 48);
        v9 = *(_QWORD *)(v5 + 56);
        v10 = *(_QWORD *)(v5 + 64);
        v33 = *(_QWORD *)(v5 + 72);
        v34 = *(_QWORD *)(v5 + 80);
        v31 = *(_QWORD *)(v5 + 96);
        v32 = *(_QWORD *)(v5 + 88);
        v25 = *(_QWORD *)(v5 + 120);
        v26 = *(_QWORD *)(v5 + 112);
        v11 = *(_QWORD *)(v3 + v4 + 32);
        v12 = *(_QWORD *)(v3 + v4 + 40);
        v13 = *(_DWORD *)(v3 + v4 + 48);
        v14 = *(_QWORD *)(v3 + v4 + 56);
        v15 = *(_QWORD *)(v3 + v4 + 64);
        v17 = *(_QWORD *)(v3 + v4 + 72);
        v16 = *(_QWORD *)(v3 + v4 + 80);
        v30 = *(_QWORD *)(v3 + v4 + 88);
        v29 = *(_QWORD *)(v3 + v4 + 96);
        v27 = *(_DWORD *)(v3 + v4 + 104);
        v28 = *(_DWORD *)(v5 + 104);
        v23 = *(_QWORD *)(v3 + v4 + 120);
        v24 = *(_QWORD *)(v3 + v4 + 112);
        if (v6 != v11)
          goto LABEL_11;
        if (v7 == v12)
        {
          if (v8 != v13)
            return 0;
        }
        else
        {
LABEL_11:
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v11, v12, 0);
          result = 0;
          if ((v18 & 1) == 0 || v8 != v13)
            return result;
        }
        if ((v9 != v14 || v10 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v14, v15, 0) & 1) == 0
          || (v33 != v17 || v34 != v16)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v17, v16, 0) & 1) == 0)
        {
          return 0;
        }
        if (v32 == v30 && v31 == v29)
        {
          if (v28 != v27)
            return 0;
        }
        else
        {
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, v30, v29, 0);
          result = 0;
          if ((v20 & 1) == 0 || v28 != v27)
            return result;
        }
        if ((v26 != v24 || v25 != v23)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v24, v23, 0) & 1) == 0)
        {
          return 0;
        }
        v4 += 96;
        --v2;
        a1 = v21;
        v3 = a2;
        if (!v2)
          return 1;
      }
    }
  }
  return 1;
}

uint64_t sub_66EC4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == a2[2])
  {
    if (!v2 || (_QWORD *)a1 == a2)
      return 1;
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(unsigned __int8 *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 56);
    v7 = a2[4];
    v8 = a2[5];
    v9 = a2[6];
    v13 = a2[7];
    if ((v3 == v7 && v4 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v7, v8, 0) & 1) != 0)
      && (v5 == v9 && v12 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v12, v9, v13, 0) & 1) != 0))
    {
      __asm { BR              X8 }
    }
  }
  return 0;
}

uint64_t sub_672CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    v3 = a2;
    if (a1 != a2)
    {
      v4 = 0;
      v22 = a1;
      while (1)
      {
        v5 = (_QWORD *)(a1 + v4);
        v6 = *(_QWORD *)(a1 + v4 + 32);
        v7 = v5[5];
        v8 = v5[6];
        v9 = v5[7];
        v10 = v5[8];
        v11 = v5[9];
        v12 = *(_QWORD *)(v3 + v4 + 32);
        v13 = *(_QWORD *)(v3 + v4 + 40);
        v14 = *(_QWORD *)(v3 + v4 + 48);
        v15 = *(_QWORD *)(v3 + v4 + 56);
        v16 = *(_QWORD *)(v3 + v4 + 64);
        v17 = *(_QWORD *)(v3 + v4 + 72);
        v18 = v6 == v12 && v7 == v13;
        if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0) & 1) == 0)
          break;
        v19 = v8 == v14 && v9 == v15;
        if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v14, v15, 0) & 1) == 0)
          break;
        v20 = v10 == v16 && v11 == v17;
        if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v16, v17, 0) & 1) == 0)
          break;
        v4 += 48;
        --v2;
        a1 = v22;
        v3 = a2;
        if (!v2)
          return 1;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t sub_673DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == a2[2])
  {
    if (!v2 || (_QWORD *)a1 == a2)
      return 1;
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(unsigned __int8 *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 56);
    v7 = a2[4];
    v8 = a2[5];
    v9 = a2[6];
    v13 = a2[7];
    if ((v3 == v7 && v4 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v7, v8, 0) & 1) != 0)
      && (v5 == v9 && v12 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v12, v9, v13, 0) & 1) != 0))
    {
      __asm { BR              X8 }
    }
  }
  return 0;
}

unint64_t sub_677F4()
{
  return 0xD000000000000011;
}

uint64_t sub_67810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_67D8C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_67838(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_679A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_67860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_679A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionSummaryData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_71B4(&qword_298ED0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_679A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionSummaryData.CodingKeys, &type metadata for CollectionSummaryData.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_71B4(&qword_298EE0);
  v12 = sub_67B70(&qword_298EE8, (uint64_t (*)(void))sub_97AC, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_679A8()
{
  unint64_t result;

  result = qword_298ED8;
  if (!qword_298ED8)
  {
    result = swift_getWitnessTable(&unk_1F761C, &type metadata for CollectionSummaryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298ED8);
  }
  return result;
}

uint64_t sub_679EC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t CollectionSummaryData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_71B4(&qword_298EF0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_679A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionSummaryData.CodingKeys, &type metadata for CollectionSummaryData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_71B4(&qword_298EE0);
    v13 = sub_67B70(&qword_298EF8, (uint64_t (*)(void))sub_9764, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_7DAC(a1);
}

uint64_t sub_67B70(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_298EE0);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_67BE0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CollectionSummaryData.init(from:)(a1, a2);
}

uint64_t sub_67BF4(_QWORD *a1)
{
  return CollectionSummaryData.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for CollectionSummaryData()
{
  return &type metadata for CollectionSummaryData;
}

uint64_t storeEnumTagSinglePayload for CollectionSummaryData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_67C58 + 4 * byte_1F7478[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_67C78 + 4 * byte_1F747D[v4]))();
}

_BYTE *sub_67C58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_67C78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_67C80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_67C88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_67C90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_67C98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CollectionSummaryData.CodingKeys()
{
  return &type metadata for CollectionSummaryData.CodingKeys;
}

unint64_t sub_67CB8()
{
  unint64_t result;

  result = qword_298F00;
  if (!qword_298F00)
  {
    result = swift_getWitnessTable(&unk_1F75F4, &type metadata for CollectionSummaryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298F00);
  }
  return result;
}

unint64_t sub_67D00()
{
  unint64_t result;

  result = qword_298F08;
  if (!qword_298F08)
  {
    result = swift_getWitnessTable(&unk_1F7564, &type metadata for CollectionSummaryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298F08);
  }
  return result;
}

unint64_t sub_67D48()
{
  unint64_t result;

  result = qword_298F10;
  if (!qword_298F10)
  {
    result = swift_getWitnessTable(&unk_1F758C, &type metadata for CollectionSummaryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298F10);
  }
  return result;
}

uint64_t sub_67D8C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F430)
  {
    swift_bridgeObjectRelease(0x800000000021F430);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F430, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

BookAnalytics::ViewAction_optional __swiftcall ViewAction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::ViewAction_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266BB0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ViewAction.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_67E98 + 4 * byte_1F766C[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

unint64_t sub_67E98()
{
  return 0xD000000000000015;
}

uint64_t sub_67EB4()
{
  return 0x6570697773;
}

unint64_t sub_67EC8()
{
  return 0xD000000000000016;
}

uint64_t sub_67EE8()
{
  return 0x63656C6553626174;
}

uint64_t sub_67F08()
{
  return 6579297;
}

uint64_t sub_67F18()
{
  return 0x65766F6D6572;
}

void sub_67F2C(char *a1)
{
  sub_254F0(*a1);
}

unint64_t sub_67F3C()
{
  unint64_t result;

  result = qword_298F18;
  if (!qword_298F18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewAction, &type metadata for ViewAction);
    atomic_store(result, (unint64_t *)&qword_298F18);
  }
  return result;
}

void sub_67F80()
{
  char *v0;

  sub_1D2DEC(0, *v0);
}

void sub_67F8C(uint64_t a1)
{
  char *v1;

  sub_1ED318(a1, *v1);
}

void sub_67F94(uint64_t a1)
{
  char *v1;

  sub_1D2DEC(a1, *v1);
}

BookAnalytics::ViewAction_optional sub_67F9C(Swift::String *a1)
{
  return ViewAction.init(rawValue:)(*a1);
}

uint64_t sub_67FA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ViewAction.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_67FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_68140();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_68028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_68140();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ViewAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_680C0 + 4 * byte_1F7678[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_680F4 + 4 * byte_1F7673[v4]))();
}

uint64_t sub_680F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_680FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x68104);
  return result;
}

uint64_t sub_68110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x68118);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_6811C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_68124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewAction()
{
  return &type metadata for ViewAction;
}

unint64_t sub_68140()
{
  unint64_t result;

  result = qword_298F20;
  if (!qword_298F20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewAction, &type metadata for ViewAction);
    atomic_store(result, (unint64_t *)&qword_298F20);
  }
  return result;
}

uint64_t UserEventStorageData.productCardViewCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t UserEventStorageData.productCardViewCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.readingSampleCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t UserEventStorageData.readingSampleCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.previewAudiobookCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t UserEventStorageData.previewAudiobookCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.readCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t UserEventStorageData.readCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.playCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t UserEventStorageData.playCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.addToWantToReadCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t UserEventStorageData.addToWantToReadCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.sampleBooksDownloadedCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t UserEventStorageData.sampleBooksDownloadedCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = result;
  *(_BYTE *)(v2 + 104) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.ratedBookCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t UserEventStorageData.ratedBookCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = result;
  *(_BYTE *)(v2 + 120) = a2 & 1;
  return result;
}

uint64_t UserEventStorageData.likedCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t UserEventStorageData.likedCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = result;
  *(_BYTE *)(v2 + 136) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.likedCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.shareCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t UserEventStorageData.shareCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = result;
  *(_BYTE *)(v2 + 152) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.shareCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.totalContentExposedCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t UserEventStorageData.totalContentExposedCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = result;
  *(_BYTE *)(v2 + 168) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.totalContentExposedCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.unLikedEventCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t UserEventStorageData.unLikedEventCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = result;
  *(_BYTE *)(v2 + 184) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.unLikedEventCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.hiddenEventCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t UserEventStorageData.hiddenEventCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 192) = result;
  *(_BYTE *)(v2 + 200) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.hiddenEventCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.removefromWTRCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t UserEventStorageData.removefromWTRCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 208) = result;
  *(_BYTE *)(v2 + 216) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.removefromWTRCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.deleteSampleCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 224);
}

uint64_t UserEventStorageData.deleteSampleCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 224) = result;
  *(_BYTE *)(v2 + 232) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.deleteSampleCount.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.lastSyncFromCloudTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t UserEventStorageData.lastSyncFromCloudTimestamp.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 240) = result;
  *(_BYTE *)(v2 + 248) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.lastSyncFromCloudTimestamp.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.lastSyncFromCloudError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 264));
  return v1;
}

uint64_t UserEventStorageData.lastSyncFromCloudError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 264));
  *(_QWORD *)(v2 + 256) = a1;
  *(_QWORD *)(v2 + 264) = a2;
  return result;
}

uint64_t (*UserEventStorageData.lastSyncFromCloudError.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.lastSyncErrorFromCloudTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t UserEventStorageData.lastSyncErrorFromCloudTimestamp.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 272) = result;
  *(_BYTE *)(v2 + 280) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.lastSyncErrorFromCloudTimestamp.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.lastSyncToCloudTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 288);
}

uint64_t UserEventStorageData.lastSyncToCloudTimestamp.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 288) = result;
  *(_BYTE *)(v2 + 296) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.lastSyncToCloudTimestamp.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.lastSyncToCloudError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 304);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 312));
  return v1;
}

uint64_t UserEventStorageData.lastSyncToCloudError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 312));
  *(_QWORD *)(v2 + 304) = a1;
  *(_QWORD *)(v2 + 312) = a2;
  return result;
}

uint64_t (*UserEventStorageData.lastSyncToCloudError.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t UserEventStorageData.lastSyncToFromCloudTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 320);
}

uint64_t UserEventStorageData.lastSyncToFromCloudTimestamp.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 320) = result;
  *(_BYTE *)(v2 + 328) = a2 & 1;
  return result;
}

uint64_t (*UserEventStorageData.lastSyncToFromCloudTimestamp.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void __swiftcall UserEventStorageData.init(productCardViewCount:readingSampleCount:previewAudiobookCount:readCount:playCount:addToWantToReadCount:sampleBooksDownloadedCount:ratedBookCount:likedCount:shareCount:totalContentExposedCount:unLikedEventCount:hiddenEventCount:removefromWTRCount:deleteSampleCount:lastSyncFromCloudTimestamp:lastSyncFromCloudError:lastSyncErrorFromCloudTimestamp:lastSyncToCloudTimestamp:lastSyncToCloudError:lastSyncToFromCloudTimestamp:)(BookAnalytics::UserEventStorageData *__return_ptr retstr, Swift::Int64_optional productCardViewCount, Swift::Int64_optional readingSampleCount, Swift::Int64_optional previewAudiobookCount, Swift::Int64_optional readCount, Swift::Int64_optional playCount, Swift::Int64_optional addToWantToReadCount, Swift::Int64_optional sampleBooksDownloadedCount, Swift::Int64_optional ratedBookCount, Swift::Int64_optional likedCount, Swift::Int64_optional shareCount, Swift::Int64_optional totalContentExposedCount, Swift::Int64_optional unLikedEventCount, Swift::Int64_optional hiddenEventCount, Swift::Int64_optional removefromWTRCount, Swift::Int64_optional deleteSampleCount, Swift::Int64_optional lastSyncFromCloudTimestamp, Swift::String_optional lastSyncFromCloudError, Swift::Int64_optional lastSyncErrorFromCloudTimestamp, Swift::Int64_optional lastSyncToCloudTimestamp,Swift::String_optional lastSyncToCloudError,Swift::Int64_optional lastSyncToFromCloudTimestamp)
{
  retstr->productCardViewCount.value = productCardViewCount.value;
  retstr->productCardViewCount.is_nil = productCardViewCount.is_nil;
  retstr->readingSampleCount.value = readingSampleCount.value;
  retstr->readingSampleCount.is_nil = readingSampleCount.is_nil;
  retstr->previewAudiobookCount.value = previewAudiobookCount.value;
  retstr->previewAudiobookCount.is_nil = previewAudiobookCount.is_nil;
  retstr->readCount.value = readCount.value;
  retstr->readCount.is_nil = readCount.is_nil;
  retstr->playCount.value = playCount.value;
  retstr->playCount.is_nil = playCount.is_nil;
  retstr->addToWantToReadCount.value = addToWantToReadCount.value;
  retstr->addToWantToReadCount.is_nil = addToWantToReadCount.is_nil;
  retstr->sampleBooksDownloadedCount.value = sampleBooksDownloadedCount.value;
  retstr->sampleBooksDownloadedCount.is_nil = sampleBooksDownloadedCount.is_nil;
  retstr->ratedBookCount.value = ratedBookCount.value;
  retstr->ratedBookCount.is_nil = ratedBookCount.is_nil;
  retstr->likedCount.value = likedCount.value;
  retstr->likedCount.is_nil = likedCount.is_nil;
  retstr->shareCount.value = shareCount.value;
  retstr->shareCount.is_nil = shareCount.is_nil;
  retstr->totalContentExposedCount.value = totalContentExposedCount.value;
  retstr->totalContentExposedCount.is_nil = totalContentExposedCount.is_nil;
  retstr->unLikedEventCount.value = unLikedEventCount.value;
  retstr->unLikedEventCount.is_nil = unLikedEventCount.is_nil;
  retstr->hiddenEventCount.value = hiddenEventCount.value;
  retstr->hiddenEventCount.is_nil = hiddenEventCount.is_nil;
  retstr->removefromWTRCount.value = removefromWTRCount.value;
  retstr->removefromWTRCount.is_nil = removefromWTRCount.is_nil;
  retstr->deleteSampleCount.value = deleteSampleCount.value;
  retstr->deleteSampleCount.is_nil = deleteSampleCount.is_nil;
  retstr->lastSyncFromCloudTimestamp.value = lastSyncFromCloudTimestamp.value;
  retstr->lastSyncFromCloudTimestamp.is_nil = lastSyncFromCloudTimestamp.is_nil;
  retstr->lastSyncErrorFromCloudTimestamp.value = lastSyncErrorFromCloudTimestamp.value;
  retstr->lastSyncErrorFromCloudTimestamp.is_nil = lastSyncErrorFromCloudTimestamp.is_nil;
  retstr->lastSyncToCloudTimestamp.value = lastSyncToCloudTimestamp.value;
  retstr->lastSyncToCloudTimestamp.is_nil = lastSyncToCloudTimestamp.is_nil;
  retstr->lastSyncToFromCloudTimestamp.value = lastSyncToFromCloudTimestamp.value;
  retstr->lastSyncToFromCloudTimestamp.is_nil = lastSyncToFromCloudTimestamp.is_nil;
  retstr->lastSyncFromCloudError = lastSyncFromCloudError;
  retstr->lastSyncToCloudError = lastSyncToCloudError;
}

uint64_t sub_68750(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_68788 + 4 * byte_1F77A0[a1]))(0xD000000000000014, 0x800000000021F450);
}

uint64_t sub_68788(uint64_t a1)
{
  return a1 - 2;
}

uint64_t sub_688F0()
{
  unsigned __int8 *v0;

  return sub_68750(*v0);
}

uint64_t sub_688F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_6AF5C(a1, a2);
  *a3 = result;
  return result;
}

void sub_6891C(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_68928(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6A628();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_68950(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6A628();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserEventStorageData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char v61;

  v3 = sub_71B4(&qword_298F28);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v57 = v1[2];
  v58 = v7;
  v60 = *((unsigned __int8 *)v1 + 24);
  v56 = v1[4];
  v55 = *((unsigned __int8 *)v1 + 40);
  v54 = v1[6];
  v53 = *((unsigned __int8 *)v1 + 56);
  v52 = v1[8];
  v51 = *((unsigned __int8 *)v1 + 72);
  v50 = v1[10];
  v49 = *((unsigned __int8 *)v1 + 88);
  v48 = v1[12];
  v47 = *((unsigned __int8 *)v1 + 104);
  v46 = v1[14];
  v45 = *((unsigned __int8 *)v1 + 120);
  v44 = v1[16];
  v43 = *((unsigned __int8 *)v1 + 136);
  v42 = v1[18];
  LODWORD(v7) = *((unsigned __int8 *)v1 + 152);
  v39 = v1[20];
  v40 = *((unsigned __int8 *)v1 + 168);
  v41 = v7;
  v37 = v1[22];
  v38 = *((unsigned __int8 *)v1 + 184);
  v35 = v1[24];
  v36 = *((unsigned __int8 *)v1 + 200);
  v33 = v1[26];
  v34 = *((unsigned __int8 *)v1 + 216);
  v31 = v1[28];
  v32 = *((unsigned __int8 *)v1 + 232);
  v29 = v1[30];
  v30 = *((unsigned __int8 *)v1 + 248);
  v27 = v1[32];
  v28 = v1[33];
  v21 = v1[34];
  v22 = *((unsigned __int8 *)v1 + 280);
  v23 = v1[36];
  v25 = v1[38];
  v26 = v1[39];
  v20 = v1[40];
  v24 = *((unsigned __int8 *)v1 + 296);
  v9 = *((unsigned __int8 *)v1 + 328);
  v11 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v11);
  v12 = sub_6A628();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserEventStorageData.CodingKeys, &type metadata for UserEventStorageData.CodingKeys, v12, v11, v10);
  v61 = 0;
  v13 = v59;
  v14 = v6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58, v8, &v61, v3);
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v15 = v55;
  v16 = v56;
  v17 = v53;
  v18 = v54;
  LODWORD(v59) = v9;
  v61 = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v57, v60, &v61, v3);
  v61 = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v15, &v61, v3);
  v61 = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v17, &v61, v3);
  v61 = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, v51, &v61, v3);
  v61 = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v49, &v61, v3);
  v61 = 6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v47, &v61, v3);
  v61 = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v45, &v61, v3);
  v61 = 8;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v43, &v61, v3);
  v61 = 9;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v41, &v61, v3);
  v61 = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, &v61, v3);
  v61 = 11;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, &v61, v3);
  v61 = 12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v61, v3);
  v61 = 13;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v61, v3);
  v61 = 14;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v61, v3);
  v61 = 15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v61, v3);
  v61 = 16;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v61, v3);
  v61 = 17;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v61, v3);
  v61 = 18;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v61, v3);
  v61 = 19;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v61, v3);
  v61 = 20;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v59, &v61, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v14, v3);
}

uint64_t UserEventStorageData.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  void *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[329];
  char v109;
  uint64_t v110;
  char v111;
  _BYTE v112[7];
  uint64_t v113;
  char v114;
  _BYTE v115[7];
  uint64_t v116;
  char v117;
  _BYTE v118[7];
  uint64_t v119;
  char v120;
  _BYTE v121[7];
  uint64_t v122;
  char v123;
  _BYTE v124[7];
  uint64_t v125;
  char v126;
  _BYTE v127[7];
  uint64_t v128;
  char v129;
  _BYTE v130[7];
  uint64_t v131;
  char v132;
  _BYTE v133[7];
  uint64_t v134;
  char v135;
  _BYTE v136[7];
  uint64_t v137;
  char v138;
  _BYTE v139[7];
  uint64_t v140;
  char v141;
  _BYTE v142[7];
  uint64_t v143;
  char v144;
  _BYTE v145[7];
  uint64_t v146;
  char v147;
  _BYTE v148[7];
  uint64_t v149;
  char v150;
  _BYTE v151[7];
  uint64_t v152;
  char v153;
  _BYTE v154[7];
  uint64_t v155;
  char v156;
  _BYTE v157[7];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  _BYTE v162[7];
  uint64_t v163;
  char v164;
  _BYTE v165[7];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  char v170;
  _BYTE v171[7];
  char v172;
  _BYTE v173[7];
  char v174;
  _BYTE v175[7];
  char v176;
  _BYTE v177[7];
  char v178;
  _BYTE v179[7];
  char v180;
  _BYTE v181[7];
  char v182;
  _BYTE v183[7];
  char v184;
  _BYTE v185[7];
  char v186;
  _BYTE v187[7];
  char v188;
  _BYTE v189[7];
  char v190;
  _BYTE v191[7];
  char v192;
  _BYTE v193[7];
  char v194;
  _BYTE v195[7];
  char v196;
  _BYTE v197[7];
  char v198;
  _BYTE v199[7];
  char v200;
  _BYTE v201[7];
  char v202;
  _BYTE v203[7];
  char v204;
  _BYTE v205[7];
  char v206;
  uint64_t v207;

  v91 = sub_71B4(&qword_298F38);
  v5 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = 1;
  v204 = 1;
  v202 = 1;
  v200 = 1;
  v198 = 1;
  v196 = 1;
  v194 = 1;
  v192 = 1;
  v190 = 1;
  v188 = 1;
  v186 = 1;
  v184 = 1;
  v182 = 1;
  v180 = 1;
  v178 = 1;
  v176 = 1;
  v174 = 1;
  v172 = 1;
  v170 = 1;
  v8 = a1[3];
  v9 = a1[4];
  v92 = a1;
  sub_7988(a1, v8);
  v10 = sub_6A628();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserEventStorageData.CodingKeys, &type metadata for UserEventStorageData.CodingKeys, v10, v8, v9);
  if (v2)
  {
    v207 = v2;
    v98 = 0;
    v99 = 0;
    v96 = 0;
    v97 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v100 = 0;
    v101 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v92;
  }
  else
  {
    v11 = v5;
    LOBYTE(v110) = 0;
    v12 = v91;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v24 = v23;
    v90 = v13;
    v206 = v23 & 1;
    LOBYTE(v110) = 1;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v12);
    v27 = v26;
    v89 = v25;
    v204 = v26 & 1;
    LOBYTE(v110) = 2;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v87 = v27;
    v88 = v28;
    v202 = v29 & 1;
    LOBYTE(v110) = 3;
    v30 = v29;
    v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v86 = v30;
    v200 = v31 & 1;
    LOBYTE(v110) = 4;
    v32 = v31;
    v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v84 = v32;
    v198 = v33 & 1;
    LOBYTE(v110) = 5;
    v34 = v33;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v82 = v34;
    v83 = v35;
    v196 = v36 & 1;
    LOBYTE(v110) = 6;
    v37 = v36;
    v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v81 = v39;
    v194 = v39 & 1;
    LOBYTE(v110) = 7;
    v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v80 = v38;
    v78 = v40;
    v192 = v40 & 1;
    LOBYTE(v110) = 8;
    v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v207 = 0;
    v76 = a2;
    v100 = v41;
    v75 = v42;
    v190 = v42 & 1;
    LOBYTE(v110) = 9;
    v107 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v77 = v43;
    v207 = 0;
    v188 = v43 & 1;
    LOBYTE(v110) = 10;
    v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v74 = v44;
    v207 = 0;
    v186 = v44 & 1;
    LOBYTE(v110) = 11;
    v105 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v73 = v45;
    v207 = 0;
    v184 = v45 & 1;
    LOBYTE(v110) = 12;
    v104 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v72 = v46;
    v207 = 0;
    v182 = v46 & 1;
    LOBYTE(v110) = 13;
    v103 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v207 = 0;
    v48 = v47;
    v180 = v47 & 1;
    LOBYTE(v110) = 14;
    v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v71 = v49;
    v207 = 0;
    v178 = v49 & 1;
    LOBYTE(v110) = 15;
    v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v70 = v50;
    v207 = 0;
    v176 = v50 & 1;
    LOBYTE(v110) = 16;
    v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v93 = v51;
    v207 = 0;
    LOBYTE(v110) = 17;
    swift_bridgeObjectRetain(v93);
    v52 = v207;
    v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
    v69 = v53;
    v207 = v52;
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v91);
      swift_bridgeObjectRelease(v93);
      v98 = 0;
      v99 = 0;
      v97 = 0;
      v94 = 0;
    }
    else
    {
      v174 = v69 & 1;
      LOBYTE(v110) = 18;
      v97 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
      v68 = v54;
      v207 = 0;
      v172 = v54 & 1;
      LOBYTE(v110) = 19;
      v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v91);
      v99 = v55;
      v207 = 0;
      v109 = 20;
      swift_bridgeObjectRetain(v55);
      v56 = v207;
      v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v91);
      v66 = v57;
      v207 = v56;
      if (!v56)
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v91);
        v108[280] = v69 & 1;
        v108[296] = v68 & 1;
        v108[328] = v66 & 1;
        v170 = v66 & 1;
        v108[8] = v24 & 1;
        v108[24] = v87 & 1;
        v108[40] = v86 & 1;
        v108[56] = v84 & 1;
        v108[72] = v82 & 1;
        v108[88] = v37 & 1;
        v108[104] = v81 & 1;
        v108[120] = v78 & 1;
        v108[136] = v75 & 1;
        v108[152] = v77 & 1;
        v108[168] = v74 & 1;
        v108[184] = v73 & 1;
        v108[200] = v72 & 1;
        v108[216] = v48 & 1;
        v108[232] = v71 & 1;
        v108[248] = v70 & 1;
        v59 = v89;
        v58 = v90;
        *(_QWORD *)v108 = v90;
        *(_QWORD *)&v108[16] = v89;
        v60 = v88;
        *(_QWORD *)&v108[32] = v88;
        v61 = v101;
        *(_QWORD *)&v108[48] = v101;
        *(_QWORD *)&v108[64] = v85;
        *(_QWORD *)&v108[80] = v83;
        *(_QWORD *)&v108[96] = v80;
        *(_QWORD *)&v108[112] = v79;
        *(_QWORD *)&v108[128] = v100;
        v62 = v106;
        *(_QWORD *)&v108[144] = v107;
        *(_QWORD *)&v108[160] = v106;
        *(_QWORD *)&v108[176] = v105;
        *(_QWORD *)&v108[192] = v104;
        *(_QWORD *)&v108[208] = v103;
        *(_QWORD *)&v108[224] = v102;
        *(_QWORD *)&v108[240] = v96;
        *(_QWORD *)&v108[256] = v95;
        v63 = v93;
        *(_QWORD *)&v108[264] = v93;
        *(_QWORD *)&v108[272] = v94;
        *(_QWORD *)&v108[288] = v97;
        v64 = v99;
        *(_QWORD *)&v108[304] = v98;
        *(_QWORD *)&v108[312] = v99;
        *(_QWORD *)&v108[320] = v67;
        sub_6A6A0((uint64_t)v108);
        swift_bridgeObjectRelease(v63);
        swift_bridgeObjectRelease(v64);
        memcpy(v76, v108, 0x149uLL);
        sub_7DAC(v92);
        v110 = v58;
        v111 = v206;
        *(_DWORD *)v112 = *(_DWORD *)v205;
        *(_DWORD *)&v112[3] = *(_DWORD *)&v205[3];
        v113 = v59;
        v114 = v204;
        *(_DWORD *)v115 = *(_DWORD *)v203;
        *(_DWORD *)&v115[3] = *(_DWORD *)&v203[3];
        v116 = v60;
        v117 = v202;
        *(_DWORD *)&v118[3] = *(_DWORD *)&v201[3];
        *(_DWORD *)v118 = *(_DWORD *)v201;
        v119 = v61;
        v120 = v200;
        *(_DWORD *)v121 = *(_DWORD *)v199;
        *(_DWORD *)&v121[3] = *(_DWORD *)&v199[3];
        v122 = v85;
        v123 = v198;
        *(_DWORD *)v124 = *(_DWORD *)v197;
        *(_DWORD *)&v124[3] = *(_DWORD *)&v197[3];
        v125 = v83;
        v126 = v196;
        *(_DWORD *)&v127[3] = *(_DWORD *)&v195[3];
        *(_DWORD *)v127 = *(_DWORD *)v195;
        v128 = v80;
        v129 = v194;
        *(_DWORD *)&v130[3] = *(_DWORD *)&v193[3];
        *(_DWORD *)v130 = *(_DWORD *)v193;
        v131 = v79;
        v132 = v192;
        *(_DWORD *)&v133[3] = *(_DWORD *)&v191[3];
        *(_DWORD *)v133 = *(_DWORD *)v191;
        v134 = v100;
        v135 = v190;
        *(_DWORD *)&v136[3] = *(_DWORD *)&v189[3];
        *(_DWORD *)v136 = *(_DWORD *)v189;
        v137 = v107;
        v138 = v188;
        *(_DWORD *)&v139[3] = *(_DWORD *)&v187[3];
        *(_DWORD *)v139 = *(_DWORD *)v187;
        v140 = v62;
        v141 = v186;
        *(_DWORD *)&v142[3] = *(_DWORD *)&v185[3];
        *(_DWORD *)v142 = *(_DWORD *)v185;
        v143 = v105;
        v144 = v184;
        *(_DWORD *)&v145[3] = *(_DWORD *)&v183[3];
        *(_DWORD *)v145 = *(_DWORD *)v183;
        v146 = v104;
        v147 = v182;
        *(_DWORD *)&v148[3] = *(_DWORD *)&v181[3];
        *(_DWORD *)v148 = *(_DWORD *)v181;
        v149 = v103;
        v150 = v180;
        *(_DWORD *)&v151[3] = *(_DWORD *)&v179[3];
        *(_DWORD *)v151 = *(_DWORD *)v179;
        v152 = v102;
        v153 = v178;
        *(_DWORD *)&v154[3] = *(_DWORD *)&v177[3];
        *(_DWORD *)v154 = *(_DWORD *)v177;
        v155 = v96;
        v156 = v176;
        *(_DWORD *)&v157[3] = *(_DWORD *)&v175[3];
        *(_DWORD *)v157 = *(_DWORD *)v175;
        v158 = v95;
        v159 = v63;
        v160 = v94;
        v161 = v174;
        *(_DWORD *)v162 = *(_DWORD *)v173;
        *(_DWORD *)&v162[3] = *(_DWORD *)&v173[3];
        v163 = v97;
        v164 = v172;
        *(_DWORD *)v165 = *(_DWORD *)v171;
        *(_DWORD *)&v165[3] = *(_DWORD *)&v171[3];
        v166 = v98;
        v167 = v64;
        v168 = v67;
        goto LABEL_5;
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v91);
      swift_bridgeObjectRelease(v93);
      swift_bridgeObjectRelease(v99);
    }
    v21 = v92;
    v19 = v89;
    v20 = v90;
    v18 = v88;
    v17 = v85;
    v16 = v83;
    v14 = v79;
    v15 = v80;
  }
  sub_7DAC(v21);
  v110 = v20;
  v111 = v206;
  *(_DWORD *)v112 = *(_DWORD *)v205;
  *(_DWORD *)&v112[3] = *(_DWORD *)&v205[3];
  v113 = v19;
  v114 = v204;
  *(_DWORD *)v115 = *(_DWORD *)v203;
  *(_DWORD *)&v115[3] = *(_DWORD *)&v203[3];
  v116 = v18;
  v117 = v202;
  *(_DWORD *)&v118[3] = *(_DWORD *)&v201[3];
  *(_DWORD *)v118 = *(_DWORD *)v201;
  v119 = v101;
  v120 = v200;
  *(_DWORD *)v121 = *(_DWORD *)v199;
  *(_DWORD *)&v121[3] = *(_DWORD *)&v199[3];
  v122 = v17;
  v123 = v198;
  *(_DWORD *)v124 = *(_DWORD *)v197;
  *(_DWORD *)&v124[3] = *(_DWORD *)&v197[3];
  v125 = v16;
  v126 = v196;
  *(_DWORD *)&v127[3] = *(_DWORD *)&v195[3];
  *(_DWORD *)v127 = *(_DWORD *)v195;
  v128 = v15;
  v129 = v194;
  *(_DWORD *)&v130[3] = *(_DWORD *)&v193[3];
  *(_DWORD *)v130 = *(_DWORD *)v193;
  v131 = v14;
  v132 = v192;
  *(_DWORD *)&v133[3] = *(_DWORD *)&v191[3];
  *(_DWORD *)v133 = *(_DWORD *)v191;
  v134 = v100;
  v135 = v190;
  *(_DWORD *)&v136[3] = *(_DWORD *)&v189[3];
  *(_DWORD *)v136 = *(_DWORD *)v189;
  v137 = v107;
  v138 = v188;
  *(_DWORD *)&v139[3] = *(_DWORD *)&v187[3];
  *(_DWORD *)v139 = *(_DWORD *)v187;
  v140 = v106;
  v141 = v186;
  *(_DWORD *)&v142[3] = *(_DWORD *)&v185[3];
  *(_DWORD *)v142 = *(_DWORD *)v185;
  v143 = v105;
  v144 = v184;
  *(_DWORD *)&v145[3] = *(_DWORD *)&v183[3];
  *(_DWORD *)v145 = *(_DWORD *)v183;
  v146 = v104;
  v147 = v182;
  *(_DWORD *)&v148[3] = *(_DWORD *)&v181[3];
  *(_DWORD *)v148 = *(_DWORD *)v181;
  v149 = v103;
  v150 = v180;
  *(_DWORD *)&v151[3] = *(_DWORD *)&v179[3];
  *(_DWORD *)v151 = *(_DWORD *)v179;
  v152 = v102;
  v153 = v178;
  *(_DWORD *)&v154[3] = *(_DWORD *)&v177[3];
  *(_DWORD *)v154 = *(_DWORD *)v177;
  v155 = v96;
  v156 = v176;
  *(_DWORD *)&v157[3] = *(_DWORD *)&v175[3];
  *(_DWORD *)v157 = *(_DWORD *)v175;
  v158 = v95;
  v159 = v93;
  v160 = v94;
  v161 = v174;
  *(_DWORD *)v162 = *(_DWORD *)v173;
  *(_DWORD *)&v162[3] = *(_DWORD *)&v173[3];
  v163 = v97;
  v164 = v172;
  *(_DWORD *)v165 = *(_DWORD *)v171;
  *(_DWORD *)&v165[3] = *(_DWORD *)&v171[3];
  v166 = v98;
  v167 = v99;
  v168 = 0;
LABEL_5:
  v169 = v170;
  return sub_6A66C((uint64_t)&v110);
}

uint64_t sub_6A050@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return UserEventStorageData.init(from:)(a1, a2);
}

uint64_t sub_6A064(_QWORD *a1)
{
  return UserEventStorageData.encode(to:)(a1);
}

BOOL _s13BookAnalytics20UserEventStorageDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  _BOOL8 result;
  char v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  int v79;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = a1 + 280;
  v7 = *(_BYTE *)(a1 + 24);
  v75 = *(_BYTE *)(v6 + 48);
  v76 = *(_BYTE *)(v6 + 16);
  v57 = *(unsigned __int8 *)(a2 + 296);
  v52 = *(_BYTE *)(a2 + 328);
  v59 = *(_QWORD *)(a1 + 256);
  v62 = *(_QWORD *)(a1 + 264);
  v72 = *(_BYTE *)(a1 + 280);
  v73 = *(_QWORD *)(a1 + 288);
  v74 = *(_QWORD *)(a1 + 272);
  v53 = *(_QWORD *)(a1 + 304);
  v55 = *(_QWORD *)(a1 + 312);
  v50 = *(_QWORD *)(a1 + 320);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(unsigned __int8 *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(unsigned __int8 *)(a2 + 72);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(unsigned __int8 *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(unsigned __int8 *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = *(unsigned __int8 *)(a2 + 120);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = *(unsigned __int8 *)(a2 + 136);
  v24 = *(_QWORD *)(a2 + 144);
  v25 = *(unsigned __int8 *)(a2 + 152);
  v26 = *(_QWORD *)(a2 + 160);
  v27 = *(unsigned __int8 *)(a2 + 168);
  v77 = *(_QWORD *)(a2 + 176);
  v79 = *(unsigned __int8 *)(a2 + 184);
  v67 = *(_QWORD *)(a2 + 192);
  v78 = *(unsigned __int8 *)(a2 + 200);
  v65 = *(_QWORD *)(a2 + 208);
  v71 = *(unsigned __int8 *)(a2 + 216);
  v63 = *(_QWORD *)(a2 + 224);
  v66 = *(unsigned __int8 *)(a2 + 232);
  v60 = *(_QWORD *)(a2 + 240);
  v64 = *(unsigned __int8 *)(a2 + 248);
  v58 = *(_QWORD *)(a2 + 256);
  v61 = *(_QWORD *)(a2 + 264);
  v70 = *(_QWORD *)(a2 + 272);
  v68 = *(unsigned __int8 *)(a2 + 280);
  v69 = *(_QWORD *)(a2 + 288);
  v54 = *(_QWORD *)(a2 + 304);
  v56 = *(_QWORD *)(a2 + 312);
  v51 = *(_QWORD *)(a2 + 320);
  if ((v4 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v28 = *(_BYTE *)(a2 + 8);
    else
      v28 = 1;
    if ((v28 & 1) != 0)
      return 0;
  }
  if ((v7 & 1) != 0)
  {
    if (!v9)
      return 0;
  }
  else
  {
    if (v5 == v8)
      v29 = v9;
    else
      v29 = 1;
    if ((v29 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!v11)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32) == v10)
      v30 = v11;
    else
      v30 = 1;
    if ((v30 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!v13)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 48) == v12)
      v31 = v13;
    else
      v31 = 1;
    if ((v31 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if (!v15)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 64) == v14)
      v32 = v15;
    else
      v32 = 1;
    if ((v32 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if (!v17)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 80) == v16)
      v33 = v17;
    else
      v33 = 1;
    if ((v33 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    if (!v19)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 96) == v18)
      v34 = v19;
    else
      v34 = 1;
    if ((v34 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    if (!v21)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 112) == v20)
      v35 = v21;
    else
      v35 = 1;
    if ((v35 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    if (!v23)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 128) == v22)
      v36 = v23;
    else
      v36 = 1;
    if ((v36 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    if (!v25)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 144) == v24)
      v37 = v25;
    else
      v37 = 1;
    if ((v37 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    if (!v27)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 160) == v26)
      v38 = v27;
    else
      v38 = 1;
    if ((v38 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 184) & 1) != 0)
  {
    if (!v79)
      return 0;
  }
  else
  {
    v39 = v79;
    if (*(_QWORD *)(a1 + 176) != v77)
      v39 = 1;
    if ((v39 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 200) & 1) != 0)
  {
    if (!v78)
      return 0;
  }
  else
  {
    v40 = v78;
    if (*(_QWORD *)(a1 + 192) != v67)
      v40 = 1;
    if ((v40 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 216) & 1) != 0)
  {
    if (!v71)
      return 0;
  }
  else
  {
    v41 = v71;
    if (*(_QWORD *)(a1 + 208) != v65)
      v41 = 1;
    if ((v41 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 232) & 1) != 0)
  {
    if (!v66)
      return 0;
  }
  else
  {
    v42 = v66;
    if (*(_QWORD *)(a1 + 224) != v63)
      v42 = 1;
    if ((v42 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 248) & 1) != 0)
  {
    if (!v64)
      return 0;
  }
  else
  {
    v43 = v64;
    if (*(_QWORD *)(a1 + 240) != v60)
      v43 = 1;
    if ((v43 & 1) != 0)
      return 0;
  }
  if (!v62)
  {
    if (v61)
      return 0;
    goto LABEL_115;
  }
  if (!v61)
    return 0;
  if (v59 == v58 && v62 == v61
    || (v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v62, v58, v61, 0), result = 0, (v44 & 1) != 0))
  {
LABEL_115:
    if ((v72 & 1) != 0)
    {
      if (!v68)
        return 0;
    }
    else
    {
      if (v74 == v70)
        v46 = v68;
      else
        v46 = 1;
      if ((v46 & 1) != 0)
        return 0;
    }
    if ((v76 & 1) != 0)
    {
      if (!v57)
        return 0;
    }
    else
    {
      v47 = v57;
      if (v73 != v69)
        v47 = 1;
      if ((v47 & 1) != 0)
        return 0;
    }
    if (v55)
    {
      if (!v56)
        return 0;
      if (v53 != v54 || v55 != v56)
      {
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v54, v56, 0);
        result = 0;
        if ((v48 & 1) == 0)
          return result;
      }
    }
    else if (v56)
    {
      return 0;
    }
    if ((v75 & 1) == 0)
    {
      v49 = v52;
      if (v50 != v51)
        v49 = 1;
      return (v49 & 1) == 0;
    }
    return (v52 & 1) != 0;
  }
  return result;
}

unint64_t sub_6A628()
{
  unint64_t result;

  result = qword_298F30;
  if (!qword_298F30)
  {
    result = swift_getWitnessTable(&unk_1F79A8, &type metadata for UserEventStorageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298F30);
  }
  return result;
}

uint64_t sub_6A66C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 312);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 264));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_6A6A0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 264);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 312));
  swift_bridgeObjectRetain(v2);
  return a1;
}

unint64_t sub_6A6D8()
{
  unint64_t result;

  result = qword_298F40;
  if (!qword_298F40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserEventStorageData, &type metadata for UserEventStorageData);
    atomic_store(result, (unint64_t *)&qword_298F40);
  }
  return result;
}

unint64_t sub_6A720()
{
  unint64_t result;

  result = qword_298F48;
  if (!qword_298F48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserEventStorageData, &type metadata for UserEventStorageData);
    atomic_store(result, (unint64_t *)&qword_298F48);
  }
  return result;
}

uint64_t destroy for UserEventStorageData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 264));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 312));
}

uint64_t initializeWithCopy for UserEventStorageData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v4 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v4;
  v5 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v5;
  v6 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v6;
  v7 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v7;
  v8 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v8;
  v9 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v9;
  v10 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v10;
  v11 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v11;
  v12 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v12;
  v13 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v13;
  v14 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v14;
  v15 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v15;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t assignWithCopy for UserEventStorageData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = a2[20];
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = a2[22];
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = a2[24];
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = a2[26];
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(_QWORD *)(a1 + 208) = v17;
  v18 = a2[28];
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(_QWORD *)(a1 + 224) = v18;
  v19 = a2[30];
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  *(_QWORD *)(a1 + 240) = v19;
  *(_QWORD *)(a1 + 256) = a2[32];
  v20 = a2[33];
  v21 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a2[34];
  *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 280);
  *(_QWORD *)(a1 + 272) = v22;
  v23 = a2[36];
  *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
  *(_QWORD *)(a1 + 288) = v23;
  *(_QWORD *)(a1 + 304) = a2[38];
  v24 = a2[39];
  v25 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a2[40];
  *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
  *(_QWORD *)(a1 + 320) = v26;
  return a1;
}

void *initializeWithTake for UserEventStorageData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x149uLL);
}

uint64_t assignWithTake for UserEventStorageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v5;
  v6 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v6;
  v7 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v7;
  v8 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v8;
  v9 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v9;
  v10 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v10;
  v11 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v11;
  v12 = *(_QWORD *)(a2 + 264);
  v13 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  v14 = *(_QWORD *)(a2 + 312);
  v15 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v14;
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserEventStorageData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 329))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 264);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UserEventStorageData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 329) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 329) = 0;
    if (a2)
      *(_QWORD *)(result + 264) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserEventStorageData()
{
  return &type metadata for UserEventStorageData;
}

uint64_t getEnumTagSinglePayload for UserEventStorageData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UserEventStorageData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_6AE04 + 4 * byte_1F77BA[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_6AE38 + 4 * byte_1F77B5[v4]))();
}

uint64_t sub_6AE38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6AE40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6AE48);
  return result;
}

uint64_t sub_6AE54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6AE5CLL);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_6AE60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6AE68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserEventStorageData.CodingKeys()
{
  return &type metadata for UserEventStorageData.CodingKeys;
}

unint64_t sub_6AE88()
{
  unint64_t result;

  result = qword_298F50;
  if (!qword_298F50)
  {
    result = swift_getWitnessTable(&unk_1F7980, &type metadata for UserEventStorageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298F50);
  }
  return result;
}

unint64_t sub_6AED0()
{
  unint64_t result;

  result = qword_298F58;
  if (!qword_298F58)
  {
    result = swift_getWitnessTable(&unk_1F78F0, &type metadata for UserEventStorageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298F58);
  }
  return result;
}

unint64_t sub_6AF18()
{
  unint64_t result;

  result = qword_298F60;
  if (!qword_298F60)
  {
    result = swift_getWitnessTable(&unk_1F7918, &type metadata for UserEventStorageData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298F60);
  }
  return result;
}

uint64_t sub_6AF5C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x800000000021F450;
    if (a2 == 0x800000000021F450)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F450, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v6 = 0x800000000021F470;
    if (a2 == 0x800000000021F470)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F470, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000000021F490)
  {
    v7 = 0x800000000021F490;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000000021F490, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_16;
  }
  if (a1 == 0x6E756F4364616572 && a2 == 0xE900000000000074)
  {
    v8 = 0xE900000000000074;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F4364616572, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x6E756F4379616C70 && a2 == 0xE900000000000074)
  {
    v9 = 0xE900000000000074;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F4379616C70, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD000000000000014)
  {
    v10 = 0x800000000021F4B0;
    if (a2 == 0x800000000021F4B0)
      goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F4B0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v11 = 0x800000000021F4D0;
    if (a2 == 0x800000000021F4D0)
      goto LABEL_38;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F4D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if (a1 == 0x6F6F426465746172 && a2 == 0xEE00746E756F436BLL)
  {
    v12 = 0xEE00746E756F436BLL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F426465746172, 0xEE00746E756F436BLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x756F4364656B696CLL && a2 == 0xEA0000000000746ELL)
  {
    v13 = 0xEA0000000000746ELL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F4364656B696CLL, 0xEA0000000000746ELL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x756F436572616873 && a2 == 0xEA0000000000746ELL)
  {
    v14 = 0xEA0000000000746ELL;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F436572616873, 0xEA0000000000746ELL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0xD000000000000018)
  {
    v15 = 0x800000000021F4F0;
    if (a2 == 0x800000000021F4F0)
      goto LABEL_61;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000000021F4F0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if (a1 == 0xD000000000000011)
  {
    v16 = 0x800000000021F510;
    if (a2 == 0x800000000021F510)
      goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F510, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000000021F530)
  {
    v17 = 0x800000000021F530;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F530, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0xD000000000000012)
  {
    v18 = 0x800000000021F550;
    if (a2 == 0x800000000021F550)
      goto LABEL_77;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F550, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if (a1 == 0xD000000000000011)
  {
    v19 = 0x800000000021F570;
    if (a2 == 0x800000000021F570)
      goto LABEL_82;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F570, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_82:
    swift_bridgeObjectRelease(v19);
    return 14;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v20 = 0x800000000021F590;
    if (a2 == 0x800000000021F590)
      goto LABEL_87;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000021F590, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_87:
    swift_bridgeObjectRelease(v20);
    return 15;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000000021F5B0)
  {
    v21 = 0x800000000021F5B0;
LABEL_93:
    swift_bridgeObjectRelease(v21);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000000021F5B0, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_93;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x800000000021F5D0)
  {
    v22 = 0x800000000021F5D0;
LABEL_99:
    swift_bridgeObjectRelease(v22);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000000021F5D0, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_99;
  }
  if (a1 == 0xD000000000000018)
  {
    v23 = 0x800000000021F5F0;
    if (a2 == 0x800000000021F5F0)
      goto LABEL_104;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000000021F5F0, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_104:
    swift_bridgeObjectRelease(v23);
    return 18;
  }
  if (a1 == 0xD000000000000014)
  {
    v24 = 0x800000000021F610;
    if (a2 == 0x800000000021F610)
      goto LABEL_109;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F610, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_109:
    swift_bridgeObjectRelease(v24);
    return 19;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x800000000021F630)
  {
    swift_bridgeObjectRelease(0x800000000021F630);
    return 20;
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000000021F630, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v25 & 1) != 0)
      return 20;
    else
      return 21;
  }
}

BookAnalytics::NotificationType_optional __swiftcall NotificationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::NotificationType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266C78, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t NotificationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_6B7B8 + 4 * byte_1F7A00[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_6B7B8()
{
  return 1868785010;
}

uint64_t sub_6B7C8()
{
  return 1818324839;
}

uint64_t sub_6B7D8()
{
  return 0x4D64656966696E75;
}

void sub_6B7FC(char *a1)
{
  sub_2995C(*a1);
}

unint64_t sub_6B80C()
{
  unint64_t result;

  result = qword_298F68;
  if (!qword_298F68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationType, &type metadata for NotificationType);
    atomic_store(result, (unint64_t *)&qword_298F68);
  }
  return result;
}

void sub_6B850()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_6B89C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1868785010, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_6B908()
{
  __asm { BR              X10 }
}

uint64_t sub_6B944(uint64_t a1)
{
  String.hash(into:)(a1, 1868785010, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_6B99C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_6B9E4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1868785010, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

BookAnalytics::NotificationType_optional sub_6BA50(Swift::String *a1)
{
  return NotificationType.init(rawValue:)(*a1);
}

uint64_t sub_6BA5C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_6BA8C + 4 * byte_1F7A10[*v0]))();
}

void sub_6BA8C(_QWORD *a1@<X8>)
{
  *a1 = 1868785010;
  a1[1] = 0xE400000000000000;
}

void sub_6BAA0(_QWORD *a1@<X8>)
{
  *a1 = 1818324839;
  a1[1] = 0xE400000000000000;
}

void sub_6BAB4(char *a1@<X8>)
{
  strcpy(a1, "unifiedMessage");
  a1[15] = -18;
}

uint64_t sub_6BADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6BC50();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_6BB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6BC50();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for NotificationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_6BBD0 + 4 * byte_1F7A19[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_6BC04 + 4 * byte_1F7A14[v4]))();
}

uint64_t sub_6BC04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6BC0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6BC14);
  return result;
}

uint64_t sub_6BC20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6BC28);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_6BC2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6BC34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationType()
{
  return &type metadata for NotificationType;
}

unint64_t sub_6BC50()
{
  unint64_t result;

  result = qword_298F70;
  if (!qword_298F70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationType, &type metadata for NotificationType);
    atomic_store(result, (unint64_t *)&qword_298F70);
  }
  return result;
}

uint64_t sub_6BC94(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_298F78, &enum case for SessionGroup.default(_:));
}

uint64_t static ThemesAndSettingViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295660, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298F78, a1);
}

uint64_t sub_6BCD4(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_298F90, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ThemesAndSettingViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295668, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298F90, a1);
}

uint64_t ThemesAndSettingViewEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemesAndSettingViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ThemesAndSettingViewEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_299018, (uint64_t)&nominal type descriptor for ThemesAndSettingViewEvent);
}

uint64_t ThemesAndSettingViewEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemesAndSettingViewEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemesAndSettingViewEvent.contentData.modify())()
{
  type metadata accessor for ThemesAndSettingViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemesAndSettingViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemesAndSettingViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ThemesAndSettingViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemesAndSettingViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ThemesAndSettingViewEvent.eventData.modify())()
{
  type metadata accessor for ThemesAndSettingViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ThemesAndSettingViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for ThemesAndSettingViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = enum case for EventProperty.optional<A>(_:);
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v2, v9);
}

uint64_t ThemesAndSettingViewEvent.Model.contentData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[5];
  v3 = v1[6];
  v4 = v1[7];
  v5 = v1[8];
  v6 = v1[9];
  v7 = v1[10];
  v8 = v1[11];
  v9 = v1[12];
  v10 = v1[13];
  v11 = v1[14];
  v12 = v1[15];
  v13 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_4C8D8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t ThemesAndSettingViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ThemesAndSettingViewEvent.Model(0) + 24);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ThemesAndSettingViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2990B0, (uint64_t)&nominal type descriptor for ThemesAndSettingViewEvent.Model);
}

uint64_t ThemesAndSettingViewEvent.Model.init(themesData:contentData:eventData:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a4 = *(_OWORD *)a1;
  v5 = a2[1];
  *(_OWORD *)(a4 + 40) = *a2;
  *(_OWORD *)(a4 + 56) = v5;
  v6 = a2[3];
  *(_OWORD *)(a4 + 72) = a2[2];
  *(_OWORD *)(a4 + 88) = v6;
  v7 = a2[5];
  *(_OWORD *)(a4 + 104) = a2[4];
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a4 + 24) = v8;
  *(_BYTE *)(a4 + 32) = v9;
  *(_OWORD *)(a4 + 120) = v7;
  v10 = a4 + *(int *)(type metadata accessor for ThemesAndSettingViewEvent.Model(0) + 24);
  v11 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

uint64_t sub_6C0A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x44746E65746E6F63;
  if (*v0 != 1)
    v1 = 0x746144746E657665;
  if (*v0)
    return v1;
  else
    return 0x614473656D656874;
}

uint64_t sub_6C114@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_6D9DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_6C138(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6C358();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6C160(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6C358();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ThemesAndSettingViewEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v3 = v1;
  v5 = sub_71B4(&qword_298FA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_6C358();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ThemesAndSettingViewEvent.Model.CodingKeys, &type metadata for ThemesAndSettingViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 3);
  v14 = *((_BYTE *)v3 + 32);
  v24 = *v3;
  *(_QWORD *)&v25 = v12;
  *((_QWORD *)&v25 + 1) = v13;
  LOBYTE(v26) = v14;
  v30 = 0;
  v15 = sub_A7E0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v30, v5, &type metadata for ThemesData, v15);
  if (!v2)
  {
    v16 = *(__int128 *)((char *)v3 + 56);
    v24 = *(__int128 *)((char *)v3 + 40);
    v25 = v16;
    v17 = *(__int128 *)((char *)v3 + 88);
    v26 = *(__int128 *)((char *)v3 + 72);
    v27 = v17;
    v18 = *(__int128 *)((char *)v3 + 120);
    v28 = *(__int128 *)((char *)v3 + 104);
    v29 = v18;
    v30 = 1;
    v19 = sub_17118();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v30, v5, &type metadata for ContentData, v19);
    v20 = (uint64_t)v3 + *(int *)(type metadata accessor for ThemesAndSettingViewEvent.Model(0) + 24);
    LOBYTE(v24) = 2;
    v21 = type metadata accessor for EventData(0);
    v22 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v24, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_6C358()
{
  unint64_t result;

  result = qword_298FB0;
  if (!qword_298FB0)
  {
    result = swift_getWitnessTable(&unk_1F7D24, &type metadata for ThemesAndSettingViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_298FB0);
  }
  return result;
}

uint64_t ThemesAndSettingViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v33 = a2;
  v34 = type metadata accessor for EventData(0);
  v3 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_71B4(&qword_298FB8);
  v6 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ThemesAndSettingViewEvent.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v37 = a1;
  sub_7988(a1, v12);
  v14 = sub_6C358();
  v35 = v8;
  v15 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ThemesAndSettingViewEvent.Model.CodingKeys, &type metadata for ThemesAndSettingViewEvent.Model.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_7DAC(v37);
  v32 = v9;
  v16 = v11;
  v38 = v5;
  v17 = v34;
  v45 = 0;
  v18 = sub_AD18();
  v20 = v35;
  v19 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for ThemesData, &v45, v36, &type metadata for ThemesData, v18);
  v21 = v40;
  v22 = v41;
  v23 = (uint64_t)v16;
  *(_OWORD *)v16 = v39;
  *((_OWORD *)v16 + 1) = v21;
  v16[32] = v22;
  v45 = 1;
  v24 = sub_1779C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, &type metadata for ContentData, &v45, v19, &type metadata for ContentData, v24);
  v25 = v40;
  *(_OWORD *)(v16 + 40) = v39;
  *(_OWORD *)(v16 + 56) = v25;
  v26 = v42;
  *(_OWORD *)(v16 + 72) = v41;
  *(_OWORD *)(v16 + 88) = v26;
  v27 = v44;
  *(_OWORD *)(v16 + 104) = v43;
  *(_OWORD *)(v16 + 120) = v27;
  LOBYTE(v39) = 2;
  v28 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
  v29 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v17, &v39, v19, v17, v28);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v19);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v23 + *(int *)(v32 + 24), v29, v17);
  sub_6C6BC(v23, v33);
  sub_7DAC(v37);
  return sub_6C700(v23);
}

uint64_t sub_6C6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThemesAndSettingViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_6C700(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ThemesAndSettingViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_6C73C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ThemesAndSettingViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_6C750(_QWORD *a1)
{
  return ThemesAndSettingViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_6C764@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295660, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_298F78, (uint64_t)sub_6BC94, a1);
}

uint64_t sub_6C788@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295668, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_298F90, (uint64_t)sub_6BCD4, a1);
}

uint64_t sub_6C7AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.optional<A>(_:);
  v8 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  v9 = a2 + *(int *)(a1 + 24);
  v10 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v9, v4, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for ThemesAndSettingViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_296008);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for ThemesAndSettingViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for ThemesAndSettingViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for ThemesAndSettingViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for ThemesAndSettingViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ThemesAndSettingViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_296008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemesAndSettingViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6CCE4);
}

uint64_t sub_6CCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_296008);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D70);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ThemesAndSettingViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6CD94);
}

uint64_t sub_6CD94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_296008);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D70);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_6CE40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_B9C8(319, &qword_2960D0, (uint64_t (*)(void))sub_AD18, (uint64_t (*)(void))sub_A7E0, (uint64_t)&type metadata for ThemesData);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_8734(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ThemesAndSettingViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v13);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v9;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      v10 = a2[9];
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v10;
      v11 = a2[11];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v11;
      *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
      *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_DWORD *)(a1 + 113) = *(_DWORD *)((char *)a2 + 113);
      *(_BYTE *)(a1 + 117) = *((_BYTE *)a2 + 117);
      v12 = a2[16];
      *(_QWORD *)(a1 + 120) = a2[15];
      *(_QWORD *)(a1 + 128) = v12;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = v14;
      v15 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = v15;
      v16 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v16;
    }
    v17 = *(int *)(a3 + 24);
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = type metadata accessor for EventData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for ThemesAndSettingViewEvent.Model(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = a1[6];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[11]);
    swift_bridgeObjectRelease(a1[16]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for ThemesAndSettingViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v9;
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v10;
    *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_DWORD *)(a1 + 113) = *(_DWORD *)(a2 + 113);
    *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
    v11 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v11;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v12;
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v13;
    v14 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v14;
  }
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ThemesAndSettingViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = (_OWORD *)(a1 + 40);
  v11 = (_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a2 + 48);
  if (v12)
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v15 = *(_QWORD *)(a2 + 72);
      v16 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v17 = *(_QWORD *)(a2 + 88);
      v18 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
      v19 = *(_DWORD *)(a2 + 100);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_DWORD *)(a1 + 100) = v19;
      v20 = *(_DWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_DWORD *)(a1 + 108) = v20;
      *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
      *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
      *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
      *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
      *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v21 = *(_QWORD *)(a2 + 128);
      v22 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      sub_4E9F4((_QWORD *)(a1 + 40));
      v29 = *(_OWORD *)(a2 + 56);
      *v10 = *v11;
      *(_OWORD *)(a1 + 56) = v29;
      v30 = *(_OWORD *)(a2 + 120);
      v32 = *(_OWORD *)(a2 + 72);
      v31 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v30;
      *(_OWORD *)(a1 + 72) = v32;
      *(_OWORD *)(a1 + 88) = v31;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v23 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v23;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v24 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v24;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v25 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v25;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
    v26 = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 100) = v26;
    v27 = *(_DWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_DWORD *)(a1 + 108) = v27;
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
    *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
    *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
    *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v28 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v28;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 56);
    *v10 = *v11;
    *(_OWORD *)(a1 + 56) = v33;
    v34 = *(_OWORD *)(a2 + 72);
    v35 = *(_OWORD *)(a2 + 88);
    v36 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v36;
    *(_OWORD *)(a1 + 72) = v34;
    *(_OWORD *)(a1 + 88) = v35;
  }
  v37 = *(int *)(a3 + 24);
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  return a1;
}

uint64_t initializeWithTake for ThemesAndSettingViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v8 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ThemesAndSettingViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  if (!v10)
    goto LABEL_5;
  v11 = *(_QWORD *)(a2 + 48);
  if (!v11)
  {
    sub_4E9F4((_QWORD *)(a1 + 40));
LABEL_5:
    v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
    v19 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v19;
    v20 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v20;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 113) = *(_DWORD *)(a2 + 113);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v16;
  swift_bridgeObjectRelease(v17);
LABEL_6:
  v21 = *(int *)(a3 + 24);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemesAndSettingViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6D6C0);
}

uint64_t sub_6D6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ThemesAndSettingViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6D748);
}

uint64_t sub_6D748(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_6D7BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "!";
  v4[1] = &unk_1F7C48;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ThemesAndSettingViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_6D884 + 4 * byte_1F7B55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_6D8B8 + 4 * byte_1F7B50[v4]))();
}

uint64_t sub_6D8B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6D8C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6D8C8);
  return result;
}

uint64_t sub_6D8D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6D8DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_6D8E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6D8E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemesAndSettingViewEvent.Model.CodingKeys()
{
  return &type metadata for ThemesAndSettingViewEvent.Model.CodingKeys;
}

unint64_t sub_6D908()
{
  unint64_t result;

  result = qword_2990F0;
  if (!qword_2990F0)
  {
    result = swift_getWitnessTable(&unk_1F7CFC, &type metadata for ThemesAndSettingViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2990F0);
  }
  return result;
}

unint64_t sub_6D950()
{
  unint64_t result;

  result = qword_2990F8;
  if (!qword_2990F8)
  {
    result = swift_getWitnessTable(&unk_1F7C6C, &type metadata for ThemesAndSettingViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2990F8);
  }
  return result;
}

unint64_t sub_6D998()
{
  unint64_t result;

  result = qword_299100;
  if (!qword_299100)
  {
    result = swift_getWitnessTable(&unk_1F7C94, &type metadata for ThemesAndSettingViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299100);
  }
  return result;
}

uint64_t sub_6D9DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x614473656D656874 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614473656D656874, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_6DB64()
{
  return 0x5479616C70736964;
}

uint64_t sub_6DB84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x5479616C70736964 && a2 == 0xEB00000000657079)
  {
    result = swift_bridgeObjectRelease(0xEB00000000657079);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5479616C70736964, 0xEB00000000657079, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_6DC30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6DFA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6DC58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6DFA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LibraryDisplayData.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_71B4(&qword_299108);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v8);
  v10 = sub_6DFA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LibraryDisplayData.CodingKeys, &type metadata for LibraryDisplayData.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_6DFE8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for DisplayType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t LibraryDisplayData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_71B4(&qword_299120);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_6DFA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LibraryDisplayData.CodingKeys, &type metadata for LibraryDisplayData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_6E02C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for DisplayType, v13, v5, &type metadata for DisplayType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_7DAC(a1);
}

uint64_t sub_6DE98@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return LibraryDisplayData.init(from:)(a1, a2);
}

uint64_t sub_6DEAC(_QWORD *a1)
{
  return LibraryDisplayData.encode(to:)(a1);
}

uint64_t _s13BookAnalytics18LibraryDisplayDataV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = 1684632167;
  if (v2 != 1)
    v3 = 1953720684;
  if (*a1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE700000000000000;
  v6 = 1684632167;
  if (*a2 != 1)
    v6 = 1953720684;
  if (*a2)
    v7 = v6;
  else
    v7 = 0x6E776F6E6B6E75;
  if (*a2)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE700000000000000;
  if (v4 == v7 && v5 == v8)
  {
    v9 = 1;
    v8 = v5;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

unint64_t sub_6DFA4()
{
  unint64_t result;

  result = qword_299110;
  if (!qword_299110)
  {
    result = swift_getWitnessTable(&unk_1F7F28, &type metadata for LibraryDisplayData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299110);
  }
  return result;
}

unint64_t sub_6DFE8()
{
  unint64_t result;

  result = qword_299118;
  if (!qword_299118)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DisplayType, &type metadata for DisplayType);
    atomic_store(result, (unint64_t *)&qword_299118);
  }
  return result;
}

unint64_t sub_6E02C()
{
  unint64_t result;

  result = qword_299128;
  if (!qword_299128)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DisplayType, &type metadata for DisplayType);
    atomic_store(result, (unint64_t *)&qword_299128);
  }
  return result;
}

unint64_t sub_6E074()
{
  unint64_t result;

  result = qword_299130;
  if (!qword_299130)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryDisplayData, &type metadata for LibraryDisplayData);
    atomic_store(result, (unint64_t *)&qword_299130);
  }
  return result;
}

unint64_t sub_6E0BC()
{
  unint64_t result;

  result = qword_299138;
  if (!qword_299138)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryDisplayData, &type metadata for LibraryDisplayData);
    atomic_store(result, (unint64_t *)&qword_299138);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LibraryDisplayData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_6E14C + 4 * byte_1F7D85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_6E180 + 4 * byte_1F7D80[v4]))();
}

uint64_t sub_6E180(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6E188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6E190);
  return result;
}

uint64_t sub_6E19C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6E1A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_6E1A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6E1B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryDisplayData()
{
  return &type metadata for LibraryDisplayData;
}

uint64_t storeEnumTagSinglePayload for LibraryDisplayData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_6E20C + 4 * byte_1F7D8A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_6E22C + 4 * byte_1F7D8F[v4]))();
}

_BYTE *sub_6E20C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_6E22C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_6E234(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_6E23C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_6E244(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_6E24C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LibraryDisplayData.CodingKeys()
{
  return &type metadata for LibraryDisplayData.CodingKeys;
}

unint64_t sub_6E26C()
{
  unint64_t result;

  result = qword_299140;
  if (!qword_299140)
  {
    result = swift_getWitnessTable(&unk_1F7F00, &type metadata for LibraryDisplayData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299140);
  }
  return result;
}

unint64_t sub_6E2B4()
{
  unint64_t result;

  result = qword_299148;
  if (!qword_299148)
  {
    result = swift_getWitnessTable(&unk_1F7E70, &type metadata for LibraryDisplayData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299148);
  }
  return result;
}

unint64_t sub_6E2FC()
{
  unint64_t result;

  result = qword_299150;
  if (!qword_299150)
  {
    result = swift_getWitnessTable(&unk_1F7E98, &type metadata for LibraryDisplayData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299150);
  }
  return result;
}

void __swiftcall UppParentContentData.init(parentContentID:parentContentPrivateID:parentContentUserID:parentContentType:)(BookAnalytics::UppParentContentData *__return_ptr retstr, Swift::String parentContentID, Swift::String parentContentPrivateID, Swift::String parentContentUserID, BookAnalytics::ContentType parentContentType)
{
  BookAnalytics::ContentType v5;

  v5 = *(_BYTE *)parentContentType;
  retstr->parentContentID = parentContentID;
  retstr->parentContentPrivateID = parentContentPrivateID;
  retstr->parentContentUserID = parentContentUserID;
  retstr->parentContentType = v5;
}

uint64_t sub_6E35C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_6E39C + 4 * byte_1F7F80[a1]))(0x6F43746E65726170, 0xEF4449746E65746ELL);
}

unint64_t sub_6E39C()
{
  return 0xD000000000000016;
}

unint64_t sub_6E3D4()
{
  return 0xD000000000000011;
}

uint64_t sub_6E3F0()
{
  unsigned __int8 *v0;

  return sub_6E35C(*v0);
}

uint64_t sub_6E3F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_6EE30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_6E41C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6EA00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6E444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6EA00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UppParentContentData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v3 = sub_71B4(&qword_299158);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v23 = v1[3];
  v24 = v9;
  v10 = v1[4];
  v21 = v1[5];
  v22 = v10;
  HIDWORD(v20) = *((unsigned __int8 *)v1 + 48);
  v11 = a1[3];
  v12 = a1[4];
  sub_7988(a1, v11);
  v13 = sub_6EA00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UppParentContentData.CodingKeys, &type metadata for UppParentContentData.CodingKeys, v13, v11, v12);
  v30 = 0;
  v14 = v25;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v30, v3);
  if (!v14)
  {
    v16 = v21;
    v15 = v22;
    v17 = BYTE4(v20);
    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v23, &v29, v3);
    v28 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v28, v3);
    v27 = v17;
    v26 = 3;
    v18 = sub_FBF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v3, &type metadata for ContentType, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t UppParentContentData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v5 = sub_71B4(&qword_299168);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_6EA00();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UppParentContentData.CodingKeys, &type metadata for UppParentContentData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  BYTE3(v31) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v31 + 3, v5);
  v14 = v13;
  v28 = v12;
  BYTE2(v31) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v31 + 2, v5);
  v29 = v16;
  v27 = v15;
  BYTE1(v31) = 2;
  swift_bridgeObjectRetain(v16);
  v25 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v31 + 1, v5);
  v30 = 3;
  v18 = v17;
  v19 = sub_FC34();
  v26 = v18;
  swift_bridgeObjectRetain(v18);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for ContentType, &v30, v5, &type metadata for ContentType, v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v31;
  v22 = v29;
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v14;
  v23 = v26;
  *(_QWORD *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v25;
  *(_QWORD *)(a2 + 40) = v23;
  *(_BYTE *)(a2 + 48) = v21;
  sub_7DAC(a1);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v22);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_6E8D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return UppParentContentData.init(from:)(a1, a2);
}

uint64_t sub_6E8EC(_QWORD *a1)
{
  return UppParentContentData.encode(to:)(a1);
}

void _s13BookAnalytics20UppParentContentDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = *((_BYTE *)a1 + 48);
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  if ((v4 == *a2 && v5 == v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v11, 0) & 1) != 0)
    && (v6 == v12 && v8 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v12, v13, 0) & 1) != 0)
    && (v7 == v14 && v9 == v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v14, v15, 0) & 1) != 0))
  {
    sub_26C28(v10);
  }
}

unint64_t sub_6EA00()
{
  unint64_t result;

  result = qword_299160;
  if (!qword_299160)
  {
    result = swift_getWitnessTable(&unk_1F8138, &type metadata for UppParentContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299160);
  }
  return result;
}

uint64_t destroy for UppParentContentData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for UppParentContentData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for UppParentContentData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for UppParentContentData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for UppParentContentData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for UppParentContentData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UppParentContentData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UppParentContentData()
{
  return &type metadata for UppParentContentData;
}

uint64_t storeEnumTagSinglePayload for UppParentContentData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_6ECD8 + 4 * byte_1F7F89[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_6ED0C + 4 * byte_1F7F84[v4]))();
}

uint64_t sub_6ED0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6ED14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6ED1CLL);
  return result;
}

uint64_t sub_6ED28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6ED30);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_6ED34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6ED3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UppParentContentData.CodingKeys()
{
  return &type metadata for UppParentContentData.CodingKeys;
}

unint64_t sub_6ED5C()
{
  unint64_t result;

  result = qword_299170;
  if (!qword_299170)
  {
    result = swift_getWitnessTable(&unk_1F8110, &type metadata for UppParentContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299170);
  }
  return result;
}

unint64_t sub_6EDA4()
{
  unint64_t result;

  result = qword_299178;
  if (!qword_299178)
  {
    result = swift_getWitnessTable(&unk_1F8080, &type metadata for UppParentContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299178);
  }
  return result;
}

unint64_t sub_6EDEC()
{
  unint64_t result;

  result = qword_299180;
  if (!qword_299180)
  {
    result = swift_getWitnessTable(&unk_1F80A8, &type metadata for UppParentContentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299180);
  }
  return result;
}

uint64_t sub_6EE30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6F43746E65726170 && a2 == 0xEF4449746E65746ELL)
  {
    v5 = 0xEF4449746E65746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65726170, 0xEF4449746E65746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000000021F650)
  {
    v7 = 0x800000000021F650;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000000021F650, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000000021F670)
  {
    v8 = 0x800000000021F670;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F670, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F690)
  {
    swift_bridgeObjectRelease(0x800000000021F690);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F690, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BookAnalytics::GoalType_optional __swiftcall GoalType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::GoalType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266CF8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t GoalType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x47676E6964616572;
  if (*v0 != 1)
    v1 = 0x616F47736B6F6F62;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_6F0B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_26140(*a1, *a2);
}

unint64_t sub_6F0C8()
{
  unint64_t result;

  result = qword_299188;
  if (!qword_299188)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GoalType, &type metadata for GoalType);
    atomic_store(result, (unint64_t *)&qword_299188);
  }
  return result;
}

Swift::Int sub_6F10C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEB000000006C616FLL;
  v3 = 0x47676E6964616572;
  if (v1 != 1)
  {
    v3 = 0x616F47736B6F6F62;
    v2 = 0xE90000000000006CLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_6F1B8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB000000006C616FLL;
  v3 = 0x47676E6964616572;
  if (*v1 != 1)
  {
    v3 = 0x616F47736B6F6F62;
    v2 = 0xE90000000000006CLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_6F240(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEB000000006C616FLL;
  v4 = 0x47676E6964616572;
  if (v2 != 1)
  {
    v4 = 0x616F47736B6F6F62;
    v3 = 0xE90000000000006CLL;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::GoalType_optional sub_6F2E8(Swift::String *a1)
{
  return GoalType.init(rawValue:)(*a1);
}

void sub_6F2F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEB000000006C616FLL;
  v5 = 0x47676E6964616572;
  if (v2 != 1)
  {
    v5 = 0x616F47736B6F6F62;
    v4 = 0xE90000000000006CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_6F360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6F4D4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_6F3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6F4D4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for GoalType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_6F454 + 4 * byte_1F818D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_6F488 + 4 * byte_1F8188[v4]))();
}

uint64_t sub_6F488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6F490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6F498);
  return result;
}

uint64_t sub_6F4A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6F4ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_6F4B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6F4B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GoalType()
{
  return &type metadata for GoalType;
}

unint64_t sub_6F4D4()
{
  unint64_t result;

  result = qword_299190;
  if (!qword_299190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GoalType, &type metadata for GoalType);
    atomic_store(result, (unint64_t *)&qword_299190);
  }
  return result;
}

uint64_t TextData.isBold.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t TextData.isBold.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

BookAnalytics::TextData __swiftcall TextData.init(fontName:isBold:)(Swift::String fontName, Swift::Bool isBold)
{
  uint64_t v2;
  BookAnalytics::TextData result;

  *(Swift::String *)v2 = fontName;
  *(_BYTE *)(v2 + 16) = isBold;
  result.fontName = fontName;
  result.isBold = isBold;
  return result;
}

uint64_t static TextData.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v10;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == *(_QWORD *)a2 && v5 == v7)
    return v6 ^ v8 ^ 1u;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v7, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v6 ^ v8 ^ 1u;
  return result;
}

uint64_t sub_6F590()
{
  _BYTE *v0;

  if (*v0)
    return 0x646C6F427369;
  else
    return 0x656D614E746E6F66;
}

uint64_t sub_6F5C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_6FC80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_6F5EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6F76C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6F614(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6F76C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TextData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char v17;

  v4 = sub_71B4(&qword_299198);
  v14 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v15 = *((unsigned __int8 *)v1 + 16);
  v10 = a1[3];
  v9 = a1[4];
  sub_7988(a1, v10);
  v11 = sub_6F76C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TextData.CodingKeys, &type metadata for TextData.CodingKeys, v11, v10, v9);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v17, v4);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

unint64_t sub_6F76C()
{
  unint64_t result;

  result = qword_2991A0;
  if (!qword_2991A0)
  {
    result = swift_getWitnessTable(&unk_1F843C, &type metadata for TextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2991A0);
  }
  return result;
}

uint64_t TextData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  char v18;
  char v19;

  v5 = sub_71B4(&qword_2991A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_6F76C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TextData.CodingKeys, &type metadata for TextData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_7DAC(a1);
  v19 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
  v14 = v13;
  v18 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_BYTE *)(a2 + 16) = v15 & 1;
  sub_7DAC(a1);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_6F940@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TextData.init(from:)(a1, a2);
}

uint64_t sub_6F954(_QWORD *a1)
{
  return TextData.encode(to:)(a1);
}

uint64_t sub_6F96C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for TextData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for TextData(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TextData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextData()
{
  return &type metadata for TextData;
}

uint64_t storeEnumTagSinglePayload for TextData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_6FB28 + 4 * byte_1F82A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_6FB5C + 4 * byte_1F82A0[v4]))();
}

uint64_t sub_6FB5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6FB64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6FB6CLL);
  return result;
}

uint64_t sub_6FB78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6FB80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_6FB84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6FB8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextData.CodingKeys()
{
  return &type metadata for TextData.CodingKeys;
}

unint64_t sub_6FBAC()
{
  unint64_t result;

  result = qword_2991B0;
  if (!qword_2991B0)
  {
    result = swift_getWitnessTable(&unk_1F8414, &type metadata for TextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2991B0);
  }
  return result;
}

unint64_t sub_6FBF4()
{
  unint64_t result;

  result = qword_2991B8;
  if (!qword_2991B8)
  {
    result = swift_getWitnessTable(&unk_1F8384, &type metadata for TextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2991B8);
  }
  return result;
}

unint64_t sub_6FC3C()
{
  unint64_t result;

  result = qword_2991C0;
  if (!qword_2991C0)
  {
    result = swift_getWitnessTable(&unk_1F83AC, &type metadata for TextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2991C0);
  }
  return result;
}

uint64_t sub_6FC80(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x656D614E746E6F66 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E746E6F66, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646C6F427369 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646C6F427369, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_6FD68(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2991C8, &enum case for SessionGroup.default(_:));
}

uint64_t static ReadEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295670, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2991C8, a1);
}

uint64_t sub_6FDA8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2991E0, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static ReadEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295678, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2991E0, a1);
}

uint64_t ReadEvent.readingSessionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2991F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ReadEvent.readingSessionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_2991F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ReadEvent.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_2992C8, (uint64_t)&nominal type descriptor for ReadEvent);
}

uint64_t ReadEvent.contentData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 20);
  v4 = sub_71B4(&qword_296760);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.contentData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.readingSettingsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 24);
  v4 = sub_71B4(&qword_299200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.readingSettingsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 24);
  v4 = sub_71B4(&qword_299200);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.readingSettingsData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 28);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.upSellData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 28);
  v4 = sub_71B4(&qword_296F68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.upSellData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.contentSettingsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 32);
  v4 = sub_71B4(&qword_299208);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.contentSettingsData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 32);
  v4 = sub_71B4(&qword_299208);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.contentSettingsData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.orientationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 36);
  v4 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.orientationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 36);
  v4 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.orientationData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.doNotDisturbData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 40);
  v4 = sub_71B4(&qword_297DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.doNotDisturbData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 40);
  v4 = sub_71B4(&qword_297DF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.doNotDisturbData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.seriesData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.seriesData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 44);
  v4 = sub_71B4(&qword_296310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.seriesData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 48);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.eventData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 52);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 52);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.timedData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.userEmbeddingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 56);
  v4 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.userEmbeddingData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent(0) + 56);
  v4 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReadEvent.userEmbeddingData.modify())()
{
  type metadata accessor for ReadEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t ReadEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *Event;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  Event = (int *)type metadata accessor for ReadEvent(0);
  v5 = a1 + Event[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + Event[6];
  v8 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
  v9 = a1 + Event[7];
  v10 = enum case for EventProperty.optional<A>(_:);
  v11 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  v12 = a1 + Event[8];
  v13 = sub_71B4(&qword_299208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v12, v10, v13);
  v14 = a1 + Event[9];
  v15 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v10, v15);
  v16 = a1 + Event[10];
  v17 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v16, v2, v17);
  v18 = a1 + Event[11];
  v19 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v18, v10, v19);
  v20 = a1 + Event[12];
  v21 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v20, v2, v21);
  v22 = a1 + Event[13];
  v23 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v22, v2, v23);
  v24 = a1 + Event[14];
  v25 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v24, v10, v25);
}

void ReadEvent.Model.readingSessionData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  char v5;
  char v6;

  v2 = *(_BYTE *)(v1 + 4);
  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 12);
  v5 = *(_BYTE *)(v1 + 13);
  v6 = *(_BYTE *)(v1 + 14);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 13) = v5;
  *(_BYTE *)(a1 + 14) = v6;
}

uint64_t ReadEvent.Model.contentData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  char v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_WORD *)(v1 + 72);
  v9 = *(_DWORD *)(v1 + 76);
  v10 = *(_BYTE *)(v1 + 80);
  v11 = *(_DWORD *)(v1 + 84);
  v12 = *(_BYTE *)(v1 + 88);
  v13 = *(_BYTE *)(v1 + 93);
  v15 = *(_QWORD *)(v1 + 96);
  v14 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 60) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 68) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 73) = *(_DWORD *)(v1 + 89);
  *(_BYTE *)(a1 + 77) = v13;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

uint64_t ReadEvent.Model.readingSettingsData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v1 + 114);
  v4 = *(_QWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v1 + 128);
  *(_WORD *)a1 = *(_WORD *)(v1 + 112);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 136);
  return swift_bridgeObjectRetain(v3);
}

uint64_t ReadEvent.Model.upSellData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 160);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 144);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain(v2);
}

void ReadEvent.Model.contentSettingsData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(_DWORD *)(v1 + 176);
  v3 = *(_BYTE *)(v1 + 180);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 168);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
}

__n128 ReadEvent.Model.orientationData.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = *(_DWORD *)(v1 + 200);
  result = *(__n128 *)(v1 + 184);
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  return result;
}

void ReadEvent.Model.doNotDisturbData.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 204);
}

uint64_t ReadEvent.Model.seriesData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[26];
  v3 = v1[27];
  v4 = v1[28];
  v5 = v1[29];
  v6 = v1[30];
  v7 = v1[31];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_16A98(v2, v3, v4, v5, v6, v7);
}

uint64_t ReadEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent.Model(0) + 48);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReadEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2993A0, (uint64_t)&nominal type descriptor for ReadEvent.Model);
}

uint64_t ReadEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReadEvent.Model(0) + 52);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReadEvent.Model.userEmbeddingData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ReadEvent.Model(0) + 56));
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t ReadEvent.Model.init(readingSessionData:contentData:readingSettingsData:upSellData:contentSettingsData:orientationData:doNotDisturbData:seriesData:eventData:timedData:userEmbeddingData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, __int128 *a6@<X5>, _WORD *a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;

  *(_DWORD *)a9 = *(_DWORD *)a1;
  *(_BYTE *)(a9 + 4) = *(_BYTE *)(a1 + 4);
  *(_DWORD *)(a9 + 8) = *(_DWORD *)(a1 + 8);
  *(_BYTE *)(a9 + 12) = *(_BYTE *)(a1 + 12);
  v13 = *(_BYTE *)(a1 + 14);
  *(_BYTE *)(a9 + 13) = *(_BYTE *)(a1 + 13);
  *(_BYTE *)(a9 + 14) = v13;
  v14 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a9 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(a9 + 24) = v14;
  *(_BYTE *)(a9 + 32) = *(_BYTE *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a9 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a9 + 64) = v15;
  v16 = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a9 + 72) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a9 + 76) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a9 + 84) = *(_DWORD *)(a2 + 68);
  v17 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a9 + 40) = v16;
  *(_BYTE *)(a9 + 88) = v17;
  *(_DWORD *)(a9 + 89) = *(_DWORD *)(a2 + 73);
  *(_BYTE *)(a9 + 93) = *(_BYTE *)(a2 + 77);
  v18 = *(_OWORD *)(a2 + 80);
  LOBYTE(v15) = *(_BYTE *)(a3 + 2);
  *(_WORD *)(a9 + 112) = *(_WORD *)a3;
  *(_BYTE *)(a9 + 114) = v15;
  v19 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a9 + 120) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a9 + 128) = v19;
  v20 = *(_QWORD *)(a3 + 24);
  v21 = *a4;
  v22 = *a5;
  *(_QWORD *)(a9 + 160) = *((_QWORD *)a4 + 2);
  *(_QWORD *)(a9 + 168) = v22;
  *(_DWORD *)(a9 + 176) = *((_DWORD *)a5 + 2);
  *(_BYTE *)(a9 + 180) = *((_BYTE *)a5 + 12);
  *(_OWORD *)(a9 + 96) = v18;
  *(_QWORD *)(a9 + 136) = v20;
  v23 = *a6;
  LOWORD(v22) = *a7;
  *(_DWORD *)(a9 + 200) = *((_DWORD *)a6 + 4);
  *(_WORD *)(a9 + 204) = v22;
  *(_OWORD *)(a9 + 144) = v21;
  *(_OWORD *)(a9 + 184) = v23;
  v24 = a8[1];
  *(_OWORD *)(a9 + 208) = *a8;
  *(_OWORD *)(a9 + 224) = v24;
  v25 = *a12;
  *(_OWORD *)(a9 + 240) = a8[2];
  v26 = (int *)type metadata accessor for ReadEvent.Model(0);
  v27 = a9 + v26[12];
  v28 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v27, a10, v28);
  v29 = a9 + v26[13];
  v30 = type metadata accessor for TimedData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a11, v30);
  *(_QWORD *)(a9 + v26[14]) = v25;
  return result;
}

uint64_t sub_70BE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_70C20 + 4 * byte_1F8490[a1]))(0xD000000000000012, 0x800000000021F6B0);
}

uint64_t sub_70C20()
{
  return 0x44746E65746E6F63;
}

unint64_t sub_70C40()
{
  return 0xD000000000000013;
}

uint64_t sub_70C78()
{
  return 0x7461746E6569726FLL;
}

uint64_t sub_70C9C()
{
  uint64_t v0;

  return v0 - 3;
}

uint64_t sub_70CC8()
{
  return 0x74614464656D6974;
}

void sub_70CD8()
{
  JUMPOUT(0x70CE4);
}

uint64_t sub_70D0C()
{
  unsigned __int8 *v0;

  return sub_70BE4(*v0);
}

uint64_t sub_70D14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_74208(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_70D38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7121C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_70D60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7121C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReadEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  char v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v53;
  _BYTE v54[32];
  uint64_t v55;
  __int16 v56;
  int v57;
  char v58;
  int v59;
  char v60;
  int v61;
  char v62;
  __int128 v63;
  char v64;

  v3 = v1;
  v5 = sub_71B4(&qword_299218);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_7121C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReadEvent.Model.CodingKeys, &type metadata for ReadEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 4);
  v13 = *(_DWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 12);
  v15 = *(_BYTE *)(v3 + 13);
  v16 = *(_BYTE *)(v3 + 14);
  LODWORD(v53) = *(_DWORD *)v3;
  BYTE4(v53) = v12;
  DWORD2(v53) = v13;
  BYTE12(v53) = v14;
  BYTE13(v53) = v15;
  BYTE14(v53) = v16;
  v64 = 0;
  v17 = sub_71260();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v53, &v64, v5, &type metadata for ReadingSessionData, v17);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 24);
    v19 = *(_BYTE *)(v3 + 32);
    v20 = *(_OWORD *)(v3 + 40);
    v21 = *(_QWORD *)(v3 + 56);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_WORD *)(v3 + 72);
    v24 = *(_DWORD *)(v3 + 76);
    v25 = *(_BYTE *)(v3 + 80);
    v26 = *(_DWORD *)(v3 + 84);
    v27 = *(_BYTE *)(v3 + 88);
    v28 = *(unsigned __int8 *)(v3 + 93);
    *(_QWORD *)&v53 = *(_QWORD *)(v3 + 16);
    *((_QWORD *)&v53 + 1) = v18;
    v54[0] = v19;
    *(_OWORD *)&v54[8] = v20;
    *(_QWORD *)&v54[24] = v21;
    v55 = v22;
    v56 = v23;
    v57 = v24;
    v58 = v25;
    v59 = v26;
    v60 = v27;
    v61 = *(_DWORD *)(v3 + 89);
    v62 = v28;
    v63 = *(_OWORD *)(v3 + 96);
    v64 = 1;
    v29 = sub_17118();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v53, &v64, v5, &type metadata for ContentData, v29);
    v30 = *(_BYTE *)(v3 + 114);
    v31 = *(_QWORD *)(v3 + 120);
    v32 = *(_QWORD *)(v3 + 128);
    LOWORD(v53) = *(_WORD *)(v3 + 112);
    BYTE2(v53) = v30;
    *((_QWORD *)&v53 + 1) = v31;
    *(_QWORD *)v54 = v32;
    *(_QWORD *)&v54[8] = *(_QWORD *)(v3 + 136);
    v64 = 2;
    v33 = sub_712A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v53, &v64, v5, &type metadata for ReadingSettingsData, v33);
    v34 = *(_QWORD *)(v3 + 160);
    v53 = *(_OWORD *)(v3 + 144);
    *(_QWORD *)v54 = v34;
    v64 = 3;
    v35 = sub_2E6E4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v53, &v64, v5, &type metadata for UpSellData, v35);
    v36 = *(_DWORD *)(v3 + 176);
    v37 = *(_BYTE *)(v3 + 180);
    *(_QWORD *)&v53 = *(_QWORD *)(v3 + 168);
    DWORD2(v53) = v36;
    BYTE12(v53) = v37;
    v64 = 4;
    v38 = sub_712E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v53, &v64, v5, &type metadata for ContentSettingsData, v38);
    v39 = *(_DWORD *)(v3 + 200);
    v53 = *(_OWORD *)(v3 + 184);
    *(_DWORD *)v54 = v39;
    v64 = 5;
    v40 = sub_7132C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v53, &v64, v5, &type metadata for OrientationData, v40);
    LOWORD(v53) = *(_WORD *)(v3 + 204);
    v64 = 6;
    v41 = sub_469B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v53, &v64, v5, &type metadata for DoNotDisturbData, v41);
    v42 = *(_OWORD *)(v3 + 224);
    v53 = *(_OWORD *)(v3 + 208);
    *(_OWORD *)v54 = v42;
    *(_OWORD *)&v54[16] = *(_OWORD *)(v3 + 240);
    v64 = 7;
    v43 = sub_10AD0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v53, &v64, v5, &type metadata for SeriesData, v43);
    v44 = (int *)type metadata accessor for ReadEvent.Model(0);
    v45 = v3 + v44[12];
    LOBYTE(v53) = 8;
    v46 = type metadata accessor for EventData(0);
    v47 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v45, &v53, v5, v46, v47);
    v48 = v3 + v44[13];
    LOBYTE(v53) = 9;
    v49 = type metadata accessor for TimedData(0);
    v50 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v48, &v53, v5, v49, v50);
    *(_QWORD *)&v53 = *(_QWORD *)(v3 + v44[14]);
    v64 = 10;
    v51 = sub_469F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v53, &v64, v5, &type metadata for UserEmbeddingData, v51);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_7121C()
{
  unint64_t result;

  result = qword_299220;
  if (!qword_299220)
  {
    result = swift_getWitnessTable(&unk_1F8774, &type metadata for ReadEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299220);
  }
  return result;
}

unint64_t sub_71260()
{
  unint64_t result;

  result = qword_299228;
  if (!qword_299228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingSessionData, &type metadata for ReadingSessionData);
    atomic_store(result, (unint64_t *)&qword_299228);
  }
  return result;
}

unint64_t sub_712A4()
{
  unint64_t result;

  result = qword_299230;
  if (!qword_299230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingSettingsData, &type metadata for ReadingSettingsData);
    atomic_store(result, (unint64_t *)&qword_299230);
  }
  return result;
}

unint64_t sub_712E8()
{
  unint64_t result;

  result = qword_299238;
  if (!qword_299238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentSettingsData, &type metadata for ContentSettingsData);
    atomic_store(result, (unint64_t *)&qword_299238);
  }
  return result;
}

unint64_t sub_7132C()
{
  unint64_t result;

  result = qword_299240;
  if (!qword_299240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OrientationData, &type metadata for OrientationData);
    atomic_store(result, (unint64_t *)&qword_299240);
  }
  return result;
}

uint64_t ReadEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  char v32;
  int v33;
  char v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  char v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int *v63;
  __int128 v64;
  _BYTE v65[32];
  uint64_t v66;
  __int16 v67;
  int v68;
  char v69;
  int v70;
  char v71;
  int v72;
  char v73;
  __int128 v74;
  char v75;

  v54 = a2;
  v59 = type metadata accessor for TimedData(0);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v5 = (uint64_t *)((char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for EventData(0);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v7 = (uint64_t *)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = sub_71B4(&qword_299248);
  v8 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = (int *)type metadata accessor for ReadEvent.Model(0);
  __chkstk_darwin(v63);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v61 = a1;
  sub_7988(a1, v14);
  v15 = sub_7121C();
  v55 = v10;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReadEvent.Model.CodingKeys, &type metadata for ReadEvent.Model.CodingKeys, v15, v14, v13);
  if (v2)
  {
    v62 = v2;
    return sub_7DAC(v61);
  }
  else
  {
    v16 = v8;
    v75 = 0;
    v17 = sub_71AEC();
    v18 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for ReadingSessionData, &v75, v56, &type metadata for ReadingSessionData, v17);
    v19 = BYTE4(v64);
    v20 = DWORD2(v64);
    v21 = BYTE12(v64);
    v22 = BYTE13(v64);
    v23 = BYTE14(v64);
    *(_DWORD *)v12 = v64;
    v12[4] = v19;
    *((_DWORD *)v12 + 2) = v20;
    v12[12] = v21;
    v12[13] = v22;
    v12[14] = v23;
    v75 = 1;
    v24 = sub_1779C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for ContentData, &v75, v18, &type metadata for ContentData, v24);
    v25 = *((_QWORD *)&v64 + 1);
    v26 = v65[0];
    v27 = *(_OWORD *)&v65[8];
    v28 = *(_QWORD *)&v65[24];
    v29 = v66;
    v30 = v67;
    v31 = v68;
    v32 = v69;
    v33 = v70;
    v34 = v71;
    v35 = v73;
    *((_QWORD *)v12 + 2) = v64;
    *((_QWORD *)v12 + 3) = v25;
    v12[32] = v26;
    *(_OWORD *)(v12 + 40) = v27;
    *((_QWORD *)v12 + 7) = v28;
    *((_QWORD *)v12 + 8) = v29;
    *((_WORD *)v12 + 36) = v30;
    *((_DWORD *)v12 + 19) = v31;
    v12[80] = v32;
    *((_DWORD *)v12 + 21) = v33;
    v12[88] = v34;
    *(_DWORD *)(v12 + 89) = v72;
    v12[93] = v35;
    *((_OWORD *)v12 + 6) = v74;
    v75 = 2;
    v36 = sub_71B30();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for ReadingSettingsData, &v75, v18, &type metadata for ReadingSettingsData, v36);
    v37 = BYTE2(v64);
    v38 = *((_QWORD *)&v64 + 1);
    v39 = *(_QWORD *)v65;
    *((_WORD *)v12 + 56) = v64;
    v12[114] = v37;
    *((_QWORD *)v12 + 15) = v38;
    *((_OWORD *)v12 + 8) = __PAIR128__(*(unint64_t *)&v65[8], v39);
    v75 = 3;
    v40 = sub_2F26C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for UpSellData, &v75, v18, &type metadata for UpSellData, v40);
    v41 = *(_QWORD *)v65;
    *((_OWORD *)v12 + 9) = v64;
    *((_QWORD *)v12 + 20) = v41;
    v75 = 4;
    v42 = sub_71B74();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for ContentSettingsData, &v75, v18, &type metadata for ContentSettingsData, v42);
    v43 = DWORD2(v64);
    v44 = BYTE12(v64);
    *((_QWORD *)v12 + 21) = v64;
    *((_DWORD *)v12 + 44) = v43;
    v12[180] = v44;
    v75 = 5;
    v45 = sub_71BB8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for OrientationData, &v75, v18, &type metadata for OrientationData, v45);
    v46 = *(_DWORD *)v65;
    *(_OWORD *)(v12 + 184) = v64;
    *((_DWORD *)v12 + 50) = v46;
    v75 = 6;
    v47 = sub_47290();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for DoNotDisturbData, &v75, v18, &type metadata for DoNotDisturbData, v47);
    *((_WORD *)v12 + 102) = v64;
    v75 = 7;
    v48 = sub_10EA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for SeriesData, &v75, v18, &type metadata for SeriesData, v48);
    v49 = *(_OWORD *)v65;
    *((_OWORD *)v12 + 13) = v64;
    *((_OWORD *)v12 + 14) = v49;
    *((_OWORD *)v12 + 15) = *(_OWORD *)&v65[16];
    LOBYTE(v64) = 8;
    v50 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v60, &v64, v18, v60, v50);
    (*(void (**)(char *, _QWORD *, uint64_t))(v58 + 32))(&v12[v63[12]], v7, v60);
    LOBYTE(v64) = 9;
    v51 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v59, &v64, v18, v59, v51);
    (*(void (**)(char *, _QWORD *, uint64_t))(v57 + 32))(&v12[v63[13]], v5, v59);
    v75 = 10;
    v52 = sub_472D4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for UserEmbeddingData, &v75, v56, &type metadata for UserEmbeddingData, v52);
    v62 = 0;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v55, v56);
    *(_QWORD *)&v12[v63[14]] = v64;
    sub_71BFC((uint64_t)v12, v54);
    sub_7DAC(v61);
    return sub_71C40((uint64_t)v12);
  }
}

unint64_t sub_71AEC()
{
  unint64_t result;

  result = qword_299250;
  if (!qword_299250)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingSessionData, &type metadata for ReadingSessionData);
    atomic_store(result, (unint64_t *)&qword_299250);
  }
  return result;
}

unint64_t sub_71B30()
{
  unint64_t result;

  result = qword_299258;
  if (!qword_299258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingSettingsData, &type metadata for ReadingSettingsData);
    atomic_store(result, (unint64_t *)&qword_299258);
  }
  return result;
}

unint64_t sub_71B74()
{
  unint64_t result;

  result = qword_299260;
  if (!qword_299260)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentSettingsData, &type metadata for ContentSettingsData);
    atomic_store(result, (unint64_t *)&qword_299260);
  }
  return result;
}

unint64_t sub_71BB8()
{
  unint64_t result;

  result = qword_299268;
  if (!qword_299268)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OrientationData, &type metadata for OrientationData);
    atomic_store(result, (unint64_t *)&qword_299268);
  }
  return result;
}

uint64_t sub_71BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_71C40(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReadEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_71C7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReadEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_71C90(_QWORD *a1)
{
  return ReadEvent.Model.encode(to:)(a1);
}

uint64_t sub_71CA4@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295670, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2991C8, (uint64_t)sub_6FD68, a1);
}

uint64_t sub_71CC8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295678, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2991E0, (uint64_t)sub_6FDA8, a1);
}

uint64_t sub_71CEC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + a1[5];
  v7 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + a1[6];
  v9 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
  v10 = a2 + a1[7];
  v11 = enum case for EventProperty.optional<A>(_:);
  v12 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  v13 = a2 + a1[8];
  v14 = sub_71B4(&qword_299208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v13, v11, v14);
  v15 = a2 + a1[9];
  v16 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, v11, v16);
  v17 = a2 + a1[10];
  v18 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v17, v4, v18);
  v19 = a2 + a1[11];
  v20 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v19, v11, v20);
  v21 = a2 + a1[12];
  v22 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v21, v4, v22);
  v23 = a2 + a1[13];
  v24 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v23, v4, v24);
  v25 = a2 + a1[14];
  v26 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v25, v11, v26);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v48 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v48 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v48);
  }
  else
  {
    v7 = sub_71B4(&qword_2991F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_296760);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_299200);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_71B4(&qword_296F68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_71B4(&qword_299208);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_71B4(&qword_299210);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = sub_71B4(&qword_297DF0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = sub_71B4(&qword_296310);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[12];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[14];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_71B4(&qword_297DF8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  }
  return a1;
}

uint64_t destroy for ReadEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = sub_71B4(&qword_299208);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[11];
  v18 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[12];
  v20 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[13];
  v22 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[14];
  v24 = sub_71B4(&qword_297DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

uint64_t initializeWithCopy for ReadEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_299208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  return a1;
}

uint64_t assignWithCopy for ReadEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_299208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  return a1;
}

uint64_t initializeWithTake for ReadEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_299208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t assignWithTake for ReadEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_71B4(&qword_2991F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_296760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_299200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_71B4(&qword_296F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_71B4(&qword_299208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_71B4(&qword_297DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = sub_71B4(&qword_296310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_71B4(&qword_297DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_72C44);
}

uint64_t sub_72C44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_71B4(&qword_2991F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_296760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_71B4(&qword_299200);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = sub_71B4(&qword_296F68);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = sub_71B4(&qword_299208);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = sub_71B4(&qword_299210);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = sub_71B4(&qword_297DF0);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v19 = sub_71B4(&qword_296310);
                v12 = *(_QWORD *)(v19 - 8);
                if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                {
                  v8 = v19;
                  v13 = a3[11];
                }
                else
                {
                  v20 = sub_71B4(&qword_295D70);
                  v12 = *(_QWORD *)(v20 - 8);
                  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                  {
                    v8 = v20;
                    v13 = a3[12];
                  }
                  else
                  {
                    v21 = sub_71B4(&qword_295D78);
                    v12 = *(_QWORD *)(v21 - 8);
                    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
                    {
                      v8 = v21;
                      v13 = a3[13];
                    }
                    else
                    {
                      v8 = sub_71B4(&qword_297DF8);
                      v12 = *(_QWORD *)(v8 - 8);
                      v13 = a3[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReadEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_72E34);
}

uint64_t sub_72E34(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_71B4(&qword_2991F8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_296760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_71B4(&qword_299200);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = sub_71B4(&qword_296F68);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = sub_71B4(&qword_299208);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = sub_71B4(&qword_299210);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = sub_71B4(&qword_297DF0);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v21 = sub_71B4(&qword_296310);
                v14 = *(_QWORD *)(v21 - 8);
                if (*(_DWORD *)(v14 + 84) == a3)
                {
                  v10 = v21;
                  v15 = a4[11];
                }
                else
                {
                  v22 = sub_71B4(&qword_295D70);
                  v14 = *(_QWORD *)(v22 - 8);
                  if (*(_DWORD *)(v14 + 84) == a3)
                  {
                    v10 = v22;
                    v15 = a4[12];
                  }
                  else
                  {
                    v23 = sub_71B4(&qword_295D78);
                    v14 = *(_QWORD *)(v23 - 8);
                    if (*(_DWORD *)(v14 + 84) == a3)
                    {
                      v10 = v23;
                      v15 = a4[13];
                    }
                    else
                    {
                      v10 = sub_71B4(&qword_297DF8);
                      v14 = *(_QWORD *)(v10 - 8);
                      v15 = a4[14];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_73020(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[11];

  sub_B9C8(319, &qword_2992D8, (uint64_t (*)(void))sub_71AEC, (uint64_t (*)(void))sub_71260, (uint64_t)&type metadata for ReadingSessionData);
  if (v3 <= 0x3F)
  {
    v24[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_B9C8(319, (unint64_t *)&qword_296858, (uint64_t (*)(void))sub_1779C, (uint64_t (*)(void))sub_17118, (uint64_t)&type metadata for ContentData);
    if (v5 <= 0x3F)
    {
      v24[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_B9C8(319, &qword_2992E0, (uint64_t (*)(void))sub_71B30, (uint64_t (*)(void))sub_712A4, (uint64_t)&type metadata for ReadingSettingsData);
      if (v7 <= 0x3F)
      {
        v24[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_B9C8(319, &qword_297050, (uint64_t (*)(void))sub_2F26C, (uint64_t (*)(void))sub_2E6E4, (uint64_t)&type metadata for UpSellData);
        if (v9 <= 0x3F)
        {
          v24[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_B9C8(319, &qword_2992E8, (uint64_t (*)(void))sub_71B74, (uint64_t (*)(void))sub_712E8, (uint64_t)&type metadata for ContentSettingsData);
          if (v11 <= 0x3F)
          {
            v24[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_B9C8(319, (unint64_t *)&qword_2992F0, (uint64_t (*)(void))sub_71BB8, (uint64_t (*)(void))sub_7132C, (uint64_t)&type metadata for OrientationData);
            if (v13 <= 0x3F)
            {
              v24[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_B9C8(319, &qword_297EB8, (uint64_t (*)(void))sub_47290, (uint64_t (*)(void))sub_469B4, (uint64_t)&type metadata for DoNotDisturbData);
              if (v15 <= 0x3F)
              {
                v24[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_B9C8(319, (unint64_t *)&qword_2963A8, (uint64_t (*)(void))sub_10EA0, (uint64_t (*)(void))sub_10AD0, (uint64_t)&type metadata for SeriesData);
                if (v17 <= 0x3F)
                {
                  v24[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_8734(319);
                  if (v19 <= 0x3F)
                  {
                    v24[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_87D8(319);
                    if (v21 <= 0x3F)
                    {
                      v24[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_B9C8(319, (unint64_t *)&unk_297EC0, (uint64_t (*)(void))sub_472D4, (uint64_t (*)(void))sub_469F8, (uint64_t)&type metadata for UserEmbeddingData);
                      if (v23 <= 0x3F)
                      {
                        v24[10] = *(_QWORD *)(v22 - 8) + 64;
                        swift_initStructMetadata(a1, 256, 11, v24, a1 + 16);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ReadEvent.Model(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *a1 = *a2;
    *(_QWORD *)((char *)a1 + 7) = *(uint64_t *)((char *)a2 + 7);
    v7 = a2[3];
    v4[2] = a2[2];
    v4[3] = v7;
    *((_BYTE *)v4 + 32) = *((_BYTE *)a2 + 32);
    v8 = a2[6];
    v4[5] = a2[5];
    v4[6] = v8;
    v9 = a2[8];
    v4[7] = a2[7];
    v4[8] = v9;
    *((_WORD *)v4 + 36) = *((_WORD *)a2 + 36);
    *((_DWORD *)v4 + 19) = *((_DWORD *)a2 + 19);
    *((_BYTE *)v4 + 80) = *((_BYTE *)a2 + 80);
    *((_DWORD *)v4 + 21) = *((_DWORD *)a2 + 21);
    *((_BYTE *)v4 + 88) = *((_BYTE *)a2 + 88);
    *(_DWORD *)((char *)v4 + 89) = *(_DWORD *)((char *)a2 + 89);
    *((_BYTE *)v4 + 93) = *((_BYTE *)a2 + 93);
    v10 = a2[13];
    v4[12] = a2[12];
    v4[13] = v10;
    *((_BYTE *)v4 + 112) = *((_BYTE *)a2 + 112);
    *(_WORD *)((char *)v4 + 113) = *(_WORD *)((char *)a2 + 113);
    v11 = a2[16];
    v4[15] = a2[15];
    v4[16] = v11;
    v4[17] = a2[17];
    *((_WORD *)v4 + 72) = *((_WORD *)a2 + 72);
    v12 = a2[20];
    v4[19] = a2[19];
    v4[20] = v12;
    v13 = a2[21];
    *(_QWORD *)((char *)v4 + 173) = *(uint64_t *)((char *)a2 + 173);
    v4[21] = v13;
    *((_DWORD *)v4 + 50) = *((_DWORD *)a2 + 50);
    *(_OWORD *)(v4 + 23) = *(_OWORD *)(a2 + 23);
    *((_WORD *)v4 + 102) = *((_WORD *)a2 + 102);
    v14 = a2[31];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v14 == 1)
    {
      v15 = *((_OWORD *)a2 + 14);
      *((_OWORD *)v4 + 13) = *((_OWORD *)a2 + 13);
      *((_OWORD *)v4 + 14) = v15;
      *((_OWORD *)v4 + 15) = *((_OWORD *)a2 + 15);
    }
    else
    {
      v4[26] = a2[26];
      *((_BYTE *)v4 + 216) = *((_BYTE *)a2 + 216);
      v4[28] = a2[28];
      *((_BYTE *)v4 + 232) = *((_BYTE *)a2 + 232);
      *(_WORD *)((char *)v4 + 233) = *(_WORD *)((char *)a2 + 233);
      v4[30] = a2[30];
      v4[31] = v14;
      swift_bridgeObjectRetain(v14);
    }
    v17 = a3[12];
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = type metadata accessor for EventData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[13];
    v22 = (char *)v4 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[14];
    v26 = *(uint64_t *)((char *)a2 + v25);
    *(_QWORD *)((char *)v4 + v25) = v26;
    swift_bridgeObjectRetain(v26);
  }
  return v4;
}

uint64_t destroy for ReadEvent.Model(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[20]);
  v4 = a1[31];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (char *)a1 + a2[12];
  v6 = type metadata accessor for EventData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + a2[13];
  v8 = type metadata accessor for TimedData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14]));
}

uint64_t initializeWithCopy for ReadEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_WORD *)(a1 + 113) = *(_WORD *)(a2 + 113);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 173) = *(_QWORD *)(a2 + 173);
  *(_QWORD *)(a1 + 168) = v12;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_WORD *)(a1 + 204) = *(_WORD *)(a2 + 204);
  v13 = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v13 == 1)
  {
    v14 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v14;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  }
  else
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_WORD *)(a1 + 233) = *(_WORD *)(a2 + 233);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = v13;
    swift_bridgeObjectRetain(v13);
  }
  v15 = a3[12];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[13];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[14];
  v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t assignWithCopy for ReadEvent.Model(uint64_t a1, int *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  v14 = a2[19];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v14;
  v15 = a2[21];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_DWORD *)(a1 + 84) = v15;
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v16 = *((_QWORD *)a2 + 13);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
  *(_BYTE *)(a1 + 114) = *((_BYTE *)a2 + 114);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  v18 = *((_QWORD *)a2 + 16);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_DWORD *)(a1 + 136) = a2[34];
  *(_DWORD *)(a1 + 140) = a2[35];
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_BYTE *)(a1 + 145) = *((_BYTE *)a2 + 145);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  v20 = *((_QWORD *)a2 + 20);
  v21 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *((_QWORD *)a2 + 21);
  *(_QWORD *)(a1 + 173) = *(_QWORD *)((char *)a2 + 173);
  *(_QWORD *)(a1 + 168) = v22;
  v23 = *(_OWORD *)(a2 + 46);
  *(_DWORD *)(a1 + 200) = a2[50];
  *(_OWORD *)(a1 + 184) = v23;
  *(_BYTE *)(a1 + 204) = *((_BYTE *)a2 + 204);
  *(_BYTE *)(a1 + 205) = *((_BYTE *)a2 + 205);
  v24 = (__int128 *)(a1 + 208);
  v25 = (__int128 *)(a2 + 52);
  v26 = *(_QWORD *)(a1 + 248);
  v27 = *((_QWORD *)a2 + 31);
  if (v26 == 1)
  {
    if (v27 == 1)
    {
      v28 = *v25;
      v29 = *((_OWORD *)a2 + 15);
      *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
      *(_OWORD *)(a1 + 240) = v29;
      *v24 = v28;
    }
    else
    {
      *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
      *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
      *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
      *(_BYTE *)(a1 + 233) = *((_BYTE *)a2 + 233);
      *(_BYTE *)(a1 + 234) = *((_BYTE *)a2 + 234);
      *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
      v32 = *((_QWORD *)a2 + 31);
      *(_QWORD *)(a1 + 248) = v32;
      swift_bridgeObjectRetain(v32);
    }
  }
  else if (v27 == 1)
  {
    sub_19008(a1 + 208);
    v31 = *((_OWORD *)a2 + 14);
    v30 = *((_OWORD *)a2 + 15);
    *v24 = *v25;
    *(_OWORD *)(a1 + 224) = v31;
    *(_OWORD *)(a1 + 240) = v30;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    *(_BYTE *)(a1 + 233) = *((_BYTE *)a2 + 233);
    *(_BYTE *)(a1 + 234) = *((_BYTE *)a2 + 234);
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    v33 = *((_QWORD *)a2 + 31);
    *(_QWORD *)(a1 + 248) = v33;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRelease(v26);
  }
  v34 = a3[12];
  v35 = a1 + v34;
  v36 = (uint64_t)a2 + v34;
  v37 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  v38 = a3[13];
  v39 = a1 + v38;
  v40 = (uint64_t)a2 + v38;
  v41 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  v42 = a3[14];
  v43 = *(_QWORD *)(a1 + v42);
  v44 = *(_QWORD *)((char *)a2 + v42);
  *(_QWORD *)(a1 + v42) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v43);
  return a1;
}

uint64_t initializeWithTake for ReadEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 7) = *(_QWORD *)(a2 + 7);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v10 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 173) = *(_QWORD *)(a2 + 173);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_WORD *)(a1 + 204) = *(_WORD *)(a2 + 204);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  v13 = a3[12];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)(a1 + 208) = v11;
  v16 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[13];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for ReadEvent.Model(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_WORD *)(a1 + 113) = *(_WORD *)(a2 + 113);
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v16 = *(_QWORD *)(a2 + 160);
  v17 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 173) = *(_QWORD *)(a2 + 173);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_WORD *)(a1 + 204) = *(_WORD *)(a2 + 204);
  v18 = *(_QWORD *)(a1 + 248);
  if (v18 != 1)
  {
    v19 = *(_QWORD *)(a2 + 248);
    if (v19 != 1)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_WORD *)(a1 + 233) = *(_WORD *)(a2 + 233);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v19;
      swift_bridgeObjectRelease(v18);
      goto LABEL_6;
    }
    sub_19008(a1 + 208);
  }
  v20 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
LABEL_6:
  v21 = a3[12];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v25 = a3[13];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  v29 = a3[14];
  v30 = *(_QWORD *)(a1 + v29);
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  swift_bridgeObjectRelease(v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_73E40);
}

uint64_t sub_73E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 48);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ReadEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_73EEC);
}

uint64_t sub_73EEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 48);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_73F88(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[0] = &unk_1F85D8;
  v5[1] = &unk_1F85F0;
  v5[2] = &unk_1F8608;
  v5[3] = &unk_1F8620;
  v5[4] = &unk_1F8638;
  v5[5] = &unk_1F8650;
  v5[6] = &unk_1F8668;
  v5[7] = &unk_1F8680;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[8] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[9] = *(_QWORD *)(result - 8) + 64;
      v5[10] = &unk_1F8698;
      swift_initStructMetadata(a1, 256, 11, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_740B0 + 4 * byte_1F84A0[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_740E4 + 4 * byte_1F849B[v4]))();
}

uint64_t sub_740E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_740EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x740F4);
  return result;
}

uint64_t sub_74100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x74108);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_7410C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_74114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadEvent.Model.CodingKeys()
{
  return &type metadata for ReadEvent.Model.CodingKeys;
}

unint64_t sub_74134()
{
  unint64_t result;

  result = qword_299400;
  if (!qword_299400)
  {
    result = swift_getWitnessTable(&unk_1F874C, &type metadata for ReadEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299400);
  }
  return result;
}

unint64_t sub_7417C()
{
  unint64_t result;

  result = qword_299408;
  if (!qword_299408)
  {
    result = swift_getWitnessTable(&unk_1F86BC, &type metadata for ReadEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299408);
  }
  return result;
}

unint64_t sub_741C4()
{
  unint64_t result;

  result = qword_299410;
  if (!qword_299410)
  {
    result = swift_getWitnessTable(&unk_1F86E4, &type metadata for ReadEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299410);
  }
  return result;
}

uint64_t sub_74208(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0xD000000000000012 && a2 == 0x800000000021F6B0)
  {
    v4 = 0x800000000021F6B0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000000021F6B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x44746E65746E6F63 && a2 == 0xEB00000000617461)
  {
    v6 = 0xEB00000000617461;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746E65746E6F63, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x800000000021F6D0;
    if (a2 == 0x800000000021F6D0)
      goto LABEL_17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F6D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x61446C6C65537075 && a2 == 0xEA00000000006174)
  {
    v8 = 0xEA00000000006174;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446C6C65537075, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000013)
  {
    v9 = 0x800000000021F6F0;
    if (a2 == 0x800000000021F6F0)
      goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000000021F6F0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0x7461746E6569726FLL && a2 == 0xEF617461446E6F69)
  {
    v10 = 0xEF617461446E6F69;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEF617461446E6F69, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000000021F070)
  {
    v11 = 0x800000000021F070;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F070, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0x6144736569726573 && a2 == 0xEA00000000006174)
  {
    v12 = 0xEA00000000006174;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144736569726573, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_46;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v13 = 0xE900000000000061;
LABEL_52:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_52;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    v14 = 0xE900000000000061;
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_58;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000000021F090)
  {
    swift_bridgeObjectRelease(0x800000000021F090);
    return 10;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000021F090, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

BookAnalytics::GetStartedActionType_optional __swiftcall GetStartedActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::GetStartedActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266D60, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t GetStartedActionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65756E69746E6F63;
  if (*v0 != 1)
    v1 = 0x616E614D61746164;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_74760(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_28878(*a1, *a2);
}

unint64_t sub_74770()
{
  unint64_t result;

  result = qword_299418;
  if (!qword_299418)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GetStartedActionType, &type metadata for GetStartedActionType);
    atomic_store(result, (unint64_t *)&qword_299418);
  }
  return result;
}

Swift::Int sub_747B4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x65756E69746E6F63;
  if (v1 != 1)
  {
    v3 = 0x616E614D61746164;
    v2 = 0xEA00000000006567;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_74858(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x65756E69746E6F63;
  if (*v1 != 1)
  {
    v3 = 0x616E614D61746164;
    v2 = 0xEA00000000006567;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_748D8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x65756E69746E6F63;
  if (v2 != 1)
  {
    v4 = 0x616E614D61746164;
    v3 = 0xEA00000000006567;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::GetStartedActionType_optional sub_74978(Swift::String *a1)
{
  return GetStartedActionType.init(rawValue:)(*a1);
}

void sub_74984(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x65756E69746E6F63;
  if (v2 != 1)
  {
    v5 = 0x616E614D61746164;
    v4 = 0xEA00000000006567;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_749E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_74B5C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_74A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_74B5C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for GetStartedActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_74ADC + 4 * byte_1F87D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_74B10 + 4 * byte_1F87D0[v4]))();
}

uint64_t sub_74B10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_74B18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x74B20);
  return result;
}

uint64_t sub_74B2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x74B34);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_74B38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_74B40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GetStartedActionType()
{
  return &type metadata for GetStartedActionType;
}

unint64_t sub_74B5C()
{
  unint64_t result;

  result = qword_299420;
  if (!qword_299420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GetStartedActionType, &type metadata for GetStartedActionType);
    atomic_store(result, (unint64_t *)&qword_299420);
  }
  return result;
}

BookAnalytics::SuggestionType_optional __swiftcall SuggestionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SuggestionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266DC8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SuggestionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_74C28 + 4 * byte_1F88F4[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_74C28()
{
  return 0x746E65636572;
}

uint64_t sub_74C3C()
{
  return 0x676E69646E657274;
}

uint64_t sub_74C54()
{
  return 0x64656863746566;
}

uint64_t sub_74C68()
{
  return 0x6574736567677573;
}

unint64_t sub_74C9C()
{
  return 0xD000000000000014;
}

void sub_74CB8(char *a1)
{
  sub_27034(*a1);
}

unint64_t sub_74CC8()
{
  unint64_t result;

  result = qword_299428;
  if (!qword_299428)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SuggestionType, &type metadata for SuggestionType);
    atomic_store(result, (unint64_t *)&qword_299428);
  }
  return result;
}

void sub_74D0C()
{
  char *v0;

  sub_1D3754(0, *v0);
}

void sub_74D18(uint64_t a1)
{
  char *v1;

  sub_1ECD50(a1, *v1);
}

void sub_74D20(uint64_t a1)
{
  char *v1;

  sub_1D3754(a1, *v1);
}

BookAnalytics::SuggestionType_optional sub_74D28(Swift::String *a1)
{
  return SuggestionType.init(rawValue:)(*a1);
}

uint64_t sub_74D34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SuggestionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_74D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_74ECC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_74DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_74ECC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SuggestionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_74E4C + 4 * byte_1F8900[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_74E80 + 4 * byte_1F88FB[v4]))();
}

uint64_t sub_74E80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_74E88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x74E90);
  return result;
}

uint64_t sub_74E9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x74EA4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_74EA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_74EB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestionType()
{
  return &type metadata for SuggestionType;
}

unint64_t sub_74ECC()
{
  unint64_t result;

  result = qword_299430;
  if (!qword_299430)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SuggestionType, &type metadata for SuggestionType);
    atomic_store(result, (unint64_t *)&qword_299430);
  }
  return result;
}

BookAnalytics::SeriesUserSubStatus_optional __swiftcall SeriesUserSubStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SeriesUserSubStatus_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266E90, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SeriesUserSubStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_74FA0 + 4 * byte_1F8A30[*v0]))(0x6153736569726573, 0xEC000000656C706DLL);
}

uint64_t sub_74FA0()
{
  return 0x65536E497478656ELL;
}

uint64_t sub_74FC0()
{
  return 0x7265536572616873;
}

uint64_t sub_74FF0()
{
  return 0x65756E69746E6F63;
}

uint64_t sub_75014()
{
  return 0x6E776F6E6B6E75;
}

unint64_t sub_7502C()
{
  return 0xD000000000000010;
}

void sub_75048(char *a1)
{
  sub_2BC68(*a1);
}

unint64_t sub_75058()
{
  unint64_t result;

  result = qword_299438;
  if (!qword_299438)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesUserSubStatus, &type metadata for SeriesUserSubStatus);
    atomic_store(result, (unint64_t *)&qword_299438);
  }
  return result;
}

void sub_7509C()
{
  char *v0;

  sub_1D3A34(0, *v0);
}

void sub_750A8(uint64_t a1)
{
  char *v1;

  sub_1ECA4C(a1, *v1);
}

void sub_750B0(uint64_t a1)
{
  char *v1;

  sub_1D3A34(a1, *v1);
}

BookAnalytics::SeriesUserSubStatus_optional sub_750B8(Swift::String *a1)
{
  return SeriesUserSubStatus.init(rawValue:)(*a1);
}

uint64_t sub_750C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SeriesUserSubStatus.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_750E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_7525C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_75144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_7525C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SeriesUserSubStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_751DC + 4 * byte_1F8A3C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_75210 + 4 * byte_1F8A37[v4]))();
}

uint64_t sub_75210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_75218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x75220);
  return result;
}

uint64_t sub_7522C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x75234);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_75238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_75240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesUserSubStatus()
{
  return &type metadata for SeriesUserSubStatus;
}

unint64_t sub_7525C()
{
  unint64_t result;

  result = qword_299440;
  if (!qword_299440)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesUserSubStatus, &type metadata for SeriesUserSubStatus);
    atomic_store(result, (unint64_t *)&qword_299440);
  }
  return result;
}

BookAnalytics::FeatureEnabled_optional __swiftcall FeatureEnabled.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::FeatureEnabled_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266F58, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t FeatureEnabled.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x64656C62616E65;
  if (*v0 != 1)
    v1 = 0x64656C6261736964;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_75354(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2A3E4(*a1, *a2);
}

unint64_t sub_75364()
{
  unint64_t result;

  result = qword_299448;
  if (!qword_299448)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FeatureEnabled, &type metadata for FeatureEnabled);
    atomic_store(result, (unint64_t *)&qword_299448);
  }
  return result;
}

Swift::Int sub_753A8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE700000000000000;
  v3 = 0x64656C62616E65;
  if (v1 != 1)
  {
    v3 = 0x64656C6261736964;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_75448(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x64656C62616E65;
  if (*v1 != 1)
  {
    v3 = 0x64656C6261736964;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E776F6E6B6E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_754C4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE700000000000000;
  v4 = 0x64656C62616E65;
  if (v2 != 1)
  {
    v4 = 0x64656C6261736964;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E776F6E6B6E75;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookAnalytics::FeatureEnabled_optional sub_75560(Swift::String *a1)
{
  return FeatureEnabled.init(rawValue:)(*a1);
}

void sub_7556C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x64656C62616E65;
  if (v2 != 1)
  {
    v5 = 0x64656C6261736964;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E776F6E6B6E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_755CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_75740();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_75628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_75740();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for FeatureEnabled(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_756C0 + 4 * byte_1F8B75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_756F4 + 4 * byte_1F8B70[v4]))();
}

uint64_t sub_756F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_756FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x75704);
  return result;
}

uint64_t sub_75710(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x75718);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_7571C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_75724(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureEnabled()
{
  return &type metadata for FeatureEnabled;
}

unint64_t sub_75740()
{
  unint64_t result;

  result = qword_299450;
  if (!qword_299450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FeatureEnabled, &type metadata for FeatureEnabled);
    atomic_store(result, (unint64_t *)&qword_299450);
  }
  return result;
}

BookAnalytics::SectionType_optional __swiftcall SectionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookAnalytics::SectionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_266FC0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SectionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7580C + 4 * byte_1F8C90[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_7580C()
{
  return 0x68736F6F7773;
}

uint64_t sub_75820()
{
  return 0x6B63697262;
}

unint64_t sub_75834()
{
  return 0xD000000000000010;
}

uint64_t sub_75850()
{
  return 0x65736163776F6C66;
}

uint64_t sub_75868()
{
  return 0x736C616F67;
}

uint64_t sub_7587C()
{
  return 0x6573776F7262;
}

void sub_75890(char *a1)
{
  sub_2B0C4(*a1);
}

unint64_t sub_758A0()
{
  unint64_t result;

  result = qword_299458;
  if (!qword_299458)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SectionType, &type metadata for SectionType);
    atomic_store(result, (unint64_t *)&qword_299458);
  }
  return result;
}

void sub_758E4()
{
  char *v0;

  sub_1D30FC(0, *v0);
}

void sub_758F0(uint64_t a1)
{
  char *v1;

  sub_1ED240(a1, *v1);
}

void sub_758F8(uint64_t a1)
{
  char *v1;

  sub_1D30FC(a1, *v1);
}

BookAnalytics::SectionType_optional sub_75900(Swift::String *a1)
{
  return SectionType.init(rawValue:)(*a1);
}

uint64_t sub_7590C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SectionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_75930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_75AA4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_7598C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_75AA4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for SectionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_75A24 + 4 * byte_1F8C9C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_75A58 + 4 * byte_1F8C97[v4]))();
}

uint64_t sub_75A58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_75A60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x75A68);
  return result;
}

uint64_t sub_75A74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x75A7CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_75A80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_75A88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SectionType()
{
  return &type metadata for SectionType;
}

unint64_t sub_75AA4()
{
  unint64_t result;

  result = qword_299460;
  if (!qword_299460)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SectionType, &type metadata for SectionType);
    atomic_store(result, (unint64_t *)&qword_299460);
  }
  return result;
}

uint64_t sub_75AE8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_299468, &enum case for SessionGroup.default(_:));
}

uint64_t static CollectionScreenViewEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295680, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299468, a1);
}

uint64_t sub_75B28(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_299480, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static CollectionScreenViewEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295688, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299480, a1);
}

uint64_t CollectionScreenViewEvent.singleCollectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299498);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CollectionScreenViewEvent.singleCollectionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299498);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t CollectionScreenViewEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionScreenViewEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_299510, (uint64_t)&nominal type descriptor for CollectionScreenViewEvent);
}

uint64_t CollectionScreenViewEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionScreenViewEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionScreenViewEvent.eventData.modify())()
{
  type metadata accessor for CollectionScreenViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionScreenViewEvent.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionScreenViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CollectionScreenViewEvent.timedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionScreenViewEvent(0) + 24);
  v4 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CollectionScreenViewEvent.timedData.modify())()
{
  type metadata accessor for CollectionScreenViewEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t CollectionScreenViewEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for CollectionScreenViewEvent(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v5, v2, v6);
  v7 = a1 + *(int *)(v4 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v7, v2, v8);
}

uint64_t CollectionScreenViewEvent.Model.singleCollectionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t CollectionScreenViewEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionScreenViewEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionScreenViewEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_2995B0, (uint64_t)&nominal type descriptor for CollectionScreenViewEvent.Model);
}

uint64_t CollectionScreenViewEvent.Model.timedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CollectionScreenViewEvent.Model(0) + 24);
  v4 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CollectionScreenViewEvent.Model.init(singleCollectionData:eventData:timedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v8;
  v9 = type metadata accessor for CollectionScreenViewEvent.Model(0);
  v10 = a4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  v12 = a4 + *(int *)(v9 + 24);
  v13 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a3, v13);
}

unint64_t sub_75F7C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746144746E657665;
  if (*v0 != 1)
    v1 = 0x74614464656D6974;
  if (*v0)
    return v1;
  else
    return 0xD000000000000014;
}

uint64_t sub_75FE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_775E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_76008(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_76230();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_76030(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_76230();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionScreenViewEvent.Model.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[2];
  int v25;

  v3 = v1;
  v5 = sub_71B4(&qword_2994A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_76230();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionScreenViewEvent.Model.CodingKeys, &type metadata for CollectionScreenViewEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 8);
  v13 = *(_DWORD *)(v3 + 16);
  v24[0] = *(_QWORD *)v3;
  v24[1] = v12;
  v25 = v13;
  HIBYTE(v23) = 0;
  v14 = sub_159A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, (char *)&v23 + 7, v5, &type metadata for SingleCollectionData, v14);
  if (!v2)
  {
    v15 = type metadata accessor for CollectionScreenViewEvent.Model(0);
    v16 = v3 + *(int *)(v15 + 20);
    LOBYTE(v24[0]) = 1;
    v17 = type metadata accessor for EventData(0);
    v18 = sub_7E10(&qword_295D98, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v24, v5, v17, v18);
    v19 = v3 + *(int *)(v15 + 24);
    LOBYTE(v24[0]) = 2;
    v20 = type metadata accessor for TimedData(0);
    v21 = sub_7E10(&qword_295DA0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, v24, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_76230()
{
  unint64_t result;

  result = qword_2994A8;
  if (!qword_2994A8)
  {
    result = swift_getWitnessTable(&unk_1F8F8C, &type metadata for CollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2994A8);
  }
  return result;
}

uint64_t CollectionScreenViewEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[2];
  int v41;
  char v42;

  v32 = a2;
  v33 = type metadata accessor for TimedData(0);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v34 = (_QWORD *)((char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for EventData(0);
  v4 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v6 = (_QWORD *)((char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_71B4(&qword_2994B0);
  v7 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CollectionScreenViewEvent.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v38 = a1;
  sub_7988(a1, v13);
  v15 = sub_76230();
  v37 = v9;
  v16 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionScreenViewEvent.Model.CodingKeys, &type metadata for CollectionScreenViewEvent.Model.CodingKeys, v15, v13, v14);
  if (v16)
    return sub_7DAC(v38);
  v17 = v7;
  v18 = (uint64_t)v12;
  v39 = v4;
  v19 = v35;
  v42 = 0;
  v20 = sub_1595C();
  v21 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, &type metadata for SingleCollectionData, &v42, v36, &type metadata for SingleCollectionData, v20);
  v22 = v40[1];
  v23 = v41;
  *(_QWORD *)v18 = v40[0];
  *(_QWORD *)(v18 + 8) = v22;
  *(_DWORD *)(v18 + 16) = v23;
  LOBYTE(v40[0]) = 1;
  v24 = sub_7E10(&qword_295DB8, (uint64_t (*)(uint64_t))&type metadata accessor for EventData, (uint64_t)&protocol conformance descriptor for EventData);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v19, v40, v21, v19, v24);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v39 + 32))(v18 + *(int *)(v10 + 20), v6, v19);
  LOBYTE(v40[0]) = 2;
  v25 = sub_7E10(&qword_295DC0, (uint64_t (*)(uint64_t))&type metadata accessor for TimedData, (uint64_t)&protocol conformance descriptor for TimedData);
  v26 = v34;
  v27 = v21;
  v28 = v33;
  v30[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v33, v40, v27, v33, v25);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v37, v36);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v31 + 32))(v18 + *(int *)(v10 + 24), v26, v28);
  sub_765DC(v18, v32);
  sub_7DAC(v38);
  return sub_76620(v18);
}

uint64_t sub_765DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CollectionScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_76620(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CollectionScreenViewEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_7665C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CollectionScreenViewEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_76670(_QWORD *a1)
{
  return CollectionScreenViewEvent.Model.encode(to:)(a1);
}

uint64_t sub_76684@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295680, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299468, (uint64_t)sub_75AE8, a1);
}

uint64_t sub_766A8@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295688, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299480, (uint64_t)sub_75B28, a1);
}

uint64_t sub_766CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
  v8 = a2 + *(int *)(a1 + 24);
  v9 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v8, v4, v9);
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionScreenViewEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = sub_71B4(&qword_299498);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_71B4(&qword_295D78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for CollectionScreenViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_71B4(&qword_295D78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for CollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for CollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for CollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for CollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_71B4(&qword_299498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_71B4(&qword_295D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_76BF0);
}

uint64_t sub_76BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_71B4(&qword_299498);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_71B4(&qword_295D70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_71B4(&qword_295D78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CollectionScreenViewEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_76CA0);
}

uint64_t sub_76CA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_71B4(&qword_299498);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_71B4(&qword_295D70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_71B4(&qword_295D78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_76D4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_76DEC(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_87D8(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_76DEC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_299520)
  {
    v2 = sub_1595C();
    v3 = sub_159A4();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for SingleCollectionData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_299520);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v8 = *(int *)(a3 + 20);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for EventData(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = type metadata accessor for TimedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t destroy for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for TimedData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for EventData(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t assignWithCopy for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for EventData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_77264);
}

uint64_t sub_77264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CollectionScreenViewEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_77310);
}

uint64_t sub_77310(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimedData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_773AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_1F8EB0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimedData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionScreenViewEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_77488 + 4 * byte_1F8DD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_774BC + 4 * byte_1F8DD0[v4]))();
}

uint64_t sub_774BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_774C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x774CCLL);
  return result;
}

uint64_t sub_774D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x774E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_774E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_774EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionScreenViewEvent.Model.CodingKeys()
{
  return &type metadata for CollectionScreenViewEvent.Model.CodingKeys;
}

unint64_t sub_7750C()
{
  unint64_t result;

  result = qword_2995F0;
  if (!qword_2995F0)
  {
    result = swift_getWitnessTable(&unk_1F8F64, &type metadata for CollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2995F0);
  }
  return result;
}

unint64_t sub_77554()
{
  unint64_t result;

  result = qword_2995F8;
  if (!qword_2995F8)
  {
    result = swift_getWitnessTable("5}\a", &type metadata for CollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2995F8);
  }
  return result;
}

unint64_t sub_7759C()
{
  unint64_t result;

  result = qword_299600;
  if (!qword_299600)
  {
    result = swift_getWitnessTable(&unk_1F8EFC, &type metadata for CollectionScreenViewEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299600);
  }
  return result;
}

uint64_t sub_775E0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x800000000021F710;
    if (a2 == 0x800000000021F710)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F710, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    v6 = 0xE900000000000061;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x74614464656D6974 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614464656D6974, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t AltSeriesContentTypeExposureData.altContentID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t AltSeriesContentTypeExposureData.altContentID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

void NotificationData.recoType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 25);
}

_BYTE *NotificationData.recoType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = *result;
  return result;
}

uint64_t (*NotificationData.recoType.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

void NotificationData.goalType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 26);
}

_BYTE *NotificationData.goalType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 26) = *result;
  return result;
}

uint64_t (*NotificationData.goalType.modify())()
{
  return BridgedContentAcquisitionType.rawValue.getter;
}

__n128 NotificationData.init(notificationContentID:notificationID:notificationType:recoType:goalType:titleCode:title:messageCode:message:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __n128 a11, uint64_t a12, uint64_t a13)
{
  __n128 result;
  char v14;
  char v15;
  char v16;

  result = a11;
  v14 = *a4;
  v15 = *a5;
  v16 = *a6;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = v14;
  *(_BYTE *)(a9 + 25) = v15;
  *(_BYTE *)(a9 + 26) = v16;
  *(_QWORD *)(a9 + 32) = a7;
  *(_QWORD *)(a9 + 40) = a8;
  *(_OWORD *)(a9 + 48) = a10;
  *(__n128 *)(a9 + 64) = a11;
  *(_QWORD *)(a9 + 80) = a12;
  *(_QWORD *)(a9 + 88) = a13;
  return result;
}

uint64_t sub_77834(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_77874 + 4 * byte_1F8FE0[a1]))(0xD000000000000015, 0x800000000021F730);
}

uint64_t sub_77874()
{
  return 0x6163696669746F6ELL;
}

unint64_t sub_77898()
{
  return 0xD000000000000010;
}

uint64_t sub_778B4()
{
  return 0x657079546F636572;
}

uint64_t sub_778DC()
{
  return 0x646F43656C746974;
}

uint64_t sub_778F8()
{
  return 0x656C746974;
}

uint64_t sub_7790C()
{
  return 0x436567617373656DLL;
}

uint64_t sub_7792C()
{
  return 0x6567617373656DLL;
}

uint64_t sub_77944()
{
  unsigned __int8 *v0;

  return sub_77834(*v0);
}

uint64_t sub_7794C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_78CE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_77970(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_78550();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_77998(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_78550();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NotificationData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v4 = sub_71B4(&qword_299608);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v41 = v1[2];
  v42 = v8;
  LODWORD(v8) = *((unsigned __int8 *)v1 + 24);
  v39 = *((unsigned __int8 *)v1 + 25);
  v40 = v8;
  v38 = *((unsigned __int8 *)v1 + 26);
  v10 = v1[5];
  v36 = v1[4];
  v37 = v10;
  v11 = v1[6];
  v34 = v1[7];
  v35 = v11;
  v12 = v1[9];
  v32 = v1[8];
  v33 = v12;
  v13 = v1[11];
  v30 = v1[10];
  v31 = v13;
  v14 = a1[3];
  v15 = a1[4];
  sub_7988(a1, v14);
  v16 = sub_78550();
  v17 = v15;
  v18 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationData.CodingKeys, &type metadata for NotificationData.CodingKeys, v16, v14, v17);
  v44 = v9;
  v43 = 0;
  v19 = sub_71B4(&qword_299618);
  v20 = sub_78660(&qword_299620, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v44, &v43, v4, v19, v20);
  if (!v2)
  {
    v22 = v39;
    v21 = v40;
    v23 = v38;
    v24 = v37;
    LOBYTE(v44) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v42, v41, &v44, v18);
    LOBYTE(v44) = v21;
    v43 = 2;
    v25 = sub_78594();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v44, &v43, v18, &type metadata for NotificationType, v25);
    LOBYTE(v44) = v22;
    v43 = 3;
    v26 = sub_785D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v44, &v43, v18, &type metadata for RecoType, v26);
    LOBYTE(v44) = v23;
    v43 = 4;
    v27 = sub_7861C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v44, &v43, v18, &type metadata for GoalType, v27);
    LOBYTE(v44) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v24, &v44, v18);
    LOBYTE(v44) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v34, &v44, v18);
    LOBYTE(v44) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v44, v18);
    LOBYTE(v44) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, &v44, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v18);
}

uint64_t NotificationData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v5 = sub_71B4(&qword_299640);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_78550();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationData.CodingKeys, &type metadata for NotificationData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_7DAC(a1);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    v34 = 0;
  }
  else
  {
    v12 = sub_71B4(&qword_299618);
    v46 = 0;
    v13 = sub_78660(&qword_299648, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v47, v12, &v46, v5, v12, v13);
    v15 = v47;
    LOBYTE(v47) = 1;
    swift_bridgeObjectRetain(v15);
    v43 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v5);
    v46 = 2;
    v17 = v16;
    v18 = sub_786C0();
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for NotificationType, &v46, v5, &type metadata for NotificationType, v18);
    v45 = v17;
    LODWORD(v17) = v47;
    v46 = 3;
    v19 = sub_78704();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for RecoType, &v46, v5, &type metadata for RecoType, v19);
    v42 = v17;
    LODWORD(v17) = v47;
    v46 = 4;
    v20 = sub_78748();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for GoalType, &v46, v5, &type metadata for GoalType, v20);
    v40 = v17;
    v41 = a2;
    LODWORD(v17) = v47;
    LOBYTE(v47) = 5;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
    v23 = v22;
    v39 = v21;
    LOBYTE(v47) = 6;
    swift_bridgeObjectRetain(v22);
    v37 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v5);
    v38 = v17;
    LOBYTE(v47) = 7;
    v44 = v24;
    swift_bridgeObjectRetain(v24);
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
    v27 = v26;
    v36 = v25;
    LOBYTE(v47) = 8;
    swift_bridgeObjectRetain(v26);
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(0);
    v30 = v41;
    v31 = v43;
    v32 = v44;
    *v41 = v15;
    v30[1] = v31;
    v33 = v45;
    v30[2] = v45;
    *((_BYTE *)v30 + 24) = v42;
    *((_BYTE *)v30 + 25) = v40;
    *((_BYTE *)v30 + 26) = v38;
    v30[4] = v39;
    v30[5] = v23;
    v30[6] = v37;
    v30[7] = v32;
    v30[8] = v36;
    v30[9] = v27;
    v30[10] = v35;
    v30[11] = v29;
    sub_7DAC(a1);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v33);
    v34 = v15;
  }
  return swift_bridgeObjectRelease(v34);
}

uint64_t sub_781FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NotificationData.init(from:)(a1, a2);
}

uint64_t sub_78210(_QWORD *a1)
{
  return NotificationData.encode(to:)(a1);
}

BOOL _s13BookAnalytics16NotificationDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL8 result;
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 25);
  v9 = *(unsigned __int8 *)(a1 + 26);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 16);
  v21 = *(unsigned __int8 *)(a2 + 26);
  v23 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_QWORD *)(a2 + 56);
  v27 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v29 = *(_QWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 88);
  if (v4)
  {
    if (!v18)
      return 0;
    v56 = v23;
    v60 = v22;
    v61 = v11;
    v57 = v10;
    v58 = v24;
    v54 = v25;
    v55 = v13;
    v59 = v12;
    v50 = v27;
    v51 = v14;
    v52 = v26;
    v53 = v15;
    v46 = v29;
    v47 = v17;
    v48 = v28;
    v49 = v16;
    if ((sub_66274(v4, v18) & 1) == 0)
      return 0;
  }
  else
  {
    v56 = v23;
    v60 = v22;
    v61 = v11;
    v57 = v10;
    v58 = v24;
    v54 = v25;
    v55 = v13;
    v59 = v12;
    v50 = v27;
    v51 = v14;
    v52 = v26;
    v53 = v15;
    v46 = v29;
    v47 = v17;
    v48 = v28;
    v49 = v16;
    if (v18)
      return 0;
  }
  if (v6 == v20 && v5 == v19
    || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v20, v19, 0), result = 0, (v30 & 1) != 0))
  {
    sub_2995C(v7);
    if ((v32 & 1) == 0)
      return 0;
    sub_25DF4(v8);
    if ((v33 & 1) == 0)
      return 0;
    v34 = 0x47676E6964616572;
    v35 = 0xEB000000006C616FLL;
    if (v9 != 1)
    {
      v34 = 0x616F47736B6F6F62;
      v35 = 0xE90000000000006CLL;
    }
    if (v9)
      v36 = v34;
    else
      v36 = 0x6E776F6E6B6E75;
    if (v9)
      v37 = v35;
    else
      v37 = 0xE700000000000000;
    v38 = 0x47676E6964616572;
    v39 = 0xEB000000006C616FLL;
    if (v21 != 1)
    {
      v38 = 0x616F47736B6F6F62;
      v39 = 0xE90000000000006CLL;
    }
    if (v21)
      v40 = v38;
    else
      v40 = 0x6E776F6E6B6E75;
    if (v21)
      v41 = v39;
    else
      v41 = 0xE700000000000000;
    if (v36 == v40 && v37 == v41)
    {
      swift_bridgeObjectRelease_n(v37, 2);
    }
    else
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v40, v41, 0);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v41);
      result = 0;
      if ((v42 & 1) == 0)
        return result;
    }
    if (v61)
    {
      if (!v60)
        return 0;
      if (v57 != v56 || v61 != v60)
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v61, v56, v60, 0);
        result = 0;
        if ((v43 & 1) == 0)
          return result;
      }
    }
    else if (v60)
    {
      return 0;
    }
    if (v59 != v58 || v55 != v54)
    {
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v55, v58, v54, 0);
      result = 0;
      if ((v44 & 1) == 0)
        return result;
    }
    if (v53)
    {
      if (!v52)
        return 0;
      if (v51 != v50 || v53 != v52)
      {
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v50, v52, 0);
        result = 0;
        if ((v45 & 1) == 0)
          return result;
      }
    }
    else if (v52)
    {
      return 0;
    }
    if (v49)
      return v48
          && (v47 == v46 && v49 == v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v46, v48, 0) & 1) != 0);
    return !v48;
  }
  return result;
}

unint64_t sub_78550()
{
  unint64_t result;

  result = qword_299610;
  if (!qword_299610)
  {
    result = swift_getWitnessTable(&unk_1F91A4, &type metadata for NotificationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299610);
  }
  return result;
}

unint64_t sub_78594()
{
  unint64_t result;

  result = qword_299628;
  if (!qword_299628)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationType, &type metadata for NotificationType);
    atomic_store(result, (unint64_t *)&qword_299628);
  }
  return result;
}

unint64_t sub_785D8()
{
  unint64_t result;

  result = qword_299630;
  if (!qword_299630)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecoType, &type metadata for RecoType);
    atomic_store(result, (unint64_t *)&qword_299630);
  }
  return result;
}

unint64_t sub_7861C()
{
  unint64_t result;

  result = qword_299638;
  if (!qword_299638)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GoalType, &type metadata for GoalType);
    atomic_store(result, (unint64_t *)&qword_299638);
  }
  return result;
}

uint64_t sub_78660(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_679EC(&qword_299618);
    v8 = a2;
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_786C0()
{
  unint64_t result;

  result = qword_299650;
  if (!qword_299650)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationType, &type metadata for NotificationType);
    atomic_store(result, (unint64_t *)&qword_299650);
  }
  return result;
}

unint64_t sub_78704()
{
  unint64_t result;

  result = qword_299658;
  if (!qword_299658)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecoType, &type metadata for RecoType);
    atomic_store(result, (unint64_t *)&qword_299658);
  }
  return result;
}

unint64_t sub_78748()
{
  unint64_t result;

  result = qword_299660;
  if (!qword_299660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GoalType, &type metadata for GoalType);
    atomic_store(result, (unint64_t *)&qword_299660);
  }
  return result;
}

unint64_t sub_78790()
{
  unint64_t result;

  result = qword_299668;
  if (!qword_299668)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationData, &type metadata for NotificationData);
    atomic_store(result, (unint64_t *)&qword_299668);
  }
  return result;
}

unint64_t sub_787D8()
{
  unint64_t result;

  result = qword_299670;
  if (!qword_299670)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationData, &type metadata for NotificationData);
    atomic_store(result, (unint64_t *)&qword_299670);
  }
  return result;
}

uint64_t destroy for NotificationData(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for NotificationData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)((char *)a2 + 25);
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v7;
  v8 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v8;
  v9 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *assignWithCopy for NotificationData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a1 + 26) = *((_BYTE *)a2 + 26);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  v14 = a2[11];
  v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t *assignWithTake for NotificationData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *(_WORD *)((char *)a1 + 25) = *(_WORD *)((char *)a2 + 25);
  v7 = a2[5];
  v8 = a1[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRelease(v8);
  v9 = a2[7];
  v10 = a1[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = a2[9];
  v12 = a1[9];
  a1[8] = a2[8];
  a1[9] = v11;
  swift_bridgeObjectRelease(v12);
  v13 = a2[11];
  v14 = a1[11];
  a1[10] = a2[10];
  a1[11] = v13;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationData()
{
  return &type metadata for NotificationData;
}

uint64_t storeEnumTagSinglePayload for NotificationData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_78B8C + 4 * byte_1F8FEE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_78BC0 + 4 * byte_1F8FE9[v4]))();
}

uint64_t sub_78BC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_78BC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x78BD0);
  return result;
}

uint64_t sub_78BDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x78BE4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_78BE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_78BF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationData.CodingKeys()
{
  return &type metadata for NotificationData.CodingKeys;
}

unint64_t sub_78C10()
{
  unint64_t result;

  result = qword_299678;
  if (!qword_299678)
  {
    result = swift_getWitnessTable(&unk_1F917C, &type metadata for NotificationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299678);
  }
  return result;
}

unint64_t sub_78C58()
{
  unint64_t result;

  result = qword_299680;
  if (!qword_299680)
  {
    result = swift_getWitnessTable("5}\a", &type metadata for NotificationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299680);
  }
  return result;
}

unint64_t sub_78CA0()
{
  unint64_t result;

  result = qword_299688;
  if (!qword_299688)
  {
    result = swift_getWitnessTable(&unk_1F9114, &type metadata for NotificationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299688);
  }
  return result;
}

uint64_t sub_78CE4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0xD000000000000015)
  {
    v4 = 0x800000000021F730;
    if (a2 == 0x800000000021F730)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000000021F730, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6163696669746F6ELL && a2 == 0xEE0044496E6F6974)
  {
    v6 = 0xEE0044496E6F6974;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6163696669746F6ELL, 0xEE0044496E6F6974, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000000021F750;
    if (a2 == 0x800000000021F750)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000000021F750, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x657079546F636572 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657079546F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x657079546C616F67 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657079546C616F67, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x646F43656C746974 && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F43656C746974, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0x436567617373656DLL && a2 == 0xEB0000000065646FLL)
  {
    v12 = 0xEB0000000065646FLL;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x436567617373656DLL, 0xEB0000000065646FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_46;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 8;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

BookAnalytics::YIRDetailedData __swiftcall YIRDetailedData.init(totalCardCount:cardViewedCount:)(Swift::Int64_optional totalCardCount, Swift::Int64_optional cardViewedCount)
{
  uint64_t v2;
  BookAnalytics::YIRDetailedData result;

  *(_QWORD *)v2 = totalCardCount.value;
  *(_BYTE *)(v2 + 8) = totalCardCount.is_nil;
  *(_QWORD *)(v2 + 16) = cardViewedCount.value;
  *(_BYTE *)(v2 + 24) = cardViewedCount.is_nil;
  result.cardViewedCount = cardViewedCount;
  result.totalCardCount = totalCardCount;
  return result;
}

uint64_t sub_790E8()
{
  _BYTE *v0;

  if (*v0)
    return 0x7765695664726163;
  else
    return 0x7261436C61746F74;
}

uint64_t sub_7913C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_797B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_79160(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_794D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_79188(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_794D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t YIRDetailedData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char v17;

  v4 = sub_71B4(&qword_299690);
  v14 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v13 = v1[2];
  v15 = *((unsigned __int8 *)v1 + 24);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_794D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for YIRDetailedData.CodingKeys, &type metadata for YIRDetailedData.CodingKeys, v11, v9, v10);
  v17 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v17, v4);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v15, &v16, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

uint64_t YIRDetailedData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;

  v5 = sub_71B4(&qword_2996A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_794D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for YIRDetailedData.CodingKeys, &type metadata for YIRDetailedData.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v22 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v22, v5);
    v14 = v13;
    v21 = 1;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v21, v5);
    v17 = v8;
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v14 & 1;
    *(_QWORD *)(a2 + 16) = v16;
    *(_BYTE *)(a2 + 24) = v19 & 1;
  }
  return sub_7DAC(a1);
}

uint64_t sub_79454@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return YIRDetailedData.init(from:)(a1, a2);
}

uint64_t sub_79468(_QWORD *a1)
{
  return YIRDetailedData.encode(to:)(a1);
}

BOOL _s13BookAnalytics15YIRDetailedDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
      v4 = *(_BYTE *)(a2 + 24);
    else
      v4 = 1;
    return (v4 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 24) & 1) != 0;
}

unint64_t sub_794D8()
{
  unint64_t result;

  result = qword_299698;
  if (!qword_299698)
  {
    result = swift_getWitnessTable(&unk_1F9398, &type metadata for YIRDetailedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299698);
  }
  return result;
}

unint64_t sub_79520()
{
  unint64_t result;

  result = qword_2996A8;
  if (!qword_2996A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for YIRDetailedData, &type metadata for YIRDetailedData);
    atomic_store(result, (unint64_t *)&qword_2996A8);
  }
  return result;
}

unint64_t sub_79568()
{
  unint64_t result;

  result = qword_2996B0;
  if (!qword_2996B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for YIRDetailedData, &type metadata for YIRDetailedData);
    atomic_store(result, (unint64_t *)&qword_2996B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for YIRDetailedData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for YIRDetailedData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for YIRDetailedData()
{
  return &type metadata for YIRDetailedData;
}

uint64_t storeEnumTagSinglePayload for YIRDetailedData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_79658 + 4 * byte_1F91F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_7968C + 4 * byte_1F91F4[v4]))();
}

uint64_t sub_7968C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_79694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7969CLL);
  return result;
}

uint64_t sub_796A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x796B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_796B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_796BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for YIRDetailedData.CodingKeys()
{
  return &type metadata for YIRDetailedData.CodingKeys;
}

unint64_t sub_796DC()
{
  unint64_t result;

  result = qword_2996B8;
  if (!qword_2996B8)
  {
    result = swift_getWitnessTable(&unk_1F9370, &type metadata for YIRDetailedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2996B8);
  }
  return result;
}

unint64_t sub_79724()
{
  unint64_t result;

  result = qword_2996C0;
  if (!qword_2996C0)
  {
    result = swift_getWitnessTable(")}\a", &type metadata for YIRDetailedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2996C0);
  }
  return result;
}

unint64_t sub_7976C()
{
  unint64_t result;

  result = qword_2996C8;
  if (!qword_2996C8)
  {
    result = swift_getWitnessTable(&unk_1F9308, &type metadata for YIRDetailedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2996C8);
  }
  return result;
}

uint64_t sub_797B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7261436C61746F74 && a2 == 0xEE00746E756F4364)
  {
    v5 = 0xEE00746E756F4364;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261436C61746F74, 0xEE00746E756F4364, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7765695664726163 && a2 == 0xEF746E756F436465)
  {
    swift_bridgeObjectRelease(0xEF746E756F436465);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7765695664726163, 0xEF746E756F436465, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_798E8(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_2996D0, &enum case for SessionGroup.default(_:));
}

uint64_t static GetStartedActionEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295690, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2996D0, a1);
}

uint64_t sub_79928(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_2996E8, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static GetStartedActionEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_295698, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2996E8, a1);
}

uint64_t GetStartedActionEvent.getStartedActionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299700);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GetStartedActionEvent.getStartedActionData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299700);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t GetStartedActionEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GetStartedActionEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GetStartedActionEvent(uint64_t a1)
{
  return sub_74F4(a1, (uint64_t *)&unk_299778, (uint64_t)&nominal type descriptor for GetStartedActionEvent);
}

uint64_t GetStartedActionEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GetStartedActionEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GetStartedActionEvent.eventData.modify())()
{
  type metadata accessor for GetStartedActionEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t GetStartedActionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = enum case for EventProperty.required<A>(_:);
  v3 = sub_71B4(&qword_299700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for GetStartedActionEvent(0) + 20);
  v5 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v2, v5);
}

uint64_t GetStartedActionEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GetStartedActionEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for GetStartedActionEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_299810, (uint64_t)&nominal type descriptor for GetStartedActionEvent.Model);
}

uint64_t GetStartedActionEvent.Model.init(getStartedActionData:eventData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = &a3[*(int *)(type metadata accessor for GetStartedActionEvent.Model(0) + 20)];
  v5 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_79BE0()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0xD000000000000014;
}

uint64_t sub_79C24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7ABF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_79C48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_79DFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_79C70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_79DFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GetStartedActionEvent.Model.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_71B4(&qword_299708);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_79DFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GetStartedActionEvent.Model.CodingKeys, &type metadata for GetStartedActionEvent.Model.CodingKeys, v11, v9, v10);
  v20 = *v3;
  v19 = 0;
  v12 = sub_1470C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for GetStartedActionData, v12);
  if (!v2)
  {
    v13 = &v3[*(int *)(type metadata accessor for GetStartedActionEvent.Model(0) + 20)];
    v18 = 1;
    v14 = type metadata accessor for EventData(0);
    v15 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_79DFC()
{
  unint64_t result;

  result = qword_299710;
  if (!qword_299710)
  {
    result = swift_getWitnessTable(&unk_1F959C, &type metadata for GetStartedActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299710);
  }
  return result;
}

uint64_t GetStartedActionEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t StartedAction;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v29 = type metadata accessor for EventData(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_71B4(&qword_299718);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  StartedAction = type metadata accessor for GetStartedActionEvent.Model(0);
  __chkstk_darwin(StartedAction);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_79DFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GetStartedActionEvent.Model.CodingKeys, &type metadata for GetStartedActionEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v25 = StartedAction;
    v26 = v5;
    v14 = v10;
    v16 = v28;
    v15 = v29;
    v17 = v30;
    v33 = 0;
    v18 = sub_146C4();
    v19 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for GetStartedActionData, &v33, v31, &type metadata for GetStartedActionData, v18);
    v24 = v14;
    *v14 = v34;
    v32 = 1;
    v20 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v32, v19, v15, v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v19);
    v21 = v17;
    v22 = (uint64_t)v24;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v27 + 32))(&v24[*(int *)(v25 + 20)], v16, v15);
    sub_7A094(v22, v21);
  }
  return sub_7DAC(a1);
}

uint64_t sub_7A094(uint64_t a1, uint64_t a2)
{
  uint64_t StartedAction;

  StartedAction = type metadata accessor for GetStartedActionEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(StartedAction - 8) + 32))(a2, a1, StartedAction);
  return a2;
}

uint64_t sub_7A0D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GetStartedActionEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_7A0EC(_QWORD *a1)
{
  return GetStartedActionEvent.Model.encode(to:)(a1);
}

uint64_t sub_7A100@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295690, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_2996D0, (uint64_t)sub_798E8, a1);
}

uint64_t sub_7A124@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_295698, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_2996E8, (uint64_t)sub_79928, a1);
}

uint64_t sub_7A148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = enum case for EventProperty.required<A>(_:);
  v5 = sub_71B4(&qword_299700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v6, v4, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for GetStartedActionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_299700);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for GetStartedActionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_299700);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for GetStartedActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for GetStartedActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for GetStartedActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for GetStartedActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetStartedActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7A4F8);
}

uint64_t sub_7A4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_299700);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GetStartedActionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7A580);
}

uint64_t sub_7A580(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_299700);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_7A604(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_7A688(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_7A688(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_299788)
  {
    v2 = sub_146C4();
    v3 = sub_1470C();
    v4 = type metadata accessor for EventProperty(a1, &type metadata for GetStartedActionData, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_299788);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GetStartedActionEvent.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for EventData(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_BYTE *initializeWithCopy for GetStartedActionEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for GetStartedActionEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for GetStartedActionEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for GetStartedActionEvent.Model(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EventData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetStartedActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7A8F0);
}

uint64_t sub_7A8F0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EventData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GetStartedActionEvent.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7A970);
}

_BYTE *sub_7A970(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for EventData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_7A9E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1F94C0;
  result = type metadata accessor for EventData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GetStartedActionEvent.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_7AAA0 + 4 * byte_1F93F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_7AAD4 + 4 * byte_1F93F0[v4]))();
}

uint64_t sub_7AAD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7AADC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7AAE4);
  return result;
}

uint64_t sub_7AAF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7AAF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_7AAFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7AB04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GetStartedActionEvent.Model.CodingKeys()
{
  return &type metadata for GetStartedActionEvent.Model.CodingKeys;
}

unint64_t sub_7AB24()
{
  unint64_t result;

  result = qword_299848;
  if (!qword_299848)
  {
    result = swift_getWitnessTable(&unk_1F9574, &type metadata for GetStartedActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299848);
  }
  return result;
}

unint64_t sub_7AB6C()
{
  unint64_t result;

  result = qword_299850;
  if (!qword_299850)
  {
    result = swift_getWitnessTable("u|\a", &type metadata for GetStartedActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299850);
  }
  return result;
}

unint64_t sub_7ABB4()
{
  unint64_t result;

  result = qword_299858;
  if (!qword_299858)
  {
    result = swift_getWitnessTable(&unk_1F950C, &type metadata for GetStartedActionEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299858);
  }
  return result;
}

uint64_t sub_7ABF8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x800000000021F770;
    if (a2 == 0x800000000021F770)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000000021F770, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746144746E657665 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746144746E657665, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_7ACF0(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, qword_299860, &enum case for SessionGroup.default(_:));
}

uint64_t static AppSessionStartEvent.sessionGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299860, a1);
}

uint64_t sub_7AD30(uint64_t a1)
{
  return sub_7090(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, qword_299878, &enum case for TimestampGranularity.jitter(_:));
}

uint64_t static AppSessionStartEvent.timestampGranularity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_710C(&qword_2956A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299878, a1);
}

uint64_t AppSessionStartEvent.orientationData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AppSessionStartEvent.orientationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_71B4(&qword_299210);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AppSessionStartEvent.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionStartEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AppSessionStartEvent(uint64_t a1)
{
  return sub_74F4(a1, qword_299900, (uint64_t)&nominal type descriptor for AppSessionStartEvent);
}

uint64_t AppSessionStartEvent.eventData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionStartEvent(0) + 20);
  v4 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AppSessionStartEvent.eventData.modify())()
{
  type metadata accessor for AppSessionStartEvent(0);
  return BridgedContentAcquisitionType.rawValue.getter;
}

uint64_t AppSessionStartEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = enum case for EventProperty.optional<A>(_:);
  v3 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = a1 + *(int *)(type metadata accessor for AppSessionStartEvent(0) + 20);
  v5 = enum case for EventProperty.required<A>(_:);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
}

__n128 AppSessionStartEvent.Model.orientationData.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = v1[1].n128_u32[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u32[0] = v2;
  return result;
}

uint64_t AppSessionStartEvent.Model.eventData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppSessionStartEvent.Model(0) + 20);
  v4 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AppSessionStartEvent.Model(uint64_t a1)
{
  return sub_74F4(a1, qword_299990, (uint64_t)&nominal type descriptor for AppSessionStartEvent.Model);
}

uint64_t AppSessionStartEvent.Model.init(orientationData:eventData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_DWORD *)(a3 + 16) = v5;
  v6 = a3 + *(int *)(type metadata accessor for AppSessionStartEvent.Model(0) + 20);
  v7 = type metadata accessor for EventData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t sub_7B010()
{
  _BYTE *v0;

  if (*v0)
    return 0x746144746E657665;
  else
    return 0x7461746E6569726FLL;
}

uint64_t sub_7B05C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7C06C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7B080(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7B23C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7B0A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7B23C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppSessionStartEvent.Model.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;
  int v21;

  v3 = v1;
  v5 = sub_71B4(&qword_299890);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_7988(a1, v9);
  v11 = sub_7B23C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppSessionStartEvent.Model.CodingKeys, &type metadata for AppSessionStartEvent.Model.CodingKeys, v11, v9, v10);
  v12 = *((_DWORD *)v3 + 4);
  v20 = *v3;
  v21 = v12;
  v19 = 0;
  v13 = sub_7132C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v20, &v19, v5, &type metadata for OrientationData, v13);
  if (!v2)
  {
    v14 = (uint64_t)v3 + *(int *)(type metadata accessor for AppSessionStartEvent.Model(0) + 20);
    LOBYTE(v20) = 1;
    v15 = type metadata accessor for EventData(0);
    v16 = sub_178F0(&qword_295D98, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v20, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_7B23C()
{
  unint64_t result;

  result = qword_299898;
  if (!qword_299898)
  {
    result = swift_getWitnessTable(&unk_1F979C, &type metadata for AppSessionStartEvent.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_299898);
  }
  return result;
}

uint64_t AppSessionStartEvent.Model.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t started;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  char v32;

  v25 = a2;
  v28 = type metadata accessor for EventData(0);
  v26 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_71B4(&qword_2998A0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for AppSessionStartEvent.Model(0);
  __chkstk_darwin(started);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_7988(a1, v12);
  v13 = sub_7B23C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppSessionStartEvent.Model.CodingKeys, &type metadata for AppSessionStartEvent.Model.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v23 = started;
    v24 = v5;
    v15 = v27;
    v14 = v28;
    v32 = 0;
    v16 = sub_71BB8();
    v17 = v29;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v30, &type metadata for OrientationData, &v32, v29, &type metadata for OrientationData, v16);
    v18 = v31;
    *(_OWORD *)v10 = v30;
    *((_DWORD *)v10 + 4) = v18;
    LOBYTE(v30) = 1;
    v19 = sub_178F0(&qword_295DB8, (uint64_t)&protocol conformance descriptor for EventData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v14, &v30, v17, v14, v19);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
    v20 = v25;
    (*(void (**)(char *, _QWORD *, uint64_t))(v26 + 32))(&v10[*(int *)(v23 + 20)], v15, v14);
    sub_7B4C8((uint64_t)v10, v20);
  }
  return sub_7DAC(a1);
}

uint64_t sub_7B4C8(uint64_t a1, uint64_t a2)
{
  uint64_t started;

  started = type metadata accessor for AppSessionStartEvent.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 32))(a2, a1, started);
  return a2;
}

uint64_t sub_7B50C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AppSessionStartEvent.Model.init(from:)(a1, a2);
}

uint64_t sub_7B520(_QWORD *a1)
{
  return AppSessionStartEvent.Model.encode(to:)(a1);
}

uint64_t sub_7B534@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956A0, (uint64_t (*)(_QWORD))&type metadata accessor for SessionGroup, (uint64_t)qword_299860, (uint64_t)sub_7ACF0, a1);
}

uint64_t sub_7B558@<X0>(uint64_t a1@<X8>)
{
  return sub_7F40(&qword_2956A8, (uint64_t (*)(_QWORD))&type metadata accessor for TimestampGranularity, (uint64_t)qword_299878, (uint64_t)sub_7AD30, a1);
}

uint64_t sub_7B57C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = enum case for EventProperty.optional<A>(_:);
  v5 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
  v6 = a2 + *(int *)(a1 + 20);
  v7 = enum case for EventProperty.required<A>(_:);
  v8 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

uint64_t *initializeBufferWithCopyOfBuffer for AppSessionStartEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_71B4(&qword_299210);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_71B4(&qword_295D70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for AppSessionStartEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_71B4(&qword_295D70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AppSessionStartEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for AppSessionStartEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AppSessionStartEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AppSessionStartEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_71B4(&qword_299210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_71B4(&qword_295D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppSessionStartEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7B938);
}

uint64_t sub_7B938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_71B4(&qword_299210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_71B4(&qword_295D70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AppSessionStartEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7B9C0);
}

uint64_t sub_7B9C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_71B4(&qword_299210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_71B4(&qword_295D70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_7BA44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_7BAC8(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_8734(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

